/*
 *  SNMP Agent (sockets.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#include <stdio.h>
#include <string.h>
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "sys/filio.h"
#include "sys/sockio.h"
#include "net/if.h"
#include "protocols/dhcp.h"
#include "sys/dcistructs.h"
#include "netinet/in.h"
#include "arpa/inet.h"

#include "sockets.h"
#include "socklib.h"
#include "memory.h"
#include "agent.h"

#include "asn1.h"
#include "snmp.h"

#include "DebugLib/DebugLib.h"

enum {
        max_sizeof_SNMP_PACKET = 1500
};

/* This is the socket handle which we can use for all our activities, including
 * sending ioctls to the Internet module, and actually receiving the incoming
 * datagrams that are response sto our requests.
 */
static int s;



/* Sets an IP address type field on an interface - command indicates which types of
 * address - netmask (SIOCSIFNETMASK) or address (SIOCSIFADDR).  Any other calls
 * which use the sockaddr version of the ifr union may use this too.
 */
static int sockets_set_address(const char *ifname, struct in_addr in, u_long command)
{
        struct ifreq req;
        struct sockaddr_in *const sin = (struct sockaddr_in *)&req.ifr_addr;

	sockets_ensure_init();

	(void) memset(&req, '\0', sizeof(req));
	(void) strncpy(req.ifr_name, ifname, IFNAMSIZ);
        sin->sin_family = AF_INET;
#ifndef COMPAT_INET4
        sin->sin_len = sizeof(*sin);
#endif
	sin->sin_port = 0;
	sin->sin_addr = in;

	return socketioctl(s, command, &req);
}

/* This routine pulls the loopback interface into existence, otherwise we are
 * unable to bind to the snmp port because there are no active IP addresses,
 */
static void sockets_get_loopback(void)
{
        struct in_addr loopback;

	if (inet_aton("127.0.0.1", &loopback)) {
	        sockets_set_address("lo0", loopback, SIOCSIFADDR);
	}
}

/* Creates a new datagram socket and binds it to the SNMP client port so that it
 * receives copies of any incoming datagrams on any interface.
 */
void sockets_init(void)
{
	struct sockaddr_in sin;

        s = socket(PF_INET, SOCK_DGRAM, 0);
        if (s == -1) {
                dprintf(("sockets", "socket() failed -> errno %d (%s)\n", errno, _inet_err()));
                return;
        }

	(void) memset(&sin, '\0', sizeof(sin));
	sin.sin_family = AF_INET;
#ifndef COMPAT_INET4
	sin.sin_len = sizeof(sin);
#endif
	sin.sin_addr.s_addr = htonl(INADDR_ANY);
	sin.sin_port = htons(SNMP_PORT);

	sockets_get_loopback();

	if (bind(s, (struct sockaddr *) &sin, sizeof(sin)) < 0) {
	        /* Erk - unable to bind.  We have a problem - reset ourselves,
	         * although it probably won't do much good.  This is serious.
	         * Surely the Internet module must be broken if this fails?
	         */
                dprintf(("sockets", "bind() failed -> errno %d (%s)\n", errno, _inet_err()));
	        sockets_discard();
	}
	else {
		/* Set taskwindow flag - for testing mainly, but it doesn't actually
		 * harm it having the bit set.  Request events when data is delivered
		 * to the socket, and ensure that it is using non-blocking I/O.  If
		 * events are not enabled, this module will not work as it relies on
		 * them to drive the SNMP processing engine.
		 */
	        int one = 1;

	        (void) ioctl(s, FIOSLEEPTW, &one);
	        (void) ioctl(s, FIOASYNC, &one);
	        (void) ioctl(s, FIONBIO, &one);
	}
}

void sockets_discard(void)
{
        if (s != -1) {
                (void) socketclose(s);
                s = -1;
        }
}

static void sockets_dispatch(char *packet, size_t length, struct sockaddr_in *from, void *pw)
{
        (void) pw;

        dprintf(("sockets", "SNMP packet received from %s:\n", inet_ntoa(from->sin_addr)));
        ddumpbuf("sockets", packet, length, 0);

        /* We should validate the source host now */
        if (1 /* host_is_ok */) {
                int out_length = max_sizeof_SNMP_PACKET;
                char *outpacket = packet + out_length;
                if (snmp_agent_parse(packet, length, outpacket, &out_length, from->sin_addr)) {
                        dprintf(("sockets", "Sending reply to %s\n", inet_ntoa(from->sin_addr)));
                        ddumpbuf("sockets", outpacket, out_length, 0);
                        (void) sendto(s, outpacket, out_length, 0, (void *) from, sizeof(*from));
                }
        }
}

int sockets_data_arrived(int ns, void *private_word)
{
        if (ns != s) {
                /* Not our socket - pass the event on */
                return 1;
        }

        /* The PRMs will harp on about re-enabling interrupts by calling
         * _kernel_irqs_on() at this point, and that it is safe because it is in
         * a callback already.
         *
         * If there's any static variables, then it's not safe.
         */
	_kernel_irqs_on();

	/* Drain socket ... no more events unless we do */
	for (;;) {
	        struct sockaddr_in sin;
        	int sin_len = sizeof(sin);
	        int res;
	        char *packet = damem_alloc(2 * max_sizeof_SNMP_PACKET);

		if (packet == NULL) {
		        char buf[4];
		        if (recv(s, buf, sizeof(buf), 0) > 0) continue; else break;
		}

	        res = recvfrom(s, packet, max_sizeof_SNMP_PACKET, 0, (void *) &sin, &sin_len);
	        if (res > 0) {
	                sockets_dispatch(packet, res, &sin, private_word);
	        }
	        damem_free(packet);
	        if (res <= 0) break;
	}

	/* Claim the event - it's our socket, nobody else should be interested.
	 * If they were, then it's tough because they should have bound their
	 * own datagram socket to the snmp port, then they'd have got a copy
	 * of the packet too.
	 */
        return 0;
}

/* Called before using the socket to make sure we really did create it.  It may
 * have been the case that we tried to create it before the Internet module was
 * present, in which case creation would have failed.  Repeated failure to create
 * the datagram socket is not a feasible situation except in the absense of the
 * Internet module - which would be a rather serious problem in itself!
 */
void sockets_ensure_init(void)
{
        if (s == -1) {
                sockets_init();
        }
}
