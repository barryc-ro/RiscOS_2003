/*
 *  SNMP Agent (module.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "VersionNum"
#include "SNMPAgent.h"
#include "sockets.h"
#include "memory.h"

#include "DebugLib/DebugLib.h"

#define EventV 0x10

#define SOCKET_ASYNC_EVENT  1
int snmpagent_event_handler(_kernel_swi_regs *r, void *private_word)
{
        (void) private_word;

        if (r->r[1] == SOCKET_ASYNC_EVENT) {
                /* module needs to decide whether to swallow the event or not */
        	return sockets_data_arrived(r->r[2], private_word);
        }
        return 1; /* Pass event on */
}

static void module_disable_internet_event(void)
{
	(void) _swix(OS_Byte, _INR(0,1), 13, 19); /* disable internet event */
}

static void module_enable_internet_event(void)
{
	(void) _swix(OS_Byte, _INR(0,1), 14, 19); /* enable internet event */
}

static void module_clearsystemhooks(void *private_word)
{
	module_disable_internet_event();
	(void) _swix(OS_Release, _INR(0,2), EventV, snmpagent_event, private_word);
}

static _kernel_oserror *module_initsystemhooks(void *private_word)
{
        _kernel_oserror *e;

	e = _swix(OS_Claim, _INR(0,2), EventV, snmpagent_event, private_word);
	if (e == NULL) {
	        module_enable_internet_event();
	}

	return e;
}

/* End callafter/callback management */

_kernel_oserror *snmpagent_swi(int swi_number, _kernel_swi_regs *r, void *private_word)
{
        _kernel_oserror *e = NULL;
        (void) private_word;

        switch (swi_number) {
                case SNMP_Version - SNMP_00:
                        r->r[0] = Module_VersionNumber;
                        break;
                default:
	                return error_BAD_SWI;
        }

        return e;
}

_kernel_oserror *snmpagent_finalise(int fatal, int podule, void *private_word)
{
        (void) fatal;
        (void) podule;

	sockets_discard();
	module_clearsystemhooks(private_word);
	memory_finalise();

        return NULL;
}

_kernel_oserror *snmpagent_initialise(const char *cmd_tail, int podule_base, void *private_word)
{
        _kernel_oserror *e;

        (void) cmd_tail;
        (void) podule_base;

    	debug_initialise("SNMP", "<Wimp$ScrapDir>.SNMPTrace", "");
    	debug_atexit();
    	debug_set_device(DEBUGIT_OUTPUT);
    	/*debug_set_stamp_debug (TRUE);*/
    	dprintf(("", Module_Title " " Module_FullVersion " is starting\n"));

#ifdef TRACE_ENABLED
    	debug_initialise_trace (DEBUGIT_OUTPUT, "");
#endif

	e = memory_initialise();
	if (e != NULL) {
	        return e;
	}

	e = module_initsystemhooks(private_word);
	if (e == NULL) {
	        sockets_init();
	}

	{ char *ptr[] = { "SNMPAgent", NULL };
	main(1, ptr);
	}

        return e;
}

void snmpagent_service(int service_number, _kernel_swi_regs *r, void *private_word)
{
        (void) service_number;
	(void) r;
	(void) private_word;

	/* Only Service_SNMP will arrive here */
}

_kernel_oserror *snmpagent_command(const char *arg_string, int argc, int cmd_no, void *private_word)
{
        (void) private_word;
        (void) argc;
        (void) arg_string;

        switch (cmd_no) {
        	case CMD_SNMPInfo:
                        _swix(OS_Write0, _IN(0),
                        	Module_Title " " Module_MajorVersion " "
                                Module_MinorVersion " (" Module_Date ")");
                        _swix(OS_NewLine, 0);
	                break;

	        default:
	                break;
        }

        return NULL;
}
