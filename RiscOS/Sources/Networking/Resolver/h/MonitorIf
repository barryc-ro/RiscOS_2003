/* MonitorIf.h */

#ifndef __MONITORIF_H
#define __MONITORIF_H

/* ArcPPP supports the following SWIs: */

/* SWI ArcPPP_MonitorVersion
 * exit:
 *   r0 = version number for this interface.  If you understand
 *        version xyy then all versions upto x99 will be OK. */

/* SWI ArcPPP_ReadPortStatus
 * entry:
 *   r0 = port index or -> port number
 *   r1-> a port_status_str
 *   r3 = length of structure passed to ArcPPP
 * exit:
 *   structure name = NULL or structure filled in with info
 *   about the port. */

/* SWI ArcPPP_ReadMessages
 * entry:
 *   r1-> buffer for messages
 *   r3 = length of buffer
 * exit:
 *   r0 != 0 if there are more messages to read
 *   r2 = number of bytes within buffer which were used
 *   buffer is filled in with a number of copies of messageflags followed
 *   by text or tag, followed by data (as for printf)
 *   Extra printf types are:
 *     %z display a hex dump of data (data is BYTE length; BYTE data[length])
 *     %* print double stars (data is DWORD number)
 *     %a print an IPv4 address (data is DWORD)
 */

/* SWI ArcPPP_Command
 * entry:
 *   r0 = command number (one of CMND_xxx)
 *   r1-> name of unit (not needed for all commands) or NULL
 *   r2-> name of host (not needed for all commands) or NULL
 * exit: */

/* SWI ArcPPP_ReloadConfig
 * When this SWI is issued ArcPPP will reread the config file */

/* SWI ArcPPP_ReadHostStatus
 * entry:
 *   r0 = host index or -> host number
 *   r1-> a host_status_str
 *   r3 = length of structure passed to ArcPPP
 * exit:
 *   structure name = NULL or structure filled in with info
 *   about the host. */

#define MONITORIF_VERSION       202

#define ArcPPP_base		0x6AF40
#define ArcPPP_MonitorVersion	ArcPPP_base + 16
#define ArcPPP_ReadPortStatus	ArcPPP_base + 17
#define ArcPPP_ReadMessages	ArcPPP_base + 18
#define ArcPPP_Command		ArcPPP_base + 19
#define ArcPPP_ReloadConfig	ArcPPP_base + 20
#define ArcPPP_ReadHostStatus	ArcPPP_base + 21

typedef unsigned int uint;

typedef struct
{
  char *port_name;
  char state[16];

  union
  {
    uint all;
    struct
    {
      uint led_txd    : 1;
      uint led_rts    : 1;
      uint led_rxd    : 1;
      uint led_cts    : 1;
      uint led_dtr    : 1;
      uint led_dcd    : 1;
      uint holds_port : 1; /* ArcPPP currently has ownership of the port */
      uint connected  : 1;
      uint using_port : 1; /* Port is actually doing something (v201+ only) */
    } b;
  } flags;

  int tx_bytes;
  int rx_bytes;
  int tx_frames;
  int rx_frames;
  int tx_rate;
  int rx_rate;
  int rx_bad_frames;

  int online_time;      /* In seconds */
  int cost;             /* In 1/10p */

  int tx_compression;
  int rx_compression;

  int timeleft;         /* Seconds until timeout will occur (or -1 for none) */

  int tx_discard;       /* Number of frames discarded due to timeout */
  int rx_discard;       /* Number of individually valid frames discarded */

} port_status_str;

typedef struct
{
  char *host_name;

  union
  {
    uint all;
    struct
    {
      uint demand_dial: 1; /* Demand dial enabled */
      uint locked     : 2; /* 0 = unlocked, 1 = temp lock, 2 = call rate lock */
    } b;
  } flags;

} host_status_str;

typedef union messageflags
{
  uint all;
  struct
  {
    uint colour    : 4; /* b0-3 = colour to display message in */
    uint reserved1 : 4;
    uint nocr      : 1; /* TRUE if there is no CR after this message */
    uint lookup    : 1; /* TRUE if the messge should be looked up in the config file */
    uint reserved2 : 6;
    uint dest      : 8; /* b0-6: Port or unit number to which this message refers */
                        /* b7  : TRUE for unit messages, FALSE for ports */
    uint length    : 8; /* Length of message including header & padding */
  } f;
} messageflags;

typedef enum
{ CMND_CLOSE,      /* Close a port.  set port=NULL to close by host, else close by port */
  CMND_OPEN,       /* Open a connection to host specified */
  CMND_LOCK,       /* Lock the host specified (prevent dial on demand for 5 mins) */
  CMND_UNLOCK,     /* Unlock the host specified */
  CMND_NOTIMEOUT   /* Stop the port specified from timing out and disconnecting */
} command_t;

#endif
