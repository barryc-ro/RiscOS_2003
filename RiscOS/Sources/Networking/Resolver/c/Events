/*
 * Program:     Events.c - backgrounding Internet events for Resolver module
 *
 * Project:     DNS Resolver module
 *
 * Author:      Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:        11 Febuary 1995
 * Last Edited: 5 June 1995
 *
 * Copyright 1995 by ANT Limited
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include <time.h>
#include "socket.h"
#include "ioctl.h"
#include "in.h"
#include <errno.h>
#include "arpa/nameser.h"
#include "arpa/inet.h"
#include "resolv.h"
#include "herrno.h"
#include "netdb.h"

#include "sys/types.h"
#include "DeskLib:Core.h"
#include "DeskLib:LinkList.h"
#include "DeskLib:Time.h"
#include "Cache.h"
#include "Events.h"
#include "Debug.h"
#include "res_query.h"
#include "Core.h"
#include "Hosts.h"
#include "MonitorIf.h"
#include "Server.h"


/* Global variables */ 
extern void *private_word;
static volatile int tick_pending = 0;
static volatile int datagram_pending = 0;
static volatile int callback_pending = 0;

static int              s = -1;         /* socket used for communications */
static fd_set        	dsmask;
extern BOOL		online = FALSE; /* PPP status */

#ifdef server_BUILD
static volatile int server_pending = 0;
extern int              ss;        	/* server socket used for communications */
#endif

#ifndef FD_SET
#define NFDBITS         32
#define FD_SETSIZE      32
#define FD_SET(n, p)    ((p)->fds_bits[(n)/NFDBITS] |= (1 << ((n) % NFDBITS)))
#define FD_CLR(n, p)    ((p)->fds_bits[(n)/NFDBITS] &= ~(1 << ((n) % NFDBITS)))
#define FD_ISSET(n, p)  ((p)->fds_bits[(n)/NFDBITS] & (1 << ((n) % NFDBITS)))
#define FD_ZERO(p)      memset((char *)(p), 0, sizeof(*(p)))
#endif


/*  Generate a timer, of given centisecond delay.
 */
static void setup_ticker(int cs)
{
  _kernel_swi_regs r;

  TRACE2("setup_ticker: @ %d + %d\n", Time_Monotonic(), cs);
  r.r[0] = cs;
  r.r[1] = (int) timer_entry;
  r.r[2] = (int) private_word;
  _kernel_swi(OS_CallAfter, &r, &r);
}


/*  Release ticker & Internet event handlers.
 */
extern void clear_ticker_and_event(void)
{
  _kernel_swi_regs r;

  TRACE("clear_ticker_and_event:\n");
  _kernel_osbyte(13, Event_Internet, 0);
  r.r[0] = 0x10;
  r.r[1] = (int) inetevent_entry;
  r.r[2] = (int) private_word;
  _kernel_swi(OS_Release, &r, &r);

  /* Clear all pending events that we haven't caught */
  r.r[0] = (int) timer_entry;
  r.r[1] = (int) private_word;
  _kernel_swi(OS_RemoveTickerEvent, &r, &r);
}


/*  Setup Internet event handler.
 */
extern _kernel_oserror *setup_ticker_and_event(void)
{
  _kernel_swi_regs r;
  _kernel_oserror *ep;

  TRACE("setup_ticker_and_event:\n");
  r.r[0] = 0x10;
  r.r[1] = (int) &inetevent_entry;
  r.r[2] = (int) private_word;
  ep = _kernel_swi(XOS_Bit + OS_Claim, &r, &r);
  if (ep) return(ep);
  _kernel_osbyte(14, Event_Internet, 0);
  return(NULL);
}


/*  Generate a callback, if not already pending.
 */
static void setup_callback(void)
{
  if (callback_pending == 0)
  {
    _kernel_swi_regs r;
 
    r.r[0] = (int) &callback_entry;
    r.r[1] = (int) private_word;
    callback_pending = 1;
    _kernel_swi(OS_AddCallBack, &r, &r);
  }
}


/*  Clear callback, if one pending.
 */
extern void clear_callback(void)
{
  if (callback_pending)
  {
    _kernel_swi_regs r;

    TRACE("clear_callback:\n");
    r.r[0] = (int) &callback_entry;
    r.r[1] = (int) private_word;
    callback_pending = 0;
    _kernel_swi(OS_RemoveCallBack, &r, &r);
  }
}
 
 
/*  A function to handle the internet events.
 */
extern int inetevent_handler(_kernel_swi_regs *r, void *pw)
{
  if (r->r[0] == Event_Internet && r->r[2] == s)
  {
    TRACE2("******** inetevent_handler: client %x %x\n", r->r[1], r->r[2]);
    datagram_pending = 1;
    setup_callback();
    return(VIA_STACK);
  }
#ifdef server_BUILD
  if (r->r[0] == Event_Internet && r->r[2] == ss)
  {
    TRACE2("******** inetevent_handler: server %x %x\n", r->r[1], r->r[2]);
    server_pending = 1;
    setup_callback();
    return(VIA_STACK);
  }
#endif
  return(VIA_R14); 
}


/*  A function to handle ticker events.
 */
int timer_handler(_kernel_swi_regs *r, void *pw)
{
  /* TRACE("timer_handler:\n"); */
  if (tick_pending < 1) tick_pending = 1;
    else tick_pending++;
  setup_callback();
  return(VIA_R14);
}


/*  Process of callafter ticks.
 *  1. Scan through cache list, looking for DNS requests that have timed out,
 *  and relaunching to next server in list (if any), or marking as failed.
 *  2. Also retry attempts, that have waited as cache_PENDING for the period
 *  cache_DELAY before a retry attempt is sent out.
 */
extern void res_tick(void)
{
  cache_rec *cr = (cache_rec *) cache_anchor.next;
  int ct = Time_Monotonic();
  
  TRACE1("res_tick: @ %d\n", ct);
  while (cr)
  {
    /* TRACE2("res_tick: %x %d\n", (int) cr->dns, cr->dns ? cr->dns->state : -1); */   
    if ((cr->dns) && (cr->failure == -3) && (cr->dns->state == dns_OK) &&
        (cr->dns->time+cache_delay <= ct))
    {
      port_status_str state;
      _kernel_swi_regs r;

      /* DNS retry period expired */
      TRACE1("res_tick: RETRY DELAY timed out! relaunching '%s'\n", cr->hostname);
      r.r[0] = (int) "Modem";
      r.r[1] = (int) &state;
      r.r[2] = 0;
      r.r[3] = sizeof(state);
      if (!_kernel_swi(XOS_Bit | ArcPPP_ReadPortStatus, &r, &r))
      {
        if (!online && state.flags.b.using_port && state.flags.b.connected)
        {
          online = TRUE;
          /* Closing down socket in case we are demand dialling? */
          res_close(); 
        }
      } else online = TRUE;
      res_launch(cr->hostname, cr, cr->dns->numeric);
    }
    if ((cr->dns) && (cr->dns->state == dns_PENDING) && (cr->dns->time+cache_TIMEOUT <= ct))
    {
      /* DNS request has timed out! */
      TRACE("res_tick: timed out!\n");
      if (cr->dns->ns < _res.nscount-1)
      {
        /* Loop on name server, if we have multiple name servers */
        cr->dns->ns++;
        cr->dns->state = dns_NONE;
        cr->dns->domain = (char **) -1;
        res_setdomain(cr->hostname, cr->dns);
        TRACE1("res_tick: ns loop %d\n", cr->dns->ns);
        cr->time = Time_Monotonic();
        /* Retry request with new name server */
        if (cr->dns->numeric)
        {
          res_query(cr->hostname, C_IN, T_PTR, (u_char *) cr->dns->buf, sizeof(cr->dns->buf),
            cr->dns);          
        }
        else
        {
          res_querydomain(cr->hostname, (cr->dns->domain) ? *cr->dns->domain : NULL, C_IN, T_A,
            (u_char *) cr->dns->buf, sizeof(cr->dns->buf), cr->dns);
        }
      }
      else
      {
        /* No more name servers, mark as failed */

        /* Hmmm .... */
    
        TRACE1("res_tick: failed retry %d\n", cr->retry);
        if (cr->retry < cache_retries && !cr->server)
        {
          TRACE("res_tick: updated PENDING to RETRY PENDING\n");
          cr->time = cr->dns->time = Time_Monotonic();
          cr->retry++;
          cr->flags = flags_PENDING;
          TRACE1("res_tick: RETRY #%d\n", cr->retry);
          cr->failure = -3;
          cr->dns->state = dns_OK;
          setup_ticker(cache_delay);
        }
        else
        {
          cr->flags = flags_FAILED;
          TRACE("res_tick: updated PENDING to FAILED\n");
          cr->failure = -2;
          heap_free(cr->dns);  
          cr->dns = NULL;
#ifdef server_BUILD
          if (cr->server) server_result(cr);
#endif
        }
      }
    }  
    cr = (cache_rec *) cr->header.next;
  }
  TRACE("res_exit:\n");
}


/*  A function to handle the callbacks caused by internet events.
 */
extern int callback_handler(_kernel_swi_regs *regs, void *pw)
{
  callback_pending = 0;
  if (datagram_pending)
  {
    TRACE("******** callback_handler: client datagram\n");
    datagram_pending = 0;
    /* Handle incoming data */
    res_rec();
  }
#ifdef server_BUILD
  if (server_pending)
  {
    TRACE("******** callback_handler: server datagram\n");
    server_pending = 0;
    /* Handle incoming data */
    server_rec();
  }
#endif
  if (tick_pending > 0)
  {
    TRACE1("******** callback_handler: ticker %d\n", tick_pending);
    tick_pending--;
    /* Deal with timeouts on DNS requests */
    res_tick();
  }
  return(VIA_R14);
}


/*  Scan list of cache items for a unique ID word in the received datagram.
 */
static cache_rec *packetid(int id)
{
  cache_rec *cr = (cache_rec *) cache_anchor.next;

  TRACE1("packetid: search %d\n", id);
  while (cr)
  {
    if (cr->dns)
    {
      HEADER *hp = (HEADER *) &cr->dns->buf;
      TRACE2("packetid: hp->id %d id %d\n", hp ? hp->id : -1, id);
      if ((hp) && (hp->id == id)) return(cr);
    }  
    cr = (cache_rec *) cr->header.next;
  }
  TRACE("packetid: not found\n");
  return(NULL);
}


/*  Process error code of pending cache entry. Deal with launching retries, etc, etc.
 */
extern void res_process(cache_rec *cr)
{
  BOOL err = FALSE;
    
  /* If no server present, give up.
   * If name isn't found in this domain, keep trying higher domains in the search list
   * (if that's enabled).
   * On a NO_DATA error, keep trying, otherwise a wildcard entry of another type could
   * keep us from finding this entry higher in the domain.
   * If we get some other error (negative answer or server failure), then stop
   * searching up.
   */
  TRACE1("res_process: @ %d\n", Time_Monotonic());
  TRACE2("res_process: %x err %d\n", (int) cr, cr->dns->errno);
  if (cr->dns->errno == ECONNREFUSED)
  {
    TRACE("res_process: domain ECONNREFUSED\n");
    cr->dns->errno = TRY_AGAIN;
    err = TRUE;
  }
  else
  {
    /* if (cr->dns->errno == NO_DATA) got_nodata++; */
    /* if ((cr->dns->errno != HOST_NOT_FOUND && cr->dns->errno != NO_DATA) ||
        (_res.options & RES_DNSRCH) == 0)
    {
      TRACE("res_process: domain server error\n");
      err = TRUE;
    } */
  }
  
  if (!err) res_setdomain(cr->hostname, cr->dns);
  if ((!err) && (cr->dns->domain) && (*cr->dns->domain))
  {
    int ret;
    
    /* Loop on domain search path */
    TRACE1("res_process: domain loop '%s'\n", *cr->dns->domain);
    do
    {
      cr->time = Time_Monotonic();
      ret = res_querydomain(cr->hostname, *cr->dns->domain, C_IN, T_A,
        (u_char *) cr->dns->buf, sizeof(cr->dns->buf), cr->dns);
      if (ret < 0) res_setdomain(cr->hostname, cr->dns);
    } while ((ret < 0) && (cr->dns->domain) && (*cr->dns->domain));
    if ((!cr->dns->domain) || (!*cr->dns->domain)) err = TRUE;
  }
  
  if ((err) || (!cr->dns->domain) || !(*cr->dns->domain) || (cr->dns->numeric))
  {
    /* Complete failure - mark as failed */
    TRACE2("res_process: failed retry %d errno %d\n", cr->retry, cr->dns->errno);
    if ((cr->retry < cache_retries) && (cr->dns->errno == HOST_NOT_FOUND) && !cr->server)
    {
      TRACE("res_process: updated PENDING to RETRY PENDING\n");
      cr->time = cr->dns->time = Time_Monotonic();
      cr->retry++;
      cr->flags = flags_PENDING;
      TRACE1("res_process: RETRY #%d\n", cr->retry);
      cr->failure = -3;
      cr->dns->state = dns_OK;
      setup_ticker(cache_delay);
    }
    else
    {
      cr->flags = flags_FAILED;
      TRACE("res_process: updated PENDING to FAILED\n");
      cr->failure = -1;
      heap_free(cr->dns);  
      cr->dns = NULL;
#ifdef server_BUILD
      if (cr->server) server_result(cr);
#endif
    }
  }

  TRACE("res_process: exit\n");
}


/*  Send out packet for real.
 */
extern int res_send(char *buf, int buflen, char *answer, int anslen, dns_rec *r)
{
#ifdef DEBUG
  HEADER *hp = (HEADER *) buf;
#endif
  int on = 1;
  int len;

  r->errno = ETIMEDOUT;
  TRACE2("res_send: buf %x len %d\n", (int) answer, anslen);

  /* Use datagrams */
  TRACE1("res_send: socket %d\n", s);
  if (s < 0)
  {
    /* If socket not setup, then try and open it */
    if ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
    {
      r->errno = errno;
      TRACE1("res_send: socket err %d\n", r->errno);
      return(-1);
    }
    
    /* Mark as non-blocking */
    if (socketioctl(s, FIOASYNC, (char *) &on) == -1)
    {
      r->errno = errno;
      TRACE1("res_send: socketioctl err %d\n", r->errno);
      res_close();
      return(-1);
    }
    FD_ZERO(&dsmask);
    FD_SET(s, &dsmask);
  }
  TRACE1("res_send: socket %d\n", s);

  /* Disconnect if we want to listen
   * for responses from more than one server.
   */
  TRACE1("res_sendpacket: id %d\n", hp->id);
  if ((len = sendto(s, buf, buflen, 0, (struct sockaddr *) &_res.nsaddr_list[r->ns],
      sizeof(struct sockaddr))) != buflen)
  {
    r->errno = errno;
    /* If we get a failure of errno==0, then it is probably a good idea to reset the
     * socket, and open it again. This fixes the problem of IP link (re)connection,
     * which was breaking the Resolver.
     */
    if (r->errno <= 0) res_close();
    TRACE2("res_sendpacket: len %d sendto err %x\n", len, r->errno);
    return(-1);
  }
  TRACE1("res_sendpacket: sendto len %d\n", buflen);

  /* Generate timed callback to check for timeout */
  r->time = Time_Monotonic();
  r->state = dns_PENDING;
  setup_ticker(cache_TIMEOUT);
  
  /* Bogus result code to keep everyone happy */
  return(1);  
}


/* Don't want this allocated off the stack */
static char inpacket[MAXPACKET];

/*  Process incoming packets.
 */
extern void res_rec(void)
{
  struct sockaddr_in raddr; /* response address */
  fd_set readfds;
  struct timeval t;
  int inlen, fromlen;
  int snum;
  cache_rec *cr;
  int x;

  TRACE1("res_rec: entry %d\n", sizeof(fd_set));
  do
  {
    readfds = dsmask;
    t.tv_sec = t.tv_usec = 0;
    snum = select(s + 1, &readfds, (fd_set *) NULL, (fd_set *) NULL, &t);
    TRACE1("res_rec: select %d\n", snum);

    if (snum > 0)
    {
      HEADER *hp;
      
      fromlen = sizeof(struct sockaddr);
      inlen = recvfrom(s, inpacket, MAXPACKET, 0,
                       (struct sockaddr *) &raddr, &fromlen);
      if (inlen < 0)
      {
        TRACE("res_rec: recvfrom err\n");
        return;
      }
      if (inlen < sizeof(HEADER)) continue;

      /* Process what we've recieved */
      TRACE2("res_rec: got %d bytes at %x\n", inlen, (int) inpacket);

    for (x = 0; x < inlen; x++)
    {
      TRACE1(" %02x", inpacket[x]);
    }
    TRACE("\n");


      hp = (HEADER *) inpacket;
      TRACE1("res_rec: id %d\n", hp->id);
      cr = packetid(hp->id);
      if (!cr) continue;

      /* We have a valid reply packet - what shall we do with it? */
      memcpy(&cr->dns->buf, inpacket, MAXPACKET);

      /* Check for errors from DNS server */
      if (hp->rcode != NOERROR || ntohs(hp->ancount) == 0)
      {
#ifdef DEBUG
        TRACE2("res_rec: rcode = %d, ancount=%d\n", hp->rcode, ntohs(hp->ancount));
        switch (hp->rcode)
        {
          case NXDOMAIN:
            cr->dns->errno = HOST_NOT_FOUND;
            break;
          case SERVFAIL:
            cr->dns->errno = TRY_AGAIN;
            break;
          case NOERROR:
            cr->dns->errno = NO_DATA;
            break;
          case FORMERR:
          case NOTIMP:
          case REFUSED:
          default:
            cr->dns->errno = NO_RECOVERY;
            break;
        }
        TRACE2("res_rec: rcode err %d failure %d\n", cr->dns->errno, cr->failure);
#endif
        cr->host = NULL;
      }
      else
      {
        cr->host = getanswer((char *) &cr->dns->buf, inlen, (cr->dns->numeric) ? 1 : 0, cr);
        TRACE1("res_rec: host %x\n", (int) cr->host);
      }
      /* If no valid hostent obtained, then we loop to next domain query */ 
      if (!cr->host)
      {
        res_process(cr);
        return;
      }
      if (cr->flags & flags_PENDING)
      {
        /* Faffing about required if this was a numeric lookup */
        TRACE1("res_rec: updating numeric? %d\n", cr->dns->numeric);
        if (cr->dns->numeric == 1)
        {
          int s_addr = _inetraddr(cr->hostname);

          cr->host->h_addr_list = heap_realloc(cr->host->h_addr_list, sizeof(char *) * 2);
          cr->host->h_addr_list[0] = heap_alloc(sizeof(int));
          memcpy(cr->host->h_addr_list[0], &s_addr, sizeof(int));
	  cr->host->h_addr_list[1] = 0;
	  /* Replace n.n.n.n.in-addr.arpa with real hostname in cache */
	  if (cr->host->h_name)
	  {
	    heap_free(cr->hostname);
	    cr->hostname = cpystr(cr->host->h_name);
	  }
        }
        cr->flags = flags_VALID;
        TRACE("res_rec: updated PENDING to VALID\n");
        heap_free(cr->dns);  
        cr->dns = NULL;
        cr->failure = 0;
#ifdef server_BUILD
        if (cr->server) server_result(cr);
#endif
        cachemerge(cr);
      }
    }
  } while (snum > 0);
  TRACE("res_rec: exit OK\n");
}


/*  Closedown open socket (if any).
 */
extern void res_close(void)
{
  TRACE1("res_close: closing %d\n", s);
  if (s >= 0) socketclose(s);
  s = -1;
}

