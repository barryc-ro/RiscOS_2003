/*
 * Program:	SWI.c - module interface for Resolver module
 *
 * Project:	DNS Resolver module
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	3 Febuary 1995
 * Last Edited:	9 July 1997
 *
 * Copyright 1996,1997 by ANT Limited
 */

#include "kernel.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "swis.h"
#include "htypes.h"
#include "sys/errno.h"
#include "netinet/in.h"
#include "netdb.h"
#include "libs/desklib/Core.h"
#include "libs/desklib/LinkList.h"
#include "Cache.h"
#include "Debug.h"
#include "Events.h"
#include "Hosts.h"
#include "res_query.h"
#include "ExtLib.h"
#include "Core.h"
#ifdef ANTPPP
#include "MonitorIf.h"
#endif
#include "Server.h"
#include "resolv.h"


/* Global variables */
extern void 		*private_word = NULL;
static _kernel_oserror 	rm_errbad = { 0x1e6, "Bad SWI call" };
static _kernel_oserror 	rm_badprm = { 0x0, "Bad parameters to Resolver SWI" };
static _kernel_oserror 	rm_badcache = { 0x0, "Bad cache entry" };
static _kernel_oserror 	rm_noclient = { 0x0, "No DNS service configured" };
#ifdef app_TIMED
static _kernel_oserror 	rm_badtime = { 0x0, "Pre-release Resolver code has timed out. Contact ANT Ltd <support@ant.co.uk> for a newer version." };
static BOOL CheckClock(void);
#endif
extern _kernel_oserror *res_init(void);
extern BOOL		dns_client = FALSE;
#ifdef server_BUILD
extern BOOL		dns_server = FALSE;
#endif

#ifdef DEBUG
extern FILE 		*omniout = NULL;		/* Debug trace file handle */

/*  Initialise debug spool files.
 */
static BOOL debuginit(void)
{
  if ((omniout = fopen("!TRACE", "w")) == NULL) return(FALSE);
  return(TRUE);
}


/*  Finalise debug spool files.
 */
static void debugclose(void)
{
  if (omniout != NULL) fclose(omniout);
}
#else
#define debuginit()	((void) 0)
#define debugclose()	((void) 0)
#endif


/*  This is the finalisation code
 */
static void module_final(void)
{
  TRACE("module_final:\n");
  clear_ticker_and_event();
  clear_callback();
  res_close();
#ifdef server_BUILD
  server_close();
#endif
  cachefini(TRUE);
  debugclose();
}


/*  This is the config initialisation code
 */
extern _kernel_oserror *config_init(void)
{
  char s[96];
#ifdef ANTPPP
  port_status_str state;
  _kernel_swi_regs r;
#endif

#if 0
  if (_kernel_getenv("Inet$Resolvers", s, 95) != NULL)
    fprintf(stderr, "Warning: <Inet$Resolvers> not set at Resolver module startup\n");
  if (_kernel_getenv("Inet$Hostname", s, 95) != NULL)
    fprintf(stderr, "Warning: <Inet$Hostname> not set at Resolver module startup\n");
#endif
  if (_kernel_getenv("Inet$ResolverDelay", s, 95) == NULL)
  {
    cache_delay = atoi(s)*100;
    if (cache_delay < 2*100 || cache_delay > 60*100)
    {
#if 0
      fprintf(stderr, "Warning: <Inet$ResolverDelay> must be between 2 and 60 seconds - using default of %d seconds\n", cache_DELAY/100);
#endif
      cache_delay = cache_DELAY;
    }
  }
  if (_kernel_getenv("Inet$ResolverRetries", s, 95) == NULL)
  {
    cache_retries = atoi(s);
    if (cache_retries < 1 || cache_retries > 10)
    {
#if 0
      fprintf(stderr, "Warning: <Inet$ResolverRetries> must be between 1 and 10 - using default of %d retries\n", cache_RETRIES);
#endif
      cache_retries = cache_RETRIES;
    }
  }
  cachefini(TRUE);
#ifdef ANTPPP
  r.r[0] = (int) "Modem";
  r.r[1] = (int) &state;
  r.r[2] = 0;
  r.r[3] = sizeof(state);
  if (!_kernel_swi(XOS_Bit | ArcPPP_ReadPortStatus, &r, &r))
  {
    if (state.flags.b.using_port && state.flags.b.connected) online = TRUE;
      else online = FALSE;
  } else online = TRUE;
#endif
  return(res_init());
}


/*  This is the initialisation code
 */
extern _kernel_oserror *Initialise(char *cmd_tail, int podule_base, void *privateword)
{
  _kernel_oserror *ep = NULL;

  private_word = privateword;
#ifdef app_TIMED
  if (!CheckClock()) return(&rm_badtime);
#endif
  debuginit();
  TRACE("Initialise:\n");
  ep = setup_ticker_and_event();
  if (ep != NULL) return ep;
  atexit(&module_final);
  cacheinit();
  config_init();
  return(NULL);
}


/*  Call UpCall 5 for task windows.
 */
static void thread_wait(char *s)
{
  _kernel_swi_regs r;

  /* TRACE1("thread_wait: '%s'\n", s); */
  r.r[0] = 6;
  r.r[1] = 0x3800000;		/* The first word of the ROM should be non-zero */
  _kernel_swi(OS_UpCall, &r, &r);
}


/* Return non-zero if ESCAPE key pressed.
 */
static int escape_press(void)
{
  _kernel_swi_regs r;
  int carry;

  _kernel_swi_c(OS_ReadEscapeState, &r,&r,&carry);
  if (carry == 1)
  {
    /* Acknowledge ESCAPE condition, call escape handler
     */
    r.r[0] = 126;
    _kernel_swi(OS_Byte, &r,&r);
  }
  return(carry);
}


/*  Return TRUE if a valid hostname string - must consist only
 *  of alphanumeric, '-', '_' and '.' characters.
 */
static BOOL validhost(char *hostname)
{
  if (!hostname || !strlen(hostname)) return(FALSE);
  while (*hostname != '\0')
  {
    if (!isalnum(*hostname) && *hostname != '-' && *hostname != '.' && *hostname != '_')
      return(FALSE);
    hostname++;
  }
  return(TRUE);
}


/* SWI res_base+1 "Resolver_GetHost"
 *	On entry, R0 = pointer to host name string, 0 terminated
 *      On exit,  R0 = errno integer value if V flag is clear, or
 *        	     = error block pointer if V flag is set
 *        	  R1 = pointer to completed 'hostent' struct if successful,
 *        	     = 0 if other state (pending, failed, etc)
 *	All other registers preserved on exit
 *
 *	This SWI provides a DNS resolution facility that runs in the
 *	background (unlike the _GetGostByName) above. Applications need
 *	to support additional reason codes however, and some sample code
 *	for this is given below.
 *
 *	If the hostname is a valid cache item, or present in the hosts file
 *	on disc, it is returned immediately in R1, with R0 set to 0.
 *
 *	If the hostname is a cache item, marked as failed, then R1 is
 *	set to NULL (0) and R0 is either -1 (host not found), or -2
 *	(remote failure. eg, configured resolver didn't respond).
 *
 *	If the hostname is a cache item, marked as pending, then R1 is
 *	set to NULL (0) and R0 is EINPROGRESS (36 decimal). Items are
 *	marked as pending when a remote resolver lookup is in progress.
 *	The calling program is expected to periodically call _GetHost
 *	until a valid hostent is returned, or an error condition occurs.
 *
 *	The calling program should run something like;
 *
 *        REM 'EINPROGRESS' error number is 36 decimal
 *	  REPEAT
 *  	    SYS "Resolver_GetHost","host.net" TO status,hostent;flags
 *  	    error = (flags AND 1) = 1
 *	    REM Perhaps inform user of the state of this lookup
 *	  UNTIL (error) OR (status != EINPROGRESS)
 *        REM hostent is a valid pointer, or 0
 *
 *	Because name lookups can take anything up to 20 seconds or so, it is
 *	important to be able to give feedback to the user on the status of
 *	the lookup, as well as giving the foreground application time to
 *	perform other tasks.
 *
 *	Cache sweeps occur periodically - pending items are marked as
 *	failed (remote failure) after 30 seconds, failed items are removed
 *	after 10 minutes, and valid items are removed after 24 hours.
 *	You can control the caching with the SWI _CacheControl.
 *
 *	If there is a configuration error (such as Inet$Resolvers not being
 *	set), then a RISC OS error block pointer is returned in R0, and
 *	the V flag is set on exit.
 */
extern _kernel_oserror *gethost(_kernel_swi_regs *r, BOOL server)
{
  char *hostname = (char *) r->r[0];
  cache_rec *cr = NULL;

  /* Check for bad parameters on entry */
  r->r[1] = 0;
  if (!validhost(hostname)) return(&rm_badprm);

  /* Process callbacks */
  collect_callbacks();

  /* Lookup hostname in cache, ensuring it hasn't timed out */
  cr = cachefind(hostname, 0);

  /* TRACE2("gethost: '%s' %x\n", hostname, (int) cr); */
  if (cr)
  {
    /* Move cache item to front of linked list */
    LinkList_Unlink(&cache_anchor, &(cr->header));
    LinkList_AddToHead(&cache_anchor, &(cr->header));

    /* Item in cache, check flags ... */
    if (cr->flags & flags_PENDING)
    {
      /* TRACE("gethost: pending\n"); */
      r->r[0] = EINPROGRESS;
      r->r[1] = 0;
      return(NULL);
    }
    if (cr->flags & flags_VALID)
    {
      TRACE("gethost: valid\n");
      r->r[0] = 0;
      r->r[1] = (int) cr->host;
      return(NULL);
    }
    if (cr->flags & flags_FAILED)
    {
      TRACE1("gethost: failed %d\n", cr->failure);
      r->r[0] = cr->failure;
      r->r[1] = 0;
      /* If caching of FAILED lookups is disabled, we delete entry after 1st read */
      if (cache_control & ctrlbit_DISABLEFAIL) cacheclear(cr);
#ifdef app_TIMED
      if (!CheckClock()) return(&rm_badtime);
#endif
      return(NULL);
    }
    /* Must be an invalid cache item, clear it and return with error */
    cacheclear(cr);
    return(&rm_badcache);
  }
  else
  {
    struct hostent *host = NULL;
    _kernel_oserror *err = NULL;
    char s[96];
    char *p;
    int s_addr;
    int numeric = 0;

    /* Item not in cache, try a hosts file lookup */
    host = _gethtbyname(hostname);
    if (!host) host = _gethtbyaddr(hostname);
    if (host) p = host->h_name;
    if (!host && (p = strcasestr(hostname, _res.defdname)) != NULL)
    {
      TRACE1("gethost: local domain substring match '%s'\n", hostname);
      strncpy(s, hostname, 95);
      if (p-hostname < 95) s[p-hostname-1] = '\0';
      host = _gethtbyname(s);
      p = hostname;
    }
    TRACE1("gethost: host %x\n", (int) host);
    if (host)
    {
      /* If found entry in hosts file, add to local cache */
      TRACE("gethost: found in hosts file\n");
      cr = cachemerge(cacheadd(p /*host->h_name*/, host, flags_VALID | flags_HOST));
      r->r[0] = 0;
      r->r[1] = (int) cr->host;
      return(NULL);
    }

    /* If no DNS client service, return with error */
    if (!dns_client) return(&rm_noclient);

    /* If numeric request, then launch as "%u.%u.%u.%u.in-addr.arpa" */
    if ((s_addr = _inetaddr(hostname)) != -1)
    {
      sprintf(s, "%d.%d.%d.%d.in-addr.arpa", (s_addr & 0xff000000) >> 24,
        (s_addr & 0xff0000) >> 16, (s_addr & 0xff00) >> 8, s_addr & 0xff);
      hostname = s;
      numeric = 1;
      TRACE1("gethost: create numeric '%s'\n", hostname);
    }

    /* Create a 'pending' cache entry */
    TRACE("gethost: create pending\n");
    cr = cacheadd(hostname, NULL, flags_PENDING);

    /* Item not in hosts file, send off a remote resolver request */
    TRACE("gethost: launching...\n");
    cr->failure = -2;
    cr->server = server;
    err = res_launch(hostname, cr, numeric);
    if (err)
    {
      cacheclear(cr);
      return(err);
    }
    r->r[0] = EINPROGRESS;
    r->r[1] = 0;
    return(NULL);
  }

  /* Return with no error */
  return(NULL);
}


/*  SWI handler.
 */
extern _kernel_oserror *SWIentry(int swi_no, _kernel_swi_regs *r, void *privateword)
{
  _kernel_oserror *err = NULL;
  char *hostname = (char *) r->r[1];

  TRACE1("SWIentry: %d\n", swi_no);
  switch (swi_no)
  {
    case 0: /* Resolver_GetHostByName */
                TRACE2("GetHostByName: ent %x %x\n", r->r[0], r->r[1]);
                do
                {
                  thread_wait("_GetHostByName");
                  r->r[0] = (int) hostname;
                  err = gethost(r, FALSE);
                } while (!err && (r->r[0] == EINPROGRESS) && !escape_press());
                TRACE2("GetHostByName: ret %x %d\n", (int) err, r->r[0]);
                break;
    case 1: /* Resolver_GetHost */
                if (r->r[0] == 0)
                {
                  char s[32];
                  int s_addr = *(int *) r->r[1];

                  sprintf(s, "%d.%d.%d.%d.in-addr.arpa", s_addr & 0xff, (s_addr & 0xff00) >> 8,
                    (s_addr & 0xff0000) >> 16, (s_addr & 0xff000000) >> 24);
                  do
                  {
                    thread_wait("_GetHostByAddr");
                    r->r[0] = (int) s;
                    err = gethost(r, FALSE);
                  } while (!err && (r->r[0] == EINPROGRESS) && !escape_press());
                } else return(gethost(r, FALSE));
                break;
    case 2: /* Resolver_GetCache */
    		cacheget(r);
	      	break;
    case 3: /* Resolver_CacheControl */
                TRACE1("CacheControl: %x\n", r->r[0]);
                switch (r->r[0])
                {
                  case ctrl_FLUSHFAIL: 	cacheflush(flags_FAILED);
                  			break;
                  case ctrl_FLUSHVALID: cacheflush(flags_VALID | flags_FAILED | flags_PENDING);
                  			break;
                  case ctrl_FLUSHHOSTS: cacheflush(flags_HOST);
                  			break;
                  case ctrl_DISABLEFAIL:
                  case ctrl_ENABLEFAIL:
  		    cache_control &= ~(ctrlbit_DISABLEFAIL | ctrlbit_ENABLEFAIL);
		    cache_control |= ((r->r[0] == ctrl_DISABLEFAIL) ? ctrlbit_DISABLEFAIL : 0) |
		                     ((r->r[0] == ctrl_ENABLEFAIL) ? ctrlbit_ENABLEFAIL : 0);
                    break;
                }
	      	break;

    default:
      err = &rm_errbad;
      break;
  }

  /* Return with no error */
  return(err);
}


/*  CLI handler.
 */
extern _kernel_oserror *command_handler(char *arg_string, int arg_count,
  						unsigned int cmd_no, void *pw)
{
  TRACE1("command_handler: %d\n", cmd_no);
  switch (cmd_no)
  {
    case 0: /* ResolverConfig */
      return(config_init());
      break;
  }
  return(NULL);
}


#ifdef app_TIMED

#include "DeskLib:SWI.h"
#include <time.h>

#define _OS_Word			0x000007
#define _Territory_ReadCurrentTimeZone	0x043048

/*  Fixed CLib time() function, that works with -ve timezone settings, etc.
 *  From original code by Anthony Frost <vulch@kernow.demon.co.uk>.
 */
extern time_t Risc_Time(time_t *place)
{
  BOOL carry = FALSE;
  char btime[] = "\x00\x00\x00\x00\x6A\x99\x6E\x33\x00";
  char rtime[8], ntime[8], tzname[10];
  int  diff, loop, temp, tz;

  /* Read offset from UTC to current time zone */
  SWI(0,2, _Territory_ReadCurrentTimeZone, (int *) tzname, &tz);

  /* Read real-time in 5-byte format */
  rtime[3] = 3;
  SWI(2,0, _OS_Word, 14,&rtime[3]);

  for (loop = 3; loop < 8; loop++)
  {
    temp = rtime[loop] - btime[loop] - carry;
    ntime[loop] = temp & 0xFF;
    carry = ((temp & 0x100) != 0);
  }
  diff = (*((int *) &ntime[4]));
  temp = ((diff / 100) * 256) + (((diff % 100) * 256) + ntime[3]) / 100 + tz / 100;
  if (place)
    *place = temp;
  return(temp);
}


/*  Check for valid system clock
 *  for prerelease timebomb 'feature'
 */
static BOOL CheckClock(void)
{
  struct tm *timeptr;
  time_t    thetime;
  BOOL      ok = TRUE;

  Risc_Time(&thetime);
  timeptr = localtime(&thetime);
  if (timeptr == NULL) ok = FALSE;
  /* tm_mon is Month (1..12) minus 1. eg, August = 7 */
  if (timeptr->tm_year != 95) ok = FALSE;
  if ((timeptr->tm_mon < 6) || (timeptr->tm_mon > 7)) ok = FALSE;
  return ok;
}
#endif
