/*
 * res_init.c
 *
 * Modified by Nick Smith <nas@ant.co.uk> for DNS package
 */

#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include <stdio.h>
#include "arpa/nameser.h"
#include "resolv.h"
#include <string.h>
#include <stdlib.h>
#include "arpa/inet.h"
#include "Debug.h"
#include "kernel.h"

extern int gethostname(char *name, int namelen);

/*
 * Resolver state default settings
 * See <resolv.h> for constants.
 */

struct state _res =
{
  RES_TIMEOUT,              	/* retransmition time interval */
  2,                            /* number of times to retransmit */
  RES_DEFAULT,                  /* options flags */
  1                             /* number of name servers */
};

static _kernel_oserror 	rm_badhost = { 0x0, "Must set Inet$Hostname for Resolver" };
static _kernel_oserror 	rm_badres = { 0x0, "Must set Inet$Resolvers for Resolver" };
static char 		defdsearch[MAXDNAME];


/*
 * Environment variables used:
 *
 * 	Inet$Resolvers		SPACE separated list of dotted IP addresses of DNS servers
 *	Inet$Hostname		Used by gethostname() to read local host name
 *	Inet$LocalDomain        Overrides local domain (normally taken from Inet$Hostname)
 *	Inet$SearchDomains	SPACE separated list of IP domain names to search on
 */

/*
 * Set up default settings.  If the configuration variables exist, the values
 * there will have precedence.  Otherwise, the server address is set to
 * INADDR_ANY and the default domain name comes from the gethostname().
 *
 * Return NULL if completes successfully, else error ptr
 */
_kernel_oserror *ant_res_init(void)
{
  register char *cp, **pp;
  register int n;
  static char buf[BUFSIZ];
  int nserv = 0;    /* number of nameserver records read from variable */
  int haveenv = 0;
  int havesearch = 0;

  TRACE("ant_res_init:\n");
  _res.nsaddr.sin_addr.s_addr = INADDR_ANY;
  _res.nsaddr.sin_family = AF_INET;
  _res.nsaddr.sin_port = htons(NAMESERVER_PORT);
  _res.nscount = 1;

  /* Allow user to set the search domains */
  if ((cp = getenv("Inet$SearchDomains")) != NULL)
  {
    while (*cp == ' ' || *cp == '\t') cp++;
    if ((*cp == '\0') || (*cp == '\n')) goto nodomain;
    strncpy(defdsearch, cp, sizeof(defdsearch) - 1);
    TRACE1("Search domains = '%s'\n", cp);
    if ((cp = strchr(defdsearch, '\n')) != NULL) *cp = '\0';
    /*
     * Set search list to be blank-separated strings
     * on rest of line.
     */
    cp = defdsearch;
    pp = _res.dnsrch;
    *pp++ = cp;
    for (n = 0; *cp && pp < _res.dnsrch + MAXDNSRCH; cp++)
    {
      if (*cp == ' ' || *cp == '\t')
      {
        *cp = 0;
        n = 1;
      }
      else
      {
        if (n)
        {
          *pp++ = cp;
          n = 0;
        }
      }
    }
    /* null terminate last domain if there are excess */
    while (*cp != '\0' && *cp != ' ' && *cp != '\t') cp++;
    *cp = '\0';
    *pp++ = 0;
    havesearch = 1;

    for (pp = _res.dnsrch; *pp; pp++)
    {
      TRACE2("ant_res_init: search1 %x '%s'\n", (int) *pp, *pp);
    }

  }
  nodomain:

  /* Allow user to override the local domain definition */
  if ((cp = getenv("Inet$LocalDomain")) != NULL)
  {
    strncpy(_res.defdname, cp, sizeof(_res.defdname) - 1);
    TRACE1("Local domain = '%s'\n", cp);
    haveenv++;
  }

  /* Allow user to set the nameservers to query */
  if ((cp = getenv("Inet$Resolvers")) != NULL)
  {
    char *cs;

    while ((nserv < MAXNS) && (cp))
    {
      while (*cp == ' ' || *cp == '\t') cp++;
      if ((*cp == '\0') || (*cp == '\n')) break;

      /* Some code to deal with SPACE separators */
      cs = strchr(cp, ' ');
      if (cs)
      {
        *cs = '\0';
        cs++;
      }
      if ((_res.nsaddr_list[nserv].sin_addr.s_addr = inet_addr(cp)) == (unsigned)-1)
      {
        _res.nsaddr_list[nserv].sin_addr.s_addr = INADDR_ANY;
        break;
      }
      TRACE2("Resolver: '%s' %x\n", cp, (int) inet_addr(cp));
      _res.nsaddr_list[nserv].sin_family = AF_INET;
      _res.nsaddr_list[nserv].sin_port = htons(NAMESERVER_PORT);
      nserv++;
      cp = cs;
    }
  }
  else
  {
    /* Couldn't get resolver */
    return(&rm_badres);
  }
  if (nserv > 1) _res.nscount = nserv;

  /* Get domain from hostname if not already set from either
   * Inet$LocalDomain or Inet$SearchDomains.
   */
  if (_res.defdname[0] == 0)
  {
    if (gethostname(buf, sizeof(_res.defdname)) == 0 && (cp = strchr(buf, '.')))
    {
      strcpy(_res.defdname, cp + 1);
      TRACE1("Defname: '%s'\n", _res.defdname);
    }
    else
    {
      /* Couldn't get hostname */
      return(&rm_badhost);
    }
  }

  /* find components of local domain that might be searched */
  if (havesearch == 0)
  {
    pp = _res.dnsrch;
    *pp++ = _res.defdname;
    for (cp = _res.defdname, n = 0; *cp; cp++) if (*cp == '.') n++;
    cp = _res.defdname;
    for (; n >= LOCALDOMAINPARTS && pp < _res.dnsrch + MAXDFLSRCH; n--)
    {
      cp = strchr(cp, '.');
      *pp++ = ++cp;
    }
    *pp++ = 0;
  }

  /* Debug dump of search domains */
#ifdef DEBUG
  for (pp = _res.dnsrch; *pp; pp++)
  {
    TRACE2("ant_res_init: search2 %x '%s'\n", (int) *pp, *pp);
  }
#endif

  _res.options |= RES_INIT;
  return(NULL);
}
