/*
 * Program:	Hosts.c - hosts file name lookup for Resolver module
 *
 * Project:	DNS Resolver module
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	7 Febuary 1995
 * Last Edited:	18 May 1995
 *
 * Copyright 1995 by ANT Limited
 */

#include "kernel.h"
#include <stdio.h>
#include <string.h>

#include "htypes.h"
#include "netdb.h"
#include "socket.h"
#include "in.h"
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include "arpa/inet.h"
#include "arpa/nameser.h"
#include "resolv.h"
#include <string.h>
#include "herrno.h"

#include "DeskLib:Core.h"
#include "DeskLib:Time.h"
#include "DeskLib:LinkList.h"

#include "Core.h"
#include "Name.h"
#include "Cache.h"
#include "ExtLib.h"
#include "Hosts.h"
#include "Debug.h"

extern char 	*h_addr_ptrs[MAXADDRS + 1] = NULL;
extern char 	*host_aliases[MAXALIASES] = NULL;


/*  Get hostname.
 */
extern int gethostname(char *name, int namelen)
{
  /* Read old host name, echo <Inet$HostName> */
  TRACE("gethostname:\n");
  if (_kernel_getenv("Inet$HostName", name, namelen)) return(-1);
  return(0);
}


/*  Make a malloc'd hostent struct, based on contents of global
 *  'h_addr_ptrs' and 'host_aliases' (see Hosts.h).
 *  naliases/naddrs must be at least 1, and include the NULL terminator pointer.
 */
extern struct hostent *makehost(char *name, int naliases, int naddrs, int h_addrtype,
  int h_length)
{
  struct hostent *host = NULL;
  int loop;
  
  TRACE1("makehost: %s ", name);
  TRACE2("aliases %d addrs %d ", naliases, naddrs);
  TRACE2("addrtype %d length %d\n", h_addrtype, h_length);
  host = heap_alloc(sizeof(struct hostent));
  if (!host) return(NULL);
  host->h_name = cpystr(name);
  lcase(host->h_name);
  host->h_aliases = heap_alloc(sizeof(char *) * naliases);
  for (loop = 0; loop < naliases; loop++)
  {
    if (host_aliases[loop])
    {
      host->h_aliases[loop] = cpystr(host_aliases[loop]);
      lcase(host->h_aliases[loop]);
    } else host->h_aliases[loop] = NULL;
  }
  host->h_addrtype = (h_addrtype > -1) ? h_addrtype : AF_INET;
  host->h_length = (h_length > -1) ? h_length : sizeof(u_long);
  host->h_addr_list = heap_alloc(sizeof(char *) * naddrs);
  for (loop = 0; loop < naddrs; loop++)
  {
    if (h_addr_ptrs[loop])
    {
      host->h_addr_list[loop] = heap_alloc(sizeof(int));
      memcpy(host->h_addr_list[loop], h_addr_ptrs[loop], sizeof(int));
    } else host->h_addr_list[loop] = NULL;
  }
  return(host);
}


/*  Get host entry.
 */
static struct hostent *_gethtent(FILE *hostf, char *name, BOOL byaddr)
{
  char hostbuf[256];
  char *p;
  char *cp, **q;
  struct hostent *host;
  char *h_name;
  int naliases = 0;

  if (!hostf) return(NULL);
  TRACE("_gethtent:\n");
again:
  if ((p = fgets(hostbuf, 256, hostf)) == NULL)
  {
    TRACE1("_gethtent: not found '%s'\n", name);
    return (NULL);
  }
  if (*p == '#') goto again;
  cp = strpbrk(p, "#\n");
  if (cp == NULL) goto again;
  *cp = '\0';
  cp = strpbrk(p, " \t");
  if (cp == NULL) goto again;
  *cp++ = '\0';
  h_addr_ptrs[0] = (char *) &h_addr_ptrs[2];
  h_addr_ptrs[1] = (char *) 0;
  h_addr_ptrs[2] = (char *) inet_addr(p);
  while (*cp == ' ' || *cp == '\t') cp++;
  h_name = cp;
  q = host_aliases;
  cp = strpbrk(cp, " \t");
  if (cp != NULL) *cp++ = '\0';
  while (cp && *cp)
  {
    if (*cp == ' ' || *cp == '\t')
    {
      cp++;
      continue;
    }
    if (q < &host_aliases[MAXALIASES - 1])
    {
      *q++ = cp;
      naliases++;
    }
    cp = strpbrk(cp, " \t");
    if (cp != NULL) *cp++ = '\0';
  }
  *q = NULL;
  if (byaddr)
  {
    /* Search on address */
    if (!strcmp(p, name)) goto found;
  }
  else
  {
    /* Search on name */
    if (!strcasecmp(h_name, name)) goto found;
    for (q = host_aliases; *q != 0; q++)
    {
      if (!strcasecmp(*q, name)) goto found;
    }
  }
  goto again;
found:
  host = makehost(h_name, naliases+1, 2, -1, -1);
  TRACE2("_gethtent: found '%s' %x\n", name, (int) host);
  return(host);
}


/*  Get host by name.
 */
extern struct hostent *_gethtbyname(char *name)
{
  struct hostent *p;
  FILE *hostf = NULL;

  TRACE1("_gethtbyname: '%s'\n", name);
  if (inet_addr(name) != -1) return(NULL);
  hostf = fopen(_PATH_HOSTS, "r");
  p = _gethtent(hostf, name, FALSE);
  fclose(hostf);
  TRACE1("_gethtbyname: %x\n", (int) p);
  return(p);
}


/*  Return 4-byte Internet address if string maps to dotted IP address.
 *  Removes any crap from end of line (more useful than inet_addr() fn).
 */
extern int _inetaddr(char *addr)
{
  char name[128];
  char *t = addr;
  int ndot = 0;

  if (!isdigit(*t)) return(-1);
  while ((*t != '\0') && ((isdigit(*t)) || (*t == '.')))
  {
    if (*t == '.')
    {
      if (ndot < 3) ndot++;
        else break;
    }
    t++;
  }
  /* TRACE2("_inetaddr: %d '%s'\n", ndot, addr); */
  if (ndot < 3) return(-1);
  strncpy(name, addr, t-addr);
  name[t-addr] = '\0';
  /* TRACE1("_inetaddr: '%s'\n", name); */
  return(inet_addr(name));
}


/*  Return 4-byte Internet address if string maps to reversed dotted IP address.
 *  Removes any crap from end of line (more useful than inet_addr() fn).
 */
extern int _inetraddr(char *addr)
{
  int saddr = _inetaddr(addr);
  unsigned int raddr;
  
  if (saddr == -1) return(saddr);
  raddr = ((saddr & 0x000000ff) << 24) | ((saddr & 0x0000ff00) << 8) | 
          ((saddr & 0x00ff0000) >> 8)  | ((saddr & 0xff000000) >> 24);
  /* TRACE2("_inetraddr: %x %x\n", saddr, raddr); */
  return(raddr);
}


/*  Get host by address (as a string).
 */
extern struct hostent *_gethtbyaddr(char *addr)
{
  struct hostent *p;
  FILE *hostf = NULL;
  struct in_addr inaddr;

  /* Check for numeric dotted address */
  TRACE1("_gethtbyaddr: '%s'\n", addr);
  if ((inaddr.s_addr = _inetaddr(addr)) == -1) return(NULL);
  hostf = fopen(_PATH_HOSTS, "r");
  p = _gethtent(hostf, inet_ntoa(inaddr), TRUE);
  fclose(hostf);
  TRACE1("_gethtbyaddr: %x\n", (int) p);
  return(p);
}
