/*
 * res_mkquery.c
 *
 * Modified by Nick Smith <nas@ant.co.uk> for DNS package
 */

#include <stdio.h>
#include "htypes.h"
#include "in.h"
#include "arpa/nameser.h"
#include "resolv.h"
#include <string.h>

extern int dn_comp(char *exp_dn, char *comp_dn,int length, char **dnptrs, char **lastdnptr);
extern void putshort(u_short s, char *msgp);
extern void putlong(u_long l, char *msgp);


/* Form all types of queries.
 * Returns the size of the result or -1.
 */
int res_mkquery(op, dname, class, type, data, datalen, newrr, buf, buflen)
        int op;                 /* opcode of query */
        char *dname;            /* domain name */
        int class, type;        /* class and type of query */
        char *data;             /* resource record data */
        int datalen;            /* length of data */
        struct rrec *newrr;     /* new rr for modify or append */
        char *buf;              /* buffer to put query */
        int buflen;             /* size of buffer */
{
  register HEADER *hp;
  register char *cp;
  register int n;
  char *dnptrs[10], **dpp, **lastdnptr;

  /*
   * Initialize header fields.
   */
  if ((buf == NULL) || (buflen < sizeof(HEADER))) return(-1);
  memset(buf, 0, sizeof(HEADER));
  hp = (HEADER *) buf;
  hp->id = htons(++_res.id);
  hp->opcode = op;
  hp->pr = (_res.options & RES_PRIMARY) != 0;
  hp->rd = (_res.options & RES_RECURSE) != 0;
  hp->rcode = NOERROR;
  cp = buf + sizeof(HEADER);
  buflen -= sizeof(HEADER);
  dpp = dnptrs;
  *dpp++ = buf;
  *dpp++ = NULL;
  lastdnptr = dnptrs + sizeof(dnptrs)/sizeof(dnptrs[0]);

  /*
   * perform opcode specific processing
   */
  switch (op)
  {
    case QUERY:
      if ((buflen -= QFIXEDSZ) < 0) return(-1);
      if ((n = dn_comp(dname, cp, buflen, dnptrs, lastdnptr)) < 0) return (-1);
      cp += n;
      buflen -= n;
      putshort(type, cp);
      cp += sizeof(u_short);
      putshort(class, cp);
      cp += sizeof(u_short);
      hp->qdcount = htons(1);
      if (op == QUERY || data == NULL) break;
      /*
       * Make an additional record for completion domain.
       */
      buflen -= RRFIXEDSZ;
      if ((n = dn_comp(data, cp, buflen, dnptrs, lastdnptr)) < 0) return (-1);
      cp += n;
      buflen -= n;
      putshort(T_NULL, cp);
      cp += sizeof(u_short);
      putshort(class, cp);
      cp += sizeof(u_short);
      putlong(0, cp);
      cp += sizeof(u_long);
      putshort(0, cp);
      cp += sizeof(u_short);
      hp->arcount = htons(1);
      break;
      
    case IQUERY:
      /*
       * Initialize answer section
       */
      if (buflen < 1 + RRFIXEDSZ + datalen)
              return (-1);
      *cp++ = '\0';   /* no domain name */
      putshort(type, cp);
      cp += sizeof(u_short);
      putshort(class, cp);
      cp += sizeof(u_short);
      putlong(0, cp);
      cp += sizeof(u_long);
      putshort(datalen, cp);
      cp += sizeof(u_short);
      if (datalen) {
              memcpy(cp, data, datalen);
              cp += datalen;
      }
      hp->ancount = htons(1);
      break;      
  }
  return (cp - buf);
}
