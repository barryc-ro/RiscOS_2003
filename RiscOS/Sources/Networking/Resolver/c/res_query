/*
 * res_query.c
 *
 * Modified by Nick Smith <nas@ant.co.uk> for DNS package
 */

#include "socket.h"
#include "in.h"
#include <ctype.h>
#include "netdb.h"
#include <stdio.h>
#include <errno.h>
#include "kernel.h"
#include <string.h>
#include "arpa/inet.h"
#include "arpa/nameser.h"
#include "resolv.h"
#include "herrno.h"
#include <string.h>
#include <stdlib.h>

#include "DeskLib:Core.h"
#include "DeskLib:LinkList.h"
#include "Cache.h"
#include "Core.h"
#include "Debug.h"
#include "Hosts.h"

extern _kernel_oserror *res_init(void);
extern int res_mkquery(int op, char *dname, int class, int type, char *data, int datalen,
		struct rrec *newrr, char *buf, int buflen);
extern int res_send(char *buf, int buflen, char *answer, int anslen, dns_rec *r);
extern int dn_expand(u_char *msg, u_char *eomorig, u_char *comp_dn, u_char *exp_dn, int length);
extern int dn_skipname(u_char *comp_dn, u_char *eom);
extern int res_querydomain(char *name, char *domain, int class, int type, u_char *answer,
		int anslen, dns_rec *r);

#define MAXPACKET 1024

typedef union
{
  HEADER 	hdr;
  u_char 	buf[MAXPACKET];
} querybuf;

typedef union
{
  long 		al;
  char 		ac;
} align;

static _kernel_oserror 	rm_badmem = { 0x0, "No free memory for Resolver" };
static _kernel_oserror 	rm_baddns = { 0x0, "Bad Resolver request" };


/*  Process received datagram.
 */
extern struct hostent *getanswer(querybuf *answer, int anslen, int iquery, cache_rec *r)
{
  char hostbuf[256];
  register HEADER *hp;
  register u_char *cp;
  register int n;
  u_char *eom;
  char *bp, **ap;
  int type, class, buflen, ancount, qdcount;
  int haveanswer, getclass = C_ANY;
  char **hap;
  int h_length = sizeof(u_long);
  int h_addrtype = AF_INET;
  char *h_name = NULL;
  int naliases = 1, naddrs = 1;

  eom = answer->buf + anslen;
  /*
   * find first satisfactory answer
   */
  hp = &answer->hdr;
  ancount = ntohs(hp->ancount);
  qdcount = ntohs(hp->qdcount);
  bp = hostbuf;
  buflen = sizeof(hostbuf);
  cp = answer->buf + sizeof(HEADER);
  if (qdcount)
  {
    if (iquery)
    {
      if ((n = dn_expand((u_char *)answer->buf, eom, cp, (u_char *) bp, buflen)) < 0)
      {
        r->dns->errno = NO_RECOVERY;
        return ((struct hostent *) NULL);
      }
      cp += n + QFIXEDSZ;
      h_name = bp;
      n = strlen(bp) + 1;
      bp += n;
      buflen -= n;
    } else cp += dn_skipname(cp, eom) + QFIXEDSZ;
    while (--qdcount > 0) cp += dn_skipname(cp, eom) + QFIXEDSZ;
  }
  else
  {
    if (iquery)
    {
      if (hp->aa) r->dns->errno = HOST_NOT_FOUND;
        else r->dns->errno = TRY_AGAIN;
      return ((struct hostent *) NULL);
    }
  }
  ap = host_aliases;
  *ap = NULL;
  /* host.h_aliases = host_aliases; */
  hap = h_addr_ptrs;
  *hap = NULL;
  /* host.h_addr_list = h_addr_ptrs; */
  haveanswer = 0;
  while (--ancount >= 0 && cp < eom)
  {


    for (n = 0; n < buflen; n++)
    {
      TRACE1(" %02x", cp[n]);
    }
    TRACE("\n");

    
    if ((n = dn_expand((u_char *) answer->buf, eom, cp, (u_char *) bp, buflen)) < 0) break;
    cp += n;
    type = _getshort(cp);
    cp += sizeof(u_short);
    class = _getshort(cp);
    cp += sizeof(u_short) + sizeof(u_long);
    n = _getshort(cp);
    cp += sizeof(u_short);
    if (type == T_CNAME)
    {
      cp += n;
      if (ap >= &host_aliases[MAXALIASES-1]) continue;
      *ap++ = bp;
      naliases++;
      n = strlen(bp) + 1;
      bp += n;
      buflen -= n;
      continue;
    }
    if (iquery && type == T_PTR)
    {
      TRACE("iquery!!!\n");
      if ((n = dn_expand((u_char *)answer->buf, eom, cp, (u_char *) bp, buflen)) < 0)
      {
        cp += n;
        continue;
      }
      cp += n;
      h_name = bp;
      return(makehost(h_name, naliases, naddrs, h_addrtype, h_length));
    }
    if (iquery || type != T_A)
    {
      cp += n;
      continue;
    }
    if (haveanswer)
    {
      if (n != h_length)
      {
        cp += n;
        continue;
      }
      if (class != getclass)
      {
        cp += n;
        continue;
      }
    } else
    {
      h_length = n;
      getclass = class;
      h_addrtype = (class == C_IN) ? AF_INET : AF_UNSPEC;
      if (!iquery)
      {
        h_name = bp;
        bp += strlen(bp) + 1;
      }
    }
    bp += sizeof(align) - ((u_long)bp % sizeof(align));
    if (bp + n >= &hostbuf[sizeof(hostbuf)]) break;
    memcpy(*hap++ = bp, cp, n);
    naddrs++;
    bp +=n;
    cp += n;
    haveanswer++;
  }
  if (haveanswer)
  {
    *ap = NULL;
    *hap = NULL;
    /* host.h_addr = h_addr_ptrs[0]; */
    TRACE1("query!!! %s\n", h_name);
    return(makehost(h_name, naliases, naddrs, h_addrtype, h_length));    
  }
  else
  {
    r->dns->errno = TRY_AGAIN;
    return ((struct hostent *) NULL);
  }
}


/* Formulate a normal query, send, and await answer.
 * Returned answer is placed in supplied buffer "answer".
 * Perform preliminary check of answer, returning success only
 * if no error is indicated and the answer count is nonzero.
 * Return the size of the response on success, -1 on error.
 * Error number is left in r->errno.
 * Caller must parse answer and determine whether it answers the question.
 */
extern int res_query(char *name, int class, int type, u_char *answer, int anslen, dns_rec *r)
{
  char *buf = heap_alloc(MAXPACKET);
  int n;
  HEADER *ans_hp = (HEADER *) answer;
  HEADER *buf_hp = (HEADER *) buf;

  TRACE2("res_query: '%s' %x\n", name, (int) r);
  n = res_mkquery(QUERY, name, class, type, NULL, 0, NULL, buf, MAXPACKET);
  if (n <= 0)
  {
    TRACE1("res_query: err %d\n", n);
    r->errno = NO_RECOVERY;
    heap_free(buf);
    return(n);
  }
  /* Copy across ID word into receive buffer */
  ans_hp->id = buf_hp->id;
  
  n = res_send(buf, n, (char *) answer, anslen, r);
  /* n = res_send((char *) &buf, n, (char *) answer, anslen, r); */
  heap_free(buf);
  return(n);
}


/*  Set r->domain pointer value to next correct value.
 */
extern void res_setdomain(char *name, dns_rec *r)
{
  register char *cp;
  int n;

  TRACE2("res_setdomain: pre %x %x\n", (int) r->domain, (int) *r->domain);
  for (cp = name, n = 0; *cp; cp++) if (*cp == '.') n++;
  if (r->domain == (char **) -1)
  {
    r->domain = NULL;
    if (n) return;
  }
  if (r->numeric) return;
  if (r->domain == NULL)
  {
    /* We do at least one level of search if
     *      - there is no dot and RES_DEFNAME is set, or
     *      - there is at least one dot, there is no trailing dot,
     *        and RES_DNSRCH is set.
     */
    if ((n == 0 && _res.options & RES_DEFNAMES) ||
        (n != 0 && *--cp != '.' && _res.options & RES_DNSRCH)) r->domain = _res.dnsrch;
  }
  else
  {
    if (*r->domain != NULL) r->domain++;
  }
  TRACE2("res_setdomain: post %x %x\n", (int) r->domain, (int) *r->domain);
  TRACE1("res_setdomain: '%s'\n", r->domain ? *r->domain : "");
}


/* Formulate a normal query, send, and retrieve answer in supplied buffer.
 * Return the size of the response on success, -1 on error.
 * If enabled, implement search rules until answer or unrecoverable failure
 * is detected.  Error number is left in r->errno.
 * Only useful for queries in the same name hierarchy as the local host
 * (not, for example, for host address-to-name lookups in domain in-addr.arpa).
 *
 *       char *name;             / domain name /
 *       int class, type;        / class and type of query /
 *       u_char *answer;         / buffer to put answer /
 *       int anslen;             / size of answer /
 */
static int res_search(char *name, int class, int type, u_char *answer, int anslen, dns_rec *r)
{
  register char *cp;
  int n, ret = -1;

  r->errno = HOST_NOT_FOUND;	/* default, if we never query */
  for (cp = name, n = 0; *cp; cp++)
    if (*cp == '.') n++;
  TRACE2("res_search: '%s' n=%d\n", name, n);

  /* Try the name as fully-qualified,
   * but only if it contained at least one dot (even trailing).
   * This is purely a heuristic; we assume that any reasonable query
   * about a top-level domain (for servers, SOA, etc) will not use
   * res_search.
   */
  r->domain = NULL;
  if ((n) && (ret = res_querydomain(name, NULL, class, type, answer, anslen, r)) > 0)
    return (ret);
  res_setdomain(name, r);
  if ((r->domain) && (*r->domain))
  {
    ret = res_querydomain(name, *r->domain, class, type, answer, anslen, r);
    if (ret > 0) return (ret);
  }
  return(-1);
}


/* Perform a call on res_query on the concatenation of name and domain,
 * removing a trailing dot from name if domain is NULL.
 */
extern int res_querydomain(char *name, char *domain, int class, int type, u_char *answer,
  int anslen, dns_rec *r)
{
  char nbuf[2*MAXDNAME+2];
  char *longname = nbuf;
  int n;

  TRACE2("res_querydomain: '%s' domain '%s'\n", name, domain ? domain : "");
  if (!domain)
  {
    /* Check for trailing '.';
     * copy without '.' if present.
     */
    n = strlen(name) - 1;
    if (name[n] == '.' && n < sizeof(nbuf) - 1)
    {
      memcpy(nbuf, name, n);
      nbuf[n] = '\0';
    } else longname = name;
  } else sprintf(nbuf, "%.*s.%.*s", MAXDNAME, name, MAXDNAME, domain);
  return (res_query(longname, class, type, answer, anslen, r));
}


/*  Called by module to launch a backgrounding DNS request.
 */
extern _kernel_oserror *res_launch(char *hostname, cache_rec *cr, int numeric)
{
  _kernel_oserror *err = NULL;
  querybuf *qbuf;

  /* If not initialised from Inet$ variables, then read in details */
  TRACE2("res_launch: '%s' %x\n", hostname, (int) cr);
  if (((_res.options & RES_INIT) == 0) && (err = res_init())) return(err);

  /* Build a DNS struct for this cache entry */
  if (!cr->dns) cr->dns = heap_alloc(sizeof(dns_rec));
  if (!cr->dns) return(&rm_badmem);
  cr->dns->errno = 0;
  cr->dns->state = dns_NONE;
  cr->dns->domain = NULL;
  cr->dns->ns = 0;
  cr->dns->time = 0;
  cr->dns->numeric = numeric;
  qbuf = (querybuf *) &cr->dns->buf;

  /* Launch request, and return immediately */
  TRACE("res_launch: launching ... \n");
  if (numeric)
  {
    if (res_query(hostname, C_IN, T_PTR, qbuf->buf, sizeof(querybuf),
      cr->dns) < 0) return(&rm_baddns);  
  }
  else
  {
    if (strlen(hostname) > 95) return(&rm_baddns);
    if (res_search(hostname, C_IN, T_A, qbuf->buf, sizeof(querybuf),
      cr->dns) < 0) return(&rm_baddns);
  }
  TRACE("res_launch: return\n");
  return(NULL);
}

