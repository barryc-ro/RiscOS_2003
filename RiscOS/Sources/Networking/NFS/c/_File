
#ifndef __NFSNFS_H
#include "NFS.h"
#endif

#include "access.h"

/*
        Create a directory
*/
static _kernel_oserror *create_nfs_directory
(
        char *riscos_name
)
{
        _kernel_oserror *err;
        char time_result[ 5 ];
        char *path_to_leaf;
        char *leaf_position;
        sattr3 snattr;
        fattr3 *nattr;
        nfs_file_descriptor ndesc;
        riscos_file_description rdesc;
        int cr_access;
        int success;
        gid_t gid;

        err = find_dir_for_leaf(
                riscos_name,
                &ndesc,
                &path_to_leaf,
                &leaf_position );

        if ( err )
                return err;

        err = nfs_getattr(&nattr, ndesc.mp, &ndesc.dir);

        if ( err )
                return err;

        if ( nattr->mode & 0x400 )
        {
                gid = nattr->gid;
        }
        else
        {
                gid = ndesc.mp->user->gid;
        }

        rdesc.attr.access = FileAccess_OwnerRead | FileAccess_OwnerWrite;
        rdesc.attr.type = FileType_Directory;
        rdesc.name = leaf_position;

        /*
                Load and Exec set up to be stamped now
        */
        time_result[0] = Word_ReadRealTime5ByteFormat;

        success = _kernel_osword(Word_DateAndTime, (int *) time_result);

        if ( success == _kernel_ERROR )
        {
                err=_kernel_last_oserror();
                free( path_to_leaf );
                return err;
        }

        rdesc.attr.load_address = NewDirectory_DefaultLoad | time_result[4];
        rdesc.attr.execute_address = *(int *)time_result;

        err = riscos_to_nfs_description( &ndesc.desc, &rdesc );

        free( path_to_leaf );

        if ( err )
                return err;

        /*
                Use UMASK if there instead.
        */
        cr_access = utils_getcreateaccess(&ndesc);
        if ( cr_access >= 0)
        {
                ndesc.desc.attr.mode =
                        ( ndesc.desc.attr.mode &
                                ~( NFSMODE_OTHERS_WRITE | NFSMODE_OTHERS_READ |
                                   NFSMODE_GROUP_WRITE | NFSMODE_GROUP_READ |
                                   NFSMODE_USER_WRITE | NFSMODE_USER_READ ))
                        | cr_access;

                if ( ndesc.desc.attr.mode & NFSMODE_USER_READ )
                        ndesc.desc.attr.mode |= NFSMODE_USER_EXECUTE;

                if ( ndesc.desc.attr.mode & NFSMODE_GROUP_READ )
                        ndesc.desc.attr.mode |= NFSMODE_GROUP_EXECUTE;

                if ( ndesc.desc.attr.mode & NFSMODE_OTHERS_READ )
                        ndesc.desc.attr.mode |= NFSMODE_OTHERS_EXECUTE;
        }

        snattr.mode.set_it = TRUE;
        snattr.uid.set_it = TRUE;
        snattr.gid.set_it = TRUE;
        snattr.size.set_it = FALSE;
        snattr.atime.set_it = SET_TO_CLIENT_TIME;
        snattr.mtime.set_it = SET_TO_CLIENT_TIME;
        snattr.mode.set_mode3_u.mode = ndesc.desc.attr.mode;
        snattr.uid.set_uid3_u.uid = ndesc.mp->user->uid;
        snattr.gid.set_gid3_u.gid = gid;
        snattr.atime.set_atime_u.atime = ndesc.desc.attr.atime;
        snattr.mtime.set_mtime_u.mtime = ndesc.desc.attr.mtime;

        err = nfs_mkdir( &ndesc.file, &nattr, ndesc.mp, &ndesc.dir, ndesc.desc.name, &snattr );

        free( ndesc.desc.name );

        if ( err == mb_nfserr_exist )
                err = NULL;

        return err;
}

_kernel_oserror *fsentry_file( FSEntry_File_Parameter *parm )
{
        _kernel_oserror *err;
        char *path_to_leaf;
        char *leaf_position;
        unsigned long start;
        int len;
        RISCOSAttributes rattr;
        nfs_file_descriptor ndesc;

        hourglass_on();

#ifdef DEBUGLIB
        if ( parm->special_field )
                dprintf(("File_2",
                        "_File( %d, %s, %s )\n",
                        parm->reason,
                        parm->special_field,
                        parm->name ));
        else
                dprintf(("File_2",
                        "_File( %d, %s )\n",
                        parm->reason,
                        parm->name ));
#endif

        if ( parm->special_field )
        {
                if ( caseless_strcmp( parm->special_field, Spooling_SpecialField ) != 0 )
                {
                        err = mb_bad_special_field;
                }
                else
                {
                        switch( parm->reason )
                        {
                        case FSEntry_File_Reason_ReadCatalogueInformation:
                                parm->reason = (FSEntry_File_Reason) FileType_None;
                                err = NULL;
                                break;

                        default:
                                err = mb_bad_op_on_spool;
                                break;
                        }
                }
        }
        else
        {
                switch ( parm->reason )
                {
                case FSEntry_File_Reason_LoadFile:
                        err = find_regular_leaf( parm->name, &ndesc, &path_to_leaf, &leaf_position );

                        if ( err )
                                break;

                        free( path_to_leaf );

                        /* JRS 7/92 check we have read access to file */
                        if ( !access_Icanread(ndesc.mp, &ndesc.desc.attr) )
                        {
                                err = mb_nfserr_acces;
                                break;
                        }

                        nfs_to_riscos_attributes( &rattr, &ndesc );

                        start = 0;
                        len = rattr.file_length;
                        err = getbytes(
                                &parm->info.load_exec.load_address,
                                &ndesc,
                                &start,
                                &len );

                        if ( err )
                                break;

                        parm->special_field = (char *)return_buffer;
                        strcpy( parm->special_field, ndesc.desc.name );
                        free( ndesc.desc.name );

                        parm->info.load_exec.load_address = (char *)rattr.load_address;
                        parm->info.load_exec.execute_address = (char *)rattr.execute_address;
                        parm->extras.info.length = rattr.file_length;
                        parm->extras.info.attributes = rattr.access;
                        break;

                case FSEntry_File_Reason_CreateFile:
                case FSEntry_File_Reason_SaveFile:
                        len = parm->extras.location.end - parm->extras.location.start;

                        err = create_nfs_file(
                                &ndesc,
                                parm->name,
                                &len,
                                (unsigned long *)&parm->info.load_exec.load_address,
                                (unsigned long *)&parm->info.load_exec.execute_address,
                                NULL,
                                parm->extras.location.start,
                                parm->reason == FSEntry_File_Reason_SaveFile );

                        if ( err )
                                break;

                        move_nfsname_to_riscos_name( return_buffer, ndesc.desc.name, &ndesc );

                        free( ndesc.desc.name );

                        parm->special_field = (char *)return_buffer;
                        break;

                case FSEntry_File_Reason_WriteCatalogueInformation:
                        err = change_info(
                                parm->name,
                                (unsigned long *)&parm->info.load_exec.load_address,
                                (unsigned long *)&parm->info.load_exec.execute_address,
                                &parm->extras.info.attributes );
                        break;

                case FSEntry_File_Reason_WriteLoadAddress:
                        err = change_info(
                                parm->name,
                                (unsigned long *)&parm->info.load_exec.load_address,
                                NULL,
                                NULL );
                        break;

                case FSEntry_File_Reason_WriteExecutionAddress:
                        err = change_info(
                                parm->name,
                                NULL,
                                (unsigned long *)&parm->info.load_exec.execute_address,
                                NULL );
                        break;

                case FSEntry_File_Reason_WriteAttributes:
                        err = change_info(
                                parm->name,
                                NULL,
                                NULL,
                                &parm->extras.info.attributes );
                        break;

                case FSEntry_File_Reason_ReadCatalogueInformationNoLength:
                case FSEntry_File_Reason_ReadCatalogueInformation:
                        err = find_leaf(
                                parm->name,
                                &ndesc,
                                &path_to_leaf,
                                &leaf_position );

                        if ( !err )
                        {
                                free( path_to_leaf );

                                nfs_to_riscos_attributes( &rattr, &ndesc );

                                free( ndesc.desc.name );

                                parm->info.load_exec.load_address = (char *)rattr.load_address;
                                parm->info.load_exec.execute_address = (char *)rattr.execute_address;

                                if ( parm->reason != FSEntry_File_Reason_ReadCatalogueInformationNoLength )
                                        parm->extras.info.length = rattr.file_length;

                                parm->extras.info.attributes = rattr.access;
                                parm->reason = (FSEntry_File_Reason) rattr.type;
                        }
                        else if ( err == mb_nfserr_noent
                                || err == mb_no_mount_point_found )
                        {
                                parm->reason = (FSEntry_File_Reason) FileType_None;
                                err = NULL;
                        }
                        break;

                case FSEntry_File_Reason_DeleteObject:
                        err = find_leaf( parm->name, &ndesc, &path_to_leaf, &leaf_position );

                        if ( err )
                        {
                                /*
                                        Doesn't exist already
                                */
                                if ( err == mb_nfserr_noent )
                                {
                                        parm->reason = (FSEntry_File_Reason) 0; /* not found */
                                        parm->extras.info.length = 0;
                                        err = NULL;
                                }

                                break;
                        }

                        free( path_to_leaf );

                        nfs_to_riscos_attributes( &rattr, &ndesc );

                        if ( rattr.type == FileType_Directory )
                        {
                                err = nfs_rmdir( ndesc.mp, &ndesc.dir, ndesc.desc.name );
                        }
                        else
                        {
                                err = nfs_remove( ndesc.mp, &ndesc.dir, ndesc.desc.name );
                        }

                        /*
                                If it didn't exists before we tried to delete it then that's cool
                        */
                        if ( err == mb_nfserr_noent )
                                err = NULL;

                        if ( !err )
                        {
                                parm->reason = (FSEntry_File_Reason) rattr.type;
                                parm->info.load_exec.load_address = (char *)rattr.load_address;
                                parm->info.load_exec.execute_address = (char *)rattr.execute_address;
                                parm->extras.info.length = rattr.file_length;
                                parm->extras.info.attributes = rattr.access;
                        }
                        break;

                case FSEntry_File_Reason_CreateDirectory:
                        err = create_nfs_directory( parm->name );
                        break;

                default:
                        return mb_nfserr_BadParameters;
                        break;
                }
        }

        hourglass_off();

        if (err != NULL) {
                dprintf(("File", "File error: %s\n", err->errmess));
        }

        return err;
}
