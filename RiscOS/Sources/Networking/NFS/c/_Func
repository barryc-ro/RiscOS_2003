/*	C._FUNC

Purpose :

Functions : nfs_riscos_rename
	    read_dir_entries
	    fsentry_func

History :
Date	Who    Comments
-----------------------------------------------------------------------------
07/05/93  ??    Initial version
12/01/95  CP    Changed get_riscosname to take an entry as a parameter
13/01/95  CP	Changed do_cat, read_dir_entries, set_nfs_access
	  	& do_ex_in_directory to use Get_NFS_Directory(...).
	  	Changed get_riscosname to take a char * as argument for name.
7/2/95    CP	Added contents listing
13/2/95   CP	Changed nature of showcalls to use a pipe
23/2/95   KSR   Activated FSEntry_Func_Reason_BootFilingSystem via nfs_boot()
20/2/96   KJB   All sorts of archaic RISC OS 2 stuff stripped out
****************************************************************************/
#ifndef ___NFS_NFS_H
#include "NFS.h"
#endif

#include "enumdir.h"

#ifdef SHOWCALLS
extern FILE *pipe_debug;
#endif


static _kernel_oserror *get_riscosname( char *name, char **riscosname, nfs_file_descriptor *ndesc )
{
        fattr *nattr;
        _kernel_oserror *err;
        /*
                Get nfs name of object
        */
 	ndesc->desc.name = name;

        /*
                         get attributes
        */
        err = nfs_lookup( &ndesc->file, &nattr, ndesc->mp, &ndesc->dir, ndesc->desc.name );
        if ( err )
                return err;
        ndesc->desc.attr = *nattr;
        /*
                convert nfs name to riscos name
        */
        return nfsname_to_riscos_name( riscosname, ndesc->desc.name, ndesc );
}


/*
        Do a rename
*/
static _kernel_oserror *nfs_riscos_rename
(
        char *from,
        char *to,
        YesNoAnswer *invalid
)
{
        _kernel_oserror *err;
        char *path_from;
        char *leaf_from;
        char *path_to;
        char *leaf_to;
        RISCOSAttributes rattr;
        char *to_name;
        nfs_file_descriptor from_ndesc;
        nfs_file_descriptor to_ndesc;


        /*
                Find what we're renaming from.
        */
        err = find_leaf( from, &from_ndesc, &path_from, &leaf_from );

        if ( err )
                return err;

        free( path_from );

        /*
                Find dir we're renaming to.
        */
        err = find_dir_for_leaf( to, &to_ndesc, &path_to, &leaf_to );

        if ( err )
                return err;

        /*
                Is it on the same mount point?
        */
        if ( from_ndesc.mp != to_ndesc.mp )
        {
                *invalid = Yes;
                free( path_to );
                return NULL;
        }

        /*
                Check whether we're renaming onto something
        */
        err = find_object_in_directory( &to_ndesc, leaf_to );

        if ( !err && (memcmp( &to_ndesc.dir, &from_ndesc.dir, sizeof( to_ndesc.dir )) != 0 ||
                      strcmp( from_ndesc.desc.name, to_ndesc.desc.name ) != 0) )
        {
                /*
                        Destination exists and isn't the source (different directory or different name)
                */
                free( path_to );
                free( from_ndesc.desc.name );
                free( to_ndesc.desc.name );
                *invalid = Yes;
                return NULL;
        }
        else if ( err && err != mb_nfserr_noent )
        {
                /*
                        Error looking for destination
                */
                free( path_to );
                free( from_ndesc.desc.name );
                return err;
        }

        /*
                Construct the destination filename
        */
        nfs_to_riscos_attributes( &rattr, &from_ndesc.desc );

        err = riscos_name_to_nfsname( &to_name, leaf_to, &rattr );

        free( path_to );

        if ( err )
        {
                free( from_ndesc.desc.name );
                return err;
        }

        /*
                Do the rename.
        */
        err = nfs_rename_safely( to_ndesc.mp, &to_ndesc.dir, to_name, &from_ndesc.dir, from_ndesc.desc.name );

        free( from_ndesc.desc.name );
        free( to_name );

        *invalid = No;

        return err;
}



/********** read_dir_entries ************************************************

Purpose : Generic read directory entries to location routine.  Parameters
	  seem to be closely related to those of OS_GBPB8 (SWI &0C).


Inputs :  int whichinfo     controls which info is transfered.
          char *dirname
          char *dest        Where to put the data
          int *nobjects     How many directory items to get
          int *nexttoread   Next item on directory to get (0 => start at top)
          int buffer_length Size (in bytes?) of buffer to store data


Returns : NULL if OK, pointer to error if not.
	  noobjects holds number of objects retrieved.
	  nexttoread holds number of next item in directory, or -1 in the
	  case of an overflow (eg asking for more entries than there are in
	  the directory).
	  dest holds the actual data requested.
****************************************************************************/

static _kernel_oserror *read_dir_entries(int  which_info,
        	       			 char *dirname,
        				 char *dest,
        				 int  *nobjects,
        				 int  *nexttoread,
        				 int  buffer_length)
{
        _kernel_oserror *err;
        char *path_to_leaf;
        char *leaf_position;
        int entry_count;
        char *riscos_name;
        RISCOSAttributes rattr;
        nfs_file_descriptor ndesc;
        nfs_file_descriptor ndescf;
        char *odest;
        char *ThisFileName;

#if DEBUGON
printf("read_dir_entries: parameters for call...\n");
printf("whichinfo=%i name=%s notoread=%i nxttoread=%i bufferlength=%i\n", which_info, dirname, *nobjects, *nexttoread, buffer_length);
#endif


        err = find_directory_leaf( dirname, &ndesc, &path_to_leaf, &leaf_position );

        if ( err )
                return err;

        free( ndesc.desc.name );
        free( path_to_leaf );


           /* Open the directory */

#if DEBUGON
printf("read_dir_entries: opening directory....");
#endif
        err = GetNFSDirEntry(ndesc.mp, ndesc.file, *nexttoread, &ThisFileName, NULL);

        if ( err )
           return err; /* something went wrong */

#if DEBUGON
printf("First file name is %s\n", ThisFileName);
#endif


	/* peThisEntry should now be pointing to the correct entry */

        ndescf.mp = ndesc.mp;
        ndescf.dir = ndesc.file;

        entry_count = *nobjects;
        *nobjects = 0;

        /* While there is no error AND still need to get entries AND
           there is buffer space AND HAVE NOT reached end of directory */

        while( !err && (entry_count > 0) && (buffer_length > 0) && ThisFileName != NULL)
        {
          /*
              Read the file name
          */
          err = get_riscosname( ThisFileName, &riscos_name, &ndescf );

          if ( err )
             return err;

          /*
              If we're getting some info too
          */
          if ( which_info )
          {
              /*
                  Move dest to a word boundary
              */
              odest = dest;
              dest = (char *)( ((unsigned)dest + 3) & ~3 );
              buffer_length -= dest-odest;

              /*
                    get extended info for this file
              */
              err = nfs_lookup_extended( &ndescf );

              if ( err )
              {
                  free( riscos_name );
                  return err;
              }

              /*
                   Convert the attributes to RISCOS form
              */
              nfs_to_riscos_attributes( &rattr, &ndescf.desc );

              /*
                   Transfer the attributes as flagged
              */
              if ( which_info & Read_LoadAddress )
              {
                 buffer_length -= 4;

                 if ( buffer_length < 0 )
                 {
                     free( riscos_name );
                     continue;
                 }

                 *(int *)dest = rattr.load_address;
                 dest += sizeof( int );
              }

              if ( which_info & Read_ExecuteAddress )
              {
                  buffer_length -= 4;

                  if ( buffer_length < 0 )
                  {
                     free( riscos_name );
                     continue;
                  }

                  *(int *)dest = rattr.execute_address;
                  dest += sizeof( int );
              }

              if ( which_info & Read_Length )
              {
                  buffer_length -= 4;

                  if ( buffer_length < 0 )
                  {
                      free( riscos_name );
                      continue;
                  }

                  *(int *)dest = rattr.file_length;
                  dest += sizeof( int );
              }

              if ( which_info & Read_Attributes )
              {
                 buffer_length -= 4;

                 if ( buffer_length < 0 )
                 {
                     free( riscos_name );
                     continue;
                 }

                 *(int *)dest = rattr.access;
                 dest += sizeof( int );
              }

              if ( which_info & Read_ObjectType )
              {
                   buffer_length -= 4;

                   if ( buffer_length < 0 )
                   {
                      free( riscos_name );
                      continue;
                   }

                   *(int *)dest = rattr.type;
                   dest += sizeof( int );
              }

              if ( which_info & Read_SIN )
              {
                  buffer_length -= 4;

                  if ( buffer_length < 0 )
                  {
                      free( riscos_name );
                      continue;
                  }

                  *(int *)dest = 0;
                  dest += sizeof( int );
               }

               if ( which_info & Read_DateTime )
               {
                   buffer_length -= 5;

                   if ( buffer_length < 0 )
                   {
                       free( riscos_name );
                       continue;
                   }

                   *(int *)dest = rattr.execute_address;
                   dest += sizeof( int );
                   *(char *)dest = rattr.load_address & 0xff;
                   dest += sizeof( char );
               }
          } /* endif(whichinfo)  some attributes to copy over */

          /*
              copy the name across
          */
          buffer_length -= strlen( riscos_name ) + 1;

          if ( buffer_length < 0 )
          {
              free( riscos_name );
              continue;
          }

          strcpy( dest, riscos_name );

          dest += strlen( riscos_name ) + 1;

          free( riscos_name );

          /*
                  Finished one file's transfer, count this successful
                  transfer and move on to the next.
          */
          (*nobjects)++;
          (*nexttoread)++;
          entry_count--;

           /* Get next file, don't check for cache freshness */
#if DEBUGON
printf("read_dir_entries: getting next filename...");
#endif
           err = GetNextNFSDirEntry(&ThisFileName, NULL);

           if(err)
              return err;
#if DEBUGON
printf("it is %s\n", ThisFileName);
#endif

        } /* endwhile( !err && (entry_count > 0) && (buffer_length > 0) && ThisName != NULL)  */

#if DEBUGON
if(buffer_length < 0)
   printf("read_dir_entries: exit reason no bufferspace left\n");
#endif

        if (ThisFileName == NULL  && (entry_count > 0))
        {
           	/* asked for too much */
                *nexttoread = -1;
        }

        return err;
}   /* endfunction read_dir_entries */

static _kernel_oserror *canonicalise_disc_name(char *discname, char *buffer, int bufsize,
                                   char **outptr, int *reqbuf)
{
    char *canon;

    if (discname==NULL)
    {
        return mb_no_current_mount_point;
        #if 0
        /* Get the first mount */
        link=mount_point_list.forwards;
        if (link->forwards)
        {
            mp=Link_Wrapper(link);
            canon=mp->mount_point_name;
        }
        else
            canon=0;
        #endif
    }
    else
        canon=discname;

    if (buffer==NULL)
    {
        *outptr=canon;

        if (canon)
            *reqbuf=strlen(canon);
        else
            *reqbuf=0;
    }
    else
    {
        if (canon)
        {
            strncpy(buffer, canon, bufsize);
            *reqbuf=strlen(canon)-bufsize;
            *outptr=buffer;
        }
        else
        {
            *reqbuf=0;
            *outptr=NULL;
        }
    }
    return NULL;
}

_kernel_oserror *fsentry_func
(
        FSEntry_Func_Parameter *parm
)
{
        _kernel_oserror *err = NULL;

        hourglass_on();

#if 0
#ifdef SHOWCALLS
        fprintf(pipe_debug,
                "FSEntry_Func( %d )\n",
                parm->reason );
	fflush(pipe_debug);
#endif
#else
#ifdef SHOWCALLS
        printf("_Func( %d )\n",
                parm->reason );
#endif
#endif

        if ( parm->reason != FSEntry_Func_Reason_CanonicaliseSpecialFieldAndDiscName
             && parm->special_field_1 )
        {
                err = mb_bad_op_on_spool;
        }

        if ( !err )
        {
                switch ( parm->reason )
                {
/* FSEntry_Func0-6 not used under RISC OS 3 */
                case FSEntry_Func_Reason_SetCurrentDirectory:
                case FSEntry_Func_Reason_SetLibraryDirectory:
                case FSEntry_Func_Reason_CatalogueDirectory:
                case FSEntry_Func_Reason_ExamineCurrentDirectory:
                case FSEntry_Func_Reason_CatalogueLibraryDirectory:
                case FSEntry_Func_Reason_ExamineLibraryDirectory:
                case FSEntry_Func_Reason_ExamineObjects:
                        err = mb_nfserr_BadParameters;
                        break;

/* FSEntry_Func7 */
                case FSEntry_Func_Reason_SetFilingSystemOptions:
                        err = mb_no_opts_for_nfs;
                        break;

/* FSEntry_Func8 */
                case FSEntry_Func_Reason_RenameObject:
                        if ( parm->special_field_2 && parm->special_field_2[0] )
                        {
                                err = mb_bad_op_on_spool;
                        }
                        else
                        {
                                err = nfs_riscos_rename( parm->first_parameter.name_1, parm->second_parameter.name_2, &parm->first_parameter.rename_invalid );
                        }
                        break;

/* FSEntry_Func9 - not used */
                case FSEntry_Func_Reason_AccessObjects:
                        err = mb_nfserr_BadParameters;
                        break;

/* FSEntry_Func10 */
                case FSEntry_Func_Reason_BootFilingSystem:
                        err = nfs_boot();
                        break;

/* FSEntry_Func11-13 not used */
                case FSEntry_Func_Reason_ReadNameAndBootOptionOfDisc:
                case FSEntry_Func_Reason_ReadCurrentDirectoryNameAndPrivilegeByte:
                case FSEntry_Func_Reason_ReadLibraryDirectoryNameAndPrivilegeByte:
                        err = mb_nfserr_BadParameters;
                        break;

/* FSEntry_Func14 */
                case FSEntry_Func_Reason_ReadDirectoryEntries:
                        err = read_dir_entries(
                                0,
                                parm->first_parameter.name_1,
                                parm->second_parameter.destination_address,
                                &parm->third_parameter.read_number,
                                &parm->read_offset,
                                parm->buffer_length );
                        break;

/* FSEntry_Func15 */
                case FSEntry_Func_Reason_ReadDirectoriesAndInformation:
                        err = read_dir_entries(
                                Read_LoadAddress | Read_ExecuteAddress | Read_Length |
                                        Read_Attributes | Read_ObjectType,
                                parm->first_parameter.name_1,
                                parm->second_parameter.destination_address,
                                &parm->third_parameter.read_number,
                                &parm->read_offset,
                                parm->buffer_length );
                        break;

/* FSEntry_Func16 */
                case FSEntry_Func_Reason_ShutDown:
                        err = nfs_dismount_all();
                        if ( !err )
                                err = process_nfsname( User_Nobody, "" );
                        break;

/* FSEntry_Func17 */
                case FSEntry_Func_Reason_PrintStartUpBanner:
                        err = lightweight_printf( "Acorn RISC OS NFS\n" );
                        break;

/* FSEntry_Func18 */
                case FSEntry_Func_Reason_SetDirectoryContexts:
                        err = mb_func18_not_supported;
                        break;

/* FSEntry_Func19 */
                case FSEntry_Func_Reason_ReadDirectoryEntriesAndInformation:
                        err = read_dir_entries(
                                Read_LoadAddress | Read_ExecuteAddress | Read_Length |
                                        Read_Attributes | Read_ObjectType |
                                        Read_SIN | Read_DateTime,
                                parm->first_parameter.name_1,
                                parm->second_parameter.destination_address,
                                &parm->third_parameter.read_number,
                                &parm->read_offset,
                                parm->buffer_length );
                        break;

/* FSEntry_Func20 */
                case FSEntry_Func_Reason_OutputFullInformationOnObjects:
                        err = mb_func20_not_supported;
                        break;

/* FSEntry_Func23 */
                case FSEntry_Func_Reason_CanonicaliseSpecialFieldAndDiscName:
                {
                    _kernel_swi_regs *r=(_kernel_swi_regs *)parm;
#ifdef SHOWCALLS
                    if (r->r[2])
                        printf("Canonicalising '%s'\n", (char *) r->r[2]);
                    if (r->r[1])
                        printf("Special field `%s'\n", (char *) r->r[1]);
#endif
                    err=
                    canonicalise_disc_name((char *)r->r[2],
                                           (char *)r->r[4],
                                           r->r[6],
                                           (char **)&r->r[2],
                                           &r->r[4]);
                    if (err)
                        break;

                    /* Pass through special field unaltered */
                    if (r->r[1])
                    {
                        if (r->r[3])
                        {
                            strncpy((char *)r->r[3], (char *)r->r[1], r->r[5]);
                            r->r[1] = r->r[3];
                            r->r[3]=strlen((char *)r->r[1]) - r->r[5];
                        }
                        else
                            r->r[3]=strlen((char *)r->r[1]);
                    }
                    else
                        r->r[3]=0;
                }
                break;

/* FSEntry_Func24 */
                case FSEntry_Func_Reason_ResolveWildcard:
                        parm->read_offset=-1;
                        break;

/* FSEntry_Func27 */
                case FSEntry_Func_Reason_ReadBootOption:
                        parm->second_parameter.parameter=0;
                        break;

                default:
                        err = mb_nfserr_BadParameters;
                        break;
                }
        }

        hourglass_off();

        return err;
}
