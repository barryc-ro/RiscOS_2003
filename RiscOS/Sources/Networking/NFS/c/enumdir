/*	C.ENUMDIR

Purpose : Utility functions to enumerate the files in a directory.

Functions :  GetNextNFSDirEntry
	     GetNFSDirEntry
	     Get_NFS_Directory


History :
Date	Who    Comments
-----------------------------------------------------------------------------
28/8/92 ??     Initial version
12/1/95 CP     Removed functions start_through_directory and
	       step_to_next_file.  These have both been replaced with
	       Get_NFS_Directory, which fills in a NFS_Directory_T structure
	       with as many entries as can be transferred (set by
	       NFS_MAXDATA).  NO check for bad names yet.
	       Deleted read_this_file since functions using directories
	       have the concept of 'entries'
13/1/95	CP     Added include file Cache.h
5/2/95	CP     Restructured the ability to read directories so that the
	       information is cached.  Added functions OpenNFSDirectory and
	       GetNextNFSDirEntry.  Get_NFS_Directory changed to accept
	       discrete mount point, file handle and cookie input values
	       rather than a 'directory' structure. It is now called from
	       OpenNFSDirectory.
6/2/95  CP     Still a bug....need a routine to go to a random point in the
	       cache.  OpenNFSDirectory restructured and renamed to
	       GetNFSDirEntry.
16/2/95 CP     GetNFSDirEntry now goes to specified entry in directory.
	       Always freshens cache when starting a directory
	       (position requested == 0)

****************************************************************************/

#ifndef __NFS_H
#include "NFS.h"
#endif

#ifndef __NFSCACHE_H
#include "Cache.h"
#endif

#include <string.h>


static _kernel_oserror * Get_NFS_Directory(MountPoint *,
		  		    	   RO_nfs_fh3 *,
		  		    	   cookie3 *,
		  		    	   entryplus3 **,
		  		    	   BOOL *);

static void enumdir_update_caches(entryplus3 *);

static void free_dirplus_res(READDIRPLUS3res *);

static BOOL EOF_flagG;
static entryplus3 *peThisEntryG = NULL;
static entryplus3 *pePrevEntryG = NULL;
static clock_t TimeOutTimeG = 0;
static MountPoint MountG = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
static MountPoint *MountGP = NULL;
static RO_nfs_fh3 HandleG = {0};
static cookieverf3 CookieVerfG = { 0 };
static unsigned int positionG = 0;
static int est_max_entries = 284; /* Maximum filename total length on requests */

static u_long version = NFS_V3;

/********* GetNextNFSDirEntry  *********************************************

Purpose : Moves on to the next entryplus3 *in the current directory (as opened by
	  GetNFSDirEntry(...), and returns its filename.  A check is made
	  to see if it is worthwhile freshening the directory information
	  beforehand.  A flag is filled in (if defined) if a freshen has
	  happened, allowing the caller to decide whether to use the data, or
	  re-open the directory.

Parameters : char *, pointer to the name
             BOOL * pointer to a 'freshened' flag.  No action if NULL.

Returns	:  standard riscos error pointer
	   fills in pointer to the name of the first entry, NULL otherwise
	   filles in status of Freshened

****************************************************************************/

_kernel_oserror * GetNextNFSDirEntry(char **FileName, BOOL *Freshened)
{
   _kernel_oserror *err;

   if (version != NFS_V3) return GetNextNFS2DirEntry(FileName, Freshened);

   dprintf(("enumdir3_2", "GetNextNFSEntry\n"));

   positionG++;  /* we _know_ that the pointer is going to be moved,
   		    so even if we hit the end of the list, the cache knows
   		    that it is no longer pointing in the right place ! */

  /* see if directory needs to be freshened */
  if(TimeOutTimeG < clock())
  {
    /* get directory from current position */
    dprintf(("enumdir3_2", "GetNextNFSDirEntry: freshening, calling Get_NFS_Directory with cookie ..."));
    err = Get_NFS_Directory(&MountG, &HandleG, &peThisEntryG->cookie, &peThisEntryG, &EOF_flagG);
    if ( err )
   	return err;
    dprintf(("enumdir3_2", "OK\n"));

    /* set freshened flag */
    if(Freshened != NULL)
    {
       *Freshened = TRUE;
       TimeOutTimeG = clock() + out_of_date_time;
    }
  }

  else
  {
    if(Freshened != NULL)  /* see if the caller wants to know ! */
       *Freshened = FALSE;  /* no timeout */

    pePrevEntryG = peThisEntryG;  /* need memory */
    peThisEntryG = peThisEntryG->nextentry; /* move on to next one */

    if(peThisEntryG == NULL) /* end of list; get next chunk */
    {
       if(!EOF_flagG)
       {
          dprintf(("enumdir3_2", "GetNextNFSDirEntry: End of chunk,calling Get_NFS_Directory..."));
          err = Get_NFS_Directory(&MountG, &HandleG, &pePrevEntryG->cookie, &peThisEntryG, &EOF_flagG);
	   if(err)
	      return err;
	   dprintf(("enumdir3_2", "OK\n"));
       }

       else
       { /* nextentryplus3 *== NULL && EOF_flagG == TRUE
       	    ie. no nextentry, AND reached end of the directory */
          *FileName = NULL;
          return NULL;
       } /* endif(!EOF_flagG) */

    } /* endif (peThisEntryG != NULL) */

  }/* endif(TimeOutTimeG < clock()) */

  /* whatever has happened before, peThisEntry is now pointing to a valid
entryplus3 *by now */

   /* now get rid of the awkward file names */
   while((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == Yes))
   {
     pePrevEntryG = peThisEntryG;
     peThisEntryG = peThisEntryG->nextentry;

     if(peThisEntryG == NULL)
     {
       if(!EOF_flagG)
       {
          /* reached end of directory segment, get another */
	  /* VERY UNLIKELY TO USE THIS CODE ! */

           dprintf(("enumdir3_2", "GetNextNFSDirEntry: End of chunk(2),calling Get_NFS_Directory..."));
           err = Get_NFS_Directory(&MountG, &HandleG, &pePrevEntryG->cookie, &peThisEntryG, &EOF_flagG);
	   if(err)
	      return err;
	   dprintf(("enumdir3_2", "OK\n"));
       }

       else
          break;  /* unlikely, but covered */
       /* endif(!EOF_flagG) */

     } /* endif (peThisEntryG == NULL) */

   }  /* endwhile (reject_nfs_file(peThisEntry->name) == Yes) */

   /* entryplus3 *now has guaranteed valid name */

   if(peThisEntryG != NULL)
   {
      *FileName = peThisEntryG->name;
      enumdir_update_caches(peThisEntryG);
   }

   else
      *FileName = NULL; /* not a serious error, just no file ! */

   return NULL;


}  /* endfunction GetNextNFSDirEntry */


/********* GetNFSDirEntry  *********************************************

Purpose : Moves to the specified entryplus3 *in the current directory , and returns
	  its filename.

	  The directory data is freshened if the existing data is too old
	  (NFS global timeout parameter), if a different direftory is opened
	  (!), or if the request is for the start of the directory
	  (position == 0).  The latter condition is necessary to ensure that
	  fresh interrogations of the same directory are up to date.

Parameters : Mount Point
	     Handle of directory to open
	     position to start at
	     pointer to the name pointer
             pointer to a 'freshened' flag.  No action if NULL.

Returns	:  standard riscos error pointer
	   fills in pointer to the name of the first entry, NULL otherwise
	   fills in status of Freshened

****************************************************************************/


_kernel_oserror * GetNFSDirEntry (MountPoint *Mount,
		  		  RO_nfs_fh3 *Handle,
		  		  int position,
		  		  char **FileName,
		  		  BOOL *Freshened,
		  		  int set_max_entries)
{
  _kernel_oserror *err;

  if (version != Mount->host->nfs_version) {
    /* Version mismatch - abandon current search */
    version = Mount->host->nfs_version; /* For GetNextNFSDirEntry */
    if (version == NFS_VERSION) {
      /* Sufficient to cause mismatch lower down when an NFS3 directory search is continued.
       * By storing an NFS2 host's mount point here, the complicated conditional below will always
       * equate to true.
       */
      MountG = *Mount;
      MountGP = Mount;
    }
  }

  if (Mount->host->nfs_version == NFS_VERSION) {
     static nfs_fh fh2;
     fh2cpy_from_fh3(&fh2, &Handle->fh3);
     return GetNFS2DirEntry(Mount, &fh2, position, FileName, Freshened);
  }

  est_max_entries = set_max_entries;

  /*------------------------------------------------------------------------
     if the requested directory is not the current one in buffer, or the
     requested position is before the current position of the iterator, then
     start from scratch (the iterator cannot go backwards)
   -----------------------------------------------------------------------*/

  if((position == 0) ||
     (position < positionG) ||
     (memcmp(&MountG, Mount, sizeof(MountPoint))) ||
     (fh3cmp(&HandleG, Handle)) )
  {   /* new directory, or previous position, or start of directory */

      {
      if(position == 0)
          dprintf(("enumdir3_1", "GetNFSDirEntry: start of directory requested\n"));
      else
          if ((position < positionG) && (memcmp(&MountG, Mount, sizeof(MountPoint)) ||
                  fh3cmp(&HandleG, Handle)))
      	      dprintf(("enumdir3_1", "GetNFSDirEntry: new directory requested\n"));
          else
              dprintf(("enumdir3_1", "GetNFSDirEntry: previous position requested\n"));
      }

      memset(&CookieVerfG, 0, sizeof(CookieVerfG));
      MountGP = Mount;
      MountG = *Mount;
      fh3cpy(&HandleG, Handle);

      err = Get_NFS_Directory(&MountG, &HandleG, NULL, &peThisEntryG, &EOF_flagG);
      if ( err )
      	return err;

      /* strip off any invalid names */
      while((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == Yes))
      {
   	pePrevEntryG = peThisEntryG;
   	peThisEntryG = peThisEntryG->nextentry;

        if(peThisEntryG == NULL)
        {
          dprintf(("enumdir3_1", "GetNFSDirEntry: peThisEntry->nextentryplus3 *== NULL - Get more\n"));

          if(!EOF_flagG)
          {
             /* reached end of directory segment, get another */

   	  /* VERY UNLIKELY TO USE THIS CODE ! */

              err = Get_NFS_Directory(&MountG, &HandleG, &pePrevEntryG->cookie, &peThisEntryG, &EOF_flagG);
   	   if(err)
   	      return err;

          }

          else
             break;  /* unlikely, but covered */
          /* endif(!EOF_flagG) */

        } /* endif (peThisEntryG == NULL) */

      }  /* endwhile (reject_nfs_file(peThisEntry->name) == Yes) */


      positionG = 0;  /* start from beginning */

      TimeOutTimeG = clock() + out_of_date_time; /* update timeout */

  }  /* endif(!((MountG == Mount) && (HandleG == Handle)) || (position >
positionG)) */

  /*------------------------------------------------------------------------
     if the data has gone stale, then refresh the buffer from the current
     position onwards
   -----------------------------------------------------------------------*/
  if(TimeOutTimeG < clock())
  {
    dprintf(("enumdir3_1", "GetNFSDirEntry: stale data - reloading\n"));

    if(Freshened != NULL)
       *Freshened = TRUE;

     /* get directory from current position */
    err = Get_NFS_Directory(&MountG, &HandleG, &peThisEntryG->cookie, &peThisEntryG, &EOF_flagG);
    if ( err )
    	return err;

    /* strip off any invalid names */
    while((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == Yes))
    {
      pePrevEntryG = peThisEntryG;
      peThisEntryG = peThisEntryG->nextentry;

      if(peThisEntryG == NULL)
      {
        dprintf(("enumdir3_1", "GetNFSDirEntry: peThisEntry->nextentryplus3 *== NULL - More data\n"));

        if(!EOF_flagG)
        {
           /* reached end of directory segment, get another */

 	  /* VERY UNLIKELY TO USE THIS CODE ! */

            err = Get_NFS_Directory(&MountG, &HandleG, &peThisEntryG->cookie,
 &peThisEntryG, &EOF_flagG);
 	   if(err)
 	      return err;

        }

        else
           break;  /* unlikely, but covered */
        /* endif(!EOF_flagG) */

      } /* endif (peThisEntryG == NULL) */

    }  /* endwhile (reject_nfs_file(peThisEntry->name) == Yes) */

    TimeOutTimeG = clock() + out_of_date_time; /* update timeout */

  }

  else
  {
     if(Freshened != NULL)
        *Freshened = FALSE;
  } /* endif(TimeOutTimeG < clock()) */




  /*------------------------------------------------------------------------
     move forward along linked list (ignoring invalid file names) until
     positionG == position
   -----------------------------------------------------------------------*/

   while(positionG < position)
   {
      /* move to next entryplus3 **/
      pePrevEntryG = peThisEntryG;
      peThisEntryG = peThisEntryG->nextentry;

      if(peThisEntryG == NULL)
      {
        dprintf(("enumdir3_1", "GetNFSDirEntry: peThisEntry->nextentryplus3 *== NULL - Get more\n"));

        if(!EOF_flagG)
        {
           /* reached end of directory segment, get another */

           err = Get_NFS_Directory(&MountG, &HandleG, &peThisEntryG->cookie, &peThisEntryG, &EOF_flagG);
 	   if(err)
 	      return err;
        }

        else
           break;  /* unlikely, but covered */
        /* endif(!EOF_flagG) */

      } /* endif (peThisEntryG == NULL) */

      if((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == No))
      {
        positionG++;  /* valid file, increment count */
      }

   } /* endwhile (positionG < position) */

  /*------------------------------------------------------------------------
      Fill in the appropriae values, and return.
   -----------------------------------------------------------------------*/

   if(peThisEntryG != NULL)
   {
      *FileName = peThisEntryG->name;
      enumdir_update_caches(peThisEntryG);
   }

   else
      *FileName = NULL; /* not a serious error, just no file ! */

   return NULL;

} /* endfunction GetNFSDirEntry */




/********* Get_NFS_Directory  ***********************************************

Purpose : Fills in the supplied NFS_Directory_T type with details of the
	  specified directory.

Parameters : MountPoint
	     fhHandle.  The pmpMountpoint and fhHandle fields
	     		must be set to the required Mount Point and directory
			handle respectively.
	     cookie	Cookie where to start (if NULL, then beginning)
	     entryplus3 ***   Will be filled with the position of the 1st entry
	     BOOL *	EOF flag (TRUE => EOF )

Returns	: NULL if OK, error pointer otherwise.
	  Value of EOF flag set to value at end of transfer
	  (TRUE on EOF, FALSE otherwise).

****************************************************************************/


static _kernel_oserror * Get_NFS_Directory(MountPoint *pmpMountPoint,
		  		    RO_nfs_fh3 *fhHandle,
		  		    cookie3 *cookie,
		  		    entryplus3 **FirstEntry,
		  		    BOOL *EOF_flag)
{
  READDIRPLUS3args args;
  static READDIRPLUS3res *result = NULL;
  unused_client *nfs_client;
  _kernel_oserror *err;

/* start of routine */

   args.dir = fhHandle->fh3;

   if(cookie == NULL)
   {
      ui64_create(&args.cookie, 0);
   }

   else
   {
      args.cookie = *cookie;
   }
   memcpy(args.cookieverf, CookieVerfG, sizeof(CookieVerfG));
   args.dircount = NFS_MAXDATA;
   args.maxcount = NFS_MAXDATA; /* no point messing about.  Drag as much as
      		   		   you can across ! */


   /* actually get a client and do the transfer... */
   err = get_nfs_client_for_mp(&nfs_client, pmpMountPoint);

   if(err)
      return err;  /* error ! */

   if (result != NULL)
   {
           free_dirplus_res(result);
   }
   dprintf(("nfs3call", "nfsproc3_readdirplus_3 ..."));
   result = nfsproc3_readdirplus_3(&args, nfs_client->client);
   dprintf(("nfs3call", "%p\n", result));

   err = rpcnfs_to_riscos_err(result, pmpMountPoint, nfs_client->client);

   release_client(nfs_client);

   if(err)
   {
      memset(&CookieVerfG, 0, sizeof(CookieVerfG));
      if(err == mb_nfserr_stale)
      	 cancel_all_caches_by_fhandle(fhHandle);

      return err; /* error ! */
   }

   memcpy(CookieVerfG, result->READDIRPLUS3res_u.resok.cookieverf, sizeof(CookieVerfG));
   *FirstEntry = result->READDIRPLUS3res_u.resok.reply.entries;


   *EOF_flag = result->READDIRPLUS3res_u.resok.reply.eof;

   return NULL;


}   /* endfunction Get_NFS_Directory */


/********* enumdir_update_caches ********************************************

Purpose : Fills in the caches with the data from the supplied directory entry.
          The function validates the supplied entry details to ensure that
          all the fields required are valid before passing them on to the
          cache updating function.

Parameters : entryplus3. The directory entry object

Returns	: No value.

****************************************************************************/

static void enumdir_update_caches(entryplus3 *e)
{
    if (e->name_attributes.attributes_follow && e->name_handle.handle_follows) {
        RO_nfs_fh3 fh3;
        fh3cpy_from_xdr(&fh3, &e->name_handle.post_op_fh3_u.handle);
        nfs_internal_dirplus_update(
            MountGP,
            &HandleG,
            &fh3,
            e->name,
            &e->name_attributes.post_op_attr_u.attributes);
    }
    else {
            dprintf(("enumdir3_1", "** No cache update (attributes:%d handle:%d)\n",
            	!!e->name_attributes.attributes_follow, !!e->name_handle.handle_follows));
    }
}   /* endfunction enumdir_update_caches */


/* This function not yet implemented */
static void free_dirplus_res(READDIRPLUS3res *res)
{
#if 0
        if (res->status == NFS3_OK) {
                entryplus3 **eptr = &res->READDIRPLUS3res_u.resok.reply.entries;
                entryplus3 *entry = *eptr;
        }
#endif
	dprintf(("enumdir3_3", "xdr_free ... "));
        xdr_free(xdr_READDIRPLUS3res, res);
	dprintf(("enumdir3_3", "done\n"));
}
