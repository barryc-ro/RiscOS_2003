/*	NFSRW.C

Purpose : Pulls across many packets of data as fast as possible

Functions : start_transfer
	    schedule
	    transfermany
	    setup_readargs
	    endread
	    nfsrw_readmany
	    setup_writeargs
	    nfsrw_writemany

History :
Date	   Who      Comments
-----------------------------------------------------------------------------
09/09/92  J Sutton  Initial version
24/2/95   CP	    Added header and some more comments
	  	    Added check in schedule() to see if NFS data being
		    returned is valid (an attempt to cure the 'Oops, remote
		    file been deleted/moved/renamed' bug/feature/quality
		    improvement opportunity)
04-Mar-97 jmf	    Fix bug of dropped packets during large file saves
		    leaving holes in file and no error reported.  Caused
		    by inspecting NFS return codes that have not been set
		    when an RPC fails due to a communications error.
****************************************************************************/

#include "NFS.h"

#if DEBUGON && 0
#include "osustime.h"
#endif

#include "nfsrw.h"

/* static struct timeval TIMEOUT = { 25, 0 };  */
#include "TimeOut.h"


/* try to keep the network busy by juggling many simultaneous transfers */

#define MAXCOROUTINES 2
         /* Determined by the size of memory on the ethernet card
          * 32K is the minimum on a card, ususally 64K.
          * Max packet size is 8K +IP header overhead, so 3 packets
          * shouldn't overflow 32K on a card. */

typedef struct {  /* state per udp packet transfer in progress */
  enum clnt_stat status;        /* coroutine status */

  clntudp_codatap udpdata;      /* pointer to clntudp coroutine hidden data */

  unused_client *nfs_client;    /* coroutine client */

  union {                       /* arguments to rpc (read or write) */
        readargs rargs;
        writeargs wargs;
      } coargs;

  union {                       /* results from rpc (read or write) */
        readres rres;
        attrstat wres;
      } cores;

  } nfsrwstate;

/* a function to setup the arguments for the transfer */
typedef void (*argsfn)(nfsrwstate *rwstate, nfs_fh *fhandle, int *offset, int *nbytes, char **data);

static _kernel_oserror *start_transfer( nfsrwstate      rwstate[],
                                        MountPoint      *mount_point,
                                            u_long      proc,          /* procedure number */
                                            nfs_fh      *fhandle,
                                               int      *offset,
                                               int      *nbytes,
                                              char      **data,
                                               int      *ntransfers,
                                            argsfn      setup_args,
                                         xdrproc_t      xargs,         /* xdr routine for args */
                                         xdrproc_t      xresults)      /* xdr routine for results */
{ /* start one udp packet transfer */
        int co;
        _kernel_oserror *err;

        for (co = 0; co < MAXCOROUTINES; co++) /* find a 'slot' for the coroutine */
        {
                if ( rwstate[co].status != RPC_BUSY ) /* indicates an 'idle slot' */
                {
                        if (rwstate[co].nfs_client == NULL)  /* get a new client if one is needed */
                        {
                                err = get_nfs_client_for_mp( &rwstate[co].nfs_client, mount_point );
                                if (err != NULL)
                                        return err;
                        }

                        /* setup the arguments for this udp transfer */
                        setup_args(&rwstate[co], fhandle, offset, nbytes, data);

                        rwstate[co].status = clntudp_starttransfer(rwstate[co].nfs_client->client,
                                                                   proc,
                                                                   xargs,               /* xdr routine for arguments */
                                                          (caddr_t)&rwstate[co].coargs, /* pointer to args */
                                                                   xresults,            /* xdr routine for results */
                                                          (caddr_t)&rwstate[co].cores,  /* pointer to results */
                                                                   TIMEOUT,
                                                                   &rwstate[co].udpdata);
                        if ( rwstate[co].status == RPC_BUSY ) /* normal successful return */
                        {
                                if (co+1 > *ntransfers)
                                        *ntransfers = co+1; /* increment number of transfers in progress */
                                return NULL;
                        }
                        else
                        {
                          	/*  Was passing &rwstate[co].cores as first argument - wrong because the NFS result
                          	    is not set if the RPC fails.  */
                                err = rpcnfs_to_riscos_err( NULL, mount_point, rwstate[co].nfs_client->client );
                                return err;
                        }
                }
        }
        return NULL;
} /* endfunction start_transfer */



typedef void (*fn)(nfsrwstate *rwstate, void *arg);

/*
        schedule() calls clntudp_polltransfer on busy coroutines until they finish

        returns true in [*idle_slot] if any idle slots
        returns true in [*busy_slot] if any busy slots
 */
static _kernel_oserror *schedule( nfsrwstate    rwstate[],
                                  MountPoint    *mount_point,
                                         int    ntransfers,     /* number of transfers currently in progress */
                                      bool_t    *idle_slot,
                                      bool_t    *busy_slot,
                                          fn    endfn,          /* function to call on completion of transfer */
                                        void    *arg)           /* argument to pass to endfn */
{
        int co;
        _kernel_oserror *err;
        *idle_slot = (ntransfers < MAXCOROUTINES);
        *busy_slot = FALSE;

        for (co = 0; co < ntransfers; co++)
        {
                if (rwstate[co].status == RPC_BUSY)
                {
                        rwstate[co].status = clntudp_polltransfer(rwstate[co].udpdata);

                        if (rwstate[co].status == RPC_BUSY)
                                *busy_slot = TRUE;

                        else if (rwstate[co].status == RPC_SUCCESS) /* transfer finished */
                        {
/************** check added CP 24/2/95 **************************
  No check was being made on whether the NFS return was valid !
  (RPC return was being checked already)
 ****************************************************************/
   	       	  	   if(rwstate[co].cores.rres.status != NFS_OK)
   	       	  	   {
   	       	  	     *idle_slot = TRUE;
   	       	  	     err = rpcnfs_to_riscos_err(&rwstate[co].cores.rres, mount_point, rwstate[co].nfs_client->client);
   	       	  	     return err;
    	       	  	   }

			   else
			   {
                                endfn(&rwstate[co], arg); /* call endfn when finished transfer */
                                *idle_slot = TRUE;
                           } /* endif(rwstate[co].cores.rres.status != NFS_OK) */
                        }
                        else
                        {
                                *idle_slot = TRUE;
                          	/*  Was passing &rwstate[co].cores as first argument - wrong because the NFS result
                          	    is not set if the RPC fails.  */
                                err = rpcnfs_to_riscos_err( NULL, mount_point, rwstate[co].nfs_client->client );
                                return err;
                        }
                }
                else
                        *idle_slot = TRUE;
        }
        return NULL;
}  /* endfunction schedule */



/*
        transfermany() transfers data to or from a file, attempting to fill available
        network bandwidth by starting a number of simultaneous packets for files larger
        than the packet size.

        On entry:
        [mount_point]
        [nfsproc]   procedure number NFSPROC_READ or NFSPROC_WRITE
        [fhandle]   the file handle
        [offset]    offset in file to start transfer
        [nbytes]    number of bytes to transfer to or from file
        [data]      pointer to data to transfer to file, or area to write data from file
        [setup_args] function to setup arguments for transfer
        [endfn]     a function to be called when a packet transfer is successfully completed
        [arg]       argument to pass to endfn
        [xargs]     xdr routine for arguments
        [xresults]  xdr routine for results

        On exit:
                return value is NULL if successful
*/
static _kernel_oserror *transfermany( MountPoint        *mount_point,
                                          u_long        proc,
                                          nfs_fh        *fhandle,
                                             int        offset,
                                             int     	nbytes,
                                             char    	*data,
                                          argsfn        setup_args,
                                              fn        endfn,
                                            void    	*arg,
                                       xdrproc_t        xargs,
                                       xdrproc_t        xresults)
{
        nfsrwstate rwstate[MAXCOROUTINES];
        int co, ntransfers = 0;
        bool_t idle_slot = TRUE, busy_slot = FALSE;
        _kernel_oserror *err = NULL;
        int percentage_total = nbytes;

        /* initialise empty client pointers and status */
        for (co = 0; co < MAXCOROUTINES; co++)
                {
                rwstate[co].nfs_client = NULL;
                rwstate[co].status = RPC_SUCCESS;
                }

        while (nbytes > 0)
        {
                if (idle_slot)
                {
                        err = start_transfer(rwstate, mount_point, proc, fhandle, &offset, &nbytes, &data, &ntransfers, setup_args, xargs, xresults);
                        if (err != NULL) {
                        	/*  was (&& ntransfers == 0) but that leaves failed transfers in 
                        	    the middle of a file unreported.  */
                                goto abort;
                        }
                }

                err = schedule(rwstate, mount_point, ntransfers, &idle_slot, &busy_slot, endfn, arg);
                if (err != NULL)
                        goto abort;

               /* Advance the percentage on the hourglass */
                hourglass_percentage( (( percentage_total - nbytes ) * 100 ) / ( percentage_total + 1 ) );
        }

        /* finish all pending transfers */
        while (busy_slot)
        {
                err = schedule(rwstate, mount_point, ntransfers, &idle_slot, &busy_slot, endfn, arg);
                if (err != NULL)
                        goto abort;
        }

abort:
        /* release clients */
        for (co = 0; co < MAXCOROUTINES; co++)
                if ( rwstate[co].nfs_client != NULL )
                {
                        release_client( rwstate[co].nfs_client );
                        rwstate[co].nfs_client = NULL;
                }

        return err;
}


/*
        function to setup the arguments for reading
        passed to transfermany() and called by start_transfer()
*/
static void setup_readargs(nfsrwstate *rwstate, nfs_fh *fhandle, int *offset, int *nbytes, char **data)
{
        rwstate->coargs.rargs.file = *fhandle;
        rwstate->coargs.rargs.offset = *offset;
        rwstate->coargs.rargs.count = (*nbytes > NFS_MAXDATA) ? NFS_MAXDATA : *nbytes;
        *nbytes -= rwstate->coargs.rargs.count;
        *offset += rwstate->coargs.rargs.count;
        rwstate->cores.rres.readres_u.reply.data.data_val = *data;
        *data += rwstate->coargs.rargs.count;
}  /* endfunction transfermany */

typedef struct {
  int *readres_len;
  fattr *nattr;
  } endreadargstr;

/*
        function to call when a read request has been sent, and the data has
        returned with no error
*/
static void endread(nfsrwstate *rwstate, void *arg)
{
        endreadargstr *args = arg;
        *args->readres_len += rwstate->cores.rres.readres_u.reply.data.data_len;
        /* This really only needs to be set once, rather than on EVERY endread. */
        *args->nattr = rwstate->cores.rres.readres_u.reply.attributes; /* get attributes for caller cache update */
}

_kernel_oserror *nfsrw_readmany
(
        int *readres_len,
        char *readres_data,
        MountPoint *mount_point,
        nfs_fh *fhandle,
        unsigned offset,
        int nbytes,
        fattr *nattr
)
{
#if DEBUGON && 0
        OSusTimeLo t = OSusTime__ReadLo();
#endif
        _kernel_oserror *err = NULL;
        endreadargstr endreadargs;

        *readres_len = 0;  /* CHECK that this is acceptable (0 if error) */

        endreadargs.readres_len = readres_len;
        endreadargs.nattr = nattr;

        err = transfermany(mount_point, NFSPROC_READ,
                           fhandle, (int)offset, nbytes, readres_data,
                           setup_readargs, endread, &endreadargs,
                           xdr_readargs, xdr_readres);
        if (err != NULL)
                return err;

        return NULL;
}


/*
        function to setup the arguments for writing
        passed to transfermany() and called by start_transfer()
*/
static void setup_writeargs(nfsrwstate *rwstate, nfs_fh *fhandle, int *offset, int *nbytes, char **data)
{
        rwstate->coargs.wargs.file = *fhandle;
        rwstate->coargs.wargs.offset = *offset;
        rwstate->coargs.wargs.data.data_len = (*nbytes > NFS_MAXDATA) ? NFS_MAXDATA : *nbytes;
        *nbytes -= rwstate->coargs.wargs.data.data_len;
        *offset += rwstate->coargs.wargs.data.data_len;
        rwstate->coargs.wargs.data.data_val = *data;
        *data += rwstate->coargs.wargs.data.data_len;
} /* endfunction nfsrw_readmany */

/*
        function to call when a write packet has been sent, and the acknowledgement
        is received with no error.
*/
static void endwrite(nfsrwstate *rwstate, void *arg)
{
        fattr **nattr = arg;
        *nattr = &rwstate->cores.wres.attrstat_u.attributes;  /* N.B. this should not be necessary after every packet transferred */
}

_kernel_oserror *nfsrw_writemany(
        fattr **nattr,
        MountPoint *mount_point,
        nfs_fh *fhandle,
        unsigned offset,
        char *data,
        int nbytes
)
{
#if DEBUGON && 0
        OSusTimeLo t = OSusTime__ReadLo();
#endif
        _kernel_oserror *err = NULL;

        err = transfermany(mount_point, NFSPROC_WRITE,
                           fhandle, (int)offset, nbytes, data,
                           setup_writeargs, endwrite, nattr,
                           xdr_writeargs, xdr_attrstat);

        return err;
} /* endfunction nfsrw_writemany */
