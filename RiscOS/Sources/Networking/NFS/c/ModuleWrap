/*	MODULEWRAP

Purpose : Sets uo all the module-type things for NFS

History :
Date	Who    Comments
-----------------------------------------------------------------------------
4/7/89   JSR   Copied from Filer.c.modulewrap

13/2/95  CP    Now opens/closes debug stream pipe:debug
23/2/95  KSR   Added support for *nfs_boot
06/2/96  KJB   Merged NFS and STBNFS into single source tree
09/2/96  DNW   Changed the *cmd handler (nfs_command)
                1) So it would appear on a zap function name lookup
                2) So that it handled the New commands :-)
****************************************************************************/

#include "nfscmhg.h"

#ifndef _NFSNFS_H
#include "NFS.h"
#endif

#include "TimeOut.h"

#include <locale.h>
#include "memory.h"


struct timeval TIMEOUT = { 25, 0 }; /* is the timeout for nfs functions  */
struct timeval TIMERETRY = { 5, 0 }; /* is the retry timeout interval */

extern int atexit( void (*func)( void ));

/*
        This is the SWI handler

SWI definitions:

NFS_Mount
In:     r0 -> host name (if NULL this means current mounting host)
        r1 -> mount name
        r2 -> mount path
Out:    mount point mounted or error; registers unchanged.

NFS_MountList
In:     r0 -> host name or NULL
        r1 -> previous mount name or NULL to start the listing
Out:    possible error if host speicifed does not exist
        r1 -> next mount name after one passed in, in alphabetical order
                list of mount points returned are for host list
                or for total mount point list if r0 = NULL on entry

NFS_SetUser
In:     r0 -> host name for nameing host - NULL means use current nameing host
        r1 -> username; if "nobody" no password is needed - NULL means just set nameing host
        r2 -> user password
Out:    error if user not verified on host

NFS_Dismount
In:     r0 -> host name
        r1 -> mount name
Out:    Specified mount point(s) dismounted. It is an error
        to specify both host and mount point.

NFS_MountInfo
In:     r1 -> mount name
Out:    r0 -> mount point's host's name
        r1 -> mount name (ie unchanged from entry)
        r2 -> mount path
        r3 -> user name used for mount point
        r4 -> host name used for verification and details of user

NFS_FreeSpace
In:     r1 -> mount name
Out:    r0 = total non-privileged free space available
        r1 -> mount name (unchanged)
        r2 = total size of disc
        R3 = total unused size of disc

NFS_FreeSpace64
In:     r0 = 4 (Free module's reason code)
        r1 = NFS filing system id
        r2 -> pointer to 6 word buffer
        r3 -> mount name
Out:    r0 = 0
        all other registers preserved

*/
_kernel_oserror *nfs_swi
(
        int swi_number,
        _kernel_swi_regs *r,
        void *private_word
)
{
        _kernel_oserror *err = NULL;
        MountPoint *mount_point;
        Chain_Link *link;

        private_word = private_word;

        hourglass_on();

        switch ( swi_number )
        {
        case NFS_Mount - NFS_00:
                if ( r->r[1] == NULL )
                {
                        err = mb_swi_mount_invalid_parameters;
                }
                else
                {
                        if ( strchr( (char *)r->r[0], ' ' ) != NULL || strchr( (char *)r->r[0], ':' ) != NULL )
                                err = mb_no_spaces_in_mount_name;

                        if ( !err )
                                err = nfs_mount( (char *)r->r[0], (char *)r->r[1], (char *)r->r[2] );
                }
                break;

        case NFS_MountList - NFS_00:
                /*
                        If a host is specified then find it and start through its mount point list
                */
                if ( r->r[0] != 0 )
                {
                        for ( link = host_list.forwards;
                                link->forwards != NULL &&
                                        strcmp( ((Host *)Link_Wrapper( link ))->host_name, (char *)r->r[0] ) != 0;
                                link = link->forwards )
                        {
                                /* do nothing */
                        }

                        if ( link->forwards == NULL )
                        {
                                err = mb_no_host_found;
                                break;
                        }

                        link = ((Host *)Link_Wrapper( link ))->mount_points.forwards;
                }
                else
                {
                        link = mount_point_list.forwards;
                }

                /*
                        If not starting through list then step through the list until we find an entry
                        greater than the one we've been given.
                */
                if ( r->r[1] != NULL )
                {
                        for ( ;
                                link->forwards &&
                                        caseless_strcmp( ((MountPoint *)Link_Wrapper( link ))->mount_point_name, (char *)r->r[1] ) <= 0;
                                link = link->forwards )
                        {
                                /* do nothing */
                        }
                }

                /*
                        Fill in the result as appropriate
                */
                if ( link->forwards )
                {
                        r->r[1] = (int)((MountPoint *)Link_Wrapper( link ))->mount_point_name;
                }
                else
                {
                        r->r[1] = NULL;
                }
                break;

        case NFS_SetUser - NFS_00:
                err = new_host( &current_nameing_host, (char *)r->r[0] );

                if ( !err && r->r[1] )
                {
                        err = process_nfsname( (char *)r->r[1], (char *)r->r[2] );
                }
                break;

        case NFS_Dismount - NFS_00:
                if ( r->r[0] != 0 )
                {
                        if ( r->r[1] != 0 )
                        {
                                /*
                                        Dismount host and mount point - its ambiguous
                                */
                                err = mb_swi_dismount_ambiguous_parameters;
                        }
                        else
                        {
                                /*
                                        Dismount host
                                */
                                for ( link = host_list.forwards;
                                        link->forwards != NULL &&
                                                strcmp( ((Host *)Link_Wrapper( link ))->host_name, (char *)r->r[0] ) != 0;
                                        link = link->forwards )
                                {
                                        /* do nothing */
                                }

                                if ( link->forwards )
                                {
                                        err = nfs_dismount_host( Link_Wrapper( link ));
                                }
                                else
                                {
                                        err = mb_no_host_found;
                                }
                        }
                }
                else
                {
                        if ( r->r[1] != 0 )
                        {
                                /*
                                        Dismount mount point
                                */
                                mount_point = find_mount( (char *)r->r[1] );
                                if ( mount_point == NULL )
                                {
                                        err = mb_no_mount_point_found;
                                }
                                else
                                {
                                        err = nfs_dismount( mount_point );
                                }
                        }
                        else
                        {
                                err = nfs_dismount_all();
                        }
                }
                break;

        case NFS_MountInfo - NFS_00:
                if ( r->r[1] != 0 )
                {
                        mount_point = find_mount( (char *)r->r[1] );
                        if ( mount_point != NULL )
                        {
                                r->r[0] = (int)mount_point->host->host_name;
                                r->r[2] = (int)mount_point->mount_path;
                                r->r[3] = (int)mount_point->user->name;
                                if ( mount_point->user->host )
                                        r->r[4] = (int)mount_point->user->host->host_name;
                                else
                                        r->r[4] = (int)"";
                        }
                        else
                        {
                                err = mb_no_mount_point_found;
                        }
                }
                else
                {
                        err = mb_no_mount_point_found;
                }
                break;

        case NFS_FreeSpace - NFS_00:
                        {
                        utils_spacestr space;
                        err = utils_getfsspace( &space, (char *)r->r[1] );
                        if (space.active_quota)
                        {
                                long free = (space.sp.quota.space.slim > space.sp.quota.space.usage)
                                                ? space.sp.quota.space.slim - space.sp.quota.space.usage
                                                : 0;
                                r->r[2] = (int)space.sp.quota.space.slim;
                                r->r[0] = (int)free;
                                r->r[3] = (int)space.sp.quota.space.slim - (int)space.sp.quota.space.usage;
                             /* r3 is arranged so that (r2 - r3) gives usage, which is what the
                              * free display is trying to derive */
                        }
                        else
                        {
                                /* the interface allows me to do nothing about these wrapping negative when multiplied */
                                r->r[0] = (int)(((int)space.sp.statfs.bavail>0) ? space.sp.statfs.bavail*space.sp.statfs.bsize : 0);
                                r->r[2] = (int)(((int)space.sp.statfs.blocks>0) ? space.sp.statfs.blocks*space.sp.statfs.bsize : 0);
                                r->r[3] = (int)(((int)space.sp.statfs.bfree>0) ? space.sp.statfs.bfree*space.sp.statfs.bsize : 0);
                        }

                        }
                break;

        case NFS_FreeSpace64 - NFS_00:
                        {
                        utils_spacestr space;
                        struct r2 {
                          u_int64_t total;
                          u_int64_t free;
                          u_int64_t used;
                        } *r2 = (struct r2 *)(r->r[2]);
                        err = utils_getfsspace( &space, (char *)r->r[3] );
                        if (err == NULL) r->r[0] = 0;
                        if (space.active_quota)
                        {
                                long free = (space.sp.quota.space.slim > space.sp.quota.space.usage)
                                                ? space.sp.quota.space.slim - space.sp.quota.space.usage
                                                : 0;
                                ui64_multiply_uu(&r2->total, space.sp.quota.space.slim,  space.sp.quota.space.bsize);
                                ui64_multiply_uu(&r2->free,  free,                       space.sp.quota.space.bsize);
                                ui64_multiply_uu(&r2->used,  space.sp.quota.space.usage, space.sp.quota.space.bsize);
                             /* r3 is arranged so that (r2 - r3) gives usage, which is what the
                              * free display is trying to derive */
                        }
                        else
                        {
                                ui64_multiply_uu(&r2->free,  space.sp.statfs.bavail, space.sp.statfs.bsize);
                                ui64_multiply_uu(&r2->total, space.sp.statfs.blocks, space.sp.statfs.bsize);
                                ui64_subtract_u64u64(&r2->used, &r2->total, &r2->free);
                        }

                        }
                break;

        default:
                break;
        }

        hourglass_off();

        return err;
}

static void junk_host_list
(
        void
)
{
        while( host_list.forwards->forwards )
        {
                (void)release_host( Link_Wrapper( host_list.forwards ));
        }
}

static void junk_user_list
(
        void
)
{
        while ( user_list.forwards->forwards )
        {
                (void)release_user( Link_Wrapper( user_list.forwards ));
        }
}

/*
        This is the finalisation code for NFS
*/
static void nfs_finalise
(
        void
)
{
        nfs_dismount_all();

        junk_user_list();
        junk_host_list();

        (void)extensions_dispose();

        (void)_swix(OS_FSControl, _INR(0,1), FSControl_RemoveFilingSystem,
                                             NFSFilingSystemName );

        free_cache();
	memory_finalise();
}

/*
        Declare NFS to FileSwitch
*/
static _kernel_oserror *declare_nfs
(
        void *private_word
)
{
        _kernel_oserror *err;
        int information_block[ Information_Block_Size ];

        /*
                Attach ourselves to FileSwitch
        */
        information_block[0] = (int)"NFS"                       - (int)Image_RO_Base;
#ifdef NFSSTB
        information_block[1] = (int)"OnLine Media Set-top NFS"  - (int)Image_RO_Base;
#else
        information_block[1] = (int)"Acorn RISC OS NFS"         - (int)Image_RO_Base;
#endif
        information_block[2] = (int)&veneer_fsentry_open        - (int)Image_RO_Base;
        information_block[3] = (int)&veneer_fsentry_getbytes    - (int)Image_RO_Base;
        information_block[4] = (int)&veneer_fsentry_putbytes    - (int)Image_RO_Base;
        information_block[5] = (int)&veneer_fsentry_args        - (int)Image_RO_Base;
        information_block[6] = (int)&veneer_fsentry_close       - (int)Image_RO_Base;
        information_block[7] = (int)&veneer_fsentry_file        - (int)Image_RO_Base;
        information_block[8] = Information_Word;
        information_block[9] = (int)&veneer_fsentry_func        - (int)Image_RO_Base;
        information_block[10] = (int)&veneer_fsentry_gbpb       - (int)Image_RO_Base;
        /*information_block[11] = Extra_Information_Word;*/

        err = _swix(OS_FSControl, _INR(0,3), FSControl_AddFilingSystem,
                                             Image_RO_Base,
                                             (char *)information_block - (char *)Image_RO_Base,
                                             private_word);
        if ( err )
                return err;

        /*
                Say hello to the world
        */
        return _swix(OS_ServiceCall, _IN(1), Service_NFS);
}

/*
        This is the initialisation code for NFS
*/
_kernel_oserror *nfs_initialise
(
        const char *cmd_tail,
        int podule_base,
        void *private_word
)
{
        _kernel_oserror *err;
        char sysvar_buffer[ 20 ];
        char *dummy;

    	debug_initialise("NFS", "", "");
    	debug_atexit();
    	debug_set_options(0, 0, 0);
    	debug_output_device(PRINTF_OUTPUT);

#ifdef TRACE_ENABLED
    	debug_initialise_trace (PRINTF_OUTPUT, "");
#endif

	err = memory_initialise();
	if ( err )
	        return err;

        cmd_tail = cmd_tail;
        podule_base = podule_base;

        setlocale(LC_ALL, "");

        initialise_header( &mount_point_list );
        initialise_header( &host_list );
        initialise_header( &user_list );
        current_nameing_host = NULL;
        current_mounting_host = NULL;

        current_user = NULL;

        /*
                Current user should always be nobody
        */
        err = new_user( &current_user, User_Nobody, NULL, UNIX_MagicNumber_UID_Nobody, UNIX_MagicNumber_GID_Nobody, authunix_create_default(),
                0, NULL, -1);
        if ( err )
                return err;

        err = extensions_read();
        if ( err )
        {
                junk_user_list();
                return err;
        }

        err = declare_nfs( private_word );
        if ( err )
        {
                extensions_dispose();
                junk_user_list();
                return err;
        }

        if ( !_kernel_getenv( NFSTruncateLengthVariable, sysvar_buffer, 20 ) )
        {
                sysvar_buffer[ 19 ] = '\0';
                max_riscos_name_length = (int)strtol( sysvar_buffer, &dummy, 0 );
        }

       if ( !_kernel_getenv( NFSTimeoutVariable, sysvar_buffer, 20 ) )
        {
                sysvar_buffer[ 19 ] = '\0';
                TIMEOUT.tv_sec = strtol( sysvar_buffer, &dummy, 0 );
        }

       if ( !_kernel_getenv( NFSCacheSizeVariable, sysvar_buffer, 20 ) )
        {
                sysvar_buffer[ 19 ] = '\0';
                err = set_cache_size((int)strtol( sysvar_buffer, &dummy, 0 ));
        }
        else
		err = set_cache_size(0);

        atexit( nfs_finalise );

        /*
                Set defaults for *TypesBase and *CacheTime
        */
        out_of_date_time = CacheOutOfDateTime;

        return err;
}

/*
        NFS service handler
*/
void nfs_service
(
        int service_number,
        _kernel_swi_regs *r,
        void *private_word
)
{
        r = r;

        switch( service_number )
        {
        case Service_FSRedeclare:
                declare_nfs( private_word );
                break;
        }
}

/*
        NFS command processor
*/
_kernel_oserror *nfs_command( const char *arg_string, int argc, int cmd_no, void *private_word)
{
        _kernel_oserror *err = NULL;
        char *temptr = my_command_parameter_buffer;

        private_word = private_word;

        /*
                Change the control character terminator to a nul terminator
        */
        for ( ;
              temptr - my_command_parameter_buffer < My_Command_Parameter_Buffer_Len && *arg_string >= ASpace;
              arg_string++ )
        {
                *(temptr++) = *arg_string;
        }

        *temptr = '\0';

        temptr = my_command_parameter_buffer;

        /*
                Switch between the commands
        */
        switch ( cmd_no )
        {
        case CMD_NFS:
                err = command_nfs( temptr, argc );
                break;

        case CMD_Logon:
                err = command_nfsname( temptr, argc );
                break;

        case CMD_Mount:
                err = command_nfsmount( temptr, argc );
                break;

        case CMD_Dismount:
                err = command_nfsdismount( temptr, argc );
                break;

        case CMD_Bye:
                err = nfs_dismount_all();
                if ( !err )
                        err = process_nfsname( User_Nobody, "" );
                break;

        case CMD_Free:
                err = command_free( temptr, argc );
                break;

        case CMD_CacheTime:
                err = command_cachetime( temptr, argc );
                break;

        case CMD_NFSInfo:
                err = command_nfsinfo( temptr, argc );
                break;

        case CMD_NFSBoot:
                err = nfs_boot( );
                break;

        case CMD_CacheSize:
        	err = command_cachesize( temptr, argc);
                break;

        case CMD_Histogram:
                err = command_histogram();
                break;

        case CMD_Timeout:
                err = command_timeout( temptr, argc );
                break;

		case CMD_PacketSize:
				err = command_packetsize( temptr, argc );
				break;

        default:
                err = lightweight_printf( "Command not recognised by RISC OS NFS\n" );
                break;
        }

        return err;
}
