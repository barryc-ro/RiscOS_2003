#define DO_WRITE_MANY

#ifndef __NFSNFS_H
#include "NFS.h"
#endif

#include "DebugLib/DebugLib.h"

/*
        Get bytes from the given file to the given location
*/
_kernel_oserror *getbytes
(
        char **dest,
        nfs_file_descriptor *ndesc,
        unsigned long *start,
        int *number
)
{
        _kernel_oserror *err;
        long count;
        int data_len;
        int extent = riscos_extent( ndesc );

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        /* JRS 17/09/92 extensively modified to use nfs_readmany for datasize > NFS_MAXDATA */

        count = *number;

        if ( ((long)*start) + count > extent )
                count = extent - (long)*start; /* cannot get data beyond file extent */

        if ( count <= 0 )
        {
                err = NULL;   /* no data transferred */
                data_len = 0;
        }
        else if (count <= NFS_MAXDATA) /* all can be sent in 1 udp packet */
        {
                err = nfs_read( &data_len, *dest, ndesc->mp, &ndesc->file, *start, (int) count );
        }
        else /* multiple udp packets are handled more efficiently by readmany */
        {
                err = nfs_readmany( &data_len, *dest, ndesc->mp, &ndesc->file, *start,(int) count );
        }

        if ( !err )
        {
        /*
                update the counts/pointers.
         */
                *number -= data_len;
                *dest += data_len;
                *start += data_len;
        }
        return err;
}

/*
        Write zeros to the given file at the given location.
*/
_kernel_oserror *write_zeros
(
        nfs_file_descriptor *ndesc,
        unsigned long start,
        int number
)
{
        _kernel_oserror *err = NULL;
        unsigned count;
        int extent;
        bytes_with_appendum bwa;
        fattr3 *ret_nattr = NULL;
        char *area_of_zeros;

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        area_of_zeros = calloc( NFS_MAXDATA, sizeof( *area_of_zeros ));
        if ( !area_of_zeros )
        {
                return mb_malloc_failed;
        }

        if ( ndesc->desc.file_is_lxa )
        {
                /*
                        Write zeros to a file with an appendum
                */
                extent = riscos_extent( ndesc );

                /*
                        While there is no error and there are more bytes to transfer before the
                        end of the file.
                */
                while( !err && number > 0 && start + number < extent ) /* don't extend the file */
                {
                        count = number;

                        if ( count > NFS_MAXDATA )
                                count = NFS_MAXDATA;

                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, start, area_of_zeros, count );

                        number -= count;
                        start += count;
                }

                bwa.bytes = area_of_zeros;
                bwa.bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                bwa.bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;

                /*
                        While there is no error and there are more bytes to transfer with
                        an appendum on the end.
                */
                while( !err && number > 0 ) /* now we can extend the file if necessary */
                {
                        count = number;

                        if ( count > NFS_MAXDATA - sizeof( appendum ) )
                                count = NFS_MAXDATA - sizeof( appendum );

                        err = nfs_write_with_appendum( &ret_nattr, ndesc->mp, &ndesc->file, start, &bwa, count );

                        number -= count;
                        start += count;
                }
        }
        else
        {
                /*
                        Transfer bytes with no appendum.
                */
                while( !err && number > 0 ) /* extend the file if necessary */
                {
                        count = number;

                        if ( count > NFS_MAXDATA )
                                count = NFS_MAXDATA;

                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, start, area_of_zeros, count );

                        number -= count;
                        start += count;
                }
        }

        if ( !err && ret_nattr )
                ndesc->desc.attr = *ret_nattr;

        free( area_of_zeros );

        return err;
}

/*
        Put a number of bytes to the file.

        Will pad with zeros out to position as necessary
*/
_kernel_oserror *putbytes
(
        char **source,
        nfs_file_descriptor *ndesc,
        unsigned long *start,
        int *number
)
{
        _kernel_oserror *err = NULL;
        int count, thiscount;
        bool_t write_appendum;
        int extent = riscos_extent( ndesc );
        bytes_with_appendum bwa;
        fattr3 *ret_nattr = NULL;

        if ( ndesc->desc.attr.type == NF3LNK )
        {
                return mb_not_to_a_soft_link_you_dont;
        }

        /*
                Pad with zeros if necessary to extend the file up to the start offset
        */
        if (*start > extent)
        {
                err = write_zeros( ndesc, extent, (int) *start - extent );
                if ( err )
                        return err;
        }

        /* JRS 17/09/92 extensively modified to use nfs_writemany for datasize > NFS_MAXDATA */

        count = *number;

        if ( ndesc->desc.file_is_lxa && (*start + *number > extent) )
        {
        /*
                Extending the file.
                Subtract packetsize from count for writing 1 packet of data + appendum
        */
                write_appendum = TRUE;
                count -= NFS_MAXDATA - sizeof(appendum);
        }
        else
        {
                write_appendum = FALSE;
        }

        /*
                write the data
        */
        if ( count <= 0 )
        {
                err = NULL;   /* no data transferred */
                count = 0;
        }

        else {
                if (count > NFS_MAXDATA)
                {
                        thiscount = NFS_MAXDATA;

                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, thiscount);

                        if ( !err )
                        {
                                *start += thiscount;
                                *source += thiscount;
                                *number -= thiscount;
                                count -= thiscount;
                        }

                        if (!err && count > NFS_MAXDATA)
                        {
                                thiscount = count - NFS_MAXDATA;

                                if (thiscount <= NFS_MAXDATA)
                                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, thiscount);
                                else
                                        err = nfs_writemany( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, thiscount);

                                if ( !err )
                                {
                                        *start += thiscount;
                                        *source += thiscount;
                                        *number -= thiscount;
                                        count -= thiscount;
                                }
                        }
                }
                if (!err && count > 0)
                {
                        err = nfs_write( &ret_nattr, ndesc->mp, &ndesc->file, *start, *source, count);

                        if ( !err )
                        {
                                *start += count;
                                *source += count;
                                *number -= count;
                        }
                }
        }

        if (!err && write_appendum)
        {
                count = *number;

                bwa.bytes = *source;
                bwa.bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                bwa.bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;

                err = nfs_write_with_appendum( &ret_nattr, ndesc->mp, &ndesc->file, *start, &bwa, count );

                if ( !err )
                {
                        *start += count;
                        *source += count;
                        *number -= count;
                }
        }

        if ( !err && ret_nattr )
                ndesc->desc.attr = *ret_nattr;
        return err;
}

_kernel_oserror *fsentry_gbpb( FSEntry_GBPB_Parameter *parm )
{
        _kernel_oserror *err;
        OpenFile *of = (OpenFile *)parm->handle;
        unsigned long sfp;

        hourglass_on();

#ifdef SHOWCALLS
        printf(
                "_GBPB( %s, %d, (parm sfp=%d, of sfp=%d), %#010x, %d )\n",
                of->nfs_fd.desc.name,
                parm->reason,
                parm->sequential_file_pointer,
                of->sequential_file_pointer,
                (int)parm->address,
                parm->number );
#endif

        switch ( parm->reason )
        {
        case FSEntry_GBPB_Reason_PutMultipleBytesHere:
                err = putbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &parm->sequential_file_pointer,
                        &parm->number );

                if ( !err )
                        of->sequential_file_pointer = parm->sequential_file_pointer;
                break;

        case FSEntry_GBPB_Reason_PutMultipleBytes:
                err = putbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &of->sequential_file_pointer,
                        &parm->number );
                break;

        case FSEntry_GBPB_Reason_GetMultipleBytesHere:
                sfp = parm->sequential_file_pointer;
                err = getbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &parm->sequential_file_pointer,
                        &parm->number );

                if ( sfp != parm->sequential_file_pointer )
                        of->sequential_file_pointer =
                                parm->sequential_file_pointer;
                break;

        case FSEntry_GBPB_Reason_GetMultipleBytes:
                err = getbytes(
                        &parm->address,
                        &of->nfs_fd,
                        &of->sequential_file_pointer,
                        &parm->number );
                break;

        default:
                dprintf(("", "Unused FSEntry_GBPB entry called! (%d)\n", parm->reason));
                return mb_nfserr_BadParameters;
                break;
        }

        hourglass_off();

        return err;
}
