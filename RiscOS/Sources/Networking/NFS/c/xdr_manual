/*
 * Please do not delete this file.
 * It was NOT NOT NOT generated using rpcgen.
 */

#include <rpc/types.h>
#include <rpc/xdr.h>
#include <string.h>

#include "h.nfs_prot"

bool_t
xdr_entry(xdrs, objp)
        XDR *xdrs;
        entry *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_u_int(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_nfscookie(xdrs, objp->cookie)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entry *) mem_alloc(sizeof(entry));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                memset(objp->nextentry, '\0', sizeof(entry));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entry));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}

bool_t
xdr_entry3(xdrs, objp)
        XDR *xdrs;
        entry3 *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_fileid3(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename3(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_cookie3(xdrs, &objp->cookie)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entry3 *) mem_alloc(sizeof(entry3));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                memset(objp->nextentry, '\0', sizeof(entry3));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entry3));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}

bool_t
xdr_entryplus3(xdrs, objp)
        XDR *xdrs;
        entryplus3 *objp;
{
        bool_t more_data;
        caddr_t loc;
        bool_t is_first_time_round = (TRUE);

        do {
                if (!xdr_fileid3(xdrs, &objp->fileid)) {
                        return (FALSE);
                }
                if (!xdr_filename3(xdrs, &objp->name)) {
                        return (FALSE);
                }
                if (!xdr_cookie3(xdrs, &objp->cookie)) {
                        return (FALSE);
                }
                if (!xdr_post_op_attr(xdrs, &objp->name_attributes)) {
                        return (FALSE);
                }
                if (!xdr_post_op_fh3(xdrs, &objp->name_handle)) {
                        return (FALSE);
                }


                more_data = (objp->nextentry != NULL);
                if (! xdr_bool(xdrs,&more_data)) {
                        return (FALSE);
                }

                loc = (caddr_t)objp;

                if (! more_data) {
                        objp->nextentry = NULL;
                } else {
                        if (xdrs->x_op == XDR_DECODE && objp->nextentry == NULL) {
                                objp->nextentry = (entryplus3 *) mem_alloc(sizeof(entryplus3));
                                if (objp->nextentry == NULL) {
                                        (void) fprintf(stderr,
                                            "xdr_reference: out of memory\n");
                                        return (FALSE);
                                }
                                memset(objp->nextentry, '\0', sizeof(entryplus3));
                        }

                        objp = objp->nextentry;
                }

                if (xdrs->x_op == XDR_FREE && !is_first_time_round) {
                        mem_free(loc, sizeof(entryplus3));
                }

                is_first_time_round = (FALSE);
        } while( more_data );

        return (TRUE);
}
