/* File:    memory.c
 * Purpose: Memory allocation for Toolbox module
 * Author:  Kevin Bracey
 * History: 22-Nov-96: KJB:   created
 *          21-Apr-99: SNB:   adapted for NFS module
 *
 */


#include <string.h>
#include <stddef.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"

#include "memory.h"
#include "heapswis.h"

#include "rpc/types.h"

/* Declare the maximum dynamic area size.
 */
#define MAX_DA_SIZE	(8*1024*1024)

static int da_number;
static void *da_addr;
static int da_size;
static int page_size;

static _kernel_oserror *extend_heap(int req);
static void shrink_heap(void);

static _kernel_oserror *_nfs_memory_alloc(size_t size, void **pp);
static _kernel_oserror *_nfs_memory_free(void *p);

/****************************************************************************
 * memory_initialise
 *
 * Prepare the memory library for use - if DAs are available, create a
 * DA for our use.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Page size >= 16 bytes
 *
 */
_kernel_oserror *memory_initialise(void)
{
    _kernel_oserror *e;

    da_number=-1;
    da_addr=0;
    da_size=0;

    /* Check whether we have DAs by trying an enumerate */

    if (_swix(OS_DynamicArea, _INR(0,1), 3, -1))
        return NULL;

    if ((e = _swix(OS_ReadMemMapInfo, _OUT(0), &page_size)) != NULL)
        return e;

    e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3),
                                   0,    /* Create DA */
                                   -1,   /* Any number */
                                   page_size, /* One page initially */
                                   -1,   /* Any address */
                                   128,  /* Not draggable */
                                   MAX_DA_SIZE,
                                   0, 0, /* No handler routine */
                                   "NFS workspace",
                                   &da_number,
                                   &da_addr);

	if (e == NULL) {
	        da_size = page_size;
        	if ((e = xosheap_initialise(da_addr, da_size)) != NULL)
	        {
	            memory_finalise();
	        }
	}

    return e;
}

/****************************************************************************
 * memory_finalise
 *
 * This function shuts down the memory library, and frees our dynamic
 * area.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Heap structure still as described in PRM
 *
 */
_kernel_oserror *memory_finalise(void)
{
    if (da_addr)
    {
            da_addr = NULL;
            return _swix(OS_DynamicArea, _INR(0,1), 1, da_number);
    }

    return NULL;
}

/****************************************************************************
 * _rpclib_malloc
 * _rpclib_free
 *
 * Parameters:
 *    As malloc and free
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    none
 *
 */
void *_rpclib_malloc(size_t size)
{
    void *p;

    return _nfs_memory_alloc(size, &p) ? NULL : p;
}

void _rpclib_free(void *p)
{
    (void) _nfs_memory_free(p);
}

/****************************************************************************
 * _nfs_memory_alloc
 *
 * This function allocates a block of memory from the RMA or our DA,
 * and zero-initialises it
 *
 * Parameters:
 *    size - the amount of memory required
 *    pp   - the result pointer to be filled in
 *
 * Result:
 *    If allocation successful, pp filled in.
 *    If unsuccessful, either pp set to zero, or an error returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_nfs_memory_alloc(size_t size, void **pp)
{
    void *p;
    _kernel_oserror *e;

    if (!da_addr)
    {
        *pp = calloc(size, 1);
        return NULL;
    }

    e = xosheap_alloc(da_addr, size, &p);
    if (e && e->errnum != 0x184)
        return e;

    if (e)
    {
        e = extend_heap(size);
        if (e)
            return e;

        e = xosheap_alloc(da_addr, size, &p);

        shrink_heap();

        if (e)
            return e;
    }
    if (p)
        memset(p, 0, size);

    *pp = p;

    return NULL;
}

/****************************************************************************
 * _nfs_memory_free
 *
 * This function frees a block of memory
 *
 * Parameters:
 *    p   - the block to free
 *
 * Result:
 *    If the block isn't ours, an error may be returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_nfs_memory_free(void *p)
{
    _kernel_oserror *e;

    if (!da_addr)
    {
        free(p);
        return NULL;
    }

    e = xosheap_free(da_addr, p);
    if (e)
        return e;

    shrink_heap();

    return NULL;
}

/****************************************************************************
 * extend_heap
 *
 * This function extends the dynamic area/heap enough to allocate at least
 * req bytes
 *
 * Parameters:
 *    req - the space we want to allocate
 *
 * Result:
 *    Returns an error if unable to allocate enough space, else
 *    the heap/dynamic area is stretched enough to fit at least for bytes
 *
 * Assumptions:
 *    The heap and da are the same size
 *
 */
static _kernel_oserror *extend_heap(int req)
{
    int heapbase = ((int *)da_addr)[2];
    _kernel_oserror *e;
    int by;
    int size = req - (da_size-heapbase) + 4;

    e = _swix(OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), da_number, size, &by);
    if (e) {
        return e;
    }

    if (size < 0) {
            by = -by;
    }

    e = xosheap_resize(da_addr, by);
    if (e)
    {
        shrink_heap();
        return e;
    }

    da_size += by;

    return NULL;
}

/****************************************************************************
 * shrink_heap
 *
 * This function shrinks the dynamic area/heap as much as possible
 *
 * Parameters:
 *    none
 *
 * Result:
 *    DA shrunk
 *
 * Assumptions:
 *    The heap and da are the same size, page_size is a power of 2
 *
 */
static void shrink_heap(void)
{
    int by;
    int heapbase = ((int *)da_addr)[2];

    by = (da_size - heapbase) & ~(page_size-1);

    if (!by)
        return;

    xosheap_resize(da_addr, -by);
    _swix(OS_ChangeDynamicArea, _INR(0,1), da_number, -by);

    da_size -= by;
}

/****************************************************************************
 * mem_base_addr
 *
 * This function returns the base address of the memory allocation pool.
 * All allocated pointers will be no more than 64M beyond this address.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    memory base address
 *
 * Assumptions:
 *    none
 *
 */
void *mem_base_address(void)
{
    return da_addr;
}

/****************************************************************************
 * memory_renumber_da
 *
 *  This function is called whenever Service_DynamicAreaRenumber is received
 *  since we need to know if it was our DA that was renumbered
 *
 * Parameters:
 *    DA being renumbered
 *    New number for the DA
 *
 * Result:
 *    da_number updated.
 *
 * Assumptions:
 *    none
 */
void memory_renumber_da(int old_da, int new_da)
{
        if (old_da != da_number) return;
	da_number = new_da;
}
