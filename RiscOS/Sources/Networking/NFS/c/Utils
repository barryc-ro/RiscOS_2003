/*	UTILS

Purpose : RISC OS NFS utilities

History :
Date	Who    Comments
-----------------------------------------------------------------------------

10/02/95  CP    Added code to increment network access counter
****************************************************************************/


#ifndef __NFSNFS_H
#include "NFS.h"
#endif

#ifdef NETACCESSCOUNT
extern unsigned int NetAccessCountG;
#endif


/*
        Strip leading spaces, trailing spaces and reduce
        multiple spaces to single spaces
*/
void space_reduce
(
        char *source
)
{
        char *destination = source;
        YesNoAnswer skipping_spaces;

        while ( *source && *source == ASpace )
                source++;

        skipping_spaces = No;

        while ( *source )
        {
                /*
                        If skipping_spaces then destination points to the
                        last space copied.
                        Otherwise, destination points to the next place to
                        put a character.
                */
                if ( !skipping_spaces )
                {
                        *destination = *source;

                        if ( *source == ASpace )
                        {
                                skipping_spaces = Yes;
                        }
                        else
                        {
                                destination++;
                        }
                }
                else
                {
                        if ( *source != ASpace )
                        {
                                *++destination = *source;
                                destination++;
                                skipping_spaces = No;
                        }
                }

                source++;
        }

        *destination = '\0';
}

/*
        Change the user on the end of the pointer *userp. This maintains the
        user list and usage counts on that. ownership of *username remains
        with the caller, however *authorisation changes ownership to this
        routine and the user it creates.
*/
_kernel_oserror *new_user
(
        UserSpecification **userp,
        char *username,
        Host *host,
        unsigned int uid,
        unsigned int gid,
        AUTH *authorisation,
        u_int len,
        gid3 *gids,
        int def_umask
)
{
        Chain_Link *link;
        UserSpecification *user = NULL;

        for ( link = user_list.forwards;
                link->forwards != NULL;
                link = link->forwards )
        {
                user = Link_Wrapper( link );

                if ( user->host == host &&
                        strcmp( user->name, username ) == 0 )
                {
                        break;
                }
        }

        if ( link->forwards != NULL )
        {
                /*
                        Found the user on the user list
                */
                user->usage_count++;

                /*
                        The found one will already have an authorisation,
                        so junk the one we've been given.
                */
                auth_destroy( authorisation );
        }
        else
        {
                /*
                        If we havn't got a saved user structure then allocate
                        a new one. If this fails junk the authorisation passed
                        to us, as that is now our responsibility, and return an
                        error of course.
                */
                user = (UserSpecification *)malloc( sizeof( UserSpecification ));
                if ( !user )
                {
                        auth_destroy( authorisation );
                        return mb_malloc_failed;
                }

                /*
                        user exists and is linked to the user chain somewhere.
                        Set its usage count and attach the user name and
                        authorisation to it. If no space for the user name
                        the give up.
                */
                user->usage_count = 1;
                user->name = malloc( strlen( username ) + 1);
                user->host = host;
                user->uid = uid;
                user->gid = gid;
                user->len = len;
                user->umask = def_umask;
                if (user->len > 0)
                {
                        if (user->len > NGRPS) user->len = NGRPS;
                        memcpy(user->gids, gids, sizeof(gid3) * user->len);
                }
                if ( user->name == NULL )
                {
                        free( user );
                        auth_destroy( authorisation );
                        return mb_malloc_failed;
                }

                /*
                        If this user requires a host, increment the host's usage count
                */
                if ( host )
                        host->usage_count++;

                strcpy( user->name, username );
                user->authorisation = authorisation;

                insert_before_header( &user->link, user, &user_list );
        }

        /*
                Drop the usage count on the old user.
        */
        if ( *userp )
                release_user( *userp );

        *userp = user;

        return NULL;
}

/*
        Releases one user.
*/
_kernel_oserror *release_user
(
        UserSpecification *user
)
{
        if ( user && --user->usage_count <= 0 )
        {
                remove_link( &user->link );
                release_host( user->host );
                free( user->name );
                auth_destroy( user->authorisation );
                free( user );
        }

        return NULL;
}

/*
        Get a string into some malloced memory from a readargs call
*/
_kernel_oserror *readargs_getstring
(
        char **result,
        int *readargs_buffer,
        int parmno
)
{
        int len;
        char *extract;
        int i;

        /*
                Check for parameter's presence
        */
        if ( readargs_buffer[ parmno ] == NULL )
        {
                *result = NULL;

                return NULL;
        }

        len = 0;
        extract = (char *)readargs_buffer[ parmno ];

        /*
                get the length
        */
        len = (unsigned char)(*extract++);
        len = len + (unsigned char)(*extract++) * 256;
        /*
                Get some memory for the string
        */
        *result = malloc( len + 1 );
        if ( *result == NULL )
        {
                return mb_malloc_failed;
        }

        /*
                Copy the string into the memory
        */
        for ( i = 0;
              i < len;
              i++ )
        {
                (*result)[ i ] = extract[ i ];
        }

        (*result)[ i ] = '\0';

        return NULL;
}

_kernel_oserror *new_host
(
        Host **default_host,
        char *new_host_name
)
{
        Chain_Link *link;
        Host *new_host;

        /*
                New host not specified
        */
        if ( new_host_name == NULL )
        {
                return NULL;
        }

        /*
                Find end of list/first host with name >= new name
        */
        for ( link = host_list.forwards;
              link->forwards != NULL &&
                  strcmp( ((Host *)Link_Wrapper( link ))->host_name, new_host_name ) < 0;
              link = link->forwards )
        {
                /* do nothing */
        }

        if ( link->forwards == NULL ||
             strcmp( ((Host *)Link_Wrapper( link ))->host_name, new_host_name ) != 0 )
        {
                /*
                        end of list or found host gt new host
                */

                /*
                        Get a Host structure
                */
                new_host = (Host *)malloc( sizeof( Host ));

                if ( !new_host )
                        return mb_malloc_failed;

                /*
                        Get space for the host name
                */
                new_host->host_name = malloc( strlen( new_host_name ) + 1 );

                if ( !new_host->host_name )
                {
                        free( new_host );
                        return mb_malloc_failed;
                }

                strcpy( new_host->host_name, new_host_name );

                /*
                        Clear out the client lists.
                */
                initialise_header( &new_host->nfs_clients );
                initialise_header( &new_host->mount_clients );
                initialise_header( &new_host->pcnfsd_clients );
                initialise_header( &new_host->quota_clients );

                new_host->usage_count = 0;

                initialise_nfs_version( new_host );
                initialise_pcnfs_version( new_host );

                initialise_header( &new_host->mount_points );

                /*
                        Put the newly created host into the host list
                */
                insert_before_link( &new_host->link, new_host, link );
        }
        else
        {
                /*
                        Host already on host list
                */
                new_host = (Host *)Link_Wrapper( link );
        }

        /*
                Change over the default host
        */
        new_host->usage_count++;

        release_host( *default_host );

        *default_host = new_host;

        /*
                default the other hosts
        */
        if ( !current_nameing_host )
        {
                current_nameing_host = new_host;
                new_host->usage_count++;
        }

        if ( !current_mounting_host )
        {
                current_mounting_host = new_host;
                new_host->usage_count++;
        }

        return NULL;
}

void junk_clients
(
        Chain_Header *client_list
)
{
        unused_client *to_free;

        while ( client_list->forwards->forwards )
        {
                to_free = Link_Wrapper( client_list->forwards );

                remove_link( &to_free->link );

                clnt_destroy( to_free->client );

                free( to_free );
        }
}

/*
        Reduce the usage of the given host and dispose of it cleanly
        if unused.
*/
_kernel_oserror *release_host
(
        Host *host
)
{
        if ( host && --host->usage_count <= 0 )
        {
                remove_link( &host->link );

                junk_clients( &host->nfs_clients );
                junk_clients( &host->mount_clients );
                junk_clients( &host->pcnfsd_clients );
                junk_clients( &host->quota_clients );

                free( host->host_name );
                free( host );
        }

        return NULL;
}

/*
        Reads a password. If an error is returned, *pwdest will
        not point to a valid piece of memory.
*/
_kernel_oserror *askfor_password
(
        char **pwdest
)
{
        _kernel_oserror *err;
        int flags;
        char *buffer;
        int read_size;

        *pwdest = malloc( Password_MaxSize + 1 );

        if ( *pwdest == NULL )
                return mb_malloc_failed;

        buffer = *pwdest;

        err = _swix(OS_ReadLine, _INR(0,4)|_OUT(1)|_OUT(_FLAGS),
                                 (int)buffer |
                                       ReadLine_ReflectOnlyBuffered |
                                       ReadLine_ReflectFixedCharacter,
                                 Password_MaxSize,
                                 Password_LowCharacter,
                                 Password_HighCharacter,
                                 Password_BlankCharacter,
                                 &read_size,
                                 &flags);

        if ( !err )
        {
                if ( flags & _C ) /* escape */
                {
                        /*
                                Don't care if this fails
                        */
                        _kernel_osbyte( OSByte_CancelEscape, 0, 0 );
                        _swix(OS_NewLine, 0);

                        err = mb_escape;

                        free( buffer );
                }
                else
                {
                        buffer[ read_size ] = '\0';
                }
        }
        else
        {
                free( buffer );
        }

        return err;
}


/*
        Finds the mount point with the given name.
        Returns NULL if not found.
*/
MountPoint *find_mount
(
        char *mount_name
)
{
        if ( mount_name )
        {
                Chain_Link *link;
                MountPoint *mp;

                for ( link = mount_point_list.forwards;
                        link->forwards != NULL;
                        link = link->forwards )
                {
                        mp = Link_Wrapper( link );
                        if ( caseless_strcmp( mp->mount_point_name, mount_name ) == 0 )
                                return mp;
                }
        }

        return NULL;
}

#if 0
/*
        Very long arithmetic routines
*/
static void add_step
(
        unsigned int *result,
        unsigned int a,
        unsigned int b,
        unsigned int *carry
)
{
        unsigned int work;

        work = (a & 0xffff) + (b & 0xffff) + *carry;
        *result = work & 0xffff;
        *carry = work >> 16;

        work = (a >> 16) + (b >> 16) + *carry;
        *result = *result | (work << 16);
        *carry = work >> 16;
}

void very_long_add
(
        unsigned int *rlo,
        unsigned int *rhi,
        unsigned int alo,
        unsigned int ahi,
        unsigned int blo,
        unsigned int bhi
)
{
        unsigned int carry = 0;

        add_step( rlo, alo, blo, &carry );
        add_step( rhi, ahi, bhi, &carry );
}

void very_long_multiply
(
        unsigned int *rlo,
        unsigned int *rhi,
        unsigned int alo,
        unsigned int ahi,
        unsigned int blo,
        unsigned int bhi
)
{
        unsigned int carry;

        *rlo = 0;
        *rhi = 0;

        while( (alo | ahi) != 0 )
        {
                if ( alo & 0x1 )
                        very_long_add( rlo, rhi, *rlo, *rhi, blo, bhi );

                /*
                        shift a right by 1
                */
                carry = ahi & 0x1;
                alo = (alo >> 1) + (carry << 31);
                ahi = ahi >> 1;

                /*
                        shift b left by 1
                */
                carry = blo & 0x80000000;
                bhi = (bhi << 1) + (carry >> 31);
                blo = blo << 1;
        }
}

static void subtract_step
(
        unsigned int *result,
        unsigned int a,
        unsigned int b,
        unsigned int *carry
)
{
        unsigned int work;

        work = (a & 0xffff) - (b & 0xffff) - *carry;
        *result = work & 0xffff;
        *carry = (work >> 16) & 0x1;

        work = (a >> 16) - (b >> 16) - *carry;
        *result = *result | (work << 16);
        *carry = (work >> 16) & 0x1;
}

void very_long_subtract
(
        unsigned int *rlo,
        unsigned int *rhi,
        unsigned int alo,
        unsigned int ahi,
        unsigned int blo,
        unsigned int bhi
)
{
        unsigned int carry = 0;

        subtract_step( rlo, alo, blo, &carry );
        subtract_step( rhi, ahi, bhi, &carry );
}
#endif

/*
        JRS 11/9/92 get quota numbers for free display
*/
#include "rquota.h"

static enum clnt_stat getnfsquota( MountPoint  *mount,
                                       CLIENT  *client,
                                       bool_t   vflag,
                               utils_spacestr   *space )
{
        enum clnt_stat stat;
        static struct timeval timeout = { 5, 0 }; /* 5s timeout shouldn't keep us waiting too long */

        struct getquota_args gq_args;
        struct getquota_rslt gq_rslt;

        gq_args.gqa_pathp = mount->mount_path;
        gq_args.gqa_uid = (int) mount->user->uid;

#ifdef NETACCESSCOUNT
NetAccessCountG++;
#endif
        stat = clnt_call(client,
                         (vflag? RQUOTAPROC_GETQUOTA: RQUOTAPROC_GETACTIVEQUOTA),
                         xdr_getquota_args, (char*)&gq_args,
                         xdr_getquota_rslt, (char*)&gq_rslt,
                         timeout);

        if (stat != RPC_SUCCESS)
        {
                return stat;
        }

        switch (gq_rslt.status) {
        case Q_OK:
                {
                space->active_quota = gq_rslt.getquota_rslt_u.gqr_rquota.rq_active;
                if (!space->active_quota)
                        return RPC_SUCCESS;
                space->sp.quota.space.usage = gq_rslt.getquota_rslt_u.gqr_rquota.rq_curblocks *
                    (u_long) gq_rslt.getquota_rslt_u.gqr_rquota.rq_bsize;
                space->sp.quota.space.slim = gq_rslt.getquota_rslt_u.gqr_rquota.rq_bsoftlimit *
                    (u_long) gq_rslt.getquota_rslt_u.gqr_rquota.rq_bsize;
                space->sp.quota.space.hlim = gq_rslt.getquota_rslt_u.gqr_rquota.rq_bhardlimit *
                    (u_long) gq_rslt.getquota_rslt_u.gqr_rquota.rq_bsize;
                space->sp.quota.space.timeleft = gq_rslt.getquota_rslt_u.gqr_rquota.rq_btimeleft;
                space->sp.quota.files.hlim = gq_rslt.getquota_rslt_u.gqr_rquota.rq_fhardlimit;
                space->sp.quota.files.slim = gq_rslt.getquota_rslt_u.gqr_rquota.rq_fsoftlimit;
                space->sp.quota.files.usage = gq_rslt.getquota_rslt_u.gqr_rquota.rq_curfiles;
                space->sp.quota.files.timeleft = gq_rslt.getquota_rslt_u.gqr_rquota.rq_ftimeleft;
                return RPC_SUCCESS;
                }

        case Q_NOQUOTA:
                break;

        case Q_EPERM:
                return RPC_AUTHERROR;
#if 0 /* unix error */
                fprintf(stderr, "quota permission error, host: %s\n", hostp);
#endif
                break;

        default:
                return RPC_SYSTEMERROR;
#if 0 /* unix error */
                fprintf(stderr, "bad rpc result, host: %s\n",  hostp);
#endif
                break;
        }
        return RPC_SUCCESS;
}

/*
        Get the filesystem space information for a mount point
*/
_kernel_oserror *utils_getfsspace( utils_spacestr *space,  char *mount_name )
{
        enum clnt_stat stat;
        _kernel_oserror *err;
        MountPoint *mount_point = find_mount( mount_name );
        FSSTAT3res *sres;
        unused_client *nfs_client, *quota_client;
        bzero(space, sizeof(*space));

        if ( mount_point == NULL )
        {
                return mb_no_mount_point_found;
        }

        /*
        JRS 11/9/92 get quota numbers which are more useful than statfs numbers
        */
        err = get_quota_client( &quota_client, mount_point );
        if ( err == NULL )
        {
                stat = getnfsquota( mount_point, quota_client->client, TRUE, space );

                release_client( quota_client );

                if ((stat == RPC_SUCCESS) && space->active_quota) /* quota is defined */
                        return NULL;
        }
        /*
                 if quota info not available get results from statfs
        */
        space->active_quota = FALSE;

        err = get_nfs_client_for_mp( &nfs_client, mount_point );
        if ( err )
                return err;

	if (nfs_client->version == NFS_V3)
	{
          sres = nfsproc3_fsstat_3( (FSSTAT3args *) &mount_point->fhandle.fh3, nfs_client->client );
	}
	else
	{
          sres = nfs2_em_fsstat_3( (FSSTAT3args *) &mount_point->fhandle.fh3, nfs_client->client );
	}
        err = rpcnfs_to_riscos_err( sres, mount_point, nfs_client->client );
        release_client( nfs_client );

        if ( !err )
        {
                static const unsigned shift = 10;
                FSSTAT3resok *const res = &sres->FSSTAT3res_u.resok;
                space->sp.statfs.bsize  = 1UL<<shift;
                space->sp.statfs.blocks = ui64_value(ui64_shift_right(&res->tbytes, shift));
                space->sp.statfs.bfree  = ui64_value(ui64_shift_right(&res->fbytes, shift));
                space->sp.statfs.bavail = ui64_value(ui64_shift_right(&res->abytes, shift));
        }

        if (sres != NULL)
                xdr_free(xdr_FSSTAT3res, sres);

        return err;
}

/* read the appropriate NFS$CreateAccess environment variable */
int utils_getcreateaccess(nfs_file_descriptor *ndesc)
{
        int mask = ( NFSMODE_OTHERS_WRITE | NFSMODE_OTHERS_READ |
                     NFSMODE_GROUP_WRITE | NFSMODE_GROUP_READ |
                     NFSMODE_USER_WRITE | NFSMODE_USER_READ );
        int rval = -1, umask;
        char sysvar_buffer[ 20 ];
        char *dummy;
        char *create_access_var = malloc( strlen(NFSCreateAccessVariable) + 1  /* 1 for the '_' */
                                        + strlen(ndesc->mp->mount_point_name) + 1 ); /* 1 for the '\0' */

        if (create_access_var != NULL)
        {
        /*
                Try variable "NFS$CreateAccess_foo" where foo is the mount name
        */
                strcpy(create_access_var, NFSCreateAccessVariable);
                strcat(create_access_var, "_");
                strcat(create_access_var, ndesc->mp->mount_point_name);
                if ( _kernel_getenv( create_access_var, sysvar_buffer, 20 ) == NULL )
                {
                        sysvar_buffer[ 19 ] = '\0';
                        rval = (int)strtol( sysvar_buffer, &dummy, 0 ) & mask;
                }
                free(create_access_var);
                if (rval >= 0) return rval;
        }
        /*
                Try variable "NFS$CreateAccess"
        */
        if ( _kernel_getenv( NFSCreateAccessVariable, sysvar_buffer, 20 ) == NULL )
        {
                sysvar_buffer[ 19 ] = '\0';
                return (int)strtol( sysvar_buffer, &dummy, 0 ) & mask;
        }

        umask = ndesc->mp->user->umask;
        if (umask != -1)
        {
                return mask & ~umask;
        }

        return -1;
}
