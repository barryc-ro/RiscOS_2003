
	AREA	|C$$Code|, CODE, READONLY, PIC

; Long multiplier ----------------------------------------
; Taken from Acorn Assembler manual.
; extern u_int64_t *ui64_multiply_uu(u_int64_t *, unsigned, unsigned);
	EXPORT ui64_multiply_uu

ui64_multiply_uu
	STMFD	sp!, {lr}
	MOVS	lr, a2, LSR #16
	BIC	a2, a2, lr, LSL #16
	MOV	ip, a3, LSR #16
	BIC	a3, a3, ip, LSL #16
	MUL	a4, a2, a3
	MUL	a3, lr, a3
	MUL	a2, ip, a2
	MULNE	lr, ip, lr
	ADDS	a2, a2, a3
	ADDCS	lr, lr, #&10000
	ADDS	a4, a4, a2, LSL #16
	ADC	lr, lr, a2, LSR #16
	STMIA	a1, {a4, lr}
	LDMFD	sp!, {pc}^

; extern u_int64_t *ui64_multiply_u64u64(u_int64_t *res, u_int64_t *a, u_int64_t *b);
	EXPORT ui64_multiply_u64u64

res_lo	RN	v1
res_hi	RN	v2
a_lo	RN	v3
a_hi	RN	v4
b_lo	RN	v5
b_hi	RN	ip
zero    RN      a4
tmp     RN      lr

ui64_multiply_u64u64
	STMFD	sp!, {v1-v5, lr}
	LDMIA	a2, {a_lo, a_hi}
	LDMIA	a3, {b_lo, b_hi}
	MOV     res_lo, #0
	MOV	res_hi, #0
	MOV	zero, #0
10
	MOVS	b_hi, b_hi, LSR #1
	MOVS    b_lo, b_lo, RRX
	BCC	%FT20
	ADDS	res_lo, res_lo, a_lo
	ADC	res_hi, res_hi, a_hi
20
	MOVS	a_lo, a_lo, LSL #1
	ADCS	a_hi, zero, a_hi, LSL #1
	TEQEQ	a_lo, zero
	ORRNES	tmp, b_hi, b_lo
	BNE	%BT10
	STMIA	a1, {res_lo, res_hi}
	LDMFD	sp!, {v1-v5, pc}^

; extern u_int64_t *ui64_subtract_u64u64(u_int64_t *, const u_int64_t *, const u_int64_t *);
	EXPORT ui64_subtract_u64u64
ui64_subtract_u64u64
	LDMIA	a3, {a4, ip}
	LDMIA	a2, {a2, a3}
	SUBS	a2, a2, a4
	SBC	a3, a3, ip
	STMIA	a1, {a2, a3}
	MOVS	pc, lr

; extern u_int64_t *ui64_add_u64u64(u_int64_t *, const u_int64_t *, const u_int64_t *);
	EXPORT ui64_add_u64u64
ui64_add_u64u64
	LDMIA	a3, {a4, ip}
	LDMIA	a2, {a2, a3}
	ADDS	a2, a2, a4
	ADC	a3, a3, ip
	STMIA	a1, {a2, a3}
	MOVS	pc, lr

; extern u_int64_t *ui64_add(u_int64_t *, unsigned long);
	EXPORT	ui64_add
ui64_add
	LDMIA	a1, {a3, a4}
	ADDS	a3, a3, a2
	ADC	a4, a4, #0
	STMIA	a1, {a3, a4}
	MOVS	pc, lr


; extern u_int64_t *ui64_create2(u_int64_t *, unsigned long, unsigned long);
	EXPORT ui64_create2
ui64_create2
	STMIA	a1, {a2, a3}
	MOVS	pc, lr

; extern u_int64_t *ui64_create(u_int64_t *, unsigned long);
	EXPORT	ui64_create
ui64_create
	MOV	a3, #0
	STMIA	a1, {a2, a3}
	MOVS	pc, lr

; extern u_int64_t *ui64_shift_right(u_int64_t *, unsigned);
	EXPORT	ui64_shift_right
ui64_shift_right
	LDMIA	a1, {a3, a4}
	RSB	ip, a2, #32
	MOV	a4, a4, LSR a2
	ORR	a4, a4, a3, LSL ip
	MOV	a3, a3, LSR a2
	STMIA	a1, {a3, a4}
	MOVS	pc, lr

; extern unsigned long ui64_value(const u_int64_t *);
	EXPORT	ui64_value
ui64_value
	LDR	a1, [a1, #0]
	MOVS	pc, lr

        END
