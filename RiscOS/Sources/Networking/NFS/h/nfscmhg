/*
 * Created by cmhg vsn 5.15 [Feb 14 1997]
 */

#ifndef __cmhg_nfscmhg_h
#define __cmhg_nfscmhg_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#define CMHG_VERSION 515

#define Module_Title                     "NFS"
#define Module_Help                      "RISC OS NFS"
#define Module_VersionString             "2.32"
#define Module_VersionNumber             232
#define Module_Date                      "11 Mar 1998"


/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds; otherwise return a pointer
 * to an error block. cmd_tail points to the string of arguments with which
 * the module is invoked (may be "").
 * podule_base is 0 unless the code has been invoked from a podule.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
_kernel_oserror *nfs_initialise(char *cmd_tail, int podule_base, void *pw);


/*
 * Service call handler
 * ====================
 *
 * Return values should be poked directly into r->r[n]; the right
 * value/register to use depends on the service number (see the relevant
 * RISC OS Programmer's Reference Manual section for details).
 * pw is the private word (the 'R12' value).
 */
void nfs_service(int service_number, _kernel_swi_regs *r, void *pw);


/*
 * Command handler
 * ===============
 *
 * If cmd_no identifies a command, then arg_string gives the command tail
 * (which you may not overwrite), and argc is the number of parameters.
 * Return NULL if the command has been successfully handled; otherwise
 * return a pointer to an erro block describing the failure (in this
 * case, the veneer code will set the 'V' bit).
 *
 * If cmd_no identifies a *Help entry, then arg_string denotes a buffer
 * that you can assemble your output into. cmd_handler must return
 * NULL, an error pointer or help_PRINT_BUFFER (if help_PRINT_BUFFER)
 * is returned, the NUL-terminated buffer will be printed).
 *
 * If cmd_no identifies a *Configure option, then arg_string gives the
 * command tail, and argc the number of parameters. Return NULL, an error
 * pointer, or one of the four special values defined below. If arg_string
 * is set to arg_CONFIGURE_SYNTAX, the user has typed *Configure with no
 * parameter; simply print your syntax string. If arg_string is set to
 * arg_STATUS, print your current configured status. Otherwise use
 * arg_string and argc to set the *Configure option.
 *
 * pw is the private word pointer ('R12') value passed into the entry
 * veneer
 */
#define help_PRINT_BUFFER         ((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX      ((char *) 0)
#define arg_STATUS                ((char *) 1)
#define configure_BAD_OPTION      ((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED   ((_kernel_oserror *) 1)
#define configure_TOO_LARGE       ((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS ((_kernel_oserror *) 3)

#define CMD_NFS                         0
#define CMD_NFSInfo                     1
#define CMD_NFSBoot                     2
#define CMD_Logon                       3
#define CMD_Mount                       4
#define CMD_Dismount                    5
#define CMD_Bye                         6
#define CMD_Free                        7
#define CMD_CacheTime                   8
#define CMD_CacheSize                   9
#define CMD_Timeout                     10
#define CMD_PacketSize                  11

_kernel_oserror *nfs_command(char *arg_string, int argc, int cmd_no, void *pw);


/*
 * SWI handler code
 * ================
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module NFS' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
#define NFS_00                          0x0410c0
#ifndef NFS_Mount
#define NFS_Mount                       0x0410c0
#define NFS_MountList                   0x0410c1
#define NFS_SetUser                     0x0410c2
#define NFS_Dismount                    0x0410c3
#define NFS_MountInfo                   0x0410c4
#define NFS_FreeSpace                   0x0410c5
#endif

#define error_BAD_SWI ((_kernel_oserror *) -1)

_kernel_oserror *nfs_swi(int swi_no, _kernel_swi_regs *r, void *pw);

#endif
