/*	H.TYPES

Purpose : Structures and types used by RISC OS NFS

History :
Date	   Who    Comments
-----------------------------------------------------------------------------
Sept 1992  ??     Original version
12/1/95    CP     Added new struct/type NFS_Directory_T to contain a
	    	  complete directory of information.
	    	  Commented out original version 'dirstep'
	    	  Added type BOOL (= int).
05/05/95   RWB    Copied mount.h into local h directory as against rpcsrv.output
****************************************************************************/


#ifndef __NFSTYPES_H
#define __NFSTYPES_H

#ifndef __RPC_HEADER__
#include "rpc/rpc.h"
#endif
#ifndef NFSPROC_NULL
#include "nfs_prot.h"
#endif
#ifndef MOUNTPROC_NULL
#include "mount.h"  /* Changed Fri 05th May 1995 */
#endif
#ifndef PCNFSD_NULL
#include "pcnfsd.h"
#endif

typedef int YesNoAnswer;

typedef int BOOL;

typedef struct Chain_Link
{
        struct Chain_Link       *forwards;
        struct Chain_Link       *backwards;
        int                     wrapper;
}       Chain_Link;

typedef struct Chain_Header
{
        Chain_Link              *forwards;
        Chain_Link              *header_indicator;      /* = NULL to indicate this is a header */
        Chain_Link              *backwards;
}       Chain_Header;

typedef struct unused_client
{
        Chain_Link              link;
        YesNoAnswer             in_use;
        CLIENT                  *client;
}       unused_client;

typedef struct Host
{
        char                    *host_name;
        Chain_Header            nfs_clients;
        Chain_Header            mount_clients;
        Chain_Header            pcnfsd_clients;
        Chain_Header            quota_clients;
        int                     usage_count;
        Chain_Link              link;
        Chain_Header            mount_points;
}       Host;

typedef struct UserSpecification
{
        char                    *name;
        Host                    *host;
        int                     usage_count;
        Chain_Link              link;
        unsigned int            uid;
        unsigned int            gid;
        AUTH                    *authorisation;
}       UserSpecification;

typedef struct MountPoint
{
        char                    *mount_point_name;
        Host                    *host;
        char                    *mount_path;
        nfs_fh                  fhandle;
        UserSpecification       *user;
        Chain_Header            open_files;
        YesNoAnswer             being_dismounted;
        Chain_Link              all_mount_points_link;
        Chain_Link              mount_points_per_host_link;
}       MountPoint;

typedef enum RISCOSFileType
{
        FileType_None           = 0,
        FileType_File           = 1,
        FileType_Directory      = 2,
        FileType_Image          = 3
}       RISCOSFileType;

typedef struct RISCOSAttributes
{
        int                     execute_address;        /* This must preceed load_address */
        int                     load_address;           /* so that 5-byte time conversions works */
        int                     file_length;
        int                     access;
        RISCOSFileType          type;
}       RISCOSAttributes;

typedef struct nfs_file_description
{
        fattr                   attr;
        char                   *name;
        int                     chars_before_suffix;
        int                     load_address;
        int                     execute_address;
        int                     file_is_lxa:1;
}       nfs_file_description;

typedef struct nfs_file_descriptor
{
        MountPoint             *mp;
        nfs_fh                  dir;
        nfs_fh                  file;
        nfs_file_description    desc;
}       nfs_file_descriptor;

typedef struct riscos_file_description
{
        RISCOSAttributes        attr;
        char                    *name;
}       riscos_file_description;

typedef struct SpoolFileDetails
{
        char                    *printername;
        char                    *username;
        char                    *options;
}       SpoolFileDetails;

typedef struct OpenFile
{
        int                     fileswitch_handle;
        int                     sequential_file_pointer;
        SpoolFileDetails        *spool_details;
        YesNoAnswer             read_only;
        nfs_file_descriptor     nfs_fd;
        Chain_Link              link;
}       OpenFile;

typedef struct DirectoryPoint
{
        MountPoint              *mount_point;
        char                    *full_path;
}       DirectoryPoint;


/********* disabled by CP 12/1/95 **********************************

typedef struct dirstep
{
        MountPoint              *mount_point;
        nfs_fh                  dir;
        entry                   dummy_start;
        entry                   *this;
        YesNoAnswer             eof_after_last;
}       dirstep;

*******************************************************************/

typedef union appendum
{
        struct
        {
                int     load_address;
                int     execute_address;
        }       lxa;
        char    appendum[ 8 ];
}       appendum;

typedef struct bytes_with_appendum
{
        char *bytes;
        appendum bit_on_the_end;
}       bytes_with_appendum;

typedef struct writeargs_with_appendum {
        nfs_fh file;
        u_int beginoffset;
        u_int offset;
        u_int totalcount;
        struct {
                u_int data_len;
                bytes_with_appendum *data_val;
        } data;
} writeargs_with_appendum;


/* Added by CP, 12/1/95 */

typedef struct NFS_Directory_S
{
   MountPoint *pmpMountpoint;    /* where the directory is mounted */
   nfs_fh     fhHandle;       	 /* NFS handle to directory */
   entry      *peFirstEntry;     /* first entry in linked list */
} NFS_Directory_T;


#endif
