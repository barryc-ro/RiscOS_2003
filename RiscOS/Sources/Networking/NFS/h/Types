/*	H.TYPES

Purpose : Structures and types used by RISC OS NFS

History :
Date	   Who    Comments
-----------------------------------------------------------------------------
Sept 1992  ??     Original version
12/1/95    CP     Added new struct/type NFS_Directory_T to contain a
	    	  complete directory of information.
	    	  Commented out original version 'dirstep'
	    	  Added type BOOL (= int).
05/05/95   RWB    Copied mount.h into local h directory as against rpcsrv.output
****************************************************************************/


#ifndef __NFSTYPES_H
#define __NFSTYPES_H

#ifndef __RPC_HEADER__
#include "rpc/rpc.h"
#endif
#ifndef NFSPROC_NULL
#include "nfs_prot.h"
#endif
#ifndef MOUNTPROC_NULL
#include "mount.h"  /* Changed Fri 05th May 1995 */
#endif
#ifndef PCNFSD_NULL
#include "pcnfsd.h"
#endif
#ifndef SIXTYFOUR_HEADER
#define NO_SIXTYFOUR_TYPE_DECLS
#include "SixtyFour.h"
#endif

/* Crafty (crufty? :-) macro taken from March 1999 issue of C Vu (http://www.accu.org/)
 * for compile-phase assertions.  Should the (compile-time constant) conditional
 * be untrue, a bad array declaration is made causing the compiler to throw an
 * error stopping the compilation.
 */
#define COMPILE_TIME_ASSERT(condition)\
{ void *_assertion_check_[-1+2*!!(condition)]; (void) _assertion_check_; }


/* This structure is used to hold a self-consistent NFS3 filehandle.  The pointer in
 * the fh3 member is always set to point to the opaque member, and in this way we
 * can ensure that the data walks around with the filehandle and doesn't leak when an
 * automatic nfs_fh3 variable goes out of scope.
 *
 * However, it is IMPERATIVE that the fh3xxx functions below are used to manipulate
 * these - particular for copy and comparison operations, to ensure that the pointer
 * is kept pointing at the opaque field.  NFS2 filehandles can be held by this
 * structure too because we know they have a constant length (and NFS_FHSIZE < NFS3_FHSIZE)
 */
typedef struct RO_nfs_fh3
{
        nfs_fh3                 fh3;
        char                    opaque[NFS3_FHSIZE];
}       RO_nfs_fh3;

/* Provide abstract copy and compare operation */
extern int fh3cmp(const RO_nfs_fh3 *, const RO_nfs_fh3 *);
extern RO_nfs_fh3 *fh3cpy(RO_nfs_fh3 *, const RO_nfs_fh3 *);
extern RO_nfs_fh3 *fh3cpy_from_xdr(RO_nfs_fh3 *, const nfs_fh3 *);

/* Upcasting and downcasting functions for filehandles */
extern nfs_fh3 *fh3cpy_from_fhandle(nfs_fh3 *, const nfs_fh *);
extern nfs_fh *fh2cpy_from_fh3(nfs_fh *, const nfs_fh3 *);

typedef int YesNoAnswer;

typedef int BOOL;

typedef struct Chain_Link
{
        struct Chain_Link       *forwards;
        struct Chain_Link       *backwards;
        int                     wrapper;
}       Chain_Link;

typedef struct Chain_Header
{
        Chain_Link              *forwards;
        Chain_Link              *header_indicator;      /* = NULL to indicate this is a header */
        Chain_Link              *backwards;
}       Chain_Header;

typedef struct Host
{
        char                    *host_name;
        Chain_Header            nfs_clients;
        Chain_Header            mount_clients;
        Chain_Header            pcnfsd_clients;
        Chain_Header            quota_clients;
        int                     usage_count;
        u_long                  nfs_version;
        Chain_Link              link;
        Chain_Header            mount_points;
}       Host;

typedef struct unused_client
{
        Chain_Link              link;
        YesNoAnswer             in_use;
        CLIENT                  *client;
        u_long                  program;
        u_long                  version;
}       unused_client;


typedef struct UserSpecification
{
        char                    *name;
        Host                    *host;
        int                     usage_count;
        Chain_Link              link;
        uid3                    uid;
        gid3                    gid;
        AUTH                    *authorisation;
}       UserSpecification;

typedef struct MountPoint
{
        char                    *mount_point_name;
        Host                    *host;
        char                    *mount_path;
        RO_nfs_fh3              fhandle;
        UserSpecification       *user;
        Chain_Header            open_files;
        YesNoAnswer             being_dismounted;
        Chain_Link              all_mount_points_link;
        Chain_Link              mount_points_per_host_link;
}       MountPoint;

typedef enum RISCOSFileType
{
        FileType_None           = 0,
        FileType_File           = 1,
        FileType_Directory      = 2,
        FileType_Image          = 3
}       RISCOSFileType;

typedef struct RISCOSAttributes
{
        unsigned long           execute_address;        /* This must preceed load_address */
        unsigned long           load_address;           /* so that 5-byte time conversions works */
        int                     file_length;
        int                     access;
        RISCOSFileType          type;
}       RISCOSAttributes;

typedef struct nfs_file_description
{
        fattr3                  attr;
        char                   *name;
        int                     chars_before_suffix;
        unsigned long           load_address;
        unsigned long           execute_address;
        int                     file_is_lxa:1;
}       nfs_file_description;

typedef struct nfs_file_descriptor
{
        MountPoint             *mp;
        RO_nfs_fh3              dir;
        RO_nfs_fh3              file;
        nfs_file_description    desc;
}       nfs_file_descriptor;

typedef struct riscos_file_description
{
        RISCOSAttributes        attr;
        char                    *name;
}       riscos_file_description;

typedef struct SpoolFileDetails
{
        char                    *printername;
        char                    *username;
        char                    *options;
}       SpoolFileDetails;

typedef struct OpenFile
{
        int                     fileswitch_handle;
        unsigned long           sequential_file_pointer;
        SpoolFileDetails        *spool_details;
        YesNoAnswer             read_only;
        nfs_file_descriptor     nfs_fd;
        Chain_Link              link;
}       OpenFile;

typedef struct DirectoryPoint
{
        MountPoint              *mount_point;
        char                    *full_path;
}       DirectoryPoint;


/********* disabled by CP 12/1/95 **********************************

typedef struct dirstep
{
        MountPoint              *mount_point;
        nfs_fh3                  dir;
        entry                   dummy_start;
        entry                   *this;
        YesNoAnswer             eof_after_last;
}       dirstep;

*******************************************************************/

typedef union appendum
{
        struct
        {
                unsigned long load_address;
                unsigned long execute_address;
        }       lxa;
        char    appendum[ 8 ];
}       appendum;

#define lsizeof(object) ((unsigned long)sizeof(object))

typedef struct bytes_with_appendum
{
        char *bytes;
        appendum bit_on_the_end;
}       bytes_with_appendum;

typedef struct writeargs_with_appendum {
        nfs_fh file;
        u_int beginoffset;
        u_int offset;
        u_int totalcount;
        struct {
                u_int data_len;
                bytes_with_appendum *data_val;
        } data;
} writeargs_with_appendum;

typedef struct WRITE3args_with_appendum {
        nfs_fh3 file;
        offset3 offset;
        count3 count;
        stable_how stable;
        struct {
                u_int data_len;
                bytes_with_appendum *data_val;
        } data;
} WRITE3args_with_appendum;

#endif
