/* -*-c-*- */
/* Copyright [1997-2000] ANT Ltd.  All rights reserved. */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "ModHead.h"
#include "mimemap.h"

#define UNUSED(x) ((void) (x))

#ifndef OS_FSControl
#define OS_FSControl 0x29
#endif

#define MAPPING_FILE "<Inet$MimeMappings>"

#define MAX_LINE	256
#define MAX_RESULT	128

static void *private_word;

static char _mm_buffer[MAX_LINE];
static char _mm_result[MAX_RESULT];

static typeinfo *type_list=NULL, *type_last=NULL;

static int old_load, old_exec;

/**********************************************************************/
/*
 * Error definitions
 */

#define ERR_BASE	0xB00000

/* Error definitions */
typedef enum {
    err_BAD_FILE = ERR_BASE,
    err_BAD_PARAM,
    err_LOOKUP_FAILED,

    err_LAST_ERROR
    } error_numbers;

static char *err_strings[] = {
    "MimeMap module cannot open file " MAPPING_FILE,
    "Bad parameters",
    "Lookup failed",

    "Unknown error"
    };

static _kernel_oserror *make_error(int errnum)
{
    static _kernel_oserror err;

    err.errnum = errnum;
    strcpy(err.errmess, err_strings[errnum - ERR_BASE]);

    return &err;
}

static int strcasecmp(const char *s1, const char *s2)
{
    while (*s1 && *s2 && toupper(*s1) == toupper(*s2))
    {
	s1++;
	s2++;
    }

    return (*s1 - *s2);
}

static char *strdup(const char *s)
{
    char *s2;

    s2 = malloc(strlen(s)+1);
    if (s2)
	strcpy(s2, s);

    return s2;
}

static void mm_free_typeinfo(typeinfo *tp)
{
    int i;

    if (tp->major)
	free(tp->major);
    if (tp->minor)
	free(tp->minor);
    if (tp->exts)
    {
	for (i=0; i<tp->num_exts; i++)
	    if (tp->exts[i])
		free(tp->exts[i]);
	free(tp->exts);
    }

    free(tp);
}


static void mm_free_type_list(void)
{
    typeinfo *tp, *tp2;

    for (tp = type_list; tp; )
    {
	tp2 = tp->next;
	mm_free_typeinfo(tp);
	tp = tp2;
    }

    type_list = type_last = NULL;
}

static _kernel_oserror *mm_read_type_file(char *fname)
{
    FILE *fh;
    char *exts[MAX_EXTS+1];
    char *p, *roft, *ext;
    char *major, *minor;
    int i;
    _kernel_swi_regs r;
    _kernel_oserror *ep;
    typeinfo *new_type;

    fh = fopen(fname, "r");
    if (fh == NULL)
	return make_error(err_BAD_FILE);

    mm_free_type_list(); /* Free the list prior to adding to it! */

    while (!feof(fh))
    {
	if (fgets(_mm_buffer, MAX_LINE, fh) == NULL)
	    continue;

	p = _mm_buffer;
	while (isspace(*p))
	    p++;

	if (*p == '#')
	    continue;

	major = strtok(p, "/");
	minor = strtok(NULL, " \t");
	roft = strtok(NULL, " \t\n");
	ext = strtok(NULL, " \t\n");

	if (major == NULL || minor == NULL || roft == NULL)
	    continue;

	new_type = malloc(sizeof(*new_type));

	if (new_type == NULL)
	    break;

	new_type->major = strdup(major);
	new_type->minor = strdup(minor);
	new_type->next = NULL;

	if (type_last)
	{
	    type_last->next = new_type;
	    type_last = new_type;
	}
	else
	    type_list = type_last = new_type;

	if (roft[0] == '*')
	{
	    new_type->ft = -1;
	}
	else
	{
	    r.r[0] = 31;		/* Map file type name */
	    r.r[1] = (int) roft;

	    ep = _kernel_swi(OS_FSControl, &r, &r);

	    if (ep && ext && ext[0] != '.')
	    {
		r.r[0] = 31;		/* Map file type name */
		r.r[1] = (int) ext;

		ep = _kernel_swi(OS_FSControl, &r, &r);

		ext = NULL;
	    }

	    if (ep)
		new_type->ft = -2;
	    else
		new_type->ft = r.r[2];
	}

	i = 0;

	do {
	    if (ext && ext[0] == '.')
		exts[i++] = strdup(ext+1);
	    ext = strtok(NULL, " \t\n");
	} while (ext);

	new_type->num_exts = i;

	if (i)
	    new_type->exts = malloc(i*sizeof(char*));
	else
	    new_type->exts = NULL;

	if (new_type->exts)
	    memcpy(new_type->exts, exts, i*sizeof(char*));
    }

    fclose(fh);

    return NULL;
}

static _kernel_oserror *mm_read_type_file_if_changed(char *fname)
{
    _kernel_osfile_block ofb;

    if (_kernel_osfile(5, fname, &ofb) != 1)
	return make_error(err_BAD_FILE);

    if ((ofb.load != old_load) || (ofb.exec != old_exec))
    {
	old_load = ofb.load;
	old_exec = ofb.exec;

	return mm_read_type_file(MAPPING_FILE);
    }
    else
	return NULL;
}

static _kernel_oserror *mm_read_file_if_not_inited(char *fname)
{
    if (type_list == NULL) {
      return mm_read_type_file(fname);
    }

    return NULL;
}

static int mm_flags_ok(typeinfo *tp, int flag)
{
    if ((flag & MMM_VALID_MIME) &&
	((tp->major[0] == '*') || (tp->minor[0] == '*')))
	return 0;
    if ((flag & MMM_VALID_DOT_EXTN) &&
	(tp->num_exts == 0))
	return 0;
    if ((flag & MMM_VALID_RISCOS) &&
	(tp->ft == -1))
	return 0;

    return 1;
}

static typeinfo *mm_lookup_by_ft(int ft, int flag)
{
    typeinfo *tp;
    static typeinfo tt;

    for (tp = type_list; tp; tp = tp->next)
	if ((flag == MMM_VALID_RISCOS) || mm_flags_ok(tp, flag))
	{
	    if (tp->ft == ft)
		return tp;
	    if (tp->ft == -1)
	    {
		tt = *tp;
		tt.ft = ft;
		return &tt;
	    }
	}

    return NULL;
}

static typeinfo *mm_lookup_by_ftname(const char * fname, int flag)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    r.r[0] = 31;		/* Map file type name */
    r.r[1] = (int) fname;

    ep = _kernel_swi(OS_FSControl, &r, &r);

    if (ep)
	return NULL;
    else
	return mm_lookup_by_ft(r.r[2], flag);
}

static typeinfo *mm_lookup_by_mime(char *mt, int flag)
{
    typeinfo *tp;
    char *major, *minor;

    strcpy(_mm_buffer, mt);
    major = strtok(_mm_buffer, "/");
    minor = strtok(NULL, " \t\r\n");

    if (major == NULL || minor == NULL)
	return NULL;

    for (tp = type_list; tp; tp = tp->next)
	if (mm_flags_ok(tp, flag) &&
	    ((tp->major[0] == '*') || 			/* Wild care in major or */
	     ((strcasecmp(major, tp->major) == 0) && 	/* Match in major add */
	      ((tp->minor[0] == '*') || 			/* Wild in minor or */
	       (strcasecmp(minor, tp->minor) == 0))))) 	/* Match in minor */
	    return tp;

    return NULL;
}

static typeinfo *mm_lookup_by_ext(const char *ext, int flag)
{
    typeinfo *tp;
    int i;

    if (ext[0] == '.')
	ext++;

    for (tp = type_list; tp; tp = tp->next)
	for(i=0; i < tp->num_exts; i++)
	    if (mm_flags_ok(tp, flag) &&
		(strcasecmp(ext, tp->exts[i]) == 0))
		return tp;

    return NULL;
}

_kernel_oserror *module_initialise(const char *cmd_tail, int pbase, void *pw)
{
    private_word = pw;

    UNUSED(pbase);
    UNUSED(cmd_tail);

    type_list = type_last = NULL;

    atexit(mm_free_type_list);

    old_load = old_exec = -1;

    (void) mm_read_type_file_if_changed(MAPPING_FILE);
    return NULL;
}

extern _kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *regs, void *pw)
{
    int reqflag;
    typeinfo *tp = NULL;

    UNUSED(pw);
    UNUSED(swinum);

    mm_read_file_if_not_inited(MAPPING_FILE);

    switch(regs->r[2])
    {
    case MMM_TYPE_RISCOS:
    case MMM_TYPE_RISCOS_STRING:
	reqflag = MMM_VALID_RISCOS;
	break;
    case MMM_TYPE_MIME:
	reqflag = MMM_VALID_MIME;
	break;
    case MMM_TYPE_DOT_EXTN:
	reqflag = MMM_VALID_DOT_EXTN;
	break;
    default:
	reqflag = 0;
	break;
    }

    switch(regs->r[0])
    {
    case MMM_TYPE_RISCOS:
	tp = mm_lookup_by_ft(regs->r[1], reqflag);
	break;
    case MMM_TYPE_RISCOS_STRING:
	tp = mm_lookup_by_ftname((char *) regs->r[1], reqflag);
	break;
    case MMM_TYPE_MIME:
	tp = mm_lookup_by_mime((char *) regs->r[1], reqflag);
	break;
    case MMM_TYPE_DOT_EXTN:
	tp = mm_lookup_by_ext((char *) regs->r[1], reqflag);
	break;
    default:
	break;
    }

    if (tp == NULL)
	return make_error(err_LOOKUP_FAILED);

    switch(regs->r[2])
    {
    case MMM_TYPE_RISCOS:
	regs->r[3] = tp->ft;
	break;
    case MMM_TYPE_RISCOS_STRING:
        {
	    _kernel_swi_regs r;
	    r.r[0] = 18;
	    r.r[2] = tp->ft;
	    if (_kernel_swi(OS_FSControl, &r, &r) == NULL)
	    {
		char *p;
		((int*)regs->r[3])[0] = r.r[2];
		((int*)regs->r[3])[1] = r.r[3];
		p = strchr((char*) regs->r[3], ' ');
		if (p)
		    *p = 0;
	    }
	    else
	    {
		sprintf((char*)regs->r[3], "&%03X", tp->ft);
	    }
	}
	break;
    case MMM_TYPE_MIME:
	sprintf((char*)regs->r[3], "%s/%s", tp->major, tp->minor);
	break;
    case MMM_TYPE_DOT_EXTN:
	strcpy((char*)regs->r[3], tp->exts[0]);
	break;
    default:
	break;
    }

    return NULL;
}

static void mm_print_typeinfo(typeinfo *tp)
{
    int i;

    printf("Mime type: %s/%s, RISC OS file type: 0x%03x\n", tp->major, tp->minor, tp->ft);
    if (tp->num_exts && tp->exts)
    {
	printf("Extensions:\n");
	for (i=0; i < tp->num_exts; i++)
	{
	    printf("\t%s", tp->exts[i]);
	}
	printf("\n");
    }
}

_kernel_oserror *module_cli_handler(const char *arg_string, int arg_count,
				   int cmd_no, void *pw)
{
    typeinfo *tp;

    UNUSED(pw);
    switch (cmd_no)
    {
    case 0:
        mm_read_file_if_not_inited(MAPPING_FILE);
	if (arg_count == 0)
	{
	    for(tp = type_list; tp; tp = tp->next)
		mm_print_typeinfo(tp);
	}
	else
	{
	    char *copy = strdup (arg_string);

	    if (copy)
	    {
	        if (copy[0] == '.')
	        {
	            tp = mm_lookup_by_ext(strtok(copy+1, " \t\r\n"), 0);
	        }
	        else if (copy[0] == '&')
	        {
	            char *p;
	            int i;
	            p = strtok(copy+1, " \t\r\n");
	            i = (int) strtoul(p, &p, 16);
	            tp = mm_lookup_by_ft(i, 0);
	        }
	        else if (strchr(copy, '/'))
	        {
	            tp = mm_lookup_by_mime(strtok(copy, " \t\r\n"), 0);
	        }
	        else
	        {
	            tp = mm_lookup_by_ftname(strtok(copy, " \t\r\n"), 0);
	        }

	        if (tp)
	            mm_print_typeinfo(tp);
	        else
	            printf("No file type match found.\n");

	        free (copy);
	    }
	}
	break;
    case 1:
	return mm_read_type_file_if_changed(MAPPING_FILE);
	break;
    default:
	break;
    }

    return NULL;
}
