/*
 * BootVars
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 * Sets various system variable:
 *
 *  Boot$OSVersion - UtilityModule version minus final digit (eg. 4.02 -> 4.00)
 *  Boot$Unique    - a unique ID or Local or empty.
 *  Boot$Dir       - recreated with canonical version of name
 *
 *
 * History:
 *
 * 04-Oct-1999   SBrodie   Rewrote this utility.
 *
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stddef.h>
#include <assert.h>

#include "kernel.h"
#include "swis.h"

#include "Global/Services.h"
#include "Global/CMOS.h"
#include "Global/FSNumbers.h"
#include "Interface/Econet.h"

#include "sys/types.h"
#include "sys/dcistructs.h"
#include "sys/socket.h"
#include "net/if.h"
#include "net/ethernet.h"
#include "sys/ioctl.h"
#include "socklib.h"
#include "netinet/in.h"

#include "RMVersion.h"


static void Get_Ether_DCI2(struct ether_addr *id)
{
        int i;
        bool unclaimed;
        struct dci2_dib {
                char *name;
                int  units;
                int  swi_base;
                unsigned char *address [4];
                char *module;
        } *dib;

        for (i = 0; i < 4; i++) {
                _swix (OS_ServiceCall, _INR(1,4)|_OUT(1)|_OUT(3),
                        Service_FindNetworkDriver, -1, 0, i, &unclaimed, &dib);

                if (!unclaimed) {
                        memcpy(id, dib->address [0], sizeof(*id));
                        break;
                }
        }
}

static void Get_Ether_DCI4(struct ether_addr *id)
{
        struct chaindib *chain, *c;

        if (_swix(OS_ServiceCall, _INR(0,1)|_OUT(0), 0,
                Service_EnumerateNetworkDrivers, &chain)) {
                return;
        }

        for (c = chain; c != NULL; c = c->chd_next) {
                /*Ignore Econet and Loopback.*/
                if (strcmp((char *) c->chd_dib->dib_name, "ec") == 0) continue;
                if (strcmp((char *) c->chd_dib->dib_name, "lo") == 0) continue;
                if (c->chd_dib->dib_address == 0) continue;
                memcpy(id, c->chd_dib->dib_address, sizeof(*id));
                break;
        }

        /* Free the chain. */
        for (c = chain; c; ) {
                struct chaindib *next = c->chd_next;
                free(c);
                c = next;
        }
}

static int Module_Version (char *module_name)
{
        /*Return the version number of a ROM module.*/
        unsigned int version;
        _kernel_oserror *e = rmversion(rmversion_ROM, module_name, &version);
        if (e) {
                return 0;
        }
        return version >> 8;
}

/* Calls the Internet module to discover the given interfaces current flag settings and
 * returns them
 */
static short bootvars_read_if_flags(int s, const char *name)
{
        struct ifreq ifr;

        (void) strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
        if (socketioctl(s, SIOCGIFFLAGS, &ifr)<0) {
                return 0;
        }
        else {
                return ifr.ifr_flags;
        }
}

static u_long bootvars_read_if_address(int s, const char *name)
{
        struct ifreq ifr;

        (void) strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
        if (socketioctl(s, SIOCGIFADDR, &ifr)<0) {
                return 0UL;
        }
        else {
                return ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr.s_addr;
        }
}


/* Reads the primary IP address associated with the specified network interface */
static u_long Get_Inter (char *interface)
{
        int s;
        u_long result = 0UL;
        short iflags;

        s = socket(PF_INET, SOCK_DGRAM, 0);
        if (s < 0) {
                return 0UL;
        }

        iflags = bootvars_read_if_flags(s, interface) & (IFF_BROADCAST|IFF_UP|IFF_LOOPBACK);
        if (iflags == (IFF_UP|IFF_BROADCAST)) {
                result = bootvars_read_if_address(s, interface);
        }

        socketclose(s);

        return result;
}

/* Set Boot$OSVersion based on the UtilityModule version number */
static void bootvars_os_version(void)
{
        unsigned int version;

        if (!rmversion(rmversion_ROM, "UtilityModule", &version)) {
                char os_version[16];
                sprintf(os_version, "%X0", version >> 12);
                _kernel_setenv("Boot$OSVersion", os_version);
        }
}

static void bootvars_set_boot_state(void)
{
        int state;
        if (_swix(Wimp_ReadSysInfo, _IN(0)|_OUT(0), 3, &state)) state = 0;
        _kernel_setenv("Boot$State", state == 0 ? "commands" : "desktop");
}

static int bootvars_read_cmos(int location)
{
        int value;

        if (_swix(OS_Byte, _INR(0,1)|_OUT(2), ReadCMOS, location, &value)) value = 0;
        return value;
}

static int bootvars_read_configured_fs(void)
{
        return bootvars_read_cmos(FileLangCMOS);
}

/* Routine for generating a unique name when NetFS is the configured filesystem */
static void bootvars_netfs_unique(char *buffer)
{
        unsigned int station, net;

        if (_swix(Econet_ReadLocalStationAndNet, _OUTR(0,1), &station, &net)) {
                station = net = 0;
        }
        else {
                /* Fix infelicity: if there is a native Econet, and also an Internet
                 * connection, the net number just returned is 0, which is wrong.
                 * Let's try asking Internet if it has a better idea of the net
                 * number, but still using 0 if there's an error. J R C 21st Feb 1995
                 */
                if (net == 0) {
                        net = (unsigned int) ((Get_Inter ("ea0") & 0xFF0000) >> 16);
                }
        }

        sprintf(buffer, "Stn%.3d!%.3d", net, station);
}

static void bootvars_sharefs_unique(char *buffer)
{
        struct ether_addr id;
        char addr [13];

        memset(&id, '\0', sizeof(id));

        /* To get the ethernet number, we need the Internet version number. */
        if (Module_Version ("Internet") < 0x350) {
                /* was 0x400 J R C 8th Mar 1995 */
                Get_Ether_DCI2 (&id);
        }
        else {
                Get_Ether_DCI4 (&id);
        }

        sprintf(addr, "%.2X%.2X%.2X%.2X%.2X%.2X",
                id.octet[0], id.octet[1], id.octet[2],
                id.octet[3], id.octet[4], id.octet[5]);

        /* Skip leading noughts and make sure the name is less than 10 digits long.*/
        sprintf(buffer, "%.10s", addr + strspn(addr, "0"));
}

static void bootvars_nexus_unique(char *buffer)
{
        struct {
                int lo, hi;
        } id_w;
        struct ether_addr *id = (struct ether_addr *) &id_w;
        char addr [13];

        /* &45A09 is NexusVC_ReadLocalAddress */
        if (_swix(0x45A09, _OUTR(0,1), &id_w.lo, &id_w.hi)) {
                id_w.lo = id_w.hi = 0;
        }

        sprintf(addr, "%.2X%.2X%.2X%.2X%.2X%.2X",
                id->octet[5], id->octet[4], id->octet[3],
                id->octet[2], id->octet[1], id->octet[0]);

        /* Skip leading noughts and make sure the name is less than 10 digits long.*/
        sprintf(buffer, "%.10s", addr + strspn(addr, "0"));
}

static void bootvars_boot_unique(void)
{
        char unique[16];
        int fs;

        /* Set Boot$Unique to the unique machine id. */
        fs = bootvars_read_configured_fs();

        switch (fs) {
                case fsnumber_net:
                        bootvars_netfs_unique(unique);
                        break;

                case fsnumber_ShareFS:
                        bootvars_sharefs_unique(unique);
                        break;

                case fsnumber_Nexus:
                        bootvars_nexus_unique(unique);
                        break;

                default:
                        strcpy(unique, "Local");
                        break;
        }

        _kernel_setenv("Boot$Unique", unique);
}

static void bootvars_boot_dir_adfs(char *canon)
{
        sprintf(canon, "ADFS::%d.$.!Boot", bootvars_read_cmos(StartCMOS) & 7);
}

static void bootvars_boot_dir_scsi(char *canon)
{
        sprintf(canon, "SCSI::%d.$.!Boot",
                (bootvars_read_cmos(ScsiFsCMOS) >> 3) & 0x38);
}

static void bootvars_boot_dir_netfs(char *canon)
{
        typedef struct netfs_read_user_environment_reply {
                unsigned char len;
                char disc_name [16];
                char csd_name [10];
                char lib_name [10];
        } netfs_reply;
        netfs_reply read_env;
        char csd [sizeof(read_env.csd_name) + 4];
        char disc[sizeof(read_env.disc_name) + 4];

        /* Compile-time assertion checks assert that structure is packed */
        extern void *assertion_1[-1+2*(offsetof(netfs_reply, disc_name) == 1)];
        extern void *assertion_2[-1+2*(offsetof(netfs_reply, csd_name ) == 17)];
        extern void *assertion_3[-1+2*(offsetof(netfs_reply, lib_name ) == 27)];
        (void) assertion_1, (void) assertion_2, (void) assertion_3;
        /* End assertions */

        /* Get the CSD name. */
        if (_swix(NetFS_DoFSOp, _INR(0,3),
                FileServer_ReadUserEnvironment, &read_env, 0, sizeof(read_env))) {
                *canon = '\0';
                return;
        }

        csd [0] = '$';
        if (read_env.csd_name [0] == '$') {
                csd [1] = '\0';
        }
        else {
                read_env.lib_name[0] = ' '; /*ensure it's terminated - this overwrites the
                        first character of the library name, which we don't need */
                sprintf (csd + 1, ".%.*s",
                        strcspn (read_env.csd_name, " "), read_env.csd_name);
        }

        /* Get the disc name. */
        read_env.csd_name[0] = ' '; /* Terminate disc name */
        sprintf (disc, "%.*s", strcspn (read_env.disc_name, " "), read_env.disc_name);

        /* don't use the configured file server - all the info we need
         * has now been read from the real thing. JRC 17th Feb 1995
         * after talk with Rhodri James, S J Research
         */
         sprintf (canon, "Net::%s.%s.!ArmBoot", disc, csd);
}

static void bootvars_canonicalise_boot_dir(void)
{
        /* "Canonicalise" Boot$Dir, making sure it contains the filing system and
         * disc name.
         */
        static char canon[BUFSIZ];
        const char *boot_dir = getenv("Boot$Dir");

        if (boot_dir && strchr(boot_dir, '$')) {
                /* Already OK ... so just return */
                return;
        }

        switch (bootvars_read_configured_fs()) {
                case fsnumber_net:
                        bootvars_boot_dir_netfs(canon);
                        break;

                case fsnumber_adfs:
                        bootvars_boot_dir_adfs(canon);
                        break;

                case fsnumber_SCSIFS:
                        bootvars_boot_dir_scsi(canon);
                        break;

                default:
                        *canon = '\0';
                        break;
        }

        if (*canon) {
                _kernel_setenv("Boot$Dir", canon);
        }
}

int main(void)
{
        /* Set Boot$OSVersion to the version number. */
        bootvars_os_version();

        /* Set Boot$State to either commands or desktop depending on where we are */
        bootvars_set_boot_state();

        /* Set Boot$Unique */
        bootvars_boot_unique();

        /* Canonicalise Boot$Dir */
        bootvars_canonicalise_boot_dir();

        /* OK - exit cleanly */
        return 0;
}

