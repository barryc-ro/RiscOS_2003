#ifndef socket_H
#define socket_H

/* C header file for Socket
 * written by DefMod (Feb 15 1995) on Fri Mar 10 14:17:26 1995
 * Copyright © Acorn Computers Ltd, 1995
 */

#ifndef types_H
#include "types.h"
#endif

#ifndef os_H
#include "os.h"
#endif

/**********************************
 * SWI names and SWI reason codes *
 **********************************/
#undef  Socket_Creat
#define Socket_Creat                            0x41200
#undef  XSocket_Creat
#define XSocket_Creat                           0x61200
#undef  Socket_Bind
#define Socket_Bind                             0x41201
#undef  XSocket_Bind
#define XSocket_Bind                            0x61201
#undef  Socket_Listen
#define Socket_Listen                           0x41202
#undef  XSocket_Listen
#define XSocket_Listen                          0x61202
#undef  Socket_Accept
#define Socket_Accept                           0x41203
#undef  XSocket_Accept
#define XSocket_Accept                          0x61203
#undef  Socket_Connect
#define Socket_Connect                          0x41204
#undef  XSocket_Connect
#define XSocket_Connect                         0x61204
#undef  Socket_Recv
#define Socket_Recv                             0x41205
#undef  XSocket_Recv
#define XSocket_Recv                            0x61205
#undef  Socket_Recvfrom
#define Socket_Recvfrom                         0x41206
#undef  XSocket_Recvfrom
#define XSocket_Recvfrom                        0x61206
#undef  Socket_Recvmsg
#define Socket_Recvmsg                          0x41207
#undef  XSocket_Recvmsg
#define XSocket_Recvmsg                         0x61207
#undef  Socket_Send
#define Socket_Send                             0x41208
#undef  XSocket_Send
#define XSocket_Send                            0x61208
#undef  Socket_Sendto
#define Socket_Sendto                           0x41209
#undef  XSocket_Sendto
#define XSocket_Sendto                          0x61209
#undef  Socket_Sendmsg
#define Socket_Sendmsg                          0x4120A
#undef  XSocket_Sendmsg
#define XSocket_Sendmsg                         0x6120A
#undef  Socket_Shutdown
#define Socket_Shutdown                         0x4120B
#undef  XSocket_Shutdown
#define XSocket_Shutdown                        0x6120B
#undef  Socket_Setsockopt
#define Socket_Setsockopt                       0x4120C
#undef  XSocket_Setsockopt
#define XSocket_Setsockopt                      0x6120C
#undef  Socket_Getsockopt
#define Socket_Getsockopt                       0x4120D
#undef  XSocket_Getsockopt
#define XSocket_Getsockopt                      0x6120D
#undef  Socket_Getpeername
#define Socket_Getpeername                      0x4120E
#undef  XSocket_Getpeername
#define XSocket_Getpeername                     0x6120E
#undef  Socket_Getsockname
#define Socket_Getsockname                      0x4120F
#undef  XSocket_Getsockname
#define XSocket_Getsockname                     0x6120F
#undef  Socket_Close
#define Socket_Close                            0x41210
#undef  XSocket_Close
#define XSocket_Close                           0x61210
#undef  Socket_Select
#define Socket_Select                           0x41211
#undef  XSocket_Select
#define XSocket_Select                          0x61211
#undef  Socket_Ioctl
#define Socket_Ioctl                            0x41212
#undef  XSocket_Ioctl
#define XSocket_Ioctl                           0x61212
#undef  Socket_Read
#define Socket_Read                             0x41213
#undef  XSocket_Read
#define XSocket_Read                            0x61213
#undef  Socket_Write
#define Socket_Write                            0x41214
#undef  XSocket_Write
#define XSocket_Write                           0x61214
#undef  Socket_Stat
#define Socket_Stat                             0x41215
#undef  XSocket_Stat
#define XSocket_Stat                            0x61215
#undef  Socket_Readv
#define Socket_Readv                            0x41216
#undef  XSocket_Readv
#define XSocket_Readv                           0x61216
#undef  Socket_Writev
#define Socket_Writev                           0x41217
#undef  XSocket_Writev
#define XSocket_Writev                          0x61217
#undef  Socket_Gettsize
#define Socket_Gettsize                         0x41218
#undef  XSocket_Gettsize
#define XSocket_Gettsize                        0x61218
#undef  Event_Internet
#define Event_Internet                          0x13

/************************************
 * Structure and union declarations *
 ************************************/
typedef struct socket_inet_addr                 socket_inet_addr;
typedef union  socket_addr                      socket_addr;
typedef struct socket_linger                    socket_linger;
typedef struct socket_time_val                  socket_time_val;
typedef struct socket_if_req                    socket_if_req;
typedef struct socket_if_conf                   socket_if_conf;
typedef struct socket_s_                        *socket_s;
typedef struct socket_io_vec                    socket_io_vec;
typedef struct socket_msg_hdr                   socket_msg_hdr;

/********************
 * Type definitions *
 ********************/
struct socket_inet_addr
   {  short family;
      short port;
      bits addr;
      byte data [8];
   };

union socket_addr
   {  struct
      {  short family;
         byte data [14];
      }
      generic;
      socket_inet_addr inet;
   };

struct socket_linger
   {  int onoff;
      int linger;
   };

struct socket_time_val
   {  int sec;
      int usec;
   };

typedef short socket_if_flags;

struct socket_if_req
   {  char name [16];
      union
      {  socket_addr addr;
         socket_addr broadaddr;
         socket_if_flags flags;
         int metric;
         byte *data;
      }
      u;
   };

struct socket_if_conf
   {  int len;
      union
      {  byte *buf;
         socket_if_req *req;
      }
      u;
   };

typedef bits socket_msg_flags;

struct socket_io_vec
   {  byte *base;
      int len;
   };

struct socket_msg_hdr
   {  byte *name;
      int namelen;
      socket_io_vec *iov;
      int iov_count;
      byte *accrights;
      int accrightslen;
   };

typedef int socket_shutdown_type;

typedef byte socket_fd_set;

/************************
 * Constant definitions *
 ************************/
#define socket_DOMAIN_INET                      2
#define socket_TYPE_STREAM                      1
#define socket_TYPE_DGRAM                       2
#define socket_TYPE_RAW                         3
#define socket_PROTOCOL_IP                      0
#define socket_PROTOCOL_ICMP                    1
#define socket_PROTOCOL_GGP                     2
#define socket_PROTOCOL_TCP                     6
#define socket_PROTOCOL_EGP                     8
#define socket_PROTOCOL_PUP                     12
#define socket_PROTOCOL_UDP                     17
#define socket_PROTOCOL_IDP                     22
#define socket_PROTOCOL_RAW                     255
#define socket_LEVEL_SOCKET                     65535
#define socket_ERROR_BADF                       0x9u
#define socket_ERROR_AGAIN                      0xBu
#define socket_ERROR_FAULT                      0xEu
#define socket_ERROR_INVAL                      0x16u
#define socket_ERROR_WOULD_BLOCK                0x23u
#define socket_ERROR_IN_PROGRESS                0x24u
#define socket_ERROR_ALREADY                    0x25u
#define socket_ERROR_NOT_SOCK                   0x26u
#define socket_ERROR_DEST_ADDR_REQ              0x27u
#define socket_ERROR_MSG_SIZE                   0x28u
#define socket_ERROR_PROTO_TYPE                 0x29u
#define socket_ERROR_NO_PROTO_OPT               0x2Au
#define socket_ERROR_PROTO_NO_SUPPORT           0x2Bu
#define socket_ERROR_SOCK_TNO_SUPPORT           0x2Cu
#define socket_ERROR_OP_NOT_SUPP                0x2Du
#define socket_ERROR_PF_NO_SUPPORT              0x2Eu
#define socket_ERROR_AF_NO_SUPPORT              0x2Fu
#define socket_ERROR_ADDR_IN_USE                0x30u
#define socket_ERROR_ADDR_NOT_AVAIL             0x31u
#define socket_ERROR_NET_DOWN                   0x32u
#define socket_ERROR_NET_UNREACH                0x33u
#define socket_ERROR_NET_RESET                  0x34u
#define socket_ERROR_CONN_ABORTED               0x35u
#define socket_ERROR_CONN_RESET                 0x36u
#define socket_ERROR_NO_BUFS                    0x37u
#define socket_ERROR_IS_CONN                    0x38u
#define socket_ERROR_NOT_CONN                   0x39u
#define socket_ERROR_SHUTDOWN                   0x3Au
#define socket_ERROR_TOO_MANY_REFS              0x3Bu
#define socket_ERROR_TIMED_OUT                  0x3Cu
#define socket_ERROR_CONN_REFUSED               0x3Du
#define socket_ERROR_HOST_DOWN                  0x40u
#define socket_ERROR_HOST_UNREACH               0x41u
#define socket_OPTION_ACCEPT_CONN               2
#define socket_OPTION_REUSE_ADDR                4
#define socket_OPTION_KEEP_ALIVE                8
#define socket_OPTION_DONT_ROUTE                16
#define socket_OPTION_BROADCAST                 32
#define socket_OPTION_USE_LOOPBACK              64
#define socket_OPTION_LINGER                    128
#define socket_OPTION_OOB_IN_LINE               256
#define socket_OPTION_SND_BUF                   4097
#define socket_OPTION_RCV_BUF                   4098
#define socket_OPTION_SND_LOW_AT                4099
#define socket_OPTION_RCV_LOW_AT                4100
#define socket_OPTION_SND_TIMEO                 4101
#define socket_OPTION_RCV_TIMEO                 4102
#define socket_OPTION_ERROR                     4103
#define socket_OPTION_TYPE                      4104
#define socket_IF_NAME_LIMIT                    16
#define socket_IF_UP                            ((socket_if_flags) 1)
#define socket_IF_BROADCAST                     ((socket_if_flags) 2)
#define socket_IF_DEBUG                         ((socket_if_flags) 4)
#define socket_IF_LOOPBACK                      ((socket_if_flags) 8)
#define socket_IF_POINT_TO_POINT                ((socket_if_flags) 16)
#define socket_IF_NO_TRAILERS                   ((socket_if_flags) 32)
#define socket_IF_RUNNING                       ((socket_if_flags) 64)
#define socket_IF_NO_ARP                        ((socket_if_flags) 128)
#define socket_IOCTL_SIOCSHIWAT                 0x80047300u
#define socket_IOCTL_SIOCGHIWAT                 0x40047301u
#define socket_IOCTL_SIOCSLOWAT                 0x80047302u
#define socket_IOCTL_SIOCGLOWAT                 0x40047303u
#define socket_IOCTL_SIOCATMARK                 0x40047307u
#define socket_IOCTL_SIOCSIFADDR                0x8020690Cu
#define socket_IOCTL_SIOCGIFADDR                0xC020690Du
#define socket_IOCTL_SIOCSIFDSTADDR             0x8020690Eu
#define socket_IOCTL_SIOCGIFDSTADDR             0xC020690Fu
#define socket_IOCTL_SIOCSIFFLAGS               0x80206910u
#define socket_IOCTL_SIOCGIFFLAGS               0xC0206911u
#define socket_IOCTL_SIOCGIFBRDADDR             0xC0206912u
#define socket_IOCTL_SIOCSIFBRDADDR             0x80206913u
#define socket_IOCTL_SIOCGIFCONF                0xC0086914u
#define socket_IOCTL_SIOCGIFNETMASK             0xC0206915u
#define socket_IOCTL_SIOCSIFNETMASK             0x80206916u
#define socket_IOCTL_SIOCGIFMETRIC              0xC0206917u
#define socket_IOCTL_SIOCSIFMETRIC              0x80206918u
#define socket_IOCTL_FIONREAD                   0x4004667Fu
#define socket_IOCTL_FIONBIO                    0x8004667Eu
#define socket_IOCTL_FIOASYNC                   0x8004667Du
#define socket_MSG_OOB                          ((socket_msg_flags) 1)
#define socket_MSG_PEEK                         ((socket_msg_flags) 2)
#define socket_MSG_DONT_ROUTE                   ((socket_msg_flags) 4)
#define socket_SHUTDOWN_RECV                    ((socket_shutdown_type) 0)
#define socket_SHUTDOWN_SEND                    ((socket_shutdown_type) 1)
#define socket_SHUTDOWN_ALL                     ((socket_shutdown_type) 2)
#define socket_ASYNC_EVENT                      1
#define socket_URGENT_EVENT                     2
#define socket_BROKEN_EVENT                     3

/*************************
 * Function declarations *
 *************************/

#ifdef __cplusplus
   extern "C" {
#endif

/* ------------------------------------------------------------------------
 * Function:      socket_creat()
 *
 * Description:   Creates an endpoint for communication
 *
 * Input:         domain - value of R0 on entry
 *                type - value of R1 on entry
 *                protocol - value of R2 on entry
 *
 * Output:        s - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41200.
 */

extern os_error *xsocket_creat (int domain,
      int type,
      int protocol,
      socket_s *s);
__swi (0x41200) socket_s socket_creat (int domain,
      int type,
      int protocol);

/* ------------------------------------------------------------------------
 * Function:      socket_bind()
 *
 * Description:   Binds a name to a socket
 *
 * Input:         s - value of R0 on entry
 *                addr - value of R1 on entry
 *                namelen - value of R2 on entry
 *
 * Other notes:   Calls SWI 0x41201.
 */

extern os_error *xsocket_bind (socket_s s,
      socket_addr const *addr,
      int namelen);
__swi (0x41201) void socket_bind (socket_s s,
      socket_addr const *addr,
      int namelen);

/* ------------------------------------------------------------------------
 * Function:      socket_listen()
 *
 * Description:   Listens for connections on a socket
 *
 * Input:         s - value of R0 on entry
 *                backlog - value of R1 on entry
 *
 * Other notes:   Calls SWI 0x41202.
 */

extern os_error *xsocket_listen (socket_s s,
      int backlog);
__swi (0x41202) void socket_listen (socket_s s,
      int backlog);

/* ------------------------------------------------------------------------
 * Function:      socket_accept()
 *
 * Description:   Accepts a connection on a socket
 *
 * Input:         s - value of R0 on entry
 *                addr - value of R1 on entry
 *                addrlen - value of R2 on entry
 *
 * Output:        ns - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41203.
 */

extern os_error *xsocket_accept (socket_s s,
      socket_addr const *addr,
      int const *addrlen,
      socket_s *ns);
__swi (0x41203) socket_s socket_accept (socket_s s,
      socket_addr const *addr,
      int const *addrlen);

/* ------------------------------------------------------------------------
 * Function:      socket_connect()
 *
 * Description:   Initiates a connection on a socket
 *
 * Input:         s - value of R0 on entry
 *                addr - value of R1 on entry
 *                namelen - value of R2 on entry
 *
 * Other notes:   Calls SWI 0x41204.
 */

extern os_error *xsocket_connect (socket_s s,
      socket_addr const *addr,
      int namelen);
__swi (0x41204) void socket_connect (socket_s s,
      socket_addr const *addr,
      int namelen);

/* ------------------------------------------------------------------------
 * Function:      socket_recv()
 *
 * Description:   Receives data from a connected socket
 *
 * Input:         s - value of R0 on entry
 *                buf - value of R1 on entry
 *                len - value of R2 on entry
 *                flags - value of R3 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41205.
 */

extern os_error *xsocket_recv (socket_s s,
      byte *buf,
      int len,
      socket_msg_flags flags,
      int *cc);
__swi (0x41205) int socket_recv (socket_s s,
      byte *buf,
      int len,
      socket_msg_flags flags);

/* ------------------------------------------------------------------------
 * Function:      socket_recvfrom()
 *
 * Description:   Receives data from a socket
 *
 * Input:         s - value of R0 on entry
 *                buf - value of R1 on entry
 *                len - value of R2 on entry
 *                flags - value of R3 on entry
 *                from - value of R4 on entry
 *                fromlen - value of R5 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41206.
 */

extern os_error *xsocket_recvfrom (socket_s s,
      byte *buf,
      int len,
      socket_msg_flags flags,
      socket_addr const *from,
      int const *fromlen,
      int *cc);
extern int socket_recvfrom (socket_s s,
      byte *buf,
      int len,
      socket_msg_flags flags,
      socket_addr const *from,
      int const *fromlen);

/* ------------------------------------------------------------------------
 * Function:      socket_recvmsg()
 *
 * Description:   Receives a message from a socket
 *
 * Input:         s - value of R0 on entry
 *                msg - value of R1 on entry
 *                flags - value of R2 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41207.
 */

extern os_error *xsocket_recvmsg (socket_s s,
      socket_msg_hdr *msg,
      socket_msg_flags flags,
      int *cc);
__swi (0x41207) int socket_recvmsg (socket_s s,
      socket_msg_hdr *msg,
      socket_msg_flags flags);

/* ------------------------------------------------------------------------
 * Function:      socket_send()
 *
 * Description:   Sends data from a connected socket
 *
 * Input:         s - value of R0 on entry
 *                msg - value of R1 on entry
 *                len - value of R2 on entry
 *                flags - value of R3 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41208.
 */

extern os_error *xsocket_send (socket_s s,
      byte const *msg,
      int len,
      socket_msg_flags flags,
      int *cc);
__swi (0x41208) int socket_send (socket_s s,
      byte const *msg,
      int len,
      socket_msg_flags flags);

/* ------------------------------------------------------------------------
 * Function:      socket_sendto()
 *
 * Description:   Sends data from a socket
 *
 * Input:         s - value of R0 on entry
 *                msg - value of R1 on entry
 *                len - value of R2 on entry
 *                flags - value of R3 on entry
 *                to - value of R4 on entry
 *                tolen - value of R5 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41209.
 */

extern os_error *xsocket_sendto (socket_s s,
      byte const *msg,
      int len,
      socket_msg_flags flags,
      socket_addr const *to,
      int tolen,
      int *cc);
extern int socket_sendto (socket_s s,
      byte const *msg,
      int len,
      socket_msg_flags flags,
      socket_addr const *to,
      int tolen);

/* ------------------------------------------------------------------------
 * Function:      socket_sendmsg()
 *
 * Description:   Sends a message from a socket
 *
 * Input:         s - value of R0 on entry
 *                msg - value of R1 on entry
 *                flags - value of R2 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x4120A.
 */

extern os_error *xsocket_sendmsg (socket_s s,
      socket_msg_hdr const *msg,
      socket_msg_flags flags,
      int *cc);
__swi (0x4120A) int socket_sendmsg (socket_s s,
      socket_msg_hdr const *msg,
      socket_msg_flags flags);

/* ------------------------------------------------------------------------
 * Function:      socket_shutdown()
 *
 * Description:   Shuts down part of a full-duplex connection
 *
 * Input:         s - value of R0 on entry
 *                type - value of R1 on entry
 *
 * Other notes:   Calls SWI 0x4120B.
 */

extern os_error *xsocket_shutdown (socket_s s,
      socket_shutdown_type type);
__swi (0x4120B) void socket_shutdown (socket_s s,
      socket_shutdown_type type);

/* ------------------------------------------------------------------------
 * Function:      socket_setsockopt()
 *
 * Description:   Set options on sockets
 *
 * Input:         s - value of R0 on entry
 *                level - value of R1 on entry
 *                optname - value of R2 on entry
 *                optval - value of R3 on entry
 *                optlen - value of R4 on entry
 *
 * Other notes:   Calls SWI 0x4120C.
 */

extern os_error *xsocket_setsockopt (socket_s s,
      int level,
      int optname,
      byte const *optval,
      int optlen);
extern void socket_setsockopt (socket_s s,
      int level,
      int optname,
      byte const *optval,
      int optlen);

/* ------------------------------------------------------------------------
 * Function:      socket_getsockopt()
 *
 * Description:   Get options on sockets
 *
 * Input:         s - value of R0 on entry
 *                level - value of R1 on entry
 *                optname - value of R2 on entry
 *                optval - value of R3 on entry
 *                optlen - value of R4 on entry
 *
 * Other notes:   Calls SWI 0x4120D.
 */

extern os_error *xsocket_getsockopt (socket_s s,
      int level,
      int optname,
      byte *optval,
      int const *optlen);
extern void socket_getsockopt (socket_s s,
      int level,
      int optname,
      byte *optval,
      int const *optlen);

/* ------------------------------------------------------------------------
 * Function:      socket_getpeername()
 *
 * Description:   Gets name of connected peer
 *
 * Input:         s - value of R0 on entry
 *                addr - value of R1 on entry
 *                namelen - value of R2 on entry
 *
 * Other notes:   Calls SWI 0x4120E.
 */

extern os_error *xsocket_getpeername (socket_s s,
      socket_addr *addr,
      int const *namelen);
__swi (0x4120E) void socket_getpeername (socket_s s,
      socket_addr *addr,
      int const *namelen);

/* ------------------------------------------------------------------------
 * Function:      socket_getsockname()
 *
 * Description:   Gets socket name
 *
 * Input:         s - value of R0 on entry
 *                addr - value of R1 on entry
 *                namelen - value of R2 on entry
 *
 * Other notes:   Calls SWI 0x4120F.
 */

extern os_error *xsocket_getsockname (socket_s s,
      socket_addr *addr,
      int const *namelen);
__swi (0x4120F) void socket_getsockname (socket_s s,
      socket_addr *addr,
      int const *namelen);

/* ------------------------------------------------------------------------
 * Function:      socket_close()
 *
 * Description:   Closes an open socket
 *
 * Input:         s - value of R0 on entry
 *
 * Other notes:   Calls SWI 0x41210.
 */

extern os_error *xsocket_close (socket_s s);
__swi (0x41210) void socket_close (socket_s s);

/* ------------------------------------------------------------------------
 * Function:      socket_select()
 *
 * Description:   Synchronous socket i/o multiplexing
 *
 * Input:         nfds - value of R0 on entry
 *                readfds - value of R1 on entry
 *                writefds - value of R2 on entry
 *                exceptfds - value of R3 on entry
 *                timeout - value of R4 on entry
 *
 * Output:        nfound - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41211.
 */

extern os_error *xsocket_select (int nfds,
      socket_fd_set const *readfds,
      socket_fd_set const *writefds,
      socket_fd_set const *exceptfds,
      socket_time_val const *timeout,
      int *nfound);
extern int socket_select (int nfds,
      socket_fd_set const *readfds,
      socket_fd_set const *writefds,
      socket_fd_set const *exceptfds,
      socket_time_val const *timeout);

/* ------------------------------------------------------------------------
 * Function:      socket_ioctl()
 *
 * Description:   Controls an open socket
 *
 * Input:         s - value of R0 on entry
 *                flags - value of R1 on entry
 *                argp - value of R2 on entry
 *
 * Other notes:   Calls SWI 0x41212.
 */

extern os_error *xsocket_ioctl (socket_s s,
      bits flags,
      byte const *argp);
__swi (0x41212) void socket_ioctl (socket_s s,
      bits flags,
      byte const *argp);

/* ------------------------------------------------------------------------
 * Function:      socket_read()
 *
 * Description:   Receives data from a connected socket
 *
 * Input:         s - value of R0 on entry
 *                buf - value of R1 on entry
 *                len - value of R2 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41213.
 */

extern os_error *xsocket_read (socket_s s,
      byte *buf,
      int len,
      int *cc);
__swi (0x41213) int socket_read (socket_s s,
      byte *buf,
      int len);

/* ------------------------------------------------------------------------
 * Function:      socket_write()
 *
 * Description:   Sends data from a connected socket
 *
 * Input:         s - value of R0 on entry
 *                msg - value of R1 on entry
 *                len - value of R2 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41214.
 */

extern os_error *xsocket_write (socket_s s,
      byte const *msg,
      int len,
      int *cc);
__swi (0x41214) int socket_write (socket_s s,
      byte const *msg,
      int len);

/* ------------------------------------------------------------------------
 * Function:      socket_stat()
 *
 * Description:   Not implemented
 *
 * Other notes:   Calls SWI 0x41215.
 */

extern os_error *xsocket_stat (void);
__swi (0x41215) void socket_stat (void);

/* ------------------------------------------------------------------------
 * Function:      socket_readv()
 *
 * Description:   Receives data from a connected socket
 *
 * Input:         s - value of R0 on entry
 *                iov - value of R1 on entry
 *                iov_count - value of R2 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41216.
 */

extern os_error *xsocket_readv (socket_s s,
      socket_io_vec *iov,
      int iov_count,
      int *cc);
__swi (0x41216) int socket_readv (socket_s s,
      socket_io_vec *iov,
      int iov_count);

/* ------------------------------------------------------------------------
 * Function:      socket_writev()
 *
 * Description:   Sends data from a connected socket
 *
 * Input:         s - value of R0 on entry
 *                iov - value of R1 on entry
 *                iov_count - value of R2 on entry
 *
 * Output:        cc - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41217.
 */

extern os_error *xsocket_writev (socket_s s,
      socket_io_vec const *iov,
      int iov_count,
      int *cc);
__swi (0x41217) int socket_writev (socket_s s,
      socket_io_vec const *iov,
      int iov_count);

/* ------------------------------------------------------------------------
 * Function:      socket_gettsize()
 *
 * Description:   Gets the size of the socket table
 *
 * Output:        size - value of R0 on exit (X version only)
 *
 * Returns:       R0 (non-X version only)
 *
 * Other notes:   Calls SWI 0x41218.
 */

extern os_error *xsocket_gettsize (int *size);
__swi (0x41218) int socket_gettsize (void);

/* ------------------------------------------------------------------------
 * Function:      event_internet()
 *
 * Description:   Internet event
 *
 * Input:         event_type - value of R1 on entry
 *                s - value of R2 on entry
 *
 * Other notes:   Calls SWI 0x22 with R0 = 0x13.
 */

extern os_error *xevent_internet (int event_type,
      socket_s s);
extern void event_internet (int event_type,
      socket_s s);

#ifdef __cplusplus
   }
#endif

#endif
