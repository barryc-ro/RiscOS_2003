
/* bandlimit.c */

/* Set VIDC bandlimit, being sensitive to KernelMemSpeed value.
   Introduced with RISC OS 3.71, to support A7000+ with 7500FE
   and 32 MHz EDO RAM */

#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

/* range of OS version for which KernelMemSpeedAddr known valid */
#define MinOSVersion 0xa6 /* 3.6 */
#define MaxOSVersion 0xa7 /* 3.7 */

#define KernelMemSpeedAddr 0x110

int main(int argc, char *argv[])
{
  int  i, lim[4], osversion = 0, memspeed = 0;
  char cmd[256];

  if ((argc < 4) || (argc > 5))
  {
    /* in 1000-bytes/s: DRAM (32MHz), 1Mb VRAM, 2Mb VRAM, EDO DRAM (64 MHz) */
    printf("syntax: BandLimit <bwidth> <bwidth> <bwidth> [<bwidth>]\n");
    exit(1);
  }

  for (i=1; i<argc; i++) lim[i-1] = atoi(argv[i])*1000;

  _swix(OS_Byte,_INR(0,2)|_OUT(1),129,0,255,&osversion);

  /* the MemSpeed info really ought to be available via a SWI call */
  if ((osversion >= MinOSVersion) && (osversion <= MaxOSVersion))
    memspeed = *((int *)KernelMemSpeedAddr) & 0xffff;

  /* set alias for VIDCBandLimit command, which can also be used by other code (eg. Configure) */
  switch(memspeed)
  {
    case 32000: /* 32 MHz - A7000+, with 7500FE and EDO memory */
      sprintf(cmd,"Set Alias$VIDCBandLimit VIDCBandwidthLimit %1d %1d %1d",lim[3],lim[1],lim[2]);
      break;

    case 16000: /* 16 MHz - Risc PC or A7000 */
    default:
      sprintf(cmd,"Set Alias$VIDCBandLimit VIDCBandwidthLimit %1d %1d %1d",lim[0],lim[1],lim[2]);
      break;
  }   

  _swix(OS_CLI,_IN(0),cmd);
  _swix(OS_CLI,_IN(0),"VIDCBandLimit");

  return 0;
}
