
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:ModHand
        GET     Hdr:NDRDebug

;;-----------------------------------------------------------------------------
;; A transient to resize the RMA dynamic area in order to achived a
;; specified application area size. Intended for use before the Wimp
;; has started, in order to allow a BASIC program to load modules etc.
;;
;; Syntax: AppSize <size>K
;;
;; Try to set the application area to the specified size. Move any
;; excess into the RMA, or try to borrow from the RMA, as appropriate.
;;-----------------------------------------------------------------------------

        GBLL    hostvdu
debug   SETL    false
hostvdu SETL    false

TransientStart ENTRY "R1-R6"
                       
        Debug   ,"appsize"

        LDRB    LR,[R1]
        CMP     LR,#32                          ; are they are any commands?
        BLO     %FT90                           ;   complain because the syntax is invalid
                     
        MOV     R0,#0
        MOV     R2,#0
        SWI     XOS_ReadUnsigned                ; attempt to get the line
        EXIT    VS                              ;   returning if there is an error

        LDRB    LR,[R1]                         ; get the next character
        UpperCase LR,R0                         ;   ensure it is of sensible case
        TEQ     LR,#"K"                         ;   and see if the amount is kilobytes
        MOVEQ   R2,R2,LSL #10                   ;   if it is then multiple by 1024
        MOV     R5, R2                          ; R5 = desired app size
        Debug   ,"desired app size        ",R5

        SWI     XOS_GetEnv                      ; now R1 = address of first unavailable byte
        EXIT    VS
        SUB     R1, R1, #32768                  ; R1 = size of app area
        SUB     R4, R1, R5                      ; R1 = amount to move from app area
        Debug   ,"amount to move from app ",R4

        MOV     R0,#1                           ; dynamic Area = RMA
        SWI     XOS_ReadDynamicArea             ;   read its size
        EXIT    VS                              ; R0 = max size of RMA, R1 = current size
        Debug   ,"max and current RMA size",R0,R1
        MOV     R0,#4*1024*1024                 ; DDV asserts that R0 will hold the max
                                                ; size to which RMA can grow - it seems to
                                                ; me to hold 24M! So, we need to insert at
                                                ; this point the max size to which the RMA
                                                ; can grow.
        SUB     R0, R0, R1                      ; R0 = max amount by which RMA can grow
        Debug   ,"max space avail in RMA",R0
        CMP     R4,R0
        MOVGT   R4,R0
        Debug   ,"amount to try to move   ",R4

        MOV     R0,#1                           ;   dynamic area = 1 (RMA)
        MOV     R1,R4                           ;   move this much
        Debug   ,"change RMA by           ",R1
        SWI     XOS_ChangeDynamicArea           ;   and modify the size

        [ debug
        MOV     R0,#1                           ; dynamic Area = RMA
        SWI     XOS_ReadDynamicArea             ;   read its size
        EXIT    VS
        Debug   ,"RMA size                ",R1
        ]


        EXITS 
90
        ADR     R0,Syntax
        SETV                                    ; setup the error (V set!)
        EXIT

        InsertNDRDebugRoutines

Syntax  & 220
        = "Syntax: AppSize <size>[K]",0

        DCB     "AppSize 1.00 29-Nov-1993  © Acorn Computers Ltd 1993", 0
        ALIGN

        END
