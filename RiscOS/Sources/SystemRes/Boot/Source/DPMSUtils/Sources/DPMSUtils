; > Sources.DPMSUtils

;----------------------------------------------------------------------------
; Patch module for RISC OS 3.50

; In RISC OS 3.50, when the DPMS screen-blanking code turns off hsyncs, no
; more Vsync IRQs happen during this time.
;
; Unfortunately, various things issue OS_Byte(19) to wait for vsync. The most
; notable of these is the OS_Word to program the pointer shape, which in turn
; is called by the Hourglass module. This means that if the hourglass is on,
; or comes on while the screen is blanked, the next time the pointer shape gets
; reprogrammed (to do the sand effect), the foreground task effectively halts
; until the screen is unblanked. This is rather unfortunate, eg if you're
; printing a large document, which turns the hourglass on, and then the screen
; blanks, which means the document printing pauses, so you can't just go away
; and have a cup of coffee, you keep having to move the mouse to stop it
; blanking.
;
; To bodge round the problem, this module sits on ByteV and intercepts
; OS_Byte(19). It examines the kernel variables ScreenBlankFlag and
; ScreenBlankDPMSState and if the screen is blanked with a DPMS state that has
; turned off hsyncs then it makes OS_Byte(19) return immediately.

;;
;; Change List
;; -----------
;; 04-Mar-94    3.50  TMD  File created
;;
;;
;;----------------------------------------------------------------------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:Services
        GET     Hdr:VickySpace
        GET     Version

EndOfROM        *       &03A00000

Module_BaseAddr
        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     0
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               ; Helptable
        DCD     0                               ; MySWIBase
        DCD     0                               ; SWIdecode
        DCD     0                               ; SWInames
        DCD     0                               ; SWI name decode

Title   DCB     "DPMSUtils", 0

Helpstr DCB     "DPMS Utils", 9, "$VString ($Date)", 0
        ALIGN

Init    ENTRY
        MOV     r0, #EndOfROM   ; compare ROM checksum and CRCs
        LDMDB   r0, {r0-r2}
        ADR     r3, ROMChecksums ; with what they should be for 3.50
        LDMIA   r3, {r3-r5}
        EORS    r0, r0, r3
        EOREQS  r0, r1, r4
        EOREQS  r0, r2, r5
        EXIT    NE              ; not RISC OS 3.50, so exit

        MOV     r0, #ByteV
        ADR     r1, MyByteV
        MOV     r2, #0
        SWI     XOS_Claim
        EXIT

Die     ENTRY
        MOV     r0, #ByteV
        ADR     r1, MyByteV
        MOV     r2, #0
        SWI     XOS_Release
        CLRV
        EXIT

MyByteV ROUT
        TEQ     r0, #19         ; if not wait for vsync
        MOVNE   pc, lr          ; then pass it on
        Push    "r0,r1,lr"
        LDR     lr, =VduDriverWorkSpace+ScreenBlankFlag
        LDRB    r0, [lr]
        LDRB    r1, [lr, #ScreenBlankDPMSState-ScreenBlankFlag]
        TEQ     r0, #0          ; NE => blanked
        TSTNE   r1, #1          ; NE => blanked and DPMS turned off hsyncs
        Pull    "r0,r1,pc", EQ  ; pass it on if hsyncs not off
        Pull    "r0,r1,lr,pc"   ; else claim the vector

ROMChecksums
        &       &F0561D7C, &EAE37D58, &C33AE184

        END
