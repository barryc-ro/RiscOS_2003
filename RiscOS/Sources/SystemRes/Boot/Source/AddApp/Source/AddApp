        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:ModHand
        GET     Hdr:ResourceFS

        GBLL    Debug
Debug   SETL    {FALSE}

        GBLS    GetAroundBleedingAAsmYetAgain
 [ Debug
GetAroundBleedingAAsmYetAgain SETS " GET Hdr:Debug"
 |
GetAroundBleedingAAsmYetAgain SETS "; No debug required"
 ]
$GetAroundBleedingAAsmYetAgain

 [ Debug
Host_Debug SETL {FALSE}
Debug_MaybeIRQ SETL {FALSE}
 ]

        Entry

        MOV     r0, r12
        MOV     r2, r13
        BL      strcpy_advance
        MOV     r6, r0
        MOV     r2, r0
        B       %FT20

10
        LDRB    lr, [r6, #-1]!
        TEQ     lr, #'.'
        BEQ     %FT30
20
        CMP     r6, r12
        BHI     %BT10

        ADR     r1, CSD_name
        B       %FT40

30
        MOV     lr, #0
        STRB    lr, [r6], #1
        MOV     r1, r12

40
        ; r1->directory name
        ; r2->past wildcard
        ; r6->wildcard
        ADD     r2, r2, #1+3
        BIC     r2, r2, #3
        MOV     r0, #10
        MOV     r4, #0

50
        MOV     r3, #1
        SUB     r5, r13, r2
 [ Debug :LAND: {FALSE}
        DSTRING r1,"Dir:",cc
        DSTRING r6," wild:"
 ]
        SWI     OS_GBPB
 [ Debug :LAND: {FALSE}
        DREG    r3, "Num found:",cc
        DREG    r4, " continue:"
 ]
        TEQ     r3, #1
        BNE     %FT60

        ; Put a sensible access into the block
        MOV     lr, #3
        STR     lr, [r2, #12]

        ; Add app to ResourceFS
        BL      AddAppToResourceFS

60
        CMP     r4, #-1
        BNE     %BT50

        EXITS

CSD_name        DCB     "@",0
        ALIGN

ResourceOverhead * 3*(20+5+7+3+4+1+7+3) + 4
; to full filename + Apps. + .!Help\0 + padding + file size + / + .!Help\n + padding
; + end indicator

;
; In
;  r1->directory name
;  r2->file info block (as per OS_GBPB 10)
;
BootPresent * 1
BootIsIconsprites * 2
HelpPresent * 4

AddAppToResourceFS Entry "r0,r2,r3,r4,r5,r8"
        BL      FaffMakeFlags
 [ Debug
        DREG    r8, "App flags:"
 ]

        MOV     r0, #0
        MOV     r3, r1
        MOV     r4, r2
        MOV     r2, #0
        BL      StuffBigBlock

        MOV     r3, r0
        MOV     r0, #ModHandReason_Claim
 [ Debug
        DREG    r3, "BigBlock size "
 ]
        SWI     OS_Module

        MOV     r0, r2
        ADD     r2, r0, r3              ; set up the block limit
        MOV     r3, r1
        MOV     r5, r0                  ; Save the block start
        BL      StuffBigBlock

        MOV     r0, r5
 [ Debug
        DREG    r0, "ResourceFS_RegisterFiles "
 |
        SWI     ResourceFS_RegisterFiles
 ]

        EXIT

DotPlingBoot    DCB     ".!Boot",0
DotPlingHelp    DCB     ".!Help",0
DotPlingRun     DCB     ".!Run",0
Slash           DCB     "/",0
FilerRun        DCB     "Filer_Run ",0
DotPlingSprites DCB     ".!Sprites",0
Iconsprites     DCB     "Iconsprites ",0
        ALIGN
; In
;  r1->directory name
;  r2->file info block (as per OS_GBPB 10)
; Out:
;  r8=flags

FaffMakeFlags Entry "r0,r1,r2,r3,r4,r5,r6,r7"
        ADD     r0, r2, #20
        MOV     r3, r0
        BL      strlen_accumulate       ; r3->end of file name
        ADD     r0, r3, #1
        MOV     r4, r2
        MOV     r2, r13
        BL      strcpy_advance
        MOV     r1, #'.'
        BL      stuffbyte
        ADD     r1, r4, #20
        BL      strcpy_advance
        ADD     r6, r3, #1              ; Start of name
        MOV     r7, r0                  ; end of name
        ADR     r1, DotPlingBoot
        BL      strcpy_advance
        MOV     r0, #17
        MOV     r1, r6
 [ Debug
        DSTRING r1, "Check for "
 ]
        SWI     OS_File
        TEQ     r0, #0
        MOVNE   r8, #BootPresent
        BNE     %FT20

        MOV     r0, r7
        ADR     r1, DotPlingSprites
        MOV     r2, r13
        BL      strcpy_advance
        MOV     r0, #17
        MOV     r1, r6
 [ Debug
        DSTRING r1, "Check for "
 ]
        SWI     OS_File
        TEQ     r0, #0
        MOVNE   r8, #BootPresent :OR: BootIsIconsprites
        MOVEQ   r8, #0

20
        ; boot sorted out
        MOV     r0, r7
        ADRL    r1, DotPlingHelp
        MOV     r2, r13
        BL      strcpy_advance
        MOV     r0, #17
        MOV     r1, r6
 [ Debug
        DSTRING r1, "Check for "
 ]
        SWI     OS_File
        TEQ     r0, #0
        ORRNE   r8, r8, #HelpPresent

        EXIT

;
; In:
;  r0->big block
;  r2->big block limit
;  r3->directory name
;  r4->info block
;  r8=flags
; Out:
;  big block stuffed and r0 advanced
;

StuffBigBlock Entry "r1,r5,r6,r7"

        TST     r8, #BootPresent
        BEQ     %FT10

        ADR     r6, DotPlingBoot
        TST     r8, #BootIsIconsprites
        ADREQ   r5, Slash
        ADREQ   r7, DotPlingBoot
        ADRNE   r5, Iconsprites
        ADRNEL  r7, DotPlingSprites
        BL      StuffFileToBigBlock

10
        TST     r8, #HelpPresent
        ADRNEL  r5, FilerRun
        ADRNEL  r6, DotPlingHelp
        ADRNEL  r7, DotPlingHelp
        BLNE    StuffFileToBigBlock

        ADR     r5, Slash
        ADRL    r6, DotPlingRun
        ADRL    r7, DotPlingRun
        BL      StuffFileToBigBlock

        MOV     r1, #0
        BL      stuffword

        EXIT


AppsDot         DCB     "Apps.",0
        ALIGN

;
; In
;  r0->destination
;  r2->limit
;  r3->directory name
;  r4->info block
;  r5->command prefix
;  r6->.!Boot or .!Run or .!Help as appropriate for filename
;  r7->.!Sprites, .!Boot etc as appropriate for file contents
; Out
;  r0->end rounded up
;
StuffFileToBigBlock Entry "r1,r8,r9,r10"

        MOV     r8, r0                  ; r8->block start
        BL      stuffword               ; link to next file
        LDR     r1, [r4, #0]
        MOV     r1, r1, ASL #24
        LDR     lr, =&ffffeb00          ; obey file type
        ORR     r1, lr, r1, LSR #24
        BL      stuffword               ; load
        LDR     r1, [r4, #4]
        BL      stuffword               ; exec
        BL      stuffword               ; 'length'
        LDR     r1, [r4, #12]
        BL      stuffword               ; attributes
        ADR     r1, AppsDot
        BL      strcpy_advance          ; Apps.
        ADD     r1, r4, #20
        BL      strcpy_advance          ; <App>
        MOV     r1, r6
        BL      strcpy_advance          ; .<thing>
        ADD     r0, r0, #1+3+4
        BIC     r0, r0, #3
        MOV     r9, r0                  ; r9->file start
        MOV     r1, r5
        BL      strcpy_advance          ; / or iconsprites
        MOV     r1, r3
        BL      strcpy_advance          ; <dir>
        MOV     r1, #'.'
        BL      stuffbyte               ; .
        ADD     r1, r4, #20
        BL      strcpy_advance          ; <app>
        MOV     r1, r7
        BL      strcpy_advance          ; .<thing>
        MOV     r1, #10
        BL      stuffbyte               ; <nl>
        SUB     r1, r0, r9
        ADD     r10, r0, #3
        BIC     r10, r10, #3            ; r10->next block start
        ADD     r0, r8, #12
        BL      stuffword               ; file length
        ADD     r1, r1, #4
        SUB     r0, r9, #4
        BL      stuffword               ; file length+4
        SUB     r1, r10, r8
        MOV     r0, r8
        BL      stuffword               ; link to next file

        MOV     r0, r10
        EXIT


;
; copy r1 to r0, limit is r2
;
strcpy_advance Entry "r1,r3"
        MOV     r3, r1
10      LDRB    r1, [r3], #1
        CMP     r1, #31
        MOVLSS  r1, #0
        BL      stuffbyte
        BNE     %BT10
        SUB     r0, r0, #1
        EXIT

;
; word in r1 stuffed to [r0]
; stuff limit is r2
;
stuffword Entry "r1"
        BL      stuffbyte
        MOV     r1, r1, LSR #8
        BL      stuffbyte
        MOV     r1, r1, LSR #8
        BL      stuffbyte
        MOV     r1, r1, LSR #8
        BL      stuffbyte
        EXIT

;
; byte in r1 stuffed to [r0]
; r2 is stuff limit register
;
stuffbyte
        CMP     r0, r2
        STRLOB  r1, [r0], #1
        ADDHS   r0, r0, #1
        MOVS    pc, lr

strlen_accumulate Entry "r0"
10
        LDRB    lr, [r0], #1
        TEQ     lr, #0
        ADDNE   r3, r3, #1
        BNE     %BT10
        EXIT

 [ Debug
        InsertDebugRoutines
 ]

        DCB     "AddApp 1.00 29-Nov-1993  © Acorn Computers Ltd 1993", 0
        ALIGN

        END
