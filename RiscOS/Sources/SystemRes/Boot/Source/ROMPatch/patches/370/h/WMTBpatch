
/* patches/370/WMTBpatch.h */

/*
   unconditional patches for Wimp_TransferBlock

   - fixes equivalent to those in Wimp 3.69 for RISC OS 3.71 (19 Feb 97):
     Bug since  Description    
          3.70  PAN-00249 "Wimp_TransferBlock scrambles application memory"
                Problem is page(s) left mapped in above current application;
                often harmless unless several TransferBlock's occur without
                an intervening Poll.
                eg. Load DataPower 1.51, load (say) Examples.Birthdays and
                type F7, then DataPower crashes.
          3.50  Transfer crashes if forced to map current task out because
                there is not enough spare Application space.
          3.50  Transfer crashes if transfer is large (> 7 Mb) and there is
                less than transfer_size spare Application space.
          3.50  Transfer fails or crashes if source or destination is a
                Dynamic Area at logical address 2G or greater.

   - patch list: (from pdiff utility with -m option):

  addr      old                            | new

  03816d20: ANDEQ   R0,R0,R0               | STR     R1,[R12,#0]           
  03816d24: ANDEQ   R0,R0,R0               | STR     R10,[R12,#4]          
  03816d28: ANDEQ   R0,R0,R0               | BL      &0390AAB8             
  03816d2c: ANDEQ   R0,R0,R0               | B       &0390A9E0             

  03816d40: ANDEQ   R0,R0,R0               | STR     R1,[R12,#8]           
  03816d44: ANDEQ   R0,R0,R0               | STR     R10,[R12,#12]         
  03816d48: ANDEQ   R0,R0,R0               | BL      &0390AAB8             
  03816d4c: ANDEQ   R0,R0,R0               | B       &0390AA08             

  03816d60: ANDEQ   R0,R0,R0               | LDRNE   R10,[R12,#4]          
  03816d64: ANDEQ   R0,R0,R0               | CMPNE   R10,#0                
  03816d68: ANDEQ   R0,R0,R0               | LDRNE   R1,[R12,#0]           
  03816d6c: ANDEQ   R0,R0,R0               | MVNNE   R2,#0                 
  03816d70: ANDEQ   R0,R0,R0               | BLNE    &0390AAB8             
  03816d74: ANDEQ   R0,R0,R0               | LDR     R2,[R12,#696]         
  03816d78: ANDEQ   R0,R0,R0               | B       &0390AA68             

  03816d80: ANDEQ   R0,R0,R0               | LDRNE   R10,[R12,#12]         
  03816d84: ANDEQ   R0,R0,R0               | CMPNE   R10,#0                
  03816d88: ANDEQ   R0,R0,R0               | LDRNE   R1,[R12,#8]           
  03816d8c: ANDEQ   R0,R0,R0               | MVNNE   R2,#0                 
  03816d90: ANDEQ   R0,R0,R0               | BLNE    &0390AAB8             
  03816d94: ANDEQ   R0,R0,R0               | B       &0390AA7C             

  0390a7a8: LDR     R14,[R12,R14]          | CMP     R14,#0                
  0390a7ac: CMP     R14,#0                 | LDRNE   R14,[R12,R14]         
  0390a7b0: STRGT   R1,[R14,#40]           | CMPNE   R14,#0                
  0390a7b4: STMDB   R13!,{R0}              | STRGT   R1,[R14,#40]          
  0390a7b8: LDRB    R0,[R12,#467]          | LDMIA   R13,{R0-R4}           
  0390a7bc: CMP     R0,#1                  | MOV     R0,R0                 
  0390a7c0: LDMIA   R13!,{R0}              | MOV     R0,R0                 
  0390a7c4: LDMEQIA R13,{R0-R4}            | MOV     R0,R0                 
  0390a7c8: LDMNEIA R13!,{R0-R4}           | MOV     R0,R0                 

  0390a828: SUBGES  R8,R1,#&8000           | SUB     R8,R1,#&8000          
  0390a82c: SUBGES  R9,R3,#&8000           | SUB     R9,R3,#&8000          
  0390a830: BLT     &0390AB20              | MOV     R0,R0                 

  0390a83c: ADDGE   R8,R8,#&8000           | ADDCS   R8,R8,#&8000          
  0390a840: BGE     &0390A854              | BCS     &0390A854             

  0390a850: BGT     &0390AB20              | BHI     &0390AB20             

  0390a858: ADDGE   R9,R9,#&8000           | ADDCS   R9,R9,#&8000          
  0390a85c: BGE     &0390A870              | BCS     &0390A870             

  0390a86c: BGT     &0390AB20              | BHI     &0390AB20             

  0390a87c: STMDB   R13!,{R0}              | TEQ     R6,R7                 
  0390a880: LDRB    R0,[R12,#467]          | BEQ     &0390A8BC             
  0390a884: CMP     R0,#1                  | CMP     R10,#&00700000        
  0390a888: LDMIA   R13!,{R0}              | BLT     &0390A8BC             
  0390a88c: BNE     &0390A990              | MOV     R10,#&00700000        
  0390a890: CMP     R6,R7                  | STMDB   R13!,{R1}             
  0390a894: BEQ     &0390A8BC              | ADD     R0,R13,#8             
  0390a898: CMP     R10,#&00700000         | LDMIA   R0,{R0-R4}            
  0390a89c: BLT     &0390A8BC              | ADD     R1,R1,#&00700000      
  0390a8a0: MOV     R10,#&00700000         | ADD     R3,R3,#&00700000      
  0390a8a4: ADD     R0,R13,#4              | SUB     R4,R4,#&00700000      
  0390a8a8: LDMIA   R0,{R0-R4}             | SWI     XWimp_TransferBlock   
  0390a8ac: ADD     R1,R1,#&00700000       | LDMIA   R13!,{R1}             
  0390a8b0: ADD     R3,R3,#&00700000       | MOV     R0,R0                 
  0390a8b4: SUB     R4,R4,#&00700000       | MOV     R0,R0                 
  0390a8b8: SWI     XWimp_TransferBlock    | MOV     R0,R0                 

  0390a8cc: CMP     R1,R4                  | TEQ     R1,R4                 

  0390a8d4: CMP     R1,R5                  | TEQ     R1,R5                 

  0390a8e0: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R10             
  0390a8e4: ADDLT   R0,R0,R2               | ADDCC   R0,R0,R2              

  0390a8ec: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R10             
  0390a8f0: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R2              

  0390a910: BLT     &0390A990              | BCC     &0390A990             

  0390a924: ADD     R0,R13,#4              | ADD     R0,R13,#8             

  0390a944: CMP     R5,R4                  | TEQ     R5,R4                 

  0390a950: BLT     &0390A964              | BCC     &0390A964             

  0390a958: CMP     R5,R4                  | TEQ     R5,R4                 

  0390a964: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R10             
  0390a968: ADDLT   R0,R0,R2               | ADDCC   R0,R0,R2              

  0390a988: BLT     &0390A990              | BCC     &0390A990             

  0390a9a0: STMDB   R13!,{R0}              | ADD     R13,R13,#&14          
  0390a9a4: LDRB    R0,[R12,#467]          | MOV     R2,#0                 
  0390a9a8: CMP     R0,#1                  | STR     R2,[R12,#4]           
  0390a9ac: LDMIA   R13!,{R0}              | STR     R2,[R12,#12]          
  0390a9b0: ADDEQ   R13,R13,#&14           | MOV     R0,R0                 

  0390a9c0: BGE     &0390A9E4              | BCS     &0390A9E4             
  0390a9c4: CMP     R3,R5                  | TEQ     R3,R5                 

  0390a9dc: BL      &0390AAB8              | B       &03816D20             

  0390a9e8: BGE     &0390AA0C              | BCS     &0390AA0C             
  0390a9ec: CMP     R3,R4                  | TEQ     R3,R4                 

  0390aa04: BL      &0390AAB8              | B       &03816D40             

  0390aa20: BGE     &0390AA40              | BCS     &0390AA40             

  0390aa54: CMP     R2,R5                  | TEQ     R2,R5                 

  0390aa64: BLNE    &0390AF98              | BNE     &03816D60             
  0390aa68: CMP     R2,R4                  | TEQ     R2,R4                 

  0390aa78: BLNE    &0390AF98              | BNE     &03816D80             

  0390aa84: BGE     &0390AAA4              | BCS     &0390AAA4             

Notes:

  - all patches are in code from Sources.OS_Core.Desktop.Wimp.s.Wimp08

  - patches in area 03816d20 to 03816d94 are in spare area, in same page
    as some previous patches

*/

static patchentry_t *WMTBpatches370_proc(void *handle)
{

  static patchentry_t WMTBpatches370[] =
  {
  /*            addr        old         new */

     {(uint32 *)0x03816d20, 0x00000000, 0xe58c1000},
     {(uint32 *)0x03816d24, 0x00000000, 0xe58ca004},
     {(uint32 *)0x03816d28, 0x00000000, 0xeb03cf62},
     {(uint32 *)0x03816d2c, 0x00000000, 0xea03cf2b},

     {(uint32 *)0x03816d40, 0x00000000, 0xe58c1008},
     {(uint32 *)0x03816d44, 0x00000000, 0xe58ca00c},
     {(uint32 *)0x03816d48, 0x00000000, 0xeb03cf5a},
     {(uint32 *)0x03816d4c, 0x00000000, 0xea03cf2d},

     {(uint32 *)0x03816d60, 0x00000000, 0x159ca004},
     {(uint32 *)0x03816d64, 0x00000000, 0x135a0000},
     {(uint32 *)0x03816d68, 0x00000000, 0x159c1000},
     {(uint32 *)0x03816d6c, 0x00000000, 0x13e02000},
     {(uint32 *)0x03816d70, 0x00000000, 0x1b03cf50},
     {(uint32 *)0x03816d74, 0x00000000, 0xe59c22b8},
     {(uint32 *)0x03816d78, 0x00000000, 0xea03cf3a},

     {(uint32 *)0x03816d80, 0x00000000, 0x159ca00c},
     {(uint32 *)0x03816d84, 0x00000000, 0x135a0000},
     {(uint32 *)0x03816d88, 0x00000000, 0x159c1008},
     {(uint32 *)0x03816d8c, 0x00000000, 0x13e02000},
     {(uint32 *)0x03816d90, 0x00000000, 0x1b03cf48},
     {(uint32 *)0x03816d94, 0x00000000, 0xea03cf38},

     {(uint32 *)0x0390a7a8, 0xe79ce00e, 0xe35e0000},
     {(uint32 *)0x0390a7ac, 0xe35e0000, 0x179ce00e},
     {(uint32 *)0x0390a7b0, 0xc58e1028, 0x135e0000},
     {(uint32 *)0x0390a7b4, 0xe92d0001, 0xc58e1028},
     {(uint32 *)0x0390a7b8, 0xe5dc01d3, 0xe89d001f},
     {(uint32 *)0x0390a7bc, 0xe3500001, 0xe1a00000},
     {(uint32 *)0x0390a7c0, 0xe8bd0001, 0xe1a00000},
     {(uint32 *)0x0390a7c4, 0x089d001f, 0xe1a00000},
     {(uint32 *)0x0390a7c8, 0x18bd001f, 0xe1a00000},

     {(uint32 *)0x0390a828, 0xa2518902, 0xe2418902},
     {(uint32 *)0x0390a82c, 0xa2539902, 0xe2439902},
     {(uint32 *)0x0390a830, 0xba0000ba, 0xe1a00000},

     {(uint32 *)0x0390a83c, 0xa2888902, 0x22888902},
     {(uint32 *)0x0390a840, 0xaa000003, 0x2a000003},

     {(uint32 *)0x0390a850, 0xca0000b2, 0x8a0000b2},

     {(uint32 *)0x0390a858, 0xa2899902, 0x22899902},
     {(uint32 *)0x0390a85c, 0xaa000003, 0x2a000003},

     {(uint32 *)0x0390a86c, 0xca0000ab, 0x8a0000ab},

     {(uint32 *)0x0390a87c, 0xe92d0001, 0xe1360007},
     {(uint32 *)0x0390a880, 0xe5dc01d3, 0x0a00000d},
     {(uint32 *)0x0390a884, 0xe3500001, 0xe35a0607},
     {(uint32 *)0x0390a888, 0xe8bd0001, 0xba00000b},
     {(uint32 *)0x0390a88c, 0x1a00003f, 0xe3a0a607},
     {(uint32 *)0x0390a890, 0xe1560007, 0xe92d0002},
     {(uint32 *)0x0390a894, 0x0a000008, 0xe28d0008},
     {(uint32 *)0x0390a898, 0xe35a0607, 0xe890001f},
     {(uint32 *)0x0390a89c, 0xba000006, 0xe2811607},
     {(uint32 *)0x0390a8a0, 0xe3a0a607, 0xe2833607},
     {(uint32 *)0x0390a8a4, 0xe28d0004, 0xe2444607},
     {(uint32 *)0x0390a8a8, 0xe890001f, 0xef0600f1},
     {(uint32 *)0x0390a8ac, 0xe2811607, 0xe8bd0002},
     {(uint32 *)0x0390a8b0, 0xe2833607, 0xe1a00000},
     {(uint32 *)0x0390a8b4, 0xe2444607, 0xe1a00000},
     {(uint32 *)0x0390a8b8, 0xef0600f1, 0xe1a00000},

     {(uint32 *)0x0390a8cc, 0xe1510004, 0xe1310004},

     {(uint32 *)0x0390a8d4, 0xe1510005, 0xe1310005},

     {(uint32 *)0x0390a8e0, 0xb080000a, 0x3080000a},
     {(uint32 *)0x0390a8e4, 0xb0800002, 0x30800002},

     {(uint32 *)0x0390a8ec, 0xb080000a, 0x3080000a},
     {(uint32 *)0x0390a8f0, 0xb080000a, 0x30800002},

     {(uint32 *)0x0390a910, 0xba00001e, 0x3a00001e},

     {(uint32 *)0x0390a924, 0xe28d0004, 0xe28d0008},

     {(uint32 *)0x0390a944, 0xe1550004, 0xe1350004},

     {(uint32 *)0x0390a950, 0xba000003, 0x3a000003},

     {(uint32 *)0x0390a958, 0xe1550004, 0xe1350004},

     {(uint32 *)0x0390a964, 0xb080000a, 0x3080000a},
     {(uint32 *)0x0390a968, 0xb0800002, 0x30800002},

     {(uint32 *)0x0390a988, 0xba000000, 0x3a000000},

     {(uint32 *)0x0390a9a0, 0xe92d0001, 0xe28dd014},
     {(uint32 *)0x0390a9a4, 0xe5dc01d3, 0xe3a02000},
     {(uint32 *)0x0390a9a8, 0xe3500001, 0xe58c2004},
     {(uint32 *)0x0390a9ac, 0xe8bd0001, 0xe58c200c},
     {(uint32 *)0x0390a9b0, 0x028dd014, 0xe1a00000},

     {(uint32 *)0x0390a9c0, 0xaa000007, 0x2a000007},
     {(uint32 *)0x0390a9c4, 0xe1530005, 0xe1330005},

     {(uint32 *)0x0390a9dc, 0xeb000035, 0xeafc30cf},

     {(uint32 *)0x0390a9e8, 0xaa000007, 0x2a000007},
     {(uint32 *)0x0390a9ec, 0xe1530004, 0xe1330004},

     {(uint32 *)0x0390aa04, 0xeb00002b, 0xeafc30cd},

     {(uint32 *)0x0390aa20, 0xaa000006, 0x2a000006},

     {(uint32 *)0x0390aa54, 0xe1520005, 0xe1320005},

     {(uint32 *)0x0390aa64, 0x1b00014b, 0x1afc30bd},
     {(uint32 *)0x0390aa68, 0xe1520004, 0xe1320004},

     {(uint32 *)0x0390aa78, 0x1b000146, 0x1afc30c0},

     {(uint32 *)0x0390aa84, 0xaa000006, 0x2a000006},

     {(uint32 *)0,0,0}
  };

  return WMTBpatches370;
}
