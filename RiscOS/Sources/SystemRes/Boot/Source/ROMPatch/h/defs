
/* defs.h */

#define Debug 0
#define ReallyDoRemap 1

/* exit code on error */
#define ErrorReturnCode 257

/* Caution! these defs are valid for RISC OS 3.60, 3.70, 3.71. Make
   sure valid for all ROM versions supported by given release of ROMPatch.
   Note that only 4Mb ROMs currently supported. */

#define CAMstart              0x1e02000  /* soft CAM */
#define PageFlags_Unavailable    0x2000  /* flag bit in CAM PPL word */

#define L1PT                  0x2c0c000  /* MMU level 1 page table */
#define ROMstart              0x3800000
#define ROMphysstart                0x0
#define ROMsize                0x400000  /* code assumes 4Mb in various places */

#define ROMsections (ROMsize >> 20) /*  1M MMU sections      */
#define ROMlpages   (ROMsize >> 16) /* 64k MMU large pages   */
#define ROMpages    (ROMsize >> 12) /*  4k MMU (small) pages */

typedef unsigned char uint8;
typedef unsigned int uint32;

typedef struct
{
  uint32 logaddr;
  uint32 PPL;     /* 'page protection level' - protection and flags */
} camentry_t;

/* for logical to physical address translation, via OS_Memory */
typedef struct
{
  uint32 pagenumber;
  uint32 logaddr;
  uint32 physaddr;
} osmemoryblock_t;

/* one entry of patch list */
typedef struct
{
  uint32 *logaddr;
  uint32 oldval;
  uint32 newval;
} patchentry_t;

/* layout of the data in module, to be set by C */
typedef struct
{
  uint32 nextpageneeded;     /* next page number needed to grow area */
  uint32 firstpagenotneeded; /* first page number not needed (determines fully grown) */
  uint32 DAN;                /* dynamic area number */
  uint32 kernL1PT;           /* address of kernel L1PT entries for ROM */
  uint32 L1PTentries[4];     /* 'unpatch' values of the 4 entries */
} moduledata_t;

/* procedure that returns list of patches
     - patch list terminated by {0,0,0} entry
     - returning NULL means no patches (allows conditional patches)
     - handle is abstract value for passing any data
     - proc must be capable of being called more than once */
typedef patchentry_t * (*patchlist_proc)(void *handle);

/* one entry of list of recognised ROMs */
typedef struct
{
  uint32         *romcrc;      /* ROM checksum and CRC's */
  int            writeprotect; /* whether ROM supports ROM-space write protection */
  char           *patchname;   /* for dynamic Area */
  patchlist_proc *patchlist;   /* list of patch applier procs, terminated by NULL */
} ROMentry_t;
