
; s.asmutils

XOS_EnterOS      * &20016
I_bit            * &8000000 ;interrupt disable

        AREA    |main|, CODE, READONLY

        EXPORT |svcarmid|
        EXPORT |svccopy|
        EXPORT |svcpeek|
        EXPORT |svcpoke|
        EXPORT |svcsetROML1PT|

        IMPORT |myflush|

; uint32 svcarmid(void)
svcarmid
        SWI     XOS_EnterOS
        MRC     p15,0,r0,c0,c0,0
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svccopy(uint32 *src,uint32 *dest,int bytes)
svccopy
        SWI     XOS_EnterOS
copyloop
        LDR     r3, [r0], #4
        STR     r3, [r1], #4
        SUBS    r2, r2, #4
        BNE     copyloop
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; uint32 svcpeek(uint32 *addr)
svcpeek
        SWI     XOS_EnterOS
        LDR     r0, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcpoke(uint32 *addr, uint32 val)
svcpoke
        SWI     XOS_EnterOS
        STR     r1, [r0]
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14

; void svcsetROML1PT(uint32 *L1PTaddr, uint32 *L1PTvals, int count)
svcsetROML1PT
        SWI     XOS_EnterOS
        STMFD   r13!,{r0-r4,r14}
        MOV     r4,pc
        ORR     r3,r4,#I_bit
        TEQP    r3,#0             ;disable interrupts
svcsetROML1PTloop
        LDR     r3, [r1], #4
        STR     r3, [r0], #4
        SUBS    r2, r2, #1
        BNE     svcsetROML1PTloop
        BL      myflush           ;flush cache(s) and TLB(s) without recourse to ROM
        TEQP    r4,#0             ;restore IRQ state
        MOV     r0, r0
        LDMFD   r13!,{r0-r4,r14}
        TEQP    pc, #0
        MOV     r0, r0
        MOVS    pc, r14
        END
