        GET     OS:Hdr.Macros
        GET     OS:Hdr.OS
        GET     OS:Hdr.Wimp

   ;Entry
   ;  R0 -> command line
   ;  R1 -> tail
   ;  R12 -> workspace
   ;  USR, IntOn

   ;Exit
   ;  R0?

        STMFD   SP!, {R1-R9,LR}

        ;Read size of next slot
        [       :DEF: TRACE
        SWI     XOS_WriteS
        =       "Next slot ", 0
        ALIGN
        BVS     finish
        ]

        MOV     R0, #-1
        MOV     R1, #-1
        SWI     XWimp_SlotSize
        BVS     finish
        MOV     R5, R1
; R5 = size of next slot

        [       :DEF: TRACE
        MOV     R0, R1
        MOV     R1, R12
        MOV     R2, #1024
        SWI     XOS_BinaryToDecimal
        BVS     finish

        MOV     R0, R1
        MOV     R1, R2
        SWI     XOS_WriteN
        BVS     finish
        SWI     XOS_NewLine
        BVS     finish
        ]

        ;Read size of application workspace
        [       :DEF: TRACE
        SWI     XOS_WriteS
        =       "Application workspace ", 0
        ALIGN
        BVS     finish
        ]

        MOV     R0, #14
        MOV     R1, #0
        MOV     R2, #0
        MOV     R3, #0
        SWI     XOS_ChangeEnvironment
        BVS     finish
        MOV     R4, R1
; R4 = application workspace size

        [       :DEF: TRACE
        MOV     R0, R1
        MOV     R1, R12
        MOV     R2, #1024
        SWI     XOS_BinaryToDecimal
        BVS     finish

        MOV     R0, R1
        MOV     R1, R2
        SWI     XOS_WriteN
        BVS     finish
        SWI     XOS_NewLine
        BVS     finish
        ]

        ;Read current size of free pool
        [       :DEF: TRACE
        SWI     XOS_WriteS
        =       "Free pool ", 0
        ALIGN
        BVS     finish
        ]

        MOV     R0, #6
        SWI     XOS_ReadDynamicArea
        BVS     finish

        [       :DEF: TRACE
        MOV     R0, R1
        MOV     R1, R12
        MOV     R2, #1024
        SWI     XOS_BinaryToDecimal
        BVS     finish

        MOV     R0, R1
        MOV     R1, R2
        SWI     XOS_WriteN
        BVS     finish
        SWI     XOS_NewLine
        BVS     finish
        ]

        ;Grow free pool to the difference
        MOV     R0, #6
        SUB     R1, R4, R5
        SWI     XOS_ChangeDynamicArea
        BVS     finish

        [       :DEF: TRACE
        ;Read new size of free pool
        SWI     XOS_WriteS
        =       "Free pool ", 0
        ALIGN
        BVS     finish

        MOV     R0, #6
        SWI     XOS_ReadDynamicArea
        BVS     finish

        MOV     R0, R1
        MOV     R1, R12
        MOV     R2, #1024
        SWI     XOS_BinaryToDecimal
        BVS     finish

        MOV     R0, R1
        MOV     R1, R2
        SWI     XOS_WriteN
        BVS     finish
        SWI     XOS_NewLine
        BVS     finish
        ]

        ClrV
finish
        LDMFD   SP!, {R1-R9,PC}^

        END
