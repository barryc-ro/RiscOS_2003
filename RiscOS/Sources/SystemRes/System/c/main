/*
 * SysPaths
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 *
 * This application code will ensure that Boot$OSVersion is set correctly
 * (without a dot in the version number) and will setup Sys$Path to be
 * a canonical version of "<System$Dir>.", and will set System$Path to refer
 * to all appropriate numeric subdirectories of <System$Dir> (in descending order)
 * with <System$Dir>. as the final path component.
 *
 *
 * History:
 *
 * 04-Oct-1999   SBrodie   Rewrote this utility without OS_GBPB misuse bug.
 *
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "RMVersion.h"

#define ENTRY_LIMIT 256 /* Number of path elements we can cope with. */

static int directories[ENTRY_LIMIT];

/* Auxiliary comparison function for qsort - requires that the entries
 * are in order highest to lowest.
 */
static int qsort_aux(const void *v0, const void *v1)
{
        const int *i0 = v0;
        const int *i1 = v1;

        return *i1 - *i0;
}


/* Construct System$Path by examining the objects inside !System which are
 * entirely numeric in nature
 */
static void build_system_path(const char *basedir, int version)
{
        static char buffer[BUFSIZ];
        size_t bufsize = sizeof(buffer) - 32; /* Allow safety margin */
        char *buf;
        int entry_count = 0;
        int context = 0;

        while (context != -1) {
                char *buf = buffer;
                int count;
                if (_swix(OS_GBPB, _INR(0,6)|_OUTR(3,4),
                        9, basedir, buffer, 256, context, bufsize, 0,
                        &count, &context)) break;

                while (count-- > 0 && entry_count < ENTRY_LIMIT) {
                        int buflen = strlen(buf), v, n;
                        /* Process name pointed to by 'buf' */
                        sscanf(buf, "%d%n", &v, (n = -1, &n));
                        if (n == buflen && v <= version) {
                                directories[entry_count++] = v;
                        }
                        buf += buflen + 1;
                }
        }

        if (entry_count > 1) {
                qsort(directories, entry_count, sizeof(*directories), qsort_aux);
        }


        buf = buffer;
        *buf = '\0';

        for (context=0; context<entry_count; ++context) {
                const size_t length = sprintf(buf, "Sys:%d.,", directories[context]);
                buf += length;
                if (length > bufsize) break; /* overflow - oh dear */
                bufsize -= length;
        }

        sprintf(buf, "%s.", basedir);
        _kernel_setenv("System$Path", buffer);
}

static int syspaths_os_version(void)
{
        static char os_version[16];
        const char *bootosversion;
        unsigned int version, n;

        bootosversion = getenv("Boot$OSVersion");
        if (!bootosversion) {
                if (rmversion(rmversion_ROM, "UtilityModule", &version)) return 0;
                sprintf(os_version, "%X0", version >> 4);
        }
        else {
                /* Remove unnecessary dots. ie. turn "3.50" into "350" */
                char *dst = os_version;
                const char *eodst = os_version + sizeof(os_version) - 1;
                while (*bootosversion && dst < eodst) {
                        if ((*dst++ = *bootosversion++) == '.') {
                                --dst;
                        }
                }
                *dst = '\0';
        }

        _kernel_setenv("Boot$OSVersion", os_version);
        sscanf (os_version, "%u%n", &version, (n = -1, &n));
        if (n == strlen(os_version)) {
                return version;
        }
        else {
                return 0;
        }
}

static const char *syspaths_system_dir(void)
{
        static char system_dir[BUFSIZ];
        size_t length;

        if (_kernel_getenv("System$Dir", system_dir, sizeof(system_dir))) {
                return 0;
        }
        length = strlen(system_dir);
        system_dir[length] = '.';
        system_dir[length+1] = '\0';
        _kernel_setenv("Sys$Path", system_dir);
        system_dir[length] = '\0';

        return system_dir;
}

int main(void)
{
        const char *basedir = syspaths_system_dir();
        const int version   = syspaths_os_version();

        if (basedir && version) {
                build_system_path(basedir, version);
        }

        return 0;
}
