; Title:   s.ddeutils
; Purpose: Assembler source for DDEUtils module
; Author:
; History: Used to live on Aquarius SrcFiler
;
r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
r10             RN      10
r11             RN      11
r12             RN      12
r13             RN      13
r14             RN      14
r15             RN      15

sl              RN      10
fp              RN      11
ip              RN      12
sp              RN      13

lr              RN      14
pc              RN      15

                GBLL    BOMB
BOMB            SETL    {FALSE}

os_writec       EQU     0
os_writes       EQU     1
os_write0       EQU     2
os_newline      EQU     3

xos_module      EQU     &2001e
xos_claim       EQU     &2001f
xos_release     EQU     &20020
xos_changeenvironment EQU &20040
xos_enteros     EQU     &20016
os_exit         EQU     &11
os_generateerror EQU    &2b
xwimp_readsysinfo EQU   &600f2
xwimp_sendmessage EQU   &600e7
xos_setvarval   EQU     &20024
xos_word        EQU     &20007
os_converthex8  EQU     &d4

zp_wimpdomain   EQU     &ff8

n_module_claim  EQU     6
n_module_free   EQU     7

n_filev         EQU     &08
n_gbpbv         EQU     &0c
n_findv         EQU     &0d
n_fscontrolv    EQU     &0f

n_error_h       EQU     6
n_exit_h        EQU     11

ddeutils_swibase             EQU    &42580
ddeutils_prefix              EQU    0               ; + ddeutils_swibase
ddeutils_setclsize           EQU    1
ddeutils_setcl               EQU    2
ddeutils_getclsize           EQU    3
ddeutils_getcl               EQU    4
ddeutils_throwbackregister   EQU    5
ddeutils_throwbackunregister EQU    6
ddeutils_throwbackstart      EQU    7
ddeutils_throwbacksend       EQU    8
ddeutils_throwbackend        EQU    9

reason_processing            EQU    0
reason_errordetails          EQU    1
reason_infodetails           EQU    2

overflow        EQU     &10000000
carry           EQU     &20000000

ddeutils_errbase    EQU &20600
unk_swi_error       EQU ddeutils_errbase + 0
no_cli_buffer_error EQU ddeutils_errbase + 1
not_desktop_error   EQU ddeutils_errbase + 2
no_task_error       EQU ddeutils_errbase + 3
already_reg_error   EQU ddeutils_errbase + 4
not_reg_error       EQU ddeutils_errbase + 5

ddeutils_msgbase             EQU ddeutils_swibase
ddeutils_msgbase_h           EQU &42000
ddeutils_msgbase_l           EQU &580
msg_throwback_start          EQU 0               ; + ddeutils_msgbase
msg_throwback_processingfile EQU 1
msg_throwback_errorsin       EQU 2
msg_throwback_errordetails   EQU 3
msg_throwback_end            EQU 4
msg_throwback_infoforfile    EQU 5
msg_throwback_infodetails    EQU 6

service_reset         EQU &27
service_wimpclosedown EQU &53

o_next          EQU     &00
o_wimpdomain    EQU     &04
o_prefix        EQU     &08

                IMPORT  |__RelocCode|

                AREA    |!|, CODE, READONLY

module_start    EQU     .

                DCD     0                         ; Run
                DCD     init - module_start       ; Init
                DCD     finish - module_start     ; Finish
                DCD     service - module_start    ; Service call
                DCD     title - module_start      ; Title
                DCD     help - module_start       ; Help
                DCD     cmd_table - module_start  ; *commands
                DCD     ddeutils_swibase          ; SWI Base
                DCD     do_swi - module_start     ; SWI Handler
                DCD     swi_table - module_start  ; SWI Table
                DCD     0

title           DCB     "DDEUtils", 0

help            DCB     "DDEUtils", 9
                DCB     "1.55 (10 Aug 1998)", 0

swi_table       DCB     "DDEUtils", 0
                DCB     "Prefix", 0
                DCB     "SetCLSize", 0
                DCB     "SetCL", 0
                DCB     "GetCLSize", 0
                DCB     "GetCl", 0
                DCB     "ThrowbackRegister", 0
                DCB     "ThrowbackUnRegister", 0
                DCB     "ThrowbackStart", 0
                DCB     "ThrowbackSend", 0
                DCB     "ThrowbackEnd", 0
                DCB     0

cmd_table       DCB     "Prefix", 0
                ALIGN
                DCD     prefix_cmd - module_start
                DCB     0                          ; Min. parameters
                DCB     1                          ; GSTrans map
                DCB     1                          ; Max. parameters
                DCB     0                          ; Flags
                DCD     prefix_syn - module_start  ; Syntax message
                DCD     prefix_help - module_start ; Help message
                DCD     0                          ; End of command table

prefix_help     DCB     "*Prefix selects a directory as the current directory unique to the currently executing task. *Prefix with no arguments sets the current directory back to the systemwide default (as set with *Dir).", 13

prefix_syn      DCB     "Syntax: *Prefix [<directory>]", 0
                ALIGN

;Ursula format
;
                ASSERT  service_reset < service_wimpclosedown
;
UServTab
                DCD     0                              ;flags
                DCD     UService - module_start
                DCD     service_reset
                DCD     service_wimpclosedown
                DCD     0                              ;terminator
                DCD     UServTab - module_start        ;anchor
service
                MOV     r0,r0                          ;magic instruction
                TEQ     r1, #service_reset
                TEQNE   r1, #service_wimpclosedown
                MOVNES  pc,lr
UService
                TEQ     r1, #service_reset
                BEQ     recover_from_reset
                CMP     r0, #0
                MOVNES  pc, lr
                STMDB   sp!, {r0, r1, r2, r11, lr}
                LDR     r11, [r0, #zp_wimpdomain]
service1        LDR     r2, [r12]
                CMP     r2, #0
                LDMEQIA sp!, {r0, r1, r2, r11, pc}^
                LDR     r1, [r2, #o_wimpdomain]
                CMP     r1, r11
                MOVNE   r12, r2
                BNE     service1
                LDR     r0, [r2]
                STR     r0, [r12]
                MOV     r0, #n_module_free
                SWI     xos_module
                B       service1

recover_from_reset
                STMDB   sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
                LDR     r2, [r12]
                MOV     r1, #0
                STR     r1, [r12]
recover_from_reset1
                CMP     r2, #0
                BEQ     recover_from_reset2
                LDR     r5, [r2]
                MOV     r0, #n_module_free
                SWI     xos_module
                MOV     r2, r5
                BVC     recover_from_reset1
recover_from_reset2
                BL      init
                LDMIA   sp!, {r0, r1, r2, r3, r4, r5, r6, pc}^

filetype_fd3    DCB     "File$Type_FD3", 0
debimage        DCB     "DebImage", 0
runtype_fd3     DCB     "Alias$@RunType_FD3", 0
debugaif        DCB     "DebugAIF %*0", 0
loadtype_fd3    DCB     "Alias$@LoadType_FD3", 0
loadaif         DCB     "Load %0 8000", 0
filetype_fe1    DCB     "File$Type_FE1", 0
makefile        DCB     "Makefile", 0
runtype_fe1     DCB     "Alias$@RunType_FE1", 0
make            DCB     "DDE:!Make %*0", 0
prefix_dir      DCB     "Prefix$Dir", 0
                ALIGN
n_vartype_code  EQU     16

init            STMDB   sp!, {r7, r8, r9, r10, r11, lr}
                [ BOMB
                BL      time_bomb
                |
                BL      |__RelocCode|
                ]
                STR     r12, prefix_r12
                ADR     r0, filetype_fd3
                ADR     r1, debimage
                BL      initvar
                ADR     r0, runtype_fd3
                ADR     r1, debugaif
                BL      initvar
                ADR     r0, loadtype_fd3
                ADR     r1, loadaif
                BL      initvar
                ADR     r0, filetype_fe1
                ADR     r1, makefile
                BL      initvar
                ADR     r0, runtype_fe1
                ADR     r1, make
                BL      initvar
                MOV     r2, r12
                MOV     r0, #n_filev
                ADR     r1, file_handler
                SWI     xos_claim
                MOVVC   r0, #n_gbpbv
                ADRVC   r1, gbpb_handler
                SWIVC   xos_claim
                MOVVC   r0, #n_findv
                ADRVC   r1, find_handler
                SWIVC   xos_claim
                MOVVC   r0, #n_fscontrolv
                ADRVC   r1, fscontrol_handler
                SWIVC   xos_claim
                MOVVC   r0, #n_module_claim
                MOVVC   r3, #256
                SWIVC   xos_module
                STRVC   r2, fname_buffer
                ADRVC   r0, prefix_dir
                ADRVC   r1, prefix_dir_code
                MOVVC   r2, #prefix_dir_code_end - prefix_dir_code
                MOVVC   r3, #0
                MOVVC   r4, #n_vartype_code
                SWIVC   xos_setvarval
                LDMIA   sp!, {r7, r8, r9, r10, r11, lr}
xferv           ORRVS   lr, lr, #overflow
                MOVS    pc, lr

prefix_dir_code B       dir_code_write
                STMDB   sp!, {r11, r12, lr}
                LDR     r12, prefix_r12
                MOV     r11, #0
                LDR     r11, [r11, #zp_wimpdomain]
dir_code1       LDR     r2, [r12]
                CMP     r2, #0
                LDMEQIA sp!, {r11, r12, pc}^
                LDR     r1, [r2, #o_wimpdomain]
                CMP     r1, r11
                MOVNE   r12, r2
                BNE     dir_code1
                ADD     r0, r2, #o_prefix
                MOV     r2, #0
                MOV     r1, r0
dir_code2       LDRB    r11, [r1], #1
                CMP     r11, #' '+1
                ADDCS   r2, r2, #1
                BCS     dir_code2
                LDMIA   sp!, {r11, r12, pc}^
dir_code_write  STMDB   sp!, {r0, lr}
                MOV     r0, r1
                SWI     ddeutils_swibase + ddeutils_prefix
                LDMIA   sp!, {r0, pc}^
prefix_r12      DCD     0
prefix_dir_code_end

finish          MOV     r6, lr
                MOV     r0, #n_module_free
                LDR     r2, fname_buffer
                CMP     r2, #0
                SWINE   xos_module
                LDR     r2, cli_buffer
                CMP     r2, #0
                SWINE   xos_module
                LDR     r2, [r12]
                MOV     r1, #0
                STR     r1, [r12]
                STR     r1, fname_buffer
                STR     r1, cli_buffer
                STR     r1, cli_size
                STR     r1, receiver_id
finish1         CMP     r2, #0
                BEQ     finish2
                LDR     r5, [r2]
                MOV     r0, #n_module_free
                SWI     xos_module
                MOV     r2, r5
                BVC     finish1
finish2         MOV     r2, r12
                MOV     r0, #n_filev
                ADR     r1, file_handler
                SWI     xos_release
                MOV     r0, #n_gbpbv
                ADR     r1, gbpb_handler
                SWI     xos_release
                MOV     r0, #n_findv
                ADR     r1, find_handler
                SWI     xos_release
                MOV     r0, #n_fscontrolv
                ADR     r1, fscontrol_handler
                SWI     xos_release
                MOVS    pc, r6

fname_buffer    DCD     0
cli_buffer      DCD     0
cli_size        DCD     0

do_swi          CMP     r11, #ddeutils_prefix
                BNE     cli_swi
                MOV     r10, r0
                STMDB   sp!, {r1, r2, r3, lr}
                LDR     r11, [r11, #zp_wimpdomain]
do_swi1         LDR     r2, [r12]
                CMP     r2, #0
                BEQ     do_swi2
                LDR     r1, [r2, #o_wimpdomain]
                CMP     r1, r11
                MOVNE   r12, r2
                BNE     do_swi1
                LDR     r0, [r2]
                STR     r0, [r12]
                MOV     r0, #n_module_free
                SWI     xos_module
                BVC     do_swi1
                LDMIA   sp!, {r1, r2, r3, lr}
                ORRS    pc, lr, #overflow
do_swi2         MOVS    r0, r10
                LDMEQIA sp!, {r1, r2, r3, pc}^
                LDRB    r1, [r0]
                CMP     r1, #' ' + 1
                LDMCCIA sp!, {r1, r2, r3, pc}^
                MOV     r3, #0
do_swi3         LDRB    r1, [r0], #1
                ADD     r3, r3, #1
                CMP     r1, #' ' + 1
                BCS     do_swi3
                ADD     r3, r3, #o_prefix
                MOV     r0, #n_module_claim
                SWI     xos_module
                LDMVSIA sp!, {r1, r2, r3, lr}
                ORRVS   pc, lr, #overflow
                STR     r2, [r12]
                MOV     r0, #0
                STR     r0, [r2], #4
                STR     r11, [r2], #4
                MOV     r0, r10
do_swi4         LDRB    r1, [r10], #1
                STRB    r1, [r2], #1
                CMP     r1, #' ' + 1
                MOVCS   r3, r1
                BCS     do_swi4
                CMP     r3, #'.'
                STREQB  r1, [r2, #-2]
                LDMIA   sp!, {r1, r2, r3, pc}^

strip_hats      ORR     lr, lr, #carry
                B       strip_hats0

; Entry: VC
;        R1  = Filename
;        R11 = Filename buffer
;        R12 = Task block
; Exit:  R11, LR = ???
;        R1  = Preserved
;        R11 = Preserved
;        R12 = New Filename (R1 or R11 on entry)
;        CS => No prefix added (filename contained root char)
add_prefix      ORR     lr, lr, #carry
add_prefix0     STMDB   sp!, {r0, r1, r2, r3, r4, lr}
;                SWI     os_writes
;                DCB     "Before add_prefix: ", 0
;                MOV     r2, r1
;write_name0     LDRB    r0, [r2], #1
;                CMP     r0, #' '+1
;                SWICS   os_writec
;                CMP     r0, #' '+1
;                BCS     write_name0
;                SWI     os_newline
                MOV     r2, r1
add_prefix1     LDRB    r0, [r2], #1
                CMP     r0, #':'
                CMPNE   r0, #'$'
                CMPNE   r0, #'&'
                CMPNE   r0, #'%'
                CMPNE   r0, #'<'
                MOVEQ   r12, r1
                BEQ     add_prefix5
                CMP     r0, #' ' + 1
                BCS     add_prefix1
                MOV     r2, r1
                LDRB    r0, [r2]
                CMP     r0, #'@'
                BNE     add_prefix2
                LDRB    r0, [r2, #1]!
                CMP     r0, #'.'
                ADDEQ   r2, r2, #1
add_prefix2     MOV     r3, r11
                ADD     r12, r12, #o_prefix
add_prefix3     LDRB    r0, [r12], #1
                CMP     r0, #' ' + 1
                STRCSB  r0, [r3], #1
                BCS     add_prefix3
                LDRB    r0, [r2]
                CMP     r0, #' ' + 1
                MOVCS   r0, #'.'
                STRCSB  r0, [r3], #1
add_prefix4     LDRB    r0, [r2], #1
                CMP     r0, #' ' + 1
                MOVCC   r0, #0
                STRB    r0, [r3], #1
                BCS     add_prefix4
                MOV     r12, r11
;                SWI     os_writes
;                DCB     "After add_prefix: ", 0
;                MOV     r2, r12
;write_name1     LDRB    r0, [r2], #1
;                CMP     r0, #' '+1
;                SWICS   os_writec
;                CMP     r0, #' '+1
;                BCS     write_name1
;                SWI     os_newline
                LDMIA   sp!, {r0, r1, r2, r3, r4, lr} ; FIXME
                BICS    lr, lr, #carry
strip_hats0     STMDB   sp!, {r0, r1, r2, r3, r4, lr}
add_prefix5     MOV     r2, r12
                MOV     r1, r11
                MOV     r3, r1
                MOV     r4, r3
add_prefix6     LDRB    r0, [r2], #1
                STRB    r0, [r1], #1
                CMP     r0, #'.'
                LDREQB  lr, [r2]
                CMPEQ   lr, #'^'
                BNE     add_prefix9
                LDRB    lr, [r3]
                CMP     lr, #'$'
                CMPNE   lr, #'@'
                CMPNE   lr, #'%'
                CMPNE   lr, #'&'
                CMPNE   lr, #'<'
                CMPNE   lr, #'^'
                MOVEQ   r0, #'!'        ; R0 > ' ' and != '.'
                BEQ     add_prefix9
add_prefix7     LDRB    lr, [r2], #1
                CMP     lr, #'.'
                CMPNE   lr, #' '
                BHI     add_prefix7
                SUB     r2, r2, #1
                CMP     r3, r4
                STREQB  lr, [r3]
add_prefix8     LDRB    lr, [r2], #1
                STRNEB  lr, [r3], #1
                CMP     lr, #' '
                BHI     add_prefix8
                MOV     r12, r11
                LDMIA   sp!, {r0, r1, r2, r3, r4, lr} ; FIXME
                BICS    lr, lr, #carry
                STMDB   sp!, {r0, r1, r2, r3, r4, lr}
                B       add_prefix5
add_prefix9     CMP     r0, #':'
                MOVEQ   r4, r1
                MOVEQ   r3, r1
                CMP     r0, #'.'
                SUBEQ   r3, r1, #1
                CMP     r0, #' '
                BHI     add_prefix6
                [ 0 = 1
                SWI     os_writes
                DCB     "After stripping ^s ", 0
                SWI     os_newline
                MOV     r2, r12
write_name1     LDRB    r0, [r2], #1
                CMP     r0, #' '+1
                SWICS   os_writec
                CMP     r0, #' '+1
                BCS     write_name1
                SWI     os_newline
                ]
                LDMIA   sp!, {r0, r1, r2, r3, r4, pc}^

find_handler    CMP     r0, #&40
                MOVCCS  pc, lr
                B       file_handler

gbpb_handler    CMP     r0, #9
                MOVCCS  pc, lr
                CMP     r0, #13
                MOVCSS  pc, lr

file_handler    STMDB   sp!, {r11, lr}
file_handler1   LDR     r12, [r12]
                CMP     r12, #0
                BEQ     file_handler2
                MOV     lr, #0
                LDR     lr, [lr, #zp_wimpdomain]
                LDR     r11, [r12, #o_wimpdomain]
                CMP     r11, lr
                BNE     file_handler1
                LDR     r11, fname_buffer
                BL      add_prefix
file_handler3   LDMIA   sp!, {r11, lr}
                STRCC   r1, [sp, #-4]!
                MOVCC   r1, r12
                STRCC   pc, [sp, #-4]!   ;store PC+8 (Architecture 4) or PC+12
                MOVS    pc, lr
                NOP                      ;so that PC+8 is ok

file_upcall     LDMIA   sp!, {r1, lr}    ;target of stored PC
                BIC     lr, lr, #carry
                ORRCS   lr, lr, #carry
                B       xferv

file_handler2   LDR     r11, fname_buffer
                MOV     r12, r1
                BL      strip_hats
                B       file_handler3

fscontrol_handler
                CMP     r0, #25
                BCC     fscontrol_handler1
                CMP     r0, #27
                BCC     copy_or_rename
                CMPNE   r0, #28
                CMPNE   r0, #32
                CMPNE   r0, #37
                BEQ     file_handler
                MOVS    pc, lr
fscontrol_handler1
                CMP     r0, #5
                CMPNE   r0, #6
                CMPNE   r0, #9
                CMPNE   r0, #24
                BEQ     file_handler
                MOVS    pc, lr

copy_or_rename  STMDB   sp!, {r1, r2}
                STMDB   sp!, {r9, r10, r11, lr, pc}  ;PC saved just as a placeholder here
                STR     pc, [sp, #16]                ;store PC+8 (Architecture 4) or PC+12
                B       copy_or_rename1
                NOP                                  ;so that PC+8 is ok

copy_or_rename_upcall                                ;target of stored PC
                LDMIA   sp!, {r1, r2, lr}
                BIC     lr, lr, #carry
                ORRCS   lr, lr, #carry
                B       xferv

copy_or_rename1 LDR     r12, [r12]
                CMP     r12, #0
                BEQ     copy_or_rename2
                LDMEQIA sp!, {r9, r10, r11, lr}
                ADDEQ   sp, sp, #12
                MOVEQS  pc, lr
                MOV     lr, #0
                LDR     lr, [lr, #zp_wimpdomain]
                LDR     r11, [r12, #o_wimpdomain]
                CMP     r11, lr
                BNE     copy_or_rename1
                LDR     r11, fname_buffer
                MOV     r9, r12
                BL      add_prefix
                MOV     r10, r12
                MOV     r12, r9
                ADD     r11, r11, #128
                MOV     r9, r1
                MOV     r1, r2
                BL      add_prefix0
copy_or_rename3 MOV     r1, r9
                MOVCC   r2, r12
                MOVCC   r1, r10
                LDMIA   sp!, {r9, r10, r11, lr}
                ADDCS   sp, sp, #12
                MOVS    pc, lr

copy_or_rename2 LDR     r11, fname_buffer
                MOV     r12, r1
                BL      strip_hats
                MOV     r10, r12
                ADD     r11, r11, #128
                MOV     r9, r1
                MOV     r12, r2
                BL      strip_hats0
                B       copy_or_rename3

cli_swi         CMP     r11, #ddeutils_setcl
                BEQ     setcl
                BCC     setclsize
                CMP     r11, #ddeutils_getcl
                BEQ     getcl
                BCS     throwback_swi

getclsize       LDR     r0, cli_size
                MOVS    pc, lr

getcl           LDR     r11, cli_buffer
                CMP     r11, #0
                MOV     r12, #0
                STREQB  r12, [r0]
                MOVEQS  pc, lr
                STMDB   sp!, {r2, lr}
                STR     r12, cli_buffer
                STR     r12, cli_size
                MOV     r2, r11
                MOV     r12, r0
getcl1          LDRB    r10, [r11], #1
                STRB    r10, [r0], #1
                CMP     r10, #' '
                BCS     getcl1
                MOV     r10, #0
                STRB    r10, [r0, #-1]
                MOV     r0, #n_module_free
                SWI     xos_module
                MOVVC   r0, r12
                LDMIA   sp!, {r2, lr}
                B       xferv

setclsize       STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, r0
                LDR     r2, cli_buffer
                CMP     r2, #0
                MOVNE   r0, #n_module_free
                SWINE   xos_module
                LDMVSIA sp!, {r1, r2, r3, lr}
                ORRVSS  pc, lr, #overflow
                [ 0 = 1
                CMP     r3, #0
                LDMEQIA sp!, {r1, r2, r3, pc}^
                ]
                MOV     r0, #n_module_claim
                SWI     xos_module
                STRVC   r2, cli_buffer
                STRVC   r3, cli_size
                MOVVC   r0, r2
                LDMIA   sp!, {r1, r2, r3, lr}
                B       xferv

no_cli_buffer_msg
                DCD     no_cli_buffer_error
                DCB     "CLI buffer not set", 0

setcl           LDR     r11, cli_buffer
                CMP     r11, #0
                ADREQ   r0, no_cli_buffer_msg
                ORREQS  pc, lr, #overflow
                STMDB   sp!, {r0, lr}
setcl1          LDRB    r10, [r0], #1
                STRB    r10, [r11], #1
                CMP     r10, #' '
                BCS     setcl1
                LDMIA   sp!, {r0, pc}^

prefix_cmd      MOV     r6, lr
                SWI     ddeutils_prefix + ddeutils_swibase
                MOVS    pc, r6

unk_swi_msg     DCD     unk_swi_error
                DCB     "Unknown DDEUtils SWI", 0
                ALIGN

not_desktop_msg DCD     not_desktop_error
                DCB     "Throwback not available outside the desktop", 0
                ALIGN

no_task_msg     DCD     no_task_error
                DCB     "No task registered for throwback", 0
                ALIGN

already_reg_msg DCD     already_reg_error
                DCB     "Another task is registered for throwback", 0
                ALIGN

not_reg_msg     DCD     not_reg_error
                DCB     "Task not registered for throwback", 0
                ALIGN

receiver_id     DCD     0

; SNB 10/08/98: R4 now stacked to preserve it over a SWI call
throwback_swi   CMP     r11, #ddeutils_throwbackend + 1
                ADRCS   r0, unk_swi_msg
                ORRCSS  pc, lr, #overflow
                STMDB   sp!, {r0, r1, r2, r3, r4, r9, lr}
                MOV     r10, r0
                MOV     r0, #0
                SWI     xwimp_readsysinfo
                MOVVS   r0, #0
                CMP     r0, #0
                LDMEQIA sp!, {r0, r1, r2, r3, r4, r9, lr}
                ADREQ   r0, not_desktop_msg
                ORREQS  pc, lr, #overflow
                LDR     r0, [sp]
                LDR     r9, receiver_id
                CMP     r11, #ddeutils_throwbackunregister
                BCC     throwbackregister
                BEQ     throwbackunregister
                CMP     r9, #0
                LDMEQIA sp!, {r0, r1, r2, r3, r4, r9, lr}
                ADREQ   r0, no_task_msg
                ORREQS  pc, lr, #overflow
                CMP     r11, #ddeutils_throwbacksend
                BCC     throwbackstart
                BEQ     throwbacksend

throwbackend    MOV     r0, #msg_throwback_end
startorendmsg   MOV     r1, #0                  ; No string
stringonlymsg1  MVN     r3, #0                  ; No line no.
                MVN     r4, #0                  ; No error level
                BL      sendmessage
throwback_vsret ADDVS   sp, sp, #4
                LDRVC   r0, [sp], #4
                LDMIA   sp!, {r1, r2, r3, r4, r9, lr}
                B       xferv

stringonlymsg   STMDB   sp!, {r0, r1, r2, r3, r4, r9, lr}
                B       stringonlymsg1

throwback_err   DCB     "Throwback error", 13, 10, 0
                ALIGN

throwbackregister
                CMP     r9, #0
                LDMIA   sp!, {r0, r1, r2, r3, r4, r9, lr}
                ADRNE   r0, already_reg_msg
                ORRNES  pc, lr, #overflow
                STR     r0, receiver_id
                MOVS    pc, lr

throwbackunregister
                CMP     r9, r10
                LDMIA   sp!, {r0, r1, r2, r3, r4, r9, lr}
                ADRNE   r0, not_reg_msg
                ORRNES  pc, lr, #overflow
                MOVS    r10, #0
                STR     r10, receiver_id
                MOVS    pc, lr

throwbackstart  MOV     r0, #msg_throwback_start
                B       startorendmsg

throwback_add_prefix
                STMDB   sp!, {lr}
                MOV     r1, r2
                BL      file_handler
                STMDB   sp!, {r0, r3, r4}
                MOV     lr, r0
                CMP     lr, #reason_infodetails
                MOVEQ   r0, #msg_throwback_infoforfile
                CMP     lr, #reason_processing
                MOVEQ   r0, #msg_throwback_processingfile
                CMP     lr, #reason_errordetails
                MOVEQ   r0, #msg_throwback_errorsin
                BL      stringonlymsg
                LDRVC   r0, [sp], #4
                ADDVS   sp, sp, #4
                LDMIA   sp!, {r3, r4}
                BVS     throwback_add_prefix1
                CMP     r0, #reason_processing
                LDMEQIA sp!, {pc}^
                CMP     r0, #reason_infodetails
                MOVEQ   r0, #msg_throwback_infodetails
                MOVNE   r0, #msg_throwback_errordetails
                MOV     r1, r5
                BL      sendmessage
throwback_add_prefix1
                LDMIA   sp!, {lr}
                B       xferv

throwbacksend   BL      throwback_add_prefix
                B       throwback_vsret

                [ 1=0
hbuff           DCD     0, 0, 0
                ]

; R0 = message id
; R1 = string       0 => no string
; R3 = line no     -1 => no line no
; R4 = error level -1 => no errorlevel
sendmessage     STMDB   sp!, {lr}
                [ 1=0
                STMDB   sp!, {r0, r1, r2, r3}
                MOV     r3, r1
                SWI     os_writes
                DCB     4, "Message id = ", 0
                ADR     r1, hbuff
                MOV     r2, #12
                SWI     os_converthex8
                SWI     os_write0
                SWI     os_writes
                DCB     13, 10, 0
                MOV     r0, r3
                SWI     os_write0
                SWI     os_writes
                DCB     13, 10, 5, 0
                LDMIA   sp!, {r0, r1, r2, r3}
                ]
                MOV     r2, r1
                MOVS    lr, r1
                BEQ     sendmessage2
sendmessage1    LDRB    r2, [lr], #1
                CMP     r2, #0
                BNE     sendmessage1
                SUB     r2, lr, r1
sendmessage2    ADD     r2, r2, #31
                BIC     r2, r2, #3
                MOV     lr, sp
                SUB     sp, sp, r2
                STR     r2, [sp]
                ADD     r2, sp, #12
                STMDB   sp!, {lr}
                MOV     lr, #0
                STR     lr, [r2], #4
                ADD     r0, r0, #ddeutils_msgbase_l
                ADD     r0, r0, #ddeutils_msgbase_h
                STR     r0, [r2], #4
                CMN     r3, #1
                STRNE   r3, [r2], #4
                CMN     r4, #1
                STRNE   r4, [r2], #4
                CMP     r1, #0
                BEQ     sendmessage4
sendmessage3    LDRB    lr, [r1], #1
                STRB    lr, [r2], #1
                CMP     lr, #0
                BNE     sendmessage3
sendmessage4    MOV     r0, #17
                ADD     r1, sp, #4
                MOV     r2, r9
;               IDJ/NK 4-Jan-95: AQU-00756 - truncate if message text too long
                LDR     lr, [r1]   ; length of msg
                CMP     lr, #256
                MOVGT   lr, #256
                STRGT   lr, [r1]   ; 256 is max size of msg
                MOVGT   lr, #0
                STRGTB  lr, [r1, #255]
                SWI     xwimp_sendmessage
                LDR     sp, [sp]
                LDMIA   sp!, {lr}
                B       xferv

initvar         STMDB   sp!, {r4, lr}
                MOV     r3, r1
initvar1        LDRB    r2, [r3], #1
                CMP     r2, #' '
                BCS     initvar1
                SUB     r2, r3, r1
                MOV     r3, #0
                MOV     r4, #0
                SWI     xos_setvarval
                LDMIA   sp!, {r4, pc}^

                [ BOMB
time_dec91      DCD     &92a45cc9
                DCD     &43

time_now        DCD     3
                DCD     0

time_bomb       MOV     r7, lr
                MOV     r0, #14
                ADR     r1, time_now
                SWI     xos_word
                LDRB    r0, time_dec91 + 4
                LDRB    r1, time_now + 4
                CMP     r0, r1
                BCC     time_fail
                BNE     time_ok
                LDR     r0, time_dec91
                LDR     r1, time_now
                CMP     r0, r1
                BCC     time_fail
time_ok         BL      |__RelocCode|
                MOVS    pc, r7
time_fail       ADR     r0, time_msg
                LDMIA   sp!, {r7, r8, r9, r10, r11, lr}
                SWI     os_generateerror

time_msg        DCD     &840
                DCB     "Beta test expired, use product Desktop C or Desktop "
                DCB     "Assembler. Beta tools are no longer usable. Contact "
                DCB     "ISV support at Acorn for more details.", 0
                ALIGN
                ]

                END
