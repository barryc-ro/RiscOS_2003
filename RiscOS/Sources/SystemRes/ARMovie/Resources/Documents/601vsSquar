                 Size restoration
                 ----------------

Replay can now scale by 1:1, 5:4, 3:2 and 2:1. Using this permits nice
captures on PAL at 304 pixels captured restored to 380 by 5:4 scaling and
NTSC captures at 256 restored to 320 by 5:4 (and 256 PAL restored to 384 by
3:2). 304 can be restored to 320 (323) by 17:16 which is not available.

However, none of this restores the size of CIF data to a square pixel
computer graphics grid. Consider vertical scaling - 352x288 down to
352x264 or 352x240 up to 352x264 - but clearly the filtering problems of
a nice vertical scale rather than simply dropping or replicating lines is
very nasty (even though Replay can do it!). So its horizontally scale.

Close numbers for PAL are to scale by 35:32 (352 in, 385 out). And for NTSC
to scale by 29:32 (352 in, 319 out). Both only one pixel wrong. Doing this
in software with any degree of accuracy looks horrible. To take the scale up
case first - 3 new pixels are needed in 32, with the size of objects which
move across the pixel field not changing much. That basically means
filtering all the intervening pixels as well... Scaling down has similar
requirements - we can't just drop 3 innocent pixels randomly.

So what about scaling by 9:8 - this gives 352 in, 396 out (12 pixels too many:
an error of 3%). 12 pixels is quite noticeable on screen, but 396 x 288 does
look noticeably nicer than 352 x 288. This scaling is a lot easier to
contemplate in software, and could possibly use something as complex as the 5:4
scaler for the four middle pixels of 8 (a, (a+3b)/4, (b+c)/2, (3c+d)/4, d). Its
unlikely that anything involving all 8 pixels can be managed, though the linear
interpolation equation is a, (a+7b)/8, (b+3c)/4, (3c+5d)/8, (d+e)/2, (5e+3f)/8,
(3f+g)/4, (7g+h)/8, h which is at least plausible (add weighted pairs) for a
software implementation (especially for FastDecYUV). It seems the eye is
relatively insensitive to the cheaper a, (a+3b)/4, (b+3c)/4, (c+d)/2, (d+e)/2,
(e+f)/2, (3f+g)/4, (3g+h)/4, h scaling, too. If performance of final stage
image write is a problem, then one doesn't really want to write the extra 12
pixels! At 16bpp, this has the additional problem that it ends up half word
aligned after 8 input pixels.

For NTSC, scaling by 7:8, produces a too small by 12 result - 308 pixels, an
error of nearly 4%. Again, 12 pixels is clearly noticeable, but the aspect
ratio of 308x240 is probably a lot better than 352x240. This looks very nasty,
involving (7a+b)/8, (3b+c)/4, (5c+3d)/8, (d+e)/2, (3e+5f)/8, (f+3g)/4, (g+7h)/8
- or a cheaper (3a+b)/4, (3b+c)/4, (c+d)/2, (d+e)/2, (e+f)/2, (f+3g)/4,
(g+3h)/4. Again, it has the half word alignment problem.

The inverse problem - "how do you make 601 size pixels from square pixels" is
obvious from the above, but there is also "how do you make 601 size pixels from
WanTV size pixels?" which is more interesting. For WanTV formats C and D with
256 pixels across are the best choices: it equates to an 11:8 scale up to play
back on 352 pixels (both PAL and NTSC), though this is less than ideal in
practise for format C since the result would be x11/8y3/2 (PAL) or x11/8y5/4
(NTSC) which implies no vertical interpolation.

An X scale table:

     To 601          To PAL Square (384)       To NTSC Square (320)

160: 9/4             19/8                      2
     =360            =380                      =320*
176: 2               9/4 or 17/8               7/4 or 15/8
     =352*           =396   =374               =308   =330
192: 15/8            2                         5/3 or 13/8
     =360            =384*                     =320*  =312
208: 5/3 or 7/4      15/8                      3/2 
     =346   =364     =390                      =312
224: 13/8            7/4                       11/8
     =364            =392                      =308
240: 3/2             13/8                      4/3 or 11/8
     =360            =390                      =320*  =330
256: 11/8            3/2                       5/4
     =352*           =384*                     =320*
272: 4/3 or 5/4      11/8                      6/5 or 9/8 or 5/4
     =362   =340     =374                      =326   =306   =340
288: 5/4             4/3 or 11/8               9/8
     =360            =384*  =396               =324
304: 9/8             5/4                       none (17/16)
     =342            =380
320: 9/8             6/5                       1
     =360            =384*                     =320*
336: none (17/16)    9/8                       none (15/16)
                     =378
352: 1               9/8                       7/8
     =352*           =396                      =308
368: none (15/16)    none (17/16)              7/8
                                               =322
384: none (15/16)    1                         none (13/16)

256 pixels across is clearly a magical number...

15:8 right:   a, (7a+b)/8, b, (3b+c)/4, c, (5c+3d)/8, d, (d+e)/2, e, (3e+5f)/8, f, (f+3g)/4, g, (g+7h)/8, h
     cheaper: a, (3a+b)/4, b, (3b+c)/4, c, (c+d)/2, d, (d+e)/2, e, (e+f)/2, f, (f+3g)/4, g, (g+3h)/4, h
     cheap:   a, (a+b)/2, b, (b+c)/2, c, (c+d)/2, d, (d+e)/2, e, (e+f)/2, f, (f+g)/2, g, (g+h)/2, h
     v cheap: a,a, b,b, c,c, d,d, e,e, f,f, g,g, h
11:6 right:   a, (5a+b)/6, b, (2b+c)/3, c, (c+d)/2, d, (d+2e)/3, e, (e+5f)/6, f
     cheaper: a, (3a+b)/4, b, (3b+c)/4, c, (c+d)/2, d, (d+3e)/4, e, (e+3f)/4, f
     cheap:   a, (a+b)/2, b, (b+c)/2, c, (c+d)/2, d, (d+e)/2, e, (e+f)/2, f
     v cheap: a, a, b, b, c, c, d, e, e, f, f
9:5  right:   a, (4a+b)/5, b, (3b+2c)/5, c, (2c+3d)/5, d, (d+4e)/5, e
     cheaper: a, (3a+b)/4, b, (b+c)/2, c, (c+d)/2, d, (d+3e)/4, e
     cheap:   a, (a+b)/2, b, (b+c)/2, c, (c+d)/2, d, (d+e)/2, e
     v cheap: a, a, b, b, c, d, d, e, e
7:4  right:   a, (3a+b)/4, b, (b+c)/2, c, (c+3d)/4, d.
     cheap:   a,(a+b)/2, b,(b+c)/2, c,(c+d)/2, d,e, (e+f)/2,f, (f+g)/2,g, (g+h)/2,h
     v cheap: a,a, b,b, c,c, d,e, e,f, f,g, g,h
10:6 right:   a, (2a+b)/3, b, (b+2c)/3, c, d, (2d+e)/3, e, (e+2f)/3, f
     cheaper: a, (3a+b)/4, b, (b+3c)/4, c, d, (3d+e)/4, e, (e+3f)/4, f
     cheap:   a, (a+b)/2, b, (b+c)/2, c, d, (d+e)/2, e, (e+f)/2, f
     v cheap: a, a, b, c, c, d, d, e, f, f
13:8 right:   a, (5a+3b)/8, b, (b+3c)/4, (7c+d)/8, d, (d+e)/2, e, (e+7f)/8, (3f+g)/4, g, (3g+5h)/8, h
     cheaper: a, (a+b)/2, b, (b+3c)/4, c, d, (d+e)/2, e, f, (3f+g)/4, g, (g+h)/2, h
     cheap:   a, (a+b)/2, b, (b+c)/2, c, d, (d+e)/2, e, f, (f+g)/2, g, (g+h)/2, h
     v cheap: a,a, b,b, c, d,d, e,e, f, g,g, h
8:5  right:   a, (3a+2b)/5, b, (b+4c)/5, (4c+d)/5, d, (2d+3e)/5, e
     cheaper: a, (a+b)/2, b, (b+3c)/4, (3c+d)/4, d, (d+e)/2, e
     cheap:   a, (a+b)/2, b, (b+c)/2, (c+d)/2, d, (d+e)/2, e
     v cheap: a, a, b, c, c, d, e, e
3:2  right:   a, (a+b)/2, b, c, (c+d)/2, d, e, (e+f)/2, f, g, (g+h)/2, h
     v cheap: a, a, b, c, c, d, e, e, f, g, g, h
7:5  right:   a, (2a+3b)/5, (4b+c)/5, c, (c+4d)/5, (3d+2e)/5, e
     cheaper: a, (a+b)/2, (3b+c)/4, c, (c+3d)/4, (d+e)/2, e
     cheap:   a, (a+b)/2, b, c, d, (d+e)/2, e
     v cheap: a, a, b, c, d, d, e
11:8 right:   a, (3a+5b)/8, (3b+c)/4, c, (c+7d)/8, (d+e)/2, (7e+f)/8, f, (f+3g)/4, (5g+3h)/8, h
     cheaper: a, (a+b)/2, (3b+c)/4, c, d, (d+e)/2, e, f, (f+3g)/4, (g+h)/2, h
     cheap:   a, (a+b)/2, (b+c)/2, c, d, (d+e)/2, e, f, (f+g)/2, (g+h)/2, h
     v cheap: a,a, b, c,c, d, e, f,f, g, h
8:6  right:   a, (a+2b)/3, (2b+c)/3, c, d, (d+2e)/3, (2e+f)/3, f
     cheaper: a, (a+3b)/4, (3b+c)/4, c
     cheap:   a,(a+b)/2, (b+c)/2,c, d,(d+e)/2, (e+f)/2,f
     v cheap: a, b, b, c
5:4  right:   a, (a+3b)/4, (b+c)/2, (3c+d)/4, d, e, (e+3f)/4, (f+g)/2, (3g+h)/4, h
     cheap:   a, (a+b)/2, (b+c)/2, (c+d)/2, d, e, (e+f)/2, (f+g)/2, (g+h)/2, h
     v.cheap: a,a, b,c, d,e, e,f, g,h
6:5  right:   a, (a+4b)/5, (2b+3c)/5, (3c+2d)/5, (4d+e)/5, e
     cheaper: a, (a+3b)/4, (b+c)/2, (c+d)/2, (3d+e)/4, e
     cheap:   a, (a+b)/2, (b+c)/2, (c+d)/2, (d+e)/2, e
     v.cheap: a, b, c, c, d, e
7:6  right:   a, (a+5b)/6, (b+2c)/3, (c+d)/2, (2d+e)/3, (e+5f)/6, f
     cheaper: a, (a+3b)/4, (b+3c)/4, (c+d)/2, (3d+e)/4, (e+3f)/4, f
     cheap:   a, b, (b+c)/2, (c+d)/2, (d+e)/2, e, f
     v.cheap: a, b, c, c, d, e, f
9:8  right:   a, (a+7b)/8, (b+3c)/4, (3c+5d)/8, (d+e)/2, (5e+3f)/8, (3f+g)/4, (7g+h)/8, h
     cheaper: a, (a+3b)/4, (b+3c)/4, (c+d)/2, (d+e)/2, (e+f)/2, (3f+g)/4, (3g+h)/4, h
     cheap:   a, (a+b)/2, (b+c)/2, (c+d)/2, (d+e)/2, (e+f)/2, (f+g)/2, (g+h)/2, h
     v cheap: a, a, b, c, d, e, f, g, h
7:8  right:   (7a+b)/8, (3b+c)/4, (5c+3d)/8, (d+e)/2, (3e+5f)/8, (f+3g)/4, (g+7h)/8
     cheaper: (3a+b)/4, (3b+c)/4, (c+d)/2, (d+e)/2, (e+f)/2, (f+3g)/4, (g+3h)/4
     cheap:   (a+b)/2, (b+c)/2, (c+d)/2, (d+e)/2, (e+f)/2, (f+g)/2, (g+h)/2
     v cheap: a, c, d, e, f, g, h

scaling by x/5 is dubious - it has to be implemented as 2x/10 for 16bpp source
