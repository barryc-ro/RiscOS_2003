Release changes: 5th Aug 1999 (0.56)

fixed 4:1 vertical scaling clip problems
added 5:3 16bpp scaling interpolated and non-interpolated
added 13:8 32bpp scaling interpolated
added 15:8 32bpp scaling interpolated
changed all :8 32bpp to use library (CLd32s/8)
added arbitrary x scaling for 16 and 32 bpp (is extremely unpredictable!)
added frontend with tools, info and timebar
with 8bit sound system prevents multiple movies playing sounds.

Release changes: 29th June 1998 (0.55)

fixed d323/2x1y PROCdr3, PROCdr2 bad out of range clip
fixed the shearing problem for non-byte ideal sizes in non-multitasking state
fixed d323/2xIyI Dec16 incorrect LDMIA instruction
fixed d327/4xI1y FastDec21/24 missing ! in LDM
fixed d162xI4y PROCdr1 missing ]
fixed d322xI1y FastDecYUV PROCdr4 had a possibly unreferenced global
fixed d322x1y FastDecYUV PROCdr3
fixed d82x2y PROCdr5
missing endif in d162xI4y
missing endif in d22x1y
changed Player to compute bresenhamy in time for it to be used for the mag% calculation for colours
fixed 8bpp 1:1 1:2 selection (missing line in CASE statement)
bug in Dec16 5:4 16bpp x interp
bug in Dec16 7:4 16bpp x interp
release didn't play sound only files

Release changes: 16th April 1998 (0.54)

disabled some of the scale options for the beta release - it doesn't look for
   d3215/8xI1 and d3213/8xI1 since they aren't written yet. Tried to stop 5:3
   stupidity but more code reorganisation needed (people will need to force
   no interpolation in 16bpp mode). Forced magx=1, divx=1 if x scaling routine
   not found, but of course it has already done the colour map thing earlier.
moved d32 paintcode to subdirectory
finished d167/4xI1y
bugfixed d167/4x1y
finished d165/4xI1y
corrections to clip code to support incno%=6
d164/3xI1y written
new snap code to support 4:3 scaling
bug found in d165/4x1y PROCdr5 for DecompresH
d164/3x1y written
unknown d16 magx now turn interpolation off (since its mag 1x painter)
Player changed to support 4:3 x scale: bpp% set back to 1/2/4/8/16/32 and multiplied by magx/divx
d3211/8x1y, d3213/8x1y, d3215/8x1y
computation of adrr changed to round for 16bpp and 32bpp
snap x magnification from ARMovie$Mags(Big) and -snap added
major change to case statement for selection of display routine
bresenham y stepping added
changes to clip code to more easily support different x magnifications
new audio codecs
d329/8x1y, d327/8x1y
d167/4x1y, d327/4x1y
allow r2 to be freely used in paint routines (no longer holds adrr)
error for no audio codec changed to run silently...
sndadd added
d321x1y, d323/2x1y, d323/2xI1y, d325/4x1y, d325/4xI1y PROCdx's coded, too!
d323/2x1y, d323/2xI1y, d325/4x1y, d325/4xI1y PROCd's coded
Added interprightfix so only mag 2x needs to have extra PROCdr8
d321x1y fastpaintmap coded for 8 pixels only
support for FastDecYUV added: fastpaintmap
removed PRODdrh calls from PROCclip when xmag<2
IFsmall code moved to after ARMovie$Mags code
prevention of multitasking for magy 3:2
introduction of ARMovie$Mags and ARMovie$MagsBig
16 and 32 bit paintcode for 1.25x, but without any code for vertical interpolation
introduction of scaling support for 1.25x
vertical scaling support ammended to deal with 1:n scaling, for any n
-2 in video fetcher lists
-1 in audio fetcher lists
-1 in video fetcher lists
attempt to reduce number of WimpPolls on short duration chunk movies
during start up, !multiaddress set to 1 (was 0)
multitasking crash on 24bpp StrongARM using no colourmap tables fixed (ifp%=-1)
CBAI use made automatic - if its there, its used (untested)
removal of restriction to have more than 2 frames per chunk
limited paint support for 1.5x scaling in 16bpp, 32bpp only
introduction of 1.5x scaling routines
bug in STR r0,pollword late in decom routine being too far from .pollword
new clip interface (needs new window manager now)

Release changes: 3rd April 1997 (0.52)

--->problems - put SetSndDir in MovingLine - where to put Sound16?
Bug fix to PROCdr4 in d162xI2y
Major changes to how it gets memory for IO, sound and decompressed frames
Changed grabbing memory for shape loading to only happen when shape or follow are asserted

Release changes: 18th March 1997 (0.51)

Change to allow a Dec16 only, rather than require a Decompress
no video sizing of decompressed frames queue wrong (bf=2)
forever added to number of chunks field
Changes to calculation of endtime: (a) do chunk work first and subtract fchunk (b) limit to maxint
-PauseAtEnd added. bit 9 added to mute word
IFNOTmywindow changed to IFmywindow<>0...
ARMovie$Default created
updated so that default position calculations work when -at is not present and novideo
"error" form of PROCError now does ERROR ERR,REPORT$ instead of PRINT...
rounded rather than truncated the computation of !fpstime
-multi with no video upgraded to give sensible white window
Changes to Fetcher interface to allow status setting, error returns and null returns
Updated call of Fetcher Open to move quiet% to r3
Updated Access calculation to cope with MovieFS# prefix
Refined slow calculation to notice if it has to do paintmap
C6Y6UV created, problem ammended in 6Y6UV (to do with low colour modes)
C6Y5UV created
CYUV created
Decomp18.BatchComp altered to cope with 6Y5UV colour space

Release changes: 5th December 1996 (0.50)

added an rmensure of SharedSound 0.28 when in multitasking start up
deallocation of fetchcode when in multitasking mode
uses FNaddmacro on xround% value
New SSound, sound stack
Bug in Shared Sound Control Word: no sound movies stopped working
Shared Sound Control Word added
addition of b and w values to ColourIf, new ColourIf docn, new Player code
change to access parameters for cachefs; also protection for multi% against silly values
Decomp26 and Decomp27 written: d3.5 on 6 bit and d3 on 5 bit
fetcher buffer allocation for access=0 was faulty
end time calculation redone (now uses chunk start position instead of startat!)
Decomp25 written (Delta4 on 6 bit Y and UV)
6Y6UV16 upgraded to do 8bpp colour mapping
Moving Blocks Beta upgraded to use Delta4 chroma compression
Decomp22 done using Delta4 compression of chroma
Decomp24 written
Decomp23 written
CCIR (16-235) range expansion for 8bpp YUV8 in CompLib (turn on with -ccir)

Release changes: 7th November 1996 (0.49)

Player incorrectly chose to use mag%=1 in d65535 when there was no decompresH
Bug in d162x2y PROCdr8 non paintmap
Decomp11 created, Batchcomp created. Uses 6Y5UV.
Decomp21 redone to use 6Y5UV colour space
Massive speed up in Decomp10, Decomp9, Decomp21 due to removing FNCrunch
Layout value added to filters interface; filter documentation moved to Documents.
-nodither added to complib
CompLib upgraded to convert 8Y8UV data to 6Y6UV for display and to force a 6Y6UV colourspace
BatchComp for format 21 written
Decomp21 (YUYV8) written
CompLib updated to cope with mode 15
BatchComp for format 10 written
CompLib patched to stop address abort on display on 888 data (results in silly display for 8y8uv)
BatchComp for format 9 written
CompLib upgraded to do 8Y8UV convertto
-hiq added to CompLib (default 0)
Moving Blocks Beta has quadrants compared with average
All Moving Blocks compressors have had the restriction on <=340 pixels across removed
Moving Blocks Beta and Super Moving Blocks "decode" routine sped up
ARMovie$DcTime displays pixels per second too
-convert added to CompLib
Moving Blocks Beta created
New rounding in CompLib dithering
Moving Blocks HQ decompressor sped up a bit
Super Moving Blocks created
convertto$ added to CompLib
More fixed point accuracy in CompLib dithering
6Y6UV colour space created
New dithering in CompLib
-forcespace added
subtle fetchcopysnd bug: move call to suit single sndcopy scheme
bug in keys implementation when paintmap% introduced
attach sound button introduced
new progif
control of AudioControl incorporated
removal of foreground sndwait calls in no video movies
Sound only fetcher files work
painting works on time stamps rather than frame numbera
Typo in d162xI2yI PROCdr3
New dtal's done
Three typos in d162xi4yi
Memory allocation changed to cope with Fetchers starting and grabbing
Dec16 (and DecompresH) support for -shape
sound only files put name of decompressor into ARMovie$Buffs
bug in -height (discovered during a demo...)
fetcher sound code written (method (a)!)
extrasndbuffer% introduced for fetchers
mywindow support introduced
Dec16 painters for 1bpp
Dec16 painters for 2bpp
FNmlook introduced, plook made conditional on paintmap%
Dec16 painters for 4bpp
Problem with paused state starting decompress over a frame since rund was invalid
Dec16 painters for 8bpp
Cunning trick only instantiated if DecompresHsize<>0
Fetcher documentation updated to allow sequential video data
Dec16 painters for 32bpp
Dec16 painters for 16bpp
Dec16 work started. Many Dec16s produced. New CodecIf documentation.
Change to shift value setting in cunning trick to use undithered painters
new display environment to free r14
d42x2y bug in clipping version of PROCdr8.

Release changes: 3rd July 1996

6Y5UV created and working
RGB16 colour map program uses ARMovie$FileTime to selectively load 8rgb11, 8rgb22
YUV16 colour map program uses ARMovie$FileTime to selectively load 8yuv11, 8yuv22
ARMovie$FileTime variable introduced
YUV16 colour map program redesigned to remove the 32yuv table
YUV16 colour map program redesigned to remove the 16yuv table
Big bugs in CompLib reading files of >16 bits per pixel
clip allows mode changes
C call sequence for video decompressors introduced
big bug in d82x2y vertically undithered - fixed by no l/r dither swap
changes to access to allow zero buffer use
new ProgIf, new Fetcher doc
interaction between -decomp and -interpolate 0 resolved
-claimtable put in for CompLib
-decomp documented
Hack to turn sound off if ARMovie$PlayPixels>0
First fetcher implementation
-interpolate to allow easier testing of devices
New clip system

Release changes: 1st May 1996

Change clipping system to use single word per span (packed)
New clipping module written in assembler. Smaller, faster.
bugfixes to d82x2y
Added -furniture option
Support for draggable movies folded in
Pause behaviour implemented for multitasking mode

Release changes: 10th April 1996

changes to AE7Doc and ProgIf, initial Fetchers doc
changes to clipping system
used bit 8 for -paused
implemented paint frame on paused bit 8 in mute word
changes to caching system, changes to name of decompressor cache info
implemented video decompressor 15 as indirect to named video decompressors
refixed sound only movies yet again

Release changes: 6th March 1996

dratted close#file% on !RunImage Decompressor got lost after the caching
rewrite dtal to avoid computed branch switch (8 instructions down to 5, 1 branch only instead of 2)
loop% double decrement - goes from -1 to -3 (then -4, -5)
ARMovie$Frames updated to account for loop% moves
setting of ARMovie$PlayPixels moved to before first multipoll%
fix to PaintCode.d162xI4yI
full clip source code integrated: changes to all PaintCode
shape output made to work on Network Computer (interlaced screen)
two sources for plain and callback version
Bigger codesize value
Changes to PaintCode.d82x2y
Introduced vertically undithered painting for 8bpp 2x2 medium slow
Changes to PaintCode.d161x2y
Changes to PaintCode.d162x4y
Changes to PaintCode.d162x1y
Changes to PaintCode.d162x2y
Introduced undithered painting for 16bpp medium slow
Cached Access info
Changed format of Access file
Sped up FNHead
Sped up FNuc
Cached decompressor info
Read only one frame's worth of data for -playfor 0 on uncompressed source
Implemented TimeSource 0 and 1
Created ARMovie$TimeSource
Changes to PaintCode.d2
Changes to PaintCode.d322xI
Changes to PaintCode.d162xI
Redesign of interpolation to avoid righthand vertical error: introduction of PROCdr8
Changes to PaintCode.d32
Changes to PaintCode.d16
Changes to PaintCode.d8
Changes to PaintCode.d41x1y, d42x1y, d42x2y
Implementation of paint calls to PROCdr7, PROCdr6, PROCdr5, PROCdr3, PROCdr2, PROCdr1
Modification to make -width and -height allow positionning closer to the edge

Release changes: 30th June 1995

Fixes to PaintCode.d322xI2yI and d322xI4yI
Modified rowbytes% to xrowbytes% in some case for interlaced modes
Removed use of Timer1
Fixes to PaintCode.d161x1y, d162x1y, d162xI1y, d162xI4y, d162xi@y
Fixes to PaintCode.d41x1y, d42x2y, d22x1y, Creation of d11x1y
Change to format of ARMovie$Buffs
Fixes to PaintCode.d81x1y, d81x2y, d82x1y.
Introduction of -height for completeness...
Introduction of -width to enable easier testing
Introduction of -decomp to enable easier testing
Introduction of -magx and -magy to enable easier testing
PaintCode updated to a uniform PROCdr4 state (i.e. Replay now copes with
  files which have x a multiple of 4 pixels)
Revision to PaintCode interface to allow arbitrary number of painted pixels
Silly bug in 16bpp bilinear interpolating painters
Very nasty bug in Decomp7.DecompresH found
More efficient painters here and there - in particular PROCd42x2y for DecompresH
PROCconstant for painter code
Major improvement to copyhalf and copyblock in MovingLine.DecompresH
Half word keyer didn't work with packed 16 bit colour table...
More efficient painting for PROCd81x1y, PROCd41x1y, PROCd42x1y for DecompresB
Decomp7.DecompresB created (MovingBlocks)
Decomp8.DecompresB created
Decomp6.DecompresB created
Decomp5.DecompresB created
Decomp3.DecompresB created
Decomp2.DecompresB created
Decomp10.DecompresB created
DecompresB possible for inputbpp>8
Moved Messages file to MovingLine.Messages
Moved ColourMap directory to MovingLine.ColourMap
Moved Access file to MovingLine.Access
Update ARMovie$Frames to not count unpainted 'slow' frames as missed
-multi sound only files now have a visible window!
More (much more) fun and games with task allocation - introduced concept
  of painter surrenduring processor if decompressor getting low and moved
  the sound code to the front of the world
Created ARMovie$PaintDir
Memory stupidity - double allocation of sound buffers
Sound only files with -multi
Quit message when in -multi state
Sound only files with -big asserted
Mouse code in -multi state works
Paint code in -multi state works
Made shapes work with B and H decompressed buffers
Moved all shape painting code into PaintCode directory

Release changes: 26th May 1995

recoded to avoid calling video decompressor on sound only files (!)
decompressor queue altered to givesnddata if it runs out of stuff to decompress
skipped frames code changed - skipped frames keep decompressor going
slow% -> skipped frames
Changes to frames to be decompressed computation
ARMovie$Frames created
ARMovie$MachinePixels default raised to 1024000
missed painting frames counted
bug in PROCreadbutton fixed

Release changes: 19th May 1995

correct bug in RGB16 and YUV16 for 256 colours at mag=2
RGB8 handles srcpal
faster painting of d161x1y H
Removal of PaintCode from main program to subdirectory
"B" painter for all paint routines except interp=2
ARMovie$Buffs now shows B/H/W after number of video buffers
szmul% altered to give 1,2,4
Decomp4.DecompresB created
CodecIf updated for DecomresB
reorganise error handling to prevent any memory leaks
call decompress init routine with parameters and call a finalisation
     routine
sound only files bug fix
Implement -novideo -nopaint, display toggle
Decomp8.Decom21 created
Update to CodecIf for Decom21
Player will use Decom21 for 24 bpp display with interpolation
Player will use Decom24 for 24 bpp display
-small works in very nearly all situations...
Update FNcreatedynamicarea for RISC OS 2.00
Update Player to support szmul=2 d82x1y and d161x1y (compressed colour maps)
Update ColourMap programs to compress 8bpp mag 2 and 16bpp mag 1
MovingLine.DecompresH created
Update -2 pixel position for 8bpp correctly
"H" painter for:
  -d12x2y
  -d12x1y
  -d22x2y
  -d22x1y
  -d21x1y
Change ColourMap programs to support d41x1y
Painter for d41x1y (mode 31 -small)
Bug in documentation for CodecIf
  New Decomp2. to Decomp10.DecompresH
"H" painter for:
  -d81x1y
  -d42x2y
  -d42x1y
Bug in checking srcpal against -s (used wrong number of colours...)
Decomp7.DecompresH created

Release changes: 19th April 1995

short film looping in twobuf mode
support for 256 entry source palette
support for other names of colour space
creation of ARMovie$PlayPixels
mouse detection restricted to movie area or buttons
mouse and vsync events now pass on to other (ARMovie??) clients
changes to Access file to include latency
-multi using the wimp
  [dynamic area/rma memory allocation]
  [return on Wimp_Poll as early as feasible]
Removal of disc cached palettes
-loop keeps sound and video sync'ed (for a file for which that is possible!)
ColourIf, ColourMap
  [colour manufacturing files use weighted Devious algorithm]
  [shell calls to colourmap makers]
  [ARMovie$ColourMapMax]
Removal of ARMovie$Place
Removal of -explode
Addition of ARMovie$Keyboard
Removal of interpolation in 8bpp modes
