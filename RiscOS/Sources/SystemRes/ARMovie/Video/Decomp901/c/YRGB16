/*************************************************************************
 *                                                                       *
 *              INTEL CORPORATION PROPRIETARY INFORMATION                *
 *                                                                       *
 *      This software is supplied under the terms of a license           *
 *      agreement or nondisclosure agreement with Intel Corporation      *
 *      and may not be copied or disclosed except in accordance          *
 *      with the terms of that agreement.                                *
 *                                                                       *
 *************************************************************************/
/***********************************************************
 * XRGB24.C - 24-bit YVU9 to RGB color conversion function
 * 		ycRgb24 
 ***********************************************************/

#include "datatype.h"

#pragma -s1

/***********************************************************
 * ycRgb24
 * prototype in: yvu.h
 *
 * Convert color in Y, V, U planes to 24-bit RGB for display
 ***********************************************************/ 
 

 
void ycRgb16 (
 int Height, /* input height */
 int Width,  /* input width */
 PU8 YPlane, /* address of Y data */
 PU8 VPlane, /* address of V data */
 PU8 UPlane, /* address of U data */
 PU8 OutputCursor, /* address of output image buffer */
 int OutputPitch,   /* increment OR DECREMENT for next output line */
 char *table
 )
{
    int i, j, k, l;                     /* loop counters */
    int Y, U, V;                        /* holders for values found in YVU planes */     
    I32 UVRowOffset = 0;                /* current row of U or V plane */ 
    I32 UVindex;                        /* index to next U or V value from plane */     
    I32 YRowOffset = 0;                 /* current row of Y plane */
    PU8 ysrc;

    int UVinc = Width >> 2;             /* compute horiz chroma subsample width (once) */
    UVinc = (UVinc+3)&~3;
	for (j = 0; j < Height; j += 4) {
	    
	    for (i = 0; i < 4; i++) {      /* row loop, 4 rows in subsample block */	 
	       
	    	UVindex = UVRowOffset;     /* init UV pointer to start of new row */
			
			for (k = 0; k < Width; k += 4) { 
			
				V = VPlane[UVindex];   /* get V data from input plane */
				U = UPlane[UVindex++]; /* get U data from input plane */
			    
			    	U=((U-127)/8)&31;
			    	V=((V-127)/8)&31;
			    
				// unroll: for (l = 0; l < 4; l++) {
				
				
				    ysrc = YPlane + YRowOffset + k;
				    /* get 4 luma component from input plane */
				    loop_l(ysrc,OutputCursor,(U<<5)|(V<<10),table);
		       	            OutputCursor += 16;
			}
			OutputCursor += OutputPitch - (Width * 3);  /* next line of output DIB */
			YRowOffset += Width;       /* next row of Y values */ 
	    }
	    UVRowOffset += UVinc;          /* vert chroma subsample, add every 4 rows */ 
	}
}
