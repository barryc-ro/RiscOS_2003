[Document was dated 27 Sep 1996]

	Batchcomp

The batchcomp is specified in documents.codecIf. It can read in only 16bpp movies, in the YUV
or RGB colour spaces. It uses the decompress or dec24 code to decode the input files. It can also 
read in movies which use fetchers. Other colour spaces or 8bpp movies would be easy to implement.

It initialises itself, reads args, reads the provided new armovie header, initialises the reader (which 
reads the input header), skips frames if necessary. if -restart was passed, it reads the arguments 
from stoppedD and (if -nokeys was passed) the last frame of the last chunk written from stoppedC. 
It starts from the start of the chunk it was suspended on. Tmnmain is called for each chunk.
If the reader runs out of frames, it returns the last frame repeatedly.

Alterations to the telenor code: 


 Added an init function to each file to allow reexecution of the compressor.
Each init function clears static variables. Verified that all files are closed at end, and mallocs
freed, assuming no errors are encountered. 

 Changed c.io to call readframe() instead of reading from files.
Output io is unchanged.

 Removed argument parsing from top level. Defined a struct containing all values collected from command
line, and changed op level to copy those.

 Changed top level to return calculated quantisation value. This is so that it can be passed back
for the next chunk, since rate control doesn't work othrewise.

 Changed printfs to stdout to sprintf to a static string and call a function. In files tmnmain, coder 
and ratectrl. 

 Changed tmnmain() to call checkpoint() function after each frame, to see if we need to suspend.

 Changed c.dct to allow optional use of Acorns idct code when reconstructing frames to be used in
 constructing INTER blocks. This was to test the accuracy if Acorns idct code.
 
 Changed tmnmain to return quantisation values, to allow rate control over chunks.
 
 Added option to tmnmain to start a chunk with a P frame. The tmnmain() function returns 
 the last frame of the previous chunk. 
 
Extra files:

c

batchcomp		routines to read arguments specified in codecIF, and parse an ARMovie header.
cdir			create a directory
checkpoint		check to see if space has been pressed, unless -batch specified
do8YUV2CIF		routine to read format produced by ARMovie decompressors
error			routine to terminate returning an error in manner specified by codecIF
filestuff		misc file reading functions
getargs			argument retrieval as specified by codecIF
h263_compIf		h263 specific argument parsing. Was planning to
			 move all h263 specific stuff out of mainplan.c.
inkey			routine to check if a key has been pressed
lmall 			routines to keep track of mallocs (unused)
Logger			routines to print out stuff and log it to a file
mainplan		main program
reader			Routines to read an ARmovie file
setenv			Set an env var
tmnarg			default arguments to tmnmain
tmnmain			renamed main.c
s

blatasm			routines to call the decompressor/fetcher assembler entrypoints.

New #defines
DONT			Used to comment out stuff
TEST			Used in several files to comment out a main() used for testing that file.
AIDCT			Use the assembler idct algorythm.
WRITECIF		Do not call tmnmain, write the output of readframe() instead.
T_DEBUG			debugging output
OLD_SAD			Use original version of SAD_Macroblock(). The change was taken from 
				real_time_h263_encode/ps. It does not seem to make much difference. 
FIDDLERATE		Attempt to keep track of number of bits used over chunks. Does not work.
COMPLAINSMALL		Complain if a chunk has too few frames. 
DOFREES			Free read buffers explicitly instead of relying on exit().
DOOUT			Used to comment out output routines in tmnmain().
ICHUNKS			Revert to version of tmn code which will only write I frames at the 
				start of chunks. Probably incompatible with current h263_compIF.c
DO_SKIPFRAMES		Used to comment out skipping of frames with low delay rate control method.
			  (replay has no way to indicate variable frame rates, and does it's own 
			  skipping)			  			  				
			  
Not implemented:
 Filters
 8bpp movies (with or without palette)
 -display


Bugs/TTD

Argument parsing is case sensitive.

The reader is currently inefficient for movies with fixed size chunks. (It keeps a whole chunk in 
memory, when it could keep a frame). (Whether a movie is fixed size is given by the info file in
it's decomp directory)

