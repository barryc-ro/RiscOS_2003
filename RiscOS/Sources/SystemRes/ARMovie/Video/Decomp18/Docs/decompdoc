[Document was dated 27 Sep 1996]

H263 Decompressor.
This is derived from tmndec 2.0. (Actually 1.6c, then updated)

The telenor code has been modified as follows:

1	Top level replaced to be compatible with replay.

The original program was stand alone. The top level called display and decoding routines in a loop.
This has been replaced by three functions implemented by control.c, declared in decomp.h.
InitEntry allocates all necessary resources. DecompEntry returns a single frame as required by replay.
ShutEntry deallocates memory. They are linked with an assembler veneer derived from CDecomp4.
Memory is allocated in a dynamic area called H263_Area. DecompEntry does not make use of the 
previous frame provided by replay, but keeps the previously decoded frame itself. It also keeps
over frames from PB pictures.

2 	Replacement of input routines

The input routines originally read from a file. They were replaced eith routines to read from memory.
These are implemented in getbits.c. Faster assembler versions now used are in agetbits.s.

3	Replacement of output routines

The output routines wrote to files. They were replaced with routines which copied the planar YUV
format written by the compressor into the output buffer provided. The output routines currently write
the 6Y5UV colour space.

4	Removal of printfs

All function calls which could not be executed in replay were removed. Mainly printfs.

5	Optimisation

The output routines and bitwise input routines are in assembler. Some functions from recon.c are 
replaced by assembler equivalents. Clearblock() in getpic.c was replaced, and the tail of 
addblock(). These assembler replacements were masterminded by Sophie Wilson.
Some statements in getMBs() were re-ordered. The idct code was replaced with an assembler
version taken from the spriteextend module. This routine places its output transposed in the previous
block, for maximum efficiency. This required the routine addblock to use the previous block, 
and an additional block to be allocated in c.control. Some divisions were moved from c.recon to
c.gethdr, which is only run once a frame. Also some divisions in c.sac are replaced by multiplies 
(This only works to 28 bits precision. I think it's still ok) 

Hierprof (by Julian Smith) was used for profiling. HierProf is shareware, so further licenses will
by required if more people need to use it - The macros compile to nothing without defining 
HierProf_PROFILE, so they don't need to be removed.

Also, profiling calls are present in most functions. These are macros and do not generate code unless
HierProf_PROFILE is defined.

	Debugging
	
Debugging within replay is difficult. Code exists in c.control (commented out) to allow debugging 
output to the module area. To use it it would be necessary to change it to the dynamic area, 
and write a veneer to replace the _swix() call (since that won't work on the strongARM).

	#defines

OLD_CLEARBLOCK		Use old version of clearblock
PLBUG			debugging output to module area.
OLD_ADDBLOCK		Use old version of addblock
OLDIDCT			Use c version of idct
OLD_DY			Use c version of dy_malloc
PROFILE			Old version of profiling code (not hierprof)
HierProf_PROFILE	HierProf profiling
TRDDIV			Eliminate divisions from c.recon
TQDEBUG			Some debugging output
WORDTEST		Checking if things are word aligned	
FASTSAC			Eliminate divisions from sac.c
BITASM			Use assembler version of getbits
TESTMAKE		test getbits routines


	File List


c
control		Top level entry points called by veneer
dy_malloc	Routines to manipulate dynamic areas (replaced with assembler as ansilib SWI 
			does not work on strongarm)
getbits		Routines to read the bitstream. replaced by agetbits.s
getblk		Contains routines to read a block from the bitstream. 
gethdr		Gets a header. Sets various globals
getpic		The main thing.	
bblock		 a piece of getpic rearranged (a bit hacky)
getvlc		Routines to read variable length codewords from the bitstream.
idct		C idct routines. Replaced with asm.
idctref		Floating poit reference idct. Unused.
mallarr		Routines to set up a malloced array to look like a static one.
recon		Routines to reconstruct a predicted block from the previous frame, with motion
		prediction.
sac		Routines to read syntax arithmetically encoded codewords.
store		Was storage routines. Now calls assembler 

testdecomp	program to test the decompressor. 
		Run it to print out it's arguments. Needs a raw h263 file, such as a chunk of armovie 
		before joining. Size is x*y*(bytes per pixel).

Other files are ad-hoc programs to test things out.

s
aaddb		Assembler to replace the end of addblock() in getpic.c
ady_malloc	Asm version of dy_malloc.c
agetbits	.. getbits
amemset64	.. clearblock() from getpic.c
arecon		.. some routines in recon
dosetxy		called by control.c to pass x & x values to assembler.
entries		veneer for use by replay.
i2c		Asm version of end of recon_block_obmc() in recon.c
jrevdct		.. idct.c
output		output routines (old version)
tryout		faster version of output routines
tryoutd16	version of output routine to generate faster dec16 & decompress (no dither only)
veneer		main wrapper

	Output Routines
	
The output routines currently output the 6Y5UV colour space. They are generated by the files 
s.tryout or s.tryoutd16, depending on which header file hdr.d?? is included.
The variables in the hdr.D?? files are as follows:

decsize		bytes per pixel generated
ppl		generate a patch table?
mash		0 for dec24, 3 for dec21, 1 for 6Y5UV
torgb		include rgb conversion.
out16		select s.tryout or s.tryoutd16

In s.tryout
dith		ordered dither U & V values within 2*2 subpixels (not currently used)
ACCCCR		more accurate conversion to 6Y5UV
tryrgb		generate multiplication tables for rgb conversion (not currently used)
oldeor		Use old code for dec21 (slower)
trynstr		0-> use older version of rgb conversion


