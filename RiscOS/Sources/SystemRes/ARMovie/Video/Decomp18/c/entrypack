/***************************************************************************
 *
 *  File:        entry.c
 *
 *  Description: h263 C code entry points implementation
 *
 *  Version:     0.0 16 Sep 1997
 *
 *  Author:      Alex Burr (aburr@acorn.com)
 *               modified by Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *    16 Sep 1997  Pete Goodliffe        Commented and renamed file
 *
 ***************************************************************************/

#define GLOBAL         // makes global.h define not declare variables

#include "entry.h"

#include <stdio.h>
#include <stdlib.h>

#include "config.h"
#include "global.h"
#include "packet.h"

#include "swis.h"      // for debugging
#include "memory.h"

////////////////////////////////////////////////////////////////////////////
// Debugging

//#define PLBUG1          // debugging output to module area
//#define PLBUG


////////////////////////////////////////////////////////////////////////////
// frame information given in InitEntry()

int xsize, ysize;
int framenum;


////////////////////////////////////////////////////////////////////////////
// errors to return

os_error dyinerr = {
    1, "Could not get dynamic area                           "
};

os_error dyexerr = {
    2, "Dynamic area extend failed                           "
};

os_error parmerr = {
    3, "PARM not passed                                      "
};

os_error othmerr = {
    4, "Init Error                                           "
};

os_error dysherr = {
    1, "Dynamic area extend failed                           "
};

os_error sizxerr = {
    1, "X size wrong                                         "
};

os_error sizyerr = {
    1, "Y size wrong                                         "
};


////////////////////////////////////////////////////////////////////////////
// assembly function declarations

extern void dosetxy(int xs,int ys);
extern void nullcopy(void *to, void *from);


////////////////////////////////////////////////////////////////////////////

os_error *InitEntry(int xs, int ys, int parm, int *list) {

  int i, cc, size, offset;

  dosetxy(xs, ys);
  if (parm != PARM_P) {
    sprintf(parmerr.errmess, "Got | %x | instead of PARM: %x \n",parm,PARM_P);
    return &parmerr;
  }

  /* stuff filched from tmndec.c - init_decoder() */
  ld=&base;
  xsize=xs;
  ysize=ys;
  framenum=tr_framenum=0;
  defer_bool=0;

  /* These must be checked to make sure the file size is supported */
  // init_decoder();  In the orig vers getheader is called first **panic**
  mb_height=ys/16;
  mb_width=xs/16;
  if (ys%16!=0) return &sizyerr;
  if (xs%16!=0) return &sizxerr;

  if(dy_init()) return &dyinerr;

  for (MV_d3_log = 1; (mb_height+1) > (1<<MV_d3_log); MV_d3_log++);

  if ((MV=get4array(2,5,1<<(MV_d3_log),mb_width+2)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }
  if ((modemap=get2arraychar(1<<MV_d3_log,mb_width+2)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }
  /* RJW */
  if ((ld->zsc=get1array(12+2)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }
  if ((ld->block=get2array(12+2,64)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }

  for(i=0; i<(12+2); i++)
    memset64(ld->block+i*64);
  ld->block += 64; /* for dct*/

  /* set globals */
  coded_picture_width = 16*mb_width;
  coded_picture_height = 16*mb_height;
  chrom_width =  coded_picture_width>>1;
  chrom_height = coded_picture_height>>1;

  for (cc=0; cc<3; cc++) {
    if (cc==0) {
      size = (coded_picture_width+64)*(coded_picture_height+64);
      offset = (coded_picture_width+64) * 32 + 32;
    } else {
      size = (chrom_width+32)*(chrom_height+32);
      offset = (chrom_width+32) * 16 + 16;
    }
    if ((refframeorig[cc] = (unsigned char *)dy_malloc(size)) == 0) {
      if (dy_shut())
        return &dysherr;
      else
        return &dyexerr;
    }
    refframe[cc] = refframeorig[cc] + offset;

    if ((oldrefframeorig[cc] = (unsigned char *)dy_malloc(size)) == 0) {
      if (dy_shut())
        return &dysherr;
      else
        return &dyexerr;
    }
    oldrefframe[cc] = oldrefframeorig[cc] + offset;

    if ((bframeorig[cc] = (unsigned char *)dy_malloc(size)) == 0) {
      if (dy_shut())
        return &dysherr;
      else
        return &dyexerr;
    }
    bframe[cc] = bframeorig[cc] + offset;
  }

  return 0;
}


////////////////////////////////////////////////////////////////////////////

os_error *ShutEntry(int xs, int ys, int parm) {

    if(dy_shut())
        return &dysherr;

    if (parm != PARM_S) {
        /* This Never Happens (TM) */
        sprintf(
            parmerr.errmess,"Got | %x | instead of SHUT: %x\n",parm ,PARM_S
        );
        return &parmerr;
    }
    return 0;

}


////////////////////////////////////////////////////////////////////////////
static void CopyMacroBlock(int x, int y) {

  int j, n;

  if (pb_frame) {
    for (j = 0; j < 16; j++) {
      n = 32 + x*16 + (y*16 + j)*(coded_picture_width+64);
      memcpy(bframe[0] + n, oldrefframe[0] + n, 16);
      n = 16 + x*8 + (y*8 + j)*(chrom_width+32);
      memcpy(bframe[1] + n, oldrefframe[1] + n, 8);
      memcpy(bframe[2] + n, oldrefframe[2] + n, 8);
    }
  }
  for (j = 0; j < 16; j++) {
    n = 32 + x*16 + (y*16 + j)*(coded_picture_width+64);
    memcpy(newframe[0] + n, oldrefframe[0] + n, 16);
    n = 16 + x*8 + (y*8 + j)*(chrom_width+32);
    memcpy(newframe[1] + n, oldrefframe[1] + n, 8);
    memcpy(newframe[2] + n, oldrefframe[2] + n, 8);
  }
}

static void CopyMacroBlocks(int fromx, int fromy, int tox, int toy) {

  int x, y;

  if ((fromx == tox) &&  (fromy == toy))
    return;
  if (fromy < toy) {
    for (x = fromx; x < mb_width; x++) {
      CopyMacroBlock(x, fromy);
    }
    for (y = fromy+1; y < toy; y++) {
      for (x = 0; x < mb_width; x++) {
        CopyMacroBlock(x, y);
      }
    }
    for (x = 0; x < tox; x++) {
      CopyMacroBlock(x, toy);
    }
  } else {
    for (x = fromx; x < tox; x++) {
      CopyMacroBlock(x, fromy);
    }
  }
}

DecState decstate;

char * DecompEntry(char *src, char *output, char *prev, char *table) {

  int i, packetcount, sbit, ebit, missed, xpos, ypos, gob, mba, payload_headersize;
  int j, firstpacket;
  unsigned char *tmp;
  int *source = (int *)src;
  int *packet_data;

  #ifdef PLBUG
    sprintf((char *)bugmsg,"start decomp %d th frame",framenum);
    sprintf((char *)bugmsg+100,"frame %d ##",framenum);
#endif

    //safe_printf("Dec ");
    if (source == NULL) {
        //safe_printf("Null\n\r");
        nullcopy(output, prev);
        return NULL;
    }
    ld->dest   = (unsigned char*) output;
    ld->table  = (unsigned char*) table;
    ld->bitsthru = 0;
    if (defer_bool) {
      storeframe(newframe);
      defer_bool=0;
      return ((char *)ld->source);
    }
    /* Init the decoder state */
    decstate.xpos  = 0;
    decstate.ypos  = 0;
    decstate.gob   = 0;
    pb_frame = 0;
    df_mode = 0;
    packetcount = *source++;
    //safe_printf("Packet Count: %d\n\r", packetcount);
    missed = 0;
    firstpacket = 1;
    for (j = 0; j < packetcount; j++) {
      packet_data = (int *)(*source++);
      //safe_printf("packet_data %08x\n\r", packet_data);
      if ((packet_data == NULL) || (packet_data[0] == NULL)) {
        /* Missing packet */
        missed = 1;
        //safe_printf("Missing Packet!\n\r");
        /* Because of VDO Phone and Connect and Share being broken */
        /* we need to force an exit from the decompress here */
        j = packetcount;
      } else {
        ld->source = ((unsigned char *) (packet_data[0]));
        //for (i=0; i < 32; i++)
        //  safe_printf("%x ", ((char *)(packet_data[0]))[i]);
        //safe_printf("\n\r");
        sbit = (ld->source[0]>>3) & 7;
        ebit = ld->source[0] & 7;
        switch (ld->source[0]>>6) {
          case 0:
          case 1:
	    //if (ld->source[0]>>6)
            //  safe_printf("Mode A (PB frame)\n\r");
            //else
            //  safe_printf("Mode A (I or P frame)\n\r");
            /* Mode A header */
            pict_type           = (ld->source[1]>>4) & 1;
            mv_outside_frame    = (ld->source[1]>>3) & 1;
	    syntax_arith_coding = (ld->source[1]>>2) & 1;
            adv_pred_mode       = (ld->source[1]>>1) & 1;
	    payload_headersize = 4;
	    if (missed) {
	      /* Read the GOB or Picture header */
              initbits(ld->source + payload_headersize, sbit, packet_data[1] - payload_headersize, ebit);
              startcode();
	      /* We continue the innate brokenness of the Telenor decoder wrt frames */
	      /* more than 256 pixels in height with gobsync. */
              ypos = gob = getbits(5);
              xpos = 0;
	    }
            break;
          case 2:
            //safe_printf("Mode B\n\r");
            /* Mode B header */
	    payload_headersize = 8;
	    if (missed) {
              quant               =  ld->source[1]     & 31;
              pict_type           = (ld->source[4]>>7) & 1;
              mv_outside_frame    = (ld->source[4]>>6) & 1;
	      syntax_arith_coding = (ld->source[4]>>5) & 1;
              adv_pred_mode       = (ld->source[4]>>4) & 1;
              gob = ld->source[2]>>3;
              mba = ((ld->source[2] & 7)<<6) | ld->source[3]>>2;
	      /* We continue the innate brokenness of the Telenor decoder wrt frames */
	      /* more than 256 pixels in height with gobsync. */
              ypos = gob;
              xpos = mba;
              /* Cope with brokenness */
              if (xpos >= mb_width) {
                ypos += (xpos / mb_width);
                xpos = (xpos % mb_width);
              }
	    }
            break;
          case 3:
            //safe_printf("Mode C\n\r");
            /* Mode C header */
            break;
        }
	if (missed) {
          //safe_printf("Copying missed Macroblocks\n\r");
	  /* We have just missed 1 or more packets. Copy the MBs we missed. */
	  CopyMacroBlocks(decstate.xpos, decstate.ypos, xpos, ypos);
	  decstate.xpos = xpos;
	  decstate.ypos = ypos;
	  decstate.gob  = gob;
	  /* Ought to set stored_quant[whatever] thingies */
	}
        //safe_printf("Packet: [%08x,%d] (%d,%d,%d)\n\r", packet_data[0]+payload_headersize, (packet_data[1]-payload_headersize)*8-sbit-ebit, sbit, packet_data[1]-payload_headersize, ebit);
        initbits(ld->source + payload_headersize, sbit, packet_data[1]-payload_headersize, ebit);
        //safe_printf("Bits left = %d\n\r", bits_left_in_packet());
        if (firstpacket) {
          //safe_printf("Doing first packet stuff...");
          quants_stored_ptr = &quants_stored[0];
          quants_stored_last_y = 1;
          for (i=2; i>=0; i--) {
            tmp = oldrefframe[i];
            oldrefframe[i] = refframe[i];
            refframe[i] = tmp;
            newframe[i] = refframe[i];
          }
        }
        if (j == 0) {
          //safe_printf("Doing packet 0 stuff");
          startcode();
          //safe_printf(".");
          flushbits(PSC_LENGTH);
          //safe_printf(".");
          if (showbits(PSC_LENGTH) == 1l) {
            //safe_printf("NULL!");
            /* We have 2 startcodes... Must be a null */
            //printf("Null\n");
            nullcopy(output, prev);
            flushbits(PSC_LENGTH);
            flushbits(32);
            flushbits(32);
            ld->source = (unsigned char *)(atbsource()-4);
            //((int (*)(void))0)();
            return ((char *)ld->source);
          }
          //safe_printf(".");
          getfirstheader(); /* possible problems here */
          //safe_printf("Done\n\r");
        }
        if (firstpacket) {
          if (mv_outside_frame && framenum > 0) {
            make_edge_image(oldrefframe[0],coded_picture_width, coded_picture_height,32);
            make_edge_image(oldrefframe[1],chrom_width, chrom_height,16);
            make_edge_image(oldrefframe[2],chrom_width, chrom_height,16);
          }
          mark_top_mvs();
          //safe_printf("Done\n\r");
        }
        //safe_printf("Decoding packet...");
        getpicture(&framenum, firstpacket);
        firstpacket = 0;
#if 0
        if (bits_left_in_packet() < 0) {
          for (i = -8; i < 0; i++) {
            safe_printf("%x ", *((char *)packet_data[0] + packet_data[1] + i));
          }
          safe_printf("\n\rProblems in packet %d of %d\n\r", j+1, packetcount);
          safe_printf("Overran by %d bits\n\r", -bits_left_in_packet());
        }
#endif
        //safe_printf("Done\n\r");
        missed = 0;
      }
    }

    if (missed) {
      //safe_printf("Copying missed Macroblocks\n\r");
      /* We have just missed 1 or more packets. Copy the MBs we missed. */
      CopyMacroBlocks(decstate.xpos, decstate.ypos, mb_width-1, mb_height-1);
    }
    if (df_mode)
      DoEdgeFilter();

#ifdef PLBUG
     sprintf((char *)bugmsg,"done get picture %d th frame",framenum);
#endif

    /* it might be better to call storeframe() here rather than in
     * getpicture
     */
    framenum++;
    tr_framenum++;

#ifdef PLBUG
    sprintf((char *)bugmsg,"done inc frame %d th frame",framenum);
    sprintf((char *)tmpc,"| %x | %x ",(int)source,(int)ld->source);
#endif

    if (pb_frame) {
      //safe_printf("storeframe(bframe)\n\r");
      storeframe(bframe);
      defer_bool=1;
    } else {
      //safe_printf("storeframe(newframe)\n\r");
      storeframe(newframe);
    }

    ld->source = (unsigned char *)(atbsource()-4);
    return ((char *)ld->source);

}// end DecompEntry


////////////////////////////////////////////////////////////////////////////
