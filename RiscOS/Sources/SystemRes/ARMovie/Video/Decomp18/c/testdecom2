/* testdecomp.c*/
/* yes, I know it's grotty. */
/* does not patch the codec*/
#include <stdio.h>
#include <stdlib.h>
#include "err.h"
#include "decomp.h"

#include "profile.h"
#ifdef PROFILE
extern long int sactime,mbtime,blocktime,adtime,rbtime,sttime,rectime;
#endif
#ifdef PROFILE2
extern long int rectime;
extern long int recctime;
extern long int recotime;
extern long int rechtime;
extern long int rechctime;
extern long int rechotime;
extern long int recvtime;
extern long int recvctime;
extern long int recvotime;
extern long int rec4time;
extern long int rec4ctime;
extern long int rec4otime;
#endif
#include "config.h"
unsigned int pint _ANSI_ARGS_((unsigned int i,int num));
unsigned int pint(unsigned int i,int num)
{fprintf(stderr,"%d ->%x\n",num,i);
return i;
}

os_error *errout;

int main(argc,argv)
int argc;

char *argv[];

{
   FILE *scrfile;
   long int leng,leng2,outsize;
   char *source,*newsource,*stemp;
   char *output,*outpu2,*temp;
   int numrun,x,y,i;
   if (argc != 7)
   {printf("usage: test sourcefile destfile outsize numrun x y\n");
    exit(1);      /*hardcode number of args*/
   }
   if (!(scrfile=fopen(argv[1],"rb"))) {
    printf("Input file %s not found\n",argv[2]);
    exit(1);
   }
   fseek(scrfile,0,SEEK_END);
   leng=ftell(scrfile);
   fseek(scrfile,0,SEEK_SET);
   if (!(source = malloc((size_t)leng+100)))
   { printf("could not malloc\n");
     exit(1);
   }
   leng2 = fread(source,sizeof(char),(size_t)leng,scrfile);
   if (leng2 !=leng)
   { printf("not the right length: %ld, %ld \n",leng,leng2);
     free(source);
     exit(1);
   }
   fclose(scrfile);
   if (1 !=(sscanf(argv[3],"%ld",&outsize)))
   { printf("invalid number: %s \n",argv[3]);
     free(source);
     exit(1);
   }
   if (!(output=malloc((size_t)outsize+100)))
   { printf("malloc failed\n");
     free(source);
     exit(1);
   }
   if (!(outpu2=malloc((size_t)outsize+100)))
   { printf("malloc failed\n");
     free(source);
     free(output);
     exit(1);
   }

   if (1 !=(sscanf(argv[4],"%d",&numrun)))
   { printf("invalid number: %s \n",argv[4]);
     free(source);
     free(output);
     free(outpu2);
     exit(1);
   }
   if (1 !=(sscanf(argv[5],"%d",&x)))
   { printf("invalid number: %s \n",argv[5]);
     free(source);
     free(output);
     free(outpu2);
     exit(1);
   }
   if (1 !=(sscanf(argv[6],"%d",&y)))
   { printf("invalid number: %s \n",argv[6]);
     free(source);
     free(output);
     free(outpu2);
     exit(1);
   }
   if (!(scrfile=fopen(argv[2],"wb"))) {
    printf("Could not open file %s for output\n",argv[2]);
    free(source);
    free(output);
    free(outpu2);
    exit(1);
   }
   errout = InitEntry(x,y,PARM_P,(int *)0);
   if (errout!=0)
   {printf("Init Error: %s\n",errout->errmess);
    fclose(scrfile);
    free(source);
    free(output);
    free(outpu2);
    exit(1);
   }
   stemp=source;
   for(i=0;i<numrun;i++)
   {newsource=DecompEntry(stemp,output,outpu2,0);
    leng2 =fwrite(output,sizeof(char),(size_t)outsize,scrfile);
    printf("wrote frame %d\n",i);
    if(leng2!=outsize)
    { printf("error writing to output\n");
      fclose(scrfile);
      free(source);
      free(output);
      free(outpu2);
      exit(1);
    }
  /*  getchar();*/
    temp = outpu2;
    outpu2=output;
    output = temp;
  /*  stemp=newsource;*/

   }
   errout = ShutEntry(x,y,PARM_S,(int *)0);
   if (errout!=0)
   {printf("Init Error: %s\n",errout->errmess);
    fclose(scrfile);
    free(source);
    free(output);
    free(outpu2);
    exit(1);
   }
   fclose(scrfile);
   free(source);
   free(output);
   free(outpu2);
#ifdef PROFILE
printf("mbtime %ld sactime %ld blocktime %ld adtime %ld rbtime %ld sttime %ld rectime %ld\n",
        mbtime,    sactime,    blocktime,    adtime,     rbtime,    sttime,   rectime);
#endif
#ifdef PROFILE2
printf("rectime: %ld\n",       rectime);
printf("recctime: %ld\n",      recctime);
printf("recotime: %ld\n",      recotime);
printf("rechtime: %ld\n",      rechtime);
printf("rechctime: %ld\n",     rechctime);
printf("rechotime: %ld\n",     rechotime);
printf("recvtime: %ld\n",      recvtime);
printf("recvctime: %ld\n",     recvctime);
printf("recvotime: %ld\n",     recvotime);
printf("rec4time: %ld\n",      rec4time);
printf("rec4ctime: %ld\n",     rec4ctime);
printf("rec4otime: %ld\n",     rec4otime);

#endif
/*_fmapstore("pprof");*/
}
