#include "HierProf.h"

/* getvlc.c, variable length decoding                                       */

/*
 * tmndecode
 * Copyright (C) 1995 Telenor R&D
 *                    Karl Olav Lillevold <kol@nta.no>
 *
 * based on mpeg2decode, (C) 1994, MPEG Software Simulation Group
 * and mpeg2play, (C) 1994 Stefan Eckart
 *                         <stefan@lis.e-technik.tu-muenchen.de>
 *
 */


/*#include <stdio.h>*/

#include "config.h"
#include "global.h"
#include "getvlc.h"
#include "DISCLAIM.h"

int getTMNMV()
{
  HierProf_FnStart("getTMNMV")
  int code;

  /*if (trace)
    printf("motion_code (");*/

  if (getbits1(1))
  {
    /*if (trace)
      printf("1): 0\n");*/
    HierProf_ReturnValue( 0)
  }

  if ((code = showbits(12))>=512)
  {
    code = (code>>8) - 2;
    flushbits(TMNMVtab0[code].len);

    /*if (trace)
    {
      printf("0");
      printbits(code+2,4,TMNMVtab0[code].len);
      printf("): %d\n", TMNMVtab0[code].val);
    } */

    HierProf_ReturnValue( TMNMVtab0[code].val)
  }

  if (code>=128)
  {
    code = (code>>2) -32;
    flushbits(TMNMVtab1[code].len);

    /*if (trace)
    {
      printf("0");
      printbits(code+32,10,TMNMVtab1[code].len);
      printf("): %d\n",TMNMVtab1[code].val);
    } */

    HierProf_ReturnValue( TMNMVtab1[code].val)
  }

  if ((code-=5)<0)
  {
    /*if (!quiet)
      fprintf(stderr,"Invalid motion_vector code\n");*/
    fault=1;
    HierProf_ReturnValue( 0)
  }

  flushbits(TMNMVtab2[code].len);

  /*if (trace)
  {
    printf("0");
    printbits(code+5,12,TMNMVtab2[code].len);
    printf("): %d\n",TMNMVtab2[code].val);
  } */

  HierProf_ReturnValue( TMNMVtab2[code].val)
  HierProf_NonVoidFnStop()
}


int getMCBPC()
{
  HierProf_FnStart("getMCBPC")
  int code;

  /*if (trace)
    printf("MCBPC (");*/

  code = showbits(9);

  if (code == 1) {
    /* macroblock stuffing */
    /*if (trace)
      printf("000000001): stuffing\n");*/
    flushbits(9);
    HierProf_ReturnValue( 255)
  }

  if (code == 0) {
    /*if (!quiet)
      fprintf(stderr,"Invalid MCBPC code\n");*/
    fault = 1;
    HierProf_ReturnValue( 0)
  }

  if (code>=256)
  {
    flushbits(1);
    /*if (trace)
      printf("1): %d\n",0);*/
    HierProf_ReturnValue( 0)
  }

  flushbits(MCBPCtab[code].len);

  /*if (trace)
  {
    printbits(code,9,MCBPCtab[code].len);
    printf("): %d\n",MCBPCtab[code].val);
  } */

  HierProf_ReturnValue( MCBPCtab[code].val)
  HierProf_NonVoidFnStop()
}

int getMODB()
{
  HierProf_FnStart("getMODB")
  int code;
  int MODB;

  /*if (trace)
    printf("MODB (");*/

  code = showbits(2);

  if (code < 2) {
    /*if (trace)
      printf("0): MODB = 0\n");*/
    MODB = 0;
    flushbits(1);
  }
  else if (code == 2) {
    /*if (trace)
      printf("10): MODB = 1\n");*/
    MODB = 1;
    flushbits(2);
  }
  else { /* code == 3 */
    /*if (trace)
      printf("11): MODB = 2\n");*/
    MODB = 2;
    flushbits(2);
  }
  HierProf_ReturnValue( MODB)
  HierProf_NonVoidFnStop()
}


int getMCBPCintra()
{
  HierProf_FnStart("getMCBPCintra")
  int code;

  /*if (trace)
    printf("MCBPCintra (");*/

  code = showbits(9);

  if (code == 1) {
    /* macroblock stuffing */
    /*if (trace)
      printf("000000001): stuffing\n");*/
    flushbits(9);
    HierProf_ReturnValue( 255)
  }

  if (code < 8) {
    /*if (!quiet)
      fprintf(stderr,"Invalid MCBPCintra code\n");*/
    fault = 1;
    HierProf_ReturnValue( 0)
  }

  code >>= 3;

  if (code>=32)
  {
    flushbits(1);
    /*if (trace)
      printf("1): %d\n",3);*/
    HierProf_ReturnValue( 3)
  }

  flushbits(MCBPCtabintra[code].len);

  /*if (trace)
  {
    printbits(code,6,MCBPCtabintra[code].len);
    printf("): %d\n",MCBPCtabintra[code].val);
  } */

  HierProf_ReturnValue( MCBPCtabintra[code].val)
  HierProf_NonVoidFnStop()
}

int getCBPY()
{
  HierProf_FnStart("getCBPY")
  int code;

  /*if (trace)
    printf("CBPY (");*/

  code = showbits(6);
  if (code < 2) {
    /*if (!quiet)
      fprintf(stderr,"Invalid CBPY code\n");*/
    fault = 1;
    HierProf_ReturnValue( -1)
  }

  if (code>=48)
  {
    flushbits(2);
    /*if (trace)
      printf("11): %d\n",0);*/
    HierProf_ReturnValue( 0)
  }

  flushbits(CBPYtab[code].len);

  /*if (trace)
  {
    printbits(code,6,CBPYtab[code].len);
    printf("): %d\n",CBPYtab[code].val);
  } */

  HierProf_ReturnValue( CBPYtab[code].val)
  HierProf_NonVoidFnStop()
}

