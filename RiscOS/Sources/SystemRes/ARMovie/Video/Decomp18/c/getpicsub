/* getpicsub.c, picture decoding                                               */

/*
 * tmndecode
 * Copyright (C) 1995 Telenor R&D
 *                    Karl Olav Lillevold <kol@nta.no>
 *
 * modified by Wayne Ellis BT Labs to run Annex E Arithmetic Decoding
 *			   <ellis_w_wayne@bt-web.bt.co.uk>
 *
 * based on mpeg2decode, (C) 1994, MPEG Software Simulation Group
 * and mpeg2play, (C) 1994 Stefan Eckart
 *                         <stefan@lis.e-technik.tu-muenchen.de>
 */

#include <stdio.h>
#include <string.h>

#include "kernel.h"

#include "config.h"
#include "global.h"
#include "filter.h"

#define TEST_SPARSITY 0

/* RJW */
#define abs(a) ((a)>0 ? (a) : -(a))

#include "indices.h"
#include "sactbls.h"
#include "aaddb.h"
#include "memory.h"

#if TEST_SPARSITY
static int *Sparseness;
#define SPARSITY_TEST(A); Sparseness[A]++;
#else
#define SPARSITY_TEST(A); {}
#endif

/* private prototypes*/
//static
void getMBs _ANSI_ARGS_((void));
void getMBs_obmc _ANSI_ARGS_((void));
void getMBs_sac _ANSI_ARGS_((void));
void getMBs_obmc_sac _ANSI_ARGS_((void));
//static
int motion_decode _ANSI_ARGS_((int vecx,int vecy,int pmvx,int pmvy));
int motion_decode_noapcs _ANSI_ARGS_((int vecx,int vecy/*,int pmvx,int pmvy*/));
int motion_decode_ret _ANSI_ARGS_((void));
//static
int find_pmv _ANSI_ARGS_((int vecx, int vecy, int x, int y, int block/*, int comp*/));
//static
void addblock _ANSI_ARGS_((int comp, int bx, int by,int addflag));
//static
void reconblock_b _ANSI_ARGS_((int comp,int bx,int by,int mode,int bdx, int bdy));
//static
void find_bidir_limits _ANSI_ARGS_((int vec, int *start, int*stop, int nhv));
//static
void find_bidir_chroma_limits _ANSI_ARGS_((int vec, int *start, int*stop));
//static
void make_edge_image _ANSI_ARGS_ ((unsigned char *src, int width, int height, int edge));
void interpolate_image _ANSI_ARGS_((unsigned char *in, unsigned char *out, int width, int height));

/* decode one frame or field picture */

void mark_top_mvs(void) {

  int i,k;
  int *p,*q;
  char *qm;

  /* mark MV's above the picture */
  qm = MM_INDEX(0,0);
  for (i = mb_width; i >=0; i--) {
    p = MV_INDEX(0,0,0,i);
    for (k = 9; k >=0; k--)
      *(p++)     = NO_VEC;
    qm += (1<<MV_d3_log);
    *qm = MODE_INTRA;
  }
  /* zero MV's on the sides of the picture */
  for (i = mb_height; i >= 0; i--) {
    p = MV_INDEX(0,0,i,0);
    q = MV_INDEX(0,0,i,mb_width+1);
    for (k = 9; k >= 0; k--) {
      *(p++) = 0;
      *(q++) = 0;
    }
    qm = MM_INDEX(i,0);
    *qm = MODE_INTRA;
    *(qm+((mb_width+1)<<MV_d3_log)) = MODE_INTRA;
  }
}


/* move/add 8x8-Block from block[comp] to refframe or bframe */

/* bidirectionally reconstruct 8x8-Block from block[comp] to bframe */

#if 0
//static
void reconblock_b(comp,bx,by,mode,bdx,bdy)
int comp,bx,by;
int mode,bdx,bdy;
{
  int cc,i,j,k, ii, t;
  unsigned char *bfr, *ffr;
  int BMVx, BMVy;
  int xa,xb,ya,yb,x,y,xvec,yvec,mvx,mvy;
  int xint,xhalf,yint,yhalf,pel;

  int *p;
  int tmp;

  x = bx/16+1;y=by/16+1;

  if (comp < 4) {
    /* luma */
    p = MV_INDEX(0,((mode == MODE_INTER4V) ? comp+1 : 0),y,x);
    mvx = *(p);
    mvy = *(p+1);
    BMVx = (bdx == 0 ? (trb-trd)* mvx*itrd/TRDDIV : trb * mvx*itrd/TRDDIV + bdx - mvx);
    BMVy = (bdy == 0 ? (trb-trd)* mvy*itrd/TRDDIV : trb * mvy*itrd/TRDDIV + bdy - mvy);
    /* luminance */
    find_bidir_limits(BMVx,&xa,&xb,comp&1);
    find_bidir_limits(BMVy,&ya,&yb,(comp&2)>>1);
    bfr = bframe[0] +
      coded_picture_width*(by+((comp&2)<<2)) + bx + ((comp&1)<<3);
    ffr = newframe[0] +
      coded_picture_width*(by+((comp&2)<<2)) + bx + ((comp&1)<<3);
    ii = coded_picture_width;
  } else {
    if (mode == MODE_INTER4V) {
      /* chroma */
      p = MV_INDEX(0,1,y,x);
      xvec = yvec = 0;
      for (k = 4; k > 0; k--) {
        mvx = *(p++);
        mvy = *(p++);
	xvec += (bdx == 0 ? (trb-trd)* mvx*itrd/TRDDIV : trb * mvx*itrd/TRDDIV + bdx - mvx);
	yvec += (bdy == 0 ? (trb-trd)* mvy*itrd/TRDDIV : trb * mvy*itrd/TRDDIV + bdy - mvy);
      }
    } else {
      /* chroma */
      p = MV_INDEX(0,0,y,x);
      mvx = *(p);
      mvy = *(p+1);
      xvec = (bdx == 0 ? (trb-trd)* mvx*itrd/TRDDIV : trb * mvx*itrd/TRDDIV + bdx - mvx);
      yvec = (bdy == 0 ? (trb-trd)* mvy*itrd/TRDDIV : trb * mvy*itrd/TRDDIV + bdy - mvy);
      xvec *= 4;
      yvec *= 4;
    }
    /* chroma rounding (table 16/H.263) */
    BMVx = ((int)roundtab[abs(xvec)%16] + (abs(xvec)/16)*2);
    if (xvec<0)
      BMVx = -BMVx;
    BMVy = ((int)roundtab[abs(yvec)%16] + (abs(yvec)/16)*2);
    if (yvec<0)
      BMVy = -BMVy;

    /* chrominance */

    find_bidir_chroma_limits(BMVx,&xa,&xb);
    find_bidir_chroma_limits(BMVy,&ya,&yb);

    /* scale coordinates and vectors*/
    bx >>= 1;
    by >>= 1;
    t  = chrom_width*(by+((comp&2)<<2)) + bx + (comp&8);
    cc = (comp&1)+1; /* color component index */
    ffr = newframe[cc] + t;
    bfr = bframe[cc] + t;
    ii = chrom_width;
  }

  xint = BMVx>>1;
  xhalf = BMVx - 2*xint;
  yint = BMVy>>1;
  yhalf = BMVy - 2*yint;

  ffr += xint + (yint+ya)*ii;
  bfr += ya*ii;


  if (!xhalf && !yhalf) {
    for (j = ya; j < yb; j++) {
      for (i = xa; i < xb; i++) {
	pel = ffr[i];
	bfr[i] = ((unsigned int)(pel + bfr[i]))>>1;
      }
      bfr += ii;
      ffr += ii;
    }
  } else if (xhalf && !yhalf) {
    for (j = ya; j < yb; j++) {
      for (i = xa; i < xb; i++) {
	pel = ((unsigned int)(ffr[i]+ffr[i+1]+1))>>1;
	bfr[i] = ((unsigned int)(pel + bfr[i]))>>1;
      }
      bfr += ii;
      ffr += ii;
    }
  } else if (!xhalf && yhalf) {
    for (j = ya; j < yb; j++) {
      for (i = xa; i < xb; i++) {
	pel = ((unsigned int)(ffr[i]+ffr[ii+i]+1))>>1;
	bfr[i] = ((unsigned int)(pel + bfr[i]))>>1;
      }
      bfr += ii;
      ffr += ii;
    }
  } else { /* if (xhalf && yhalf) */
    for (j = ya; j < yb; j++) {
      for (i = xa; i < xb; i++) {
	pel = ((unsigned int)(ffr[i]+ffr[i+1]+ffr[ii+i]+ffr[ii+i+1]+2))>>2;
	bfr[i] = ((unsigned int)(pel + bfr[i]))>>1;
      }
      bfr += ii;
      ffr += ii;
    }
  }
}
#endif

#if 0
int motion_decode(int vec,int pmv)
{
  if (vec > 31) vec -= 64;
  vec += pmv;
  if (!long_vectors) {
    if (vec > 31)
      vec -= 64;
    if (vec < -32)
      vec += 64;
  } else {
    if (pmv < -31 && vec < -63)
      vec += 64;
    if (pmv > 32 && vec > 63)
      vec -= 64;
  }
  return vec;
}
#endif

#if 0
int find_pmv(x, y, block,comp)
int x,y,block,comp;
{
  int p1,p2,p3;
  int xin1,xin2,xin3;
  int yin1,yin2,yin3;
  int vec1,vec2,vec3;
  int l8,o8,or8;

  int *ptr;

#if 1
  int xx,yy;

  xx = afind_pmv(x,y,block,comp);
#endif

  x++;y++;

  ptr = MM_INDEX(y,x);
  l8  = ((*(ptr-(1<<MV_d3_log)) & MODE_MASK) == MODE_INTER4V);
  o8  = ((*(--ptr) & MODE_MASK) == MODE_INTER4V);
  or8 = ((*(ptr+(1<<MV_d3_log)) & MODE_MASK) == MODE_INTER4V);

  switch (block) {
  case 0:
    vec1 = (l8<<1)        ; yin1 = y  ; xin1 = x-1;
    vec2 = (o8+(o8<<1))   ; yin2 = y-1; xin2 = x;
    vec3 = (or8+(or8<<1)) ; yin3 = y-1; xin3 = x+1;
    break;
  case 1:
    vec1 = (l8<<1)        ; yin1 = y  ; xin1 = x-1;
    vec2 = (o8+(o8<<1))   ; yin2 = y-1; xin2 = x;
    vec3 = (or8+(or8<<1)) ; yin3 = y-1; xin3 = x+1;
    break;
  case 2:
    vec1 = 1              ; yin1 = y  ; xin1 = x;
    vec2 = (o8<<2)        ; yin2 = y-1; xin2 = x;
    vec3 = (or8+(or8<<1)) ; yin3 = y-1; xin3 = x+1;
    break;
  case 3:
    vec1 = (l8<<2)        ; yin1 = y  ; xin1 = x-1;
    vec2 = 1              ; yin2 = y  ; xin2 = x;
    vec3 = 2              ; yin3 = y  ; xin3 = x;
    break;
  case 4:
    vec1 = 3            ; yin1 = y  ; xin1 = x;
    vec2 = 1            ; yin2 = y  ; xin2 = x;
    vec3 = 2            ; yin3 = y  ; xin3 = x;
    break;
  default:
    break;
  }
  p1 = *(MV_INDEX(comp,vec1,yin1,xin1));
  p2 = *(MV_INDEX(comp,vec2,yin2,xin2));
  p3 = *(MV_INDEX(comp,vec3,yin3,xin3));

  if (newgob && (block == 0 || block == 1 || block == 2)) {
    p2 = NO_VEC;
  }
  if (p2 == NO_VEC) {
    p2 = p3 = p1;
  }

#if 1
  yy = (( p1+p2+p3 - mmax(p1,mmax(p2,p3)) - mmin(p1,mmin(p2,p3))));
  if ((xx != yy)) {
    printf("%d %d\n", xx, yy);
    printf("%d %d %d\n", p1,p2,p3);
    printf("%d %d %d\n", fuck1,fuck2,fuck3);
  }

  return yy;
#else
  return (( p1+p2+p3 - mmax(p1,mmax(p2,p3)) - mmin(p1,mmin(p2,p3))));
#endif
}
#endif

#if 0
void find_bidir_limits(vec, start, stop, nhv)
int vec;
int *start, *stop, nhv;
{
  /* limits taken from C loop in section G5 in H.263 */
  *start = mmax(0,(-vec+1)/2 - nhv*8);
  *stop = mmin(8,16-(vec+1)/2 - nhv*8);
}

void find_bidir_chroma_limits(vec, start, stop)
int vec;
int *start, *stop;
{
  /* limits taken from C loop in section G5 in H.263 */
  *start = mmax(0,(-vec+1)/2);
  *stop = mmin(8,8-(vec+1)/2);
}
#endif

#if 0
void make_edge_image(unsigned char *src,int width,int height,int edge)
{
  int i,j;
  unsigned char *p1,*p2,*p3,*p4;
  unsigned char *o1,*o2,*o3,*o4;

  amake_edge_image(src, width, height, edge);

  /* left and right edges */
  o1 = src;
  for (j = 0; j < height;j++) {
    for (i = 0; i < edge; i++) {
      if (*(o1 - i - 1) != *o1)
        ((void(*)(void))0)();
      if (*(o1 + width + i) != *(o1 + width - 1))
        ((void(*)(void))0)();
    }
    o1 += width + (edge<<1);
  }

  /* top and bottom edges */
  p1 = o1 = src;
  p2 = o2 = src + (width + (edge<<1))*(height-1);
  for (j = 0; j < edge;j++) {
    p1 = p1 - (width + (edge<<1));
    p2 = p2 + (width + (edge<<1));
    for (i = 0; i < width; i++) {
      if (*(p1 + i) != *(o1 + i))
        ((void(*)(void))0)();
      if (*(p2 + i) != *(o2 + i))
        ((void(*)(void))0)();
    }
  }

  /* corners */
  p1 = src - (width+(edge<<1)) - 1;
  p2 = p1 + width + 1;
  p3 = src + (width+(edge<<1))*(height)-1;
  p4 = p3 + width + 1;

  o1 = src;
  o2 = o1 + width - 1;
  o3 = src + (width+(edge<<1))*(height-1);
  o4 = o3 + width - 1;
  for (j = 0; j < edge; j++) {
    for (i = 0; i < edge; i++) {
      if (*(p1 - i) != *o1)
        ((void(*)(void))0)();
      if (*(p2 + i) != *o2)
        ((void(*)(void))0)();
      if (*(p3 - i) != *o3)
        ((void(*)(void))0)();
      if (*(p4 + i) != *o4)
        ((void(*)(void))0)();
    }
    p1 = p1 - (width + (edge<<1));
    p2 = p2 - (width + (edge<<1));
    p3 = p3 + width + (edge<<1);
    p4 = p4 + width + (edge<<1);
  }
}
#endif

#if 0
// Appears to be unused...
void interpolate_image(in, out, width, height)
/* only used for displayed interpolated frames, not reconstructed ones */
unsigned char *in, *out;
int width, height;
{

  int x,xx,y,w2;

  unsigned char *pp,*ii;

  w2 = 2*width;

  /* Horizontally */
  pp = out;
  ii = in;
  for (y = 0; y < height-1; y++) {
    for (x = 0,xx=0; x < width-1; x++,xx+=2) {
      *(pp + xx) = *(ii + x);
      *(pp + xx+1) = ((unsigned int)(*(ii + x)  + *(ii + x + 1)))>>1;
      *(pp + w2 + xx) = ((unsigned int)(*(ii + x) + *(ii + x + width)))>>1;
      *(pp + w2 + xx+1) = ((unsigned int)(*(ii + x) + *(ii + x + 1) +
			   *(ii + x + width) + *(ii + x + width + 1)))>>2;

    }
    *(pp + w2 - 2) = *(ii + width - 1);
    *(pp + w2 - 1) = *(ii + width - 1);
    *(pp + w2 + w2 - 2) = *(ii + width + width - 1);
    *(pp + w2 + w2 - 1) = *(ii + width + width - 1);
    pp += w2<<1;
    ii += width;
  }

  /* last lines */
  for (x = 0,xx=0; x < width-1; x++,xx+=2) {
    *(pp+ xx) = *(ii + x);
    *(pp+ xx+1) = ((unsigned int)(*(ii + x) + *(ii + x + 1) + 1))>>1;
    *(pp+ w2+ xx) = *(ii + x);
    *(pp+ w2+ xx+1) = ((unsigned int)(*(ii + x) + *(ii + x + 1) + 1))>>1;
  }

  /* bottom right corner pels */
  *(pp + (width<<1) - 2) = *(ii + width -1);
  *(pp + (width<<1) - 1) = *(ii + width -1);
  *(pp + (width<<2) - 2) = *(ii + width -1);
  *(pp + (width<<2) - 1) = *(ii + width -1);
}
#endif
