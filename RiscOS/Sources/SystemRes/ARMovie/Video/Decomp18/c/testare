#include <stdio.h>
#include <string.h>
#define GLOBAL
#include "config.h"
#include "global.h"
#include "arecon.h"
int bzero[64] =
{
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0

};
extern void reco _ANSI_ARGS_((unsigned char *s, int *d, int lx, int lx2, int addflag,int c, int xa, int xb, int ya, int yb,unsigned char omp[5][8][8]));
unsigned char bone[64] =
{
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1


} ;




int bi[64];

int bif[64] ;


void printblock(int *bk)
{
  int i,j;
  for(i=0;i<8;i++)
   {for(j=0;j<8;j++)
     printf("%8d ",bk[i+j*8]);
    printf("\n");
   }
}
void printcblock(unsigned char *bk)
{
  int i,j;
  for(i=0;i<8;i++)
   {for(j=0;j<8;j++)
     printf("%8d ",bk[i+j*8]);
    printf("\n");
   }
}


int main(argc,argv)
int argc;
char * argv[];
{
  memcpy(bif,bzero,64*4);
printf("asm reco:\n");
  areco(&bone[0],&bzero[0],8,8,0,0,0,8,0,8,OM);
  printblock(bzero); putchar('\n');
  areco(&bone[0],&bzero[0],8,8,1,1,0,8,0,8,OM);
  printblock(bzero); putchar('\n');
  areco(&bone[0],&bzero[0],8,8,1,2,0,8,0,8,OM);
  printblock(bzero); putchar('\n');
  areco(&bone[0],&bzero[0],8,8,1,3,0,8,0,8,OM);
  printblock(bzero); putchar('\n');
  areco(&bone[0],&bzero[0],8,8,1,4,0,8,0,8,OM);
  printblock(bzero); putchar('\n');

printf("reco:\n");

  reco(&bone[0],&bif[0],8,8,0,0,0,8,0,8,OM);
  printblock(bif); putchar('\n');
  reco(&bone[0],&bif[0],8,8,1,1,0,8,0,8,OM);
  printblock(bif); putchar('\n');
  reco(&bone[0],&bif[0],8,8,1,2,0,8,0,8,OM);
  printblock(bif); putchar('\n');
  reco(&bone[0],&bif[0],8,8,1,3,0,8,0,8,OM);
  printblock(bif); putchar('\n');
  reco(&bone[0],&bif[0],8,8,1,4,0,8,0,8,OM);
  printblock(bif); putchar('\n');






}
