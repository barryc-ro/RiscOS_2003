#include <stdlib.h>

#include "swis.h"

#include "DynamArea.h"






typedef union	{
	int	value;
	struct	{
		unsigned int	access			:  4;
		unsigned int	notbufferable		:  1;
		unsigned int	notcacheable		:  1;
		unsigned int	doublemapped		:  1;
		unsigned int	notdraggable		:  1;
		unsigned int	specificphysicalpages	:  1;
		unsigned int	other9_31		: 23;
		}
		data;
	}
	Desk_dynamicarea_flags;



static Desk_DynamicArea_block*	Desk_DynamicArea_lastblock = NULL;
/*
Always points to last dynamic area created.
 */


void	Desk_DynamicArea_DeleteAll( void)
	{
	while ( Desk_DynamicArea_lastblock)	{
		Desk_DynamicArea_Delete( Desk_DynamicArea_lastblock);
		}
	}



void	Desk_DynamicArea_Create( Desk_DynamicArea_block* da, size_t maxsize, const char* name)
	{
	Desk_dynamicarea_flags	flags;

	/*
	atexit doesn't work too well in modules, so it is up to the
	client to call Desk_DynamicArea_DeleteAll from its module
	finalisation code.
	 */

	da->datasize	= 0;

	flags.value 		= 0;
	flags.data.notdraggable	= 1;

	err=	_swix( OS_DynamicArea, _INR( 0, 8)|_OUT(1)|_OUT(3),
			0,		/* Create		*/
			-1,		/* No initial id	*/
			0,		/* Initial size		*/
			-1,		/* No initial base	*/
			flags.value,	/* Flags	*/
			maxsize,	/* Max size		*/
			NULL,		/* Handler		*/
			NULL,		/* Reference for handler*/
			name,		/* Name	*/
			&da->id,
			&da->data
			)
	/* Get size of created area	*/
	err=	_swix( OS_DynamicArea, _INR( 0, 1)|_OUT(2), 2, da->id, &da->size)

	da->previous			= Desk_DynamicArea_lastblock;
	Desk_DynamicArea_lastblock	= da;


	}




void	Desk_DynamicArea_Delete( Desk_DynamicArea_block* da)
	{


	err=	_swix( OS_DynamicArea, _INR( 0, 1), 1, da->id)



	da->id		= 0;
	da->data	= NULL;
	da->datasize	= 0;
	da->size	= 0;


		{
		/* Keep the single-linked list of dynamic areas up-to-date.	*/
		if ( Desk_DynamicArea_lastblock==da)	{
			Desk_DynamicArea_lastblock = da->previous;
			}
		else	{
			Desk_DynamicArea_block*	d;
			for ( d = Desk_DynamicArea_lastblock; d; d=d->previous)	{
				if ( d->previous==da)	{
					d->previous = da->previous;
					break;
					}
				}
			}
		}
	}




void*	Desk_DynamicArea_SetSize( Desk_DynamicArea_block* da, size_t newsize)
	{
	Desk_os_error*	e;
	int		dsize		= newsize - da->size;
	unsigned int	dsizeout	= 0;


	e = (Desk_os_error*) _swix( OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), da->id, dsize, &dsizeout);

	da->size += (dsize > 0) ? dsizeout : -dsizeout;


	if ( e)	Desk_Error2_CheckOS( e);


	da->datasize	= newsize;
	return da->data;
	}
