/* getpic.c, picture decoding                                               */

/*
 * tmndecode
 * Copyright (C) 1995 Telenor R&D
 *                    Karl Olav Lillevold <kol@nta.no>
 *
 * modified by Wayne Ellis BT Labs to run Annex E Arithmetic Decoding
 *			   <ellis_w_wayne@bt-web.bt.co.uk>
 *
 * based on mpeg2decode, (C) 1994, MPEG Software Simulation Group
 * and mpeg2play, (C) 1994 Stefan Eckart
 *                         <stefan@lis.e-technik.tu-muenchen.de>
 */

#include <stdio.h>
#include <string.h>

#include "kernel.h"

#include "config.h"
#include "global.h"
#include "filter.h"
#include "packet.h"

/* RJW */
#define abs(a) ((a)>0 ? (a) : -(a))

#include "indices.h"
#include "sactbls.h"
#include "aaddb.h"
#include "memory.h"

/* private prototypes*/
//static
void getMBs _ANSI_ARGS_((int first));
void getMBs_obmc _ANSI_ARGS_((int first));
void getMBs_sac _ANSI_ARGS_((int first));
void getMBs_obmc_sac _ANSI_ARGS_((int first));
//static
int motion_decode _ANSI_ARGS_((int vecx,int vecy,int pmvx,int pmvy));
int motion_decode_noapcs _ANSI_ARGS_((int vecx,int vecy/*,int pmvx,int pmvy*/));
int motion_decode_ret _ANSI_ARGS_((void));
//static
int find_pmv _ANSI_ARGS_((int vecx, int vecy, int x, int y, int block/*, int comp*/));
//static
void addblock _ANSI_ARGS_((int comp, int bx, int by,int addflag));
//static
void reconblock_b _ANSI_ARGS_((int comp,int bx,int by,int mode,int bdx, int bdy));
//static
void find_bidir_limits _ANSI_ARGS_((int vec, int *start, int*stop, int nhv));
//static
void find_bidir_chroma_limits _ANSI_ARGS_((int vec, int *start, int*stop));
//static
void make_edge_image _ANSI_ARGS_ ((unsigned char *src, int width, int height, int edge));
void interpolate_image _ANSI_ARGS_((unsigned char *in, unsigned char *out, int width, int height));

/* decode one frame or field picture */

extern DecState decstate;

void getpicture(int *framenum, int first)
{
  if (syntax_arith_coding)
    if (adv_pred_mode)
      getMBs_obmc_sac(first);
    else
      getMBs_sac(first);
  else
    if (adv_pred_mode)
      getMBs_obmc(first);
    else
      getMBs(first);
}

/* decode all macroblocks of the current picture */

//static

void getMBs(int first)
{
  int comp;
  int bx, by;

  static int COD, MCBPC, CBPY, CBP, CBPB, MODB, Mode;
  int mvx, mvy, xpos, ypos, gob, k, gobheader_read;
  static int mvdbx, mvdby;
  int startmv,stopmv;
  int *bp;
  int *p;

  if (first) {
    COD = 0;
    CBP = 0;
    CBPB = 0;
    MODB = 0;
    Mode = 0;
    mvdbx=0;
    mvdby=0;
  }

  /* number of macroblocks per picture */
  xpos  = decstate.xpos;
  ypos  = decstate.ypos;
  gob   = decstate.gob;
  newgob = 0;

  gobheader_read = 0;
  while (bits_in_packet()) {
  //for (;;) {

    /* If there aren't at least 22 bits left in the packet, then there can't be a */
    /* startcode here */
    k = bits_left_in_packet();
    if (k <= 16) {
      if (showbits(k) == 0) {
        //safe_printf("Short Startcode exit taken (%d bits)\n\r", k);
        goto end;
      } else {
        //safe_printf("Short Startcode exit NOT taken (%d bits = %d)\n\r", k, showbits(k));
      }
    } else if (k < 22) {
      if (showbits(16) == 0) {
        //safe_printf("Short Startcode exit (2) taken (%d bits)\n\r", k);
        goto end;
      } else {
        //safe_printf("Short Startcode exit (2) NOT taken (%d bits = %d)\n\r", k, showbits(k));
      }
    } else {
      if (!(showbits(22)>>6)) { /* startcode */

        startcode();
        /* in case of byte aligned start code, ie. PSTUF, GSTUF or ESTUF
	   is used */

        if (showbits(22) == (32|SE_CODE)) { /* end of sequence */
	  goto end;
        } else if ((showbits(22) == PSC<<5) ) { /* new picture */
	  goto end;
        } else {
	  gob = getheader() - 1;
	  if (gob > mb_height)
	    goto end;

	  /* GFID is not allowed to change unless PTYPE in picture header changes */
	  //gfid = getbits(2);
	  /* NB: in error-prone environments the decoder can use this
	     value to determine whether a picture header where the PTYPE
	     has changed, has been lost */

	  quant = getbits(7) & 31;
	  *quants_stored_ptr++ = quant;
	  xpos = 0;
	  ypos = gob;

	  newgob = 1;
	  gobheader_read = 1;
	}
      }
    }

    if (!gobheader_read) {
      if (xpos == 0 && ypos > 0)
        newgob = 0;
    } else {
      gobheader_read = 0;
    }
    if (ypos>=mb_height) /* all macroblocks decoded */
      goto end;

  read_cod_huff:
    COD = ((pict_type == PCT_INTER) ? getbits(1) : 0 );
    if (!COD) {
      if (pict_type == PCT_INTRA)
	MCBPC = getMCBPCintra();
      else
	MCBPC = getMCBPC();

      if (MCBPC > 255)
        goto end;
      if (MCBPC == 255) {/* stuffing */
        //safe_printf("[%d %x]\n\r", atbthu(), atbsource());
        if (bits_in_packet()) {
          //safe_printf("Stuffing found!\n\r");
	  goto read_cod_huff;   /* read next COD without advancing MB count */
        } else {
          goto end;
        }
      }
      Mode = MCBPC & 7;
      /* MODB and CBPB */
      if (pb_frame) {
	CBPB = 0;
	MODB = getMODB();
	if (MODB == PBMODE_CBPB_MVDB)
	  CBPB = getbits(6);
      }
      CBPY = getCBPY();
      /* Decode Mode and CBP */
      if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q)
	CBPY = CBPY^(15<<2);		/* needed in huffman coding only */

      CBP = CBPY | (MCBPC >> 4) | (CBP<<6);

      if (Mode == MODE_INTER_Q || Mode == MODE_INTRA_Q) {
	/* Read DQUANT if necessary */
	quant += dquanttab[getbits(2)];
	quant = mmax(1,mmin(31,quant));
      }
      /* motion vectors */
      if (Mode == MODE_INTER || Mode == MODE_INTER_Q ||
	    Mode == MODE_INTER4V || pb_frame) {
	startmv = (Mode == MODE_INTER4V);
	stopmv = startmv<<2;

	for (k = startmv; k <= stopmv; k++) {
	  mvx = getTMNMV();
	  /* r1 now holds mvy; grab it quick */
	  mvy = motion_decode_ret();
	  //printf("%d %d\n", mvx, mvy);
	  mvx = find_pmv(mvx, mvy,xpos,ypos,k);
	  /* r1 now holds mvy; grab it quick */
	  mvy = motion_decode_ret();
	  p = MV_INDEX(0,k,ypos+1,xpos+1);
          *(p)   = mvx;
          *(p+1) = mvy;
	}
	/* PB frame delta vectors */
	if (pb_frame) {
	  if (MODB == PBMODE_MVDB || MODB == PBMODE_CBPB_MVDB) {
	    mvdbx = getTMNMV();
	    mvdby = motion_decode_ret();
	    mvdbx = motion_decode(mvdbx, mvdby, 0, 0);
	    mvdby = motion_decode_ret();
	    /* This will not work if the PB deltas are so large they require the
	       second colums of the motion vector VLC table to be used.  To fix
	       this it is necessary to calculate the MV predictor for the PB
	       delta: TRB*MV/TRD here, and use this as the second parameter to
	       motion_decode(). The B vector itself will then be returned from
	       motion_decode(). This will have to be changed to the PB delta
	       again, since it is the PB delta which is used later in this
	       program. I don't think PB deltas outside the range mentioned
	       above is useful, but you never know... */
	  } else {
	    mvdbx = 0;
	    mvdby = 0;
	  }
	}
      }
      /* decode blocks */
      if(Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
#undef BB_SAC
#define BB_INTRA
#include "bblock.c"
      } else {
#undef BB_SAC
#undef BB_INTRA
#include "bblock.c"
      }
      CBP >>= 6;
      /* Decode B blocks */
      if (pb_frame) {
        for (comp=6; comp<12; comp++) {
          if (CBPB & 32) {
	    memset64(ld->block+(comp<<6));
	    getblock(comp,0);
	  }
	  CBPB <<= 1;
	}
        CBPB >>= 6;
      }
    } else {
      if (ypos>=mb_height)
        /* all macroblocks decoded */
	goto end;

      Mode = MODE_INTER | MODE_COD;

      /* Reset CBP */
      CBP = CBP << 6;
      CBPB = 0;

      /* reset motion vectors */
      p = MV_INDEX(0,0,ypos+1,xpos+1);
      *(p)   = 0;
      *(p+1) = 0;
      mvdbx = 0;
      mvdby = 0;
    }

    /* Store Mode*/
    *MM_INDEX(ypos+1,xpos+1) = Mode;
    Mode &= MODE_MASK;

    if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
      if (!pb_frame) {
        p = MV_INDEX(0,0,ypos+1,xpos+1);
        *(p) = 0;
        *(p+1) = 0;
      }
    }

    bx = 16*xpos;
    by = 16*ypos;
      //Mode = (*MM_INDEX(ypos+1,xpos+1)) & MODE_MASK;

      /* forward motion compensation for B-frame */
      if (pb_frame)
	reconstruct(0,bx,by,mvdbx,mvdby);

      /* motion compensation for P-frame */
      if (Mode == MODE_INTER || Mode == MODE_INTER_Q || Mode == MODE_INTER4V)
	reconstruct(1,bx,by,0,0);

      /* copy or add block data into P-picture */
      for (comp=0; comp<6; comp++) {
	/* inverse DCT */
	if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
	  addblock(comp,bx,by,0);
	} else if (CBP & 32) {
	  /* No need to to do this for blocks with no coeffs */
	  addblock(comp,bx,by,1);
	}
	CBP <<= 1;
      }

      if (pb_frame) {
	/* add block data into B-picture */
	for (comp = 0; comp<6; comp++) {
	  if (!COD)
	    reconblock_b(comp,bx,by,Mode,mvdbx,mvdby);
	  if (CBPB & 32) {
	    addblock(comp+6,bx,by,1);
	  }
	  CBPB <<= 1;
	}
      }
    //}

    /* advance to next macroblock */
    xpos++;
    if (xpos >= mb_width) {
      xpos = 0;
      ypos++;
    }
    //safe_printf("bits_left_in_packet: %d\n\r", bits_left_in_packet());
  }
  end: {}
    decstate.xpos  = xpos;
    decstate.ypos  = ypos;
    decstate.gob   = gob;
}

void getMBs_obmc(int first)
{
  int comp;
  int bx, by;

  int COD=0,MCBPC, CBPY, CBP=0, CBPB=0, MODB=0, Mode=0;
  int mvx, mvy, xpos, ypos, gob, k;
  int mvdbx=0, mvdby=0, pmvdbx, pmvdby, gobheader_read;
  int startmv,stopmv,last_done=0,pCBP=0,pCBPB=0,pCOD=0;
  int *bp;
  int *p;

  /* number of macroblocks per picture */
  xpos = 0; ypos = 0;
  newgob = 0;
  gobheader_read = 0;

  while (bits_in_packet()) {

    if (!(showbits(22)>>6)) { /* startcode */

      startcode();
      /* in case of byte aligned start code, ie. PSTUF, GSTUF or ESTUF
	 is used */

      if (showbits(22) == (32|SE_CODE)) { /* end of sequence */
	goto end;
      } else if ((showbits(22) == PSC<<5) ) { /* new picture */
	goto end;
      } else {
	gob = getheader() - 1;
	if (gob > mb_height)
	  goto end;

	/* GFID is not allowed to change unless PTYPE in picture header changes */
	//gfid = getbits(2);
	/* NB: in error-prone environments the decoder can use this
	   value to determine whether a picture header where the PTYPE
	   has changed, has been lost */

	quant = getbits(7) & 31;
	*quants_stored_ptr++ = quant;
	xpos = 0;
	ypos = gob;

	newgob = 1;
	gobheader_read = 1;
      }
    }

    if (!gobheader_read) {
      if (xpos == 0 && ypos > 0)
        newgob = 0;
    } else {
      gobheader_read = 0;
    }

    if (ypos>=mb_height) /* all macroblocks decoded */
      goto end;

  read_cod_huff:
    COD = ( (pict_type == PCT_INTER) ? getbits(1) : 0 );
    if (!COD) {
      if (pict_type == PCT_INTRA)
	MCBPC = getMCBPCintra();
      else
	MCBPC = getMCBPC();

      if (MCBPC == 255) /* stuffing */
	goto read_cod_huff;   /* read next COD without advancing MB count */
      Mode = MCBPC & 7;
      /* MODB and CBPB */
      if (pb_frame) {
	CBPB = 0;
	MODB = getMODB();
	if (MODB == PBMODE_CBPB_MVDB)
	  CBPB = getbits(6);
      }
      CBPY = getCBPY();
      /* Decode Mode and CBP */
      if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q)
	CBPY = CBPY^(15<<2);		/* needed in huffman coding only */

      CBP = CBPY | (MCBPC >> 4) | (CBP<<6);

      if (Mode == MODE_INTER_Q || Mode == MODE_INTRA_Q) {
	/* Read DQUANT if necessary */
	quant += dquanttab[getbits(2)];
	quant = mmax(1,mmin(31,quant));
      }
      /* motion vectors */
      if (Mode == MODE_INTER || Mode == MODE_INTER_Q ||
	  Mode == MODE_INTER4V || pb_frame) {
	startmv = (Mode == MODE_INTER4V);
	stopmv = startmv<<2;

	for (k = startmv; k <= stopmv; k++) {
	  mvx = getTMNMV();
	  /* r1 now holds mvy; grab it quick */
	  mvy = motion_decode_ret();
	  //printf("%d %d\n", mvx, mvy);
	  mvx = find_pmv(mvx, mvy,xpos,ypos,k);
	  /* r1 now holds mvy; grab it quick */
	  mvy = motion_decode_ret();
	  p = MV_INDEX(0,k,ypos+1,xpos+1);
          *(p)   = mvx;
          *(p+1) = mvy;
	}
	/* PB frame delta vectors */
	if (pb_frame) {
	  if (MODB == PBMODE_MVDB || MODB == PBMODE_CBPB_MVDB) {
	    mvdbx = getTMNMV();
	    mvdby = motion_decode_ret();
	    mvdbx = motion_decode(mvdbx, mvdby, 0, 0);
	    mvdby = motion_decode_ret();
	  /* This will not work if the PB deltas are so large they require the
	     second colums of the motion vector VLC table to be used.  To fix
	     this it is necessary to calculate the MV predictor for the PB
	     delta: TRB*MV/TRD here, and use this as the second parameter to
	     motion_decode(). The B vector itself will then be returned from
	     motion_decode(). This will have to be changed to the PB delta
	     again, since it is the PB delta which is used later in this
	     program. I don't think PB deltas outside the range mentioned
	     above is useful, but you never know... */
	  } else {
	    mvdbx = 0;
	    mvdby = 0;
	  }
	}
      }
    } else {
      if (ypos>=mb_height)
        /* all macroblocks decoded */
	goto end;

      Mode = MODE_INTER | MODE_COD;

      /* Reset CBP */
      CBP = CBP << 6;
      CBPB = 0;

      /* reset motion vectors */
      p = MV_INDEX(0,0,ypos+1,xpos+1);
      *(p)   = 0;
      *(p+1) = 0;
      mvdbx = 0;
      mvdby = 0;
    }

    /* Store Mode*/
    *MM_INDEX(ypos+1,xpos+1) = Mode;

    if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
      if (!pb_frame) {
        p = MV_INDEX(0,0,ypos+1,xpos+1);
        *(p) = 0;
        *(p+1) = 0;
      }
    }

  reconstruct_mb:

    /* pixel coordinates of top left corner of current macroblock */
    /* one delayed because of OBMC */
    if (xpos > 0) {
      bx = 16*(xpos-1);
      by = 16*ypos;
    } else {
      bx = coded_picture_width-16;
      by = 16*(ypos-1);
    }
    if ((xpos > 0) || (ypos > 0)) {

      Mode = (*MM_INDEX((by>>4)+1,(bx>>4)+1)) & MODE_MASK;

      /* forward motion compensation for B-frame */
      if (pb_frame)
	reconstruct(0,bx,by,pmvdbx,pmvdby);

      /* motion compensation for P-frame */
      if (Mode == MODE_INTER || Mode == MODE_INTER_Q || Mode == MODE_INTER4V)
	reconstruct(1,bx,by,0,0);

      /* copy or add block data into P-picture */
      for (comp=0; comp<6; comp++) {
	/* inverse DCT */
	if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
	  addblock(comp,bx,by,0);
	} else if (pCBP & 2048) {
	  /* No need to to do this for blocks with no coeffs */
	  addblock(comp,bx,by,1);
	}
	pCBP <<= 1;
      }

      if (pb_frame) {
	/* add block data into B-picture */
	for (comp = 0; comp<6; comp++) {
	  if (!pCOD || adv_pred_mode)
	    reconblock_b(comp,bx,by,Mode,pmvdbx,pmvdby);
	  if (pCBPB & 32) {
	    addblock(comp+6,bx,by,1);
	  }
	  pCBPB <<= 1;
	}
      }
    }
    pCBP = CBP<<6;
    pCBPB = CBPB; pCOD = COD;
    pmvdbx = mvdbx; pmvdby = mvdby;

    if (!COD) {
      Mode = (*MM_INDEX(ypos+1,xpos+1)) & MODE_MASK;

      /* decode blocks */
      if(Mode == MODE_INTRA || Mode == MODE_INTRA_Q){
#undef BB_SAC
#define BB_INTRA
#include "bblock.c"
      } else {
#undef BB_SAC
#undef BB_INTRA
#include "bblock.c"
      }

      /* Decode B blocks */
      if (pb_frame) {
	for (comp=6; comp<12; comp++) {
	  if (CBPB & 32) {
	    memset64(ld->block+(comp<<6));
	    getblock(comp,0);
	  }
	  CBPB <<= 1;
	}
      }
    }
    /* advance to next macroblock */
    xpos++;
    if (xpos >= mb_width) {
      xpos = 0;
      ypos++;
    }

    if (ypos >= mb_height && !last_done) {
      COD = 1;
      last_done = 1;
      goto reconstruct_mb;
    }
  }
  end:
    decstate.xpos  = xpos;
    decstate.ypos  = ypos;
    decstate.gob   = gob;
}

void getMBs_sac(int first)
{
  int comp;
  int bx, by;

  int COD=0, MCBPC, CBPY, CBP=0, MODB=0, Mode=0;
  int mvx, mvy, xpos, ypos, gob, k;
  int mvdbx=0, mvdby=0;
  int startmv,stopmv;
  int *bp;
  int *p;

  /* number of macroblocks per picture */
  xpos = 0; ypos = 0;
  newgob = 0;

  while (bits_in_packet()) {

    if (!(showbits(22)>>6)) { /* startcode */

      startcode();
      /* in case of byte aligned start code, ie. PSTUF, GSTUF or ESTUF
	 is used */

      {
        register int x;

        x = showbits(22);
	if (x == 32 | x == 32+31) { /* end of sequence */
	  goto gob_finished;
	} else {
	  if (!xpos) {
	    /* SAC hack to finish GOBs which   */
	    /* end with MBs coded with no bits */
	    if ((x & 31) != ypos)
	      goto finish_gob;

	    ypos = getheader() - 1;
	    if (ypos > mb_height)
	      goto end;

	    /* GFID is not allowed to change unless PTYPE in picture header
	     changes */
	    //gfid = getbits(2);
	    /* NB: in error-prone environments the decoder can use this
	     value to determine whether a picture header where the PTYPE
	     has changed, has been lost */

	    quant = getbits(7) & 31;
	    *quants_stored_ptr++ = quant;
	    xpos = 0;

	    newgob = 1;
	    decoder_reset();	/* init. arithmetic decoder buffer after gob */
	  }
        }
      }
    } else {

      finish_gob:  /* SAC specific label */

      if (-xpos >= 0 && ypos >- 1)
        newgob = -xpos;
    }

  gob_finished:
    if (ypos>=mb_height) /* all macroblocks decoded */
      goto end;

  read_cod_sac:
    COD =( (pict_type == PCT_INTER) ? decode_a_symbol(cumf_COD,3) : 0 );
    if (!COD) {
      /* COD == 0 --> not skipped */
      {
        register int x;

        x = ((pict_type == PCT_INTER) ? 22 : 10);

	MCBPC = decode_a_symbol((pict_type == PCT_INTER) ? cumf_MCBPC : cumf_MCBPC_intra, x);
	Mode = MCBPC>>2;
	CBP = (MCBPC & 3);
	if (pict_type != PCT_INTER)
	  Mode += 3;
        if (MCBPC == x-2)	/* stuffing; read next COD without */
	  goto read_cod_sac;	/* advancing MB count */
      }
      /* normal MB data */
      /* MODB and CBPB */
      if (pb_frame >= 1) {
        CBP |= 15<<14;
	MODB = decode_a_symbol(cumf_MODB,4);
	if (MODB >= PBMODE_CBPB_MVDB) {
	  for (; CBP < (1<<(14+3+6));) {
	    CBP = decode_a_symbol((CBP & (1<<(14+3)) ? cumf_YCBPB : cumf_UVCBPB), 3) | (CBP << 1);
	  }
	} else {
          CBP <<= 6;
	}
      } else {
        CBP <<= 6;
      }

      /* RJW: Obvious place to optimise calling */
      CBPY = decode_a_symbol(((Mode >= 3) ? cumf_CBPY_intra : cumf_CBPY), 17);
      if (Mode < 3)
        CBPY = 15-CBPY;

      CBP |= (CBPY << 8);
      /* CBP<<6, CBPB<<0 */

      if (Mode == MODE_INTER_Q || Mode == MODE_INTRA_Q) {
	/* Read DQUANT if necessary */
	register int d;

	d = decode_a_symbol(cumf_DQUANT, 5)-1;
	if (d == 0)
	  d -= 2;
	quant += d;
        if (quant <= 0)
          quant = 1;
        if (quant > 31)
          quant = 31;
      }
      /* motion vectors */
      if (2-Mode >= 0 || pb_frame >= 1)
      {
	startmv = (Mode == MODE_INTER4V);
	stopmv = startmv<<2;

	for (k = startmv; k <= stopmv; k++) {
	  mvx = decode_a_symbol(cumf_MVD,65) ^ 32;
	  mvy = decode_a_symbol(cumf_MVD,65) ^ 32;
	  mvx = find_pmv(mvx, mvy, xpos,ypos,k);
	  /* r1 now holds mvy, lets grab it quickly */
	  mvy = motion_decode_ret();
	  p = MV_INDEX(0,k,ypos+1,xpos+1);
          *(p)   = mvx;
          *(p+1) = mvy;
	}
	/* PB frame delta vectors */
	if (pb_frame) {
	  if (MODB == PBMODE_MVDB || MODB == PBMODE_CBPB_MVDB) {
	    mvdbx = decode_a_symbol(cumf_MVD,65) ^ 32;
	    mvdby = decode_a_symbol(cumf_MVD,65) ^ 32;
	    mvdbx = motion_decode(mvdbx, mvdby, 0, 0);
	    mvdby = motion_decode_ret();
	    /* This will not work if the PB deltas are so large they require the second colums of the motion
	       vector VLC table to be used.  To fix this it is necessary to calculate the MV predictor for
	       the PB delta: TRB*MV/TRD here, and use this as the second parameter to motion_decode(). The B
	       vector itself will then be returned from motion_decode(). This will have to be changed to the
	       PB delta again, since it is the PB delta which is used later in this program. I don't think PB
	       deltas outside the range mentioned above is useful, but you never know... */
	  } else {
	    mvdbx = 0;
	    mvdby = 0;
	  }
	}
      }
      /* decode blocks */
      if(Mode >= 3) {
#define BB_SAC
#define BB_INTRA
#include "bblock2.c"
      } else {
#define BB_SAC
#undef BB_INTRA
#include "bblock2.c"
      }
      /* CBP<<12, CBPB<<6 */
      /* Decode B blocks */
      if (pb_frame) {
	for (comp=6; comp<12; comp++) {
	  if (CBP & 2048) {
	    memset64(ld->block+(comp<<6));
	    get_sac_block(comp,0);
	  }
	  CBP <<= 1;
	}
      } else {
        CBP <<= 6;
      }
      /* CBP<<18, CBPB<<12 */
    } else { /* COD == 1 --> skipped MB */
      if (ypos>=mb_height)
        /* all macroblocks decoded */
	goto end;
      Mode = MODE_INTER | MODE_COD;
      /* Reset CBP */
      CBP = 0;
      /* reset motion vectors */
      p = MV_INDEX(0,0,ypos+1,xpos+1);
      *(p)   = 0;
      *(p+1) = 0;
      mvdbx = 0;
      mvdby = 0;
    }

    /* Store Mode*/
    *MM_INDEX(ypos+1,xpos+1) = Mode;

    if (3-Mode <= 0 && pb_frame <= 0) {
      p = MV_INDEX(0,0,ypos+1,xpos+1);
      *(p) = 0;
      *(p+1) = 0;
    }

    bx = 16*xpos;
    by = 16*ypos;
    //Mode = *MM_INDEX(ypos+1,xpos+1);

    /* forward motion compensation for B-frame */
    if (pb_frame)
      reconstruct(0,bx,by,mvdbx,mvdby);

    /* motion compensation for P-frame */
    if (Mode == MODE_INTER || Mode == MODE_INTER_Q || Mode == MODE_INTER4V)
      reconstruct(1,bx,by,0,0);

    /* CBP<<18, CBPB<<12 */
    /* copy or add block data into P-picture */
    for (comp=0; comp<6; comp++) {
      /* inverse DCT */
      if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
	addblock(comp,bx,by,0);
      } else if (CBP & 8388608) {
	/* No need to to do this for blocks with no coeffs */
	addblock(comp,bx,by,1);
      }
      CBP <<= 1;
    }
    /* CBP<<24, CBPB<<18 */

    if (pb_frame) {
      if (!COD) {
        for (comp = 0; comp<6; comp++) {
	  reconblock_b(comp,bx,by,Mode,mvdbx,mvdby);
	}
      }
      /* add block data into B-picture */
      for (comp = 0; comp<6; comp++) {
	if (CBP & 8388608) {
	  addblock(comp+6,bx,by,1);
	}
	CBP <<= 1;
      }
    }

    /* advance to next macroblock */
    xpos++;
    if (xpos >= mb_width) {
      xpos = 0;
      ypos++;
    }
  }
  end:
    decstate.xpos  = xpos;
    decstate.ypos  = ypos;
    decstate.gob   = gob;
}

void getMBs_obmc_sac(int first)
{
  int comp;
  int bx, by;

  int COD=0,MCBPC, CBPY, CBP=0, CBPB=0, MODB=0, Mode=0;
  int mvx, mvy, xpos, ypos, gob, i, k;
  int mvdbx=0, mvdby=0, pmvdbx, pmvdby, gobheader_read;
  int startmv,stopmv,last_done=0,pCBP=0,pCBPB=0,pCOD=0;
  int *bp;
  int *p;

  /* number of macroblocks per picture */
  xpos = 0; ypos = 0;
  newgob = 0;
  gobheader_read = 0;

  while (bits_in_packet()) {

    if (!(showbits(22)>>6)) { /* startcode */

      startcode();
      /* in case of byte aligned start code, ie. PSTUF, GSTUF or ESTUF
	 is used */

      if (showbits(22) == (32|SE_CODE)) { /* end of sequence */
	if (ypos >= mb_height)
	  goto end;
      } else if ((showbits(22) == PSC<<5) ) { /* new picture */
	if (ypos >= mb_height)
	  goto end;
      } else {
	if (!xpos) {
	  /* SAC hack to finish GOBs which   */
	  gob = (showbits(22) & 31); /* end with MBs coded with no bits */
	  if (gob != ypos)
	    goto finish_gob;

	  gob = getheader() - 1;
	  if (gob > mb_height)
	    goto end;

	  /* GFID is not allowed to change unless PTYPE in picture header
	     changes */
	  //gfid = getbits(2);
	  /* NB: in error-prone environments the decoder can use this
	     value to determine whether a picture header where the PTYPE
	     has changed, has been lost */

	  quant = getbits(7) & 31;
	  *quants_stored_ptr++ = quant;
	  xpos = 0;
	  ypos = gob;

	  newgob = 1;
	  decoder_reset();	/* init. arithmetic decoder buffer after gob */
	  gobheader_read = 1;
	}
      }
    }


  finish_gob:  /* SAC specific label */

    if (!gobheader_read) {
      if (xpos == 0 && ypos > 0)
        newgob = 0;
    } else {
      gobheader_read = 0;
    }

    if (ypos>=mb_height) /* all macroblocks decoded */
      goto end;

  read_cod_sac:
    COD = ( (pict_type == PCT_INTER) ? decode_a_symbol(cumf_COD,3) : 0 );
    if (!COD) {
      /* COD == 0 --> not skipped */
      if (pict_type == PCT_INTER) {
	MCBPC = decode_a_symbol(cumf_MCBPC,22);
	Mode = MCBPC>>2;
	CBP = (MCBPC & 3) | (CBP<<6);
        if (MCBPC == 20)	/* stuffing; read next COD without */
	  goto read_cod_sac;	/* advancing MB count */
      } else {
	MCBPC = decode_a_symbol(cumf_MCBPC_intra,10);
	Mode = (MCBPC>>2)+3;
	CBP = (MCBPC & 3) | (CBP<<6);
        if (MCBPC == 8)	/* stuffing; read next COD without */
	  goto read_cod_sac;	/* advancing MB count */
      }

      /* normal MB data */
      /* MODB and CBPB */
      if (pb_frame) {
	CBPB = 0;
	MODB = decode_a_symbol(cumf_MODB,4);
	if (MODB == PBMODE_CBPB_MVDB) {
	  for (i=3; i>=0; i--)
	    CBPB = decode_a_symbol(cumf_YCBPB,3) | (CBPB << 1);

	  for(i=1; i>=0; i--)
	    CBPB = decode_a_symbol(cumf_UVCBPB,3) | (CBPB << 1);
	}
      }

      /* RJW: Obvious place to optimise calling */
      CBPY = ((Mode == MODE_INTRA || Mode == MODE_INTRA_Q) ?  /* Intra */
	          decode_a_symbol(cumf_CBPY_intra,17) :
	          15-decode_a_symbol(cumf_CBPY,17));

      CBP |= (CBPY << 2);

      if (Mode == MODE_INTER_Q || Mode == MODE_INTRA_Q) {
	/* Read DQUANT if necessary */
	quant += dquanttab[decode_a_symbol(cumf_DQUANT,5)];
	if (quant > 31 || quant < 1)
	  quant = mmax(1,mmin(31,quant));
      }
      /* motion vectors */
      if (Mode == MODE_INTER || Mode == MODE_INTER_Q ||
	  Mode == MODE_INTER4V || pb_frame)
      {
	startmv = (Mode == MODE_INTER4V);
	stopmv = startmv<<2;

	for (k = startmv; k <= stopmv; k++) {
	  mvx = decode_a_symbol(cumf_MVD,65) ^ 32;
	  mvy = decode_a_symbol(cumf_MVD,65) ^ 32;
	  mvx = find_pmv(mvx, mvy, xpos,ypos,k);
	  /* r1 now holds mvy, lets grab it quickly */
	  mvy = motion_decode_ret();
	  p = MV_INDEX(0,k,ypos+1,xpos+1);
          *(p)   = mvx;
          *(p+1) = mvy;
	}
	/* PB frame delta vectors */
	if (pb_frame) {
	  if (MODB == PBMODE_MVDB || MODB == PBMODE_CBPB_MVDB) {
	    mvdbx = decode_a_symbol(cumf_MVD,65) ^ 32;
	    mvdby = decode_a_symbol(cumf_MVD,65) ^ 32;
	    mvdbx = motion_decode(mvdbx, mvdby, 0, 0);
	    mvdby = motion_decode_ret();
	    /* This will not work if the PB deltas are so large they require the second colums of the motion
	       vector VLC table to be used.  To fix this it is necessary to calculate the MV predictor for
	       the PB delta: TRB*MV/TRD here, and use this as the second parameter to motion_decode(). The B
	       vector itself will then be returned from motion_decode(). This will have to be changed to the
	       PB delta again, since it is the PB delta which is used later in this program. I don't think PB
	       deltas outside the range mentioned above is useful, but you never know... */
	  } else {
	    mvdbx = 0;
	    mvdby = 0;
	  }
	}
      }
    } else { /* COD == 1 --> skipped MB */
      if (ypos>=mb_height)
        /* all macroblocks decoded */
	goto end;
      Mode = MODE_INTER | MODE_COD;
      /* Reset CBP */
      CBP = CBP << 6;
      CBPB = 0;
      /* reset motion vectors */
      p = MV_INDEX(0,0,ypos+1,xpos+1);
      *(p)   = 0;
      *(p+1) = 0;
      mvdbx = 0;
      mvdby = 0;
    }

    /* Store Mode*/
    *MM_INDEX(ypos+1,xpos+1) = Mode;

    if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
      if (!pb_frame) {
        p = MV_INDEX(0,0,ypos+1,xpos+1);
        *(p) = 0;
        *(p+1) = 0;
      }
    }

  reconstruct_mb:

    /* pixel coordinates of top left corner of current macroblock */
    /* one delayed because of OBMC */
    if (xpos > 0) {
      bx = 16*(xpos-1);
      by = 16*ypos;
    } else {
      bx = coded_picture_width-16;
      by = 16*(ypos-1);
    }
    if ((xpos > 0) || (ypos > 0)) {

      Mode = (*MM_INDEX((by>>4)+1,(bx>>4)+1)) & MODE_MASK;

      /* forward motion compensation for B-frame */
      if (pb_frame)
	reconstruct(0,bx,by,pmvdbx,pmvdby);

      /* motion compensation for P-frame */
      if (Mode == MODE_INTER || Mode == MODE_INTER_Q || Mode == MODE_INTER4V)
	reconstruct(1,bx,by,0,0);

      /* copy or add block data into P-picture */
      for (comp=0; comp<6; comp++) {
	/* inverse DCT */
	if (Mode == MODE_INTRA || Mode == MODE_INTRA_Q) {
	  addblock(comp,bx,by,0);
	} else if (pCBP & 2048) {
	  /* No need to to do this for blocks with no coeffs */
	  addblock(comp,bx,by,1);
	}
	pCBP <<= 1;
      }

      if (pb_frame) {
	/* add block data into B-picture */
	for (comp = 0; comp<6; comp++) {
	  if (!pCOD || adv_pred_mode)
	    reconblock_b(comp,bx,by,Mode,pmvdbx,pmvdby);
	  if (pCBPB & 32) {
	    addblock(comp+6,bx,by,1);
	  }
	  pCBPB <<= 1;
	}
      }
    }
    pCBP = CBP<<6;
    pCBPB = CBPB; pCOD = COD;
    pmvdbx = mvdbx; pmvdby = mvdby;

    if (!COD) {
      Mode = (*MM_INDEX(ypos+1,xpos+1)) & MODE_MASK;

      /* decode blocks */
      if(Mode == MODE_INTRA || Mode == MODE_INTRA_Q){
	if (syntax_arith_coding) {
#define BB_SAC
#define BB_INTRA
#include "bblock.c"
	 } else {
#undef BB_SAC
#define BB_INTRA
#include "bblock.c"
	 }
      } else {
        if (syntax_arith_coding) {
#define BB_SAC
#undef BB_INTRA
#include "bblock.c"
	} else {
#undef BB_SAC
#undef BB_INTRA
#include "bblock.c"
        }
      }

      /* Decode B blocks */
      if (pb_frame) {
	for (comp=6; comp<12; comp++) {
	  if (CBPB & 32) {
	    memset64(ld->block+(comp<<6));
	    get_sac_block(comp,0);
	  }
	  CBPB <<= 1;
	}
      }
    } /* end of if(!cod)*/
    /* advance to next macroblock */
    xpos++;
    if (xpos >= mb_width) {
      xpos = 0;
      ypos++;
    }

    if (ypos >= mb_height && !last_done) {
      COD = 1;
      last_done = 1;
      goto reconstruct_mb;
    }
  }
  end:
    decstate.xpos  = xpos;
    decstate.ypos  = ypos;
    decstate.gob   = gob;
}
