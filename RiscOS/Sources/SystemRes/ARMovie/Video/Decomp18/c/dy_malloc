#include "swis.h"
#include <stdlib.h>
#include <string.h>

#undef TEST
#ifdef TEST
#include <stdio.h>
#endif


int area_id;
void *area_data;
size_t area_size;
size_t malloc_size;

#define MAXSIZE 1024*1024*4
#define FLAGS 1<<7
#define NAME "H263 AREA"

#ifdef OLDDY
int dy_init(void)
{
	_kernel_oserror *err;

  	err=	_swix( OS_DynamicArea, _INR( 0, 8)|_OUT(1)|_OUT(3),
			0,		/* Create		*/
			-1,		/* No initial id	*/
			0,		/* Initial size		*/
			-1,		/* No initial base	*/
			FLAGS,		/* Flags	*/
			MAXSIZE,	/* Max size		*/
			NULL,		/* Handler		*/
			NULL,		/* Reference for handler*/
			NAME,		/* Name	*/
			&area_id,
			&area_data
		     );
	if(!err)
	  err=	_swix( OS_DynamicArea, _INR( 0, 1)|_OUT(2), 2, area_id, &area_size);
	  return (int)err;
}

int dy_shut(void)
{
	_kernel_oserror *err;
  	err= 	_swix( OS_DynamicArea, _INR( 0, 1), 1, area_id);
  	return (int)err;
}

void *dy_malloc(size_t size)
{	int		dsize		= (malloc_size+size) - area_size;
	unsigned int	dsizeout	= 0;
	_kernel_oserror *err;
  	err = _swix( OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), area_id, dsize, &dsizeout);

  	if(err)
  	  return(NULL);
  	else
  	{
           area_size += dsizeout ;
  	   malloc_size +=size;
  	   return(memset((char *)area_data+malloc_size-size,'\0',size));
	}


}
#else
#include "ady_malloc.h"
int dy_init(void)
{return ady_init();}
int dy_shut(void)
{return ady_shut();}
void  *dy_malloc(size_t size)
{return ady_malloc(size);}


#endif

#ifdef TEST

int main(argc,argv)
int argc;
char *argv[];
{
  if(dy_init()) printf("init failed");
  if(!dy_malloc(1024*5)) printf("malloc failed");
  getchar();

  if(!dy_malloc(176*144)) printf("malloc failed");
  if(!dy_malloc(176*144)) printf("malloc failed");
  if(!dy_malloc(176*144)) printf("malloc failed");
  if(!dy_malloc(88*72)) printf("malloc failed");
  if(!dy_malloc(88*72)) printf("malloc failed");
  if(!dy_malloc(88*72)) printf("malloc failed");
  if(!dy_malloc(88*72)) printf("malloc failed");
  if(!dy_malloc(88*72)) printf("malloc failed");
  if(!dy_malloc(88*72)) printf("malloc failed");

  getchar();
  if(dy_shut()) printf("shut failed");
}

#endif
