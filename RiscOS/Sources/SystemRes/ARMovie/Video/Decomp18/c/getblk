/* getblk.c, DCT block decoding                                             */

/*
 * tmndecode
 * Copyright (C) 1995 Telenor R&D
 *                    Karl Olav Lillevold <kol@nta.no>
 *
 * based on mpeg2decode, (C) 1994, MPEG Software Simulation Group
 * and mpeg2play, (C) 1994 Stefan Eckart
 *                         <stefan@lis.e-technik.tu-muenchen.de>
 *
 */


/* #include <stdio.h>*/

#include "config.h"
#include "global.h"


#define INDICES
#include "indices.h"

#define SACTABLES
#include "sactbls.h"

#define abs(a) ((a)>0 ? (a) : -(a))

#ifdef PROFILE
extern long int blocktime=0;
clock_t bktmp=0;
#endif

typedef struct {
  char run, level, len;
} DCTtab;
typedef struct {
  int val, len;
} VLCtabI;
typedef struct {
  int val, run, sign;
} RunCoef;

/* local prototypes */
RunCoef vlc_word_decode _ANSI_ARGS_((int symbol_word, int *last));
RunCoef Decode_Escape_Char _ANSI_ARGS_((int intra, int *last));
int DecodeTCoef _ANSI_ARGS_((int position, int intra));
int aDecodeTCoef _ANSI_ARGS_((int position, int intra));



/*********************************************************************
 *
 * 	Name:		get_sac_block
 *
 *	Description:	Decodes blocks of Arithmetic Encoded DCT Coeffs.
 *			and performs Run Length Decoding and Coefficient
 *			Dequantisation.
 *
 *	Input:		Picture block type and number.
 *
 *	Returns:	Nothing.
 *
 *	Side Effects:
 *
 *	Author:		Wayne Ellis <ellis_w_wayne@bt-web.bt.co.uk>
 *
 *********************************************************************/

#if 0
void get_sac_block(int comp, int ptype)
{
  int position=0;
  int TCOEF_index, symbol_word;
  int last=0, QP, i;
  int *bp;
  int zsl=0, val;
  RunCoef DCTcoef;

#ifdef PROFILE
bktmp = clock();
#endif

  bp = ld->block+(comp<<6);
  
  i = ptype;

  if (comp >= 6)
    QP = mmax (1, mmin( 31, ( (5+bquant) * quant ) >> 2 ));
  else
    QP = quant;

  while (!last) {
    /* while there are DCT coefficients remaining */
    position++;	/* coefficient counter relates to Coeff. model */
    TCOEF_index = aDecodeTCoef(position, ptype);

    if (TCOEF_index == ESCAPE_INDEX) { 	/* ESCAPE code encountered */
      DCTcoef = Decode_Escape_Char(ptype, &last);
    } else {
      symbol_word = tcoeftab[TCOEF_index];

      DCTcoef = vlc_word_decode(symbol_word,&last);
    }

    i += DCTcoef.run;

    val = QP*(2*DCTcoef.val+1);
    if ((QP &1) == 0)
      val -= 1;
    if (DCTcoef.sign)
      val = -val;
    if (val == 0)
      zsl++;
    else 
      zsl=0;
    bp[zig_zag_scan[i]] = val;

    i++;

  }
  ld->zsc[comp] = zsl + 63 - i;
#ifdef PROFILE
blocktime+=(long int)(clock()-bktmp);
#endif
  return;
}

/*********************************************************************
 *
 * 	Name:		vlc_word_decode
 *
 *	Description:	Fills Decoder FIFO after a fixed word length
 *			string has been detected.
 *
 *	Input:		Symbol to be decoded, last data flag.
 *
 *	Returns:	Decoded Symbol via the structure DCTcoeff.
 *
 *	Side Effects:	Updates last flag.
 *
 *	Author:		Wayne Ellis <ellis_w_wayne@bt-web.bt.co.uk>
 *
 *********************************************************************/

RunCoef vlc_word_decode(int symbol_word, int *last)
{
  int sign_index;
  RunCoef DCTcoef;


  *last = (symbol_word >> 12) & 01;

  DCTcoef.run = (symbol_word >> 4) & 255;

  DCTcoef.val = (symbol_word) & 15;

  sign_index = decode_a_symbol(cumf_SIGN,3);

  DCTcoef.sign = signtab[sign_index];


  return DCTcoef;
}

/*********************************************************************
 *
 * 	Name:		Decode_Escape_Char
 *
 *	Description:	Decodes all components for a Symbol when an
 *			ESCAPE character has been detected.
 *
 *	Input:		Picture Type and last data flag.
 *
 *	Returns:	Decoded Symbol via the structure DCTcoeff.
 *
 *	Side Effects:	Modifies last data flag.
 *
 *	Author:		Wayne Ellis <ellis_w_wayne@bt-web.bt.co.uk>
 *
 *********************************************************************/

RunCoef Decode_Escape_Char(int intra, int *last)
{
  int last_index, run, run_index, level, level_index;
  RunCoef DCTcoef;


  if (intra) {
    last_index = decode_a_symbol(cumf_LAST_intra,3);
    *last = last_intratab[last_index];
  }
  else {
    last_index = decode_a_symbol(cumf_LAST,3);
    *last = lasttab[last_index];
  }

  if (intra)
    run_index = decode_a_symbol(cumf_RUN_intra,65);
  else
    run_index = decode_a_symbol(cumf_RUN,65);

  run = runtab[run_index];

  DCTcoef.run = run;

  if (intra)
    level_index = decode_a_symbol(cumf_LEVEL_intra,255);
  else
    level_index = decode_a_symbol(cumf_LEVEL,255);

  level = leveltab[level_index];

  if (level >128)
    level -=256;

  if (level < 0) {
    DCTcoef.sign = 1;
    DCTcoef.val = abs(level);
  } else {
    DCTcoef.sign = 0;
    DCTcoef.val = level;
  }

  return DCTcoef;
}

/*********************************************************************
 *
 * 	Name:		DecodeTCoef
 *
 *	Description:	Decodes a.c DCT Coefficients using the
 *			relevant arithmetic decoding model.
 *
 *	Input:		DCT Coeff count and Picture Type.
 *
 *	Returns:	Index to LUT
 *
 *	Side Effects:	None
 *
 *	Author:		Wayne Ellis <ellis_w_wayne@bt-web.bt.co.uk>
 *
 *********************************************************************/

int aDecodeTCoef(int position, int intra)
{
  int index;


  switch (position) {
  case 1:
    {
      if (intra)
	index = decode_a_symbol(cumf_TCOEF1_intra,104);
      else
	index = decode_a_symbol(cumf_TCOEF1,104);
      break;
    }
  case 2:
    {
      if (intra)
	index = decode_a_symbol(cumf_TCOEF2_intra,104);
      else
	index = decode_a_symbol(cumf_TCOEF2,104);
      break;
    }
  case 3:
    {
      if (intra)
	index = decode_a_symbol(cumf_TCOEF3_intra,104);
      else
	index = decode_a_symbol(cumf_TCOEF3,104);
      break;
    }
  default:
    {
      if (intra)
	index = decode_a_symbol(cumf_TCOEFr_intra,104);
      else
	index = decode_a_symbol(cumf_TCOEFr,104);
      break;
    }
  }

  return index;
}
#endif
