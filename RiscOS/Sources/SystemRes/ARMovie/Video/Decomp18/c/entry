/***************************************************************************
 *
 *  File:        entry.c
 *
 *  Description: h263 C code entry points implementation
 *
 *  Version:     0.0 16 Sep 1997
 *
 *  Author:      Alex Burr (aburr@acorn.com)
 *               modified by Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *    16 Sep 1997  Pete Goodliffe        Commented and renamed file
 *
 ***************************************************************************/

#define GLOBAL         // makes global.h define not declare variables

#include "entry.h"

#include <stdio.h>
#include <stdlib.h>

#include "config.h"
#include "global.h"

#include "swis.h"      // for debugging
#include "memory.h"

////////////////////////////////////////////////////////////////////////////
// Debugging

//#define PLBUG1          // debugging output to module area
//#define PLBUG


////////////////////////////////////////////////////////////////////////////
// frame information given in InitEntry()

int xsize, ysize;
int framenum;


////////////////////////////////////////////////////////////////////////////
// errors to return

os_error dyinerr = {
    1, "Could not get dynamic area                           "
};

os_error dyexerr = {
    2, "Dynamic area extend failed                           "
};

os_error parmerr = {
    3, "PARM not passed                                      "
};

os_error othmerr = {
    4, "Init Error                                           "
};

os_error dysherr = {
    1, "Dynamic area extend failed                           "
};

os_error sizxerr = {
    1, "X size wrong                                         "
};

os_error sizyerr = {
    1, "Y size wrong                                         "
};


////////////////////////////////////////////////////////////////////////////
// assembly function declarations

extern void dosetxy(int xs,int ys);
extern void nullcopy(void *to, void *from);


////////////////////////////////////////////////////////////////////////////

os_error *InitEntry(int xs, int ys, int parm, int *list) {

  int i, cc, size, offset;

  dosetxy(xs, ys);
  if (parm != PARM_P) {
    sprintf(parmerr.errmess, "Got | %x | instead of PARM: %x \n",parm,PARM_P);
    return &parmerr;
  }

  /* stuff filched from tmndec.c - init_decoder() */
  ld=&base;
  xsize=xs;
  ysize=ys;
  framenum=tr_framenum=0;
  defer_bool=0;

  /* These must be checked to make sure the file size is supported */
  // init_decoder();  In the orig vers getheader is called first **panic**
  mb_height=ys/16;
  mb_width=xs/16;
  if (ys%16!=0) return &sizyerr;
  if (xs%16!=0) return &sizxerr;

  if(dy_init()) return &dyinerr;

  for (MV_d3_log = 1; (mb_height+1) > (1<<MV_d3_log); MV_d3_log++);

  if ((MV=get4array(2,5,1<<(MV_d3_log),mb_width+2)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }
  if ((modemap=get2arraychar(1<<MV_d3_log,mb_width+2)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }
  /* RJW */
  if ((ld->zsc=get1array(12+2)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }
  if ((ld->block=get2array(12+2,64)) == 0) {
    if (dy_shut())
      return &dysherr;
    else
      return &dyexerr;
  }

  for(i=0; i<(12+2); i++)
    memset64(ld->block+i*64);
  ld->block += 64; /* for dct*/

  /* set globals */
  coded_picture_width = 16*mb_width;
  coded_picture_height = 16*mb_height;
  chrom_width =  coded_picture_width>>1;
  chrom_height = coded_picture_height>>1;

  for (cc=0; cc<3; cc++) {
    if (cc==0) {
      size = (coded_picture_width+64)*(coded_picture_height+64);
      offset = (coded_picture_width+64) * 32 + 32;
    } else {
      size = (chrom_width+32)*(chrom_height+32);
      offset = (chrom_width+32) * 16 + 16;
    }
    if ((refframeorig[cc] = (unsigned char *)dy_malloc(size)) == 0) {
      if (dy_shut())
        return &dysherr;
      else
        return &dyexerr;
    }
    refframe[cc] = refframeorig[cc] + offset;

    if ((oldrefframeorig[cc] = (unsigned char *)dy_malloc(size)) == 0) {
      if (dy_shut())
        return &dysherr;
      else
        return &dyexerr;
    }
    oldrefframe[cc] = oldrefframeorig[cc] + offset;

    if ((bframeorig[cc] = (unsigned char *)dy_malloc(size)) == 0) {
      if (dy_shut())
        return &dysherr;
      else
        return &dyexerr;
    }
    bframe[cc] = bframeorig[cc] + offset;
  }

  return 0;
}


////////////////////////////////////////////////////////////////////////////

os_error *ShutEntry(int xs, int ys, int parm) {

    if(dy_shut())
        return &dysherr;

    if (parm != PARM_S) {
        /* This Never Happens (TM) */
        sprintf(
            parmerr.errmess,"Got | %x | instead of SHUT: %x\n",parm ,PARM_S
        );
        return &parmerr;
    }
    return 0;

}


////////////////////////////////////////////////////////////////////////////

char * DecompEntry(char *source, char *output, char *prev, char *table) {

  int i;
  unsigned char *tmp;

  #ifdef PLBUG
    sprintf((char *)bugmsg,"start decomp %d th frame",framenum);
    sprintf((char *)bugmsg+100,"frame %d ##",framenum);
#endif

    if (source == NULL) {
        nullcopy(output, prev);
        return NULL;
    }
    ld->source = (unsigned char*) source;
    ld->dest   = (unsigned char*) output;
    ld->table  = (unsigned char*) table;
    ld->bitsthru = 0;
    if (defer_bool) {
      storeframe(newframe);
      defer_bool=0;
      return ((char *)ld->source);
    }
    initbits(ld->source,0,0,0); /* getbits.c*/

    startcode();
    flushbits(PSC_LENGTH);
    if (showbits(PSC_LENGTH) == 1l) {
      /* We have 2 startcodes... Must be a null */
      //printf("Null\n");
      nullcopy(output, prev);
      flushbits(PSC_LENGTH);
      flushbits(32);
      flushbits(32);
      ld->source = (unsigned char *)(atbsource()-4);
      //((int (*)(void))0)();
      return ((char *)ld->source);
    }

#ifdef PLBUG
    sprintf((char *)bugmsg,"done set ld %d th frame",framenum);
#endif

    quants_stored_ptr = &quants_stored[0];
    quants_stored_last_y = 1;

    getfirstheader(); /* possible problems here */

#ifdef PLBUG
     sprintf((char *)bugmsg,"done get header %d th frame",framenum);
#endif
    for (i=2; i>=0; i--) {
      tmp = oldrefframe[i];
      oldrefframe[i] = refframe[i];
      refframe[i] = tmp;
      newframe[i] = refframe[i];
    }

    if (mv_outside_frame && framenum > 0) {
      //make_edge_image(oldrefframe[0],edgeframe[0],coded_picture_width, coded_picture_height,32);
      //make_edge_image(oldrefframe[1],edgeframe[1],chrom_width, chrom_height,16);
      //make_edge_image(oldrefframe[2],edgeframe[2],chrom_width, chrom_height,16);
      make_edge_image(oldrefframe[0],coded_picture_width, coded_picture_height,32);
      make_edge_image(oldrefframe[1],chrom_width, chrom_height,16);
      make_edge_image(oldrefframe[2],chrom_width, chrom_height,16);
    }

    mark_top_mvs();

    getpicture(&framenum, 1);
    if (df_mode)
      DoEdgeFilter();

    //printf("%d\n", quant);

#ifdef PLBUG
   sprintf((char *)bugmsg,"done get picture %d th frame",framenum);
#endif

    /* it might be better to call storeframe() here rather than in
     * getpicture
     */
    framenum++;
    tr_framenum++;

#ifdef PLBUG
    sprintf((char *)bugmsg,"done inc frame %d th frame",framenum);
    sprintf((char *)tmpc,"| %x | %x ",(int)source,(int)ld->source);
#endif

    if (pb_frame) {
      storeframe(bframe);
      defer_bool=1;
    } else {
      storeframe(newframe);
    }

    ld->source = (unsigned char *)(atbsource()-4);
    return ((char *)ld->source);

}// end DecompEntry


////////////////////////////////////////////////////////////////////////////
