#include <stdio.h>
#define GLOBAL
#include "config.h"
#include "global.h"
#define TC
int block[64*2] ;

float numint,merracc,verracc;
int errcount,perr,perr2,perr3;
float numint2,merracc2,verracc2;
float numint3,merracc3,verracc3;
void initerr(void)
{
  numint=0;
  merracc=0;
  verracc=0;
  perr=0;
}
void initerr2(void)
{
  numint3=0;
  numint2=0;
  merracc2=0;merracc3=0;
  verracc2=0;verracc3=0;
  perr2=0;perr3=0;
  errcount=0;
}
void upd3err(int val)
{numint3++;
 merracc3+=val;
 verracc3+=(val*val);
 if(val>perr3) perr3=val;
}
void upderr(int val)
{
  numint++;
  merracc+=val;
  verracc+=(val*val);
  if(val>perr) {perr=val;perr2=val;}

  numint2++;
  merracc2+=val;
  verracc2+=(val*val);
}
float verr(void)
{ return verracc/numint;}
float merr(void)
{ return merracc/numint;}
float verr2(void)
{ return verracc2/numint2;}
float merr2(void)
{ return merracc2/numint2;}
float verr3(void)
{ return verracc3/numint3;}
float merr3(void)
{ return merracc3/numint3;}



int br[64];

int bc[64] ;

int ii[64];
int src[64];


long rrand(L,H)
long L,H;
{
static long randx=1; /*longis32bits*/
static double z= (double) 0x7fffffff;
long i,j;
double x; /* double is64bits */
randx=(randx*1103515245)+12345;
i=randx&0x7ffffffe; /*keep 30bits */
x=( (double)i )/z; /*range 0to0.99999 ... */
x*=(L+H+1);/*range0to<L+H+1 */
j=x;/*truncatetointeger */
return(j-L); /* range-LtoH  */
}


void printblock(int *bk)
{
  int i,j;
  for(i=0;i<8;i++)
   {for(j=0;j<8;j++)
     printf("%8d ",bk[i+j*8]);
    printf("\n");
   }
  printf("\n");
}

void checkerr(int *b1,int *b2, int *src)
{ int i,e=0;

  initerr();
  upd3err(*b2-*b1);
  for(i=0;i<64;i++)
  {
    if(*src++==0)
     if(*b2!=0)
     { printf("Nonzero error\n"); e=1;}
     upderr(*b2++-*b1++);
  }
  if((e==1) || (perr>1) || (merr()>0.015) || (verr()>0.06))
   {printf("Error: m,ms, target m, ms %f %f %d  0.015 0.06\n",merr(),verr(),perr);
#ifdef PPP
    printblock(src);
    printf("\n");
    printblock(b1);
    printf("\n");
    printblock(b2);
    printf("\n");
#endif
   errcount++;
   }
}

void fillblock(long L,long H, int *block)
{
  int i;
  for(i=0;i<64;i++)
   (*block++)=rrand(L,H);
}
void transblock(int *s,int *d)
{int i;
 for(i=0;i<64;i++)
 d[i/8+(i%8)*8]=s[i];
}


int main(argc,argv)
int argc;
char * argv[];
{
  int u;
  init_idct();
  init_idctref();
  init_dctref();
  initerr2();
for(u=0;u<1000;u++)
{
  fillblock(255,255,src);
  memcpy(ii,src,64*4);
#ifdef PP
  printf("source\n");
  printblock(src);
#endif
  Dct(src,src);

#ifdef PP
  printf("coeffs\n");
  printblock(src);
#endif

  memcpy(block+64,src,64*4);
  memcpy(br,src,64*4);
  memcpy(bc,src,64*4);


  idctref(br);
#ifdef PP
  printf("refout\n");
  printblock(br);
#endif

  idct(bc);

#ifdef PP
  printf("fast C\n");
  printblock(bc);
#endif
  asm_j_rev_dct(0,block+64,1);
  transblock(block,block+64);

#ifdef PP
  printf("asm \n");
  printblock(block);
#endif

#ifndef TC
#ifdef PP
  printf("asm\n");
#endif
  checkerr(br,block+64,ii);
#else
#ifdef PP
  printf("fast C\n");
#endif
  checkerr(br,bc,ii);
#endif
  if(u%100==0) printf("%d\n",u);
}

printf("error vals mean, mean square: %f %f %d %d\n",merr2(),verr2(),perr2,errcount);
printf("DC error vals mean, mean square: %f %f %d \n",merr3(),verr3(),perr2);

}
