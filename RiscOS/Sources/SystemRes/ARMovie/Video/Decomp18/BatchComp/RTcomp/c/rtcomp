/*
 * rtcomp.c: Top level functions for the real time variant of the compressor
 */

/* Standard headers */
#include <stdio.h>
#include <stdlib.h>
#include "MemCheck:MemCheck.h"

/* TMN headers */
#include "../TMN/sim.h"

/* Local headers */
#include "rtcomp.h"
#include "Malloc.h"

#define BITS_TOTAL	(24000)
#define FPS		(12.5)
#ifdef USING_IFRAMES
#define IWEIGHT		(8)		/* Weight of an I compared to a P */
#define IFRAMEINT	(20)
#define VFPS		((IFRAMEINT+IWEIGHT-1)*FPS/(IFRAMEINT))
#define BITS_PFRAME	(BITS_TOTAL/VFPS)
#else
#define IWEIGHT		(1)
#define BITS_PFRAME	(BITS_TOTAL/FPS)
#endif

/* Some private variables */
static PictImage *prev_recon;
static PictImage *curr_recon;
static PictImage  curr_image;
static PictImage  prev_image;
static Pict pic;
static int QP, QPI;
static Bits bits;

/* And some globals... */
#if 0
extern int pels, lines;
extern char *stream;
extern int stream_len;
#else
#include "../TMN/hack_dec.h"
#endif
extern int syntax_arith_coding;

#define SWAP(A,B) { PictImage *t; t = A; A = B; B = t; }

int RTComp_Init(int xsize, int ysize) {

  /* First lets init all the other modules */
  t_init_coder();
  t_init_countbit();
  t_init_putbits();
#ifndef OFFLINE_RATE_CONTROL
  t_init_ratectrl();
#endif
  t_init_sac();

  /* Now lets initialise our internal variables */
  pels  = xsize;
  cpels = xsize/2;
  lines = ysize;
  syntax_arith_coding = 1;
  prev_recon = InitImage(xsize*ysize);
  curr_recon = InitImage(xsize*ysize);
  pic.unrestricted_mv_mode = DEF_UMV_MODE;
  pic.BQUANT = DEF_BQUANT;
  pic.source_format = DEF_CODING_FORMAT;
  pic.use_gobsync = DEF_INSERT_SYNC;
  pic.TR = 0;
#ifdef NO_FP
  pic.QP_mean = 0;
#else
  pic.QP_mean = (float)0.0; // (float)0.0;
#endif
  pic.seek_dist = 10; /* 15 = DEF_SEEK_DIST */
  pic.source_format = SF_QCIF;
  QP  = DEF_INTER_QUANT;
  QPI = DEF_INTRA_QUANT;

  return 100*1024;
}

static void AdjustQP(Bits *bits, int *QP, int idealrate, int iframe) {

  static int history[4] = { 0,0,0,0 };
  static int hptr = 0;

  int count;
  
  count  = history[(hptr  ) & 3];
  count += history[(hptr+1) & 3];
  count += history[(hptr+2) & 3]<<1;
  count += history[(hptr+3) & 3]<<2;
  history[hptr & 3] = (iframe ? bits->total/IWEIGHT : bits->total);
  count += history[(hptr++) & 3]<<3;

  if ((count > ((idealrate<<4)+idealrate)) && (*QP < 31)) {
    (*QP)++;
  }
  if ((count < ((idealrate<<4)-idealrate)) && (*QP > 1)) {
    (*QP)--;
  }
}

int RTComp_Compress(unsigned char *picture, unsigned char* output, unsigned char *prev, FrameType ft) {

  /* First, lets cast the incoming data into a form we can use */
  curr_image.lum = picture;
  curr_image.Cb = picture + (pels*lines);
  curr_image.Cr = curr_image.Cb + (pels*lines)/4;
  prev_image.lum = prev;
  prev_image.Cb = prev + (pels*lines);
  prev_image.Cr = prev_image.Cb + (pels*lines)/4;

  stream = (char *) output;

  initbits();

  if (ft == I_frame) {
    pic.picture_coding_type = PCT_INTRA;
    pic.QUANT = QPI;
    CodeOneIntra(&curr_image, QPI, &bits, &pic, curr_recon);
    pic.TR = 0;
    AddBitsPicture(&bits);
    AdjustQP(&bits, &QPI, BITS_PFRAME, 1);
  } else {
    pic.picture_coding_type = PCT_INTER;
    pic.PB=0;
    pic.QUANT=QP;
    CodeOneOrTwo(&curr_image, NULL, &prev_image, prev_recon, QP, 1, &bits, &pic, NULL, curr_recon);
    pic.TR = (pic.TR + 1) & 255;
    AddBitsPicture(&bits);
    AdjustQP(&bits, &QP, BITS_PFRAME, 0);
  }
  if (syntax_arith_coding)
    encoder_flush();
  alignbits();
  SWAP(prev_recon,curr_recon);
#if 0
  pic.QUANT = FrameUpdateQP(total_bits.total + intra_bits.total,
           bits.total,
           5 /* (end-frame_no) / chosen_frameskip + PPFlag */,
           QP,
           2000<<16, /*targetrate*/
           seconds,trg.bitbalance);
#endif

  return stream_len;
}

void RTComp_Fin(void) {

  /* Dump all the excess storage... */
  FreeAll();
}

#ifdef MALLOC_TEST
int main(int argc, char *argv[]) {

  int i,j;
  void *p[10];

  MemCheck_Init();

  for (i = 0; i<10; i++) {
    for (j = 0; j<10; j++) {
      printf("Mallocing... (%d,%d)\n", i,j);
      p[j] = Malloc(j+100);
    }
    for (j = 0; j<10; j += 2) {
      printf("Freeing... (%d,%d)\n", i,j);
      Free(p[j]);
    }
    printf("Flushing... (%d)\n", i);
    FreeAll();
  }
  MemCheck_OutputBlocksInfo();
}
#endif
