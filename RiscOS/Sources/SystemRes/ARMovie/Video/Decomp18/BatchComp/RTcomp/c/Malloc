/*
 * Malloc.c: Malloc with 'FreeAll' function
 *
 * Modified from tmall.h by RJW.
*/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

static int dummy[2] = { 0, 0 };
static int *head = &dummy[0];

void *Malloc(size_t size)
{
  int *tmp;

  tmp=malloc(size+8);
  /* Improve error handling */
  if (tmp == NULL) {
    printf("Malloc failed!\n");
    exit(1);
    return NULL;
  }
  /* Forward from the last chunk is here */
  head[0] = (int) tmp;
  /* We don't have a 'forward' from this chunk, yet */
  tmp[0] = NULL;
  /* We do however have a back */
  tmp[1] = (int) head;
  /* Back from the next chunk will be this one */
  head = tmp;
  /* Move past the header */
  tmp += 2;

  return (void *) tmp;
}

void Free(void *p)
{
  int *tmp=p;
  int *fwd, *back;
  
  tmp -= 2;
  if (tmp == head) {
    head = (int *) tmp[1];
  }
  if (p != NULL) {
    fwd  = (int *) tmp[0];
    back = (int *) tmp[1];
    fwd[1] = (int) back;
    back[0] = (int) fwd;
    free(tmp);
  }
}

void FreeAll(void) {
  
  int *ptr;

  ptr = (int *) head[1];
  while (ptr != NULL) {
    free(head);
    head = ptr;
    ptr = (int *) head[1];
  }
}
