#include "bool.h"
#include <stdio.h>
#include "flt.h"
char *copypad(FILE *in,FILE *out,
              size_t size,size_t padlen,
              long int inp_offset,BOOL *trymalloc,char * *buff);

/* Copies size bytes from in to out starting at inp_offset,
 *   then writes size-padlen zeros.
 * If *buff is non-null, it uses it as a buffer padlen bytes long.
 * Otherwise, if *trymalloc is TRUE, it tries to malloc padlen bytes
 *   to use as a buffer. If it can't, then it copies byte by byte, and sets
 *   *trymalloc to FALSE.
 * Otherwise it uses fread/fwrite. Returns an error message on failure.
 *
 * This should make for a shorter main()
 * Assumes inp_offset is valid. For a non-binary file, must be returned
 *   from ftell()
 */



/* scan forward n rets. Returns no of chars scanned.*/
/* Note must be taken of where the file pointer will
 * be after using these functions.
 */
int scanret(FILE *f,int num);

int getint(FILE *f);

/*read to next space*/
void getspace(FILE *f);
/* read to next c*/
void gotochar(FILE *f,char c);

/* get an int & next newline or non-whitespace */
/* Can't use getint immediately after if next is a digit*/
int getintchar(FILE *f,char*next);

/* Like fgets, except terminates on space, and returns NULL if out of buffer */
char *scan2space(char *s,int n,FILE *stream);
/* Like fgets, except terminates on ch, and returns NULL if out of buffer */
char *scan2char(char *s,int n,char ch,FILE *stream);

flt getflt(FILE *f);

typedef struct sq
{
  char * base;
  int size,taken,curr;
} SeqString;

/*like fgets, but does its own mallocing*/
int getseqstring(SeqString *str,FILE *f);
/*like getseqstring, but uses scan2char*/
int getseqstringch(SeqString *str,char ch,FILE *f);
