#include "bool.h"
#include <stdio.h>
#include <stdlib.h>
#include "ctype.h"
#include "filestuff.h"
#include "flt.h"
#include "error.h"
#include <string.h>

#define NEWLINE '\n'

char *copypad(FILE *in,FILE *out,
              size_t size,size_t padlen,
              long int inp_offset,BOOL *trymalloc,char * *buff)

/* Copies size bytes from in to out starting at inp_offset,
 *   then writes size-padlen zeros.
 * If *buff is non-null, it uses it as a buffer padlen bytes long.
 * Otherwise, if *trymalloc is TRUE, it tries to malloc padlen bytes
 *   to use as a buffer. If it can't, then it copies byte by byte, and sets
 *   *trymalloc to FALSE.
 * Otherwise it uses fread/fwrite. Returns an error message on failure.
 *
 * This should make for a shorter main()
 * Assumes inp_offset is valid. For a non-binary file, must be returned
 *   from ftell()
 */
{
  int i,c,e;
  size_t l;
  if(fseek(in,inp_offset,SEEK_SET)!=0)
   return("Could not seek. \n");
  if(*buff==NULL)
   {
    if(*trymalloc)
    *buff=malloc(padlen);
   }
  if(*buff==NULL)
   {
    for(i=0;i<size;i++)
    {
     c =fgetc(in);
     if(c==EOF) return("Could not read from input\n");
     e =fputc(c,out);
     if(c==EOF) return("Could not write to output\n");
    }
    for(i=size;i<padlen;i++)
    {
     e =fputc(0,out);
     if(c==EOF) return("Could not write to output\n");
    }
   }
  else
   {
     for(i=size;i<padlen;i++)
      (*buff)[i]=0;
     l=fread(*buff,sizeof(char),size,in);
     if(l!=size) return("Could not read from input\n");
     l=fwrite(*buff,sizeof(char),padlen,out);
     if(l!=padlen) return("Could not write to output\n");
   }
  return(NULL);
}


/* scan forward n rets. Returns no of chars scanned.*/
/* Note must be taken of where the file pointer will
 * be after using these functions.
 */
int scanret(FILE *f,int num)
{
  int i,c,ret=0;
  for(i=0;i<num;i++)
  {
    do
     {
      c=getc(f);
      if(c==EOF) error("EOF encountered\n");
      ret++;
     }
    while(c!=NEWLINE);
  }
  return(ret);
}

int getint(FILE *f)
{
  int c,ret=0;

    do
     {
      c=getc(f);
      if(c==EOF) error("EOF encountered\n");
     }
    while(isspace(c));
    while(isdigit(c))
     {
      if((c>='0') &&(c<='9'))
        ret=10*ret+c-'0';
      c=getc(f);
     if(c==EOF) error("EOF encountered\n");

     }
    c=ungetc(c,f);
    if(c==EOF) error("EOF encountered\n");
    return(ret);
}


flt getflt(FILE *f)
{
  int c;
  flt ret={0,0};

    do
     {
      c=getc(f);
      if(c==EOF) error("EOF encountered\n");
     }
    while(isspace(c));
    while(isdigit(c))
     {
      if((c>='0') &&(c<='9'))
        ret.mant=10*ret.mant+c-'0';
      c=getc(f);
     if(c==EOF) error("EOF encountered\n");

     }
    if(c=='.')
     { c=getc(f);
      while(isdigit(c))
      {
       if(c==EOF) error("EOF encountered\n");
       ret.mant=10*ret.mant+c-'0';
       ret.shift++;
       c=getc(f);
      }
     }
    c=ungetc(c,f);
    if(c==EOF) error("EOF encountered\n");
    while(((ret.mant%10 )==0) && (ret.shift>0))
    { ret.mant=ret.mant/10;
      ret.shift--;
    }
    return(ret);
}


char *scan2space(char *s,int n,FILE *stream)
{ int c,i;
  char *tmp=s;

  for(i=0;i<(n-1);i++)
  {c=getc(stream);
   if(c==EOF) return NULL;
   *(tmp++)=c;
   if(isspace(c))
   {*tmp='\0';
    c=ungetc(c,stream);
    if(c==EOF) error("EOF encountered\n");
    return s;
   }
  }
  return NULL;

}
char *scan2char(char *s,int n,char ch,FILE *stream)
{ int c,i;
  char *tmp=s;

  for(i=0;i<(n-1);i++)
  {c=getc(stream);
   if(c==EOF) return NULL;
   *(tmp++)=c;
   if(c==ch)
   {*tmp='\0';
    c=ungetc(c,stream);
    if(c==EOF) error("EOF encountered\n");
    return s;
   }
  }
  return NULL;

}
/*read to next space*/
void getspace(FILE *f)
{
  int c;

    do
     {
      c=getc(f);
      if(c==EOF) error("EOF encountered\n");
     }
    while(!isspace(c));

}

void gotochar(FILE *f,char c)
{
  int ch;

    do
     {
      ch=getc(f);
      if(ch==EOF) error("EOF encountered\n");
     }
    while(c!=ch);

}
/* get an int & next newline or non-whitespace */
/* Can't use getint immediately after if next is a digit*/
int getintchar(FILE *f,char*next)
{
  int c,ret=0;

    do
     {
      c=getc(f);
      if(c==EOF) error("EOF encountered\n");
     }
    while(isspace(c));
    while(isdigit(c))
     {
      if((c>='0') &&(c<='9'))
        ret=10*ret+c-'0';
      c=getc(f);
     if(c==EOF) error("EOF encountered\n");

     }
     while((isspace(c))&&(c !=NEWLINE))
     {
      c=getc(f);
      if(c==EOF) error("EOF encountered\n");
     }
     *next=c;

    return(ret);
}
int getseqstring(SeqString *str,FILE *f)
{ char *e;
  int l,bcurr=str->curr;
  e=fgets(str->base+str->curr,(str->size-str->taken),f);
  if(e==NULL) error("End of file\n");
  for(;;){
   l=strlen(str->base+str->curr);
   if(l==(str->size-str->taken-1))
   {
    if(str->base[l+str->curr]!='\n')
     {
       e=realloc(str->base,str->size+1024);
       if(e==NULL) error("Can't allocate memory");
       str->base=e;
       str->size+=1024;
       str->curr+=l;
       str->taken+=l;
     }
   }
   else{
            str->curr+=l+1;
       str->taken+=l+1;

      break;
   }
  e=fgets(str->base+str->curr,(str->size-str->taken),f);
  if(e==NULL) error("End of file\n");
  }
  return(bcurr);
}
int getseqstringch(SeqString *str,char ch,FILE *f)
{ char *e;
  int l,bcurr=str->curr;
  e=scan2char(str->base+str->curr,(str->size-str->taken),ch,f);
  if(e==NULL) error("End of file\n");
  for(;;){
   l=strlen(str->base+str->curr);
   if(l==(str->size-str->taken-1))
   {
    if(str->base[l+str->curr]!='\n')
     {
       e=realloc(str->base,str->size+1024);
       if(e==NULL) error("Can't allocate memory");
       str->base=e;
       str->size+=1024;
       str->curr+=l;
       str->taken+=l;
     }
   }
   else{
            str->curr+=l+1;
       str->taken+=l+1;

      break;
   }
  e=scan2char(str->base+str->curr,(str->size-str->taken),ch,f);
  if(e==NULL) error("End of file\n");
  }
  return(bcurr);
}
