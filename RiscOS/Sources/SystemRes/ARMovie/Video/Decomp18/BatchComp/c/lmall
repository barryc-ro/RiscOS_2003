/* Malloc wrapper

*/

#include <string.h>
#include <stdlib.h>
void *mallist=NULL;


void *lmalloc(size_t size)
{void **tmp,**next;
 tmp=malloc(size+8);
 if(tmp==NULL) return NULL;
 tmp +=2;
 tmp[-1]=NULL;
 tmp[-2]=mallist;
 next=mallist;
 mallist=tmp;
 if(next!=NULL) next[-1]=mallist;
 return mallist;
}

void lfree(void *p)
{ void **tmp,**left,**right;
  tmp =(void **)p;
  left=tmp[-1];
  right=tmp[-2];
  if(left !=NULL) left[-2]=right;
  if(right !=NULL) right[-1]=left;
  if(mallist==tmp) mallist = ((left!=NULL)?left: right);
  free(tmp-2);
}
void *lcalloc(size_t nobj,size_t size)
{ void *tmp;
  tmp=lmalloc(nobj*size);
  if(tmp==NULL) return NULL;
  return memset(tmp,'\0',nobj*size);
}

void lfreeall(void)
{while(mallist!=NULL)
 lfree(mallist);
}

#ifdef TEST

int main(int argc,char *argv[])
{ void  *a,*b,*c,*d,*e,*f;
  a=lmalloc(100);
  b=lcalloc(2,500);
  c=lmalloc(50);
  d=lmalloc(2);
  lfree(c);

  e=lmalloc(10);
  f=lmalloc(9);
  lfree(d);
  lfree(a);
  lfree(f);
  lfreeall()  ;




}
#endif
