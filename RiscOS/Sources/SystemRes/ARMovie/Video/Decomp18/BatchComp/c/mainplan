#define OURTYPE 18
/*
read newheader:
	x
	y
	fps
	fpc
	nc


initreader

for i=1 to new_nc
  initcoder
  codechunk
  shutcoder
next i
shutreader
*/
#include "MemCheck:MemCheck.h"
#include "HierProf:HierProf.h"
#include "reader.h"
#include "filestuff.h"
#include <string.h>
#include "cdir.h"
#include "TMN/sim.h"
#include <math.h>
#include "TMN/error.h"
#include "batchcomp.h"
#include "TMN/Logger.h"
#include "TMN/tmnarg.h"
#include "checkpoint.h"
#include "setenv.h"
#include "compIF.h"
#include "TMN/Malloc.h"

typedef struct wr {
  int FramesPerChunk;
  int NumChunks;
  char *sourcename;
  char destname[256];
  int start;
  int targetsize;
  int index;
  int skipframes;
  int quality;
#ifdef SAMLLCHUNK
  int framesleft;
#endif
}WState;

WState writestate={0,0,NULL,"\n",0,0,-1,0,0};


const flt ffff={125,1};

void parsenewheader(char *headername);
/*Currently fills in readstate & writestate structs directly.*/
/*I may change this two three functions */
/*One writing a header struct, the otherer filling in writestate & readstate. */
void parsenewheader(char *headername)
     /*leaves armovie open */
{    int type;
     FILE *header;

     char intmp[256];

     header=fopen(headername,"rb");
     if(header==NULL) error("Could not open header file\n");

     fgets(intmp,8,header);
     if(strncmp(intmp,"ARMovie",7)) error("Not an ARMovie header file\n");
     scanret(header,4); /* skip movie name, date, author,*/

     type  = getint(header);
     if(type !=OURTYPE) error("Wrong type\n");
     scanret(header,1);

     readstate.ox=getint(header);
     scanret(header,1);
     readstate.oy=getint(header);
     scanret(header,1);
     fgets(intmp,255,header);
/*
#ifdef DONT
     if(strstr(intmp,"YUV")==NULL) error("Destination Not a YUV file\n");
#endif
*/
     readstate.outfps=getflt(header);
     scanret(header,5); /* skip sound stuff*/
     writestate.FramesPerChunk=getint(header);
 /*    scanret(header,1);
     writestate.NumChunks=getint(header);*/


     fclose(header);
}

void wstatefromargs(WState *wr,BCArgs b)
{
  wr->sourcename=b.source;
  strncpy(wr->destname,b.dest,256);
  wr->start=b.start;
  wr->targetsize=b.size;
  wr->index=b.index;
  wr->quality=b.quality;
  if(wr->quality==0) error("Can't perfectly encode\n");
#ifdef LOGGING
  t_NoText=b.notext;
#endif
  setnobatch(b.batch);

}
/*void trgfrombargs(BCArgs *barg,TArgs *trg);*/
int stopped2args(BCArgs *barg,char *stopname,char *stopbname,int*QP,TmnArgs *trg)
    { FILE *stopfile;
      int startchunk;
     stopfile=fopen(stopname,"r");
     if(stopfile==NULL) error("Cannot restart - No stopped file\n");

      if(fscanf(stopfile,"%d chunkno\n",&startchunk)==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d start\n",&(barg->start))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d size\n",&(barg->size))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d index\n",&(barg->index))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d quality\n",&(barg->quality))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d notext\n",&(barg->notext))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d batch\n",&(barg->batch))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d QP\n",QP)==EOF) error("Error reading from stopped file\n");
      if(fscanf(stopfile,"%d nokeys\n",&(barg->nokeys))==EOF) error("Error reading from stopped file\n");
      compreadstopped(stopfile);
     fclose(stopfile);
     stopfile=fopen(stopbname,"rb");
     if(stopfile==NULL) error("Cannot restart - No stopped file\n");
     compreadbinstopped(stopfile, trg);
     fclose(stopfile);
     if(startchunk<0) error("bad stopped file\n");
     return startchunk;
    }
void writestopped(BCArgs barg,int i,char *stopname,int QP)
    {
      FILE *stopfile;

      stopfile=fopen(stopname,"w");
      if(stopfile==NULL) error("Could not open stopfile for writing\n");
      if(fprintf(stopfile,"%d chunkno\n",i)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d start\n",barg.start)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d size\n",barg.size)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d index\n",barg.index)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d quality\n",barg.quality)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d notext\n",barg.notext)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d batch\n",barg.batch)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d QP\n",QP)<0) error("Error writing to stopped file\n");
      if(fprintf(stopfile,"%d nokeys\n",barg.nokeys)<0) error("Error writing to stopped file\n");
      compwritestopped(stopfile);
      fclose(stopfile);
    }
void writebinstopped(char *stopbname,tmnret TRet)
{
  FILE *stopfile;
  stopfile=fopen(stopbname,"wb");
  if(stopfile==NULL) error("Cannot write stopped file\n");
  compwritebinstopped(stopfile,TRet);
  fclose(stopfile);
}

/****************************************************************************
* Main routine
*
****************************************************************************/
static BCArgs DefArgs = {
  FALSE,
  FALSE,
  NULL,
  FALSE,
  NULL,
  FALSE,
  NULL,
  -1,
  FALSE,
  FALSE,
  -1,
  FALSE,
  -1,
  NULL,
  0,
  -1

};

/* For HierProf */

int main(int argc,char *argv[])
{ FILE *timout;
  char timname[256];
  char filename[256];
  char dirname[256];

  char stopname[256]; /* saved text info*/
  char stopbname[256]; /* saved binary info*/

  char logname[256];
  char argtmp[4096];
  BCArgs barg = DefArgs;

  int i,leng;
#ifdef WRITECIF
  int leng2,j;
#endif
  int startchunk=0;
  char tmph,tmpv;
  tmnret TRet={0,(float)0.0};

/*  memchk_file = fopen("memchk/txt","w");
  if(memchk_file == NULL)exit(-1); */

  MemCheck_Init();
  MemCheck_RedirectToFilename("memchk/txt");
  MemCheck_RegisterArgs(argc,argv);
  MemCheck_InterceptSCLStringFunctions();
  //MemCheck_SetStoreMallocFunctions(0);
  MemCheck_SetQuitting(1,1);
  HierProf_ProfileAllFunctions();
  HierProf_OutputToFilenamef("Profile");

  //HierProf_ProfileFunction(FindPred);
  //HierProf_ProfileFunction(FindPredOBMC);
  //HierProf_ProfileFunction(SAD_Macroblock);
  //HierProf_ProfileFunction(SAD_Block);
  //HierProf_ProfileFunction(MB_Decode);
  //HierProf_ProfileFunction(DoPredChrom_P);
  HierProf_ProfileFunction(ReconImage);
  HierProf_ProfileFunction(FindPMV);
  HierProf_ProfileFunction(InterpolateImage);
  //HierProf_ProfileFunction(Dequant);
  //HierProf_ProfileFunction(malloc);
  //HierProf_ProfileFunction(free);
  //HierProf_ProfileFunction(FindMB);
  //HierProf_ProfileFunction(FindMBbytes);
  //HierProf_ProfileFunction(Clip);
  //HierProf_ProfileFunction(LoadArea);
  //HierProf_ProfileFunction(putbits);
  //HierProf_ProfileFunction(alignbits);
  //HierProf_ProfileFunction(initbits);
  //HierProf_ProfileFunction(fwrite);
  //HierProf_ProfileFunction(MB_Encode);
  //HierProf_ProfileFunction(FindHalfPel);

/*
#ifdef DONT
  flushc();
 printf("here\n");
#endif
*/

  barg.dest=argtmp;
  strcpy(barg.dest,"\n");
  barg.source=argtmp+256;
  barg.display=argtmp+1024;
  barg.filters=argtmp+1280;

  delenv("ARMovie$CompressionStatus");

  /* Dummy function at the moment - does nothing  ????????*/
  compinit();

  parseargs(argc,argv,&barg);

  if(barg.index==-1){

      sprintf(stopname,"%sStoppedD",barg.dest);
      sprintf(stopbname,"%sStoppedC",barg.dest);
  }
  else
  {
      sprintf(stopname,"%s%dStoppedD",barg.dest,barg.index);
      sprintf(stopbname,"%s%dStoppedC",barg.dest,barg.index);
  }

  if(barg.index==-1)
  {
   strcpy(filename,barg.dest);
   strcat(filename,"header");
   strcpy(logname,barg.dest);
   strcat(logname,"Log");
  }
  else
  {
   sprintf(filename,"%s%dheader",barg.dest,barg.index);
   sprintf(logname,"%s%dLog",barg.dest,barg.index);
  }

  if(barg.restart)
  {
    startchunk=stopped2args(&barg,stopname,stopbname,&(barg.quality),&trg);
#ifdef LOGGING
    t_ContLog(logname);
#endif
  }
#ifdef LOGGING
  else
    t_InitLog(logname);
#endif



  wstatefromargs(&writestate,barg);

  readstate.ArmovieName=writestate.sourcename;

  parsenewheader(filename); /* sets up readstate*/

  initreader(readstate);

  atexit(shutreader);

  writestate.skipframes = (int)(writestate.start*readstate.outfps.mant/pow(10,readstate.outfps.shift+2));
  if(barg.t_setnumc==-1)
   {
    writestate.NumChunks=(readstate.FramesPerChunk*(readstate.NumChunks+1)-writestate.skipframes)/writestate.FramesPerChunk-1;
    if(0!=(readstate.FramesPerChunk*(readstate.NumChunks+1)-writestate.skipframes)%writestate.FramesPerChunk)
     writestate.NumChunks++;
   }
  else writestate.NumChunks=barg.t_setnumc;
  leng= readstate.ox*readstate.oy*3/2; /* testing*/
  trg.start=0;
  trg.end=writestate.FramesPerChunk-1;
  if(writestate.targetsize>0)
    trg.targetrate = writestate.targetsize*(readstate.outfps.mant)/(pow(10,readstate.outfps.shift));
  if(writestate.quality>0) trg.QP=writestate.quality;
  /*set source format*/
  tmph=readstate.ox/16;
  tmpv=readstate.oy/16;
  trg.xs=readstate.ox;
  trg.ys=readstate.oy;
  trg.seqfilename=writestate.sourcename;
#ifndef OFFLINE_RATE_CONTROL
  trg.target_frame_rate=readstate.outfps.mant/(pow(10,readstate.outfps.shift));
#endif
  trg.ref_frame_rate = readstate.outfps.mant/(pow(10,readstate.outfps.shift));
  compargsfromargs(barg);

  if((readstate.ox%16!=0)||(readstate.oy%16!=0)) error("source size bad\n");


   for(i=0;i<writestate.skipframes;i++) /* Could be improved by reading key frames if present*/
    readframe(NULL);
   if(barg.restart)
   {
     for(i=0;i<(startchunk*writestate.FramesPerChunk);i++)
      readframe(NULL);
   }
   /*timing */
   strcpy(timname,writestate.destname);
   strcat(timname,"/time");
   timout=fopen(timname,"wb");
   fclose(timout);



/*********
 * Start of chunk loop
 **********/
   for (i=startchunk;i<=writestate.NumChunks;i++)
   {
      if (writestate.index == -1) {
        sprintf(filename,"%sImages%d.%2.2d",writestate.destname,i/77,i%77);
        sprintf(dirname,"%sImages%d",writestate.destname,i/77);
      } else {
        sprintf(filename,"%s%dImages%d.%2.2d",writestate.destname,writestate.index,i/77,i%77);
        sprintf(dirname,"%s%dImages%d",writestate.destname,writestate.index,i/77);
      }
      writestopped(barg,i,stopname,trg.QP);

      trg.streamname=filename;
      if(0 != cdir(dirname))
        error("could not create dir\n");
      /* This routine used instead of compinit() ????????? */
      compchinit(i,&trg);
      trg.bitbalance=TRet.bitbalance;
#ifdef WRITECIF
      {
        FILE *chunkout;
        unsigned char *cfout;

        chunkout=fopen(filename,"wb");
        if(chunkout==NULL)
          error("Could not open output file\n");
	printf("%d\n", leng);
        cfout=Malloc(leng);
        for(j=0;j<writestate.FramesPerChunk;j++) {
          printf("Frame %d...\n", j);
          readframe(cfout);
          printf("Writing %d...\n", j);
          leng2=fwrite(cfout,sizeof(unsigned char),leng,chunkout);
          if(leng!=leng2) error("Error writing output\n");
        }
        Free(cfout);
        fclose(chunkout);
      }
#else
#ifdef LOGGING
      sprintf(t_LogMsg,"Starting Chunk %d \n\n",i);t_LogOut(t_LogMsg);
#endif
#ifdef T_DEBUG
      if(i==18) t_dotrace=1;
#endif
      TRet=tmnmain(trg);
#endif

      if(TRet.quant != 0) trg.QP=TRet.quant;
      trg.pimage=TRet.image; /*!!!*/
      trg.precon=TRet.pic;
      trg.qp_mean=TRet.qp_mean;
#ifndef WRITECIF
      writebinstopped(stopbname,TRet);
#endif
   } /* end of NumChunks loop */

   MemCheck_OutputBlocksInfo();
#ifdef LOGGING
   t_LogOut("testmsg");
#endif

#ifdef LOGGING
   t_ShutLog();
#endif

}
/************************************ End of main() ******************************/
