/************************************************************************
 *
 *  main.c, main module of tmn (TMN encoder).
 *  tmn is an H.263 encoder somewhat based on the Test Model Near-term
 *  (TMN5) in the ITU-T LBC Experts Group.
 *
 *  Copyright (C) 1995, 1996  Telenor R&D, Norway
 *        Karl Olav Lillevold <Karl.Lillevold@nta.no>
 *
 *  Contacts:
 *  Karl Olav Lillevold               <Karl.Lillevold@nta.no>, or
 *  Robert Danielsen                  <Robert.Danielsen@nta.no>
 *
 *  Telenor Research and Development  http://www.nta.no/brukere/DVC/
 *  P.O.Box 83                        tel.:   +47 63 84 84 00
 *  N-2007 Kjeller, Norway            fax.:   +47 63 81 00 76
 *
 ************************************************************************/

/*
 * Disclaimer of Warranty
 *
 * These software programs are available to the user without any
 * license fee or royalty on an "as is" basis.  Telenor Research and
 * Development disclaims any and all warranties, whether express,
 * implied, or statuary, including any implied warranties or
 * merchantability or of fitness for a particular purpose.  In no
 * event shall the copyright-holder be liable for any incidental,
 * punitive, or consequential damages of any kind whatsoever arising
 * from the use of these programs.
 *
 * This disclaimer of warranty extends to the user of these programs
 * and user's customers, employees, agents, transferees, successors,
 * and assigns.
 *
 * Telenor Research and Development does not represent or warrant that
 * the programs furnished hereunder are free of infringement of any
 * third-party patents.
 *
 * Commercial implementations of H.263, including shareware, are
 * subject to royalty fees to patent holders.  Many of these patents
 * are general enough such that they are unavoidable regardless of
 * implementation design.
 * */


#include "TMN/sim.h"
#include "TMN/tmnarg.h"
#include "TMN/logger.h"
#include "checkpoint.h"
#include "TMN/Malloc.h"

/* External variables */
#if 0
extern char *stream;
extern int stream_len;
#else
#include "TMN/hack_dec.h"
#endif

/* Static vars */
  static FILE *streamfile;
  static PictImage *prev_image = NULL;
  static PictImage *curr_image = NULL;
  static PictImage *curr_recon = NULL;
  static PictImage *prev_recon = NULL;

  /* PB-frame specific */
  static PictImage *B_recon = NULL;
  static PictImage *B_image = NULL;

  Pict pic;
  unsigned char *image;
  FILE *cleared;

  int i;
  float mean_frame_rate, ref_frame_rate, frame_rate, seconds;
//  int first_loop_finished=0;
  int total_frames_passed, PPFlag = 0, targetrate;
  int frames,bframes,pframes,wcopies,icopies, write_repeated,pdist=0,bdist=0;
  int start, end, frame_no, writediff;
  int first_frameskip, chosen_frameskip, orig_frameskip, frameskip;

void t_init_tmnmain(void)
{
  streamfile=NULL;
  /* Lets assume no frame is going to be more than 100K */
  /* This needs tidying. Currently this is a space leak, but it only happens once. */
  /* We are guaranteed that stream == NULL initially */
  if (stream == NULL) {
    stream = (char *)Malloc(100*1024);
  }
}

#define SWAP(A,B) { PictImage *t; t = A; A = B; B = t; }

tmnret tmnmain(TmnArgs trg)
{
  int QP,QPI;
  Bits bits;
  Bits total_bits;
  Bits intra_bits;
#ifdef COMPUTE_SNR
  Results res;
  Results total_res;
  Results b_res;
#endif
  char seqfilename[100];// = (char *)Malloc(100*sizeof(char));
  char streamname[100];// = (char *)Malloc(100*sizeof(char));
#ifdef DOOUT
  char outputfile[100];// = (char *)Malloc(100*sizeof(char));
#endif
  char *diff_filename=DEF_DIFFILENAME;
#ifdef TRACE
  char tracefile[100];// = (char *)Malloc(100*sizeof(char));
#endif

#ifndef OFFLINE_RATE_CONTROL
  float DelayBetweenFramesInSeconds;
  int CommBacklog;
#else
//  PictImage *stored_image = NULL;
  int start_rate_control;
#endif
  tmnret TRet={0,0.0};

  extern int arith_used;

/*
  _heap_checking_on_all_allocates(1);
  _heap_checking_on_all_deallocates(1);
*/
#ifdef LOGGING
  sprintf(t_LogMsg,"\nTMN (H.263) coder version 2.0, Copyright (C) 1995, 1996  	Telenor R&D, Norway\n"); t_LogOut(t_LogMsg);
#endif
  headerlength = DEF_HEADERLENGTH;

  pels=trg.xs;
  lines=trg.ys;
  if (curr_recon == NULL) {
    curr_recon = InitImage(pels*lines);
    curr_image = InitImage(pels*lines);
    prev_recon = InitImage(pels*lines);
    prev_image = InitImage(pels*lines);
    B_image    = InitImage(pels*lines);
    B_recon    = InitImage(pels*lines);
  }

#ifndef FASTIDCT
  init_idctref();
#endif

  /* Default variable values */
  advanced = DEF_ADV_MODE;
  syntax_arith_coding = DEF_SAC_MODE;
  pic.unrestricted_mv_mode = DEF_UMV_MODE;
  mv_outside_frame = DEF_UMV_MODE || DEF_ADV_MODE;
  long_vectors = DEF_UMV_MODE;
  pb_frames = DEF_PBF_MODE;

  QP = DEF_INTER_QUANT;
  QPI = DEF_INTRA_QUANT;
  pic.BQUANT = DEF_BQUANT;
  pic.source_format = DEF_CODING_FORMAT;

  ref_frame_rate = (float)DEF_REF_FRAME_RATE;
  chosen_frameskip = DEF_FRAMESKIP + 1;
  orig_frameskip = DEF_ORIG_SKIP + 1;
#ifdef OFFLINE_RATE_CONTROL
  start_rate_control = DEF_START_RATE_CONTROL;
#else
  pic.target_frame_rate = (float)DEF_TARGET_FRAME_RATE;
#endif

  seqfilename[0] = '\0';
  strcpy(streamname, DEF_STREAMNAME);
#ifdef DOOOUT
  strcpy(outputfile, DEF_OUTFILENAME);
#endif
  writediff = DEF_WRITE_DIFF;
#ifdef TRACE
  trace = DEF_WRITE_TRACE;
#endif
  write_repeated = DEF_WRITE_REPEATED;
  pic.seek_dist = DEF_SEEK_DIST;
  pic.use_gobsync = DEF_INSERT_SYNC;
  start = DEF_START_FRAME;
  end = DEF_STOP_FRAME;

  targetrate = 0;
  /* default is variable bit rate (fixed quantizer) will be used */

  frames = 0;
  pframes = 0;
  bframes = 0;
  total_frames_passed = 0;
  pic.PB = 0;
  wcopies = icopies = 1;

  pic.TR = 0;
  pic.QP_mean = (float)0.0;
#ifdef T_DEBUG
 fprintf(stderr,"start tmnmmain\n");
#endif
  { /* set args*/
   start=trg.start;
   end=trg.end;
   chosen_frameskip=trg.chosen_frameskip;
   orig_frameskip=trg.orig_frameskip;
   pic.seek_dist=trg.seek_dist;
#ifdef DOOUT
   strcpy(outputfile,trg.outputfile);
#endif
   headerlength=trg.headerlength;
   write_repeated=trg.write_repeated;
   strcpy(seqfilename,trg.seqfilename);
   QP=trg.QP;
   QPI=trg.QPI;
   writediff=trg.writediff;
   strcpy(streamname,trg.streamname);
#ifdef TRACE
   trace=trg.trace;
#endif
   pic.use_gobsync=trg.use_gobsync;
   pic.unrestricted_mv_mode=trg.unrestricted_mv_mode;
   syntax_arith_coding=trg.syntax_arith_coding;
   advanced=trg.advanced;
   mv_outside_frame
#include "TMN/hack_off.h"
       = trg.mv_outside_frame;
#include "TMN/hack_on.h"
   pb_frames=trg.pb_frames;
   pic.BQUANT=trg.BQUANT;
   targetrate=trg.targetrate;
   long_vectors
#include "TMN/hack_off.h"
       = trg.long_vectors;
#include "TMN/hack_on.h"
#ifdef OFFLINE_RATE_CONTROL
        start_rate_control = trg.start_rate_control;
#else
        pic.target_frame_rate = trg.target_frame_rate;
#endif
   ref_frame_rate=trg.ref_frame_rate;
   pic.source_format=trg.source_format;

  if(trg.unrestricted_mv_mode == ON) {
    mv_outside_frame=ON;
    long_vectors=ON;
  }
  if(advanced==ON){
    mv_outside_frame=ON;
  }

  }
/*
#ifdef DONT
  switch (pic->source_format) {
  case (SF_SQCIF):
    fprintf(stdout, "Encoding format: SQCIF (128x96)\n");
    pels = 128;
    lines = 96;
    break;
  case (SF_QCIF):
    fprintf(stdout, "Encoding format: QCIF (176x144)\n");
    pels = 176;
    lines = 144;
    break;
  case (SF_CIF):
    fprintf(stdout, "Encoding format: CIF (352x288)\n");
    pels = 352;
    lines = 288;
    break;
  case (SF_4CIF):
    fprintf(stdout, "Encoding format: 4CIF (704x576)\n");
    pels = 704;
    lines = 576;
    break;
  case (SF_16CIF):
    fprintf(stdout, "Encoding format: 16CIF (1408x1152)\n");
    pels = 1408;
    lines = 1152;
    break;
  default:
    fprintf(stderr,"Illegal coding format\n");
    exit(-1);
  }
#endif
*/
  cpels = pels/2;

#ifdef LOGGING
  sprintf(t_LogMsg,"\nLines = %d pels = %d\n", lines,pels);t_LogOut(t_LogMsg);
#endif

  if (seqfilename[0] == '\0') {
    fprintf(stderr,"Required input parameter \'-i <filename>\' missing\n");
    Help();
    exit(-1);
  }

#ifndef OFFLINE_RATE_CONTROL
  /* rate control variables */
  pic.bit_rate = targetrate;
  pic.src_frame_rate = (int)(ref_frame_rate / orig_frameskip);
  DelayBetweenFramesInSeconds = (float) 1.0/(float)pic.src_frame_rate;
  InitializeRateControl();
#endif

  if (QP == 0 || QPI == 0) {
    fprintf(stderr,"Warning:");
    fprintf(stderr,"QP is zero. Bitstream will not be correctly decodable\n");
  }
/*
#ifdef DONT
  if (ref_frame_rate != 25.0 && ref_frame_rate != 30.0) {
    fprintf(stderr,"Warning: Reference frame rate should be 25 or 30 fps\n");
  }
#endif
*/
  frame_rate =  ref_frame_rate / (float)(orig_frameskip * chosen_frameskip);
#ifdef OFFLINE_RATE_CONTROL
#ifdef LOGGING
  sprintf(t_LogMsg,"Encoding frame rate  : %.2f\n", frame_rate);t_LogOut(t_LogMsg);
#endif
#else
#ifdef LOGGING
  if (pic.bit_rate == 0)
    {sprintf(t_LogMsg,"Encoding frame rate  : %.2f\n", frame_rate);t_LogOut(t_LogMsg);}
  else
    {sprintf(t_LogMsg,"Encoding frame rate  : variable\n");t_LogOut(t_LogMsg);}
#endif
#endif
#ifdef LOGGING
  sprintf(t_LogMsg,"Reference frame rate : %.2f\n", ref_frame_rate);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"Orig. seq. frame rate: %.2f\n\n",
          ref_frame_rate / (float)orig_frameskip);t_LogOut(t_LogMsg);
#endif

  /* Open stream for writing */
  streamfile = fopen (streamname, "wb");
  if (streamfile == NULL) {
    fprintf(stderr,"Unable to open streamfile\n");
    exit(-1);
  }

  /* Initialize bitcounters */
  initbits ();

#ifdef TRACE
  if (trace) {
    strcpy(tracefile, "trace.intra");
    /* Open trace-file for writing */
    if ((tf = fopen(tracefile,"w")) == NULL) {
      fprintf(stderr,"Unable to open tracefile (intra)\n");
      exit(-1);
    }
  }
#endif
#ifdef DOOUT
  /* Clear output files */
  if ((cleared = fopen(outputfile,"wb")) == NULL) {
    fprintf(stderr,"Couldn't open outputfile: %s\n",outputfile);
    exit(-1);
  }
  else
    fclose(cleared);
#endif
  if (writediff) {
    if ((cleared = fopen(diff_filename,"wb")) == NULL) {
      fprintf(stderr,"Couldn't open diff-file: %s\n",diff_filename);
      exit(-1);
    }
    else
      fclose(cleared);
  }

  /* Intra image */
  ReadImage(seqfilename,start,headerlength, curr_image->lum);
#ifdef LOGGING
  sprintf(t_LogMsg,"Coding...\n");t_LogOut(t_LogMsg);
#endif
  //FillImage(image, curr_image);
  pic.picture_coding_type = PCT_INTRA;
  pic.QUANT = QPI;
#if 0
  {
    int i;

    for (i = 0; i <(sizeof(pic)/4); i++) {
      printf("%d: %d\n",i, ((int *)&pic)[i]);
    }
  }
#endif
#ifdef ICHUNKS
  CodeOneIntra(curr_image, QPI, &bits, &pic, curr_recon);
#else
  if(trg.doiframe==1) {
    CodeOneIntra(curr_image, QPI, &bits, &pic, curr_recon);
  }else {
    pic.picture_coding_type = PCT_INTER;
    pic.PB=0;
    pic.QUANT=QP;
    pic.QP_mean=trg.qp_mean;
        CodeOneOrTwo(curr_image, B_image, trg.pimage, trg.precon,
         QP, (bdist+pdist)*orig_frameskip, &bits, &pic,
         B_recon, curr_recon);
  //FreeImage(trg.pimage);
  //FreeImage(trg.precon);
  }

#endif
  if (arith_used) {
    bits.header += encoder_flush();
    arith_used = 0;
  }
  bits.header += alignbits (); /* pictures shall be byte aligned */
  fwrite(stream, 1, stream_len, streamfile);
  initbits();
#ifdef LOGGING
#ifdef ICHUNKS
  sprintf(t_LogMsg,"Finished INTRA\n");t_LogOut(t_LogMsg);
#else
  if(trg.doiframe==1) sprintf(t_LogMsg,"Finished INTRA\n");
  else sprintf(t_LogMsg,"Finished first P frame\n");
  t_LogOut(t_LogMsg);
#endif
#endif
#ifdef COMPUTE_SNR
  ComputeSNR(curr_image, curr_recon, &res, writediff);
#endif
  AddBitsPicture(&bits);
#ifdef COMPUTE_SNR
  PrintSNR(&res, 1);
#endif
#ifdef LOGGING
  PrintResult(&bits, 1, 1);
#endif
  memcpy(&intra_bits,&bits,sizeof(Bits));
  ZeroBits(&total_bits);
#ifdef COMPUTE_SNR
  ZeroRes(&total_res);
  ZeroRes(&b_res);
#endif

  /* number of seconds to encode */
  seconds = (end - start + chosen_frameskip) * orig_frameskip/ ref_frame_rate;

#ifdef TRACE
  if (trace) {
    strcpy(tracefile, "trace.inter");
    fclose(tf);
    /* Open trace-file for writing */
    if ((tf = fopen(tracefile,"w")) == NULL) {
      fprintf(stderr,"Unable to open tracefile (non-intra)\n");
      exit(-1);
    }
  }
#endif

  /* compute first frameskip */
#ifdef OFFLINE_RATE_CONTROL
  first_frameskip = chosen_frameskip;
  frameskip = chosen_frameskip;
#else
  CommBacklog = intra_bits.total -
    (int)(DelayBetweenFramesInSeconds * pic.bit_rate);

  if (pic.bit_rate == 0) {
    frameskip = chosen_frameskip;
  }
  else {  /* rate control is used */
#ifdef DO_SKIPFRAMES
    frameskip = 1;
    while ( (int)(DelayBetweenFramesInSeconds*pic.bit_rate) <= CommBacklog) {
      CommBacklog -= (int) ( DelayBetweenFramesInSeconds * pic.bit_rate );
      frameskip += 1;
    }
#else
  frameskip = chosen_frameskip;
#endif
  }
  first_frameskip = frameskip;
#endif

  if (first_frameskip > 256)
    fprintf(stderr,"Warning: frameskip > 256\n");

  pic.picture_coding_type = PCT_INTER;
  pic.QUANT = QP;
  bdist = chosen_frameskip;

  /* always encode the first frame after intra as P frame.
     This is not necessary, but something we chose to make
     the adaptive PB frames calculations a bit simpler */
  if (pb_frames) {
    pic.PB = 0;
    pdist = 2*chosen_frameskip - bdist;
  }

  if (write_repeated)
    icopies = chosen_frameskip;
#ifdef DOOUT
  for (i = 0; i < icopies; i++)
    WriteImage(curr_recon,outputfile); /* write wcopies frames to disk */
#endif

  /********************************************************************************
  * Main loop
  *********************************************************************************/
  for (frame_no = start + first_frameskip; frame_no <= end;
       frame_no += frameskip)
  {
   /* _mapstore(); */
   /*
    * Read in new frames and shuffle old frames ready to be coded
    */
    SWAP(prev_image, curr_image);
    SWAP(prev_recon, curr_recon);

    /* Set QP to pic->QUANT from previous encoded picture */
    QP = pic.QUANT;

    if (!PPFlag)
    {
      if (pic.PB)
      {
        bdist = frameskip;
        pdist = 2*frameskip - bdist;
        pic.TRB = bdist * orig_frameskip;
#ifdef LOGGING
        if (pic.TRB > 8)
          {sprintf(t_LogMsg,"distance too large for B-frame\n");t_LogOut(t_LogMsg);}
#endif
//        first_loop_finished = 1;
        if (frame_no + pdist <= end) {
          /* Read the frame to be coded as B */
          ReadImage(seqfilename,frame_no,headerlength, B_image->lum);
          //FillImage(image, B_image);
          ReadImage(seqfilename,frame_no + pdist,headerlength, curr_image->lum);
        }
        else {
          pic.PB = 0; /* end of sequence, encode as P */
          ReadImage(seqfilename,frame_no,headerlength, curr_image->lum);
        }
      }
      else {
        ReadImage(seqfilename,frame_no,headerlength, curr_image->lum);
      }
      //FillImage(image, curr_image);

      if (pic.PB)
      {
        if (pic.TRB > 8 || !NextTwoPB(curr_image, B_image, prev_image,
               bdist, pdist, pic.seek_dist))
        {
          /* curr_image and B_image were not suitable to be coded
             as a PB-frame - encoding as two P-frames instead */
          pic.PB = 0;
#ifdef OFFLINE_RATE_CONTROL
          //stored_image = curr_image;
#else
          //FreeImage(curr_image);
#endif
          frameskip = bdist;

          SWAP(curr_image, B_image);
          PPFlag = 1;
        }
        else
        {
          frame_no += pdist;
        }
      }
    }
    else
    {
      /* PPFlag is set when the second of the two P-frames
         is due to be coded */
#ifdef OFFLINE_RATE_CONTROL
      //curr_image = stored_image;
          SWAP(curr_image, B_image);
#else
      ReadImage(seqfilename,frame_no,headerlength, curr_image->lum);
      //FillImage(image, curr_image);
#endif
      pic.PB = 0;
      PPFlag = 0;
    }

    /* Temporal Reference is the distance between encoded frames compared
       the reference picture rate which is 25.0 or 30 fps */
    pic.TR += (( (frameskip+(pic.PB?pdist:0)) *orig_frameskip) % 256);
#ifdef LOGGING
    if (frameskip+(pic.PB?pdist:0) > 256)
      {sprintf(t_LogMsg,"Warning: frameskip > 256\n");t_LogOut(t_LogMsg);}
#endif


    frames += (pic.PB ? 2: 1);
    bframes += (pic.PB ? 1 : 0);
    pframes += 1;

#ifdef LOGGING
    if (pic.PB) { /* Code two frames as a PB-frame */
      sprintf(t_LogMsg,"Coding PB frames %d and %d... ",
              frame_no - pdist, frame_no);t_LogOut(t_LogMsg);
      fflush(stdout);
    }
    else { /* Code the next frame as a normal P-frame */
      sprintf(t_LogMsg,"Coding P frame %d... ", frame_no);t_LogOut(t_LogMsg);
      fflush(stdout);
    }
#endif


   /*
    * Now code the frames
    */


    CodeOneOrTwo(curr_image, B_image, prev_image, prev_recon,
         QP, (bdist+pdist)*orig_frameskip, &bits, &pic,
         B_recon, curr_recon);


#ifdef LOGGING
    sprintf(t_LogMsg,"done\n");t_LogOut(t_LogMsg);
    if (targetrate != 0)
      {sprintf(t_LogMsg,"Inter QP: %d\n", QP);t_LogOut(t_LogMsg);}
    fflush(stdout);
#endif

    if (arith_used) {
      bits.header += encoder_flush();
      arith_used = 0;
    }

    bits.header += alignbits ();  /* pictures shall be byte aligned */
    fwrite(stream, 1, stream_len, streamfile);
    initbits();
    AddBitsPicture(&bits);
    AddBits(&total_bits, &bits);

#ifndef OFFLINE_RATE_CONTROL
    if (pic.bit_rate != 0 && pic.PB)
      CommBacklog -= (int)
      ( DelayBetweenFramesInSeconds*pic.bit_rate ) * pdist;

    if (pic.bit_rate != 0) {
      UpdateRateControl(bits.total);

      CommBacklog += bits.total;
#ifdef DO_SKIPFRAMES
      frameskip = 1;
      CommBacklog -= (int)
        (frameskip * DelayBetweenFramesInSeconds *pic.bit_rate);

      while ( (int)(DelayBetweenFramesInSeconds*pic.bit_rate) <= CommBacklog)
      {
        CommBacklog -= (int) ( DelayBetweenFramesInSeconds * pic.bit_rate );
        frameskip += 1;
      }
#endif
    }
#else
    /* Aim for the targetrate with a once per frame rate control scheme */
    if (targetrate != 0)
      if (frame_no - start > (end - start) * start_rate_control/100.0)
        /* when generating the MPEG-4 anchors, rate control was started
           after 70% of the sequence was finished.
           Set start_rate_control with option "-R <n>" */

        {pic.QUANT = FrameUpdateQP(total_bits.total + intra_bits.total,
           bits.total / (pic.PB?2:1),
           (end-frame_no) / chosen_frameskip + PPFlag,
           QP, targetrate, seconds,trg.bitbalance);

        trg.bitbalance=0.0;
        TRet.bitbalance=(seconds*targetrate-(float)total_bits.total);}
    frameskip = chosen_frameskip;
#endif
        TRet.quant=pic.QUANT;  /* added to allow rate control over calls to tmnmain*/
        TRet.qp_mean=pic.QP_mean;

    if (pic.PB) {
      if (write_repeated)
        wcopies = pdist;
#ifdef DOOUT
      for (i = 0; i < wcopies; i++)
        WriteImage(B_recon,outputfile); /* write wcopies frames to disk */
#endif
#ifdef COMPUTE_SNR
      ComputeSNR(B_image, B_recon, &res, writediff);
#ifdef LOGGING
      sprintf(t_LogMsg,"Results for B-frame:\n");t_LogOut(t_LogMsg);
#endif
      AddRes(&b_res,&res,&pic);
      PrintSNR(&res, 1);
#endif
      //FreeImage(B_image);
      //FreeImage(B_recon);
    }

    if (write_repeated)
        wcopies = (pb_frames ? bdist : frameskip);
#ifdef DOOUT
    for (i = 0; i < wcopies; i++)
      WriteImage(curr_recon,outputfile); /* write wcopies frames to disk */
#endif
    if (pb_frames)
      pic.PB = 1;

#ifdef COMPUTE_SNR
    ComputeSNR(curr_image, curr_recon, &res, writediff);
#ifdef LOGGING
    sprintf(t_LogMsg,"Results for P-frame:\n");t_LogOut(t_LogMsg);
#endif
    AddRes(&total_res,&res,&pic);
    PrintSNR(&res, 1);
#endif
#ifdef LOGGING
    PrintResult(&bits, 1, 1);
#endif
    //FreeImage(prev_image);
    //FreeImage(prev_recon);
    fflush(stdout);
#ifndef DONT_CHECKPOINT
    checkpoint();
#endif
  }
  /***** end of main loop *****/
  /* Shove a startcode in the stream */
  ((int *)stream)[0] = 0x00800000;
  fwrite(stream, 1, 3, streamfile);

  /* Closing files */
  fclose (streamfile);
#ifdef TRACE
  if (trace) {
    fclose(tf);
  }
#endif

  /* Print total results */
  total_frames_passed = frame_no - start - first_frameskip;

#ifdef LOGGING
  sprintf(t_LogMsg,"\n==== TOTAL ====\n");t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"for %d images of %s\n", frames, seqfilename);t_LogOut(t_LogMsg);
#endif

  if (frames != 0) {
#ifdef LOGGING
    if (write_repeated)
      {sprintf(t_LogMsg,"Frames saved : %d predicted + %d intra\n",
              total_frames_passed,icopies);t_LogOut(t_LogMsg);}

    sprintf(t_LogMsg,"--------------\n");t_LogOut(t_LogMsg);

    if (pb_frames && bframes != 0) {
      sprintf(t_LogMsg,"SNR for %d B-frames:\n",bframes);t_LogOut(t_LogMsg);
#ifdef COMPUTE_SNR
      PrintSNR(&b_res,bframes);
#endif
    }

    sprintf(t_LogMsg,"SNR for %d P-frames:\n",pframes);t_LogOut(t_LogMsg);
#ifdef COMPUTE_SNR
    PrintSNR(&total_res,pframes);
#endif

    PrintResult(&total_bits, pframes, frames);

#ifndef OFFLINE_RATE_CONTROL
    if (targetrate != 0 || pic.bit_rate != 0)
      {sprintf(t_LogMsg,"Original seq time: %.2f (%.2f) sec\n",
              (total_frames_passed + first_frameskip) /
              ref_frame_rate * orig_frameskip,
              total_frames_passed /
              ref_frame_rate * orig_frameskip);t_LogOut(t_LogMsg);}
#endif

#ifdef COMPUTE_SNR
    sprintf(t_LogMsg,"Mean quantizer   : %.2f\n", total_res.QP_mean/pframes);t_LogOut(t_LogMsg);
#endif

#if 0
    sprintf(t_LogMsg,"Total frames     : %3d (%3d)\n",
            total_frames_passed + first_frameskip,
            total_frames_passed);t_LogOut(t_LogMsg);
#endif

    sprintf(t_LogMsg,"Encoded frames   : %3d (%3d)\n",
            frames + 1,
            frames);t_LogOut(t_LogMsg);
#endif

    mean_frame_rate = frames  / (float)total_frames_passed *
      ref_frame_rate / (float)orig_frameskip;

#ifdef LOGGING
    sprintf(t_LogMsg,"Mean frame rate  : %.2f Hz\n", mean_frame_rate);t_LogOut(t_LogMsg);

    if (targetrate != 0)
      {sprintf(t_LogMsg,"Target bit rate  : %.2f kbit/sec\n",
              targetrate/1000.0);t_LogOut(t_LogMsg);}

    sprintf(t_LogMsg,"Obtained bit rate: %.2f (%.2f) kbit/sec\n",
            (total_bits.total + intra_bits.total) /
            ((total_frames_passed + first_frameskip) /
             ref_frame_rate * orig_frameskip)/1000.0,
            (total_bits.total / (float)frames) * mean_frame_rate/1000.0);t_LogOut(t_LogMsg);

    sprintf(t_LogMsg,"============================================\n");t_LogOut(t_LogMsg);

#endif
  }
#if 0
  sprintf(t_LogMsg,"Total number of bits: %d (%d)\n",
          total_bits.total + intra_bits.total,
          (total_bits.total + intra_bits.total) / 8);t_LogOut(t_LogMsg);
#endif

  /* Free memory */
#ifdef ICHUNKS
  //FreeImage(curr_recon);
  //FreeImage(curr_image);
#endif
  //Free(streamname);
  //Free(seqfilename);
#ifdef DOOUT
  //Free(outputfile);
#endif
#ifdef TRACE
  //Free(tracefile);
#endif

#ifndef ICHUNKS
  TRet.pic=(void *)curr_recon;
  TRet.image=(void *)curr_image;
#endif

  return TRet;

 /* exit(0);*/
#ifdef T_DEBUG
 fprintf(stderr,"end tmnmaim\n");
#endif
}

/**********************************************************************
 *
 *	Name:        NextTwoPB
 *	Description:    Decides whether or not to code the next
 *                      two images as PB
 *      Speed:          This is not a very smart solution considering
 *                      the encoding speed, since motion vectors
 *                      have to be calculation several times. It
 *                      can be done together with the normal
 *                      motion vector search, or a tree search
 *                      instead of a full search can be used.
 *
 *	Input:	        pointers to previous image, potential B-
 *                      and P-image, frame distances
 *	Returns:        1 for yes, 0 otherwise
 *	Side effects:
 *
 *	Date: 950824	Author: Karl.Lillevold@nta.no
 *
 ***********************************************************************/

int NextTwoPB(PictImage *next2, PictImage *next1, PictImage *prev,
              int bskip, int pskip, int seek_dist)
{
  int adv_is_on = 0, mof_is_on = 0, lv_is_on = 0;
  int psad1, psad2, bsad, psad;
  MotionVector *MV[6][MBR+1][MBC+2];
  MotionVector *mvp;
  MotionVector mvbf;
  MotionVector mvbb;
  int x,y;
  int i,j,k,tmp;

  /* Temporarily disable some options to simplify motion estimation */
  if (advanced) {
    advanced = OFF;
    adv_is_on = ON;
  }
  if (mv_outside_frame) {
    mv_outside_frame = OFF;
    mof_is_on = ON;
  }
  if (long_vectors) {
    long_vectors = OFF;
    lv_is_on = ON;
  }

  for (j = 1; j <= (lines>>4); j++)
    for (i = 1; i <= (pels>>4); i++)
      for (k = 0; k < 3; k++) {
        MV[k][j][i] = (MotionVector *)Malloc(sizeof(MotionVector));
	memset(MV[k][j][i],0,sizeof(MotionVector));
        /* calloc to avoid Checker warnings about reading of
           unitizalized memory in the memcpy's below */
      }

  psad = 0;
  psad1 = 0;
  psad2 = 0;
  bsad = 0;

  /* Integer motion estimation */
  for ( j = 1; j < lines/MB_SIZE - 1; j++) {
    for ( i = 1; i < pels/MB_SIZE - 1 ; i++) {
      x = i*MB_SIZE;
      y = j*MB_SIZE;

      /* picture order: prev -> next1 -> next2 */
      /* next1 and next2 can be coded as PB or PP */
      /* prev is the previous encoded picture */

      /* computes vectors (prev <- next2) */
      MotionEstimation(next2->lum,prev->lum,x,y,0,0,seek_dist,MV,&tmp);
      if (MV[0][j+1][i+1]->x == 0 && MV[0][j+1][i+1]->y == 0)
        MV[0][j+1][i+1]->min_error += PREF_NULL_VEC;
      /* not necessary to prefer zero vector here */
      memcpy(MV[2][j+1][i+1],MV[0][j+1][i+1],sizeof(MotionVector));

      /* computes sad(prev <- next1) */
      MotionEstimation(next1->lum,prev->lum,x,y,0,0,seek_dist,MV,&tmp);
      if (MV[0][j+1][i+1]->x == 0 && MV[0][j+1][i+1]->y == 0)
        MV[0][j+1][i+1]->min_error += PREF_NULL_VEC;
      memcpy(MV[1][j+1][i+1],MV[0][j+1][i+1],sizeof(MotionVector));

      /* computes vectors for (next1 <- next2) */
      MotionEstimation(next2->lum,next1->lum,x,y,0,0,seek_dist,MV,&tmp);
      if (MV[0][j+1][i+1]->x == 0 && MV[0][j+1][i+1]->y == 0)
        MV[0][j+1][i+1]->min_error += PREF_NULL_VEC;

      /* scales vectors for (prev <- next2 ) */
      mvp = MV[2][j+1][i+1];
      mvbf.x =   bskip * mvp->x / (bskip + pskip);
      mvbb.x = - pskip * mvp->x / (bskip + pskip);
      mvbf.y =   bskip * mvp->y / (bskip + pskip);
      mvbb.y = - pskip * mvp->y / (bskip + pskip);

      psad1 += MV[0][j+1][i+1]->min_error;
      psad2 += MV[1][j+1][i+1]->min_error;
      psad +=  mvp->min_error;

      /* computes sad(prev <- next1 -> next2) */
      bsad += SAD_MB_Bidir(next1->lum + x + y*pels,
           next2->lum + x + mvbb.x + (y + mvbb.y)*pels,
           prev->lum + x + mvbf.x + (y + mvbf.y)*pels,
           pels, INT_MAX);
    }
  }

  for (j = 1; j <= (lines>>4); j++)
    for (i = 1; i <= (pels>>4); i++)
      for (k = 0; k < 3; k++)
        Free(MV[k][j][i]);
  //RFREE(mvbf);
  //RFREE(mvbb);

  /* restore advanced parameters */
  advanced = adv_is_on;
  mv_outside_frame = mof_is_on;
  long_vectors = lv_is_on;

  /* do the decision */
#ifdef LOGGING
  if (bsad < (psad1+psad2)/2)
    {sprintf(t_LogMsg,"Chose PB - bsad %d, psad %d\n",
            bsad, (psad1+psad2)/2);t_LogOut(t_LogMsg);}
  else
    {sprintf(t_LogMsg,"Chose PP  - bsad %d, psad %d\n",
            bsad, (psad1+psad2)/2);t_LogOut(t_LogMsg);}
#endif

  if (bsad < (psad1 + psad2)/2)
    return 1;
  else
    return 0;
}



/**********************************************************************
 *
 *	Name:        Help
 *	Description:        Prints usage
 *
 *
 ***********************************************************************/

void Help()
{
  fprintf(stdout,"Usage:\ttmn [options] -i <filename> [more options]\n");
  fprintf(stdout,"Options:\n");
  fprintf(stdout,"\t-i <filename> original sequence [required parameter]\n");
  fprintf(stdout,"\t-o <filename> reconstructed frames [%s]\n",
          DEF_OUTFILENAME);
  fprintf(stdout,"\t-B <filename> filename for bitstream [%s]\n",
          DEF_STREAMNAME);
  fprintf(stdout,"\t-a <n> image to start at [%d]\n",
          DEF_START_FRAME);
  fprintf(stdout,"\t-b <n> image to stop at [%d]\n",
          DEF_STOP_FRAME);
  fprintf(stdout,"\t-x <n> coding format [%d]\n",DEF_CODING_FORMAT);
  fprintf(stdout,"\t-q <n> (1..31) quantization parameter QP [%d]\n",
          DEF_INTER_QUANT);
  fprintf(stdout,"\t-I <n> (1..31) QP for first frame [%d]\n",
          DEF_INTRA_QUANT);
  fprintf(stdout,"\t-r <n> target bitrate in bits/s, default is variable bitrate\n");
  fprintf(stdout,"\t-S <n> frames to skip between each encoded frame [%d]\n",
          DEF_FRAMESKIP);
  fprintf(stdout,"\t-D use unrestricted motion vector mode (annex D) [%s]\n",
          DEF_UMV_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-E use syntax-based arithmetic coding (annex E) [%s]\n",
          DEF_SAC_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-F use advanced prediction mode (annex F) [%s]\n",
          DEF_ADV_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-G use PB-frames (annex G) [%s]\n",
          DEF_PBF_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-h Prints simple help\n");
  fprintf(stdout,"\t-H Prints advanced help\n");
  fprintf(stdout,"\n\tDefault filenames and other options in square brackets \n\tare chosen in config.h\n");
  return;
}

void AdvancedHelp()
{
  fprintf(stdout,"Usage:\ttmn [options] -i <filename> [more options]\n");
  fprintf(stdout,"Options:\n");
  fprintf(stdout,"\t-i <filename> original sequence [required parameter]\n");
  fprintf(stdout,"\t-o <filename> reconstructed frames [%s]\n",
          DEF_OUTFILENAME);
  fprintf(stdout,"\t-B <filename> filename for bitstream [%s]\n",
          DEF_STREAMNAME);
  fprintf(stdout,"\t-a <n> image to start at [%d]\n",
          DEF_START_FRAME);
  fprintf(stdout,"\t-b <n> image to stop at [%d]\n",
          DEF_STOP_FRAME);
  fprintf(stdout,"\t-x <n> coding format [%d]\n",DEF_CODING_FORMAT);
  fprintf(stdout,"\t       n=1: SQCIF n=2: QCIF n=3: CIF n=4: 4CIF n=5: 16CIF\n");
  fprintf(stdout,"\t           128x96   176x144  352x288   704x576  1408x1152\n");
  fprintf(stdout,"\t-s <n> (0..15) integer pel search window [%d]\n",
          DEF_SEEK_DIST);
  fprintf(stdout,"\t-q <n> (1..31) quantization parameter QP [%d]\n",
          DEF_INTER_QUANT);
  fprintf(stdout,"\t-I <n> (1..31) QP for first frame [%d]\n",
          DEF_INTRA_QUANT);
  fprintf(stdout,"\t-r <n> target bitrate in bits/s, default is variable bitrate\n");
#ifdef OFFLINE_RATE_CONTROL
  fprintf(stdout,"\t   -R <n> start rate control after n%% of sequence [%d]\n",
          DEF_START_RATE_CONTROL);
#else
  fprintf(stdout,"\t   -R <f> target frame rate [%.2f]\n",
          DEF_TARGET_FRAME_RATE);
#endif
  fprintf(stdout,"\t-S <n> frames to skip between each encoded frame [%d]\n",
          DEF_FRAMESKIP);
  fprintf(stdout,"\t-Z <n> reference frame rate (25 or 30 fps) [%.1f]\n",
          DEF_REF_FRAME_RATE);
  fprintf(stdout,"\t-O <n> frames skipped in original compared to reference frame rate [%d]\n", DEF_ORIG_SKIP);
  fprintf(stdout,"\t-e <n> original sequence has n bytes header [%d]\n",
          DEF_HEADERLENGTH);
  fprintf(stdout,"\t-g <n> insert sync after each n GOB (slice) [%d]\n",
          DEF_INSERT_SYNC);
  fprintf(stdout,"\t       zero above means no extra syncs inserted\n");
  fprintf(stdout,"\t-w write difference image to file \"%s\" [%s]\n",
          DEF_DIFFILENAME,
          DEF_WRITE_DIFF ? "ON" : "OFF");
  fprintf(stdout,"\t-m write repeated reconstructed frames to disk [%s]\n",
          DEF_WRITE_REPEATED ? "ON" : "OFF");
#ifdef TRACE
  fprintf(stdout,"\t-t write trace to tracefile trace.intra/trace [%s]\n",
          DEF_WRITE_TRACE ? "ON" : "OFF");
#endif
  fprintf(stdout,"\t-D use unrestricted motion vector mode (annex D) [%s]\n",
          DEF_UMV_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-E use syntax-based arithmetic coding (annex E) [%s]\n",
          DEF_SAC_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-F use advanced prediction mode (annex F) [%s]\n",
          DEF_ADV_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t-G use PB-frames (annex G) [%s]\n",
          DEF_PBF_MODE ? "ON" : "OFF");
  fprintf(stdout,"\t   -Q <n> (0..3) BQUANT parameter [%d]\n",DEF_BQUANT);
  fprintf(stdout,"\t-h Prints simple help\n");
  fprintf(stdout,"\t-H Prints advanced help\n");
  fprintf(stdout,"\n\tDefault filenames and other options in square brackets \n\tare chosen in config.h\n");
  return;
}

/**********************************************************************
 *
 *	Name:        PrintResult
 *	Description:	add bits and prints results
 *
 *	Input:        Bits struct
 *
 *	Returns:
 *	Side effects:
 *
 *	Date: 940116	Author:	Karl.Lillevold@nta.no
 *
 ***********************************************************************/


#ifdef LOGGING
void PrintResult(Bits *bits,int num_units, int num)
{
  sprintf(t_LogMsg,"# intra   : %d\n", bits->no_intra/num_units);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"# inter   : %d\n", bits->no_inter/num_units);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"# inter4v : %d\n", bits->no_inter4v/num_units);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"--------------\n");t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"Coeff_Y: %d\n", bits->Y/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"Coeff_C: %d\n", bits->C/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"Vectors: %d\n", bits->vec/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"CBPY   : %d\n", bits->CBPY/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"MCBPC  : %d\n", bits->CBPCM/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"MODB   : %d\n", bits->MODB/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"CBPB   : %d\n", bits->CBPB/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"COD    : %d\n", bits->COD/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"DQUANT : %d\n", bits->DQUANT/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"header : %d\n", bits->header/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"==============\n");t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"Total  : %d\n", bits->total/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"\n");t_LogOut(t_LogMsg);
  return;
}
#ifdef COMPUTE_SNR
void PrintSNR(Results *res, int num)
{
  sprintf(t_LogMsg,"SNR_Y  : %.2f\n", res->SNR_l/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"SNR_Cb : %.2f\n", res->SNR_Cb/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"SNR_Cr : %.2f\n", res->SNR_Cr/num);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"--------------\n");t_LogOut(t_LogMsg);
  return;
}
#endif
#endif
