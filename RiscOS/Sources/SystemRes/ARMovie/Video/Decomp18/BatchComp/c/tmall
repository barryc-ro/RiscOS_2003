/* Malloc wrapper

*/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "TMN/logger.h"

size_t tm_total=0,tm_max=0;

void *Malloc(size_t size)
{int *tmp;
 tmp=malloc(size+4);
 if(tmp==NULL) {
   printf("Malloc failed! Size: %d Total: %d Max: %d \n",size,tm_total,tm_max);
   exit(1);
   return NULL;
 }
 tmp++;
 tmp[-1]=size;
 tm_total=tm_total+size;
 if(tm_total>tm_max){
   tm_max=tm_total;
#ifdef LOGGING
   sprintf(t_LogMsg,"Heap increase - now: %d\n",tm_max);t_LogOnly(t_LogMsg);
#endif
 }
 return tmp;

}

void Free(void *p)
{
  int *tmp=p;
    if(p==NULL){
#ifdef LOGGING
     t_LogOut("Attempt to free NULL!\n");
#endif
     exit(1);
    }
    tm_total-=((int *)p)[-1];
    free(tmp-1);

}
#if 0
void *tcalloc(size_t nobj,size_t size)
{ void *tmp;
  tmp=Malloc(nobj*size);
  if(tmp==NULL) return NULL;
  return memset(tmp,'\0',nobj*size);
}
#endif
