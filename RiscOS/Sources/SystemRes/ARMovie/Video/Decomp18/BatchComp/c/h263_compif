#include "bool.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "batchcomp.h"
#include "error.h"
#include "tmnarg.h"
#include "t_init.h"
#include "compIF.h"
#include "filestuff.h"
#include "h263_pict.h"

struct {
  BOOL pb;
  BOOL pchunk;
  int iquant;
} extraargs = {FALSE,FALSE,-1};

enum eargs {NONE,IQUANT};
enum eargs currarg=NONE;
BOOL compextraargs(char *arg)
{
 switch(currarg){
 case  NONE:
  if(arg==NULL)return(FALSE);
  if(0==strcmp(arg,"-h263_pb"))
    { extraargs.pb=TRUE;
     return(FALSE);
    }
  if(0==strcmp(arg,"-h263_iquant"))
    { currarg=IQUANT;
      return(TRUE);
    }
  break;
 case IQUANT:
  if(arg==NULL) error("Error reading iquant value\n");
  extraargs.iquant=atoi(arg);
  if(extraargs.iquant<0) error("Bad Iquant value\n");
  currarg=NONE;
  return(FALSE);
  break;

 }
return(FALSE);

}
void compinit(void) {}
void compchinit(int chunkno,TmnArgs *trg)
{t_init_coder();
 t_init_countbit();
 t_init_putbits();
#ifndef OFFLINE_RATE_CONTROL
  t_init_ratectrl();
#endif
 t_init_sac();
 t_init_tmnmain();
 t_init_io();
 if(chunkno==0){
   (*trg).doiframe=1;
 }
 else if(extraargs.pchunk) (*trg).doiframe=0;
}

void compwritestopped(FILE *stoppedfile)
{
      if(fprintf(stoppedfile,"\n.\n*\n")<0) error("Error writing to stopped file\n");
      if(fprintf(stoppedfile,"%d iquant\n",extraargs.iquant)<0) error("Error writing to stopped file\n");
      if(fprintf(stoppedfile,"%d pb\n",extraargs.pb)<0) error("Error writing to stopped file\n");
      if(fprintf(stoppedfile,"%d pchunk\n",extraargs.pchunk)<0) error("Error writing to stopped file\n");
}
void compreadstopped(FILE *stoppedfile)
{ int c;
      do {
       scanret(stoppedfile,1);
       c=fgetc(stoppedfile);
       if(c==EOF) error("Error reading from stopped file\n");
       ungetc(c,stoppedfile);
      }
      while(c!='*');
      scanret(stoppedfile,1);
      if(fscanf(stoppedfile,"%d iquant\n",&(extraargs.iquant))==EOF) error("Error reading from stopped file\n");
      if(fscanf(stoppedfile,"%d pb\n",&(extraargs.pb))==EOF) error("Error reading from stopped file\n");
      printf("a:%d %d\n",extraargs.pchunk,extraargs.pb);
      if(fscanf(stoppedfile,"%d pchunk\n",&(extraargs.pchunk))!=1) error("Error reading from stopped file\n");
      printf("b:%d %d\n",extraargs.pchunk,extraargs.pb);
}
void compreadbinstopped(FILE *stoppedfile,TmnArgs *trg)
{
  if(extraargs.pchunk==TRUE)
  {int leng,size;
   PictImage *r_image,*r_recon;

   leng=fread(&size,sizeof(int),1,stoppedfile);
   if(leng!=1) error("Error reading from stopped file\n");

   r_recon=malloc(sizeof(PictImage));
   if(r_recon==NULL) error("error allocating memory\n");
   r_image=malloc(sizeof(PictImage));
   if(r_image==NULL) error("error allocating memory\n");


   trg->precon=r_recon;
   trg->pimage=r_image;

   r_recon->lum=malloc(size);
   if(r_recon->lum==NULL) error("error allocating memory\n");

   r_recon->Cr=malloc(size/4);
   if(r_recon->Cr==NULL) error("error allocating memory\n");

   r_recon->Cb=malloc(size/4);
   if(r_recon->Cb==NULL) error("error allocating memory\n");

   r_image->lum=malloc(size);
   if(r_image->lum==NULL) error("error allocating memory\n");

   r_image->Cr=malloc(size/4);
   if(r_image->Cr==NULL) error("error allocating memory\n");

   r_image->Cb=malloc(size/4);
   if(r_image->Cb==NULL) error("error allocating memory\n");

   leng=fread(r_recon->lum,sizeof(char),size,stoppedfile);
   if(leng!=size)  error("Error reading from stopped file\n");
   leng=fread(r_recon->Cr,sizeof(char),size/4,stoppedfile);
   if(leng!=size/4)  error("Error reading from stopped file\n");
   leng=fread(r_recon->Cb,sizeof(char),size/4,stoppedfile);
   if(leng!=size/4)  error("Error reading from stopped file\n");

   leng=fread(r_image->lum,sizeof(char),size,stoppedfile);
   if(leng!=size)  error("Error reading from stopped file\n");
   leng=fread(r_image->Cr,sizeof(char),size/4,stoppedfile);
   if(leng!=size/4)  error("Error reading from stopped file\n");
   leng=fread(r_image->Cb,sizeof(char),size/4,stoppedfile);
   if(leng!=size/4)  error("Error reading from stopped file\n");
  }
}
void compwritebinstopped(FILE *stoppedfile,tmnret TRet)
{
 if(extraargs.pchunk==TRUE){
  int leng,size;

  size=lines*pels;
  leng=fwrite(&size,sizeof(int),1,stoppedfile);
  if(leng!=1)  error("Error writing to stopped file\n");

  if(TRet.pic==NULL) error("Internal error - No image to write\n");
  if(((PictImage *)(TRet.pic))->lum==NULL) error("Internal error - No lum image to write\n");
  leng=fwrite(((PictImage *)(TRet.pic))->lum,sizeof(unsigned char),lines*pels,stoppedfile);
  if(leng!=lines*pels)  error("Error writing to stopped file\n");

  if(((PictImage *)(TRet.pic))->Cr==NULL) error("Internal error - No U image to write\n");
  leng=fwrite(((PictImage *)(TRet.pic))->Cr,sizeof(unsigned char),lines*pels/4,stoppedfile);
  if(leng!=lines*pels/4)  error("Error writing to stopped file\n");

  if(((PictImage *)(TRet.pic))->Cb==NULL) error("Internal error - No V image to write\n");
  leng=fwrite(((PictImage *)(TRet.pic))->Cb,sizeof(unsigned char),lines*pels/4,stoppedfile);
  if(leng!=lines*pels/4)  error("Error writing to stopped file\n");

  if(TRet.image==NULL) error("Internal error - No image to write\n");
  if(((PictImage *)(TRet.image))->lum==NULL) error("Internal error - No lum image to write\n");
  leng=fwrite(((PictImage *)(TRet.image))->lum,sizeof(unsigned char),lines*pels,stoppedfile);
  if(leng!=lines*pels)  error("Error writing to stopped file\n");

  if(((PictImage *)(TRet.image))->Cr==NULL) error("Internal error - No U image to write\n");
  leng=fwrite(((PictImage *)(TRet.image))->Cr,sizeof(unsigned char),lines*pels/4,stoppedfile);
  if(leng!=lines*pels/4)  error("Error writing to stopped file\n");

  if(((PictImage *)(TRet.image))->Cb==NULL) error("Internal error - No V image to write\n");
  leng=fwrite(((PictImage *)(TRet.image))->Cb,sizeof(unsigned char),lines*pels/4,stoppedfile);
  if(leng!=lines*pels/4)  error("Error writing to stopped file\n");
 }
}
void compargsfromargs(BCArgs barg)
  {if(extraargs.iquant!=-1) trg.QPI=extraargs.iquant;
   trg.pb_frames=extraargs.pb;
   extraargs.pchunk=barg.nokeys;
  }
void compargsfromnewheader(ARHeader newheader) {}
void compargsfromoldheader(ARHeader oldheader) {}
void compnewchunk(char *filename){}
void compress(){}
