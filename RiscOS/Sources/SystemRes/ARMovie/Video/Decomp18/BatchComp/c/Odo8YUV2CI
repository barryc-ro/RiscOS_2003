#define CR ((int)(0.299*65536.0))
#define CG ((int)(0.587*65536.0))
#define CB ((int)(0.114*65536.0))
#define CRV (104597)
#define CBU (132201)

#define UNMASH(a)  ((a&0x7c00)<<6)|((a&0x3e0)<<3)|((a&0x1f))
#define RGB2YUV(a) {                    \
		    if(unmash==1)       \
		    {r=(a&0x7c00)>>(10-3);  \
		     g=(a&0x3e0)>>(5-3);    \
		     b=(a&0x1f)<<3;          \
		    }		        \
		    else {	        \
		     r=(a&0xff0000)>>16;\
		     g=(a&0xff00)>>8;   \
		     b=(a&0xff);	\
		     }                  \
		    y=(CR*r+CG*g+CB*b);	\
		    v= (((b<<16)-y)/CBU); 	 	\
		    u= (((r<<16)-y)/CRV);            	\
		    y=y>>16;				\
		    y=(y<0) ? 0 : ((y>255) ? 255 :y);   \
/*		     v=(v<(-128)) ? (-128) : ((v>127) ? 127 :v);	*/\
/*		     u=(u<(-128)) ? (-128) : ((u>127) ? 127 :u);      		*/\
		     v=v&0x1ff;	       	 	    	        \
		     u=u&0x1ff;	       	 	    	        \
		     a= y | (u<<8) |(v <<16); \
}

#define PUTOUT()       if(rgb==1)                       \
       {int r,g,b,y,u,v;				\
         RGB2YUV(pa)					\
         RGB2YUV(pb)					\
         RGB2YUV(pc)					\
         RGB2YUV(pd)					\
	 						\
       }						\
      else if(unmash==1)				\
        {pa=UNMASH(pa);					\
         pb=UNMASH(pb);					\
         pc=UNMASH(pc);					\
         pd=UNMASH(pd);					\
        }						\
							\
      *(oy++)=(pa>>0)&0xFF;				\
      *(oy++)=(pb>>0)&0xFF;				\
      *(oyb++)=(pc>>0)&0xFF;				\
      *(oyb++)=(pd>>0)&0xFF;				\
      *(ou++)=(((pa>>8)&0xFF)+				\
               ((pb>>8)&0xFF)+				\
	       ((pc>>8)&0xFF)+				\
	       ((pd>>8)&0xFF)-128*4			\
              )>>2;					\
	      						\
      *(ov++)=(((pa>>16) & 0xFF)+			\
               ((pb>>16) & 0xFF)+			\
	       ((pc>>16) & 0xFF)+			\
	       ((pd>>16) & 0xFF)-128*4			\
              )>>2;	   				\


void dothing2CIF(unsigned int *source,unsigned char *dest,int x,int y,char rgb,char unmash,int opx, int opy)
{
  unsigned int *la,*lb;
  unsigned int pa,pb,pc,pd;
  unsigned char *oy,*ou,*ov,*oyb;
  int i,j;

  la=source;
  lb=source+x;
  oy=dest;oyb=dest+opx;
  ou=dest+opx*opy;
  ov=dest+(opx*opy*5)/4;

  for(i=0;i<(y & (~1));i+=2)
  {
    for(j=0;j<(x & (~1));j+=2) /* main block*/
    {
      pa=*(la++);
      pb=*(la++);
      pc=*(lb++);
      pd=*(lb++);
      PUTOUT()

    }
    if((x&1)==1)                /* right edge of actual picture if odd no of pixels across*/
    {pa=*(la++);
     pb=0;
     pc=*(la++);
     pd=0;
     PUTOUT()
    }
    pa=pb=pc=pd=0;
    for(j=(x+(x&1));j<opx;j+=2)  /* padding*/
    {PUTOUT()}
    la+=x;
    lb+=x;
    oy+=opx;
    oyb+=opx;
  }
  if((y&1)==1)
  {
   pc=pd=0;
   for(i=0;i<(x&(~1));i+=2)    /* bottom edge of real picture if odd no of pixels down*/
   {pa=*(la++);
    pb=*(la++);
    PUTOUT()
   }
   if(x&1==1)                  /* bottom right pixel if odd no of pixels down & across*/
   {pa=*(la++);
    pb=0;
    PUTOUT();
   }
  }
  pa=pb=pc=pd=0;
  for(i=y+(y&1);y<opy;y+=2)     /* bottom padding :-)*/
   {for(j=0;j<opx;j+=2)
    {PUTOUT()
    }
   oy+=opx;
   oyb+=opx;
   }


}
