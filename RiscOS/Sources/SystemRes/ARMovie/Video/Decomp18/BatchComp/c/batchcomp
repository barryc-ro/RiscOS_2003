#include "getargs.h"
#include <string.h>
#include "error.h"
#include "bool.h"
#include "batchcomp.h"
#include "stdlib.h"
#include "stdio.h"
#include "filestuff.h"
#include "compIF.h"
 /* Not yet set:
  * arm2
  * batch
  * dirty
  * display
  * doub(le)
  * filters
  * nokeys
  */
void parseargs(int argc,char *argv[],BCArgs *bargs)
{
   char *arg;
  initarg(argc,&argv);
   while((arg=getarg())!=NULL)
   {
    if(arg[0]=='-')
   {
     if(0==strcmp(arg,"-source"))
     {bargs->source=getarg();
      if(bargs->source==NULL) error("Error reading source name\n");
      continue;
     }
     if(0==strcmp(arg,"-dest"))
      {  arg=getarg();
         if(arg==NULL) error("Error reading destination\n");
         strcpy(bargs->dest,arg);
         if(arg[strlen(arg)]!='.')
          strcat(bargs->dest,".");
         continue;

      }
     if(0==strcmp(arg,"-startat"))
      {arg=getarg();
       if(arg==NULL) error("Error reading startat value\n");
       bargs->start=atoi(arg);
       if(bargs->start<0) error("invalid start frame\n");
       continue;

      }
     if(0==strcmp(arg,"-size"))
      {arg=getarg();
       if(arg==NULL) error("Error reading size value\n");
       bargs->size=atoi(arg);
       if(bargs->size<0) error("invalid target size\n");
       continue;
      }
      if(0==strcmp(arg,"-index"))
      {
       arg=getarg();
       if(arg==NULL) error("Error reading index value\n");
       bargs->index=atoi(arg);
       if(bargs->index<0) error("invalid index\n");
       continue;
      }
      if(0==strcmp(arg,"-quality"))
      {
       arg=getarg();
       if(arg==NULL) error("Error reading quality value\n");
       bargs->quality=atoi(arg);
       if(bargs->quality<0) error("invalid quality\n");
       continue;
      }
            if(0==strcmp(arg,"-t_setnumc"))
      {
       arg=getarg();
       if(arg==NULL) error("Error reading numchunks value\n");
       bargs->t_setnumc=atoi(arg);
       if(bargs->t_setnumc<0) error("invalid numchunks\n");
       continue;
      }
      if(0==strcmp(arg,"-notext"))
      {
       bargs->notext=TRUE;
       continue;
      }
      if(0==strcmp(arg,"-restart"))
      {
       bargs->restart=TRUE;
       continue;
      }
      if(0==strcmp(arg,"-batch"))
      {
       bargs->nokeys=TRUE;
       continue;
      }
      if(0==strcmp(arg,"-nokeys"))
      {
       bargs->nokeys=TRUE;
       continue;
      }
      while(compextraargs(arg))
      {
        arg=getarg();
        if(arg==NULL) break;
      }
      if(arg==NULL) break;
   }
  }

  if(bargs->source==NULL) error("No source specified\n");
  if(strncmp("\n",bargs->dest,255)==0) error("No destination specified\n"); /*does this work? */
}


ARHeader parseARheader(char *filename)
{
  FILE *headfile;
  ARHeader header;
  char intmp[8];
  SeqString str=
       {NULL,
       1024,
       0,
       0};
  int bname,bdate,bauth,bvidi,bvidp,bcolm;

     str.base=malloc(1024);
     if(str.base==NULL) error("memory error\n");
     headfile=fopen(filename,"rb");
     if(headfile==NULL) error("Could not open header file\n");


     fgets(intmp,8,headfile);
     if(strncmp(intmp,"ARMovie",7)) error("Not an ARMovie header file\n");
     scanret(headfile,1); /* skip movie name, date, author,*/
     bname=str.curr; getseqstring(&str,headfile);
     bdate=str.curr; getseqstring(&str,headfile);
     bauth=str.curr; getseqstring(&str,headfile);

     header.video  = getint(headfile);
#ifdef DONT
     scanret(header,1);


     readstate.ox=getint(header);
     scanret(header,1);
     readstate.oy=getint(header);
     scanret(header,1);
     fgets(intmp,255,header);
#ifdef DONT
     if(strstr(intmp,"YUV")==NULL) error("Destination Not a YUV file\n");
#endif
     readstate.outfps=getflt(header);
     scanret(header,5); /* skip sound stuff*/
     writestate.FramesPerChunk=getint(header);
 /*    scanret(header,1);
     writestate.NumChunks=getint(header);*/
#endif
     header.name=str.base+bname;
     header.date_copy=str.base+bdate;
     header.author=str.base+bauth;

     fclose(headfile);
     return(header);
}
#ifdef TEST
int main(int argc,char *argv[])
{
  BCArgs bargs;
  ARHeader header;
  parseargs(argc,argv,&bargs);
  header=parseARheader("$.work.bcomp18.pling.header");


}
#endif
