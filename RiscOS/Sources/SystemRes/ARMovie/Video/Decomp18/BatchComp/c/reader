#include "filestuff.h"
#include <math.h>
#include "TMN/blatasm.h"
#include "string.h"
#include <stdlib.h>
#include "do8YUV2CIF.h"
#include "reader.h"
#include "TMN/error.h"
#include "TMN/decerr.h"
#include "TMN/Malloc.h"
#ifdef DONT
#include "MemCheck:MemCheck.h"
#endif
#define TRY_F

RState readstate =
 {
   NULL,
   0,
   0,
   {0,0},
   0,
   0,
   0,
   0,
   0,
   NULL,NULL,NULL,NULL,NULL,
   NULL,NULL,
   NULL,
   NULL,
   0,0,
   0,
   NULL,
   NULL,NULL,
   '\0',
   NULL,
   NULL,
   0,
   0,
   0,0
 };

void parseheader(void);
void parseinfo(char *filename);
void domallocs(void);
void getdecomp(void);
void getfetcher(void);
void GoToChunk(int n);

void  initreader(RState r)
{    os_error *e;
     RRR =r;

     strcpy(RRR.FetcherName,"<ARmovie$Dir>.Movingline.Fetchers.");
     parseheader();

     domallocs();

     getdecomp();
     if(RRR.dofetch==1) {
       getfetcher();
       fetchinit(RRR.armovie->__file,RRR.catoffset,1,0,0,RRR.FetchStart);
/*       RRR.vidindex=fetchfetch(0,(void *)RRR.source,NULL,RRR.FetchStart);*/
     }

     RRR.SrcPnt=RRR.source;

     e=blatinit(RRR.x,RRR.y,RRR.DecStart);
     if(e!=NULL) error(e->errmess);
     RRR.CurrFrameNum=0;

}

void getdecomp(void)
{
     FILE *decompfile;
     int decompsize,leng;
     char decname[256];
/*     printf(RRR.DecompName);*/
     strncpy(decname,RRR.DecompName,256);
     strncat(decname,"dec24",256);
     decompfile=fopen(decname,"rb");
     if(decompfile==NULL){
       RRR.unmash=1;
/*       RRR.yuv=0;*/
       strncpy(decname,RRR.DecompName,256);
       strncat(decname,"decompress",256);
       decompfile=fopen(decname,"rb");
     }
     if(decompfile==NULL) error("Could not open Dec24 or Decompress file\n");
     if(fseek(decompfile,0L,SEEK_END)!=0) error("Seek failed\n");
     decompsize=(int)ftell(decompfile);
     if(decompsize==-1L) error("Error determining file size\n");

     RRR.decomp=Malloc((size_t)decompsize+12);
     if(RRR.decomp==NULL) error("Malloc failed\n");

     RRR.DecStart= RRR.decomp - ((int)RRR.decomp%16);

     if(((int)RRR.decomp%16)!=0) RRR.DecStart+=16;

     rewind(decompfile);
     leng=fread(RRR.DecStart,sizeof(unsigned char),decompsize,decompfile);
     if(leng!=decompsize) error("Error reading decompressor\n");

     fclose(decompfile);
}
void getfetcher(void)
{
       FILE *fetcherfile;
     int fetchersize,leng;
/*     printf(RRR.fetcherName);*/
     fetcherfile=fopen(RRR.FetcherName,"rb");
     if(fetcherfile==NULL) error("Could not open fetcher. (Need Dec24)\n");

     if(fseek(fetcherfile,0L,SEEK_END)!=0) error("Seek failed\n");
     fetchersize=(int)ftell(fetcherfile);
     if(fetchersize==-1L) error("Error determining file size\n");

     RRR.fetcher=Malloc((size_t)fetchersize+12);
     if(RRR.fetcher==NULL) error("Malloc failed\n");

     RRR.FetchStart= RRR.fetcher - ((int)RRR.fetcher%16);

     if(((int)RRR.fetcher%16)!=0) RRR.FetchStart+=16;

     rewind(fetcherfile);
     leng=fread(RRR.FetchStart,sizeof(unsigned char),fetchersize,fetcherfile);
     if(leng!=fetchersize) error("Error reading fetcher\n");

}

void parseinfo(char *filename)
{
  int c,d=0;
  FILE *infofile;
  infofile=fopen(filename,"rb");
  if(infofile==NULL) error("Could not open info file \n");
  scanret(infofile,2);
  c=fgetc(infofile);
   if(c==EOF) error("EOF encountered\n");
  while(c!='\n')
  {d=c;
   c=fgetc(infofile);
   if(c==EOF) error("EOF encountered\n");
  }
  RRR.ccallseq=((d=='c') || (d=='C'));

  fclose(infofile);

}
void parseheader(void)
     /*leaves armovie open */
{    int type,tmpint;
     char ctmp;
     flt tmpflt;
     char *fet;
     char intmp[256];
     char infoname[256];

     RRR.armovie=fopen(RRR.ArmovieName,"rb");
     if(RRR.armovie==NULL) error("Could not open Armovie file");

     fgets(intmp,8,RRR.armovie);
     if(strncmp(intmp,"ARMovie",7)) error("Not an ARMovie file\n");

     scanret(RRR.armovie,4); /* skip movie name, date, author,*/

     type  = getint(RRR.armovie);

     if(type==15)
       {
         ctmp=getc(RRR.armovie);
         if(ctmp!=' ') error("Error in Armovie Header\n");
         {char vidnam[256];
          if(scan2space(vidnam,255,RRR.armovie)==NULL)
           error("error reading video name");
          sprintf(RRR.DecompName,"<ARMove$Dir>.Decomp15.%s.",vidnam);
          sprintf(infoname,"<ARMove$Dir>.Decomp15.%s.Info",vidnam);

         }

       }
      else
       {
         sprintf(RRR.DecompName,"<ARMovie$Dir>.Decomp%d.",type);
         sprintf(infoname,"<ARMovie$Dir>.Decomp%d.Info",type);

       }

       parseinfo(infoname);
       scanret(RRR.armovie,1);

       RRR.x=getint(RRR.armovie);

       if(RRR.x>RRR.ox) error("Cannot make movie smaller\n");
       scanret(RRR.armovie,1);
       RRR.y=getint(RRR.armovie);
       if(RRR.y>RRR.oy) error("Cannot make movie smaller\n");
       scanret(RRR.armovie,1);
       fgets(intmp,255,RRR.armovie);

       if(strstr(intmp,"UV")==NULL) RRR.yuv=0;
       else {
         RRR.yuv=1;
/*       	 if(strstr(intmp,"[")!=NULL) error("Unknown Colour space\n");*/
       }
       if(sscanf(intmp,"%d",&tmpint)!=1) error("Error reading header\n");
       if(tmpint!=16) error("Can't compress 8 bit movies\n");
/*       scanret(RRR.armovie,1); Non needed because of fgets  */
       tmpflt=getflt(RRR.armovie);
       if((tmpflt.mant!=RRR.outfps.mant) || (tmpflt.shift !=RRR.outfps.shift))
          error("Don't convert frame rate\n");
       scanret(RRR.armovie,5); /* skip sound stuff*/
       RRR.FramesPerChunk=getint(RRR.armovie);
       scanret(RRR.armovie,1);
       RRR.NumChunks=getint(RRR.armovie);
       scanret(RRR.armovie,1);
       RRR.chunksize=getint(RRR.armovie); /* get largest chunk size*/
       scanret(RRR.armovie,1);
       tmpint=getint(RRR.armovie);
       if(tmpint>RRR.chunksize)
         RRR.chunksize=tmpint;
       scanret(RRR.armovie,1);
       RRR.catoffset=getint(RRR.armovie);
       fgets(intmp,255,RRR.armovie);
       fet=strstr(intmp,"Fetcher");
       if(fet!=NULL) {
         fet=strstr(fet,"[");
         if(fet==NULL) error("Error reading fetcher name\n");
         fet++;
         fet=strtok(fet,"]");
         if(fet==NULL) error("Error reading fetcher name\n");
         strncat(RRR.FetcherName,fet,256);
         RRR.dofetch=1;
         rewind(RRR.armovie);
       }



}

void domallocs(void)
{
     RRR.source=Malloc((size_t)RRR.chunksize);
     if(RRR.source==NULL) error("Malloc failed\n");

     RRR.output=Malloc((size_t)(RRR.x*RRR.y*sizeof(int)));
     if(RRR.output==NULL) error("Malloc failed\n");

     RRR.outpu2=Malloc((size_t)(RRR.x*RRR.y*sizeof(int)));
     if(RRR.outpu2==NULL) error("Malloc failed\n");

     RRR.cifout=Malloc((size_t)(RRR.ox*RRR.oy*3)/2);
     if(RRR.cifout==NULL) error("Malloc failed\n");

     if(RRR.dofetch==1) {
       RRR.source2=Malloc((size_t)RRR.chunksize);
       if(RRR.source2==NULL) error("malloc failed\n");
     }
}

void readframe(unsigned char *image)
{
  unsigned char *tmp;

  if (image == NULL)
    image = (unsigned char *)RRR.cifout;
#ifdef T_DEBUG
  fprintf(stderr,"start readframe\n");
#endif
  if(RRR.CurrFrameNum>=(RRR.FramesPerChunk*(RRR.NumChunks+1)))
#ifdef COMPLAINSMALL
   error("Ran out of input frames\n");
#else
    return;
#endif
  if(RRR.CurrFrameNum%RRR.FramesPerChunk==0)
  {RRR.CurrChunkNum=RRR.CurrFrameNum/RRR.FramesPerChunk;
   GoToChunk(RRR.CurrChunkNum); /* This always ought to be run the first time round*/
  }
  if(RRR.dofetch!=1)
   if(RRR.SrcPnt>(RRR.source+RRR.CurrChunkSize-10))
#ifdef COMPLAINSMALL
   error("Ran out of input frames\n");
#else
   return;
#endif

  {
  if(RRR.dofetch==1)
   {if(RRR.ccallseq)
        blatCdecomp((unsigned char *)*RRR.vidindex,RRR.output,RRR.outpu2,RRR.DecStart);
      else
        blatdecomp((unsigned char *)*RRR.vidindex,RRR.output,RRR.outpu2,RRR.DecStart);
    RRR.vidindex++;
   }
  else
  {if(RRR.ccallseq)
        RRR.SrcPnt = blatCdecomp(RRR.SrcPnt,RRR.output,RRR.outpu2,RRR.DecStart);
      else
        RRR.SrcPnt = blatdecomp(RRR.SrcPnt,RRR.output,RRR.outpu2,RRR.DecStart);
  }
  dothing2CIF((unsigned int *)RRR.output,image,RRR.x,RRR.y,!(RRR.yuv),RRR.unmash,RRR.ox,RRR.oy);
  tmp=RRR.output;
  RRR.output=RRR.outpu2;
  RRR.outpu2=tmp;
  }
  RRR.CurrFrameNum++;
#ifdef T_DEBUG
  fprintf(stderr,"end readframe\n");
#endif
}

void shutreader()
{
  os_error *e;
  e=blatshut(RRR.x,RRR.y,RRR.DecStart);
  if(e!=NULL) error(e->errmess);
  if(RRR.dofetch==1){
    fetchshut(RRR.FetchStart);
#ifdef DOFREES
    Free(RRR.fetcher);
    Free(RRR.source2);
#endif
  }
#ifdef DOFREES
  Free(RRR.source);
  Free(RRR.output);
  Free(RRR.outpu2);
  Free(RRR.decomp);
  Free(RRR.cifout);
#endif

/*  free(all)*/
}


void GoToChunk(int n)
{
 if(RRR.dofetch==0)
 {
  int offset,size,leng;
  char  c;


  if(fseek(RRR.armovie,RRR.catoffset,SEEK_SET)!=0)
   error("Error on seek\n");
  scanret(RRR.armovie,n);
  offset=getintchar(RRR.armovie,&c);
  if(c!=',') error("Error in ARMovie file\n");
  size=getint(RRR.armovie);
  if(size>RRR.chunksize) error("Chunk bigger than indicated in header. \n");
  if(fseek(RRR.armovie,offset,SEEK_SET)!=0)
   error("Error on seek\n");
  leng=fread(RRR.source,sizeof(char),size,RRR.armovie);
  if(leng !=size) error("Error reading from ARMovie file\n");
  RRR.SrcPnt=RRR.source;
  RRR.CurrChunkSize=size;
  }
  else/* if(n!=0)*/
   {unsigned char *tmp;

    RRR.vidindex=fetchfetch(n,RRR.source,NULL,RRR.FetchStart);
#ifdef DONT
    MemCheck_RegisterMiscBlock(RRR.vidindex,(size_t) (sizeof(int *))*RRR.FramesPerChunk);
#endif
    fetchrelbuff(n,RRR.source,RRR.FetchStart);
    tmp=RRR.source;
    RRR.source=RRR.source2;
    RRR.source2=tmp;
   }


}
