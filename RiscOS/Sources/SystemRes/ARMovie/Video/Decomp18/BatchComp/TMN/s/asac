        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA	|Test$$Code|,CODE,READONLY

	EXPORT	t_init_sac
	EXPORT	encoder_flush
	EXPORT	AR_Encode
	EXPORT	indexfn
	EXPORT	bit_opp_bits

	EXPORT low
	EXPORT high
	EXPORT opposite_bits
	EXPORT zerorun

	IMPORT	putbits
low
	DCD	0
high
	DCD	65535
opposite_bits
	DCD	0
zerorun
	DCD	0
t_init_sac
	MOV	r0,#0
	STR	r0,low
	STR	r0,opposite_bits
	STR	r0,zerorun
	MOV	r1,#&FF
	ORR	r1,r1,#&FF00
	STR	r1,high

        Return  , LinkNotStacked
	[ 0 = 1
bit_in_psc_layer
	; r0 = bit
        FunctionEntry "r11"

	LDR	r11,zerorun	; r11 = zerorun
	MOV	r1,r0		; r1 = bit
	MOV	r0,#1		; r0 = How many bits to emit
	CMP	r11,#13
	MOVGT	r11,#0
	ADDGT	r0,r0,#1
	ADDGT	r1,r1,#2
	TST	r1,#1
	ADDEQ	r11,r11,#1
	MOVNE	r11,#0
	STR	r11,zerorun
	STMFD	r13!,{r0}
	BL	putbits

        Return  "r0,r11"
	]
bob
	; r0 = bit
	; ASSUMES:
	;	r11 = zerorun
	;	r10 = opposite_bits
	MOV	r1,r0		; r1 = bit
	MOV	r0,#1		; r0 = How many bits to emit
	CMP	r11,#13
	MOVGT	r11,#0
	ADDGT	r0,r0,#1
	ADDGT	r1,r1,#2
	TST	r1,#1
	ADDEQ	r11,r11,#1
	MOVNE	r11,#0
	MOV	r9,r0		; r9 = bitcount
	CMP	r10,#0
	BEQ	putbits		; If no opposite bits, fab.
	; So we have to output some opposite bits
	TST	r1,#1
	BNE	bob_0	; if bit = 1 then we have to output 0s now...
	; So we now have to output r10 1 bits.
	; First do the zerorun rubbish
	CMP	r11,#14
	MOVGE	r11,#0
	;ADDGE	r0,r0,#1
	; C set iff r11 >= 14
	; If we are doing zero run padding here then we can't have done
	; it last time, and the previous bit must have been 0 - so 1
	MOVGE	r1,#1
	; Now make r2 = 111111 (r10 times)
	MOV	r2,#1
	RSB	r2,r2,r2,LSL r10
	; Push the bits already written up by r10, and insert bits underneath
	ORR	r1,r2,r1,LSL r10
	; Note that we have to output r10 more bits
	ADC	r0,r0,r10
	; zerorun is now 0
	MOV	r11,#0
	; opposite_bits is now 0
	MOV	r10,#0
	; Put bitcount in r9
	MOV	r9,r0
	; and output
	B	putbits
bob_0
	; So now we need to output r10 0 bits. We have therefore just output
	; a 1 bit, and and zerorun = 0. So, if we need to output more than 13 0
	; bits, we are in trouble.
	; Lets assume no zero padding for now...
	MOV	r1,r1,LSL r10
	MOV	r11,r10
	; Now if r10 >= 14 then we need to insert a 1 bit.
	CMP	r10,#14
	SUBGE	r11,r10,#14	; r11 = zerorun after stuffing
	MOVGE	r1,r1,LSL#1
	MOVGE	r9,#1
	ORRGE	r1,r1,r9,LSL r11
	; C set iff r10 >= 14
	ADC	r0,r0,r10
	;ADDGE	r0,r0,#1
	MOV	r9,r0
	; opposite_bits is now 0
	MOV	r10,#0
	B	putbits
	[ 1 = 1
bit_opp_bits
        FunctionEntry "r9,r10,r11"

	LDR	r11,zerorun
	LDR	r10,opposite_bits
	BL	bob
	STR	r11,zerorun
	MOV	r10,#0
	STR	r10,opposite_bits
	MOV	r0,r9

        Return  "r9,r10,r11"
	]
encoder_flush
        FunctionEntry "r9-r11"

	LDR	r0,low
	MOV	r1,#&FF
	LDR	r10,opposite_bits
	ORR	r1,r1,#&FF00
	LDR	r11,zerorun
	BICS	r0,r0,r1,LSR#2	; if low (r0) < q1 (16384)
	STR	r1,high
	MOVNE	r0,#1		; then r0 = 0 else r0 = 1
	ADD	r10,r10,#1
	BL	bob
	MOV	r0,r9
	MOV	r10,#0
	STR	r10,opposite_bits
	STR	r10,zerorun
	STR	r10,low

        Return  "r9-r11"
AR_Encode
	; r0 = index
	; r1 = cumul_req[]
	CMP	r0,#0
	MVNLT	r0,#0
        Return  , LinkNotStacked, LT
	; C flag set as R0 >=0
        FunctionEntry "r6-r11"

	ADR	r11,low
	LDMIA	r11,{r2,r3,r10,r11}	; r2 = low
					; r3 = high
					; r10= opposite_bits
					; r11= zerorun
	SUB	r8,r2,#1		; r8 = low - 1
	SUB	r12,r3,r8		; r12 = length = high - (low - 1)
	ADD	r1,r1,r0,LSL#2
	LDMIA	r1,{r0-r1}		; r0 = cumul_freq[index]
					; r1 = cumul_freq[index+1]
	; Do divisons
	MUL	r0,r12,r0
	MUL	r1,r12,r1

	MOV	r6,r0,LSR#14
	ADD	r6,r6,r0,LSR#28
	ADD	r0,r0,r6
	SUB	r6,r0,r6,LSL#14
	ADC	r0,r0,r6,LSR#14
	;ADD	r0,r0,#1
	ADD	r8,r8,r0,LSR#14

	MOV	r7,r1,LSR#14
	ADD	r7,r7,r1,LSR#28
	ADD	r1,r1,r7
	SUB	r7,r1,r7,LSL#14
	ADC	r1,r1,r7,LSR#14
	;ADD	r1,r1,#1
	ADD	r7,r2,r1,LSR#14


	MOV	r6,#0		; r6 = bitcount
	B are_lp_enter
are_case1
	SUB	r7,r7,#32768	; low  -= q2
	SUB	r8,r8,#32768	; high -= q2
	MOV	r0,#1		; bit_opp_bits(1);
are_case0
	MOVLT	r0,#0		; bit_opp_bits(0); - maybe ;-)
	BL	bob
	ADD	r6,r6,r9	; bitcount += ...
are_lp
	MOV	r7,r7,LSL#1	; low *= 2
	MOV	r8,r8,LSL#1	; high = 2*high + 1
	ADD	r8,r8,#1
are_lp_enter
	CMP	r8,#32768
	BLT	are_case0
	CMP	r7,#32768
	BGE	are_case1
	CMP	r7,#16384
	BLT	are_end
	CMP	r8,#49152
	;BGE	are_end
	ADDLT	r10,r10,#1	; opposite_bits++
	SUBLT	r7,r7,#16384
	SUBLT	r8,r8,#16384
	BLT	are_lp
are_end
	ADR	r0,low
	STMIA	r0,{r7,r8,r10,r11}
	MOV	r0,r6

        Return  "r6-r11"
indexfn
	; r0 = value
	; r1 = table[]
	; r2 = max
        FunctionEntry
	MOV	r3,#0
	MOV	r12,r0
	;CMP	r2,#0
	;MVNLE	r0,#0
	;MOVLES	PC,R14
iflp
	ADD	r0,r2,r3
	MOV	r0,r0,LSR#1
	LDR	r14,[r1,r0,LSL#2]
	CMP	r14,r12
        Return  ,, EQ
	ADDLT	r3,r0,#1
	SUBGT	r2,r0,#1
	CMP	r3,r2
	BLE	iflp
	MVN	r0,#0
        Return

	END
