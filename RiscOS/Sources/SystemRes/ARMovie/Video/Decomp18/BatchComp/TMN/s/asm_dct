        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA	|Test$$Code|,CODE,READONLY
	EXPORT	MB_Encode
	EXPORT	MB_Decode

; hand-coded DCT
; Based on the fast ARM inverse DCT and the forward DCT in the H263 source tree.
; RJW	5/8/97
; I guess this really ought to have a copyright notice here... Assume there is one.
; ------------------------------------------------------------------------
; The DCT macro
; ------------------------------------------------------------------------

; The basic 1-D DCT is coded here as a macro, because the code is replicated
; for rows and for columns.

        MACRO
        DCTransform

	; a0a = a0 + a7
	; a7a = a0 - a7
	ADD	r0,r0,r7		; r0 = a0a
	SUB	r7,r0,r7,LSL#1		; r7 = a7a
	; a1a = a1 + a6
	; a6a = a1 - a6
	ADD	r1,r1,r6		; r1 = a1a
	SUB	r6,r1,r6,LSL#1		; r6 = a6a
	; a2a = a2 + a5
	; a5a = a2 - a5
	ADD	r2,r2,r5		; r2 = a2a
	SUB	r5,r2,r5,LSL#1		; r5 = a5a
	; a3a = a3 + a4
	; a4a = a3 - a4
	ADD	r3,r3,r4		; r3 = a3a
	SUB	r12,r3,r4,LSL#1		; r12= a4a
	; a0b = a0a + a3a
	; a3b = a0a - a3a
 	ADD	r0,r0,r3		; r0 = a0b
	SUB	r3,r0,r3,LSL#1		; r3 = a3b
	; a1b = a1a + a2a
	; a2b = a1a - a2a
 	ADD	r1,r1,r2		; r1 = a1b		r1 = a1a ^^^^^
	SUB	r2,r1,r2,LSL#1		; r2 = a2b		r2 = a2a ^^^^^
	; a6b = (a6a + a5a) * f0
	; a5b = (a6a - a5a) * f0
 	ADD	r6,r6,r5		; r6 = a6b/f0		r6 = a6a ^^^^^
	SUB	r5,r6,r5,LSL#1		; r5 = a5b/f0		r5 = a5a ^^^^^
	; * f0
	ADD	r11,r6,r6,LSL#2
	ADD	r11,r11,r11,LSL#5
	ADD	r14,r11,r6,LSL#4	; r14 = a6b		r11 corrupted
	; * f0
	ADD	r11,r5,r5,LSL#2
	ADD	r11,r11,r11,LSL#5
	ADD	r5,r11,r5,LSL#4		; r5 = a5b		r11 corrupted
	; a0c = (a0b + a1b) * f4
	; a4c = (a0b - a1b) * f4
	ADD	r0,r0,r1		; r0 = a0c/f4		r0 = a0b ^^^^^
	SUB	r4,r0,r1,LSL#1		; r4 = a4c/f4		r1 = a1b ^^^^^
	; * f4
	ADD	r11,r0,r0,LSL#2
	ADD	r11,r11,r11,LSL#3
	ADD	r0,r0,r11,LSL#1		; r0 = a0c				r11 corrupted
	; * f4
	ADD	r11,r4,r4,LSL#2
	ADD	r11,r11,r11,LSL#3
	ADD	r4,r4,r11,LSL#1		; r4 = a4c				r11 corrupted
	; a2c = a2b * f6 + a3b * f2
	; a6c = a3b * f6 - a2b * f2
	; * f6
	ADD	r11,r2,r2,LSL#1
	ADD	r11,r2,r11,LSL#4	; r11 = a2b * f6	r2 = a2b ^^^^^	r11 corrupted
	; * 2 * f2
	RSB	r6,r3,r3,LSL#8
	SUB	r6,r6,r3,LSL#4
	SUB	r6,r6,r3,LSL#1		; r6 = a3b * f2 * 2	r3 = a3b ^^^^^
	; * 2 * f2
	RSB	r10,r2,r2,LSL#8
	SUB	r10,r10,r2,LSL#4
	SUB	r10,r10,r2,LSL#1	; r10= a2b*f2*2		r2 = a2b ^^^^^	r10 corrupted
	ADD	r2,r11,r6,ASR#1		; r2 = a2c = a2b*f6 + a3b*f2
	; * f6
	ADD	r6,r3,r3,LSL#1
	ADD	r6,r3,r6,LSL#4
	SUB	r6,r6,r10,ASR#1		; r6 = a6c = a2b * f6 + a3b * f2
	; a1c = a4a + a5b
	; a3c = a4a - a5b
	RSB	r3,r5,r12,LSL#8		; r3 = a3c		r12= a4a ^^^^^
	ADD	r12,r3,r5,LSL#1		; r12= a1c		r5 = a5b ^^^^^
	; a7c = a7a + a6b
	; a5c = a7a - a6b
	ADD	r7,r14,r7,LSL#8		; r7 = a7c		r7 = a7a ^^^^^
	SUB	r5,r7,r14,LSL#1		; r5 = a5c		r14= a6b ^^^^^

	MOV	r12,r12,ASR#8
	MOV	r3,r3,ASR#8
	MOV	r5,r5,ASR#8
	MOV	r7,r7,ASR#8

	; a1d = a1c * f7 + a7c * f1
	; a7d = a7c * f7 - a1c * f1
	; * 2 * f1
	RSB	r10,r7,r7,LSL#8
	SUB	r10,r10,r10,ASR#6	; r10 = a7c * f1 * 2	r7 = a7c ^^^^^
	; * f7
	ADD	r11,r12,r12,LSL#1
	ADD	r11,r12,r11,LSL#3	; r11 = a1c * f7	r12 = a1c ^^^^^
	; * 2 * f1
	RSB	r14,r12,r12,LSL#8
	SUB	r14,r14,r14,ASR#6	; r14 = a1c * f1 * 2	r12 = a1c ^^^^^
	ADD	r1,r11,r10,ASR#1	; r1 = a1d
	; * f7
	ADD	r10,r7,r7,LSL#1
	ADD	r7,r7,r10,LSL#3		; r7 = a7c * f7		r7 = a7c ^^^^
	SUB	r7,r7,r14,ASR#1		; r7 = a7d
	; a5d = a3c * f3 + a5c * f5
	; a3d = a5c * f3 - a3c * f5
	; * 2 * f3
	ADD	r10,r3,r3,LSL#2
	ADD	r10,r10,r10,LSL#4
	ADD	r10,r10,r3,LSL#7	; r10 = a3c * f3 * 2	r3 = a3c ^^^^^
	; * f5
	RSB	r11,r5,r5,LSL#3
	ADD	r11,r11,r5,LSL#6	; r11 = a5c * f5	r5 = a5c ^^^^^	r14 corrupted
	; * 2 * f3
	ADD	r14,r5,r5,LSL#2
	ADD	r14,r14,r14,LSL#4
	ADD	r14,r14,r5,LSL#7	; r14 = a5c * f3 * 2	r5 = a5c ^^^^^
	ADD	r5,r11,r10,ASR#1	; r5 = a5d = a5c * f3 + a5c * f5
	; * f5
	RSB	r10,r3,r3,LSL#3
	ADD	r3,r10,r3,LSL#6		; r3 = ???		r3 = a3c ^^^^^
	RSB	r3,r3,r14,ASR#1		; r3 = a3d

        MEND

; ------------------------------------------------------------------------
; The main routine
; ------------------------------------------------------------------------
; r0=data ptr

asm_dct                             ; extern void asm_dct(decompress_info_ptr cinfo, DCTBLOCK data, int count);
        FunctionEntry "r0-r2"       ; save state

        MOV     r8,#8                     ; loop counter for rows
        SUB     r9,r3,#8*8*4              ; data pointer

; First do the rows
dctrow_loop
        LDMIA   r9 ,{r0-r7}                ; get this row
        DCTransform
        STMIA   r9!,{r0-r7}                ; put this row
        SUBS    r8,r8,#1
        BNE     dctrow_loop
dctrow_done

; now to do the columns, very similar but the loads/stores are spaced
; out more.
;        LDR     r9,[sp]                   ; reload data pointer
        SUB     r9,r9,#8*8*4              ; reset data pointer
	MOV	r8,#8
dctcol_loop
        ; load the data values, spaced 8 words apart.
        LDR     r0,[r9,#8*4*0]
        LDR     r1,[r9,#8*4*1]
        LDR     r2,[r9,#8*4*2]
        LDR     r3,[r9,#8*4*3]
        LDR     r4,[r9,#8*4*4]
        LDR     r5,[r9,#8*4*5]
        LDR     r6,[r9,#8*4*6]
        LDR     r7,[r9,#8*4*7]

        DCTransform

	ADD	r0,r0,#&8000
	ADD	r1,r1,#&8000
	ADD	r2,r2,#&8000
	ADD	r3,r3,#&8000
	ADD	r4,r4,#&8000
	ADD	r5,r5,#&8000
	ADD	r6,r6,#&8000
	ADD	r7,r7,#&8000

	MOV	r0,r0,ASR #16
	MOV	r1,r1,ASR #16
	MOV	r2,r2,ASR #16
	MOV	r3,r3,ASR #16
	MOV	r4,r4,ASR #16
	MOV	r5,r5,ASR #16
	MOV	r6,r6,ASR #16
	MOV	r7,r7,ASR #16

        STR     r1,[r9,#8*4*1]
        STR     r2,[r9,#8*4*2]
        STR     r3,[r9,#8*4*3]
        STR     r4,[r9,#8*4*4]
        STR     r5,[r9,#8*4*5]
        STR     r6,[r9,#8*4*6]
        STR     r7,[r9,#8*4*7]
        STR     r0,[r9],#4

	SUBS	r8,r8,#1
        BNE     dctcol_loop               ; loop
Quant
	LDMFD	r13!,{r0-r2}
	SUB	r3,r9,#8*4
	; r0 = int *coeff
	; r1 = QP (in [1..31])
	; r2 = Mode
	; r3 = int *qcoeff

	ADR	r11,rtab
	ADR	r12,QuantTbl
	LDR	r12,[r12,r1,LSL#2]	; R12 = 65536/(2*QP)

	CMP	r2,#3		; if (Mode==MODE_INTRA || Mode==MODE_INTRA_Q)
	BLT	Quant_Inter	;   Intra
	; So we are Intra coding...
	LDR	r4,[r3],#4	; r4 = coeff[0]
	MOVS	r4,r4,ASR#3	; r4 = coeff[0]>>3
	MOVLE	r4,#1		; r4 = mmax(1,r4)
	CMP	r4,#254		; r4 = mmin(254,r4)
	MOVGT	r4,#254
	STR	r4,[r0]		; coeff[0] = r4

	MOV	r5,#63
qintralp
	LDR	r14,[r3],#4	; r14 = coeff[i]
	MOVS	r4,r14
	RSBLTS	r4,r14,#0	; r4 = abs(r14)
	MUL	r4,r12,r4	; r4 = level*65536 = 65536*r3/(2*QP)
	MOVS	r4,r4,ASR#16	; r4 = level
	CMP	r4,#127
	MOVGE	r4,#127		; r4 = max(127,level)
	CMP	r14,#0
	LDRB	r14,[r11,#1]!
	RSBLT	r4,r4,#0	; r4 = r4 * sign(r14)
	STR	r4,[r0,r14,LSL#2]	; qcoeff[i] = r4
	SUBS	r5,r5,#1
	BNE	qintralp

        Return
Quant_Inter
	MOV	r4,#64
qinterlp
	LDR	r14,[r3],#4	; r14 = coeff[i]
	MOVS	r5,r14
	RSBLTS	r5,r14,#0	; r5 = abs(r14)
	SUBS	r5,r5,r1,ASR#1	; r5 = r5 - QP/2
	RSBLT	r5,r5,#0
	RSBLT	r14,r14,#0
	MUL	r5,r12,r5	; r5 = level*65536 = 65536*r3/(2*QP)
	MOVS	r5,r5,ASR#16	; r5 = level
	CMP	r5,#127
	MOVGE	r5,#127		; r5 = max(127,level)
	CMP	r14,#0
	LDRB	r14,[r11],#1
	RSBLT	r5,r5,#0	; r5 = r5 * sign(r14)
	STR	r5,[r0,r14,LSL#2]	; qcoeff[i] = r5
	SUBS	r4,r4,#1
	BNE	qinterlp

        Return
QuantTbl
	DCD	0		; Never used
	DCD	65536/2		; 1
	DCD	65536/4		; 2
	DCD	65536/6		; 3
	DCD	65536/8		; 4
	DCD	65536/10	; 5
	DCD	65536/12	; 6
	DCD	65536/14	; 7
	DCD	65536/16	; 8
	DCD	65536/18	; 9
	DCD	65536/20	; 10
	DCD	65536/22	; 11
	DCD	65536/24	; 12
	DCD	65536/26	; 13
	DCD	65536/28	; 14
	DCD	65536/30	; 15
	DCD	65536/32	; 16
	DCD	65536/34	; 17
	DCD	65536/36	; 18
	DCD	65536/38	; 19
	DCD	65536/40	; 20
	DCD	65536/42	; 21
	DCD	65536/44	; 22
	DCD	65536/46	; 23
	DCD	65536/48	; 24
	DCD	65536/50	; 25
	DCD	65536/52	; 26
	DCD	65536/54	; 27
	DCD	65536/56	; 28
	DCD	65536/58	; 29
	DCD	65536/60	; 30
	DCD	65536/62	; 31
rtab
	DCB	0
	DCB	1
	DCB	5
	DCB	6
	DCB	14
	DCB	15
	DCB	27
	DCB	28

	DCB	2
	DCB	4
	DCB	7
	DCB	13
	DCB	16
	DCB	26
	DCB	29
	DCB	42

	DCB	3
	DCB	8
	DCB	12
	DCB	17
	DCB	25
	DCB	30
	DCB	41
	DCB	43

	DCB	9
	DCB	11
	DCB	18
	DCB	24
	DCB	31
	DCB	40
	DCB	44
	DCB	53

	DCB	10
	DCB	19
	DCB	23
	DCB	32
	DCB	39
	DCB	45
	DCB	52
	DCB	54

	DCB	20
	DCB	22
	DCB	33
	DCB	38
	DCB	46
	DCB	51
	DCB	55
	DCB	60

	DCB	21
	DCB	34
	DCB	37
	DCB	47
	DCB	50
	DCB	56
	DCB	59
	DCB	61

	DCB	35
	DCB	36
	DCB	48
	DCB	49
	DCB	57
	DCB	58
	DCB	62
	DCB	63
; hand-coded DCT
; Based on the inverse DCT in the Indep JPEG Group's release 4 code - look in c.jrevdct4.
;   This C source, and the assembler output from the C (from cc 4.50) are both extremely
;   useful in understanding this code. In particular CC was used to turn the multiplies
;   into sequences of adds.
; 24-Sep-93 - started
; 21-Oct-93 - expanded-out-odd-cases tried and abandoned (see below).
; 13-Jan-94 - Spitfire bug found, thanx a million Mark Taunton.

; a 1D DCT takes 8 integers, adds and subtracts them, gives you 8 other integers.
; a 2D DCT does this to all the rows, then to all the columns (ie 16 times).
; The blocks (of 64 integers) are initially quite sparse, but they soon fill up.
; If the inputs (of a 1D DCT) are all zero, the outputs are all zero.
; If only the first arg is nonzero, the outputs are all replicas of the first arg.

; In this code for the 1D DCT components 0,2,4,6 are combined, then 1,3,5,7, then
; the results folded together. I have tried expanding out the handling of negative
; components so that there are four special cases for only one negative arg nonzero,
; but it made the result slower! Probably through destroying cache locality in the
; whole system. I've seen code for MPEG, which has the same problem to solve, which
; does this far more - a win on machines with a large cache or no cache. Also,
; maybe MPEG typically has sparser DCTs to perform?

; This DCT works to 8 bits of precision, whereas IJG4 uses 13. I have compared
; the results side-by-side on a 32bpp screen, and I can't see any significant
; differences. JPEG has already thrown away (sorry, 'quantized') all the numbers
; a lot anyway.

; ------------------------------------------------------------------------
; The DCT macro
; ------------------------------------------------------------------------

; The basic 1-D DCT is coded here as a macro, because the code is replicated
; for rows and for columns.

; There are various basic paths through a 1D DCT in this code:
;   all the values are zero - nothing need be done. (common, esp in 1st pass)
;   only r0 is non-zero - replicate it (also common, ditto)
;   r1/r3/r5/r7 are zero, others are non-zero
;   r0/r2/r4/r6 are zero, others are non-zero

        MACRO
        iDCTransform $rc

; the even components.

        ORRS    r10,r2,r6
        BEQ     $rc._zr26                 ; B if r2/6 are zero

        ADD     r10,r2,r6

        ;MulCon  r11,r10,FIX_0_541196100   ; z1
        RSB     r11,r10,r10,LSL #4
        ADD     r11,r11,r11,LSL #3
        ADD     r11,r11,r10,LSL #2

        ;MulCon  r10,r6,- FIX_1_847759065
        SUB     r10,r6,r6,LSL #5
        RSB     r10,r10,r10,LSL #4
;        SUB     r10,r11,r10,LSL #3        ; tmp2
        SUB     r10,r10,r6,LSL #3
        ADD     r10,r10,r11                ; tmp2

        ;MulCon  r12,r2,FIX_0_765366865
        ADD     r12,r2,r2,LSL #4
        ADD     r12,r12,r2,LSL #5
        ADD     r12,r11,r12,LSL #2        ; tmp3
        ; scratch z1=r11
        ; scratch r2,r6

        SUB     r11,r0,r4                 ; tmp1 (not shifted)
        ADD     r6,r10,r11,LSL #8         ; tmp11 = tmp1 + tmp2;
        RSB     r2,r10,r11,LSL #8         ; tmp12 = tmp1 - tmp2;

        ADD     r11,r0,r4                 ; tmp0 (not shifted)
        ; scratch r0,r4
        ADD     r0,r12,r11,LSL #8         ; tmp10 = tmp0 + tmp3;
        RSB     r4,r12,r11,LSL #8         ; tmp13 = tmp0 - tmp3;
        ; scratch r11=tmp0
; scratch r10,r11,r12
; r0/2/4/6 have been replaced by tmp10/12/13/11

; the odd components
        ORRS    r10,r1,r3
        ORREQS  r10,r5,r7
        BEQ     $rc._odd_shortcut         ; shortcut
$rc._odd

; the pressure on registers is severe: do z3,z4,z5 so that
; z5 can be discarded before doing anything with z1,z2

        ADD     r10,r7,r3                 ; z3
        ADD     r11,r5,r1                 ; z4
        ADD     r12,r10,r11               ; ...z3+z4

        ;MulCon  lr,r12,FIX_1_175875602    ; z5
        ADD     lr,r12,r12,LSL #5
        ADD     lr,lr,lr,LSL #3
        ADD     lr,lr,r12,LSL #2
        ; scratch r12

        ;MulCon  r12,r10,- FIX_1_961570560 ; z3
        SUB     r12,r10,r10,LSL #1
        RSB     r12,r12,r12,LSL #8
        ADD     r12,r12,r10,LSL #2        ; (still needs to <<1)
        ; scratch r10

        ;MulCon  r10,r11,- FIX_0_390180644 ; z4
        SUB     r10,r11,r11,LSL #1
        ADD     r10,r10,r10,LSL #5
        ADD     r10,r10,r11,LSL #3         ; (still needs to <<2)
;        RSB     r10,r10,r10,LSL #8
;        ADD     r10,r10,r11,LSL #2        ; (still needs to <<2)
        ; scratch r11

        ADD     r12,lr,r12,LSL #1         ; z3 += z5; (did the <<1 from above)
        ADD     r10,lr,r10,LSL #2         ; z4 += z5; (did the <<2 from above)
        ; scratch lr=z5
        ; now do z1 all the way through before doing z2.
        ; registers: r12=z3
        ;            r10=z4
        ;            r11,lr scratch
        ADD     r11,r7,r1                 ; z1

; prevent 'macro too big' errors!
        MEND
        MACRO
        iDCTransform2 $rc

        ;MulCon  lr,r7,FIX_0_298631336     ; tmp0
        ADD     lr,r7,r7,LSL #1
        ADD     lr,lr,r7,LSL #4           ; (still need to do <<2)
        ; scratch r7

        ;MulCon  r7,r1,FIX_1_501321110     ; tmp3
        ADD     r7,r1,r1,LSL #1           ; (still need to <<7)
        ; scratch r1

        ;MulCon  r1,r11,- FIX_0_899976223  ; z1
        ADD     r1,r11,r11,LSL #2
        ADD     r1,r1,r11,LSL #3
        SUB     r1,r1,r11,LSL #7          ; (still need to <<1)
        ; scratch r11

        ADD     lr,r12,lr,LSL #2          ; tmp0 += z3;         (did the <<2 for tmp0 above)
        ADD     lr,lr,r1,LSL #1           ; tmp0 += z1;         (did the <<1 for z1 above)
        ADD     r7,r10,r7,LSL #7          ; tmp3 += z4;         (did the <<7 for tmp3 above)
        ADD     r7,r7,r1,LSL #1           ; tmp3 += z1;         (did the <<1 for z1 above)
        ; scratch r1
        ; now we can do z2
        ; registers: r7=tmp3
        ;            r10=z4
        ;            r12=z3
        ;            lr=tmp0
        ;            r1,r11 scratch
        ADD     r1,r5,r3                  ; z2

        ;MulCon  r11,r1,- FIX_2_562915447  ; z2
        SUB     r11,r1,r1,LSL #1
        ADD     r11,r11,r11,LSL #5
        SUB     r11,r11,r1,LSL #3         ; (still need to <<4)
        ; scratch r1

        ADD     r10,r10,r11,LSL #4        ; ...z2+z4 (did the <<4 above)
        ADD     r12,r12,r11,LSL #4        ; ...z2+z3 (did the <<4 above)
        ; scratch r11

        ;MulCon  r11,r5,FIX_2_053119869    ; tmp1
        RSB     r11,r5,r5,LSL #3
        ADD     r11,r11,r5,LSL #8         ; (still need to <<1)
        ; scratch r5

        ;MulCon  r5,r3,FIX_3_072711026     ; tmp2
        ADD     r5,r3,r3,LSL #8
        ADD     r5,r5,r5,LSL #1
        ADD     r5,r5,r3,LSL #4
        ; scratch r3

        ADD     r11,r10,r11,LSL #1        ; tmp1 += z2 + z4; (did the <<1 on tmp1 above)
        ADD     r10,r5,r12                ; tmp2 += z2 + z3;

        ; final combination and output stage:
        ; r0 = tmp10
        ; r1 =             (scratch)
        ; r2 = tmp12
        ; r3 =             (scratch)
        ; r4 = tmp13
        ; r5 =             (scratch)
        ; r6 = tmp11
        ; r7 = tmp3
        ; r8 = loop counter
        ; r9 = data pointer
        ; r10= tmp2
        ; r11= tmp1
        ; r12=             (scratch)
        ; r13= sp
        ; lr = tmp0
        ADD     r1,r6,r10                 ; tmp11 + tmp2
        ADD     r3,r4,lr                  ; tmp13 + tmp0
        SUB     r5,r2,r11                 ; tmp12 - tmp1
        SUB     r4,r4,lr                  ; tmp13 - tmp0
        ADD     r2,r2,r11                 ; tmp12 + tmp1
        SUB     r6,r6,r10                 ; tmp11 - tmp2
        ADD     r0,r0,r7                  ; tmp10 + tmp3
        SUB     r7,r0,r7,LSL #1           ; tmp10 - tmp3 (actually tmp10 + tmp3 - 2*tmp3)
$rc._store
        MEND

; The 'nullsave' argument tells the macro if the answer goes back in the same
; place as the input came from - TRUE for rows, FALSE for columns. If TRUE and
; all inputs zero, don't even have to save outputs.
        MACRO
        DCTransform_Leftovers $rc,$nullsave
$rc._zr26
        ; r2/6 are zero - we can take a shortcut through the first quadrant.
        ; tmp2 and tmp3 are zero, tmp0=(r0+r4)<<8, tmp1=(r0-r4)<<8.
        ; we do this rather than replicate-DC because it's little slower,
        ; especially considering we only did one instruction of test to get here,
        ; and handles one more case.
        SUB     r6,r0,r4
        MOV     r6,r6,LSL #8             ; tmp11 = tmp1 + tmp2;
        MOV     r2,r6                    ; tmp12 = tmp1 - tmp2;
        ADD     r0,r0,r4
        MOV     r0,r0,LSL #8             ; tmp10 = tmp0 + tmp3;
        MOV     r4,r0                    ; tmp13 = tmp0 - tmp3;
        ; We also check for r1-r7 being zero (so replicate r0 << 8), or
        ; r0-r7 being zero in which case nothing to be done at all.
        ORRS    r10,r1,r3
        ORREQS  r10,r5,r7
        BNE     $rc._odd                 ; odd coeffs NOT all zero, handle them normally.

      [ $nullsave.
        ; If r0-r7 are all zero, AND we're saving the answer back to the same
        ; place, then don't even bother to save. But if answer goes somewhere
        ; different, we must save - this was the 'spitfire' bug.
        ; 1-3,5-7 are all zero - worth checking for 1-7 zero, and for all zero.
        ORRS    r10,r0,r2                ; r0+r4,r0-r4 both zero -> r0,r4 were both zero
        BEQ     $rc._inc                 ; r0-r7 are all zero - don't even save
      ]

        ; code for 1-7 zero, works for any case where 1/3/5/7 are zero in fact.
$rc._odd_shortcut
        MOV     r7,r0
        MOV     r1,r6
        MOV     r5,r2
        MOV     r3,r4
        ; it's as if you B'd to $rc._store here.
        ; the caller of this macro will replicate the end-of-loop code,
        ; or put in the suitable B.
        MEND

;; ------------------------------------------------------------------------
;; Test proc - procedure to do a 1-D DCT
;; ------------------------------------------------------------------------
;; extern void dct_1d(decompress_info_ptr cinfo, int *data);

;asm_dct_1_d
;        FunctionEntry "r0-r11"           ; save state
;        MOV     r9,r1                    ; data pointer
;        LDMIA   r9,{r0-r7}               ; get this row
;        DCTransform dct1d
;        DCTransform2 dct1d
;        STMIA   r9!,{r0-r7}              ; put this row
;dct1d_inc
;        Return  "r0-r11"                 ; exit

;        DCTransform_Leftovers dct1d,{TRUE}
;        STMIA   r9!,{r0-r7}              ; put this row
;        Return  "r0-r11"                 ; exit

; ------------------------------------------------------------------------
; The main routine
; ------------------------------------------------------------------------
; r0=data ptr

	; Dequant has verified itself to be equivalent to the original Dequant!
Dequant
	; r0 = int *qcoeff
	; r1 = int *rcoeff
	; r2 = QP
	; r3 = Mode
        FunctionEntry

	MOV	r12,#63
	AND	r4,r2,#1
	SUB	r4,r4,#1
	ADR	r11,rtab
dqlp1
	LDRB	r5,[r11,r12]
	LDR	r14,[r0,r5,LSL#2]
	MOVS	r5,r14,LSL#1
	RSBLT	r5,r5,#0	; r3 = 2*abs(qcoeff[i])
	ADDNE	r5,r5,#1
	MLANE	r5,r2,r5,r4
	RSBLT	r5,r5,#0
	STR	r5,[r1,r12,LSL#2]
	SUBS	r12,r12,#1
	BGE	dqlp1

	CMP	r3,#3
	MOVGE	r5,r14,ASL#3
	STR	r5,[r1]
	; Now the iDCT
        MOV     r8,#8                     ; loop counter for rows
        MOV     r9,r1                     ; data pointer

; First do the rows
idctrow_loop
        LDMIA   r9,{r0-r7}                ; get this row
        iDCTransform idctrow
        iDCTransform2 idctrow
        STMIA   r9,{r0-r7}                ; put this row
idctrow_inc
        ADD     r9,r9,#8*4                ; increment output pointer
        SUBS    r8,r8,#1
        BNE     idctrow_loop
idctrow_done

; now to do the columns, very similar but the loads/stores are spaced
; out more.
;        LDR     r9,[sp]                   ; reload data pointer
        SUB     r9,r9,#8*8*4              ; reset data pointer
        SUB     r8,r9,#8*8*4              ; set up output pointer
idctcol_loop
        ; load the data values, spaced 8 words apart.
        LDR     r0,[r9,#8*4*0]
        LDR     r1,[r9,#8*4*1]
        LDR     r2,[r9,#8*4*2]
        LDR     r3,[r9,#8*4*3]
        LDR     r4,[r9,#8*4*4]
        LDR     r5,[r9,#8*4*5]
        LDR     r6,[r9,#8*4*6]
        LDR     r7,[r9,#8*4*7]

        iDCTransform idctcol
        iDCTransform2 idctcol
	ADD	r0,r0,#&40000
	ADD	r1,r1,#&40000
	ADD	r2,r2,#&40000
	ADD	r3,r3,#&40000
	ADD	r4,r4,#&40000
	ADD	r5,r5,#&40000
	ADD	r6,r6,#&40000
	ADD	r7,r7,#&40000

	MOV	r0,r0,ASR #19
	MOV	r1,r1,ASR #19
	MOV	r2,r2,ASR #19
	MOV	r3,r3,ASR #19
	MOV	r4,r4,ASR #19
	MOV	r5,r5,ASR #19
	MOV	r6,r6,ASR #19
	MOV	r7,r7,ASR #19

        STR     r0,[r9,#8*4*0]
        STR     r1,[r9,#8*4*1]
        STR     r2,[r9,#8*4*2]
        STR     r3,[r9,#8*4*3]
        STR     r4,[r9,#8*4*4]
        STR     r5,[r9,#8*4*5]
        STR     r6,[r9,#8*4*6]
        STR     r7,[r9,#8*4*7]

;        STMIA   r8,{r0-r7}                ; store in row order, in the block below the original input
idctcol_inc
        ADD     r8,r8,#8*4                ; advance output pointer
        ADD     r9,r9,#4                  ; advance input pointer
        SUB     r10,r9,r8                 ; terminate based on the difference between them
        CMP     r10,#8*4                  ; until then the difference will be bigger
        BGT     idctcol_loop               ; loop

        Return

; --------------------------------------------------------------------------
        DCTransform_Leftovers idctrow,{TRUE}
        STMIA   r9!,{r0-r7}               ; store this row
        SUBS    r8,r8,#1                  ; decrement row count
        BNE     idctrow_loop               ; and either do another row
        B       idctrow_done               ; or done all rows

        DCTransform_Leftovers idctcol,{FALSE}
        B       idctcol_store              ; B to code for end of column

MB_Encode
        FunctionEntry "r3,r4-r11"
	; r0 = int *qcoeff_ind
	; r1 = int QP
	; r2 = int I
	; r3 = MB_Structure *mb_orig
	MOV	r12,r3
	ADR	r3,fblock
	MOV	r11,#8
mbe_lp1
	LDMIA	r12!,{r4,r5,r6,r7,r8,r9,r10,r14}
	STMIA	r3!, {r4,r5,r6,r7,r8,r9,r10,r14}
	ADD	r12,r12,#8*4
	SUBS	r11,r11,#1
	BNE	mbe_lp1
	BL	asm_dct

	LDMFD	r13,{r12}
	ADR	r3,fblock
	ADD	r12,r12,#8*4
	ADD	r0,r0,#64*4
	MOV	r11,#8
mbe_lp2
	LDMIA	r12!,{r4,r5,r6,r7,r8,r9,r10,r14}
	STMIA	r3!, {r4,r5,r6,r7,r8,r9,r10,r14}
	ADD	r12,r12,#8*4
	SUBS	r11,r11,#1
	BNE	mbe_lp2
	BL	asm_dct

	LDMFD	r13,{r12}
	ADR	r3,fblock
	ADD	r12,r12,#16*8*4
	ADD	r0,r0,#64*4
	MOV	r11,#8
mbe_lp3
	LDMIA	r12!,{r4,r5,r6,r7,r8,r9,r10,r14}
	STMIA	r3!, {r4,r5,r6,r7,r8,r9,r10,r14}
	ADD	r12,r12,#8*4
	SUBS	r11,r11,#1
	BNE	mbe_lp3
	BL	asm_dct

	LDMFD	r13,{r12}
	ADR	r3,fblock
	ADD	r12,r12,#16*8*4 + 8*4
	ADD	r0,r0,#64*4
	MOV	r11,#8
mbe_lp4
	LDMIA	r12!,{r4,r5,r6,r7,r8,r9,r10,r14}
	STMIA	r3!, {r4,r5,r6,r7,r8,r9,r10,r14}
	ADD	r12,r12,#8*4
	SUBS	r11,r11,#1
	BNE	mbe_lp4
	BL	asm_dct

	LDMFD	r13,{r12}
	ADR	r3,fblock
	ADD	r12,r12,#16*16*4
	ADD	r0,r0,#64*4
	MOV	r11,#16
mbe_lp5
	LDMIA	r12!,{r4,r5,r6,r7,r8,r9,r10,r14}
	STMIA	r3!, {r4,r5,r6,r7,r8,r9,r10,r14}
	SUBS	r11,r11,#1
	BNE	mbe_lp5
	BL	asm_dct

	LDMFD	r13!,{r12}
	ADR	r3,fblock+8*8*4
	ADD	r0,r0,#64*4
	BL	asm_dct

        Return  "r4-r11"
fblock
	% 64*4*2
MB_Decode
	; r0 = int *qcoeff
	; r1 = MB_Structure *mb_recon
	; r2 = int QP
	; r3 = int I
        FunctionEntry "r0-r11"

	; Y0
	ADR	R1,fblock
	BL	Dequant
	; Copy Y0 across
	LDMFD	r13,{r0-r3}
	ADR	R14,fblock
	MOV	r12,#8
mbd_lp0
	LDMIA	r14!,{r4,r5,r6,r7,r8,r9,r10,r11}
	STMIA	r1!,{r4,r5,r6,r7,r8,r9,r10,r11}
	ADD	r1,r1,#8*4
	SUBS	r12,r12,#1
	BGT	mbd_lp0
	; Y1
	ADR	r1,fblock
	ADD	r0,r0,#64*4
	BL	Dequant
	; Copy Y1 across
	LDMFD	r13,{r0-r3}
	ADR	R14,fblock
	MOV	r12,#8
mbd_lp1
	ADD	r1,r1,#8*4
	LDMIA	r14!,{r4,r5,r6,r7,r8,r9,r10,r11}
	STMIA	r1!,{r4,r5,r6,r7,r8,r9,r10,r11}
	SUBS	r12,r12,#1
	BGT	mbd_lp1
	; Y2
	ADR	r1,fblock
	ADD	r0,r0,#64*4*2
	BL	Dequant
	; Copy Y2 across
	LDMFD	r13,{r0-r3}
	ADR	R14,fblock
	MOV	r12,#8
	ADD	r1,r1,#8*8*4*2
mbd_lp2
	LDMIA	r14!,{r4,r5,r6,r7,r8,r9,r10,r11}
	STMIA	r1!,{r4,r5,r6,r7,r8,r9,r10,r11}
	ADD	r1,r1,#8*4
	SUBS	r12,r12,#1
	BGT	mbd_lp2
	; Y3
	ADR	r1,fblock
	ADD	r0,r0,#64*4*3
	BL	Dequant
	; Copy Y3 across
	LDR	r1,[r13,#4]
	ADR	R14,fblock
	MOV	r12,#8
	ADD	r1,r1,#8*8*4*2+8*4
mbd_lp3
	LDMIA	r14!,{r4,r5,r6,r7,r8,r9,r10,r11}
	STMIA	r1!,{r4,r5,r6,r7,r8,r9,r10,r11}
	ADD	r1,r1,#8*4
	SUBS	r12,r12,#1
	BGT	mbd_lp3
	; Cb
	LDMFD	r13,{r0-r3}
	ADD	r1,r1,#64*4*5
	ADD	r0,r0,#64*4*4
	BL	Dequant
	; Cr
	LDMFD	r13!,{r0-r3}
	ADD	r1,r1,#64*4*4
	ADD	r0,r0,#64*4*5
	BL	Dequant

        Return  "r4-r11"

        END
