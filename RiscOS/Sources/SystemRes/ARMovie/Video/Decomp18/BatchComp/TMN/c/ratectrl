/************************************************************************
 *
 *  ratectrl.c, part of tmn (TMN encoder)
 *  Copyright (C) 1995, 1996  Telenor R&D, Norway
 *        Karl Olav Lillevold <Karl.Lillevold@nta.no>
 *
 *  Contacts:
 *  Karl Olav Lillevold               <Karl.Lillevold@nta.no>, or
 *  Robert Danielsen                  <Robert.Danielsen@nta.no>
 *
 *  Telenor Research and Development  http://www.nta.no/brukere/DVC/
 *  P.O.Box 83                        tel.:   +47 63 84 84 00
 *  N-2007 Kjeller, Norway            fax.:   +47 63 81 00 76
 *
 ************************************************************************/

/*
 * Disclaimer of Warranty
 *
 * These software programs are available to the user without any
 * license fee or royalty on an "as is" basis.  Telenor Research and
 * Development disclaims any and all warranties, whether express,
 * implied, or statuary, including any implied warranties or
 * merchantability or of fitness for a particular purpose.  In no
 * event shall the copyright-holder be liable for any incidental,
 * punitive, or consequential damages of any kind whatsoever arising
 * from the use of these programs.
 *
 * This disclaimer of warranty extends to the user of these programs
 * and user's customers, employees, agents, transferees, successors,
 * and assigns.
 *
 * Telenor Research and Development does not represent or warrant that
 * the programs furnished hereunder are free of infringement of any
 * third-party patents.
 *
 * Commercial implementations of H.263, including shareware, are
 * subject to royalty fees to patent holders.  Many of these patents
 * are general enough such that they are unavoidable regardless of
 * implementation design.
 * */


/* IMPORTANT NOTE:

   The H.263 standard does not specify a rate control method.  Each
   H.263 encoder has to implement a rate control suited for what the
   encoder is going to be used for. This software now includes two
   rate control methods: (i) the rate control from the TMN5 document,
   and (ii) the rate control method used to encode the H.263
   bitstreams submitted to the MPEG-4 tests. The default rate control
   is (i) which is suitable for low-delay teleconferencing. If the
   software is compiled with the OFFLINE_RATE_CONTROL flag, (ii) will
   be used. Read more about (ii) below.

   */
#include "Fix.h"
#include "Logger.h"
#include "sim.h"

#ifdef OFFLINE_RATE_CONTROL

/* ABOUT THE OFFLINE RATE CONTROL:

   If you compile the TMN encoder with OFFLINE_RATE_CONTROL, you will
   get the same rate control as was used to generate the MPEG-4
   anchors. This rate control does not skip any extra pictures after
   the first frame, and it uses a fixed frame rate. It is possible to
   start the rate control after a certain percentage of the sequence
   has been encoded with a fixed quantization parameter. Its purpose
   is to achieve the target bitrate as a mean bitrate for the whole
   sequence. In other words, it is a rate control method optimized for
   offline compression.

   If oyu use the offline rate control, you will risk not achieving
   the target rate under one or more of the following conditions :

   (i)   too high frame rate
   (ii)  too low start value for the quantization parameter
   (iii) the rate control is started too late
   (iv)  the sequence encoded is too short

*/

#include <stdio.h>
#include <math.h>

/**********************************************************************
 *
 *	Name:	        FrameUpdateQP
 *	Description:    updates quantizer once per frame for
 *                      simplified rate control
 *
 *      Returns:        new quantizer
 *	Side effects:
 *
 *	Date: 950910	Author: Karl.Lillevold@nta.no
 *
 ***********************************************************************/

/* B = Number of B frames left to achieve rate in */
/* seconds = length of chunk in (guess) */

#ifdef NO_FP
int FrameUpdateQP(int buf, int bits, int frames_left, int QP, int B,
          Fix seconds, Fix bitbalance)
#else
int FrameUpdateQP(int buf, int bits, int frames_left, int QP, int B,
          float seconds,float bitbalance)
#endif
{
  int newQP, dQP;
#ifdef NO_FP
  Fix buf_rest, buf_rest_pic;
#else
  float buf_rest, buf_rest_pic;
#endif
#ifdef FIDDLERATE
  if(bitbalance!=0.0) buf_rest=bitbalance;
  else
#endif
#ifdef NO_FP
    buf_rest = ((seconds * B)>>8) - buf*256;
#else
    buf_rest = seconds * B - (float)buf;
#endif
  newQP = QP;

  if (frames_left > 0) {
#ifdef NO_FP
    buf_rest_pic = 256*(buf_rest / frames_left);
#else
    buf_rest_pic = buf_rest / (float)frames_left;
#endif

#ifdef LOGGING
    t_LogOut("\n");
    sprintf(t_LogMsg,"OFF LINE RATE CONTROL METHOD\n");t_LogOut(t_LogMsg);
    sprintf(t_LogMsg,"  Simplified rate control for %d remaining pictures:\n",frames_left);
    t_LogOut(t_LogMsg);
    sprintf(t_LogMsg,"  Bits spent / left       : %8d / %d (%d per picture)\n",
    	buf, mnint(buf_rest), mnint(buf_rest_pic));t_LogOut(t_LogMsg);
#endif

#ifdef NO_FP
    dQP = (int) mmax(1,QP/10);
#else
    dQP = (int) mmax(1,QP*0.1);
#endif

#ifdef LOGGING
    sprintf(t_LogMsg,"  Limits                  : %8.0f / %.0f\n",
           buf_rest_pic / 1.15, buf_rest_pic * 1.15);t_LogOut(t_LogMsg);
    sprintf(t_LogMsg,"  Bits spent on last frame: %8d\n", bits);t_LogOut(t_LogMsg);
#endif

#ifdef NO_FP
    if (bits > ((buf_rest_pic * 294)>>8)) {
#else
    if (bits > buf_rest_pic * 1.15) {
#endif
      newQP = mmin(31,QP+dQP);
#ifdef LOGGING
      sprintf(t_LogMsg,"  QP -> new QP            : %2d -> %2d\n", QP, newQP);
      t_LogOut(t_LogMsg);
#endif
    }
#ifdef NO_FP
    else if (bits < ((buf_rest_pic * 223)>>8)) {
#else
    else if (bits < buf_rest_pic / 1.15) {
#endif
      newQP = mmax(1,QP-dQP);
#ifdef LOGGING
      sprintf(t_LogMsg,"  QP -> new QP            : %2d -> %2d\n", QP, newQP);
      t_LogOut(t_LogMsg);
#endif
    }
#ifdef LOGGING
    else {
      t_LogOut("  QP not changed\n");
    }
#endif
  }
#ifdef LOGGING
  t_LogOut("\n");
#endif
  return newQP;
}

#else

/*

   These routines are needed for the low-delay , variable frame rate,
   rate control specified in the TMN5 document

*/

#include <math.h>

/* rate control static variables */


static float B_prev;     /* number of bits spent for the previous frame */
static float B_target;   /* target number of bits/picture               */
static float global_adj; /* due to bits spent for the previous frame    */
void t_init_ratectrl(void)
{B_prev=(float)0.0;
 B_target=(float)0.0;
 global_adj=(float)0.0;
}

void InitializeRateControl()
{
  B_prev = (float)0.0;
}

void UpdateRateControl(int bits)
{
  B_prev = (float)bits;
}

#ifdef NO_FP
int InitializeQuantizer(int pict_type, int bit_rate,
        int target_frame_rate, int QP_mean)
#else
int InitializeQuantizer(int pict_type, float bit_rate,
        float target_frame_rate, float QP_mean)
#endif

/* QP_mean = mean quantizer parameter for the previous picture */
/* bitcount = current total bit count                          */
/* To calculate bitcount in coder.c, do something like this :  */
/* int bitcount;                                               */
/* AddBitsPicture(bits);                                       */
/* bitcount = bits->total;                                     */

{
  int newQP;

  if (pict_type == PCT_INTER) {

    B_target = bit_rate / target_frame_rate;

    /* compute picture buffer descrepency as of the previous picture */

    if (B_prev != 0.0) {
      global_adj = (B_prev - B_target) / (2*B_target);
    }
    else {
      global_adj = (float)0.0;
    }
    newQP = (int)(QP_mean * (1 + global_adj) + (float)0.5);
    newQP = mmax(1,mmin(31,newQP));
  }
  else if (pict_type == PCT_INTRA) {
    fprintf(stderr,"No need to call InititializeQuantizer() for Intra picture\n");
    exit(-1);
  }
  else  {
    fprintf(stderr,"Error (InitializePictureRate): picture type unkown.\n");
    exit(-1);
  }
#ifdef LOGGING
  sprintf(t_LogMsg,"Global adj = %.2f\n", global_adj);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"meanQP = %.2f   newQP = %d\n", QP_mean, newQP);t_LogOut(t_LogMsg);
  sprintf(t_LogMsg,"Target no. of bits: %.2f\n", B_target);t_LogOut(t_LogMsg);
#endif

  return newQP;
}


/*********************************************************************
*   Name:          UpdateQuantizer
*
*
* Description: This function generates a new quantizer step size based
*                  on bits spent up until current macroblock and bits
*                  spent from the previous picture.  Note: this
*                  routine should be called at the beginning of each
*                  macroblock line as specified by TMN4. However, this
*                  can be done at any macroblock if so desired.
*
*  Input: current macroblock number (raster scan), mean quantizer
*  paramter for previous picture, bit rate, source frame rate,
*  hor. number of macroblocks, vertical number of macroblocks, total #
*  of bits used until now in the current picture.
*
*  Returns: Returns a new quantizer step size for the use of current
*  macroblock Note: adjustment to fit with 2-bit DQUANT should be done
*  in the calling program.
*
*  Side Effects:
*
*  Date: 1/5/95    Author: Anurag Bist
*
**********************************************************************/


int UpdateQuantizer(int mb, float QP_mean, int pict_type, float bit_rate,
                    int mb_width, int mb_height, int bitcount)

/* mb = macroblock index number */
/* QP_mean = mean quantizer parameter for the previous picture */
/* bitcount = total # of bits used until now in the current picture */

{
  int newQP=16;
  float local_adj, descrepency, projection;
#ifdef T_DEBUG
  fprintf(stderr,"start_updq\n");
#endif

  if (pict_type == PCT_INTRA) {
    newQP = 16;
  }
  else if (pict_type == PCT_INTER) {
    /* compute expected buffer fullness */

    projection = mb * (B_target / (mb_width*mb_height));

    /* measure descrepency between current fullness and projection */
    descrepency= (bitcount - projection);

    /* scale */

    local_adj = 12 * descrepency / bit_rate;

#ifdef LOGGING
    sprintf(t_LogMsg,"mb = %d\n",mb);t_LogOut(t_LogMsg);
    sprintf(t_LogMsg,"bit_count = %d projection = %.2f \n",bitcount,projection);t_LogOut(t_LogMsg);
    sprintf(t_LogMsg,"B_target = %.2f local_adj = %.2f \n",B_target,local_adj);t_LogOut(t_LogMsg);
#endif

    newQP = (int)(QP_mean * (1 + global_adj + local_adj) + 0.5);

  /* the update equation for newQP in TMN4 document section 3.7 */

  }
  else  {
    fprintf(stderr,"Error (UpdateQuantizer): picture type unkown.\n");
  }

#ifdef LOGGING
  sprintf(t_LogMsg,"mb = %d  newQP = %d \n",mb,newQP);t_LogOut(t_LogMsg);
#endif

  newQP = mmax(1,mmin(31,newQP));
#ifdef T_DEBUG
  fprintf(stderr,"endupdq\n");
#endif
  return newQP;
}

#endif
