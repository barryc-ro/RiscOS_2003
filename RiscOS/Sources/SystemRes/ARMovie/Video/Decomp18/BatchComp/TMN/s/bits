        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA	|Test$$Code|,CODE,READONLY

	;EXPORT	bitcount
	EXPORT	alignbits
	EXPORT	putbits
	EXPORT	t_init_putbits
	EXPORT	initbits
	EXPORT	stream
	EXPORT	stream_len

;	IMPORT	fwrite
outcnt
	DCD 0
stream
	DCD 0
stream_ptr
	DCD 0
stream_len
	DCD 0
	; This puts bits into the bitstream. Unfortunately murphys law is in
	; force here; it wants to be big endian.
	; So lets pretend its little endia while we build it up, and swap
	; endianness at the end
putbits
	; r0 = n
	; r1 = val
	LDR	r2,outcnt	; r2 = outcnt = No of bits still to fill
	LDR	r12,stream_ptr
	SUBS	r3,r2,r0	; r3 = outcnt-n = No of bits that will be
				;       left unfilled after inserting this token
				;    = How far to shift it to the left
	LDR	r0,[r12]	; r0 = Bitstream tail
	ORRGE	r0,r0,r1,LSL r3	; If we aren't going to overfill, then fill.
				; If we are going to overfill, then figure out;
	ADDLE	r3,r3,#32	; r3 = How far to shift it left to get start
				;      value for next word
	STR	r3,outcnt
	STRGT	r0,[r12]	; If we haven't finished a word then store it,
        Return  , LinkNotStacked, GT ; and exit
	; So we have filled a word...
	RSB	r2,r3,#32	; r2 = How far to shift it right
	ORRNE	r0,r0,r1,LSR r2
	MOV	r1,r1,LSL r3
	STR	r1,[r12,#4]!
	; Now we need to reverse the endianness of r0...
	MVN	r3,#&FF00		; r0 =  a   b   c   d
	STR	r12,stream_ptr
	EOR	r2,r0,r0,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r0,r2,r0,ROR#8		; r0 =  d   c   b   a

	STR	r0,[r12,#-4]
        Return  , LinkNotStacked
alignbits
        FunctionEntry

	LDR	r14,outcnt
	RSB	r14,r14,#32+7	; r14 = number of used bits+7
	MOVS	r14,r14,ASR#3	; r14 = number of used bytes
	LDR	r2,stream_ptr
	BEQ	abskip
	; Reverse the endianness of the last word of the stream
	MVN	r3,#&FF00		; r0 =  a   b   c   d
	LDR	r0,[r2]
	EOR	r1,r0,r0,ROR#16		; r1 = aXc bXd cXa dXb
	AND	r1,r3,r1,LSR#8		; r1 =  0  aXc  0  cXa
	EOR	r0,r1,r0,ROR#8		; r0 =  d   c   b   a
	STR	R0,[R2],r14
abskip

	LDR	r0,stream
	;STR	r0,stream_ptr		; stream_ptr = stream
	;MOV	r1,#1
	SUB	r2,r2,r0
	STR	r2,stream_len
	;LDR	r3,streamfile
	;BL	fwrite

	;LDR	r0,stream
	;MOV	r1,#0
	;STR	r1,[r0]

	;MOV	r1,#32
	LDR	r0,outcnt
	;STR	r1,outcnt

        Return
initbits
	LDR	r0,stream
	MOV	r1,#32
	STR	r1,outcnt	; outcnt = 32
	STR	r0,stream_ptr	; stream_ptr = stream
	MOV	r1,#0
	STR	r1,[r0]		; *stream = 0

        Return  , LinkNotStacked
t_init_putbits
	MOV	r0,#32
	STR	r0,outcnt	; outcnt = 32

        Return  , LinkNotStacked
;bitcount
	;LDR	r0,stream
	;LDR	r1,stream_ptr
	;LDR	r2,outcnt
	;SUB	r0,r1,r0	; r0 = bytecount
	;RSB	r2,r2,#32
	;ADD	r0,r2,r0,LSL#3	; r0 = 8*bytecount + (32-outcnt)
	;Return , LinkNotStacked

	END
