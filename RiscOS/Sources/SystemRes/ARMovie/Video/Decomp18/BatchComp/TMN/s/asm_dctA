        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA	|Test$$Code|,CODE,READONLY
	EXPORT asm_dct
	EXPORT reorder

	MACRO
	DCTransform $sub128

; if $sub128, then we need to subtract 128 from each of the 8 input value.
; As it happens, most of the input values are subtracted, which cancels
; out this 128. In fact (as you will see below), only one subtract needs
; to be done

; here begins the hairy stuff. Follow the C code closely...
; Short term aim is:
;	tmp4,5,6,7 in r3,5,1,7
;	r0,2,4,6 free
;	tmp0,1,2,3 in 10,11,12,14

	ADD	r10, r0, r7		; tmp0   r10
	SUB	r7, r0, r7		; tmp7   r7
	ADD	r11, r1, r6		; tmp1   r11
	SUB	r1, r1, r6		; tmp6   r1
	ADD	r12, r2, r5		; tmp2   r12
	SUB	r5, r2, r5		; tmp5   r5
	ADD	r14, r3, r4		; tmp3   r14
	SUB	r3, r3, r4		; tmp4   r3

;r10+256 (i.e. the value for r10 is 256 higher than it should be)
;r11+256
;r12+256
;r14+256

; OK, have now achieved that aim
; Next we get tmp12 & tmp13

	SUB	r0, r11, r12		; tmp12 = tmp1 - tmp2
	SUB	r2, r10, r14		; tmp13 = tmp0 - tmp3

        ADD     r4, r0, r2		; r4 = tmp12 + tmp13

; r0 (tmp12) no longer needed
; multiply r4 by 181 - FIX_0707106781 to get z1

        ADD     r0, r4, r4, ASL #1
        RSB     r0, r0, r0, ASL #4
        ADD     r0, r4, r0, ASL #2	; z1     r0

	MOV	r0, r0, ASR #8

	SUB	r6, r2, r0		; data[6] = tmp13 - z1
	ADD	r2, r2, r0		; data[2] = tmp13 + z1

; r0, r4 free
; now get tmp10 and tmp11 - we destroy tmp0 & tmp1 in the process

	ADD	r10, r10, r14		; tmp10 = tmp0 + tmp3
					; tmp10  r10
	ADD	r11, r11, r12		; tmp11 = tmp1 + tmp2
					; tmp11  r11
;r10+512
;r11+512

; & store in data

	ADD	r0, r10, r11		; data[0] = tmp10 + tmp11
	SUB	r4, r10, r11		; data[4] = tmp10 - tmp11

;r0+1024
	[ $sub128 = 1
	; we must subtract 1024 from the value
	SUB	r0, r0, #1024
	]

; now we have:
;	output in r0,2,4,6
;	tmp4,5,6,7 in r3,5,1,7 still
;	r10,11,12,14 free

; get tmp10,11,12

	ADD	r10, r3, r5		; tmp10 = tmp4 + tmp5
	ADD	r11, r5, r1		; tmp11 = tmp5 + tmp6
	ADD	r12, r1, r7		; tmp12 = tmp6 + tmp7

; now tmp4,5,6 are free: so we have r1,3,5,14 free

; multiply tmp11 by 181 - FIX_0707106781 to get z3

        ADD     r3, r11, r11, ASL #1
        RSB     r3, r3, r3, ASL #4
        ADD     r3, r11, r3, ASL #2	; z3     r3

	MOV	r3, r3, ASR #8

; tmp11 now free: so we have r1,5,11,14 free
; now get z11, z13

	ADD	r1, r7, r3		; z11 = tmp7 + z3
					; z11    r1
	SUB	r5, r7, r3		; z13 = tmp7 - z3
					; z13    r5

; z3,tmp7 now free: so we have r3,7,11,14 free
; now get z5

	SUB	r3, r10, r12		; r3 = tmp10 - tmp12

; multiply r3 by 98 - FIX_0_382683433 to get z5

        RSB     r3, r3, r3, ASL #3
        RSB     r3, r3, r3, ASL #3	; z5     r3
        MOV     r3, r3, ASL #1

        MOV     r3, r3, ASR #8

; multiply tmp10 by 139 - FIX_0_541196100 & add z5 to get z2
; tmp10 no longer needed

        ADD     r11, r10, r10, ASL #2
        RSB     r11, r11, r11, ASL #3
        RSB     r10, r10, r11, ASL #2
        MOV     r10, r10, ASR #8
	ADD	r10, r10, r3		; z2     r10

; we have r7,11,14 free

; multiply tmp12 by 334 - FIX_1_306562965 & add z5 to get z4
; tmp12 no longer needed
        ADD     r11, r12, r12, ASL #1
        RSB     r11, r11, r11, ASL #3
        RSB     r12, r12, r11, ASL #3
        MOV     r12, r12, ASL #1
        MOV     r12, r12, ASR #8
        ADD     r12, r12, r3		; z4     r12


; still have r7,11,14 free
; now we have:
;	output in r0,2,4,6
;	z4,2,5,11,13 in r12,10,3,1,5
;	r7,11,14 free

	SUB	r7, r1, r12		; data[7] = z11 - z4
	ADD	r1, r1, r12		; data[1] = z11 + z4
        SUB	r3, r5, r10		; data[3] = z13 - z2
	ADD	r5, r5, r10		; data[5] = z13 + z2

; now have output in r0-r7 as required

; 50 instructions

	MEND
; ------------------------------------------------------------------------
; The main routine
; ------------------------------------------------------------------------
; r0=data ptr

asm_dct                             ; extern void asm_dct(decompress_info_ptr cinfo, DCTBLOCK data, int count);
        FunctionEntry "r4-r11"      ; save state

        MOV     r8,#8                     ; loop counter for rows
        MOV     r9,r0                     ; data pointer

; First do the rows
dctrow_loop
        LDMIA   r9 ,{r0-r7}                ; get this row
        DCTransform 0
        STMIA   r9!,{r0-r7}                ; put this row
        SUBS    r8,r8,#1
        BNE     dctrow_loop
dctrow_done

; now to do the columns, very similar but the loads/stores are spaced
; out more.
;        LDR     r9,[sp]                   ; reload data pointer
        SUB     r9,r9,#8*8*4              ; reset data pointer
	MOV	r8,#8
dctcol_loop
        ; load the data values, spaced 8 words apart.
        LDR     r0,[r9,#8*4*0]
        LDR     r1,[r9,#8*4*1]
        LDR     r2,[r9,#8*4*2]
        LDR     r3,[r9,#8*4*3]
        LDR     r4,[r9,#8*4*4]
        LDR     r5,[r9,#8*4*5]
        LDR     r6,[r9,#8*4*6]
        LDR     r7,[r9,#8*4*7]

        DCTransform 0

	ADD	r0,r0,#4
	ADD	r1,r1,#4
	ADD	r2,r2,#4
	ADD	r3,r3,#4
	ADD	r4,r4,#4
	ADD	r5,r5,#4
	ADD	r6,r6,#4
	ADD	r7,r7,#4

        MOV	r0,r0,ASR#3
        MOV	r1,r1,ASR#3
        MOV	r2,r2,ASR#3
        MOV	r3,r3,ASR#3
        MOV	r4,r4,ASR#3
        MOV	r5,r5,ASR#3
        MOV	r6,r6,ASR#3
        MOV	r7,r7,ASR#3

        STR     r1,[r9,#8*4*1]
        STR     r2,[r9,#8*4*2]
        STR     r3,[r9,#8*4*3]
        STR     r4,[r9,#8*4*4]
        STR     r5,[r9,#8*4*5]
        STR     r6,[r9,#8*4*6]
        STR     r7,[r9,#8*4*7]
        STR     r0,[r9],#4

	SUBS	r8,r8,#1
        BNE     dctcol_loop               ; loop

        Return  "r4-r11"
rtab
	DCB	0
	DCB	1
	DCB	5
	DCB	6
	DCB	14
	DCB	15
	DCB	27
	DCB	28

	DCB	2
	DCB	4
	DCB	7
	DCB	13
	DCB	16
	DCB	26
	DCB	29
	DCB	42

	DCB	3
	DCB	8
	DCB	12
	DCB	17
	DCB	25
	DCB	30
	DCB	41
	DCB	43

	DCB	9
	DCB	11
	DCB	18
	DCB	24
	DCB	31
	DCB	40
	DCB	44
	DCB	53

	DCB	10
	DCB	19
	DCB	23
	DCB	32
	DCB	39
	DCB	45
	DCB	52
	DCB	54

	DCB	20
	DCB	22
	DCB	33
	DCB	38
	DCB	46
	DCB	51
	DCB	55
	DCB	60

	DCB	21
	DCB	34
	DCB	37
	DCB	47
	DCB	50
	DCB	56
	DCB	59
	DCB	61

	DCB	35
	DCB	36
	DCB	48
	DCB	49
	DCB	57
	DCB	58
	DCB	62
	DCB	63
reorder
	ADR	r2,rtab
relp
	LDRB	r12,[r2],#1
	LDR	r3,[r1],#4
	STR	r3,[r0,r12,LSL#2]
	CMP	r12,#63
	BNE	relp

        Return  , LinkNotStacked

        END
