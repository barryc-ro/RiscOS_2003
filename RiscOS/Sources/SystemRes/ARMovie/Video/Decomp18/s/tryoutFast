;**************************************************************************
;
;  File:        s.tryoutFast
;
;  Description: Fast YUV->RGB image converter using additive lookup tbls
;
;  Version:     0.0 22 Sep 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; Fast YUV -> RGB conversion using Replay's additive colour lookup table
; mechanism. Takes an image delivered by the h263 codec (which has one
; U and one V value for each 2*2 square of Y values) and converts it into
; Replay's 32 bit word per pixel RGB format

	EXPORT	doframe				; the function that does this

; predefined constants from the including file
;   xpix - location of image x size variable
;   ypix - location of image y size variable

	GBLA	fsv
 [ dtype="FastDec24"
fsv	SETA	255				; pixel mask for FastDec24
fsv_sh	*	8
 ]
 [ dtype="FastDec21"
fsv	SETA	254				; pixel mask for FastDec21
fsv_sh	*	7
 ]

errormask					; error checking constant
	DCD	(1:SHL:30):OR:(1:SHL:18):OR:(1:SHL:8)

;***************************************************************************
; macro additiveTableToRGB
;     Takes a value as looked up from an additive colour lookup table
;     and converts it to a VIDC RGB value.
;     IN:  $reg         - reg containing a.l.t. value
;          $tmp1, $tmp2 - two temporary registers
;     OUT: $reg         - contains RGB value
;          $tmp1, $tmp2 - corrupted

	MACRO
	additiveTableToRGB $reg, $tmp1, $tmp2

	and	$tmp1, $reg, #fsv		; mask red value into tmp1
	and	$tmp2, $reg, #fsv:SHL:22	; mask green value into tmp2
	orr	$tmp1, $tmp1, $tmp2, LSR #22-8	; coalesce, tmp1 = RG
	and	$reg, $reg, #fsv:SHL:10		; mask blue value into reg
	orr	$reg, $tmp1, $reg, LSL #16-10	; coalesce back into reg, RGB

	MEND

;***************************************************************************
; doframe
;     The format conversion function: takes YUV source from the h263
;     decompressor and converts it to RGB suitable for Replay
;     Called from C code, so use APCS
;     IN:  r0 - source image
;          r1 - destination buffer
;          r2 - 0 (previous pic is ignored, stored in internal buffer)
;          r3 - pixel dither lookup table
;
;     OUT: r0 - do I care ? .. it doesn't seem to be used by the C code

ickle
	DCD	0
bickle
	DCD	0
doframe
	ldr	r2, xpix
        FunctionEntry "r4-r11"                  ; APCS

	ldr	r4, ypix			; y loop counter
	ldmia	r0, {r10,r11,r14}		; store the src image struct
	ldr	r0, errormask			; load error mask value

	; since there is one U&V value for a 2x2 square of Y values
	; decoding is implemented as a loop over y rows step 2

	; the source image pointer is in fact a pointer to a structure
	; describing the three separate Y, U, & V buffers
	; therefore, load the buffer pointers into r10, r11 and r14
	;   r10 - Y buffer pointer, 1 byte per pixel
	;   r11 - U buffer pointer, 1 byte per 4 pixel square
	;   r14 - V buffer pointer, 1 byte per 4 pixel square

	; we build two rows at once: to do this we need a second output
	; pointer, r9 and a second Y input pointer, r8
	add	r9, r1, r2, LSL #2
	add	r8, r10, r2
	add	r8,r8,#64

loop_y
	STR	r4,bickle
	; will use r2 as a counter of horizontal pixels, so push it to stack
	; and save its contents (y counter) first

loop_x	; loop over for every pixel in these 2 horizontal lines

	; process U and V values for the four pixel square
	ldrb	r4, [r11], #1			; read U
	ldrb	r7, [r14], #1			; read V
	eor	r4, r4, #&80+(1024>>2)		; swap -127..128 to 0..255
	eor	r7, r7, #&80+(2048>>2)		;   for U and V values
	;add	r6, r3, #1024			; compute base of U table
	ldr	r4, [r3, r4, LSL #2]		; index U into table
	;add	r6, r6, #1024			; compute base of V table
	ldr	r7, [r3, r7, LSL #2]		; index V into table
	; Y1 and Y2 values (line 1)
	ldrb	r6, [r10], #1
	add	r4, r4, r7			; sum U and V vals
	ldrb	r7, [r10], #1

	; sacrifice U and V pointers to the great god register spillage


	ldr	r6, [r3, r6, LSL #2]
	ldr	r7, [r3, r7, LSL #2]

	add	r6, r6, r4
	add	r7, r7, r4

	; test for line 1 errors
	tst	r6, r0
	tsteq	r7, r0
	bne	error_r6orr7_1			; out of line error handler
ret_r6orr7_1

	; pixel convert alt values to RGB and store in output buffer
	additiveTableToRGB r6, r5, r12
	additiveTableToRGB r7, r5, r12
	stmia	r1!, {r6, r7}

	; Y3 and Y4 values (line 2)
	ldrb	r6, [r8], #1
	ldrb	r7, [r8], #1

	ldr	r6, [r3, r6, LSL #2]		; index Y3 into table
	ldr	r7, [r3, r7, LSL #2]		; index Y4 into table

	add	r6, r6, r4			; sum Y3 and UV vals
	add	r7, r7, r4			; sum Y4 and UV vals

	; test for line 2 errors
	tst	r6, r0
	tsteq	r7, r0
	bne	error_r6orr7_2			; out of line error handler
ret_r6orr7_2

	; pixel convert alt values to RGB and store in output buffer
	additiveTableToRGB r6, r4, r12
	additiveTableToRGB r7, r4, r12
	;ldmfd	r13!, {r12}
	stmia	r9!, {r6, r7}

	; restore the U and V pointers

	subs	r2, r2, #2			; loop back to loop_x
	bne	loop_x

	; make r1&r9, r8&r10 skip two lines

	LDR	r4,bickle
	ldr	r2, xpix
	subs	r4, r4, #2			; decrement y counter, loop
	mov	r1, r9				; new line 1 = old line 2
	add	r9, r1, r2, LSL #2		; new line 2
	;mov	r10, r8
	add	r10, r8,#64
	add	r8, r10, r2
	ADD	r8,r8,#64
	add	r11, r11, #32
	add	r14, r14, #32
	; end x loop
	bne	loop_y
	; end y loop

        Return  "r4-r11"                        ; APCS return from doframe


;***************************************************************************

error_r6orr7_1					; out of line error handler

	;PHBG simultaneous clamping
	; IN:
	;   r0 - 1<<8 OR 1<<18 OR 1<<30
	;   r6  - pixel 1 value in additive colour lookup table format
	;   r7  - pixel 2 value in additive colour lookup table format
	; OUT:
	;   r6 and r7 fixed
	;   r12 trashed, all others preserved

	; pixel 1 (r6)
	eor	r6,r6,#1<<31		;Put bit 31 right (it is always wrong!)
	and	r12,r0,r6		;Make error flags
	sub	r12,r12,r12,LSR #fsv_sh	;Make error masks
	orr	r6,r6,r12		;Set incorrect values to 254/255
	bic	r12,r0,r6,LSR #1	;Make underflow flags
	add	r6,r6,r12,LSR #fsv_sh	;Flip 254/255 to 0 where underflowing

	; pixel 2 (r7)
	eor	r7,r7,#1<<31		;Put bit 31 right (it is always wrong!)
	and	r12,r0,r7		;Make error flags
	sub	r12,r12,r12,LSR #fsv_sh	;Make error masks
	orr	r7,r7,r12		;Set incorrect values to 254/255
	bic	r12,r0,r7,LSR #1	;Make underflow flags
	add	r7,r7,r12,LSR #fsv_sh	;Flip 254/255 to 0 where underflowing

	b	ret_r6orr7_1


;***************************************************************************

error_r6orr7_2					; out of line error handler

	; IN:
	;   r0 - 1<<8 OR 1<<18 OR 1<<30
	;   r6  - pixel 1 value in additive colour lookup table format
	;   r7  - pixel 2 value in additive colour lookup table format
	; OUT:
	;   r6 and r7 fixed
	;   all other registers preserved

	; pixel 1 (r6)
	eor	r6,r6,#1<<31		;Put bit 31 right (it is always wrong!)
	and	r12,r0,r6		;Make error flags
	sub	r12,r12,r12,LSR #fsv_sh	;Make error masks
	orr	r6,r6,r12		;Set incorrect values to 254/255
	bic	r12,r0,r6,LSR #1	;Make underflow flags
	add	r6,r6,r12,LSR #fsv_sh	;Flip 254/255 to 0 where underflowing

	; pixel 2 (r7)
	eor	r7,r7,#1<<31		;Put bit 31 right (it is always wrong!)
	and	r12,r0,r7		;Make error flags
	sub	r12,r12,r12,LSR #fsv_sh	;Make error masks
	orr	r7,r7,r12		;Set incorrect values to 254/255
	bic	r12,r0,r7,LSR #1	;Make underflow flags
	add	r7,r7,r12,LSR #fsv_sh	;Flip 254/255 to 0 where underflowing

	b	ret_r6orr7_2


;**************************************************************************
; function entry point
;**************************************************************************

; this is a blank patch table since no colour patching is used

PatchTable
	DCD	-1


;**************************************************************************

	END
