        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA	|test$$code|,CODE,READONLY

	EXPORT arec
	EXPORT arecc

	EXPORT arech
	EXPORT arechc

	EXPORT arecv
	EXPORT arecvc

	EXPORT arec4
	EXPORT arec4c

	EXPORT areco
	EXPORT arecho
	EXPORT arecvo
	EXPORT arec4o






;rec (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
;		    R0		      R1      R2      R3      [sp,#40]
; 5 args

arec
        FunctionEntry "r4-r10"

	AND r9,r0,#3
	MOV r9,r9,LSL #3
	RSB r10,r9,#32

	LDR r12,[sp,#32]

loop	LDMIA r0,{r4,r5,r6,r7,r8}

	TEQ r9,#0
	MOVNE r4,r4,LSR r9
	ORRNE r4,r4,r5,LSL r10
	MOVNE r5,r5,LSR r9
	ORRNE r5,r5,r6,LSL r10
	MOVNE r6,r6,LSR r9
	ORRNE r6,r6,r7,LSL r10
	MOVNE r7,r7,LSR r9
	ORRNE r7,r7,r8,LSL r10

	STMIA r1,{r4,r5,r6,r7}

	ADD r0,r0,r3
	ADD r1,r1,r2

	SUBS  r12,r12,#1
	BNE  loop

        Return "r4-r10"

;recc (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arecc
        FunctionEntry "r4-r6,r9-r10"

	AND r9,r0,#3
	MOV r9,r9,LSL #3
	RSB r10,r9,#32

	LDR r12,[sp,#24]

reccloop	LDMIA r0,{r4,r5,r6}

	TEQ r9,#0
	MOVNE r4,r4,LSR r9
	ORRNE r4,r4,r5,LSL r10
	MOVNE r5,r5,LSR r9
	ORRNE r5,r5,r6,LSL r10

	STMIA r1,{r4,r5}

	ADD r0,r0,r3
	ADD r1,r1,r2

	SUBS  r12,r12,#1
	BNE  reccloop

        Return "r4-r6,r9-r10"

;rech (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arech
;rechc (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arechc

;recv (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arecv
;recvc (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arecvc

;rec4 (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arec4
;rec4c (unsigned char *s, unsigned char *d, int lx, int lx2, int h));
arec4c


;these have 10 args :-(

;reco (unsigned char *s, int *d, int lx, int lx2, int addflag,int c, int xa, int xb, int ya, int yb));
;		R0	   R1	   R2      R3
; [sp,#40]    	addflag
; [sp,#44]	c
; [sp,#48]	xa
; [sp,#52]	xb
; [sp,#56]	ya
; [sp,#60]	yb
; [sp,#64]      omp
;using:
;r0123456789
areco
        FunctionEntry "r4-r12"

	LDR R11,[sp,#44] ;=c never needed again!
	LDR R14,[sp,#64] ;=OMP
	ADD R14,R14,R11,LSL #6 ;om = &omp[c][ya]
	LDR R8,[sp,#56] ;= ya - used again
	ADD R14,R14,R8,LSL #3

	LDR R12,[sp,#52] ;=XB
	LDR R9,[sp,#60]
;if !addflag

	LDR R10,[sp,#40]
	TEQ R10,#0
	BNE  recoaddloop


recoplaceloop

	LDR R11,[sp,#48] ;=XA
recoinloop

	ADD r10,r1,r11 ,LSL #2

	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MUL r6,r4,r5
	ADD r11,r11,#1
	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MUL r7,r4,r5
	STMIA r10!,{r6,r7}
	ADD r11,r11,#1
	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MUL r6,r4,r5
	ADD r11,r11,#1
	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MUL r7,r4,r5
	STMIA r10,{r6,r7}
	ADD R11,R11,#1

	CMP R11,R12
	BNE recoinloop

	ADD r14,r14,#8

	ADD r0,r0,r3
	ADD r1,r1,r2,LSL #2

	ADD R8,R8,#1

	CMP R8,R9
	BNE recoplaceloop

        Return "r4-r11"


;else
recoaddloop
	LDR R11,[sp,#48] ;=XA
recoaddinloop
	ADD r10,r1,r11 ,LSL #2

	LDMIA r10,{r6,r7}

	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MLA r6,r4,r5,r6
	ADD r11,r11,#1
	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MLA r7,r4,r5,r7
	STMIA r10!,{r6,r7}
	ADD r11,r11,#1

	LDMIA r10,{r6,r7}

	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MLA r6,r4,r5,r6
	ADD r11,r11,#1
	LDRB r4,[r0,r11]
	LDRB r5,[r14,r11]
	MLA r7,r4,r5,r7
	STMIA r10,{r6,r7}
	ADD R11,R11,#1

	CMP R11,R12
	BNE recoaddinloop

	ADD r14,r14,#8

	ADD r0,r0,r3
	ADD r1,r1,r2,LSL #2

	ADD R8,R8,#1

	CMP R8,R9
	BNE recoaddloop

        Return "r4-r12"

;end



;recho (unsigned char *s, int *d, int lx, int lx2, int addflag,int c, int xa, int xb, int ya, int yb));
arecho
;recvo (unsigned char *s, int *d, int lx, int lx2, int addflag,int c, int xa, int xb, int ya, int yb));
arecvo
;rec4o (unsigned char *s, int *d, int lx, int lx2, int addflag,int c, int xa, int xb, int ya, int yb));
arec4o


	END
