        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA |test$$code|,CODE,READONLY

	EXPORT agetbits1
	EXPORT aflushbits
	EXPORT agetbits
	EXPORT ashowbits
	EXPORT ainitbits
	EXPORT atbthu
	EXPORT atbsource
	EXPORT atasource
	EXPORT asource
	EXPORT abitsthru

	EXPORT	decoder_reset
	EXPORT	decode_a_symbol

	EXPORT	getTMNMV ; nasty function returns r1 without using __value_in_regs
	EXPORT	getMCBPC
	EXPORT	getMCBPCintra
	EXPORT	getCBPY
	EXPORT	getMODB
	EXPORT	startcode
	EXPORT	bits_in_packet
	;EXPORT	set_bitpacket_end
	EXPORT	bits_left_in_packet
atbthu
	LDR	R0,abitsthru
        Return  , LinkNotStacked

atbsource
	LDR	R0,asource
        Return  , LinkNotStacked

atasource
	ADR	R0,asource
        Return  , LinkNotStacked

;ainitbits			; R0 = source
;				; R1 = sbit
;	BIC	R2,R0,#3
;	STR	R2,asource
;	SUB	R2,R0,R2	; R2 = how many bytes we backtracked
;	ADD	R2,R1,R2,LSL#3	; R2 = how many bits we backtracked + start bit
;	STR	R2,abitsthru
;       Return  , LinkNotStacked
ainitbits			; R0 = source
				; R1 = sbit
				; R2 = byte len
				; R3 = ebit
	ADD	r2,r0,r2	; r2 = end address
	BIC	R12,R0,#3
	STR	R12,asource
	SUB	R12,R0,R12	; R12 = how many bytes we backtracked
	ADD	R12,R1,R12,LSL#3; R12 = how many bit we backtracked
	STR	R12,abitsthru

	RSB	r3,r3,#8	; r3 = number of bits to count in the last byte
	SUB	r2,r2,#1	; backtrack by 1 byte
	ADD	r2,r2,r3,LSR#3	; unless we are counting all of the bits
	AND	r3,r3,#7
	BIC	r12,r2,#3
	STR	r12,packet_end
	SUB	r12,r2,r12	; R12 = how many bytes we backtracked
	ADD	r12,r3,r12,LSL#3; R12 = how many bits we backtracked + 8-ebit
	STR	r12,packet_end_bitsthru
        Return  , LinkNotStacked

agetbits1
	LDR	R2,abitsthru     ;no of bits of source that are valid
	LDR	R1,asource
	AND	R3,R2,#7
	LDRB	R0,[R1,R2,LSR#3]
	RSB	R3,R3,#7	;calculate shift
	MOV	R0,R0,LSR R3
	AND	R0,R0,#1

	ADD	R2,R2,#1
	TEQ	R2,#32
	MOVEQ	R2,#0
	ADDEQ	R1,R1,#4
	STREQ	R1,asource
	STR	R2,abitsthru
        Return  , LinkNotStacked
agetbits
	LDR	R1,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R1,{R1,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r1,r1,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r1,r2,r1,ROR#8		; r1 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r1,r1,LSL r2
	ORR	r12,r1,r12,LSR r3

	ADD     R2,R2,r0                   ;calc new bitsthru
	BICS	R3,R2,#31
	LDRNE	R1,asource
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
	STRNE	R1,asource

	STR	r2,abitsthru
	RSB     r1,r0,#32               ;num bits req -> shift
	MOV	r0,r12,LSR R1	        ;calc output

        Return  , LinkNotStacked

aflushbits
	LDR	R2,abitsthru
	LDR	R1,asource

	ADD     R2,R2,r0                   ;calc new bitsthru
	BICS	R3,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
	STRNE	R1,asource
	ANDNE	R2,R2,#31
	STR	r2,abitsthru

        Return  , LinkNotStacked

ashowbits
	LDR	R1,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R1,{R1,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r1,r1,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r1,r2,r1,ROR#8		; r1 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r1,r1,LSL r2
	ORR	r2,r1,r12,LSR r3

	RSB     r1,r0,#32               ;num bits req -> shift
	MOV	r0,r2,LSR R1	        ;calc output
        Return  , LinkNotStacked
low
	DCD 0
high
	DCD 0
code_value
	DCD 0
zerorun
	DCD 0
asource
	DCD 0
abitsthru
	DCD 0
packet_end
	DCD 0
packet_end_bitsthru
	DCD 0
	[ 0 = 1
bit_out_psc_layer
        FunctionEntry "r9-r11"

	ADR	r9,zerorun
	LDMIA	r9,{r9-r11}
	BL	bopl
	ADR	r1,zerorun
	STMIA	r1,{r9-r11}

        Return  "r9-r11"
	]
bopl
	; ASSUMES:
	;	r9 = zerorun
	;	r10= asource
	;	r11= abitsthru
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R10,{R1,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r1,r1,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r1,r2,r1,ROR#8		; r1 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R11,#32		; shift word
	MOV	r1,r1,LSL r11
	ORR	r0,r1,r12,LSR r3

	MOV	r0,r0,LSR #32-17        ; calc output
	CMP	r0,#1
	BEQ	bopl_garbage

	; Now r0 = next 17 bits.
	CMP	r9,#14
	; We will assume we are only required to work with a non-broken
	; stream
	MOVGE	r0,r0,LSL#1
	MOVGE	r9,#0
	;ADDGE   R11,R11,#1
	ADC     R11,R11,#1
	BICS	R3,R11,#31
	ANDNE	R11,R11,#31
	ADDNE	R10,R10,R3,LSR #3	;calc new source pointer
bopl_garbage
	MOV	r0,r0,LSR#16	; Dump the bottom 16 bits, and keep the top one.
	ANDS	r0,r0,#1
	MOVNE	r9,#0
	ADDEQ	r9,r9,#1

        MOV     PC,R14  ; internal routine only, flag preservation not required

decoder_reset
        FunctionEntry "r7-r11"

	MOV	r9,#0	; zerorun = 0
	MOV	r8,#0	; codevalue = 0
	LDR	r10,asource
	LDR	r11,abitsthru
	MOV	r7,#&FF
	STR	r9,low		; low = 0
	ORR	r7,r7,#&FF00	; high = top
	STR	r7,high
	MOV	r7,#16
drlp
	BL	bopl
	ORR	r8,r0,r8,LSL#1
	SUBS	r7,r7,#1
	BNE	drlp
	ADR	r7,code_value
	STMIA	r7,{r8-r11}

        Return  "r7-r11"


	MACRO
	Dstep $rn, $rd, $ra, $s

	SUBS	$rn,$rn,$rd,LSL#$s
	ADDLT	$rn,$rn,$rd,LSL#$s
	ADDGE	$ra,$ra,#1<<$s

	MEND

decode_a_symbol
	; r0 = int cumul_freq[]
        FunctionEntry "r5-r11"

	ADR	r7,low
	LDMIA	r7,{r6-r11}	; r6 = low
				; r7 = high
				; r8 = code_value
				; r9 = zerorun
				; r10= asource
				; r11= abitsthru
	SUB	r6,r6,#1	; r6 = low -= 1
	SUB	r7,r7,r6	; r7 = length = high - low
	SUB	r3,r8,r6	; r3 = code_value - low
	RSB	r3,r3,r3,LSL#14	; r3 = (code_value - low)*16383
	SUB	r3,r3,#1
	MOV	r2,#0
	; Now we want to divide r3 by r7. We know that the result of this
	; calculation will be in the range 0 to 16383.
	Dstep	r3,r7,r2,13
	Dstep	r3,r7,r2,12
	Dstep	r3,r7,r2,11
	Dstep	r3,r7,r2,10
	Dstep	r3,r7,r2,9
	Dstep	r3,r7,r2,8
	Dstep	r3,r7,r2,7
	Dstep	r3,r7,r2,6
	Dstep	r3,r7,r2,5
	Dstep	r3,r7,r2,4
	Dstep	r3,r7,r2,3
	Dstep	r3,r7,r2,2
	Dstep	r3,r7,r2,1
	Dstep	r3,r7,r2,0
        ; Verified correct to here
	; r2 = (-1 + (code_value - low)*16383) / length
	; r3 = (-1 + (code_value - low)*16383) % length
	; r1 = max
	MOV	r5,#0
	SUB	r1,r1,#1
das_lp
	ADD	r14,r5,r1,LSR#1
	LDR	r3,[r0,r14,LSL#2]
	; Stall
	CMP	r3,r2
	ADDGT	r5,r5,r1,LSR#1
	ADDGT	r1,r1,#1
	MOV	r1,r1,LSR#1
	CMP	r1,#1
	BGT	das_lp

	LDR	r2,[r0,r5,LSL#2]!
	LDR	r3,[r0,#4]
	MUL	r2,r7,r2	; r2 = cumul_freq[sacindex-1] * length
	CMP	r5,#0
	MUL	r3,r7,r3	; r3 = cumul_freq[sacindex] * length

	; C set
	MOV	r1,r2,LSR#14
	ADD	r1,r1,r2,LSR#28
	ADD	r2,r2,r1
	SUB	r1,r2,r1,LSL#14
	ADC	r2,r2,r1,LSR#14
	;ADD	r2,r2,#1
	ADD	r7,r6,r2,LSR#14	; r7=low+(cumul_freq[sacindex-1]*length)/16383
				; r7=high
	MOV	r1,r3,LSR#14
	ADD	r1,r1,r3,LSR#28
	ADD	r3,r3,r1
	SUB	r1,r3,r1,LSL#14
	ADC	r3,r3,r1,LSR#14
	;ADD	r3,r3,#1
	ADC	r6,r6,r3,LSR#14	; r6=low+1+(cumul_freq[sacindex]*length)/16383
				; r6=low
	B	das_lp_enter
das_case0
	MOV	r0,#32768
das_case1
	MOVLT	r0,#16384
	SUB	r8,r8,r0
	SUB	r7,r7,r0
	SUB	r6,r6,r0
das_lp2
	MOV	r6,r6,LSL#1
	MOV	r7,r7,LSL#1
	ADD	r7,r7,#1
	BL	bopl
	ADD	r8,r0,r8,LSL#1
das_lp_enter
	CMP	r7,#32768
	BLT	das_lp2
	CMP	r6,#32768
	BGE	das_case0
	CMP	r6,#16384
	BLT	das_end
	CMP	r7,#49152
	BLT	das_case1
das_end
	ADR	r0,low
	STMIA	r0,{r6-r11}	; r6 = low
				; r7 = high
				; r8 = code_value
				; r9 = zerorun
				; r10= asource
				; r11= abitsthru
	MOV	r0,r5

        Return  "r5-r11"
	[ 0 = 1
safeprint
        FunctionEntry

	MOV	r1,r0
	ADR	r2,chars
	LDRB	r0,[r2,r1,LSR#28]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<28
	LDRB	r0,[r2,r1,LSR#24]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<24
	LDRB	r0,[r2,r1,LSR#20]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<20
	LDRB	r0,[r2,r1,LSR#16]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<16
	LDRB	r0,[r2,r1,LSR#12]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<12
	LDRB	r0,[r2,r1,LSR#8]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<8
	LDRB	r0,[r2,r1,LSR#4]
	SWI	0	;"OS_Write0"
	BIC	r1,r1,#15<<4
	LDRB	r0,[r2,r1]
	SWI	0	;"OS_Write0"

	SWI	3;	"OS_NewLine"

        Return
chars
	DCB	48	; 0
	DCB	49	; 1
	DCB	50	; 2
	DCB	51	; 3
	DCB	52	; 4
	DCB	53	; 5
	DCB	54	; 6
	DCB	55	; 7
	DCB	56	; 8
	DCB	57	; 9
	DCB	65	; A
	DCB	66	; B
	DCB	67	; C
	DCB	68	; D
	DCB	69	; E
	DCB	70	; F
	]
TMNMVtab0
	DCB	3, 4+1
	DCB	61, 4+1
	DCB	2, 3+1
	DCB	2, 3+1
	DCB	62, 3+1
	DCB	62, 3+1
	DCB	1, 2+1
	DCB	1, 2+1
	DCB	1, 2+1
	DCB	1, 2+1
	DCB	63, 2+1
	DCB	63, 2+1
	DCB	63, 2+1
	DCB	63, 2+1
TMNMVtab1
	DCB	12,10+1
	DCB	52,10+1
	DCB	11,10+1
	DCB	53,10+1
	DCB	10,9+1
	DCB	10,9+1
	DCB	54,9+1
	DCB	54,9+1
	DCB	9,9+1
	DCB	9,9+1
	DCB	55,9+1
	DCB	55,9+1
	DCB	8,9+1
	DCB	8,9+1
	DCB	56,9+1
	DCB	56,9+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	7,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	57,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	6,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	58,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	5,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	59,7+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	4,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
	DCB	60,6+1
TMNMVtab2
	DCB	32,12+1
	DCB	31,12+1
	DCB	33,12+1
	DCB	30,11+1
	DCB	30,11+1
	DCB	34,11+1

	DCB	34,11+1
	DCB	29,11+1
	DCB	29,11+1
	DCB	35,11+1
	DCB	35,11+1
	DCB	28,11+1

	DCB	28,11+1
	DCB	36,11+1
	DCB	36,11+1
	DCB	27,11+1
	DCB	27,11+1
	DCB	37,11+1

	DCB	37,11+1
	DCB	26,11+1
	DCB	26,11+1
	DCB	38,11+1
	DCB	38,11+1
	DCB	25,11+1

	DCB	25,11+1
	DCB	39,11+1
	DCB	39,11+1
	DCB	24,10+1
	DCB	24,10+1
	DCB	24,10+1

	DCB	24,10+1
	DCB	40,10+1
	DCB	40,10+1
	DCB	40,10+1
	DCB	40,10+1
	DCB	23,10+1

	DCB	23,10+1
	DCB	23,10+1
	DCB	23,10+1
	DCB	41,10+1
	DCB	41,10+1
	DCB	41,10+1

	DCB	41,10+1
	DCB	22,10+1
	DCB	22,10+1
	DCB	22,10+1
	DCB	22,10+1
	DCB	42,10+1

	DCB	42,10+1
	DCB	42,10+1
	DCB	42,10+1
	DCB	21,10+1
	DCB	21,10+1
	DCB	21,10+1

	DCB	21,10+1
	DCB	43,10+1
	DCB	43,10+1
	DCB	43,10+1
	DCB	43,10+1
	DCB	20,10+1

	DCB	20,10+1
	DCB	20,10+1
	DCB	20,10+1
	DCB	44,10+1
	DCB	44,10+1
	DCB	44,10+1

	DCB	44,10+1
	DCB	19,10+1
	DCB	19,10+1
	DCB	19,10+1
	DCB	19,10+1
	DCB	45,10+1

	DCB	45,10+1
	DCB	45,10+1
	DCB	45,10+1
	DCB	18,10+1
	DCB	18,10+1
	DCB	18,10+1

	DCB	18,10+1
	DCB	46,10+1
	DCB	46,10+1
	DCB	46,10+1
	DCB	46,10+1
	DCB	17,10+1

	DCB	17,10+1
	DCB	17,10+1
	DCB	17,10+1
	DCB	47,10+1
	DCB	47,10+1
	DCB	47,10+1

	DCB	47,10+1
	DCB	16,10+1
	DCB	16,10+1
	DCB	16,10+1
	DCB	16,10+1
	DCB	48,10+1

	DCB	48,10+1
	DCB	48,10+1
	DCB	48,10+1
	DCB	15,10+1
	DCB	15,10+1
	DCB	15,10+1

	DCB	15,10+1
	DCB	49,10+1
	DCB	49,10+1
	DCB	49,10+1
	DCB	49,10+1
	DCB	14,10+1

	DCB	14,10+1
	DCB	14,10+1
	DCB	14,10+1
	DCB	50,10+1
	DCB	50,10+1
	DCB	50,10+1

	DCB	50,10+1
	DCB	13,10+1
	DCB	13,10+1
	DCB	13,10+1
	DCB	13,10+1
	DCB	51,10+1

	DCB	51,10+1
	DCB	51,10+1
	DCB	51,10+1
	ALIGN
getTMNMV
        FunctionEntry

	LDR	R14,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R14,{R0,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r0,r0,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r0,r2,r0,ROR#8		; r0 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r0,r0,LSL r2
	ORR	r1,r0,r12,LSR r3
	MOV	r12,r1,LSR#32-13

	; r12 = showbits(13)
	TST	r12,#1<<12	; if (getbits1())
	MOVNE	r0,#0		;   return 0;
	MOVNE	r12,#1<<8	;
	BNE	getTMNMV_end	;
	; So the top bit is 0...
	CMP	r12,#512
	MOVGE	r12,r12,ASR#8
	SUBGE	r12,r12,#2
	ADRGE	r0,TMNMVtab0
	BGE	getTMNMV_got_code
	CMP	r12,#128
	MOVGE	r12,r12,ASR#2
	SUBGE	r12,r12,#32
	ADRGE	r0,TMNMVtab1
	SUBLT	r12,r12,#5
	ADRLT	r0,TMNMVtab2
getTMNMV_got_code
	LDR	r0,[r0,r12,LSL#1]	; r0 = Val | Len<<8
	AND	r12,r0,#&FF00
	AND	r0,r0,#&FF
getTMNMV_end
	; When we get here, we need r0 = return value, r12=num bits to flush<<8
	ADD     R2,R2,r12,ASR#8                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R14,R14,R3,LSR #3                   ;calc new source pointer
	; Now we move the word left by as many bits as we are flushing
	MOV	r12,r12,ASR#8
	MOV	r1,r1,LSL r12
	MOV	r1,r1,LSR#32-13

	; Now we go again to calculate R1.
	TST	r1,#1<<12	; if (getbits1())
	MOVNE	r1,#0		;   return 0;
	MOVNE	r12,#1<<8	;
	BNE	getTMNMV2_end	;
	; So the top bit is 0...
	CMP	r1,#512
	MOVGE	r1,r1,ASR#8
	SUBGE	r1,r1,#2
	ADRGE	r12,TMNMVtab0
	BGE	getTMNMV2_got_code
	CMP	r1,#128
	MOVGE	r1,r1,ASR#2
	SUBGE	r1,r1,#32
	ADRGE	r12,TMNMVtab1
	SUBLT	r1,r1,#5
	ADRLT	r12,TMNMVtab2
getTMNMV2_got_code
	LDR	r1,[r12,r1,LSL#1]	; r1 = Val | Len<<8
	AND	r12,r1,#&FF00
	AND	r1,r1,#&FF
getTMNMV2_end
	; When we get here, we need r1 = return value, r12=num bits to flush<<8
	ADD     R2,R2,r12,ASR#8                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R14,R14,R3,LSR #3                   ;calc new source pointer
	STR	R14,asource
	STR	r2,abitsthru

        Return
MCBPCtab
	;DCB	255,0
	DCB	255,9
	DCB	52,9
	DCB	36,9
	DCB	20,9
	DCB	49,9
	DCB	35,8
	DCB	35,8
	DCB	19,8
	DCB	19,8

	DCB	50,8
	DCB	50,8
	DCB	51,7
	DCB	51,7
	DCB	51,7
	DCB	51,7
	DCB	34,7
	DCB	34,7
	DCB	34,7

	DCB	34,7
	DCB	18,7
	DCB	18,7
	DCB	18,7
	DCB	18,7
	DCB	33,7
	DCB	33,7
	DCB	33,7
	DCB	33,7

	DCB	17,7
	DCB	17,7
	DCB	17,7
	DCB	17,7
	DCB	4,6
	DCB	4,6
	DCB	4,6
	DCB	4,6
	DCB	4,6

	DCB	4,6
	DCB	4,6
	DCB	4,6
	DCB	48,6
	DCB	48,6
	DCB	48,6
	DCB	48,6
	DCB	48,6
	DCB	48,6

	DCB	48,6
	DCB	48,6
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5

	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5
	DCB	3,5

	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4

	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4

	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4

	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	32,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4

	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4

	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4

	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4
	DCB	16,4

	DCB	16,4
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3
	DCB	2,3

	DCB	2,3
	DCB	2,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3
	DCB	1,3

	DCB	1,3
	DCB	1,3
	DCB	1,3
	ALIGN
getMCBPC
	LDR	R1,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R1,{R0,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r0,r0,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r0,r2,r0,ROR#8		; r0 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r0,r0,LSL r2
	ORR	r12,r0,r12,LSR r3

	MOVS	r12,r12,LSR#32-9	; r12 = code = showbits(9)
	; We blatently ignore the error case...
	BEQ	getMCBPC_error
	; r12 = showbits(9)
	SUBS	r12,r12,#1	; if (code == 1) {
	MOVEQ	r12,#9<<8	;   flushbits(9);
	MOVEQ	r0,#255		;   return 255;
	BEQ	getMCBPC_end	; }
	CMP	r12,#256-1	; if (code>=256) {
	MOVGT	r12,#1<<8	;   flushbits(1);
	MOVGT	r0,#0		;   return 0;
	BGT	getMCBPC_end	; }
	ADR	r0,MCBPCtab
	LDR	r0,[r0,r12,LSL#1]	; r0 = Val | Len<<8
	AND	r12,r0,#&FF00
	AND	r0,r0,#&FF
getMCBPC_end
	; When we get here, we need r0 = return value, r12=num bits to flush<<8
	ADD     R2,R2,r12,ASR#8                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
	STRNE	R1,asource
	STR	r2,abitsthru

        Return  , LinkNotStacked
MCBPCintratab
	DCB	255,0
	DCB	20,6
	DCB	36,6
	DCB	52,6
	DCB	4,4
	DCB	4,4
	DCB	4,4

	DCB	4,4
	DCB	19,3
	DCB	19,3
	DCB	19,3
	DCB	19,3
	DCB	19,3

	DCB	19,3
	DCB	19,3
	DCB	19,3
	DCB	35,3
	DCB	35,3
	DCB	35,3

	DCB	35,3
	DCB	35,3
	DCB	35,3
	DCB	35,3
	DCB	35,3
	DCB	51,3

	DCB	51,3
	DCB	51,3
	DCB	51,3
	DCB	51,3
	DCB	51,3
	DCB	51,3

	DCB	51,3

	ALIGN
getMCBPCintra
	LDR	R1,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R1,{R0,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r0,r0,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r0,r2,r0,ROR#8		; r0 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r0,r0,LSL r2
	ORR	r12,r0,r12,LSR r3

	MOV	r12,r12,LSR#32-9	; r12 = code = showbits(9)
	; r12 = showbits(9)
	CMP	r12,#1		; if (code == 1) {
	MOVEQ	r12,#9<<8	;   flushbits(9);
	MOVEQ	r0,#255		;   return 255;
	BEQ	getMCBPCintra_end	; }
	MOVS	r12,r12,LSR#3
	; We blatently ignore the error case...
	BLE	getMCBPCintra_error
	CMP	r12,#32		; if (code>=256) {
	MOVGE	r12,#1<<8	;   flushbits(1);
	MOVGE	r0,#3		;   return 3;
	BGT	getMCBPCintra_end	; }
	ADR	r0,MCBPCintratab
	LDR	r0,[r0,r12,LSL#1]	; r0 = Val | Len<<8
	AND	r12,r0,#&FF00
	AND	r0,r0,#&FF
getMCBPCintra_end
	; When we get here, we need r0 = return value, r12=num bits to flush<<8
	ADD     R2,R2,r12,ASR#8                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
	STRNE	R1,asource
	STR	r2,abitsthru

        Return  , LinkNotStacked
getMCBPC_error
getMCBPCintra_error
	MOV	R0,#256
        Return  , LinkNotStacked
CBPYtab
	DCB	255,0
	DCB	255,0
	DCB	9<<2,6
	DCB	6<<2,6
	DCB	7<<2,5
	DCB	7<<2,5
	DCB	11<<2,5
	DCB	11<<2,5

	DCB	13<<2,5
	DCB	13<<2,5
	DCB	14<<2,5
	DCB	14<<2,5
	DCB	15<<2,4
	DCB	15<<2,4
	DCB	15<<2,4
	DCB	15<<2,4

	DCB	3<<2,4
	DCB	3<<2,4
	DCB	3<<2,4
	DCB	3<<2,4
	DCB	5<<2,4
	DCB	5<<2,4
	DCB	5<<2,4
	DCB	5<<2,4

	DCB	1<<2,4
	DCB	1<<2,4
	DCB	1<<2,4
	DCB	1<<2,4
	DCB	10<<2,4
	DCB	10<<2,4
	DCB	10<<2,4
	DCB	10<<2,4

	DCB	2<<2,4
	DCB	2<<2,4
	DCB	2<<2,4
	DCB	2<<2,4
	DCB	12<<2,4
	DCB	12<<2,4
	DCB	12<<2,4
	DCB	12<<2,4

	DCB	4<<2,4
	DCB	4<<2,4
	DCB	4<<2,4
	DCB	4<<2,4
	DCB	8<<2,4
	DCB	8<<2,4
	DCB	8<<2,4
	DCB	8<<2,4

	ALIGN
getCBPY
	LDR	R1,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R1,{R0,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r0,r0,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r0,r2,r0,ROR#8		; r0 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r0,r0,LSL r2
	ORR	r12,r0,r12,LSR r3

	MOV	r12,r12,LSR#32-6	; r12 = code = showbits(6)
	; We blatently ignore the error case...
	; CMP	r12,#2
	; BLT	getMCBPCintra_error
	; r12 = showbits(9)
	CMP	r12,#48		; if (code >= 48) {
	MOVGE	r12,#2<<8	;   flushbits(2);
	MOVGE	r0,#0		;   return 0;
	ADRLT	r0,CBPYtab
	LDRLT	r0,[r0,r12,LSL#1]	; r0 = Val | Len<<8
	ANDLT	r12,r0,#&FF00
	ANDLT	r0,r0,#&FF
	; When we get here, we need r0 = return value, r12=num bits to flush<<8
	ADD     R2,R2,r12,ASR#8                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
	STRNE	R1,asource
	STR	r2,abitsthru

        Return  , LinkNotStacked
getMODB
	LDR	R1,asource
	MVN	r3,#&FF00		; r1 =  a   b   c   d
	LDMIA	R1,{R0,r12}

	; Reverse r1 and r12 using r2 and r3 as temps.
	EOR	r2,r0,r0,ROR#16		; r2 = aXc bXd cXa dXb
	AND	r2,r3,r2,LSR#8		; r2 =  0  aXc  0  cXa
	EOR	r0,r2,r0,ROR#8		; r0 =  d   c   b   a

	EOR	r2,r12,r12,ROR#16	; r2 = aXc bXd cXa dXb
	AND	r3,r3,r2,LSR#8		; r3 =  0  aXc  0  cXa
	LDR	R2,abitsthru
	EOR	r12,r3,r12,ROR#8	; r1 =  d   c   b   a

	RSB	R3,R2,#32               ;shift word
	MOV	r0,r0,LSL r2
	ORR	r12,r0,r12,LSR r3

	MOV	r12,r12,LSR#32-2	; r12 = code = showbits(2)
	; r12 = showbits(2)
	CMP	r12,#2		; if (code < 2) {
	MOVLT	r12,#1<<8	;   flushbits(1);
	MOVLT	r0,#0		;   return 0;
				; } else if (code == 2) {
	MOVGE	r12,#2<<8	;   flushbits(2);
	MOVEQ	r0,#1		;   return 0;
				; } else {
	;MOVGE	r12,#2<<8	;   flushbits(2);
	MOVGT	r0,#2		;   return 0;
				; }
	; When we get here, we need r0 = return value, r12=num bits to flush<<8
	ADD     R2,R2,r12,ASR#8                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
	STRNE	R1,asource
	STR	r2,abitsthru

        Return  , LinkNotStacked
	; Hideously ineffcient. Do we care?
	; We could bump the base address to the next byte, and do byte
	; comparisons to save time...
startcode
        FunctionEntry
startcode_lp
	MOV	r0,#17
	BL	ashowbits
	CMP	r0,#1
        Return  ,, EQ
	MOV	r0,#1
	BL	aflushbits
	B	startcode_lp
bits_in_packet
	LDR	r1,asource
	LDR	r2,packet_end
	LDR	r3,abitsthru
	LDR	r12,packet_end_bitsthru
	CMP	r1,r2
	CMPEQ	r3,r12
	MOV	r0,#1
	MOVGE	r0,#0
        Return
;set_bitpacket_end
;	; R0 = end address
;	; R1 = number of bits to look at in the last byte
;	SUB	r0,r0,#1
;	ADD	r0,r0,r1,ASR#3
;	BIC	r2,r0,#3
;	STR	r2,packet_end
;	SUB	r0,r0,r2	; r0 = no of bytes we backtracked
;	AND	r1,r1,#7	; r1 = no of bits we will use in the last byte
;	ADD	r1,r1,r0,LSL#3	; r1 = no of bits we will use in the last word
;	STR	r1,packet_end_bitsthru
;       Return  , LinkNotStacked
bits_left_in_packet
	LDR	r1,asource
	LDR	r2,packet_end
	LDR	r3,abitsthru
	LDR	r12,packet_end_bitsthru
	SUB	r1,r2,r1
	SUB	r3,r12,r3
	ADD	r0,r3,r1,LSL#3
        Return  , LinkNotStacked


	END
