	AREA |test$$code|,CODE,READONLY

	EXPORT agetbits1
	EXPORT aflushbits
	EXPORT agetbits
	EXPORT ashowbits
	EXPORT ainitbits
	EXPORT atbthu
	EXPORT atbsource
	EXPORT atasource
	EXPORT asource
	EXPORT abitsthru

abitsthru
	DCD 0
asource
	DCD 0

atbthu
	LDR	R0,abitsthru
	MOVS	PC,LR

atbsource
	LDR	R0,asource
	MOVS	PC,LR

atasource
	ADR	R0,asource
	MOVS	PC,LR

ainitbits			;R0 = source

	AND	R1,R0,#3	;= byte offset of source
	SUB	R0,R0,R1		;= word aligned source
	STR	R0,asource
;	MOV	R1,R1,LSL #3    ;=bit offset of source
	MOV	R1,#0
	STR	R1,abitsthru
	MOVS	PC,LR

agetbits1
;	STMFD	R13!,{R1-R12,LR}
	LDR	R1,asource
	LDR	R2,abitsthru     ;no of bits of source that are valid
	MOV	R3,R2,LSR #3	;what byte to load
	LDRB	R0,[R1,R3]
	SUB	R3,r2,r3,LSL #3	;bit offset within byte
	RSB	R3,R3,#7	;calculate shift
	MOV	R0,R0,LSR R3
	AND	R0,R0,#1

	ADD	R2,R2,#1
	TEQ	R2,#32
	MOVEQ	R2,#0
	ADDEQ	R1,R1,#4
	STREQ	R1,asource
	STR	R2,abitsthru
;        LDMFD	R13!,{R1-R12,LR}
	MOVS	PC,LR
agetbits

;	STMFD	R13!,{R4,R5,LR}
;
;;        MOV      ip,sp
;;        STMDB    sp!,{a1,v1,v2,fp,ip,lr,pc}
;;        SUB      fp,ip,#4
;
;	MOV 	R4,R0
;	BL	ashowbits
;	MOV	R5,R0
;	MOV	R0,R4
;	BL	aflushbits
;	MOV	R0,R5
;
;;        LDMDB    fp,{v1,v2,fp,sp,pc}^
;	LDMFD	R13!,{R4,R5,PC}^

;showbits
;	STMFD	R13!,{R4-R7,LR}
;
;	LDR	R1,asource
;	LDR	R2,abitsthru
;
;	ADD     R5,R2,r0                   ;calc new bitsthru
;	BICS	R3,R5,#31
;	ANDNE	R5,R5,#31
;	ADDNE	R4,R4,R3,LSR #3                   ;calc new source pointer
;
;	STR	R4,asource
;	STR	R5,abitsthru
;
;	LDMIA	R1,{R4,R5}
;
;
;	EOR	r6,r4,r4, ROR #16	;reverse big endianness
;	BIC	r6,r6,#&00FF0000	;from armltd home page
;	MOV	r4,r4,ROR#8
;	EOR	r4,r4,r6,LSR#8
;
;	EOR	r7,r5,r5, ROR #16
;	BIC	r7,r7,#&00FF0000
;	MOV	r5,r5,ROR#8
;	EOR	r5,r5,r7,LSR#8
;
;	RSBS	R3,R2,#32               ;shift word
;	MOVNE	r4,r4,LSL r2
;	ORRNE	r4,r4,r5,LSR r3
;
;
;	RSB     r6,r0,#32               ;num bits req -> shift
;	MOV	r0,r4,LSR R6	        ;calc output
;	LDMFD   R13!,{R4-R7,PC}^
;




;;Noddy version

;	STMFD	R13!,{R1-R12,LR}
;;        STMFD 	R13!,{R4,R5,R6,LR}
;	LDR	R1,asource
;	MOV	R6,R1
;	LDR	R2,abitsthru
;	ADD	R1,R1,R2,LSR #3
;	LDRB	R3,[R1],#1
;	LDRB	R4,[R1],#1
;	ORR	R3,R4,R3,LSL #8
;	LDRB	R4,[R1],#1
;	ORR	R3,R4,R3,LSL #8
;	LDRB	R4,[R1],#1
;	ORR	R3,R4,R3,LSL #8
;	AND	R4,R2,#7
;	MOV	R3,R3,LSL R4
;
;
;
;	ADD	R2,R0,R2
;	BICS	R5,R2,#31
;	ANDNE	R2,R2,#31
;	ADDNE	R6,R6,R5,LSR #3                   ;calc new source pointer
;
;	STRNE	R6,asource
;	STR	R2,abitsthru
;
;	RSB	R4,R0,#32
;	MOV	R0,R3,LSR R4
;        LDMFD	R13!,{R1-R12,LR}
;	MOV	PC,LR
;;	LDMFD	R13!,{R4,R5,R6,PC}
;



;orig version
	STMFD	R13!,{R4-R7,LR}
	LDR	R1,asource
	LDR	R2,abitsthru
	LDMIA	R1,{R4,R5}


	EOR	r6,r4,r4, ROR #16	;reverse big endianness
	BIC	r6,r6,#&00FF0000	;from armltd home page
	MOV	r4,r4,ROR#8
	EOR	r4,r4,r6,LSR#8

	EOR	r7,r5,r5, ROR #16
	BIC	r7,r7,#&00FF0000
	MOV	r5,r5,ROR#8
	EOR	r5,r5,r7,LSR#8

	RSB	R3,R2,#32               ;shift word
	MOV	r4,r4,LSL r2
	ORR	r4,r4,r5,LSR r3



	ADD     R2,R2,r0                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer
;	CMP	R2,#32
;	SUBGE	R2,R2,#32
;	ADDGE	R1,R1,#4                   ;calc new source pointer

	STR	R1,asource
	STR	r2,abitsthru

	RSB     r6,r0,#32               ;num bits req -> shift
	MOV	r0,r4,LSR R6	        ;calc output

	LDMFD   R13!,{R4-R7,PC}^


aflushbits


	LDR	R1,asource
	LDR	R2,abitsthru

	ADD     R2,R2,r0                   ;calc new bitsthru
	BICS	R3,R2,#31
	ANDNE	R2,R2,#31
	ADDNE	R1,R1,R3,LSR #3                   ;calc new source pointer

	STR	R1,asource
	STR	r2,abitsthru

	MOVS	PC,LR


ashowbits
;	STMFD	R13!,{R1-R12,LR}
;;        STMFD 	R13!,{R4,R5,R6,LR}
;	LDR	R1,asource
;	MOV	R6,R1
;	LDR	R2,abitsthru
;	ADD	R1,R1,R2,LSR #3
;	LDRB	R3,[R1],#1
;	LDRB	R4,[R1],#1
;	ORR	R3,R4,R3,LSL #8
;	LDRB	R4,[R1],#1
;	ORR	R3,R4,R3,LSL #8
;	LDRB	R4,[R1],#1
;	ORR	R3,R4,R3,LSL #8
;	AND	R4,R2,#7
;	MOV	R3,R3,LSL R4
;
;
;	RSB	R4,R0,#32
;	MOV	R0,R3,LSR R4
;        LDMFD	R13!,{R1-R12,LR}
;	MOV	PC,LR
;
;	LDMFD	R13!,{R4,R5,R6,PC}

	STMFD	R13!,{R4-R7,LR}

	LDR	R1,asource
	LDR	R2,abitsthru
	LDMIA	R1,{R4,R5}


	EOR	r6,r4,r4, ROR #16	;reverse big endianness
	BIC	r6,r6,#&00FF0000	;from armltd home page
	MOV	r4,r4,ROR#8
	EOR	r4,r4,r6,LSR#8

	EOR	r7,r5,r5, ROR #16
	BIC	r7,r7,#&00FF0000
	MOV	r5,r5,ROR#8
	EOR	r5,r5,r7,LSR#8

	RSBS	R3,R2,#32               ;shift word
	MOVNE	r4,r4,LSL r2
	ORRNE	r4,r4,r5,LSR r3


	RSB     r6,r0,#32               ;num bits req -> shift
	MOV	r0,r4,LSR R6	        ;calc output
	LDMFD   R13!,{R4-R7,PC}^

	END
