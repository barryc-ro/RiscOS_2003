        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA	|Test$$Code|,CODE,READONLY

	EXPORT	edge_filter

y_filter_show	* 	0
u_filter_show	* 	0
v_filter_show	* 	0
always_filter	*	0

	MACRO
	Filter0123
	; R0 = A
	; R1 = B
	; R2 = C
	; R3 = D
	; r5 = Strength
	; R4,R6,R7,R8 corrupted
	SUB	R4,R0,r1,LSL#2		; r4 =  A - 4B		[-1020, 256]
	ADD	r4,r4,r2,LSL#2		; r4 =  A - 4B + 4C	[-1020, 1275]
	SUBS	r4,r4,r3		; r4 =  A - 4B + 4C - D	[-1275, 1275]
	AND	r6,r4,#1<<31		; r6 = sign bit
	RSBLT	r4,r4,#0		; r4 = abs(A - 4B + 4C - D)	[0,1275]
	MOV	r4,r4,ASR#3		; r4 = abs(A - 4B + 4C - D)/8	[0, 159]
	CMP	r5,r4			; if (strength < d)
	RSBLTS	r4,r4,r5,LSL#1		; r4 =     2*strength - d
	MOVLT	r4,#0			; r4 = max(2*strength - d, 0)
				; r4 = abs(d1)		[0,min(strength,abs(d))]
	SUBS	r7,r0,r3		; r7 = A - D		[-255,255]
	ORR	r6,r6,r7,LSR#1		; r6 = sign(d) | sign(A - D)>>1
	RSBLT	r7,r7,#0		; r7 = abs(A-D)		[0,255]
	MOV	r7,r7,ASR#2		; r7 = abs(A-D)/4	[0,63]
	CMP	r7,r4,ASR#1		; if (abs(A-D)/4 > abs(d1)/2)
	MOVGT	r7,r4,ASR#1		;   r7 = abs(d1)/2
				; r7 = abs(clipd1((A-D)/2, d1/2))
	TST	r6,#1<<30
	RSBNE	r7,r7,#0	; r7 = d2 = clip((A-D)/2, d1/2)
	TST	r6,#1<<31
	RSBNE	r4,r4,#0	; r4 = d1 = UpdownRamp(d, Strength)

	; No need to clip A or D...
	SUB	r0,r0,r7	; r0 = A1 = A - d2
	ADDS	r1,r1,r4	; r1 = B1 = B + d1
	MOVLT	r1,#0
	CMP	r1,#255
	MOVGT	r1,#255
	SUBS	r2,r2,r4	; r2 = C1 = C - d1
	MOVLT	r2,#0
	CMP	r2,#255
	MOVGT	r2,#255
	ADD	r3,r3,r7	; r3 = D1 = D + d2

	MEND
edge_filter
	; On entry:
	; r0 = number of columns (of blocks)
	; r1 = number of rows (of blocks)
	; r2 = pointer to mode
	; r3 = 1<<MV_d3_log
	; <> = pointer to 3 pointers for each frame block
	; <> = strength
        FunctionEntry "r4-r11"
	ADD	r10,r0,#8
	STR	r1,rowcnt_master
	STR	r1,rowcnt
	; Move modeptr (+1,+1)
	ADD	r11,r2,r3
	ADD	r11,r11,#1
	STR	r11,modeptr

	; First we do the Y plane
	LDR	r9,[r13,#9*4]
	LDR	r5,[r13,#10*4]
	LDR	r9,[r9]
	MOV	r12,r3
	; r9  = pointer to block
	; r10 = line length
	; r11 = pointer to mode
	; r12 = line length bumped to next power of 2.
	; First lets do horizontal edges
	STR	r0,linecnt
yrowlp
	ADD	r9,r9,r10,LSL#3+3
	SUB	r9,r9,r10,LSL#3+1
yhline_lp
	; Load modes
	LDRB	r0,[r11],r12
	; Now r1 = 8 AND r0 = 8 iff we mustn't filter.
	MOV	r14,#16
	[ always_filter = 0
	TST	r0,#8		; if ((r0 & 8) != 0)
	ADDNE	r9,r9,#16	; then skip the macro block
	BNE	uncoded_block_hy	;      and jump over
	]
yhpixel_lp1
	; So load the pixel values
	LDRB	r0,[r9],r10,LSL#3
	LDRB	r1,[r9],r10,LSL#3
	LDRB	r2,[r9],r10,LSL#3
	LDRB	r3,[r9],r10,LSL#3
	; Reset pointer
	SUB	r9,r9,r10,LSL#2+3

	Filter0123		; Do the filtering

	[ y_filter_show = 1
	MOV	r0,#128
	]
	STRB	r0,[r9],r10,LSL#3
	STRB	r1,[r9],r10,LSL#3
	STRB	r2,[r9],r10,LSL#3
	STRB	r3,[r9],r10,LSL#3
	; Reset pointer
	SUB	r9,r9,r10,LSL#2+3
	ADD	r9,r9,#1

	SUBS	r14,r14,#1
	BGT	yhpixel_lp1
uncoded_block_hy
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	yhline_lp
	SUB	r0,r10,#8
	ADD	r9,r9,r10,LSL#3+3
	MUL	r1,r0,r12
	SUB	r9,r9,r0,LSL#3
	SUB	r11,r11,r1,LSR#1	; backtrack mode ptr
	LDR	r1,rowcnt
	STR	r0,linecnt
	SUBS	r1,r1,#2
	BLE	y_skip_last_h_edge
yhline_lp2
	; Load modes
	LDRB	r1,[r11,#1]
	LDRB	r0,[r11],r12
	; Now r1 = 8 AND r0 = 8 iff we mustn't filter.
	[ always_filter = 0
	TST	r1,#8		; if (r1 = 8) &&
	TSTNE	r0,#8		;		 (r0 = 8)
	ADDNE	r9,r9,#16	; then skip the macro block
	BNE	uncoded_block_hy2	;      and jump over
	]
	MOV	r14,#16
yhpixel_lp2
	; So load the pixel values
	LDRB	r0,[r9],r10,LSL#3
	LDRB	r1,[r9],r10,LSL#3
	LDRB	r2,[r9],r10,LSL#3
	LDRB	r3,[r9],r10,LSL#3
	; Reset pointer
	SUB	r9,r9,r10,LSL#2+3

	Filter0123		; Do the filtering

	[ y_filter_show = 1
	MOV	r0,#255
	]
	STRB	r0,[r9],r10,LSL#3
	STRB	r1,[r9],r10,LSL#3
	STRB	r2,[r9],r10,LSL#3
	STRB	r3,[r9],r10,LSL#3
	; Reset pointer
	SUB	r9,r9,r10,LSL#2+3
	ADD	r9,r9,#1

	SUBS	r14,r14,#1
	BGT	yhpixel_lp2
uncoded_block_hy2
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	yhline_lp2
	SUB	r0,r10,#8
	MUL	r1,r0,r12
	SUB	r9,r9,r0,LSL#3
	SUB	r11,r11,r1,LSR#1	; backtrack mode ptr
	STR	r0,linecnt
y_skip_last_h_edge
	; We have now filtered 2 blocks worth of horizontal edges. Now lets
	; filter vertical edges
	; Now r9 = InputY is pointing to next row of blocks, so backtrack
	ADD	r9,r9,#6
	SUB	r9,r9,r10,LSL#3+3+1
	ADD	r9,r9,r10,LSL#3+1
	B	yvline_enter
yvline_lp2
	; Load modes
	LDRB	r1,[r11],r12
	LDRB	r0,[r11]
	; Now r1 = 8 AND r0 = 8 iff we mustn't filter.
	[ always_filter = 0
	TST	r1,#8		; if ((r1 & 8) != 0) &&
	TSTNE	r0,#8		;		        ((r0 & 8) != 0)
	BNE	uncoded_block_vy2	; then skip the block
	]
	MOV	r14,#16
yvpixel_lp2
	; So load the pixel values
	LDRB	r0,[r9]
	LDRB	r1,[r9,#1]
	LDRB	r2,[r9,#2]
	LDRB	r3,[r9,#3]

	Filter0123		; Do the filtering

	[ y_filter_show = 1
	MOV	r0,#255
	]

	STRB	r1,[r9,#1]
	STRB	r2,[r9,#2]
	STRB	r3,[r9,#3]
	STRB	r0,[r9],r10,LSL#3

	SUBS	r14,r14,#1
	BGT	yvpixel_lp2
	SUB	r9,r9,r10,LSL#3+3+1
uncoded_block_vy2
	ADD	r9,r9,#8
yvline_enter
yvline_lp
	; Load modes
	LDRB	r0,[r11]
	[ always_filter =0
	; Now r1 = 8 AND r0 = 8 iff we mustn't filter.
	TST	r0,#8		; if ((r0 = 8) != 0)
	BNE	uncoded_block_vy1	; then skip the block
	]
	MOV	r14,#16
yvpixel_lp1
	; So load the pixel values
	LDRB	r0,[r9]
	LDRB	r1,[r9,#1]
	LDRB	r2,[r9,#2]
	LDRB	r3,[r9,#3]

	Filter0123		; Do the filtering

	[ y_filter_show = 1
	MOV	r0,#128
	]

	STRB	r1,[r9,#1]
	STRB	r2,[r9,#2]
	STRB	r3,[r9,#3]
	STRB	r0,[r9],r10,LSL#3

	SUBS	r14,r14,#1
	BGT	yvpixel_lp1
	SUB	r9,r9,r10,LSL#3+3+1
uncoded_block_vy1
	ADD	r9,r9,#8
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	yvline_lp2
y_skiplastcol
	ADD	r9,r9,r10,LSL#3+3+1
	LDR	r1,rowcnt
	ADD	r9,r9,#2
	SUB	r0,r10,#8
	MUL	r2,r0,r12
	SUB	r9,r9,r0,LSL#3
	SUBS	r1,r1,#2
	STRGT	r0,linecnt
	SUB	r11,r11,r2,LSR#1	; backtrack mode ptr
	ADD	r11,r11,#1
	ADD	r11,r11,r12
	; Let linecnt = number of edges to consider
	STRGT	r1,rowcnt
	BGT	yrowlp

	; Next we do the U plane
	LDR	r11,modeptr
	LDR	r9,[r13,#9*4]
	LDR	r1,rowcnt_master
	LDR	r9,[r9,#4]
	SUBS	r1,r1,#2
	BLE	hu_skip
	STR	r1,rowcnt
	; r9  = pointer to block
	; r10 = line length
	; r11 = pointer to mode
	; r12 = line length bumped to next power of 2.
	; First lets do horizontal edges
uhrowlp
	; Let linecnt = number of blocks with edges to consider
	ADD	r9,r9,r10,LSL#2+3
	SUB	r9,r9,r10,LSL#2+1
	SUB	r0,r10,#8
	STR	r0,linecnt
uhline_lp
	; Load modes
	LDRB	r1,[r11,#1]
	LDRB	r0,[r11],r12
	; Now r1 = 8 AND r0 = 8 iff we mustn't filter.
	[ always_filter = 0
	TST	r1,#8		; if (r1 = 8) &&
	TSTNE	r0,#8		;		 (r0 = 8)
	ADDNE	r9,r9,#8	; then skip the block
	BNE	uncoded_block_hu	;      and jump over
	]
	MOV	r14,#8
uhpixel_lp
	; So load the pixel values
	LDRB	r0,[r9],r10,LSL#2
	LDRB	r1,[r9],r10,LSL#2
	LDRB	r2,[r9],r10,LSL#2
	LDRB	r3,[r9],r10,LSL#2
	; Reset pointer
	SUBS	r9,r9,r10,LSL#2+2

	Filter0123		; Do the filtering

	[ u_filter_show = 1
	MOV	r0,#255
	]

	STRB	r0,[r9],r10,LSL#2
	STRB	r1,[r9],r10,LSL#2
	STRB	r2,[r9],r10,LSL#2
	STRB	r3,[r9],r10,LSL#2
	; Reset pointer
	SUBS	r9,r9,r10,LSL#2+2
	ADD	r9,r9,#1

	SUBS	r14,r14,#1
	BGT	uhpixel_lp

uncoded_block_hu
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	uhline_lp
	SUB	r0,r10,#8
	SUB	r9,r9,r0,LSL#2
	MUL	r2,r0,r12
	SUB	r11,r11,r2,LSR#1
	SUB	r0,r10,#8+2
	STR	r0,linecnt
	SUB	r9,r9,r10,LSL#2+3
	ADD	r9,r9,r10,LSL#2+1
hu_skip
	; We have now filtered a row of horizontal edges. Now lets filter
	; the same row of vertical edges
	ADD	r9,r9,#6
	SUB	r0,r10,#2+8
	STR	r0,linecnt
uvline_lp
	; Load modes
	LDRB	r1,[r11],r12
	LDRB	r0,[r11]
	; Now r1 = 8 AND r0 = 8 iff we mustn't filter.
	[ always_filter = 0
	TST	r1,#8		; if (r1 = 8) &&
	TSTNE	r0,#8		;		 (r0 = 8)
	BNE	uncoded_block_vu	; then skip the block
	]
	MOV	r14,#8
uvpixel_lp
	; So load the pixel values
	LDRB	r0,[r9]
	LDRB	r1,[r9,#1]
	LDRB	r2,[r9,#2]
	LDRB	r3,[r9,#3]

	Filter0123		; Do the filtering

	[ u_filter_show = 1
	MOV	r0,#255
	]

	STRB	r1,[r9,#1]
	STRB	r2,[r9,#2]
	STRB	r3,[r9,#3]
	STRB	r0,[r9],r10,LSL#2

	SUBS	r14,r14,#1
	BGT	uvpixel_lp
	SUB	r9,r9,r10,LSL#2+3
uncoded_block_vu
	ADD	r9,r9,#8
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	uvline_lp
	SUB	r9,r9,#6
	ADD	r9,r9,r10,LSL#2+3
	SUB	r0,r10,#2+8
	SUB	r9,r9,r0,LSL#2
	MUL	r2,r0,r12
	SUB	r11,r11,r2,LSR#1
	LDR	r1,rowcnt
	ADD	r11,r11,#1
	SUBS	r1,r1,#2
	STRGE	r1,rowcnt
	BGT	uhrowlp
	BEQ	hu_skip


	; Last we do the V plane
	LDR	r11,modeptr
	LDR	r9,[r13,#9*4]
	LDR	r1,rowcnt_master
	LDR	r9,[r9,#8]
	SUBS	r1,r1,#2
	BLE	hv_skip
	STR	r1,rowcnt
	; r9  = pointer to block
	; r10 = line length
	; r11 = pointer to mode
	; r12 = line length bvmped to next power of 2.
	; First lets do horizontal edges
vhrowlp
	; Let linecnt = nvmber of blocks with edges to consider
	ADD	r9,r9,r10,LSL#2+3
	SUB	r9,r9,r10,LSL#2+1
	SUB	r0,r10,#8
	STR	r0,linecnt
vhline_lp
	; Load modes
	LDRB	r1,[r11,#1]
	LDRB	r0,[r11],r12
	; Now r1 = 8 AND r0 = 8 iff we mvstn't filter.
	[ always_filter = 0
	TST	r1,#8		; if (r1 = 8) &&
	TSTNE	r0,#8		;		 (r0 = 8)
	ADDNE	r9,r9,#8	; then skip the block
	BNE	vncoded_block_hv	;      and jvmp over
	]
	MOV	r14,#8
vhpixel_lp
	; So load the pixel valves
	LDRB	r0,[r9],r10,LSL#2
	LDRB	r1,[r9],r10,LSL#2
	LDRB	r2,[r9],r10,LSL#2
	LDRB	r3,[r9],r10,LSL#2
	; Reset pointer
	SUBS	r9,r9,r10,LSL#2+2

	Filter0123		; Do the filtering

	[ v_filter_show = 1
	MOV	r0,#255
	]

	STRB	r0,[r9],r10,LSL#2
	STRB	r1,[r9],r10,LSL#2
	STRB	r2,[r9],r10,LSL#2
	STRB	r3,[r9],r10,LSL#2
	; Reset pointer
	SUBS	r9,r9,r10,LSL#2+2
	ADD	r9,r9,#1

	SUBS	r14,r14,#1
	BGT	vhpixel_lp

vncoded_block_hv
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	vhline_lp
	SUB	r0,r10,#8
	SUB	r9,r9,r0,LSL#2
	MUL	r2,r0,r12
	SUB	r11,r11,r2,LSR#1
	SUB	r0,r10,#8+2
	STR	r0,linecnt
	SUB	r9,r9,r10,LSL#2+3
	ADD	r9,r9,r10,LSL#2+1
hv_skip
	; We have now filtered a row of horizontal edges. Now lets filter
	; the same row of vertical edges
	ADD	r9,r9,#6
	SUB	r0,r10,#2+8
	STR	r0,linecnt
vvline_lp
	; Load modes
	LDRB	r1,[r11],r12
	LDRB	r0,[r11]
	; Now r1 = 8 AND r0 = 8 iff we mvstn't filter.
	[ always_filter = 0
	TST	r1,#8		; if (r1 = 8) &&
	TSTNE	r0,#8		;		 (r0 = 8)
	BNE	vncoded_block_vv	; then skip the block
	]
	MOV	r14,#8
vvpixel_lp
	; So load the pixel valves
	LDRB	r0,[r9]
	LDRB	r1,[r9,#1]
	LDRB	r2,[r9,#2]
	LDRB	r3,[r9,#3]

	Filter0123		; Do the filtering

	[ v_filter_show = 1
	MOV	r0,#255
	]

	STRB	r1,[r9,#1]
	STRB	r2,[r9,#2]
	STRB	r3,[r9,#3]
	STRB	r0,[r9],r10,LSL#2

	SUBS	r14,r14,#1
	BGT	vvpixel_lp
	SUB	r9,r9,r10,LSL#2+3
vncoded_block_vv
	ADD	r9,r9,#8
	LDR	r0,linecnt
	SUBS	r0,r0,#2
	STRGT	r0,linecnt
	BGT	vvline_lp
	SUB	r9,r9,#6
	ADD	r9,r9,r10,LSL#2+3
	SUB	r0,r10,#2+8
	SUB	r9,r9,r0,LSL#2
	MUL	r2,r0,r12
	SUB	r11,r11,r2,LSR#1
	LDR	r1,rowcnt
	ADD	r11,r11,#1
	SUBS	r1,r1,#2
	STRGE	r1,rowcnt
	BGT	vhrowlp
	BEQ	hv_skip

        Return  "r4-r11"
rowcnt
	DCD	0
rowcnt_master
	DCD	0
linecnt
	DCD	0
modeptr
	DCD	0

	END
