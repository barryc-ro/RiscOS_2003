        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

	AREA |ASm$$CODE|,CODE,READONLY
	EXPORT ady_init
	EXPORT ady_shut
	EXPORT ady_malloc
	IMPORT memset

name	DCB	"H263 AREA",0
num	DCD 	0
base	DCD	0
size	DCD	0
malsize DCD	0
max	DCD	0

getdy
        FunctionEntry "r4-r8"
	mov	r0,#0		;create
	mov	r1,#(-1)	;-1 don't mind which
	mov	r2,#0		;initial size
	mov	r3,#(-1)	;-1 don't mind where
	mov	r4,#(1:SHL:7)	;area flags - 7, area may not be dragged
	mov	r5,#(1024*1024*4)	;max size bytes
	mov	r6,#0		;0 no handler
	mov	r7,#0		;0 no handler workspace
	adr	r8,name		;name
	swi 	&20066		;OS_dynamic area
				; X bit set. V is set on error, error block in r0.
	movvc	r0,#0		;if no error, clear r0 to indicate no error to C
	str	r1,num		;area no
	str	r3,base		;base
	str	r5,max		;max

        Return  "r4-r8"

readdy
        FunctionEntry "r4-r8"
	mov	r0,#2		; info
	ldr	r1,num		;area no
	swi	&20066		;OS_dynamicArea
	movvc	r0,#0		;if no error, clear r0
	str	r2,size		;current size
	str	r3,base		;base
	str	r5,max		;max
	Return  "r4-r8"

ady_init
	mov	r4,lr
	bl	getdy
	cmp	r0,#0           ;if error,
	blne	readdy		;  don't readdy
	Return  , LinkNotStacked,, r4

ady_shut
        FunctionEntry
	mov	r0,#1		;remove dy
	ldr	r1,num		;area no
	swi	&20066		;OS_DynamicArea
	movvc	r0,#0		;if no error, clear r0
	Return

ady_malloc ; (size_t size)

        FunctionEntry "r4"
	ldr	r3,malsize	;how much mallocced so far?
	add	r3,r3,r0	;new size
	ldr	r2,size		;actual size
	sub	r1,r3,r2	;extra size wanted
	mov	r4,r0		;copy size
;	mov	r5,r1		;copy diff
	ldr	r0,num		;area no
	swi	&2002a		;OS_ChangeDynamicArea
	movvs	r0,#0		;error - return NULL
	Return  "r4",, VS       ;error - return without changing stuff
	add	r2,r2,r1	;find new size
	str	r2,size		;store size
	str	r3,malsize	;store amount mallocced
	ldr	r0,base
	add	r0,r3,r0
	sub	r0,r0,r4        ;find offset
	mov	r1,#0
	mov	r2,r4
	bl	memset          ;fill with zeros
	Return  "r4"

	END
