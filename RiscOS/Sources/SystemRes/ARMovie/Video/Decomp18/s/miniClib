;
; BJGA 21/12/2000: Since we only actually need four Clib functions in the
; Replay codec build, we can cut the code size almost in half by using these
; local implementations, instead of linking with ansilib. In the past, the
; codec was indeed linked with ansilib, but the library was never initialised;
; this is probably responsible for the fact that the caller's heap is corrupted
; if you try to link with a modern ansilib, rather than the one supplied with
; Cv5 - it was working by accident rather than by design.
;

        EXPORT  _sprintf
        EXPORT abs
        EXPORT  __rt_sdiv
        EXPORT memset

        AREA   |Asm$$Code|, CODE, READONLY

        GET    Hdr:ListOpts
        GET    Hdr:APCS.<APCS>
        GET    Hdr:Macros
        GET    Hdr:System

; -----------------------------------------------------------------------------
; _sprintf: cut-down sprintf to *just* meet our requirements: %x only supported
; -----------------------------------------------------------------------------

_sprintf
; a1 -> destination string
; a2 -> format string
; variadic arguments thereafter
        Push    "a3, a4"
        MOV     a4, sp          ; a4 -> parameters on stack
        Push    "lr"
        MOV     ip, #0          ; ip = number of chars written
01      LDRB    lr, [a2], #1
        TEQ     lr, #'%'
        STRNEB  lr, [a1], #1
        BLEQ    substitute      ; returns with lr non-zero
        TEQ     lr, #0
        ADDNE   ip, ip, #1
        BNE     %BT01
        MOV     a1, ip          ; return number of chars
        Pull    "lr"
        ADD     sp, sp, #2*4
        Return  ,LinkNotStacked

substitute
        Push    "a2, lr"
        MOV     r1, a1
        LDR     r0, [a4], #4
        MOV     r2, #9          ; assume enough space for 8 digits + null
        SWI     XOS_ConvertHex8
        MOV     a1, r1
        Pull    "a2, lr"
        ADD     a2, a2, #2-1    ; assume specifier was exactly 2 chars
        ADD     ip, ip, #8-1
        MOV     pc, lr

; -----------------------------------------------------------------------------
; abs: trivial
; -----------------------------------------------------------------------------

abs
        TEQ     a1, #0
        RSBMI   a1, a1, #0
        Return  ,LinkNotStacked

; -----------------------------------------------------------------------------
; __rt_sdiv: pinched from sources to _kernel_sdiv in RISC_OSLib.kernel.s.k_body
; but new dividebyzero code, because we have no error handler!
; -----------------------------------------------------------------------------

__rt_sdiv
; Signed divide of a2 by a1: returns quotient in a1, remainder in a2
; Quotient is truncated (rounded towards zero).
; Sign of remainder = sign of dividend.
; Destroys a3, a4 and ip
; Negates dividend and divisor, then does an unsigned divide; signs
; get sorted out again at the end.

        ANDS    a3, a1, #&80000000
        RSBMI   a1, a1, #0
        EORS    a4, a3, a2, ASR #32
        RSBCS   a2, a2, #0
        RSBS    ip, a1, a2, LSR #3
        BCC     s_sh2
        RSBS    ip, a1, a2, LSR #8
        BCC     s_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&FF000000
        RSBS    ip, a1, a2, LSR #4
        BCC     s_sh3
        RSBS    ip, a1, a2, LSR #8
        BCC     s_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&00FF0000
        RSBS    ip, a1, a2, LSR #8
        MOVCS   a1, a1, LSL #8
        ORRCS   a3, a3, #&0000FF00
        RSBS    ip, a1, a2, LSR #4
        BCC     s_sh3
        RSBS    ip, a1, #0
        BCS     dividebyzero
s_loop  MOVCS   a1, a1, LSR #8
s_sh7   RSBS    ip, a1, a2, LSR #7
        SUBCS   a2, a2, a1, LSL #7
        ADC     a3, a3, a3
s_sh6   RSBS    ip, a1, a2, LSR #6
        SUBCS   a2, a2, a1, LSL #6
        ADC     a3, a3, a3
s_sh5   RSBS    ip, a1, a2, LSR #5
        SUBCS   a2, a2, a1, LSL #5
        ADC     a3, a3, a3
s_sh4   RSBS    ip, a1, a2, LSR #4
        SUBCS   a2, a2, a1, LSL #4
        ADC     a3, a3, a3
s_sh3   RSBS    ip, a1, a2, LSR #3
        SUBCS   a2, a2, a1, LSL #3
        ADC     a3, a3, a3
s_sh2   RSBS    ip, a1, a2, LSR #2
        SUBCS   a2, a2, a1, LSL #2
        ADC     a3, a3, a3
s_sh1   RSBS    ip, a1, a2, LSR #1
        SUBCS   a2, a2, a1, LSL #1
        ADC     a3, a3, a3
s_sh0   RSBS    ip, a1, a2
        SUBCS   a2, a2, a1
        ADCS    a3, a3, a3
        BCS     s_loop
        EORS    a1, a3, a4, ASR #31
        ADD     a1, a1, a4, LSR #31
        RSBCS   a2, a2, #0
        Return  ,LinkNotStacked
dividebyzero
        TST     a4, #1:SHL:30
        RSBNE   a2, a2, #0      ; remainder is original dividend
        MOV     a1, #&80000000
        SUBEQ   a1, a1, #1      ; quotient is nearest possible to +/- infinity
        Return  ,LinkNotStacked

; -----------------------------------------------------------------------------
; memset: pinched from RISC_OSLib.s.memcpset
; -----------------------------------------------------------------------------

memset
src     RN    a2
dst     RN    a1
n       RN    a3
tmp1    RN    a4
tmp3    RN    ip
        FunctionEntry "dst"             ; Must return original dst.
        SUBS    n, n, #4                ; need at least 4 bytes
        BMI     TrailingBytes           ; < 4 bytes to go

        ; word align the dst - first find out how many bytes
        ; must be stored to do this.

        ANDS    tmp3, dst, #3           ; eq means aligned!
        BNE     AlignDst

        ; here when destination is word-aligned,
        ; number of bytes to transfer is (n+4), n is >= 0.

DstAligned
        AND     src, src, #&ff
        ORR     src, src, src, ASL #8
        ORR     src, src, src, ASL #16
        MOV     tmp1, src
        MOV     tmp3, src
        MOV     lr, src

        SUBS    n, n, #12-4             ; 12 bytes or more?
        BLT     TrailingWords

        SUBS    n, n, #32-12            ; n+32 to go.
        BLT     %F1

0       STMIA   dst!, {src, tmp1, tmp3, lr}
        STMIA   dst!, {src, tmp1, tmp3, lr}
        SUBS    n, n, #32
        BGE     %B0
        ; see if we can handle another 8

        CMN     n, #16
        STMGEIA dst!, {src, tmp1, tmp3, lr}
        SUBGE   n, n, #16

        ; note that we still have (n+32) bytes to go, and this is <16.

        ; Here when there are fewer than 16 bytes to go.

1       ADDS    n, n, #32-12               ; (n-12) to go

        ; Ok - do three words at a time.

2       STMGEIA dst!, {tmp1, tmp3, lr}
        SUBGES  n, n, #12
        BGE     %B2
        ; (n-12) bytes to go - 0, 1 or 2 words.  Check
        ; which.

TrailingWords
        ADDS    n, n, #12-4             ; (n-4) to go
        BLT     TrailingBytes        ; < 4 bytes to go
        SUBS    n, n, #4
        STRLT   src, [dst], #4
        STMGEIA dst!, {src, tmp1}
        SUBGE   n, n, #4

        ; Here with less than 4 bytes to go

TrailingBytes
        ADDS    n, n, #4
        Return  "a1",, EQ               ; 0 bytes
        CMP     n, #2                   ; 1, 2 or 3 bytes
        STRB    src, [dst], #1
        STRGEB  src, [dst], #1
        STRGTB  src, [dst], #1
        Return  "a1"                    ; recover old dst value

; word align dst - tmp3 contains current destination
; alignment.  We can store at least 4 bytes here.

AlignDst
        RSB     tmp3, tmp3, #4          ; 1-3 bytes to go
        CMP     tmp3, #2
        STRB    src, [dst], #1
        STRGEB  src, [dst], #1
        STRGTB  src, [dst], #1
        SUBS    n, n, tmp3              ; check number to go
        BLT     TrailingBytes           ; less than 4 bytes
        B       DstAligned

        END
