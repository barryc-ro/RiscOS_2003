;**************************************************************************
;
;  File:        s.tryoutFYUV
;
;  Description: Fast YUV->YUYV image converter using additive lookup tbls
;
;  Version:     0.0 22 Sep 1997
;
;  Author:      Robin Watts (Robin@wss.co.uk)
;		based on Pete Goodliffes code for tryoutFast
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; Takes data from H263 codec (in YYYYYYYY....UUUU.....VVVV.... format) to
; YUYV format

	EXPORT	doframe				; the function that does this

; predefined constants from the including file
;   xpix - location of image x size variable
;   ypix - location of image y size variable

;***************************************************************************
; doframe
;     The format conversion function: takes YUV source from the h263
;     decompressor and converts it to YUYV suitable for Replay
;     Called from C code, so use APCS
;     IN:  r0 - source image
;          r1 - destination buffer
;          r2 - 0 (previous pic is ignored, stored in internal buffer)
;          r3 - pixel dither lookup table
;
;     OUT: r0 - do I care ? .. it doesn't seem to be used by the C code

ickle
	DCD	0
bickle
	DCD	0
doframe
	ldr	r2, xpix
        FunctionEntry "r4-r11"                  ; APCS

	ldr	r4, ypix			; y loop counter
	ldmia	r0, {r10,r11,r14}		; load the src image struct
	str	r4,ycount

	; since there is one U&V value for a 2x2 square of Y values
	; decoding is implemented as a loop over y rows step 2

	; the source image pointer is in fact a pointer to a structure
	; describing the three separate Y, U, & V buffers
	; therefore, load the buffer pointers into r10, r11 and r14
	;   r10 - Y buffer pointer, 1 byte per pixel
	;   r11 - U buffer pointer, 1 byte per 4 pixel square
	;   r14 - V buffer pointer, 1 byte per 4 pixel square

	; we build two rows at once: to do this we need a second output
	; pointer, r9 and a second Y input pointer, r8
	add	r9, r1, r2, LSL #1
	add	r8, r10, r2
	add	r8, r8, #64
loop_y
	MOV	r4,#&80
	ORR	r4,r4,r4,LSL#8
loop_x	; loop over for every pixel in these 2 horizontal lines
	; r0,r3,r5,r6,r7,r12  = scratch
	; r1 = output ptr (1)
	; r2 = xcount
	; r4 = ycount
	; r8 = input ptr Y(2)
	; r9 = output ptr (2)
	; r10= input ptr Y(1)
	; r11= input ptr U
	; r14= input ptr V

	; process U and V values for the four pixel square
	ldr	r5, [r11], #2			; r5 = x x U1 U0
	ldr	r7, [r14], #2			; r7 = x x V1 V0
	eor	r5, r5, r4			; swap -127..128 to 0..255
	eor	r7, r7, r4			;   for U and V values
	; Y1 and Y2 values (line 1)
	ldr	r6, [r10], #4		; r6 = Y3 Y2 Y1 Y0
	AND	r12,r5,#&FF		; r12=          U0
	ORR	r12,r12,r7,LSL#16	; r12= V1 V0  0 U0
	BIC	r12,r12,#&FF000000	; r12=    V0  0 U0

	AND	r5,r5,#&FF00		; r5 =       U1  0
	ORR	r5,r5,r7,LSL#16		; r5 = V1 V0 U1  0
	BIC	r5,r5,#&FF0000		; r5 = V1  0 U1  0

	AND	r0,r6,#&FF		; r0 =          Y0
	AND	r3,r6,#&FF00		; r1 =       Y1  0
	ORR	r0,r0,r3,LSL#8		; r0 =    Y1  0 Y0
	ORR	r0,r0,r12,LSL#8		; r0 = V0 Y1 U0 Y0

	AND	r7,r6,#&FF0000		; r7 =    Y2  0  0
	AND	r6,r6,#&FF000000	; r6 = Y3  0  0  0
	ORR	r6,r6,r7,LSR#8		; r6 = Y3  0 Y2  0
	ldr	r7, [r8], #4		; r7 = y3 y2 y1 y0
	ORR	r6,r5,r6,LSR#8		; r6 = Y3 V1 Y2 U1

	STMIA	r1!,{r0,r6}

	; Y3 and Y4 values (line 2)
	AND	r0,r7,#&FF		; r0 = y0
	AND	r3,r7,#&FF00		; r1 = y1
	ORR	r0,r0,r3,LSL#8		; r0 = y1 0  y0
	ORR	r0,r0,r12,LSL#8		; r0 = V0 y1 U0 y0

	AND	r6,r7,#&FF0000		; r6 =    Y2  0  0
	AND	r7,r7,#&FF000000	; r7 = Y3  0  0  0
	ORR	r7,r7,r6,LSR#8		; r7 = Y3  0 Y2  0
	ORR	r7,r5,r7,LSR#8		; r7 = Y3 V1 Y2 U1

	STMIA	r9!,{r0,r7}

	subs	r2, r2, #4			; loop back to loop_x
	bne	loop_x

	; make r1&r9, r8&r10 skip two lines

	ldr	r4, ycount
	ldr	r2, xpix
	subs	r4, r4, #2			; decrement y counter, loop
	strne	r4,ycount
	mov	r1, r9				; new line 1 = old line 2
	add	r9, r1, r2, LSL #1		; new line 2
	add	r10, r8, #64
	add	r8, r10, r2
	add	r8, r8, #64
	add	r11, r11, #32
	add	r14, r14, #32
	; end x loop
	bne	loop_y
	; end y loop

        Return  "r4-r11"                        ; APCS return from doframe
ycount
	DCD	0

;**************************************************************************
; function entry point
;**************************************************************************

; this is a blank patch table since no colour patching is used

PatchTable
	DCD	-1

;**************************************************************************

	END
