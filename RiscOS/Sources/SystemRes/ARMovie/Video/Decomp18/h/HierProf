/*
	#   # #             ####                ##
	#   #               #   #              #  #
	#   # #  ###  # ##  #   # # ##   ###   #
	##### # #   # ##  # ####  ##  # #   # ###  
	#   # # ##### #     #     #     #   #  #
	#   # # #     #     #     #     #   #  #   
	#   # #  ###  #     #     #      ###   #   
	___________________________________________


Author:		Copyright © 1995, 1996 Julian Smith, Warm
		Silence Software.

Purpose:	Hierachical profiling.

$Id$

*/

#ifndef __HierProf_HierProf_h
#define	__HierProf_HierProf_h


#ifdef __cplusplus
extern "C"	{
#endif


#include <stdio.h>
#include <stdarg.h>



void	HierProf_ProfileAllFunctions( void);
/*
Call this to make HierProf search through the executable at runtime and
alter the code so that all functions are profiled.

Note that this method of adding profiling will ignore all functions
which don't have there function-names embedded in the code (eg C code
compiled with Acorn CC's -ff option).

Any functions whose names match previous calls to
HierProf_IgnoreFunctions will be ignored.
 */


int	HierProf_IgnoreFunctions( char* names);
/*
Makes future call to HierProf_ProfileAllFunctions ignore all functions
which match any space-separated wild-carded specification within the
string pointed to by 'names'.

'#' matches any character, '*' matches any number of characters.

Note that a copy is /not/ made of the string pointed to by 'names', so
this string should be permanent.

Returns 0 if ok, 1 if failed (eg out of memory).
 */


#define	HierProf_ProfileFunction( fnname)	HierProf__ProfileFunction( (HierProf__genericfn) fnname, #fnname)
/*
Call this to profile an individual function.
Useful for functions which don't use any stack - cc doesn't bother to
embed the function name in code for such functions so
HierProf_ProfileAllFunctions() doesn't find them.

Note that 'fnname' is profiled even if it matches any spec passed
previously to HierProf_IgnoreFunctions.

Returns 0 if fnname was succesfully found and modified for profiling.
Non-zero indicates an error.
 */


typedef	void (*HierProf__genericfn)( void);
/*
For internal use.
 */

int	HierProf__ProfileFunction( HierProf__genericfn fn, const char* name);
/*
For internal use.
 */



/*
The following are to control where profile output will be sent. The
default is to send it to stderr using the function fprintf. You can send
profiling output to your own function if you like.
 */



typedef int (*HierProf_printfnptr)( void *where, const char *format, va_list args);
/* 
A pointer to a vfprintf-type function, except the first argument is a
(void *) rather than a (FILE *).
 */

void	HierProf_InitOuterNesting( void);
/*
Tells Profile to start its outer loop. This is done automatically at the
beginning of the first profile loop if you don't call this function
yourself.
 */

void	HierProf_OutputToFunction( HierProf_printfnptr function, void *where);
/*
Send subsequent profiles to this function. 'where' will be sent as the
first argument to 'function'. e.g. to send output to stderr, use
HierProf_OutputToFunction( (HierProf_printfnptr) fprintf, stderr);
 */

void	HierProf_OutputToUniqueFile( void);
/*
Send subsequent profiles to filename returned by ANSI C's tmpnam()
function. With Acorn C, this will be a file in the directory
<Wimp$ScrapDir>
 */

void	HierProf_OutputToFilenamef( const char *fmt, ...);
/*
Send subsequent profiles to this filename.
 */

void	HierProf_OutputToFilestream( FILE *stream);
/* 
Send subsequent profiles to this filestream
 */

void	HierProf_DontOutput( void);
/*
Make subsequent profiles not output anything.
 */

void	HierProf_OutputNow( void);
/*
Sends a full profile resume to whatever is the current output
stream/function/filename
 */



#define HierProf_OUTPUT_FORMAT_VERSION	334
/*
Used in output to identify output format.
 */



 
typedef unsigned int	HierProf_clock_t;
HierProf_clock_t	HierProf_Clock_GetTimeFreeze( void);

typedef int	HierProf_ref_type;
/*
This is a type which will be used to contain a unique reference to a
function.
 */

#define		HierProf_MAXREF	65535
/*
This is the maximum number of functions. Should be INT_MAX or something.
 */


/* These are called by the HierProf block start/stop macros	*/

HierProf_ref_type	HierProf__InitBlock( const char* name);

void	HierProf__StartClock( HierProf_ref_type ref, HierProf_clock_t t);
void	HierProf__StopClock( HierProf_ref_type ref, HierProf_clock_t t);

void	HierProf__StartClock2( const char* fnname);
void	HierProf__StopClock2( const char* fnname);




#ifdef HierProf_PROFILE

	
	#define	HierProf__StartBlock( name, ref)				\
		{								\
		static HierProf_ref_type	ref = 0;			\
		if ( ref==0)	ref = HierProf__InitBlock( name);		\
		HierProf__StartClock( ref, HierProf_Clock_GetTimeFreeze());	\
		{
	
	#define	HierProf__StopBlock( ref)			\
		}						\
		HierProf__StopClock( ref, HierProf_Clock_GetTimeFreeze());	\
		}
	
	#define	HierProf_Start( name)		HierProf__StartBlock( name, HierProf__ref)
	#define	HierProf_Stop()			HierProf__StopBlock( HierProf__ref)
	
	#define	HierProf_FnStart( name)		HierProf__StartBlock( name, HierProf__fnref)
	#define	HierProf_VoidFnStop()		HierProf__StopBlock( HierProf__fnref)
	#define	HierProf_NonVoidFnStop()	}}
	
	#define	HierProf_ReturnValue( x)						\
		{									\
		HierProf__StopClock( HierProf__fnref, HierProf_Clock_GetTimeFreeze());	\
		return x;								\
		}
	
	#define	HierProf_ReturnVoid()							\
		{									\
		HierProf__StopClock( HierProf__fnref, HierProf_Clock_GetTimeFreeze());	\
		return;									\
		}
	
	#define	HierProf_DontProfile()
	

#else

	#define	HierProf_Start( name)
	#define	HierProf_Stop()
	#define	HierProf_FnStart( name)
	#define	HierProf_VoidFnStop()
	#define	HierProf_NonVoidFnStop()
	#define	HierProf_ReturnValue( x)	return x;
	#define	HierProf_ReturnVoid()		return;
	
	#define	HierProf_InitOuterNesting()
	
	#define	HierProf_OutputToFunction( function, where)
	#define	HierProf_OutputToUniqueFile()
	#define	HierProf_OutputToFilenamef (1) ? 0 : printf
	#define	HierProf_OutputToFilestream( stream)
	
	#define	HierProf_DontOutput()
	#define	HierProf_OutputNow()
	
	#define	HierProf_DontProfile()
	
	#define	HierProf_ProfileAllFunctions()
	#define	HierProf_IgnoreFunctions( names)	0
	#undef	HierProf_ProfileFunction
	#define	HierProf_ProfileFunction( fnname)

#endif


#ifdef __cplusplus
}
#endif


#endif
