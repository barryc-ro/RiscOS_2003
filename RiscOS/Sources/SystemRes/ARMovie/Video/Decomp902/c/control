
// initalise it

#include "datatype.h"
#include "indeodefs.h"

#pragma -s1

extern void *malloc(int s);
extern void free(void *blk);

extern void yuv_frame(int xres, int yres, PU8 ybuf, PU8 ubuf, PU8 vbuf, int *out, char *table);

// --------------------------------------------------------------------------------

static I32 	startpt[6];

DECINSTINFO pinst_;
DECINSTINFO *pinst = &pinst_;

static int globbuf;

// --------------------------------------------------------------------------------

extern char *ptr_corrector_type;
extern char *ptr_correction;
extern char *ptr_correctionloworder;
extern char *ptr_correctionhighorder;

char *correction_tables;

int InitEntry(int xs, int ys, int parm, int *list)
{
    I32	    	    ywid, uwid;
    I32	    	    yhite, uhite;
    I32	    	    yplusphantom;
    I32	    	    uplusphantom;
    NaturalInt	    i;

       // putu32(get_zi());

    pinst->InstanceTables = malloc(sizeof(LARGEDECINSTINFO));

    pinst->xres = xs;
    pinst->yres = ys;
    //--
    ywid  = (pinst->xres+(I32)3)&(I32)~3;
    yhite = (pinst->yres+(I32)3)&(I32)~3;
    uwid  = ((ywid+3)+3)&~3;
    uhite = ((yhite+3)+3)&~3;
    //--
    yplusphantom = ywid * yhite + ywid;
    uplusphantom = uwid * uhite + uwid;
    //--
    pinst->InstanceTables->lpYUVplanebuffer = malloc((int)(2*yplusphantom + 4*uplusphantom));
    //--
    startpt[0] = ywid;
    startpt[1] = yplusphantom + uwid;
    startpt[2] = startpt[1] + uplusphantom;
    startpt[3] = startpt[2] + uplusphantom - uwid + ywid;
    startpt[4] = startpt[3] + yplusphantom - ywid + uwid;
    startpt[5] = startpt[4] + uplusphantom;
    //--
    for (i = 0; i < ywid; i++)
    {
    	pinst->InstanceTables->lpYUVplanebuffer[i] =
    	pinst->InstanceTables->lpYUVplanebuffer[i+startpt[3]-ywid] = 0x40;
    }
    for (i = 0; i < uwid; i++)
    {
    	pinst->InstanceTables->lpYUVplanebuffer[i+startpt[1]-uwid] =
    	pinst->InstanceTables->lpYUVplanebuffer[i+startpt[2]-uwid] =
    	pinst->InstanceTables->lpYUVplanebuffer[i+startpt[4]-uwid] =
    	pinst->InstanceTables->lpYUVplanebuffer[i+startpt[5]-uwid] = 0x40;
    }

    correction_tables = malloc(84*1024);
    loadfile("<ARMovie$Dir>.Decomp902.correctors",correction_tables);
    ptr_corrector_type 	    	= correction_tables;
    ptr_correction  	    	= correction_tables+(3*1024*sizeof(int));
    ptr_correctionloworder  	= correction_tables+((3+6)*1024*sizeof(int));
    ptr_correctionhighorder  	= correction_tables+((3+6+6)*1024*sizeof(int));
    return 0;
}

int ShutEntry(void)
{
    free(pinst->InstanceTables->lpYUVplanebuffer);
    free(pinst->InstanceTables);
    free(correction_tables);
    return 0;
}


char *DecompEntry(char *source, char *image, char *prev, char *table)
{
    int *header = (int*)source;
    char *delta = source+16;
    int	    xs, ys;
    int size, loop;

    FPU8    	pIbits;
    BsHdrSt 	*BitStreamHeader;
    PU8	    	Plane;
    FPI8    	McPtr;
    PU8	    	DataStreamPtr;
    NaturalInt	i,j,t;
    NaturalInt	vert, horz;
    U32	    	current_frame;

    xs = header[2];
    ys = header[3];
    size = xs*ys;

//  puts("decomp902");

  if ((header[0]==0) ) {
    	int	    *op = (int*)image;
    	int	    *ip = (int*)prev;
        // null frame - just copy from previous buffer
    	for (loop=0; loop<size; loop++)
    	    op[loop]=ip[loop];
    	return source;
    }




    pIbits = (FPU8)delta;
    BitStreamHeader = (BsHdrSt *)(pIbits + sizeof(IFRAMEHEADER));
    current_frame = ((IFRAMEHEADER *)pIbits)->frmnum;

  //if (current_frame>0) {
  //  	int	    *op = (int*)image;
  //  	int	    *ip = (int*)prev;
  //      // null frame - just copy from previous buffer
  //  	for (loop=0; loop<size; loop++)
  //  	    op[loop]=ip[loop];
  //  	return source+header[0]-12;
  //}

    //putu32(current_frame);

    // Check version
//    if (BitStreamHeader->VersionNumber != VERSION_NUMBER) return 0;
    //  No half pel motion compensation
//    if (BitStreamHeader->Flags & (BS_8BIT | BS_MC_H_HALF | BS_MC_V_HALF)) return 0;
    // Initialise the VQ Table Pairs for this frame
    if (BitStreamHeader->Datasize != NULL_FRAME_DATASIZE) {
        // save buffer we're using
        pinst->bitStreamHeaderFlags = BitStreamHeader->Flags;
    } else {
	// Use the buffer in previous K or P frame which is previously stored.
	if (pinst->bitStreamHeaderFlags & BS_BUFFER)
	    BitStreamHeader->Flags |= BS_BUFFER;
	else
	    BitStreamHeader->Flags &= ~BS_BUFFER;
	}

    //--
    // Do the planes: U,  V,  Y.
    for (i=2; i>=0; i--) {
        // Don't decode a NULL frame.
        if (BitStreamHeader->Datasize == NULL_FRAME_DATASIZE) continue;

        Plane = ((PU8)BitStreamHeader) + BitStreamHeader->DataOffset[i];

        // Linearise the Motion Vectors to be used by this plane.
        McPtr = (PI8)(Plane + sizeof(U32));

        t   = *(Plane+3); t<<=8;
        t  |= *(Plane+2); t<<=8;
        t  |= *(Plane+1); t<<=8;
        t  |= *Plane;

        for (j=0; j<(NaturalInt)t; j++) {
            vert = *McPtr++;
            horz = *McPtr++;
            pinst->InstanceTables->MotionVector[j] = (U16)(vert*160+horz);
        }
        DataStreamPtr = (PU8)McPtr;
        //
        globbuf = (BitStreamHeader->Flags & BS_BUFFER ? 3 : 0);

        XDecodePlane(pinst->InstanceTables->lpYUVplanebuffer+startpt[BitStreamHeader->Flags & BS_BUFFER ? i+3 : i],
		pinst->InstanceTables->lpYUVplanebuffer+startpt[BitStreamHeader->Flags & BS_BUFFER ? i : i+3],
		((((pinst->xres) >> (i ? 2 : 0)) + 3) & ~3),
		((((pinst->yres) >> (i ? 2 : 0)) + 3) & ~3),
		DataStreamPtr,   /* Data Stream */
		BitStreamHeader->CbOffset,
		BitStreamHeader->AltQuant,
		((mv_ptr) (Plane+4)),
		(i ? 40 : 160));
    } /* for(i... */

    /* --------------------------------------------------------------------------------
     * CONVERSION STEP
    */

    //{
    //	int	    *op = (int*)image;
    //	int	    *ip = (int*)prev;
    //    // null frame - just copy from previous buffer
    //	for (loop=0; loop<size; loop++)
    //	    op[loop]=ip[loop];
    //	return source;
    //}


    yuv_frame(	pinst->xres,
    	    	pinst->yres,
    	    	pinst->InstanceTables->lpYUVplanebuffer+startpt[BitStreamHeader->Flags & BS_BUFFER ? 3 : 0],
    	    	pinst->InstanceTables->lpYUVplanebuffer+startpt[BitStreamHeader->Flags & BS_BUFFER ? 5 : 2],
    	    	pinst->InstanceTables->lpYUVplanebuffer+startpt[BitStreamHeader->Flags & BS_BUFFER ? 4 : 1],
    	    	(int*)image,
    	    	table);

//    {
//      char *fname="adfs::4.$.frames.frame00";
//      fname[22]=(current_frame/16)+'a';
//      fname[23]=(current_frame%16)+'a';
//      savemem(image,image+(pinst->xres*pinst->yres),fname);
//    }

     //return source;//+header[0]-12;
//   puts("ok");

   return source+header[0]-12;
}

