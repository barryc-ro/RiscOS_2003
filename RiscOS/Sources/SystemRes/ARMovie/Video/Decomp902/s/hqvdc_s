; hqvdc_s.s
; Indeo codec assembler parts.

	GET hdr.ind_bits

	AREA |s$$hqvdc|, CODE, READONLY

; ************************************************************************
; * copyQuad
; * Copy a column of quads.
; ********************************************************************************
	EXPORT copyQuad
copyQuad
	; r0 	PU32 dst
	; r1 	PU32 src
	; r2	NaturalInt nrows
	; r5	NaturalInt pitch
	;
	; r4 scratch
	; r5 scratch
	
_loop_copyQuad	m_copyQuad r0,r1,r2,r5,r3,r10
	movs	pc, lr

; ********************************************************************************
; * copyOct
; * Copy a column of octets
; ********************************************************************************
	EXPORT copyOct
copyOct
	; r0 	PU32 dst
	; r1 	PU32 src
	; r2	NaturalInt nrows
	; r3	NaturalInt pitch
	;
	; r4 scratch
	; r5 scratch
	; r6 scratch

	stmfd	sp!, {r4,r5,r6,lr}
_loop_copyOct m_copyOct r0,r1,r2,r3,r4,r5,r6
	ldmfd	sp!, {r4,r5,r6,pc}^

; ********************************************************************************
; * fillQuad
; * Set each quad in column to a specified value.
; ********************************************************************************
;	EXPORT fillQuad
;fillQuad
;	; r0 	PU32 dst
;	; r1 	U32 value
;	; r2	NaturalInt nrows
;	; r3	NaturalInt pitch
;
;_loop_fillQuad	m_fillQuad r0,r1,r2,r5
;	movs	pc, lr

; ********************************************************************************
; * fillOct
; * Set each octet in column to a specified value.
; ********************************************************************************
;	EXPORT fillOct
;fillOct
;	; r0 	PU32 dst
;	; r1 	U32 value1
;	; r2 	U32 value2
;	; r3	NaturalInt nrows
;	; r5	NaturalInt pitch
;	;
;_loop_fillOct m_fillOct r0,r1,r2,r3,r5
;	movs	pc, lr
	
; ********************************************************************************
; * interpolateQuad
; * set each pixel in a quad to avg of pixels above and below
; ********************************************************************************
;	EXPORT interpolateQuad
;interpolateQuad
;	; r0	PU32 q
;	; r1	NaturalInt pitch
;	;
;	; r2	*(q-pitch)
;	; r3	*(q+pitch) then scratch
;;	ldr	r2, [r0, -r1, lsl#2]
;;	ldr	r3, [r0, r1, lsl#2]
;;	mov	r2, r2, lsr#1
;;	add	r2, r2, r3, lsr#1
;;	bic	r2, r2, #&80000000
;;	bic	r2, r2, #&00800000
;;	bic	r2, r2, #&00008000
;;	bic	r2, r2, #&00000080
;;	str	r2, [r0]
;
;	m_interpolateQuad r0,r1,r2,r3
;	movs	pc, lr

; ********************************************************************************
; * interpolateOct
; * set each pixel in an octet to avg of pixels above and below
; ********************************************************************************
	EXPORT interpolateOct
interpolateOct
;	; r0	PU32 q
;	; r1	NaturalInt pitch
;	;
;	; r2	*(q-pitch)
;	; r3	*(q+pitch) then scratch
;	ldr	r2, [r0, -r1, lsl#2]
;	ldr	r3, [r0, r1, lsl#2]
;	mov	r2, r2, lsr#1
;	add	r2, r2, r3, lsr#1
;	bic	r2, r2, #&80000000
;	bic	r2, r2, #&00800000
;	bic	r2, r2, #&00008000
;	bic	r2, r2, #&00000080
;	str	r2, [r0],#4 ; *o++=...
;	; second quad
;	ldr	r2, [r0, -r1, lsl#2]
;	ldr	r3, [r0, r1, lsl#2]
;	mov	r2, r2, lsr#1
;	add	r2, r2, r3, lsr#1
;	bic	r2, r2, #&80000000
;	bic	r2, r2, #&00800000
;	bic	r2, r2, #&00008000
;	bic	r2, r2, #&00000080
;	str	r2, [r0]
	m_interpolateOct r0,r1,r2,r3
	movs	pc, lr

; ********************************************************************************
; * monoQuad
; * Set all of the pixels in a 4x4 or 4x8 block to the same value.
; * Return non-zero value if "repeat" bit was set in monotone value.
; ********************************************************************************
;	EXPORT monoQuad
;monoQuad
;	; r0	PU32 dst
;	; r1	U8 pixel
;	; r2	NaturalInt nrows
;	; r3	NaturalInt pitch
;	;
;	; r4 (U32) quad
;	stmfd	sp!,{r4,lr}
;	and	r4, r1, #&7f
;	orr	r4, r4, r4, lsl#8
;	orr	r4, r4, r4, lsl#16
;	mov	r3, r3, lsl#2
;_loop_monoQuad
;	str	r4, [r0],r3
;	str	r4, [r0],r3
;	str	r4, [r0],r3
;	str	r4, [r0],r3
;	subs	r2, r2, #4	; nrows can only be 4 or 8.
;	bgt	_loop_monoQuad
;	and	r0, r1, #&80
;	ldmfd	sp!,{r4,pc}^

; ********************************************************************************
; * monoOct
; * Set all of the pixels in an 8x8 block to the same value.
; * Return non-zero value if "repeat" bit was set in monotone value.
; ********************************************************************************
;	EXPORT monoOct
;monoOct
;	; r0	PU32 dst
;	; r1	U8 pixel
;	; r2	pitch
;	;
;	; r3	(U32) quad
;	stmfd	sp!,{r4,lr}
;	m_monoOct	r0,r1,r2,r3,r0
;	ldmfd	sp!,{r4,pc}^

; ********************************************************************************
; * correctDyads
; *	Set a quad to a corrected prediction value by applying corrections to
; *	each of the two dyads in the prediction quad.
; ********************************************************************************
	EXPORT correctDyads
correctDyads
	; r0 PU32 dst  = (PU16) to
	; r1 PU32 src  = (PU16) from
	; r2 PU32 table
	; r3 NaturalInt index01
	; [0] NaturalInt index23
	;
	; r4 scratch
	; r5 t
	; r6 u
	stmfd	sp!, {r4-r7,lr}
	ldr	r4, [sp, #20]
	m_correctDyads r0,r1,r2,r3,r4,r5,r6,r7
	;
	ldmfd	sp!, {r4-r7,pc}^

; ********************************************************************************
; * correctDyadsTwice
; *
; *	Correct 2 lines of quads as follows:
; *		Set a quad to a corrected prediction value by applying corrections to
; *		each of the two dyads in the prediction quad.  Repeat the operation
; *		with the same correctors on the quad in the next row down.
; ********************************************************************************
	EXPORT correctDyadsTwice
correctDyadsTwice
        STMDB    sp!,{r4-r7,lr}
        MOV      lr,r0
        MOV      ip,r1
        ADD      r5,sp,#&14
        LDMIA    r5,{r4,r5}
        mov	 r7, #&ff
        orr	 r7, r7, #&ff00
        LDR      r3,[r2,r3,LSL #2]
        and	 r3, r3, r7
        LDR      r2,[r2,r4,LSL #2]
        and	 r2, r2, r7
        LDRB     r4,[r1,#1]
        LDRB     r6,[r1,#0]
        ORR      r4,r6,r4,LSL #8
        and	 r4, r4, r7
        LDRB     r6,[r1,#3]
        MOV      r6,r6,LSL #8
        LDRB     ip,[ip,#2]
        ORR      ip,ip,r6
        and	 ip, ip, r7
        ADD      r4,r4,r3
        STRB     r4,[lr,#0]
        MOV      r4,r4,ASR #8
        STRB     r4,[lr,#1]
        ADD      ip,ip,r2
        STRB     ip,[lr,#2]
        MOV      ip,ip,LSR #8
        STRB     ip,[lr,#3]
        ADD      r0,r0,r5,LSL #2
        ADD      r1,r1,r5,LSL #2
        LDRB     ip,[r1,#1]
        LDRB     lr,[r1,#0]
        ORR      ip,lr,ip,LSL #8
        and	 ip, ip, r7
        LDRB     lr,[r1,#3]
        MOV      lr,lr,LSL #8
        LDRB     r1,[r1,#2]
        ORR      r1,r1,lr
        and	 r1, r1, r7
        ADD      r3,ip,r3
        STRB     r3,[r0,#0]
        MOV      r3,r3,LSR #8
        STRB     r3,[r0,#1]
        ADD      r1,r1,r2
        STRB     r1,[r0,#2]
        MOV      r1,r1,LSR #8
        STRB     r1,[r0,#3]
        LDMIA    sp!,{r4-r7,pc}^

; ********************************************************************************
; * correctOct
; *
; *	Set an octet to a corrected prediction value.
; ********************************************************************************
	EXPORT correctOct
correctOct
	; r0 PU32 src
	; r1 PU32 dst
	; r2 U32 val1
	; r3 U32 val2
	;
	; r4 scratch
	; r5 t or u
	stmfd	sp!, {r4-r5,lr}
	;
	tst	r1, #3
	beq	_aligned_correctOct
	;
	ldrb	r5, [r1, #3]
	ldrb	r4, [r1, #2]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1, #1]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1]
	add	r5, r4, r5, lsl#8
	;
	add	r2, r2, r5
	;
	ldrb	r5, [r1, #7]
	ldrb	r4, [r1, #6]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1, #5]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1, #4]
	add	r5, r4, r5, lsl#8
	;
	add	r3, r3, r5
	;
	stmia	r0, {r2,r3}
	ldmfd	sp!, {r4-r5, pc}^
	;
_aligned_correctOct
	ldmia	r1, {r4,r5}
	add	r4, r4, r2
	add	r5, r5, r3
	stmia	r0, {r4,r5}
	ldmfd	sp!, {r4-r5,pc}^

; ********************************************************************************
; correctOctTwice
; *
; *	Correct 2 lines of octets as follows:
; *		Add correction value to a prediction octet.  Repeat the operation with
; *		the same correctors on the octet in the next row down.
; ********************************************************************************
	EXPORT correctOctTwice
correctOctTwice
	; r0 PU32 dst
	; r1 PU32 src
	; r2 U32 val1
	; r3 U32 val2
	; [0] NaturalInt pitch
	;
	; r4 t or u
	; r5 scratch
	stmfd	sp!, {r4-r5,lr}
	;
	tst	r1, #3
	beq	_aligned_correctOctTwice
	;
	ldrb	r4, [r1, #3]
	ldrb	r5, [r1, #2]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1, #1]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1]
	add	r4, r5, r4, lsl#8
	;
	add	r4, r4, r2
	str	r4, [r0]
	;
	ldrb	r4, [r1, #7]
	ldrb	r5, [r1, #6]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1, #5]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1, #4]
	add	r4, r5, r4, lsl#8
	;
	add	r4, r4, r3
	str	r4, [r0,#4]
	;
	ldr	r5, [sp,#12]
	add	r0, r0, r5, lsl#2
	add	r1, r1, r5, lsl#2
	;
	ldrb	r4, [r1, #3]
	ldrb	r5, [r1, #2]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1, #1]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1]
	add	r4, r5, r4, lsl#8
	;
	add	r4, r4, r2
	str	r4, [r0]
	;
	ldrb	r4, [r1, #7]
	ldrb	r5, [r1, #6]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1, #5]
	add	r4, r5, r4, lsl#8
	ldrb	r5, [r1, #4]
	add	r4, r5, r4, lsl#8
	;
	add	r4, r4, r3
	str	r4, [r0,#4]
	;	
	ldmfd	sp!, {r4-r5,pc}^
	;
_aligned_correctOctTwice	
	ldmia	r1, {r4,r5}
	add	r4, r4, r2
	add	r5, r5, r3
	stmia	r0, {r4,r5}
	ldr	r4, [sp,#12]
	add	r1, r1, r4, lsl#2
	add	r0, r0, r4, lsl#2
	ldmia	r1, {r4,r5}
	add	r4, r4, r2
	add	r5, r5, r3
	stmia	r0, {r4,r5}
	ldmfd	sp!, {r4-r5,pc}^
	
; ********************************************************************************
; * correctQuadTwice
; *
; *	Correct 2 lines of quads as follows:
; *		Add correction value to a prediction quad.  Repeat the operation with
; *		the same correctors on the quad in the next row down.
; ********************************************************************************	
	EXPORT correctQuadTwice
correctQuadTwice
	; r0 PU32 dst
	; r1 PU32 src
	; r2 correct
	; r3 pitch
	;
	; r4 temp
	; r5 t
	stmfd	sp!, {r4-r5,lr}
	;
	tst	r1, #3
	beq	_aligned_correctQuadTwice
	;
	ldrb	r5, [r1, #3]
	ldrb	r4, [r1, #2]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1, #1]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1]
	add	r5, r4, r5, lsl#8
	add	r5, r5, r2
	str	r5, [r0]
	add	r0, r0, r3, lsl#2
	add	r1, r1, r3, lsl#2
	ldrb	r5, [r1, #3]
	ldrb	r4, [r1, #2]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1, #1]
	add	r5, r4, r5, lsl#8
	ldrb	r4, [r1]
	add	r5, r4, r5, lsl#8
	add	r5, r5, r2
	str	r5, [r0]
	;
	ldmfd	sp!, {r4-r5,pc}^
_aligned_correctQuadTwice
	ldr	r4, [r1], r3, lsl#2
	add	r4, r4, r2
	str	r4, [r0], r3, lsl#2
	ldr	r4, [r1]
	add	r4, r4, r2
	str	r4, [r0]
	ldmfd	sp!, {r4-r5,pc}^

; ********************************************************************************
; * getCount
; *
; *	Given an ESCAPE-count byte from the data stream, extract and return the
; *	count value.  Set the value pointed to by 'type' to the type of ESCAPE
; *	(SKIP or COPY) indicated by the count byte.
; ********************************************************************************
;	EXPORT getCount
;getCount
;	; r0 PU8 p
;	; r1 FPU16 type
;	;
;	; r2 scratch
;	m_getCount r0,r1,r2
;	movs	pc, lr
	
	
	END
