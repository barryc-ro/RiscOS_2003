; yuvblit.s
; assembler equivalent of yuv_frame

	AREA	|!yuvblit$$s|, CODE, READONLY
	GET	hdr.plook


; variables:
; xres		r0
; yres		[0]
; ybuf		r2
; ubuf		r3
; vbuf		r4
; out		r5
; table		r6	
; pix		[- unused]
; x		r1
; h 		[- just use yres]
; y		r8 contains 4 of them.  r9 each
; u		r7}
; v		r7}
; rowoffset	[- invariant: r0 word-aligned]
; uvrow		[- calculated as needed]
	EXPORT yuv_frame
yuv_frame
	; r0 	= xres
	; r1 	= yres
	; r2 	= ybuf
	; r3 	= ubuf
	; [0] 	= vbuf
	; [4]	= out
	; [8]	= table
	
	; prepare...
	stmfd	sp!, {r4-r12,lr}
	ldr	r4, [sp, #40]
	ldr	r5, [sp, #44]
	ldr	r6, [sp, #48]
	sub	sp, sp, #4
	str	r1, [sp]
	add	r0, r0, #3
	bic	r0, r0, #3
	; loop for each row (steps of four)
_yloop
	mov	r1, #0
_xloop
	; get u & v for block
	ldrb	r7, [r3, r1, lsr#2] ; u
	ldrb	r8, [r4, r1, lsr#2] ; v
	mov	r7, r7, lsl#1
	mov	r8, r8, lsl#1
	subs	r7, r7, #128
;	addmi	r7, r7, #7
	mov	r7, r7, asr#3
	subs	r8, r8, #128
;	addmi	r8, r8, #7
	mov	r8, r8, asr#3
	and	r7, r7, #31
	and	r8, r8, #31
	mov	r7, r7, lsl#5
	orr	r7, r7, r8, lsl#10
	; now do a 4x4 block of y
	ldr	r8, [r2, r1]
	and	r9, r8, #&7c		; 0,0
	orr	r9, r7, r9, lsr#2
	plook	r9, r10, r6
	and	r9, r8, #&7c00		; 1,0
	orr	r9, r7, r9, lsr#10
	plook	r9, r11, r6
	and	r9, r8, #&7c0000 	; 2,0
	orr	r9, r7, r9, lsr#18
	plook	r9, r12, r6
	and	r9, r8, #&7c000000	; 3,0
	orr	r9, r7, r9, lsr#26
	plook	r9, r14, r6
	stmia	r5, {r10,r11,r12,r14}
	add	r2, r2, r0
	add	r5, r5, r0, lsl#2
	;
	ldr	r8, [r2, r1]
	and	r9, r8, #&7c		; 0,1
	orr	r9, r7, r9, lsr#2
	plook	r9, r10, r6
	and	r9, r8, #&7c00		; 1,1
	orr	r9, r7, r9, lsr#10
	plook	r9, r11, r6
	and	r9, r8, #&7c0000 	; 2,1
	orr	r9, r7, r9, lsr#18
	plook	r9, r12, r6
	and	r9, r8, #&7c000000	; 3,1
	orr	r9, r7, r9, lsr#26
	plook	r9, r14, r6
	stmia	r5, {r10,r11,r12,r14}
	add	r2, r2, r0
	add	r5, r5, r0, lsl#2
	;
	ldr	r8, [r2, r1]
	and	r9, r8, #&7c		; 0,2
	orr	r9, r7, r9, lsr#2
	plook	r9, r10, r6
	and	r9, r8, #&7c00		; 1,2
	orr	r9, r7, r9, lsr#10
	plook	r9, r11, r6
	and	r9, r8, #&7c0000 	; 2,2
	orr	r9, r7, r9, lsr#18
	plook	r9, r12, r6
	and	r9, r8, #&7c000000	; 3,2
	orr	r9, r7, r9, lsr#26
	plook	r9, r14, r6
	stmia	r5, {r10,r11,r12,r14}
	add	r2, r2, r0
	add	r5, r5, r0, lsl#2
	;
	ldr	r8, [r2, r1]
	and	r9, r8, #&7c		; 0,3
	orr	r9, r7, r9, lsr#2
	plook	r9, r10, r6
	and	r9, r8, #&7c00		; 1,3
	orr	r9, r7, r9, lsr#10
	plook	r9, r11, r6
	and	r9, r8, #&7c0000 	; 2,3
	orr	r9, r7, r9, lsr#18
	plook	r9, r12, r6
	and	r9, r8, #&7c000000	; 3,3
	orr	r9, r7, r9, lsr#26
	plook	r9, r14, r6
	stmia	r5!, {r10,r11,r12,r14}
	add	r10, r0, r0, lsl#1	; up 3 rows
	sub	r2, r2, r10
	sub	r5, r5, r10, lsl#2
	;
	; end xloop
	;
	add	r1, r1, #4
	cmp	r1, r0
	blt	_xloop
	; end yloop
	; next u/v row
	mov	r10, r0, lsr#2
	add	r10, r10, #3
	bic	r10, r10, #3
	add	r3, r3, r10
	add	r4, r4, r10
	; next y / out rows
	add	r2, r2, r0, lsl#2
	add	r10, r0, r0, lsl#1 ; down 3 rows.
	add	r5, r5, r10, lsl#2
	;and	r10, r0, #3
	;add	r5, r5, r10, lsl#2
	;
	ldr	r1, [sp]
	subs	r1, r1, #4
	str	r1, [sp]
	bgt	_yloop
	
	; end of frame
	add	sp, sp, #4
	ldmfd	sp!, {r4-r12,pc}^


	EXPORT	PatchTable
PatchTable
	ptable

	END
	
