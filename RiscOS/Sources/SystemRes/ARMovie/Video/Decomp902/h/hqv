//////////////////////////////////////////////////////////////////////////
//                                                                      //
//              INTEL CORPORATION PROPRIETARY INFORMATION               //
//                                                                      //
//      This software is supplied under the terms of a license          //
//      agreement or nondisclosure agreement with Intel Corporation     //
//      and may not be copied or disclosed except in accordance         //
//      with the terms of that agreement.                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Copyright (C) 1992 to 1994 Intel Corporation.  All Rights Reserved.  //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

/****************************************************************************
 *
 *   hqv.h
 *
 ***************************************************************************/

#if !defined ___HQV_H__
#define ___HQV_H__


#if !defined WINDOWS
#include <stdio.h>
#endif /* WINDOWS */

/* maximum number of deltas without a key */
#define MAX_DELTA_FRAMES_IN_A_ROW 15

/* This message should be in compddk.h. If you are using a more up-to-date */
/* version of compddk.h that defines this message, you can remove this.    */
#if !defined ICM_DECOMPRESS_SET_PALETTE
#define ICM_DECOMPRESS_SET_PALETTE  (ICM_USER+29)   /*  fill in the DIB color table */
#endif

/* max and min resolution */
#define IVIDEOXMAX              640L
#define IVIDEOYMAX              480L
#define IVIDEOXMIN              16L
#define IVIDEOYMIN              16L
#define WIDTH_OK(w)  (((w) >= IVIDEOXMIN) && ((w) <= IVIDEOXMAX))
#define HEIGHT_OK(h) (((h) >= IVIDEOYMIN) && ((h) <= IVIDEOYMAX))

/* Quality ranges from 1-10000 (corresponding to mciavi) THOUGH we map to 1-100 */
#define IVR30_DEFAULT_QUALITY 6500
/* Default key frame rate */
#define IVR30_DEFAULT_KEYFRAMERATE 4

/* mask to round down resolution to legal values */
#define WIDMASK(x) ((x) & 0xFFFC)
#define HITMASK(x) ((x) & 0xFFFC)
#define NEXT_MULT_OF_4(x) ((((I32)(x)) + 3L) & ~(0x3L))

/* useful macros for bitmaps */
#define ALIGNUI32(i)     ((i+3)&(~3))                   /* U32 aligned ! */
#define WIDTHU8S(i)     ((NaturalUnsigned)(((i)+31)&(~31))/8) /* U32 aligned ! */
#define DIBWIDTHU8S(bi) (NaturalInt)WIDTHU8S((NaturalInt)(bi).biWidth * (NaturalInt)(bi).biBitCount)

/*****************************************************************************
 STRUCTURES
 ****************************************************************************/

typedef int HANDLE;

/*
 * Frame Header that precedes every frame.
 */
typedef struct {
	I32 frmnum;
	I32 reserved;
	I32 chksum;
	I32 frmsize;
} IFRAMEHEADER, FAR *LPIFRAMEHEADER;

/*
 * Decompress instance info.
 */
typedef struct {
	U16                 MotionVector[256];       /* linearized MV values for a plane, used by ASM routines, don't naturalize */
	HANDLE              hYUVplanebuffer;         /* handle for below */
	PU8                 lpYUVplanebuffer;        /* holds (3 planes + 3 phantom lines) * 2 images */
	/* Cdecoder active palette tables */
	HANDLE				hAPClutTables;           /* handle for below */
	PU8					lpAPClutTables;          /* C-decoder tables for active palette */
} LARGEDECINSTINFO;

typedef struct {
	U8              state;              /* 0 if any frame drawable, 1 if P/D not drawable */
	U8              stateConsec;        /* 0 if no skips detected w/in a KF interval */
	NaturalInt      niKFinterval;       /* K frame interval */
	I32             lPrevFrame;         /* last frame processed */
	I32             lPrevFrameDrawn;    /* last frame drew */
	I32             lPrevFrameSkipped;  /* last frame skipped */
	NaturalInt      niSkipCount;        /* number of skips in a row */
	/* variance info */
	NaturalUnsigned nuSum;               /* running sum of delta between drawn frames */
	U32             dwSumSquares;        /* as above except for square of delta */
	NaturalUnsigned nuNumValues;         /* number of values we've summed */
	NaturalUnsigned nuVarianceThreshold; /* max variance before DFI is cranked down */
	NaturalInt      DFI;                 /* DrawFrameInterval, draw every DFI frame */
} BACKOFFINSTINFO;

typedef struct {
	NaturalUnsigned      nInitialized;                  /* decompression initialized */
	NaturalUnsigned      xres, yres;                    /* resolution of decoded image */
/* keep 4 bytes in a row for proper packing */
	U8                   bInMotion;                     /* whether we are playing or not */
	U8                   zoomFlag;                      /* scaling */
/* this is not used, keeping it here as a pad */

	/* *** backoff info */
	U8                   bBackoff;                      /* 0 if don't want backoff */

	/* *** for active palette *** */
	char				UseActivePalette;	/* decompress to active palette == 1 */
	char				InitActivePalette;	/* active palette initialized == 1 */
//	PALETTEENTRY		ActivePalette[256];	/* stored active palette */

	/* *** for NULL frames *** */
	U16				bitStreamHeaderFlags;

    U8				lpszFccHandler[5];			/* current FOURCC as a string */
	BACKOFFINSTINFO      instBackoff;           /* backoff information */
	/* *** larger per-instance allocations */
	HANDLE               hInstanceTables;
	LARGEDECINSTINFO FAR * InstanceTables;

    U8					ActivePaletteInitialized;
	U32					lLastFrameNum;				/* number of last decompressed frame */
													/* for checking pre-roll only */
} DECINSTINFO;

/* ZOOM flags */
#define ICDEC_ZOOMX2    0x1

/* BACKOFF thresholds */
#define THRESHOLD386         3
#define THRESHOLD486         5

/*
 * State information for configuration.
 */
typedef struct {
	U32				fccHandler;
	NaturalInt		bFastCompression;   /* TRUE if using quick compressor */
	U32				dwTargetBytes;      /* DESIRED bytes per frame (datarate/framerate) */
	NaturalUnsigned	wQuality;           /* 1-10000 */
	NaturalUnsigned	wKeyRate;           /* key frame every X frames */
/* note: this is set but not read */
	I32				dwOverheadPerFrame; /* padding overhead (may incl. audio) */
} ICSTATE;

#include "hqvbs.h"              /* for struct BsHdrSt */

/*
 * YUV frame
 */
typedef struct {
	HGLOBAL                 hY, hU, hV, hUV;
	PU8                     hpY, hpU, hpV;
	PU16                    hpUV;
} YUV_FRAME;

/*
 * Compress instance info (context).
 */
typedef struct {
	/* compress state */
	I8 /* BOOL */        bInitialized;         /* TRUE if constructed */
	I8 /* BOOL */        bSuperInitialized;
	U8                   indexYUVbuffer;       /* the current YUV buffer in circular list */
	NaturalInt           niHeight, niWidth;    /* dimensions of image */
	/* temporal information */
	I8 /* BOOL */        bKeyFrame;            /* true if keyframe */
	U8 /* NaturalInt */  niFramesSinceLastKey; /* deltas since last key */
	I32                  lFrameNum;            /* frame number for ICCOMPRESS */
	NaturalInt           niPeriodicFrameRate;  /* computed periodic key frame rate */
	/* buffers */
	YUV_FRAME            YUVFrame[2];          /* YUV planes */
	/* state information for configuration */
	ICSTATE              icCurrentState;

	/* status callback */
#if defined WINDOWS
	LONG    (CALLBACK   *procStatusProc) (LPARAM lParam, UINT message, LONG l);
	LPARAM               lParamStatusProc;                  /* copy of what ICM_SET_STATUS sends us */
#endif /* WINDOWS */
#ifdef WINVER
	int		colorPlane;				/* 0 is Y, !0 = UV */
	long	percent;
	long	percentRem;
#endif

	/* ---- ENCODER AREA ---- */
	U8					VersionString[64];	/* compressor version string */
	U8					VersionLength;		/* length of version string */
	U8					lpszFccHandler[5];	/* current FOURCC as a string */
	/* *** OffLine encoder state */
	I32					lLastFrameNum;		/* previous frame # compressed */
	/* SubSystem storage areas */
	BsHdrSt				ImageHdr;			/* header of PREVIOUS image */
	BsHdrSt HUGE *		BsHeader;
	TkMatrixSt			IDpicOrig[3];		/* Target Image */
	TkMatrixSt			IDpicRef[3];		/* Target Image for prediction */
											/* This is the last non-D frame */
											/* optionally used by Motion Anal */
	MainSt FAR *		Main;
	SyntaxSt FAR *		Syntax;
	MotionSt FAR *		Motion;
	BrcSt FAR *			Brc;
	SegmentSt FAR *		Segment;
	BinaryTreeSt FAR *	BinaryTree;
	UtilitySt FAR *		Utility;
	jt_filt_type FAR *	JtFiltInfo;
	temp_filt_type FAR *	TempFiltInfo;

	/* for details of structute temp_filt_str */

#if defined UNIX_ONLY
	FILE *				IDStFile;			/* quantization debugging info */
#endif /* UNIX_ONLY */
} COMPRESSCONTEXT, CompressContext;

#define Y_PLANE 0
#define V_PLANE 1
#define U_PLANE 2

/*
 * Instance info passed to DriverProc().
 */
typedef struct {
    U32                         dwFlags;
    COMPRESSCONTEXT             *CompPtr;
    DECINSTINFO                 *DecompPtr;
} INSTINFO, FAR *LPPINSTINFO;

/* manipulating DIBS */
#define DIB_WIDTH_BYTES(width, bpp) (((((I32)width)*((I32)bpp)+31L)/32L)*4L);

/*
 * Get pointer to buffer depending on which was used last.
 * Note that this returns a pointer to the first data byte and it
 * skips over the extra row that's used for compression.
 */
#define GetCurrYBuf(c) (((c)->YUVFrame[((c)->indexYUVbuffer)]).hpY + (c)->niWidth)
#define GetCurrUBuf(c) (((c)->YUVFrame[((c)->indexYUVbuffer)]).hpU + ((((c)->niWidth)/4)+3&~3))
#define GetCurrVBuf(c) (((c)->YUVFrame[((c)->indexYUVbuffer)]).hpV + ((((c)->niWidth)/4)+3&~3))

#define GetPrevYBuf(c) (((c)->YUVFrame[!((c)->indexYUVbuffer)]).hpY + (c)->niWidth)
#define GetPrevUBuf(c) (((c)->YUVFrame[!((c)->indexYUVbuffer)]).hpU + ((((c)->niWidth)/4)+3&~3))
#define GetPrevVBuf(c) (((c)->YUVFrame[!((c)->indexYUVbuffer)]).hpV + ((((c)->niWidth)/4)+3&~3))

/* temp UV buffer only in the first YUVframe */
#define GetTempUVBuf(c) (((c)->YUVFrame[0]).hpUV)



/*****************************************************************************
 * MAIN FUNCTION PROTOTYPES
 ****************************************************************************/

#if defined WINDOWS
/* this is part of the floating point support fix */
LPVOID FAR PASCAL _FPInit(void);
void FAR PASCAL _FPTerm(LPVOID);
#endif /* WINDOWS */

#define DPF ; / ## /


/*****************************************************************************
 * INTERNAL FUNCTION PROTOTYPES AND DECLARATIONS NEEDED BY MAIN
 *
 * These declarations are needed by mciavi.
 *
 ****************************************************************************/
#ifdef WINVER
void IC_Yield(COMPRESSCONTEXT FAR *);
void IC_Status(COMPRESSCONTEXT FAR *,long);
#else
	#define IC_Yield(x)    ; / ## * ## * ## /
	#define IC_Status(x,y) ; / ## * ## * ## /
#endif

/*****************************************************************************
 * EXTERNAL FUNCTION PROTOTYPES AND DECLARATIONS NEEDED BY MAIN
 *
 * These declarations are the only ones that are visible to the "main"
 * driver.  This provides a simple interface between the "VFW" interface
 * and the codec.
 *
 ****************************************************************************/

/*
 * These should all be in DECODE subdir.
 */
#ifdef WINDOWS

/* construct the decompress structure */
LRESULT InitDecompressor(DECINSTINFO *pinst,
                         LPBITMAPINFOHEADER lpbiOut);

/* reinitialize the decompress structure because of a change */
LRESULT ReinitDecompressor(DECINSTINFO *pinst);

/* destruct the decompress structure */
LRESULT CloseDecompressor(DECINSTINFO * pinst);
/* decompress a frame */
LRESULT IVR30TDecompress(DECINSTINFO *pInst, ICDECOMPRESSEX FAR *lpicDecEx, BOOL bConvert);


/*
 * These should all be in SUPERENC subdir.
 */

/* construct the compress structure */
LRESULT S_InitCompressor(
	COMPRESSCONTEXT * pinst,
	LPBITMAPINFOHEADER lpbiIn,
	LPBITMAPINFOHEADER lpbiOut);

/* reinitialize the decompress structure because of a change */
LRESULT S_ReinitCompressor(
	COMPRESSCONTEXT * pinst,
	LPBITMAPINFOHEADER lpbiIn,
	LPBITMAPINFOHEADER lpbiOut);

/* destruct a compress structure */
LRESULT S_CloseCompressor(COMPRESSCONTEXT * pinst);

/* call the S_IVR30TCompress compressor */
LRESULT S_IVR30TCompress(COMPRESSCONTEXT *pCntx, ICCOMPRESS FAR *lpicComp);

#endif /* WINDOWS */
#endif  /* __HQV_H__ */



