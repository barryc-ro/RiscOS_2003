/*////////////////////////////////////////////////////////////////////////
//                                                                      //
//              INTEL CORPORATION PROPRIETARY INFORMATION               //
//                                                                      //
//      This software is supplied under the terms of a license          //
//      agreement or nondisclosure agreement with Intel Corporation     //
//      and may not be copied or disclosed except in accordance         //
//      with the terms of that agreement.                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Copyright (C) 1992 to 1994 Intel Corporation.  All Rights Reserved.  //
//                                                                      //
////////////////////////////////////////////////////////////////////////
*/

#if !defined __CMNSTRUC_H__
#define __CMNSTRUC_H__

/****************************************************************************
 *
 *   cmnstruc.h
 *
 ***************************************************************************/

/* Common structures for HQV codec */
/* defines reqired to define sizes are here also */

/* Context for Bit Rate Control functions.  This should really
	be in the brc.h header file. */

typedef struct _BrcSt {
	NaturalInt	QuantMin;
	NaturalInt	QuantMax;
	Boo			FirstFrame;		/* True if processing first frame of
								 * sequence */

	NaturalInt	stillPeriod;
	I32			TargSize;		/* BRC's idea of Target Frame Size */
	I32			BytesSoFar;
	NaturalInt	redoCount;
	NaturalInt	frameType;
	I32			BytesInBuf;		/* Number of bytes in bit buffer */

	Sngl		qbkey;
	Sngl		qbdelta;
	Sngl		qbsave;

	Sngl		PadQuantDbl;
	I32			PadTargBytes;
	I32			highBytes;
	I32			lowBytes;
	Sngl		highQuant;
	Sngl		lowQuant;

	I32			AdjustedFrames;

	I32			BufferSize;	

} BrcSt;

typedef struct {
	NaturalInt NumRows;
	NaturalInt NumCols;     /* dimensions of matrix (data - cf pitch) */
	NaturalInt Pitch ;      /* spacing between rows; >= NumCols */
	NaturalInt Code;        /* type of data; must be 0 (0=>U8) */
	PU8 Data;               /* pointer the the matrix data */
	PU8 OriginalDataPtr;    /* needed for SysFree() since data gets modified */
} TkMatrixSt;

/* from matrixst.h (matrixst.h is no longer needed) */

/*
 * matrix structs
 */
typedef struct {
	NaturalInt TKRr;
	NaturalInt TKRc;       /* row, column of upper left-hand corner */
	NaturalInt TKRh;
	NaturalInt TKRw;      /* height, width */
} TkRectSt;

#define MAX_NUM_VQ_CODEBOOKS 16 /* generation utilities are supposed to = 24 */

/* The encoding structure for the vector tables
 */

typedef struct {
/* from VqTableSt */
	NaturalInt			AltCodeBook;/* -1 (can be self) */
	NaturalInt			NumDyads;	/* number of dyads in this cb */
	FPNaturalInt		Dyads;		/* ptr to start of dyad table */
	NaturalInt			RNumQuads;	/* square root of #Quads */

	NaturalInt			NumFoldDyads;
	FPNaturalInt		FoldDyads;
	FPNaturalInt		NormalIndex;
	FPNaturalUnsigned	DyadNorm4;	/* Norm/4 of each InvDyad */

/* from TblkupType */
/* was vqindex */
	FPU8				LookupIndex;/* when dyads are small, returns index
									 * into Dyads */
} VQCBDataType;

typedef struct _VQSt {
	NaturalInt			NumCodeBooks;
	FPU8				DyadIndexStorage;
	TkMatrixSt			chromMat;
	VQCBDataType		VQData[MAX_NUM_VQ_CODEBOOKS];
	/* the next two entries are for minimizing bad block encoding */
	TkMatrixSt  		VqRecon[3];		/* [0] never used */
	TkRectSt			VqRect;
} VQSt;



/* from segment.h */

/* Elements of the Binary Tree */
typedef struct _segTblSt {
	U8			BtCode;			/* v/h split, data */
	U8			MaxAbsDiff;		/* Maximum Abs Difference of pred & rec pels */
	Sngl		Variance;		/* Variance of cell */
	Sngl		ModeError[2];	/* errors within different modes */
	Sngl		QuantError[2];	/* vq errors for the differenc modes */
} segTblSt;


typedef struct _SegmentSt {
	segTblSt FAR *	IDsegTbl;
	NaturalInt		IDnumSegNtry;	/* index into array of 1024 */
	NaturalInt		IDnumSegRead;	/* index into array of 1024 */
	NaturalInt		IDkCol;			/* index into array of 3 */
	/* Error Checking / Debugging */
	I32				IDTotalArea;
	I32				IDImageArea;
	I32				ActivityNum;
	Sngl			AvgActivity;
} SegmentSt;

#define SEG_VAR ((SegmentSt FAR *)(pCntx->Segment))->

/* from syntax.h */

typedef struct {
#if defined UNIX_ONLY /* Enc or Dec? */
	I32 Nfnd;     /* num args found by syntax routines */
#endif /* defined UNIX_ONLY */
	I32 Flag;     /* bits defined below */
} TkSyntaxExtSt;

#define SYN_FOUND 0x2    /* parm was encountered (i.e. not defaulted) */
#if defined UNIX_ONLY
#define SYN_ERR   0x1    /* Syntax error associated with this param */
#define SYN_MULT  0x4    /* parm was encountered more than once */
#endif


/* from symparms.h */

typedef struct _SyntaxSt

{
/*	Filters */
	Dbl           IDBlurLen;		/* Gauss filt parameter (disabled) */
	Dbl           IDEdgeFilt;		/* re "joint" filter */

/*	Bit Rate Controller */
	Sngl		  IDBrcGain;        /* Brc reactivity parameter */
	Sngl          IDInitQuantDbl;		/* starting quant; quant from BRC */
	Sngl          IDQuantDbl;		/* starting quant; quant from BRC */

/*	VQ */
	Dbl           IDSkipThresh; 	/* re VQ skip blocks */
	Dbl           IDRelColQuant;	/* Factor allowing finer quant for color */
	Dbl           IDRelDQuant;		/* Factor allowing coarser quant for D pic*/
	Dbl           IDRelKQuant;		/* Factor allowing finer quant for K pic */

/*	Motion */
	Dbl           IDMaxMcErr;		/* MC match is good enuf if < this thres. */
	Dbl           IDMcOkThresh[2];	/* currently unused */
	Dbl           IDMcMerge;		/* currently unused */

	/* mostly just "switches" */
	TkSyntaxExtSt IDMcHalf;	/* Allows motion resolution to be .5 pixels */
	TkSyntaxExtSt IDhlpsw;			/* HELP requested */
	TkSyntaxExtSt IDMcOffSw;		/* force all motion vectors to null */
	TkSyntaxExtSt IDCropSw;			/* crop pic NIP* */ /* NOTE: nobody sees this under windows */

#if defined UNIX_ONLY
	TkSyntaxExtSt IDCksumOffSw;		/* bypass checksum */
	TkSyntaxExtSt IDReconOff;		/* don't write recon pic NIP* */
	TkSyntaxExtSt IDFrFlag;			/* Frame range is explicit */
#endif /* defined UNIX_ONLY */

	TkSyntaxExtSt IDRtSim;			/* experimental NIP* */
	TkSyntaxExtSt IDBits8;			/* experimental NIP* */
	TkSyntaxExtSt IDModeFlag;		/* re mode selection */
	TkSyntaxExtSt IDPTmpFlag;		/* re temporal filt for P pic */
	TkSyntaxExtSt IDDTmpFlag;		/* re temporal filt for D pic */
#if defined UNIX_ONLY /* Enc or Dec ? */
	TkSyntaxExtSt IDGuardSw;		/* experimental NIP* */
	TkSyntaxExtSt IDSyntaxSw;		/* quit after syntax analysis NIP* */
	TkSyntaxExtSt IDStdIn;			/* get parms from stdin NIP* */
	TkSyntaxExtSt IDOverFlow;		/* re VQ */
	TkSyntaxExtSt IDDiVsw;			/* FIXME: appears unused */
	TkSyntaxExtSt IDCheckColor;		/* re VQ */
#endif /* defined UNIX_ONLY */

	TkRectSt      IDCropRect;		/* crop pic NIP* */ /* NOTE: nobody sees this under windows */
	I32           IDFrames[2];		/* explicit frame range */
	NaturalInt    IDQuantMin;
	NaturalInt    IDQuantMax;		/* contraints on QuantDbl */
	NaturalInt    IDCbSet;			/* codebook set. implicitly 0 in production */
	NaturalInt    IDStillPeriod;	/* periodicity of Key pics */
	NaturalInt    IDSkipPic;		/* eg if 1, skips alt pic NIP* */ /* NOTE: only set, never read */
	I32           IDMcOrig;	 		/* base pic of ME* NIP* */
	I32           IDMcRampDist; 	/* crop NIP* */
	I32           IDBuffSize;		/* re BRC */
	I32           IDTargFrameSize;	/* re BRC */
	I32           IDPaddingOverhead;/* re BRC */
	NaturalInt		IDMinVqArea;
	NaturalInt		IDMaxVqArea;		/* contrain cell size in VQ BT */
	I32           IDMaxMcArea;
	I32           IDMinMcArea;		/* contrain cell size in MC* BT */
	I32           IDStripWidth;		/* max width of a strip; 160 in production */
	I32           IDMaxMcLev;		/* experimental. NIP* */
	I32           IDMcRss;			/* experimental. NIP* */
	I32           IDMcDebug;		/* experimental. NIP* */
	
	NaturalInt	  IDStripLeak[3];	/* size of the leak */
	NaturalInt    IDMcRange[2];		/* range of search in ME* in pels */
	NaturalInt    IDMcMethod[3];    /* mc params : { MSE|MAD, GRAD|FULL, log ratio } */
	NaturalInt	  IDMcIss;			/* experimental. NIP* */
	
	U8            IDVqSelMode;		/* restrict VQ modes. NIP* */

	U32           IDBtDebug;
	U32           IDVqDebug;
	U32           IDDebug;

	Dbl			  IDNullMult;		/* to adjust null cell percentage */

#if defined UNIX_ONLY /* Enc or Dec ?, NIP* */
	U32           IDSysDebug;		/* debugging. NIP* */
	U32           IDDStats;			/* Defines stats to be gathered. NIP* */
	U32           IDBrcFlag;
	U32           IDSegFlag;		/* NIP* */
	Boolean       IDRandD;
#endif /* UNIX_ONLY */

	I32           IDPTempFilt;
	I32           IDDTempFilt;		/* for temporal filter ratio */

#if defined UNIX_ONLY
	Chr           IDInpDir[80];
	Chr           IDInpRoot[80];
	Chr           IDInpExtn[80];
	Chr           IDOutDir[80];
	Chr           IDOutRoot[80];
	Chr           IDOutExtn[80];
	TkSyntaxExtSt IDDpMdQnt;
	TkSyntaxExtSt IDDpSegment;
	TkSyntaxExtSt IDDpPredict;
#endif /* defined UNIX_ONLY */
} SyntaxSt;

/* from superenc.h */

/* The encoding structure for the vector tables
*/

typedef struct _MainSt {
	TkMatrixSt IDpicRefRec[3];		/* previous (non D) reconstructed */
	TkMatrixSt IDpicPred[3];		/* motion est. predicted image */
	TkMatrixSt IDpicRecon[3];		/* current reconstructed image */

	I32        IDTotBytes;
	I32        IDpCount;
	NaturalInt IDNextYuvBuff;
	NaturalInt IDMcResolution;
	Boolean    IDSevenBit;
} MainSt;

/* note: symbols for some of the fields are defined in compress.c */
#define MAIN_VAR ((pCntx->Main))->

/* from motion.h */

typedef struct _McVectorSt {
	NaturalInt	MCVr;
	NaturalInt	MCVc;           /* row and column displacement */
} McVectorSt ;

typedef struct _McVectFlagSt {
	NaturalInt	MCVFr;
	NaturalInt	MCVFc ;           /* row and column displacement */
	NaturalInt	flag ;
} McVectFlagSt ;

/* from mchqv.c */

#define MX_MC_NTRY 2400

typedef struct {
	U8 BtCode;        /* See hqvbs.h for the BT codes */
	NaturalInt index;         /* re list of uniq vectors */
	McVectFlagSt vect; /* the vector */
} mcTblSt;

typedef struct _MotionSt {
	mcTblSt IDmcTbl[MX_MC_NTRY];                 /* the internal BT */
	NaturalInt IDnumMcNtry;
	NaturalInt IDnumRead;
} MotionSt;

/* from encodebt.c */

#define MX_NUM_UNIQ_DISP 256 /* HQV uses 8-bit index for these */

typedef struct _BinaryTreeSt {
	NaturalInt	IDNumUniqDisp;	/* # unique motion displacements */
	NaturalInt	IDcurColor;		/* 0,1,2 => Y,V,U */
	Dbl			IDcurBaseQ;		/* base quant from BRC */
	McVectorSt	IDUniqMcVect[MX_NUM_UNIQ_DISP + 1] /*list of unique vect*/;

	VQSt FAR *	VQ;				/* VQ routines */

	/* pictures for this color plane */
	TkMatrixSt	IDcurPic;		/* current (target) */
	TkMatrixSt	IDcurPred;		/* current - motion est. predicted */
	TkMatrixSt	IDcurRec;		/* current - reconstructed */
	TkMatrixSt	IDrefPic;		/* reference target (last non-D target) */
	TkMatrixSt	IDrefRec;		/* reference - reconstructed */
	NaturalInt	IDFrameType;	/* 0 = Key, 1 = D, 2 = P */
	U32			IDcurFlag;		/* used to specify if pic is intra */
} BinaryTreeSt;

/* from hqvutil.h */

/* was in hqvutil.c */
typedef struct _UtilitySt {
	I32 IDBitCountW;     /* # bits read/wrote in buff */
	PU8 IDBsPtrW;
	PU8 IDQuantToCB;     /* translation array from (int)QuantDbl to codebook */
} UtilitySt;

/* from qvars.h */

/* from jtfilter.c */

typedef struct jt_filt_str  {
	FPU8     work;      /* temporary work space */
	FPI32    prod_0;    /* prod_0[i] =
							i * LSF_NORM * 1.0 / (1.0+2*WT_1+2*WT_2) */
	FPI32    prod_1;    /* prod_1[i] =
							i * LSF_NORM * WT_1 / (1.0+2*WT_1+2*WT_2) */
	FPI32    prod_2;    /* prod_2[i] =
							i * LSF_NORM * WT_2 / (1.0+2*WT_1+2*WT_2) */
	FPI32    prod_alt;  /* prod_alt[i] =
							i * LSF_NORM * WT_ALT / (1.0+2*WT_1+2*WT_2) */
	FPI32    norm;      /* a 32 entry matrix, which is used for
							normalization in case full weights of a neighbour
							can not be used */
	FPU8     low;       /* low[i] = LOW * i;  high[i] = HIGH * i */
	FPU8     high;
} jt_filt_type;

/* from tmprfilt.c */

typedef struct temp_filt_str  {
	I32     PTempLastParam;  /* extent of temporal filtering on "P" Frames */
	I32     DTempLastParam;  /* extent of temporal filtering on "D" Frames */
	            /* note that recommended values of these are between 22 and
	               32 for P frames;  between 20 and 30 for D frames; the
	               larger the number means less filtering;  numbers below 16
	               are not recommended; above 32 has virtually no effect;
	               moderate value for P frames is 26 and for D frames is 24 */
	FPU8    PTempTable;
	FPU8    DTempTable;
} temp_filt_type;

#endif /* __CMNSTRUC_H__ */

