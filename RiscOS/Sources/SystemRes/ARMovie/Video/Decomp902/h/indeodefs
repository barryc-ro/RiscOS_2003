/* indeodefs.h */

#include "datatype.h"

typedef int HANDLE;

/*
 * Frame Header that precedes every frame.
 */
typedef struct {
	I32 frmnum;
	I32 reserved;
	I32 chksum;
	I32 frmsize;
} IFRAMEHEADER;

/* --------------------------------------------------------------------------------
 * Decompress instance info.
 */
// --------------------------------------------------------------------------------
typedef struct {
	U16                 MotionVector[256];       /* linearized MV values for a plane, used by ASM routines, don't naturalize */
	HANDLE              hYUVplanebuffer;         /* handle for below */
	PU8                 lpYUVplanebuffer;        /* holds (3 planes + 3 phantom lines) * 2 images */
	/* Cdecoder active palette tables */
	HANDLE		    hAPClutTables;           /* handle for below */
	PU8		    lpAPClutTables;          /* C-decoder tables for active palette */
} LARGEDECINSTINFO;

typedef struct {
	U8              state;              /* 0 if any frame drawable, 1 if P/D not drawable */
	U8              stateConsec;        /* 0 if no skips detected w/in a KF interval */
	NaturalInt      niKFinterval;       /* K frame interval */
	I32             lPrevFrame;         /* last frame processed */
	I32             lPrevFrameDrawn;    /* last frame drew */
	I32             lPrevFrameSkipped;  /* last frame skipped */
	NaturalInt      niSkipCount;        /* number of skips in a row */
	/* variance info */
	NaturalUnsigned nuSum;               /* running sum of delta between drawn frames */
	U32             dwSumSquares;        /* as above except for square of delta */
	NaturalUnsigned nuNumValues;         /* number of values we've summed */
	NaturalUnsigned nuVarianceThreshold; /* max variance before DFI is cranked down */
	NaturalInt      DFI;                 /* DrawFrameInterval, draw every DFI frame */
} BACKOFFINSTINFO;

typedef struct {
	NaturalUnsigned      nInitialized;                  /* decompression initialized */
	NaturalUnsigned      xres, yres;                    /* resolution of decoded image */
/* keep 4 bytes in a row for proper packing */
	U8                   bInMotion;                     /* whether we are playing or not */
	U8                   zoomFlag;                      /* scaling */
/* this is not used, keeping it here as a pad */

	/* *** backoff info */
	U8                   bBackoff;                      /* 0 if don't want backoff */

	/* *** for active palette *** */
	char				UseActivePalette;	/* decompress to active palette == 1 */
	char				InitActivePalette;	/* active palette initialized == 1 */
//	PALETTEENTRY		ActivePalette[256];	/* stored active palette */

	/* *** for NULL frames *** */
	U16				bitStreamHeaderFlags;

    U8				lpszFccHandler[5];			/* current FOURCC as a string */
	BACKOFFINSTINFO      instBackoff;           /* backoff information */
	/* *** larger per-instance allocations */
	HANDLE               hInstanceTables;
	LARGEDECINSTINFO    *InstanceTables;

    U8					ActivePaletteInitialized;
	U32					lLastFrameNum;				/* number of last decompressed frame */
													/* for checking pre-roll only */
} DECINSTINFO;


#define VERSION_NUMBER	(32)

// --------------------------------------------------------------------------------

#define NULL_FRAME_DATASIZE 128L /* in bits */

/* All offsets are number of bytes from start of the Bit Stream header.
The offsets are multiples of 4. (Datasize is a multiple of 32.)

   The flag bits follow:
*/
#define BS_STILL_PERIOD 0x01    /* periodic stills */
#define BS_8BIT         0x02    /* Exp. In prod, all pels are 7 bits */
#define BS_STILL        0x04
#define BS_STILL_NEXT   0x08    /* still follows (or last pic in seq) */
#define BS_MC_H_HALF    0x10    /* horiz/vert displ to .5 pel. Refers */
#define BS_MC_V_HALF    0x20    /*  to resolution AND units. Dflt: 1 pel */
#define BS_MC_OFF       0x40    /* only the null motion vector is used*/
#define BS_DISPOSABLE   0x100   /* no pictures based on this */
#define BS_BUFFER       0x200   /* the YUV output buffer */

// --------------------------------------------------------------------------------

/* DO NOT ALTER TYPES FOR NATURALIZATION, FILE RELATED STRUCTURE */
typedef struct {        /* The IVR30T bytestream header */
   I16 VersionNumber;   /* VERSION_NUMBER */
   U16 Flags;           /* see below */
   I32 Datasize;        /* tot num bits in compressed pic, incl hdr */
   I8  CbOffset;        /* re: codebook SET (0 or 16, 16=>real-time) */
   U8  Cbset;           /* codebook id; must be 0 in production */
   U16 Checksum;        /* xor over all 3 color planes */
   I16 ImageHeight;     /* unless Flag bits say otherwise, the height */
   I16 ImageWidth;      /*   and width for U,V are 1/4 of these values*/
   I32 DataOffset[3];   /* 0,1,2 => Y, V, U */
   I32 Reserved;        /* must be zero */
   U8  AltQuant[16];    /* for each CB, its alternate rel to CbOffset */
} BsHdrSt;

typedef struct MotionVector *mv_ptr;

extern void
XDecodePlane (
	PU8 CurrentPlane,
	PU8 PreviousPlane,
	NaturalInt PlaneWidth,
	NaturalInt PlaneHeight,
	PU8 DataStream,
	NaturalInt FirstVQTable,
	PU8 AltQuant,
	mv_ptr MVTable,
	NaturalInt StripWidth);

extern void XRGB16InterpolateUV (
			  NaturalInt Height,
			  NaturalInt Width,
			  PU8 YPlane,
			  PU8 VPlane,
			  PU8 UPlane,
			  int *OutputCursor,
			  NaturalInt OutputPitch,
			  NaturalInt isBGR);

