//////////////////////////////////////////////////////////////////////////
//                                                                      //
//              INTEL CORPORATION PROPRIETARY INFORMATION               //
//                                                                      //
//      This software is supplied under the terms of a license          //
//      agreement or nondisclosure agreement with Intel Corporation     //
//      and may not be copied or disclosed except in accordance         //
//      with the terms of that agreement.                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Copyright (C) 1992 to 1994 Intel Corporation.  All Rights Reserved.  //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

#if !defined ___HQVBS_H__
#define ___HQVBS_H__


/*************************************************************
*************************************************************/

/*                      THE IVR30T U8STREAM             */

#define VERSION_NUMBER 32

/* DO NOT ALTER TYPES FOR NATURALIZATION, FILE RELATED STRUCTURE */
typedef struct {        /* The IVR30T bytestream header */
   I16 VersionNumber;   /* VERSION_NUMBER */
   U16 Flags;           /* see below */
   I32 Datasize;        /* tot num bits in compressed pic, incl hdr */
   I8  CbOffset;        /* re: codebook SET (0 or 16, 16=>real-time) */
   U8  Cbset;           /* codebook id; must be 0 in production */
   U16 Checksum;        /* xor over all 3 color planes */
   I16 ImageHeight;     /* unless Flag bits say otherwise, the height */
   I16 ImageWidth;      /*   and width for U,V are 1/4 of these values*/
   I32 DataOffset[3];   /* 0,1,2 => Y, V, U */
   I32 Reserved;        /* must be zero */
   U8  AltQuant[16];    /* for each CB, its alternate rel to CbOffset */
} BsHdrSt;

typedef BsHdrSt IVR30TFRAMEHEADER, IVR30TFrameHdr;

#define NULL_FRAME_DATASIZE 128L /* in bits */

/* All offsets are number of bytes from start of the Bit Stream header.
The offsets are multiples of 4. (Datasize is a multiple of 32.)

   The flag bits follow:
*/
#define BS_STILL_PERIOD 0x01    /* periodic stills */
#define BS_8BIT         0x02    /* Exp. In prod, all pels are 7 bits */
#define BS_STILL        0x04
#define BS_STILL_NEXT   0x08    /* still follows (or last pic in seq) */
#define BS_MC_H_HALF    0x10    /* horiz/vert displ to .5 pel. Refers */
#define BS_MC_V_HALF    0x20    /*  to resolution AND units. Dflt: 1 pel */
#define BS_MC_OFF       0x40    /* only the null motion vector is used*/
#define BS_DISPOSABLE   0x100   /* no pictures based on this */
#define BS_BUFFER       0x200   /* the YUV output buffer */


/*
   DataOffset points to the data for each color component:
I32 The number of MC displacements (0 for intra pic)
NaturalUnsigned Table of motion displacements in form: (vert, horiz). The components
    are 8 bits each, with the zero at 128. The sign is that of PLV, MPEG.
U8  Data - set of 1-byte entries
    The BT (binary tree): set of 2-bit codes, packed 4 per byte


   The BadBlkOffset points to the following:
I32 Number of entries in the Bad Block List, followed by that list.
    (The absence of this list does NOT imply no bad blocks.)


* There is one binary tree, and it ALWAYS begins with MC info. For
intra pic, the MC part will contain just one code: BT_ABS_FILL. The BT
codes are defined below.

   The Data entries appear in the order the corresponding cells of the
BT are decoded. Their meaning depends on context:

      After BT_REL_FILL: an 8-bit -1 into the MC displacement table. 
      After BT_ABS_FILL: no MC data; implicit switch to VQ phase.
      After BT_NULL: no data, all pels implicitly quantized to 0.
      After BT_VQ_DATA: a 1-byte code (below), followed by 1-byte 
	 indices into the specified VQ table.

* Binary-Tree codes:
*/

#define BT_HORIZ        0x00            /* split with horizontal cut */
#define BT_VERT         0x01            /* split with vertical cut */
#define BT_ABS_FILL     0x02            /* for MC phase */
#define BT_REL_FILL     0x03            /* for MC phase */
#define BT_NULL         0x02            /* for VQ phase: no VQ data */
#define BT_NULL_COPY    0x00            /* for Null cells */
#define BT_NULL_SKIP    0x01            /* for Null cells */
#define BT_VQ_DATA      0x03            /* for VQ phase: data follow */

/* The VQ codes are (the undefined bits must be 0):
*/
#define VQ_INDEX        0x0F    /* specifies which VQ table to use */

#define MIN_DIMENSION 8         /* don't split cells smaller than this*/
/* This is an encoder restriction. The only bytestream restriction on
cell dimensions is that they must be multiples of 4. Because of color
subsampling, this means that the picture dimensions must be multiples
of 16.

			CODEBOOKS

   We plan to eventually hard-code the codebooks. For the purpose of
algorithm development, however, they will be read from a file. The name
of that file is

	cbsetx.tbl

where x is a number in the range [0,255], without leading zeroes.
Numbers greater than 127 are reserved for the real-time encoder. This
number is stored in Cbset in the bytestream header.

   The format of the file, which is in ascii, is

	VersionNumber NumVqTables       [the version is 31]
for each table
	AltCodebook
	NumDyads
	Dyads
	NumQuads
	Quads


New VQ Code rules:

   Cells of the binary tree are broken up into 4x4 blocks, and these
blocks are procesed in raster order. They may be coded with, Dyads,
Quads, Runs of null dyads (Copy), and Skips. Processing within a block
is also in raster order; quads are linear and cannot cross a block
boundary.

Dyads:  Any -1 0-239 inclusive can be a dyad, and each VQ table can
have a different selection of indices and values.  Dyads must appear as
pairs in the bytestream with the dyad affecting the high order shortword
appearing immediately before the dyad affecting the low order shortword.
(This is a change from the previous scheme.) 

Quads:  Any -1 0-255 inclusive can be a quad, and each VQ table can
have a different selection of indices and values.  Quads always correct
an aligned longword. The first dyad of a quad, as defined in the ascii
file, is applied to the low order shortword.

   For the real-time encoder, there are at most 127 dyads and
exactly 121 quads. The quads represent all pairings of the first 11
dyads. Furthermore, the dyad components must be multiples or 4.

Copy Run-Lengths:  To indicate a zero run length of two or four bytes,
use the zero-valued dyad or quad respectively.

Code 255, in tables that do not allocate a quad thereto, can be used
only at scan line zero, to indicate a zero run length of 8 bytes.

Code 254, in tables that do not allocate a quad thereto, can be used
at scan line zero, to indicate a zero run length of 12 bytes, or at
scan line one, to indicate a zero run length of 8 bytes.

Code 253, in tables that do not allocate a quad thereto, can be used
at scan line zero, to indicate a zero run length of 16 bytes, or at
scan line one, to indicate a zero run length of 12 bytes, or at
scan line two, to indicate a zero run length of 8 bytes.


   "Skips" are another prediction mode. They can only be used when
BS_MC_OFF is set in Flags in the bytestream header, and BS_STILL is not
set. They can be used with both BT_ABS_FILL and BT_REL_FILL cells.
Skips copy, in effect, 4 or more pels from the same location in the
previous picture to the current one. Unless they are already allocated
for quads, codes 249-252 are used for skips, as follows:

    Code 252, when used at scan line zero, indicates a skip of 4 bytes.
    When used at scan line one, indicates a skip of 4 bytes, followed
    by a quad corrector (the -1 of which is next in the bytestream),
    followed by another skip of 4 bytes.

    Code 251, when used at scan line zero, indicates a skip of 8 bytes,
    and when used at scan line one, indicates a skip of 4 bytes.

    Code 250, when used at scan line zero, indicates a skip of 12 bytes,
    and when used at scan line one, indicates a skip of 8 bytes, and
    when used at scan line two, indicates a skip of 4 bytes.

    Code 249, when used at scan line zero, indicates a skip of 16 bytes,
    and when used at scan line one, indicates a skip of 12 bytes, and
    when used at scan line two, indicates a skip of 8 bytes, and
    when used at scan line three, indicates a skip of 4 bytes.

Other attempts to use the codes above (e.g. code 255 at scan line two)
will result in the decoder trapping an error.

*/

#endif

