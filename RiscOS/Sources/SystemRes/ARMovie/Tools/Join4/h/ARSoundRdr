/***************************************************************************
 *
 *  File:        JOIN:ARSoundRdr.h
 *
 *  Description: Join ARMovieSoundReader class header
 *
 *  Version:     0.0 1 Sep 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#ifndef ARMOVIESOUNDREADER_H
#define ARMOVIESOUNDREADER_H

////////////////////////////////////////////////////////////////////////////
// ARMovieSoundReader class
//     Requires:
//     Behaviour: Allows an ARMovie file to be opened and the sound
//                information to be extracted from the first track
//                Whilst this object exists the ARMovie file is open

class ARMovieSoundReader {

    public:

        ////////////////////////////////////////////////////////////////////
        // Constructor
        //     Requires:  ARMovie filename
        //     Behaviour: checks given ARMovie file exists, ifso reads
        //                information in the file relating to sound

        ARMovieSoundReader(char *filename);

        ~ARMovieSoundReader();

        ////////////////////////////////////////////////////////////////////
        // Sound header information accessors

        int   readFormat()           { return format; }
        float readReplayRate()       { return replayRate; }
        int   readNoChannels()       { return noChannels; }
        int   readPrecision()        { return precision; }
        int   readLinear()           { return linear; }
        int   readUnsigned()         { return unsign; }
        int   readFPC()              { return fpc; }
        int   readNoChunks()         { return noChunks; }

        ////////////////////////////////////////////////////////////////////
        // readNoSamples
        //     Requires:
        //     Behaviour: returns the number of samples in the ARMovie file

        int readNoSamples()          { return noSamples; }

        ////////////////////////////////////////////////////////////////////
        // loadSamples
        //     Requires:  destination buffer of appropriate size
        //                the from and to sample number to load
        //     Behaviour: loads the specified samples into the given buffer

        void loadSamples(char *dest, int fromSample, int toSample);

    private:

        // private methods
        void error(int headerLine);

        // entry points into dynamically loaded fetcher code //

        ////////////////////////////////////////////////////////////////////
        // fetcher_open
        //     Requires:  file handle, ccOffset, access param, sound track no
        //     Behaviour: calls fetcher code entry 0
        //                initialises fetcher and returns sound buffer size

        int fetcher_open(FILE *file, int cc, int access, int soundtrack);

        ////////////////////////////////////////////////////////////////////
        // fetcher_close
        //     Requires:
        //     Behaviour: calls fetcher code entry 4
        //                release all fetcher resources, doesn't close file

        void fetcher_close();

        ////////////////////////////////////////////////////////////////////
        // fetcher_fetch
        //     Requires:  chunk number, buffer/file address, access
        //     Behaviour: calls fetcher code entry 8
        //                release all fetcher resources, doesn't close file
        //                returns pointer to video frame/sound indexes
        //                and return status
        //                if error occurred, return value is error block

        void *fetcher_fetch(
            int chunk, char *buffer, int access, int statusIn,     // IN
            int *&frameIndex, int *&soundIndex, int &statusOut     // OUT
        );

        ////////////////////////////////////////////////////////////////////
        // fetcher_releasebuffer
        //     Requires:  chunk number, address of dest buffer
        //     Behaviour: calls fetcher code entry 12

        void fetcher_releasebuffer(int chunk, char *buffer);

        ////////////////////////////////////////////////////////////////////
        // loadSamples_normal & fetcher
        //     Requires:  as loadSamples
        //     Behaviour: two versions of loadSamples called depending on
        //                the input file type

        void loadSamples_normal(char *dest, int fromSample, int toSample);
        void loadSamples_fetcher(char *dest, int fromSample, int toSample);

        // private data members
        char  filename[256];             // the ARMovie filename
        FILE *file;                      // file handle
        float fps;                       // the number of frames per second
        int   format;                    // the file format number
        float replayRate;                // the sound replay rate
        int   noChannels;                // the number of channels
        int   precision;                 // sound precision (bits per sample)
        int   linear, unsign;            // whether the sound track is
                                         // linear or unsigned
        int   fpc;                       // number of frames per chunk

        int   noSamples;                 // number of samples in the file

        int   evenChunksize;             // even chunk size
        int   oddChunksize;              // odd chunk size
        int   maxChunksize;              // size of biggest chunk

        // chunk catalogue info
        int   noChunks;                  // the number of chunks
        int   ccOffset;                  // file offset to chunk catalogue
        int  *chunkSoundOffset;          // array of chunks offsets
                                         // only used if no fetcher
        int  *chunkSoundSize;            // array of chunk sound sizes

        // fetcher info
        char *fetcherName;               // pointer to fetcher name, or
                                         // NULL if no fetcher
        char *fetcherCodeArea;           // fetcher code area or NULL
        char *fetcher;                   // pointer to fetcher code or NULL
                                         // may not == above (4 word aligned)
        int fetcherSoundBufferSize;      // fetcher buffer size returned
                                         // from entry point zero

}; // end class ARMovieSoundReader

#endif // ARMOVIESOUNDREADER_H
