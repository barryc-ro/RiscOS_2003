/***************************************************************************
 *
 *  File:        JOIN:ARHeader.h
 *
 *  Description: Join ARMovieHeader class header
 *
 *  Version:     0.0 21 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#ifndef ARMOVIEHEADER_H
#define ARMOVIEHEADER_H

#include "ARChoices.h"

////////////////////////////////////////////////////////////////////////////
// ARMovieHeader class
//     Requires:
//     Behaviour: Stores information about an ARMovie header

class ARMovieHeader {

    public:

        ////////////////////////////////////////////////////////////////////
        // Constructor
        //     Requires:  nothing or the source directory the header file
        //                is in and whether ARMovie sound input is enabled
        //                from the ARMovieChoices object
        //     Behaviour: terminates program erroneously if no header file
        //                or not enough memory

        ARMovieHeader();
        ARMovieHeader(ARMovieChoices &choices);

        ~ARMovieHeader();

        ////////////////////////////////////////////////////////////////////
        // access to header fields
        //     Requires:  the sound fields need the sound track number
        //     Behaviour: sets relevant header fields
        //                string setting may corrupt the source string

        char *readName()             { return name; }
        void  setName(char *);
        char *readDate()             { return date; }
        void  setDate(char *);
        char *readAuthor()           { return author; }
        void  setAuthor(char *);

        int   readVideoFormat()      { return videoFormatNo; }
        void  setVideoFormat(int);
        void  setVideoFormatString(char *);
        int   readXSize()            { return xSizeNo; }
        void  setXSize(int);
        void  setXSizeString(char *);
        int   readYSize()            { return ySizeNo; }
        void  setYSize(int);
        void  setYSizeString(char *);
        int   readZDepth()           { return zDepthNo; }
        void  setZDepth(int);
        void  setZDepthString(char *);
        float readFPS()              { return fpsNo; }
        void  setFPS(float);
        void  setFPSString(char *);

        int   readNoSoundTracks()   { return noSoundTracks; }
        void  setNoSoundTracks(int);

        int   readSoundFormat(int n) { return soundFormatNo[n]; }
        void  setSoundFormat(int n, int);
        char *readType2SoundFormat(int n)
                                     { return soundType2FormatString[n]; }
        void  setType2SoundFormat(int n, char *);
        char *readType2ExtraParameters(int n)
                                     { return soundType2ParametersString[n];}
        void  setType2ExtraParameters(int n, char *);
        float readReplayRate(int n)  { return replayRateNo[n]; }
        void  setReplayRate(int n, float);
        int   readNoChannels(int n)  { return channelsNo[n]; }
        void  setNoChannels(int n, int);
        int   readPrecision(int n)   { return precisionNo[n]; }
        void  setPrecision(int n, int);
        int   readLinear(int n)      { return soundLinear[n]; }
        void  setLinear(int n, int);
        int   readUnsigned(int n)    { return soundUnsigned[n]; }
        void  setUnsigned(int n, int);
        int   readFPC()              { return fpcNo; }
        void  setFPC(int);

        ////////////////////////////////////////////////////////////////////
        // calculated values

        float readChunkTime()        { return (float) fpcNo / fpsNo; }

        ////////////////////////////////////////////////////////////////////
        // readUserSize
        //     Behaviour: Returns size of user supplied lines 1 to 14
        // createUserLines
        //     Behaviour: Puts user supplied lines 1 to 14 in file

        int readUserSize();
        void createUserLines(FILE *file);

        ////////////////////////////////////////////////////////////////////
        // readJoinSize
        //     Behaviour: Reads the size that lines 18 to 21 may occupy max
        //                they may not occupy all of this, in which case
        //                when created, padding will be inserted to this size
        // createJoinLines
        //     Requires:  Offsets/sizes etc for lines 15 to 21 plus the
        //                result of Keys::enabled()
        //     Behaviour: Creates lines 15 to 21

        int readJoinSize();
        void createJoinLines(
            FILE *file,
            int noChunks,
            int evenmaxsize, int oddmaxsize,
            int ccOffset,
            int hsOffset, int hsSize,
            int keyOffset, int keysEnabled
        );

    private:

        // private methods
        void construct();          // perform the first part of construction
                                   // this is so that the parameterised
                                   // contructor doesn't need to duplicate
                                   // code

        void error();              // exit the program with the error
                                   // "Out of memory for ARMovie header."
        void loadError(int line);  // "Error in 'Header' file at line X."

        // file information strings
        char *armovie, *name, *date, *author;

        // video format description
        int   videoFormatNo;  char *videoFormatString;
        int   xSizeNo;        char *xSizeString;
        int   ySizeNo;        char *ySizeString;
        int   zDepthNo;       char *zDepthString;
        float fpsNo;          char *fpsString;

        // sound format description
        int armovies;
        int noSoundTracks;        // there is always at least one sound track
                                  // which may be of type 0 (no sound)

        int *soundFormatNo;   char *soundFormatString;
                                  // sound format may be 0: no sound,
                                  // 1,2: type 1,2
        char **soundType2FormatString;
        char **soundType2ParametersString;
        float *replayRateNo;  char *replayRateString;
        int   *channelsNo;    char *channelsString;
        int   *reversed;
        int   *precisionNo;   char *precisionString;
        int   *soundLinear;
        int   *soundUnsigned;
        int    fpcNo;         char *fpcString;

        // file information lines
        int noChunksNo;       char *noChunksString;
        int forever;
        int evenSizeNo;       char *evenSizeString;
        int oddSizeNo;        char *oddSizeString;
        int catOffsetNo;      char *catOffsetString;
        int hsprOffsetNo;     char *hsprOffsetString;
        int hsprSizeNo;       char *hsprSizeString;
        int keysOffsetNo;     char *keysOffsetString;

}; // end class ARMovieHeader

#endif // ARMOVIEHEADER_H
