/***************************************************************************
 *
 *  File:        JOIN:ST_Type2.h
 *
 *  Description: Join SoundTrack_Type2 class header
 *
 *  Version:     0.0 27 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#ifndef SOUNDTRACK_TYPE2_H
#define SOUNDTRACK_TYPE2_H

#include "SoundTrack.h"
#include <stdio.h>

////////////////////////////////////////////////////////////////////////////
// SoundTrack_Type2 class
//     Requires:
//     Behaviour: Describes a type 2 sound track

class SoundTrack_Type2 : public SoundTrack {

    public:

        ////////////////////////////////////////////////////////////////////
        // Constructor
        //     Requires:  the source directory, the ARMovieHeader object
        //                the sound track number (to create filename)
        //                the format of type two sound
        //     Behaviour: creates an interface to the sound track source

        SoundTrack_Type2(
            int trackNo,
            SoundLoader &soundLoader,
            ARMovieHeader &header,
            char *format
        );

        ~SoundTrack_Type2();

        ////////////////////////////////////////////////////////////////////
        // overridden virtual functions

        int readFormat()                      { return 2; }
        void load(char *dest, int chunkNo);

        void resetEncoder();
        SoundTrack_Type2 *thisPtr_Type2()     { return this; }

    private:

        // private methods

        ////////////////////////////////////////////////////////////////////
        // generateChacheFilename
        //     Requires:  this track number
        //     Behaviour: creates the cache filename and puts it in
        //                cacheFilename. It will try to be in <WimpScrap$Dir>
        void generateCacheFilename(int trackNo);

        ////////////////////////////////////////////////////////////////////
        // readCompressedSoundSize
        //     Requires:  chunk no
        //     Behaviour: returns the size of a chunk of sound data
        //                compressed by the type 2 encoder with workspace hdr
        int readCompressedSoundSize(int chunk);

        // entry points into dynamically loaded encoder code //

        ////////////////////////////////////////////////////////////////////
        // encode_init1
        //     Requires:  sample frequency (Hz), extra parameters string
        //                (or zero)
        //     Behaviour: Calls entry point 0 and returns its result;
        //                the amount of workspace required (bytes)
        //                zero or pointer to error block
        //                frame size for compression type

        void encode_init1(
            int    sampleFreq,
            char  *parametersString,
            int   &workspace,
            char *&error,
            int   &frameSize
        );

        ////////////////////////////////////////////////////////////////////
        // encode_init2
        //     Requires:  sample frequency (Hz), workspace details
        //     Behaviour: Calls entry point 4 and returns its result;
        //                either 0 or pointer to error block

        void *encode_init2(
            int sampleFreq, char *workspace, int workspaceSize
        );

        ////////////////////////////////////////////////////////////////////
        // encode_compress
        //     Requires:  sample frequency (Hz), workspace details
        //     Behaviour: Calls entry point 4 and returns its result;
        //                either 0 or pointer to error block

        void encode_compress(
            int   opBufferBitOffset,     // IN:  bit offset in output buffer
            char *opBuffer,              //      pointer to output buffer
            int   noSamples,             //      no samples to compress
            char *samples,               //      pointer to the samples
            char *workspace,             //      pointer to workspace
            int   startChunk,            //      true (non-0) if frame is
                                         //      start of chunk
            int   &opBufferBitOffsetOut, // OUT: new bit offset in op buffer
            char *&errorOut,             //      0 or pointer to error block
            int   &noSamplesOut          //      no samples encoded
        );

        // private data members
        char *format;                   // textual version of type 2 format
        char *parametersString;         // extra parameters string or NULL
        int   noChannels;               // number of channels in track
        int   replayRate;               // the replay rate

        // dynamically loaded encoder info
        char *encoder;                  // address of the dynamically loaded
                                        // sound encoder m/c code
        char *encoderWorkspace;         // address of encoder workspace
        int   encoderWorkspaceSize;     // encoder workspace

        // CInfo file info
        int   encoderFrameSize;         // information from the CInfo
        float encoderPrefFreq;          // file in the type 2 compression
        float encoderLow;               // directory
        float encoderHigh;

        // Info file info
        int   decompressStart;          // information from the Info
        int   bitsStoragePerSample;     // file in the type 2 compression
        int   fixedRatio;               // directory
        float maxComprSampleSize;
        int   overheadPerChannel;

        // input sound data info
        int  *inputChunksize;           // no of bytes of samples to compress
                                        // for each chunk
        int  *noEncoderFramesPerChunk;  // the number of audio frames in
                                        // each chunk

        // how the variable rate data caching is performed
        enum SoundTrack_Type2_VariableCaching {st2vc_off, st2vc_on};
        SoundTrack_Type2_VariableCaching      variableCaching;
        char                                  cacheFilename[256];
        FILE                                 *cacheFile;

}; // end class SoundTrack_Type2

#endif // SOUNDTRACK_TYPE2_H
