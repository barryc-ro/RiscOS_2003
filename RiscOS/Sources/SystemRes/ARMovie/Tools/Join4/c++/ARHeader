/***************************************************************************
 *
 *  File:        JOIN:ARHeader.c++
 *
 *  Description: Join ARMovieHeader class implementation
 *
 *  Version:     0.0 21 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "ARHeader.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////
// since there can be more than one sound track, we declare SNDTRK_MAX
// copies of the sound data. The noSoundTracks variable contains the
// actual number of sound tracks

static const int SNDTRK_MAX = 10;

////////////////////////////////////////////////////////////////////////////
// when creating the header, lines 18-21 have numbers that may be any size
// in order to cope for that, space is reserved for their maximum possible
// size, given below


static const int NUMLEN_MAX = 10;

////////////////////////////////////////////////////////////////////////////
// static comment strings

static char *ARMOVIE_STRING    = "ARMovie";
static char *XSIZE_STRING      = "x size in pixels";
static char *YSIZE_STRING      = "y size in pixels";
static char *ZDEPTH_STRING     = "z pixel depth in bits";
static char *FPS_STRING        = "frames per second";
static char *REPLAYRATE_STRING = "sound replay rate in Hz";
static char *CHANNELS_STRING   = "sound channels";
static char *FPC_STRING        = "no of frames per chunk";

static char *VF0_STRING        = "no video";
static char *VFX_STRING        = "video format";

static char *SF0_STRING        = "no sound";
static char *SFX_STRING        = "sound format";

static char *NOCHUNKS_STRING   = "no chunks";
static char *EVENSIZE_STRING   = "even chunk size";
static char *ODDSIZE_STRING    = "odd chunk size";
static char *CCOFF_STRING      = "chunk catalogue offset";
static char *HSOFF_STRING      = "helpful sprite offset";
static char *HSSIZE_STRING     = "size of helpful sprite";
static char *KEYOFF0_STRING    = "no key frames";
static char *KEYOFFX_STRING    = "offset to key frames";

////////////////////////////////////////////////////////////////////////////
// default variables

static char *DEFAULT_NAME                   = "ARMovie name";
static char *DEFAULT_DATE                   = "Date and copyright details";
static char *DEFAULT_AUTHOR                 = "Author and other details";

static const int   DEFAULT_VIDEOFORMAT      = 0;              // no video
static const float DEFAULT_FPS              = 50;

static const int   DEFAULT_SOUNDFORMAT      = 0;              // no sound
static const float DEFAULT_REPLAYRATE       = 8000;
static const int   DEFAULT_CHANNELS         = 1;              // 1 channel
static const int   DEFAULT_REVERSED         = 0;              // normal sense
static const int   DEFAULT_PRECISION        = 16;
static       char *DEFAULT_PRECISIONCOMMENT = "bits per sample";
static const int   DEFAULT_FPC              = 0;


////////////////////////////////////////////////////////////////////////////
// internal string lengths

static const int INFO_SIZE    = 256;
static const int COMMENT_SIZE = 100;


////////////////////////////////////////////////////////////////////////////
// constructors

ARMovieHeader::ARMovieHeader() {

    construct();

} // end ARMovieHeader::ARMovieHeader


////////////////////////////////////////////////////////////////////////////

ARMovieHeader::ARMovieHeader(ARMovieChoices &choices) {

    construct();
    armovies = choices.readARMovies();

    // assemble filename of the header file
    char filename[256];
    sprintf(filename, "%s.Header", choices.readSource());
    choices.addIndex(filename);

    // ensure that the header file exists by opening it
    FILE *file;
    if ((file = fopen(filename, "r")) == NULL) {
        printf("\nError: The 'Header' file doesn't exist.\n");
        exit(1);
    }

    // read lines of data and insert them into this object as appropriate
    char lineBuffer[256];
    char *p;

    // line 1: skip ARMovie line
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(1);

    // line 2: movie name
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(2);
    setName(lineBuffer);

    // line 3: date and copyright details
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(3);
    setDate(lineBuffer);

    // line 4: author and other details
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(4);
    setAuthor(lineBuffer);

    // line 5: video compression format identifier
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(5);
    setVideoFormat(atoi(lineBuffer));
    for (p = lineBuffer; *p != ' ' && *p != 0; p++);
    setVideoFormatString(p);

    // line 6: x size in pixels
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(6);
    setXSize(atoi(lineBuffer));
    for (p = lineBuffer; *p != ' ' && *p != 0; p++);
    setXSizeString(p);

    // line 7: y size in pixels
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(7);
    setYSize(atoi(lineBuffer));
    for (p = lineBuffer; *p != ' ' && *p != 0; p++);
    setYSizeString(p);

    // line 8: z pixel depth in bits
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(8);
    setZDepth(atoi(lineBuffer));
    for (p = lineBuffer; *p != ' ' && *p != 0; p++);
    setZDepthString(p);

    // line 9: number of frames per second to project at
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(9);
    setFPS(atof(lineBuffer));
    for (p = lineBuffer; *p != ' ' && *p != 0; p++);
    setFPSString(p);

    // load sound info from header this can get hairy if there are
    // more than one sound track

    // line 10: sound compression format identifier
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(10);

    // first find the number of sound tracks to create
    noSoundTracks = 1;
    for (int n = 0; n < strlen(lineBuffer); n++) {
         if (lineBuffer[n] == '|') noSoundTracks++;
    }
    setNoSoundTracks(noSoundTracks);  // this will ensure value is valid!

    // check that if there is no video there is only one sound Track
    if (videoFormatNo == 0 && noSoundTracks != 1) {
        printf("Error: With no video, there can only be one ");
        printf("sound track\n");
        exit(1);
    }

    // now parse the sound format line (its a nightmare!)
    int bufferPos = 0;
    int track;
    for (track = 0; track < noSoundTracks; track++) {
        setSoundFormat(track, atoi(lineBuffer+bufferPos));
        if (readSoundFormat(track) == 2) {

            // find whitespace after format no
            while (
                lineBuffer[bufferPos] != ' '
                && lineBuffer[bufferPos] != 0
                && lineBuffer[bufferPos] != '\n'
                && lineBuffer[bufferPos] != '|'
            ) bufferPos++;
            if (lineBuffer[bufferPos] != ' ') {
                printf("Error: Header, line 10:\n");
                printf("       No format specified for type 2 sound\n");
                exit(1);
            }

            // find sound format descriptor after whitespace
            while(
                lineBuffer[bufferPos] == ' '
                || lineBuffer[bufferPos] == '\t'
            ) bufferPos++;
            if (
                lineBuffer[bufferPos] == '|'
                || lineBuffer[bufferPos] == 0
                || lineBuffer[bufferPos] == '\n'
            ) {
                printf("Error: Header, line 10:\n");
                printf("       No format specified for type 2 sound\n");
                exit(1);
            }

            // find end of format description, terminate string there
            int end = bufferPos;
            while (
                lineBuffer[end] != ' '
                && lineBuffer[end] != 0
                && lineBuffer[end] != '\n'
                && lineBuffer[end] != '|'
            ) end++;
            char oldChar = lineBuffer[end];
            lineBuffer[end] = 0;
            setType2SoundFormat(track, lineBuffer+bufferPos);
            lineBuffer[end] = oldChar;
            bufferPos = end;

            // see if there are extra parameters, if not goto next step
            while(
                lineBuffer[bufferPos] != '|'
                && lineBuffer[bufferPos] != '['
                && lineBuffer[bufferPos] != 0
                && lineBuffer[bufferPos] != '\n'
            ) bufferPos++;
            if (lineBuffer[bufferPos] == '[') {
                // find end of extra parameters, terminate string there
                end = ++bufferPos;
                while (
                    lineBuffer[end] != 0
                    && lineBuffer[end] != '\n'
                    && lineBuffer[end] != ']'
                ) end++;
                char oldChar = lineBuffer[end];
                lineBuffer[end] = 0;
                setType2ExtraParameters(track, lineBuffer+bufferPos);
                lineBuffer[end] = oldChar;
                bufferPos = end;
                while(
                    lineBuffer[bufferPos] != '|'
                    && lineBuffer[bufferPos] != 0
                    && lineBuffer[bufferPos] != '\n'
                ) bufferPos++;
            }

            // skip to next sound track format if there is one
            if (lineBuffer[bufferPos] == '|') {
                while(
                    lineBuffer[bufferPos] != ' '
                    && lineBuffer[bufferPos] != 0
                    && lineBuffer[bufferPos] != '\n'
                ) bufferPos++;
                while (lineBuffer[bufferPos] == ' ') bufferPos++;
            }

        } else { // sound format 1

            // find next track entry after format no
            while (
                lineBuffer[bufferPos] != 0
                && lineBuffer[bufferPos] != '\n'
                && lineBuffer[bufferPos] != '|'
            ) bufferPos++;
            if (lineBuffer[bufferPos] == '|') {
                while(
                    lineBuffer[bufferPos] != ' '
                    && lineBuffer[bufferPos] != 0
                    && lineBuffer[bufferPos] != '\n'
                ) bufferPos++;
                while (lineBuffer[bufferPos] == ' ') bufferPos++;
            }
        }

    } // end for each track

    // line 11: sound replay rate in Hz (or fractions of)
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(10);
    bufferPos = 0;
    for (track = 0; track < noSoundTracks; track++) {
        setReplayRate(track, atof(lineBuffer+bufferPos));
        while (
            lineBuffer[bufferPos] != '|'
            && lineBuffer[bufferPos] != 0
            && lineBuffer[bufferPos] != '\n'
        ) bufferPos++;
        if (
            lineBuffer[bufferPos] != '|'
            && track != noSoundTracks-1
        ) {
            printf("Error: Header file, line 11:\n");
            printf("       Too few sound tracks.\n");
            ERROR_EXIT(1);
        }
        if (lineBuffer[bufferPos] == '|') {
            while(
                lineBuffer[bufferPos] != ' '
                && lineBuffer[bufferPos] != 0
                && lineBuffer[bufferPos] != '\n'
            ) bufferPos++;
        }
    }

    // line 12: number of sound channels recorded
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(10);
    bufferPos = 0;
    for (track = 0; track < noSoundTracks; track++) {
        setNoChannels(track, atoi(lineBuffer+bufferPos));
        while (
            lineBuffer[bufferPos] != '|'
            && lineBuffer[bufferPos] != 0
            && lineBuffer[bufferPos] != '\n'
        ) bufferPos++;
        if (
            lineBuffer[bufferPos] != '|'
            && track != noSoundTracks-1
        ) {
            printf("Error: Header file, line 12:\n");
            printf("       Too few sound tracks.\n");
            ERROR_EXIT(1);
        }
        if (lineBuffer[bufferPos] == '|') {
            while(
                lineBuffer[bufferPos] != ' '
                && lineBuffer[bufferPos] != 0
                && lineBuffer[bufferPos] != '\n'
            ) bufferPos++;
        }
    }

    // line 13: sound precision
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(10);
    bufferPos = 0;
    for (track = 0; track < noSoundTracks; track++) {
        int bufferStartPos = bufferPos;
        setPrecision(track, atoi(lineBuffer+bufferPos));
        while (
            lineBuffer[bufferPos] != '|'
            && lineBuffer[bufferPos] != 0
            && lineBuffer[bufferPos] != '\n'
        ) bufferPos++;
        if (
            lineBuffer[bufferPos] != '|'
            && track != noSoundTracks-1
        ) {
            printf("Error: Header file, line 12:\n");
            printf("       Too few sound tracks.\n");
            ERROR_EXIT(1);
        }
        bufferPos++; // where we'll carry on next time round the loop
        // now read for linear and signed using bufferStartPos
        lineBuffer[bufferPos-1] = 0; // set up end of string
        if (strstr(lineBuffer+bufferStartPos, "linear"))
            soundLinear[track] = 1;
        if (strstr(lineBuffer+bufferStartPos, "unsigned"))
            soundUnsigned[track] = 1;
        while(
            lineBuffer[bufferPos] != ' '
            && lineBuffer[bufferPos] != 0
            && lineBuffer[bufferPos] != '\n'
        ) bufferPos++;
    }

    // if ARMovie sound input is enabled, ensure there are the correct
    // number of movies for the given number of sound tracks
    if (armovies != 0 && armovies != noSoundTracks) {
        printf("Error: No of soundtracks in header doesn't match the\n");
        printf("       number of input ARMovie files.\n");
        ERROR_EXIT(1);
    }

    // line 14: number of frames per chunk
    if (!fgets(lineBuffer, INFO_SIZE, file)) loadError(10);
    setFPC(atoi(lineBuffer));

    // close the file
    fclose(file);

} // end ARMovieHeader::ARMovieHeader


////////////////////////////////////////////////////////////////////////////

void ARMovieHeader::construct() {

    armovies = 0;

    // default state is no video, no sound, which is plainly ludicrous!

    // line 1: ARMovie
    armovie = ARMOVIE_STRING;

    // line 2: movie name
    name = new char[INFO_SIZE];
    if (!name) error();
    strcpy(name, DEFAULT_NAME);

    // line 3: date and copyright details
    date = new char[INFO_SIZE];
    if (!date) {
        printf("Error: No memory for ARMovie header");
        ERROR_EXIT(1);
    }
    strcpy(date, DEFAULT_DATE);

    // line 4: author and other details
    author = new char[INFO_SIZE];
    if (!author) error();
    strcpy(author, DEFAULT_AUTHOR);

    // line 5: video compression format identifier
    videoFormatNo = DEFAULT_VIDEOFORMAT;
    videoFormatString = new char[COMMENT_SIZE];
    if (!videoFormatString) error();
    strcpy(videoFormatString, VF0_STRING);

    // line 6: x size in pixels
    xSizeNo = 0;
    xSizeString = new char[COMMENT_SIZE];
    if (!xSizeString) error();
    strcpy(xSizeString, XSIZE_STRING);

    // line 7: y size in pixels
    ySizeNo = 0;
    ySizeString = new char[COMMENT_SIZE];
    if (!ySizeString) error();
    strcpy(ySizeString, YSIZE_STRING);

    // line 8: z pixel depth in bits
    zDepthNo = 16;
    zDepthString = new char[COMMENT_SIZE];
    if (!zDepthString) error();
    strcpy(zDepthString, ZDEPTH_STRING);

    // line 9: number of frames per second to project at
    fpsNo = DEFAULT_FPS;
    fpsString = new char[COMMENT_SIZE];
    if (!fpsString) error();
    strcpy(fpsString, FPS_STRING);

    // allocate all of the sound data arrays

    noSoundTracks = 1;

    soundFormatNo              = new   int[SNDTRK_MAX];
    soundType2FormatString     = new char*[SNDTRK_MAX];
    soundType2ParametersString = new char*[SNDTRK_MAX];
    replayRateNo               = new float[SNDTRK_MAX];
    channelsNo                 = new   int[SNDTRK_MAX];
    reversed                   = new   int[SNDTRK_MAX];
    precisionNo                = new   int[SNDTRK_MAX];
    soundLinear                = new   int[SNDTRK_MAX];
    soundUnsigned              = new   int[SNDTRK_MAX];

    if (
        !soundFormatNo
        || !soundType2FormatString
        || !soundType2ParametersString
        || !replayRateNo
        || !channelsNo
        || !reversed
        || !precisionNo
        || !soundLinear
        || !soundUnsigned
    ) {
        error();
    }

    for (int trackNo = 0 ; trackNo < SNDTRK_MAX; trackNo++) {

        // line 10: sound compression format identifier
        soundFormatNo[trackNo] = DEFAULT_SOUNDFORMAT;

        soundType2FormatString[trackNo] = new char[COMMENT_SIZE];
        soundType2ParametersString[trackNo] = new char[COMMENT_SIZE];
        if (
            !soundType2FormatString[trackNo]
            || !soundType2ParametersString[trackNo]
        ) error();
        *(soundType2FormatString[trackNo]) = 0;
        *(soundType2ParametersString[trackNo]) = 0;

        // line 11: sound replay rate in Hz (or fractions of)
        replayRateNo[trackNo] = DEFAULT_REPLAYRATE;

        // line 12: number of sound channels recorded
        channelsNo[trackNo] = DEFAULT_CHANNELS;
        reversed[trackNo]   = DEFAULT_REVERSED;

        // line 13: sound precision
        precisionNo[trackNo]   = DEFAULT_PRECISION;
        soundLinear[trackNo]   = 0;
        soundUnsigned[trackNo] = 0;

    }

    soundFormatString = new char[COMMENT_SIZE];
    if (!soundFormatString) error();
        strcpy(soundFormatString, SF0_STRING);

    replayRateString = REPLAYRATE_STRING;
    channelsString = CHANNELS_STRING;
    precisionString = new char[COMMENT_SIZE];
    if (!precisionString) error();
        strcpy(precisionString, DEFAULT_PRECISIONCOMMENT);

    // line 14: number of frames per chunk
    fpcNo = DEFAULT_FPC;
    fpcString = FPC_STRING;

} // end ARMovieHeader::construct


////////////////////////////////////////////////////////////////////////////

ARMovieHeader::~ARMovieHeader() {

    delete [] name;
    delete [] date;
    delete [] author;
    delete [] videoFormatString;
    delete [] xSizeString;
    delete [] ySizeString;
    delete [] zDepthString;
    delete [] fpsString;

    delete [] soundFormatNo;
    delete [] replayRateNo;
    delete [] channelsNo;
    delete [] reversed;
    delete [] precisionNo;
    delete [] soundLinear;
    delete [] soundUnsigned;
    for (int n = 0; n < SNDTRK_MAX; n++) {
        delete [] soundType2FormatString[n];
        delete [] soundType2ParametersString[n];
    }
    delete [] soundType2FormatString;

    delete [] soundFormatString;
    delete [] precisionString;

} // end ARMovieHeader::~ARMovieHeader


////////////////////////////////////////////////////////////////////////////

void ARMovieHeader::setName(char *newName) {

    strncpy(name, newName, INFO_SIZE);
    char *nl = strchr(name, '\n'); // remove any '\n'
    if (nl) *nl = 0;

} // end ARMovieHeader::setName


void ARMovieHeader::setDate(char *newDate) {

    strncpy(date, newDate, INFO_SIZE);
    char *nl = strchr(date, '\n'); // remove any '\n'
    if (nl) *nl = 0;

} // end ARMovieHeader::setDate


void ARMovieHeader::setAuthor(char *newAuthor) {

    strncpy(author, newAuthor, INFO_SIZE);
    char *nl = strchr(author, '\n'); // remove any '\n'
    if (nl) *nl = 0;

} // end ARMovieHeader::setAuthor


void ARMovieHeader::setVideoFormat(int newVF) {

    videoFormatNo = newVF;
    if (videoFormatNo == 0)
        strcpy(videoFormatString, VF0_STRING);
    else
        strcpy(videoFormatString, VFX_STRING);

} // end ARMovieHeader::setVideoFormat


void ARMovieHeader::setVideoFormatString(char *source) {

    if (strchr(source, '\n')) *strchr(source, '\n') = 0;
    while (*source == ' ' || *source == '\t') source++;
    strncpy(videoFormatString, source, COMMENT_SIZE);

} // end ARMovieHeader::setVideoFormatString


void ARMovieHeader::setXSize(int newX) {

    if (newX < 0) {
        printf("Error: X pixel size must be >= 0 \n");
        ERROR_EXIT(1);
    }
    xSizeNo = newX;

} // end ARMovieHeader::setXSize


void ARMovieHeader::setXSizeString(char *source) {

    if (strchr(source, '\n')) *strchr(source, '\n') = 0;
    while (*source == ' ' || *source == '\t') source++;
    strncpy(xSizeString, source, COMMENT_SIZE);

} // end ARMovieHeader::setXSizeString


void ARMovieHeader::setYSize(int newY) {

    if (newY < 0) {
        printf("Error: Y pixel size must be >= 0 \n");
        ERROR_EXIT(1);
    }
    ySizeNo = newY;

} // end ARMovieHeader::setYSize


void ARMovieHeader::setYSizeString(char *source) {

    if (strchr(source, '\n')) *strchr(source, '\n') = 0;
    while (*source == ' ' || *source == '\t') source++;
    strncpy(ySizeString, source, COMMENT_SIZE);

} // end ARMovieHeader::setYSizeString


void ARMovieHeader::setZDepth(int newZ) {

    if (newZ != 8 && newZ != 16) {
        printf("Error: Z pixel depth must be 8 or 16 bits per pixel\n");
        ERROR_EXIT(1);
    }
    zDepthNo = newZ;

} // end ARMovieHeader::setZDepth


void ARMovieHeader::setZDepthString(char *source) {

    if (strchr(source, '\n')) *strchr(source, '\n') = 0;
    while (*source == ' ' || *source == '\t') source++;
    strncpy(zDepthString, source, COMMENT_SIZE);

} // end ARMovieHeader::setZDepthString


void ARMovieHeader::setFPS(float newFPS) {

    if (newFPS < 0) {
        printf("Error: FPS must be >= 0\n");
        ERROR_EXIT(1);
    }
    fpsNo = newFPS;

} // end ARMovieHeader::setFPS


void ARMovieHeader::setFPSString(char *source) {

    if (strchr(source, '\n')) *strchr(source, '\n') = 0;
    while (*source == ' ' || *source == '\t') source++;
    strncpy(fpsString, source, COMMENT_SIZE);

} // end ARMovieHeader::setFPSString


void ARMovieHeader::setNoSoundTracks(int newST) {

    if (newST < 0) {
        printf("Error: Negative soundtracks???.\n");
        ERROR_EXIT(1);
    }
    if (newST > SNDTRK_MAX) {
        printf("Error: Join can't handle > %i sound tracks.\n", SNDTRK_MAX);
        ERROR_EXIT(1);
    }
    noSoundTracks = newST;

} // end ARMovieHeader::setNoSoundTracks


void ARMovieHeader::setSoundFormat(int track, int newSF) {

    if (newSF < 0 || newSF > 2) {
        printf("Error: Sound format must be 0, 1, or 2, not %i.\n", newSF);
        ERROR_EXIT(1);
    }
    soundFormatNo[track] = newSF;
    if (newSF == 0 && noSoundTracks <= 1)
        strcpy(soundFormatString, SF0_STRING);
    else
        strcpy(soundFormatString, SFX_STRING);

} // end ARMovieHeader::setSoundFormat


void ARMovieHeader::setType2SoundFormat(int track, char *newSF) {

    strncpy(soundType2FormatString[track], newSF, COMMENT_SIZE);
    char *nl = strchr(soundType2FormatString[track], '\n');// remove any '\n'
    if (nl) *nl = 0;

} // end ARMovieHeader::setType2SoundFormat


void ARMovieHeader::setType2ExtraParameters(int track, char *newEP) {

    strncpy(soundType2ParametersString[track], newEP, COMMENT_SIZE);
    char *nl = strchr(soundType2FormatString[track], '\n');// remove any '\n'
    if (nl) *nl = 0;

} // end ARMovieHeader::setType2ExtraParameters


void ARMovieHeader::setReplayRate(int track, float newRR) {

    if (newRR <= 0 && readSoundFormat(track) != 0) {
        printf("Error: Replay rate must be >= 0.\n");
        ERROR_EXIT(1);
    }
    replayRateNo[track] = newRR;

} // end ARMovieHeader::setReplayRate


void ARMovieHeader::setNoChannels(int track, int newChannels) {

    if (newChannels <= 0 && readSoundFormat(track) != 0) {
        printf("Error: No channels must be > 0.\n");
        ERROR_EXIT(1);
    }
    channelsNo[track] = newChannels;

} // end ARMovieHeader::setNoChannels


void ARMovieHeader::setPrecision(int track, int newPrec) {

    if (newPrec != 4 && newPrec != 8 && newPrec != 16 && readSoundFormat(track) != 0) {
        printf("Error: Sound precision must be 4, 8, or 16.\n");
        ERROR_EXIT(1);
    }
    precisionNo[track] = newPrec;

} // end ARMovieHeader::setPrecision


void ARMovieHeader::setLinear(int track, int sl) {

    soundLinear[track] = sl;

} // end ARMovieHeader::setLinear


void ARMovieHeader::setUnsigned(int track, int su) {

    soundUnsigned[track] = su;

} // end ARMovieHeader::setUnsigned


void ARMovieHeader::setFPC(int newFPC) {

      if (newFPC <= 0) {
          printf("Error: FPC must be > 0.\n");
          ERROR_EXIT(1);
      }
      fpcNo = newFPC;

} // end ARMovieHeader::setFPC


////////////////////////////////////////////////////////////////////////////

void ARMovieHeader::error() {

    printf("Error: No memory for ARMovie header\n");
    ERROR_EXIT(1);

} // end ARMovieHeader::error


////////////////////////////////////////////////////////////////////////////

void ARMovieHeader::loadError(int line) {

    printf("Error: Error in 'Header' file at line %i\n", line);
    ERROR_EXIT(1);

} // end ARMovieHeader::error


////////////////////////////////////////////////////////////////////////////

int ARMovieHeader::readUserSize() {

    char lineBuffer[256]; // temporary line buffer
    int size = 0;

    // create every line _EXACTLY_ as in ARMovieHeader::createUserLines
    // and total size of bytes used

    sprintf(lineBuffer, "%s\n", armovie);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%s\n", name);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%s\n", date);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%s\n", author);
    size += strlen(lineBuffer);

    sprintf(lineBuffer, "%i %s\n", videoFormatNo, videoFormatString);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%i %s\n", xSizeNo, xSizeString);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%i %s\n", ySizeNo, ySizeString);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%i %s\n", zDepthNo, zDepthString);
    size += strlen(lineBuffer);
    sprintf(lineBuffer, "%f %s\n", fpsNo, fpsString);
    size += strlen(lineBuffer);

    for (int track = 0; track < noSoundTracks; track++) {
        if (track != 0) {
            sprintf(lineBuffer, " |%i ", track+1);
            size += strlen(lineBuffer);
        }
        switch (soundFormatNo[track]) {
            case 2:
                sprintf(lineBuffer,"%i %s",2, soundType2FormatString[track]);
                size += strlen(lineBuffer);
                if (soundType2ParametersString[track] != NULL) {
                    sprintf(
                        lineBuffer, " [%s]",
                        soundType2ParametersString[track]
                    );
                    size += strlen(lineBuffer);
                }
                break;
            default:
                sprintf(lineBuffer,"%i", soundFormatNo[track]);
                size += strlen(lineBuffer);
                break;
        }
    }
    sprintf(lineBuffer, " %s\n", soundFormatString);
    size += strlen(lineBuffer);

    for (track = 0; track < noSoundTracks; track++) {
        if (track != 0) {
            sprintf(lineBuffer, " |%i ", track+1);
            size += strlen(lineBuffer);
        }
        sprintf(lineBuffer, "%f", replayRateNo[track]);
        size += strlen(lineBuffer);
    }
    sprintf(lineBuffer, " %s\n", replayRateString);
    size += strlen(lineBuffer);

    for (track = 0; track < noSoundTracks; track++) {
        if (track != 0) {
            sprintf(lineBuffer, " |%i ", track+1);
            size += strlen(lineBuffer);
        }
        sprintf(lineBuffer, "%i", channelsNo[track]);
        size += strlen(lineBuffer);
    }
    sprintf(lineBuffer, " %s\n", channelsString);
    size += strlen(lineBuffer);

    for (track = 0; track < noSoundTracks; track++) {
        if (track != 0) {
            sprintf(lineBuffer, " |%i ", track+1);
            size += strlen(lineBuffer);
        }
        sprintf(lineBuffer, "%i", precisionNo[track]);
        size += strlen(lineBuffer);
        if (soundLinear[track])   size += 7; // == strlen(" linear")
        if (soundUnsigned[track]) size += 9; // == strlen(" unsigned")
    }
    sprintf(lineBuffer, " %s\n", precisionString);
    size += strlen(lineBuffer);

    sprintf(lineBuffer, "%i %s\n", fpcNo, fpcString);
    size += strlen(lineBuffer);

    return size;

} // end ARMovieHeader::readUserSize


////////////////////////////////////////////////////////////////////////////

void ARMovieHeader::createUserLines(FILE *file) {

    fprintf(file, "%s\n", armovie);
    fprintf(file, "%s\n", name);
    fprintf(file, "%s\n", date);
    fprintf(file, "%s\n", author);

    fprintf(file, "%i %s\n", videoFormatNo, videoFormatString);
    fprintf(file, "%i %s\n", xSizeNo, xSizeString);
    fprintf(file, "%i %s\n", ySizeNo, ySizeString);
    fprintf(file, "%i %s\n", zDepthNo, zDepthString);
    fprintf(file, "%f %s\n", fpsNo, fpsString);

    for (int track = 0; track < noSoundTracks; track++) {
        if (track != 0) fprintf(file, " |%i ", track+1);
        switch (soundFormatNo[track]) {
            case 2:
                fprintf(file, "%i %s", 2, soundType2FormatString[track]);
                if (soundType2ParametersString[track] != NULL) {
                    fprintf(
                        file, " [%s]",
                        soundType2ParametersString[track]
                    );
                }
                break;
            default:
                fprintf( file, "%i", soundFormatNo[track]);
                break;
        }
    }
    fprintf(file, " %s\n", soundFormatString);

    for (track = 0; track < noSoundTracks; track++) {
        if (track != 0) fprintf(file, " |%i ", track+1);
        fprintf(file, "%f", replayRateNo[track]);
    }
    fprintf(file, " %s\n", replayRateString);

    for (track = 0; track < noSoundTracks; track++) {
        if (track != 0) fprintf(file, " |%i ", track+1);
        fprintf(file, "%i", channelsNo[track]);
    }
    fprintf(file, " %s\n", channelsString);

    for (track = 0; track < noSoundTracks; track++) {
        if (track != 0) fprintf(file, " |%i ", track+1);
        fprintf(file, "%i", precisionNo[track]);
        if (soundLinear[track])   fprintf(file, " linear");
        if (soundUnsigned[track]) fprintf(file, " unsigned");
    }
    fprintf(file, " %s\n", precisionString);

    fprintf(file, "%i %s\n", fpcNo, fpcString);

} // end ARMovieHeader::createUserLines


////////////////////////////////////////////////////////////////////////////

int ARMovieHeader::readJoinSize() {  // what about the 'forever' tag???

    return ( strlen(NOCHUNKS_STRING) + strlen(EVENSIZE_STRING)
           + strlen(ODDSIZE_STRING) + strlen(CCOFF_STRING)
           + strlen(HSOFF_STRING) + strlen(HSSIZE_STRING)
           + strlen(KEYOFFX_STRING)
           + 8*NUMLEN_MAX);

    // Requires: KEYOFFX_STRING > KEYYOFF0_STRING

} // end ARMovieHeader::readJoinSize


////////////////////////////////////////////////////////////////////////////

void ARMovieHeader::createJoinLines(
    FILE *file,
    int noChunks,
    int evenmaxsize, int oddmaxsize,
    int ccOffset,
    int hsOffset, int hsSize,
    int keyOffset, int keysEnabled
) {

    int size = 0;                // no of bytes produced so far
    int target = readJoinSize(); // target byte production

    size = (int) ftell(file);
    // line 15: number of chunks
    fprintf(file, "%i %s\n", noChunks, NOCHUNKS_STRING);

    // line 16: 'even' chunk size
    fprintf(file, "%i %s\n", evenmaxsize, EVENSIZE_STRING);

    // line 17: 'odd' chunk size
    fprintf(file, "%i %s\n", oddmaxsize, ODDSIZE_STRING);

    // line 18: offset to chunk catalogue
    fprintf(file, "%i %s\n", ccOffset, CCOFF_STRING);

    // line 19: offset to 'helpful' sprite
    fprintf(file, "%i %s\n", hsOffset, HSOFF_STRING);

    // line 20: size of helpful sprite
    fprintf(file, "%i %s\n", hsSize, HSSIZE_STRING);

    // line 21: offset to key frames
    if (keysEnabled)
        fprintf(file, "%i %s\n", keyOffset, KEYOFFX_STRING);
    else
        fprintf(file, "-1 %s\n", KEYOFF0_STRING);

    size = (int) ftell(file) - size;

    // ensure that we write the correct number of bytes
    // (if we don't all byte offsets will be incorrect)
    while (size < target) {
        fputc(0, file);
        size++;
    }

} // end ARMovieHeader::createJoinLines


////////////////////////////////////////////////////////////////////////////

