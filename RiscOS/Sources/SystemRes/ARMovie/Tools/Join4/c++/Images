/***************************************************************************
 *
 *  File:        JOIN:Images.c++
 *
 *  Description: Join Images class implementation
 *
 *  Version:     0.0 21 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Images.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

Images::Images(ARMovieChoices &ch, ARMovieHeader &header) {

    char *tempfilename;
    FILE *file;

    choices = &ch;

    if (!choices->imagesEnabled()) header.setVideoFormat(0);

    imagesEnabled = 1;
    if (header.readVideoFormat() == 0) {
        totalNumber = 0;
        imagesEnabled = 0;
        oddmaxsize = 0;
        evenmaxsize = 0;
        return;
    }

    tempfilename = new char[256];
    if (!tempfilename) {
        printf("Error: No memory when reading images.\n");
        ERROR_EXIT(1);
    }

    // find the total number of image files
    totalNumber = 0;
    int fileExists = 1;
    while (fileExists) {
        readFilename(tempfilename, totalNumber);
        if (!(file = fopen(tempfilename, "rb"))) {
          fileExists = 0;
        } else {
            fclose(file);
            totalNumber++;
        }
    }

    // store the size of each image, and calcuate even and odd max sizes
    oddmaxsize = 0;
    evenmaxsize = 0;
    imageSize = new int[totalNumber];
    if (!imageSize) {
        printf("Error: No memory for image size list.\n");
        ERROR_EXIT(1);
    }
    for (int n = 0; n < totalNumber; n++) {
        readFilename(tempfilename, n);
        if (!(file = fopen(tempfilename, "rb"))) {
            printf("Error: Couldn't reopen image file.\n");
            ERROR_EXIT(1);
        }
        fseek(file, 0, SEEK_END);
        imageSize[n] = (int) ftell(file);
        fclose(file);
        if ((n&1) && imageSize[n] > oddmaxsize)
            oddmaxsize = imageSize[n];
        if (!(n&1) && imageSize[n] > evenmaxsize)
            evenmaxsize = imageSize[n];
    }

    // delete temporary workspace
    delete [] tempfilename;

} // end Images::Images


////////////////////////////////////////////////////////////////////////////

Images::~Images() {

//    delete [] imageSize; // this used to crash the program

} // end Images::~Images


////////////////////////////////////////////////////////////////////////////

int Images::readSize(int imageNo) {

    if (imageNo < 0 || imageNo >= totalNumber) return 0;
    return imageSize[imageNo];

} // end Images::readSize


////////////////////////////////////////////////////////////////////////////

void Images::readFilename(char *dest, int no) {

    sprintf(dest,"%s.Images%i.", choices->readSource(), no/77);
    choices->addIndex(dest);
    int len = strlen(dest);
    if ((no%77) <= 9) len += sprintf(dest+len, "0");
    sprintf(dest+len, "%i", no%77);

} // end Images::readFilename


////////////////////////////////////////////////////////////////////////////

void Images::load(char *dest, int imageNo) {

    char filename[256];
    int imageSize = readSize(imageNo);
    readFilename(filename, imageNo);
    FILE *inFile = fopen(filename, "rb");
    if (!inFile) {
        printf("Error: Unable to open image file %i.\n", imageNo);
        printf("       Filename: %s.\n", filename);
        ERROR_EXIT(1);
    }
    if (fread(dest, sizeof(char), imageSize, inFile) != imageSize) {
        printf("Error: Reading image file %i.\n", imageNo);
        ERROR_EXIT(1);
    }
    fclose(inFile);

} // end Images::load


////////////////////////////////////////////////////////////////////////////
