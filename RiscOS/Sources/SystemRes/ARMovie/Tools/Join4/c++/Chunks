/***************************************************************************
 *
 *  File:        JOIN:Chunks.c++
 *
 *  Description: Join Chunks class implementation
 *
 *  Version:     0.0 26 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Chunks.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

Chunks::Chunks(Images *i, Sounds *s, int o, int a, int nc)
    : images(i), sounds(s), ccOffset(o), chunkAlign(a-1) {

    noChunks = nc;

    int bufferSize = images->readOddmaxsize();
    if (images->readEvenmaxsize() > bufferSize)
        bufferSize = images->readEvenmaxsize();
    for (int track = 0; track < sounds->readNoTracks(); track++)
        if (sounds->readTrack(track)->readMaxChunkSize() > bufferSize)
            bufferSize = sounds->readTrack(track)->readMaxChunkSize();
//    memBuffer = new char[bufferSize];
//    if (!memBuffer) {
//        printf("Error: No memory for chunk creation.\n");
//        ERROR_EXIT(1);
//    }

} // end Chunks::Chunks


////////////////////////////////////////////////////////////////////////////

Chunks::~Chunks() {

//    delete [] memBuffer;

} // end Chunks::~Chunks


////////////////////////////////////////////////////////////////////////////

void Chunks::create(FILE *file) {

    createChunkCatalogue(file);

    int chunkOffset = firstChunkOffset;
    for (int chunk = 0; chunk < noChunks; chunk++)
        chunkOffset = createChunk(file, chunk, chunkOffset);

} // end Chunks::create


////////////////////////////////////////////////////////////////////////////

void Chunks::createChunkCatalogue(FILE *file) {

    int firstGuess; // guessed offset of the first chunk
    int chunkOffset;
    int catalogueSize;

    // guess how long the catalogue is to work out first chunk offset
    firstGuess = alignChunkOffset(ccOffset + noChunks*30);

    // ensure that the catalogue will fit into the space given by this
    // by pseduo-creating the catalogue to measure its length
    // if it goes beyond this guess, add the chunkAlign size and try again
    char lineBuf[256];
    int n = -1;
    do {
        n++;
        firstChunkOffset = firstGuess + n*(chunkAlign+1);
        chunkOffset = firstChunkOffset;
        catalogueSize = 0;
        for (int chunk = 0; chunk < noChunks; chunk++) {
            chunkOffset = createCatalogueLine(lineBuf, chunk, chunkOffset);
            chunkOffset = alignChunkOffset(chunkOffset);
            catalogueSize += strlen(lineBuf);
        }
    } while (ccOffset+catalogueSize > chunkOffset);

    // we now have now worked out the firstChunkOffset

    // create the chunk catalogue
    chunkOffset = firstChunkOffset;
    catalogueSize = 0;
    for (int chunk = 0; chunk < noChunks; chunk++) {
        chunkOffset = createCatalogueLine(lineBuf, chunk, chunkOffset);
        chunkOffset = alignChunkOffset(chunkOffset);
        fprintf(file, lineBuf);
        catalogueSize += strlen(lineBuf);
    }

    // pad with zeros up to the first chunk offset
    n = ccOffset + catalogueSize;
    while (n < firstChunkOffset) {
        fputc(0, file);
        n++;
    }

} // end Chunks::createChunkCatalogue


////////////////////////////////////////////////////////////////////////////

int Chunks::createChunk(FILE *file, int chunk, int chunkOffset) {

    int bytesProduced = 0;

    // if video...
    if (images->readTotalNumber()) {
        int imageSize = images->readSize(chunk);
        memBuffer = new char[imageSize];
        images->load(memBuffer, chunk);
        if (fwrite(memBuffer, sizeof(char), imageSize, file) != imageSize) {
            printf("Error: Writing image file %i.\n", chunk);
            ERROR_EXIT(1);
        }
        bytesProduced += imageSize;
        delete [] memBuffer;
    }

    // if audio...
    for (int track = 0; track < sounds->readNoTracks(); track++) {
        int soundSize = sounds->readTrack(track)->readChunkSize(chunk);
        memBuffer = new char[soundSize];
        sounds->readTrack(track)->load(memBuffer, chunk);
        if (fwrite(memBuffer, sizeof(char), soundSize, file) != soundSize) {
            printf("Error: Writing sound chunk%i.\n", chunk);
            ERROR_EXIT(1);
        }
        bytesProduced += soundSize;
        delete [] memBuffer;
    }

    // pad to chunk align value
    int aligned = alignChunkOffset(chunkOffset+bytesProduced);
    int padding = aligned - (chunkOffset+bytesProduced);
    while (padding > 0) {
        fputc(0, file);
        padding--;
    }

    return aligned;

} // end Chunks::createChunk


////////////////////////////////////////////////////////////////////////////

int Chunks::createCatalogueLine(char *dest, int chunk, int chunkOffset) {

    int pos = 0;

    // generate this chunk offset
    pos = sprintf(dest, "%i,", chunkOffset);

    // video
    if (images->readTotalNumber()) {
        pos += sprintf(dest+pos, "%i;", images->readSize(chunk));
        chunkOffset += images->readSize(chunk);
    } else {
        pos += sprintf(dest+pos, "0;");
    }

    // audio
    if (sounds->readNoTracks()) {
        for (int track = 0; track < sounds->readNoTracks(); track++) {
            if (track > 0) pos += sprintf(dest+pos, "|%i ", track+1);
            pos += sprintf(
                       dest+pos,
                       "%i", sounds->readTrack(track)->readChunkSize(chunk)
                   );
            chunkOffset += sounds->readTrack(track)->readChunkSize(chunk);
        }
    } else {
        pos += sprintf(dest+pos, "0");
    }

    pos += sprintf(dest+pos, "\n");
    return chunkOffset;

} // end Chunks::createCatalogueLine


////////////////////////////////////////////////////////////////////////////

int Chunks::alignChunkOffset(int chunkOffset) {

    return (chunkOffset + chunkAlign) & ~chunkAlign;

} // end Chunks::alignChunkOffset


////////////////////////////////////////////////////////////////////////////
