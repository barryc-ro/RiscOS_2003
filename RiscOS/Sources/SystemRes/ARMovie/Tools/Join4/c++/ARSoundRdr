/***************************************************************************
 *
 *  File:        JOIN:ARSoundRdr.c++
 *
 *  Description: Join ARMovieSoundReader class implementation
 *
 *  Version:     0.0 1 Sep 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>   // for file access
#include <stdlib.h>  // for exit
#include <string.h>
#include "ARSoundRdr.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////
// NOTE: This code contains a part that specifically needs the Acorn C/C++
//       stdio.h file to read the file handle from a FILE structure.
//       To find, search for 'NOTE:'
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
// external assembler routine that calls machine code

extern "C" {
    void mc_routine(char *address, int regs[9]);
}

////////////////////////////////////////////////////////////////////////////

#define LINE_SIZE 256 // line buffer size for reading ARMovie header

////////////////////////////////////////////////////////////////////////////

ARMovieSoundReader::ARMovieSoundReader(char *f) {

    // make a copy of the filename
    strncpy(filename, f, 256);

    // check that the file exists
    file = fopen(filename, "rb");
    if (!file) {
        printf("Error: ARMovie file %s couldn't be opened\n", filename);
        ERROR_EXIT(1);
    }

    char lineBuffer[LINE_SIZE];

    // line 0: ARMovie
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(0);

    if (strcmp(lineBuffer, "ARMovie\n") != 0) {
        printf("Error: Sound input file is not an ARMovie file.\n");
        printf("       %s\n", lineBuffer);
        fclose(file);
        ERROR_EXIT(1);
    }

    // skip header lines
    for (int n = 1; n < 8; n++)
        if (!fgets(lineBuffer, LINE_SIZE, file)) error(n+1);

    // line 9: frames per second
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(9);
    fps = atof(lineBuffer);

    // line 10: sound format
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(10);
    format = atoi(lineBuffer);
    if (format == 2) {
        printf("Error: Type 2 sound from source ARMovie...\n");
        printf("       Join can't handle it.\n");
        ERROR_EXIT(1);
    }

    // line 11: sound replay rate
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(11);
    replayRate = atof(lineBuffer);

    // line 12: number of sound channels recorded
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(12);
    noChannels = atoi(lineBuffer);

    // line 13: sound precision
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(13);
    precision = atoi(lineBuffer);
    linear = 0;
    unsign = 0;
    // ensure we only look at track 1
    {
        int bufferPos = 0;
        while (
            lineBuffer[bufferPos] != '|'
            && lineBuffer[bufferPos] != 0
            && lineBuffer[bufferPos] != '\n'
        ) bufferPos++;
        lineBuffer[bufferPos] = 0; // set up end of string
    }
    if (strstr(lineBuffer, "linear"))   linear = 1;
    if (strstr(lineBuffer, "unsigned")) unsign = 1;

    // line 13: frames per chunk
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(14);
    fpc = atoi(lineBuffer);

    // line 14: no chunks
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(15);
    noChunks = atoi(lineBuffer)+1;

    // line 15: even chunk size
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(16);
    evenChunksize = atoi(lineBuffer);

    // line 16: odd chunk size
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(17);
    oddChunksize = atoi(lineBuffer);

    maxChunksize = (evenChunksize > oddChunksize)
                 ? evenChunksize : oddChunksize;

    // line 17: offet to chunk catalogue & fetcher info
    if (!fgets(lineBuffer, LINE_SIZE, file)) error(18);
    ccOffset = atoi(lineBuffer);

    // check line 17 for fetcher info
    // if a fetcher is specified, load and initialise it
    fetcherName = NULL;
    fetcher = NULL;
    fetcherCodeArea = NULL;
    char *fetcherString = strstr(lineBuffer, "Fetcher ");
    if (fetcherString) {
        // copy the fetcher name
        fetcherString += 9;
        for (
            int n = 0;
            fetcherString[n] != 0
            && fetcherString[n] != ']'
            && fetcherString[n] != ' '
            && fetcherString[n] != '\n';
            n++
        );
        fetcherString[n] = 0;
        fetcherName = new char[strlen(fetcherString)+1];
        if (!fetcherName) {
            printf("Error: No memory for fetcher info.\n");
            ERROR_EXIT(1);
        }
        strcpy(fetcherName, fetcherString);

        // dynamcially load the fetcher code
        char fetcherFilename[256];
        sprintf(
            fetcherFilename,
            "<ARMovie$Dir>.MovingLine.Fetchers.%s", fetcherName
        );
        FILE *fetcherFile = fopen(fetcherFilename, "r");
        if (!fetcherFile) {
            printf("Error: Fetcher for ARMovie sound doesn't exist.\n");
            printf("       File %s.\n", fetcherFile);
            ERROR_EXIT(1);
        }
        fseek(fetcherFile, 0, SEEK_END);
        int fetcherSize = (int) ftell(fetcherFile);
        fetcherCodeArea = new char[fetcherSize+16];
        if (!fetcherCodeArea) {
            printf("Error: No memory to load ARMovie fetcher.\n");
            fclose(fetcherFile);
            ERROR_EXIT(1);
        }
        // quad word align this as per documentation
        fetcher = (char*) ( ((int)(fetcherCodeArea+15)) & ~15 );
        fseek(fetcherFile, 0, SEEK_SET);
        if (
            fread(fetcher, sizeof(char), fetcherSize, fetcherFile)
            != fetcherSize
        ) {
            printf("Error: Couldn't read fetcher.\n");
            fclose(fetcherFile);
            ERROR_EXIT(1);
        }
        fclose(fetcherFile);

        // initialise the fetcher with the ARMovie file
        fetcherSoundBufferSize = fetcher_open(file, ccOffset, 2, 0);
    }

    // allocate memory for tables
    chunkSoundOffset = new int[noChunks];
    chunkSoundSize = new int[noChunks];
    if (!chunkSoundOffset || !chunkSoundSize) {
        printf("Error: No memory for chunk table for ARMovie sound.\n");
        ERROR_EXIT(1);
    }

    // now read the chunk catalogue information if a normal file, else
    // read fetcher info
    if (!fetcher) { // no fetcher => normal ARMovie

        if (fseek(file, ccOffset, SEEK_SET)) {
            printf("Error: Reading chunk catalogue in ARMovie file.\n");
            ERROR_EXIT(1);
        }
        noSamples = 0;
        for (int chunk = 0; chunk < noChunks; chunk++) {
            if (!fgets(lineBuffer, LINE_SIZE, file)) {
                printf("Error: In chunk catalogue of ARMovie sound.\n");
                ERROR_EXIT(1);
            }
            chunkSoundOffset[chunk] = atoi(lineBuffer);
            int p = 0;
            while (lineBuffer[p] != 0 && lineBuffer[p] != ',') p++;
            if (lineBuffer[p] == 0) {
                printf("Error: Bad chunk catalogue in ARMovie sound.\n");
                ERROR_EXIT(1);
            }
            p++;
            chunkSoundOffset[chunk] += atoi(lineBuffer+p);
            while (lineBuffer[p] != 0 && lineBuffer[p] != ';') p++;
            if (lineBuffer[p] == 0) {
                printf("Error: Bad chunk catalogue in ARMovie sound.\n");
                ERROR_EXIT(1);
            }
            p++;
            chunkSoundSize[chunk] = atoi(lineBuffer+p);
            noSamples += chunkSoundSize[chunk]/(precision/8);
        }

    } else { // fetcher

        noSamples = 0;
        char *chunkDoubleBuffer = 0;
        int *vIndex, *sIndex; int status;
        chunkDoubleBuffer = new char[maxChunksize*2];
        if (!chunkDoubleBuffer) {
            printf("Error: No memory for chunk buffer.\n");
            ERROR_EXIT(1);
        }
        for (int chunk = 0; chunk < noChunks; chunk++) {
            char *chunkBuffer = chunkDoubleBuffer;
            if (chunk%2) chunkBuffer += maxChunksize;
            void *error = fetcher_fetch(
                chunk, chunkBuffer, 1, 5, vIndex, sIndex, status
            );

            if (status & 2) {
                printf("Status : %i\n", status);
                printf("Error: Fetcher error, returned message:\n");
                printf("       %i:%s\n", *((int *)error), ((char *)error)+4);
                ERROR_EXIT(0);
            }
            fetcher_releasebuffer(chunk, chunkBuffer);
            chunkSoundSize[chunk] = 0;
            for (int block = 0; block < sIndex[0]; block++)
                chunkSoundSize[chunk] += sIndex[(block*2)+2];
            noSamples += chunkSoundSize[chunk]/(precision/8);
        }

     } // end if fetcher

    // check for type 0 (no) sound which is just plain wrong
    if (format == 0) {
        printf("Error: ARMovie file has no sound.\n");
        ERROR_EXIT(1);
    }

    // check for type 1 ADPCM which is unsupported
    if (format == 1 && precision == 4) {
        printf("Error: Type 1 ADPCM is not supported by the ARMovie sound ");
        printf("file loader.\n");
        ERROR_EXIT(1);
    }

    // check for type 2 (compressed) sound which is too hard
    if (format == 2) {
        printf("Error: Type 2 input ARMovie sound is not supported.\n");
        ERROR_EXIT(1);
    }

    // leave the file open

} // end ARMovieSoundReader::ARMovieSoundReader


////////////////////////////////////////////////////////////////////////////

ARMovieSoundReader::~ARMovieSoundReader() {

    if (fetcher) fetcher_close();
    fclose(file);

    if (fetcherName) delete [] fetcherName;
    if (fetcherCodeArea) delete [] fetcherCodeArea;

    delete [] chunkSoundOffset;
    delete [] chunkSoundSize;

} // end ARMovieSoundReader::~ARMovieSoundReader


////////////////////////////////////////////////////////////////////////////
// loadSamples functions
////////////////////////////////////////////////////////////////////////////

void ARMovieSoundReader::loadSamples(char *dest, int from, int to) {

    if (!fetcher)
        loadSamples_normal(dest, from, to);
    else
        loadSamples_fetcher(dest, from ,to);

} // end ARMovieSoundReader::loadSamples


////////////////////////////////////////////////////////////////////////////

void ARMovieSoundReader::loadSamples_normal(char *dest, int from, int to) {

    if (from < 0 || from > readNoSamples()) {
        printf("Error: Invalid 'from' parameter when loading ");
        printf("ARMovie sound data.\n");
        ERROR_EXIT(1);
    }
    if (to < 0 || to > readNoSamples() || to < from) {
        printf("Error: Invalid 'to' parameter when loading ");
        printf("ARMovie sound data.\n");
        ERROR_EXIT(1);
    }

    // convert from and to into bytes offsets into sound data
    from *= precision/8;
    to *= precision/8;

    // find the starting chunk and offset
    int chunk = 0;             // chunk to start in
    int chunkStartOffset = 0;  // that chunk's first sample byte offset
    while(
        chunk <= noChunks &&
        from > chunkStartOffset + chunkSoundSize[chunk]
    ) {
        chunkStartOffset += chunkSoundSize[chunk];
        chunk++;
    }

    // check for a scanning error
    if (chunk == noChunks) {
        printf("Error: Start point occurred outside available data in ");
        printf("ARMovie sound file.\n");
        ERROR_EXIT(1);
    }

    // working a chunk at a time, load the ARMovie sound data into the
    // destintation buffer

    int destPos = 0;
    int chunkOffset = (from - chunkStartOffset); // this will obly be >0 for
                                                 // the first chunk scanned
    int bytesToRead = (to-from);
    int bytesToReadInThisChunk;

    while(bytesToRead > 0) {
        fseek(file, chunkSoundOffset[chunk]+chunkOffset, SEEK_SET);
        if (bytesToRead > chunkSoundSize[chunk]-chunkOffset)
            bytesToReadInThisChunk = chunkSoundSize[chunk]-chunkOffset;
        else
            bytesToReadInThisChunk = bytesToRead;
        if (
            fread(dest+destPos, sizeof(char), bytesToReadInThisChunk, file)
            != bytesToReadInThisChunk
        ) {
            printf("Error: Reading ARMovie sound file.\n");
            ERROR_EXIT(1);
        }
        destPos += bytesToReadInThisChunk;
        bytesToRead -= bytesToReadInThisChunk;
        chunkOffset = 0;
        chunk++;
    }

} // end ARMovieSoundReader::loadSamples_normal


////////////////////////////////////////////////////////////////////////////

void ARMovieSoundReader::loadSamples_fetcher(char *dest, int from, int to) {

    // this function is very similar to loadSamples_normal,
    // it just loads in the converted chunk before reading it

    // create buffers to convert chunks into
    char *chunkDoubleBuffer = new char[maxChunksize*2];
    char *soundBuffer = new char[fetcherSoundBufferSize];
    if (!chunkDoubleBuffer || !soundBuffer) {
        printf("Error: No memory for chunk conversion buffers.\n");
        ERROR_EXIT(1);
    }
    int *vIndex, *sIndex; int status; // output of fetcher_fetch

    // just like loadSamples_normal from here...
    //     => redundancy in code! ...  but neater to read

    if (from < 0 || from > readNoSamples()) {
        printf("Error: Invalid 'from' parameter when loading ");
        printf("ARMovie sound data.\n");
        ERROR_EXIT(1);
    }
    if (to < 0 || to > readNoSamples() || to < from) {
        printf("Error: Invalid 'to' parameter when loading ");
        printf("ARMovie sound data.\n");
        printf("    %i is over %i limit\n", to, noSamples);
        ERROR_EXIT(1);
    }

    // convert from and to into bytes offsets into sound data
    from *= precision/8;
    to *= precision/8;

    // find the starting chunk and offset
    int chunk = 0;             // chunk to start in
    int chunkStartOffset = 0;  // that chunk's first sample byte offset
    while(
        chunk <= noChunks &&
        from > chunkStartOffset + chunkSoundSize[chunk]
    ) {
        chunkStartOffset += chunkSoundSize[chunk];
        chunk++;
    }

    // check for a scanning error
    if (chunk == noChunks) {
        printf("Error: Start point occurred outside available data in ");
        printf("ARMovie sound file.\n");
        ERROR_EXIT(1);
    }

    // ... to here, and fairly similar below as well

    // working a chunk at a time, load the ARMovie sound data into the
    // destintation buffer

    int destPos = 0;
    int chunkOffset = (from - chunkStartOffset); // this will obly be >0 for
                                                 // the first chunk scanned
    int bytesToRead = (to-from);
    int bytesToReadInThisChunk;

    memset(dest, 0, to-from);
    memset(chunkDoubleBuffer, 1, maxChunksize*2);
    memset(soundBuffer, 2, fetcherSoundBufferSize);

    while(bytesToRead > 0) {

        // sort out which of the two buffers to use
        char *chunkBuffer = chunkDoubleBuffer;
        if (chunk%2) chunkBuffer += maxChunksize;

        // grab the chunk into memory
        void *error = fetcher_fetch(
            chunk, chunkBuffer, 1, 5, vIndex, sIndex, status
        );
        if (status & 2) {
            printf("Error: Fetcher returned error %i.\n", status);
            ERROR_EXIT(1);
        }
        fetcher_releasebuffer(chunk, chunkBuffer);

//        printf("Copying sound from ARMovie chunk %i [A]...\n", chunk);
        int soundBufferPos = 0;
        for (int n = 0; n < sIndex[0]; n++) {

            memcpy(
                soundBuffer+soundBufferPos,
                (void *) sIndex[(n*2)+1],
                sIndex[(n*2)+2]
            );

            soundBufferPos += sIndex[(n*2)+2];
        }
        // copy apropriate amount of chunk into dest buffer
        if (bytesToRead > chunkSoundSize[chunk]-chunkOffset)
            bytesToReadInThisChunk = chunkSoundSize[chunk]-chunkOffset;
        else
            bytesToReadInThisChunk = bytesToRead;

        if (chunkOffset+bytesToReadInThisChunk > soundBufferPos) {
            printf("Error: Something went wrong.\n");
            ERROR_EXIT(1);
        }
        memcpy(
            dest+destPos,
            soundBuffer+chunkOffset,
            bytesToReadInThisChunk
        );
        destPos += bytesToReadInThisChunk;
        bytesToRead -= bytesToReadInThisChunk;
        chunkOffset = 0;
        chunk++;
    }
    delete [] chunkDoubleBuffer;
    delete [] soundBuffer;

} // end ARMovieSoundReader::loadSamples_fetcher


////////////////////////////////////////////////////////////////////////////

void ARMovieSoundReader::error(int line) {

    printf("Error: ARMovie sound file header error at line %i.\n", line);
    ERROR_EXIT(1);

} // end ARMovieSoundReader::error


////////////////////////////////////////////////////////////////////////////
// fetcher code functions
////////////////////////////////////////////////////////////////////////////

int ARMovieSoundReader::fetcher_open(
    FILE *file, int cc, int access, int soundtrack
) {

    if (!fetcher) {
        printf("Error: Fetcher code called without being loaded.\n");
        ERROR_EXIT(1);
    }

    int regs[9];
    ////////////////////////////////////////////////////////////////////////
    // NOTE: There is a very big dependancy on Acorn C/C++ stdio.h in the
    //       following line. The contents of the FILE structure are
    //       particularly implementation specific. This can't be helped
    //       since the code needs the file's file handle
    ////////////////////////////////////////////////////////////////////////
    regs[0] = (int) (file->__file);
    regs[1] = cc;
    regs[2] = access;
    regs[3] = soundtrack;
    mc_routine(fetcher, regs);
    return  regs[0];

} // end ARMovieSoundReader::fetcher_open


////////////////////////////////////////////////////////////////////////////

void ARMovieSoundReader::fetcher_close() {

    if (!fetcher) {
        printf("Error: Fetcher code called without being loaded.\n");
        ERROR_EXIT(1);
    }

    int regs[9];
    mc_routine(fetcher+4, regs);

} // end ARMovieSoundReader::fetcher_close


////////////////////////////////////////////////////////////////////////////

void *ARMovieSoundReader::fetcher_fetch(
    int chunk, char *buffer, int access, int statusIn,     // IN
    int *&frameIndex, int *&soundIndex, int &statusOut     // OUT
) {

    if (!fetcher) {
        printf("Error: Fetcher code called without being loaded.\n");
        ERROR_EXIT(1);
    }

    int regs[9];
    regs[0] = chunk;
    regs[1] = (int) buffer;
    regs[2] = access;
    regs[3] = statusIn;
    mc_routine(fetcher+8, regs);
    frameIndex = (int *) regs[0];
    soundIndex = (int *) regs[1];
    statusOut = regs[3];
    if (regs[3] & 2)
        return (void *) regs[0];
    else
        return 0;

} // end ARMovieSoundReader::fetcher_fetcher


////////////////////////////////////////////////////////////////////////////

void ARMovieSoundReader::fetcher_releasebuffer(int chunk, char *buffer) {

    if (!fetcher) {
        printf("Error: Fetcher code called without being loaded.\n");
        ERROR_EXIT(1);
    }

    int regs[9];
    regs[0] = chunk;
    regs[1] = (int) buffer;
    mc_routine(fetcher+12, regs);

} // end ARMovieSoundReader::fetcher_releasebuffer


////////////////////////////////////////////////////////////////////////////
