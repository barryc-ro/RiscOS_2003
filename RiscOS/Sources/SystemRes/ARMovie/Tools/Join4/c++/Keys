/***************************************************************************
 *
 *  File:        JOIN:Keys.c++
 *
 *  Description: Join Keys class implementation
 *
 *  Version:     0.0 21 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "Keys.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

Keys::Keys(ARMovieChoices &ch) {

    choices = &ch;

    char *tempfilename;
    FILE *file;

    keysEnabled = 1;

    // if keys are disabled, remember, let size = 0 and return
    if (!choices->keysEnabled()) {
        keySize = 0;
        keysEnabled = 0;
        totalNumber = 0;
        return;
    }

    tempfilename = new char[256];
    if (!tempfilename) {
        printf("Error: No memory when reading key files.\n");
        ERROR_EXIT(1);
    }

    // find the total number of key files
    totalNumber = 0;
    int fileExists = 1;
    while (fileExists) {
        filename(tempfilename, totalNumber);
        if (!(file = fopen(tempfilename, "rb"))) {
          fileExists = 0;
        } else {
            fclose(file);
            totalNumber++;
        }
    }

    if (totalNumber == 0) {
        keySize = 0;
        keysEnabled = 0;
        return;
    }

    // open the first key file and find out its size
    filename(tempfilename, 0);
    if (!(file = fopen(tempfilename, "rb"))) {
        printf("Error: Couldn't reopen first key file.\n");
        ERROR_EXIT(1);
    }
    fseek(file, 0, SEEK_END);
    keySize = (int) ftell(file);
    fclose(file);

    // for all other images, check they are of the same size
    // if not, throw a wobbly

    // store the size of each image, and calcuate even and odd max sizes
    int error = 0;
    for (int n = 1; n < totalNumber && !error; n++) {
        filename(tempfilename, n);
        if (!(file = fopen(tempfilename, "rb"))) {
            printf("Error: Opening key file %i.\n", n);
            ERROR_EXIT(1);
        }
        fseek(file, 0, SEEK_END);
        if (ftell(file) != keySize) error = 1;
        fclose(file);
    }
    if (error) {
        printf("Error: Key files not all same size.\n");
        printf("       Producing ARMovie without keys.\n");
        keysEnabled = 0;
    }

} // end Keys::Keys


////////////////////////////////////////////////////////////////////////////

Keys::~Keys() {

} // end Keys::~Keys


////////////////////////////////////////////////////////////////////////////

void Keys::disable() {

    keysEnabled = 0;
    keysEnabled = 0;
    totalNumber = 0;

} // end Keys::disable


////////////////////////////////////////////////////////////////////////////

void Keys::create(FILE *file) {

    if (!keysEnabled) return;

    char *tempfilename;
    FILE *inFile;

    // claim temporary buffer to load keys into
    char *keyBuffer;
    keyBuffer = new char[keySize];
    if (!keyBuffer) {
        printf("Error: No memory creating keys.\n");
        ERROR_EXIT(1);
    }

    tempfilename = new char[256];
    if (!tempfilename) {
        printf("Error: No memory when writing keys.\n");
        ERROR_EXIT(1);
    }

    for (int key = 0; key < totalNumber; key++) {
        filename(tempfilename, key);
        if (!(inFile = fopen(tempfilename, "rb"))) {
            printf("Error: Couldn't read key file %i.\n, key");
            ERROR_EXIT(1);
        }
        if (fread(keyBuffer, sizeof(char), keySize, inFile) != keySize) {
            printf("Error: Error whilst reading key file %i.\n", key);
            ERROR_EXIT(1);
        }
        fclose(inFile);
        if (fwrite(keyBuffer, sizeof(char), keySize, file) != keySize) {
            printf("Error: Error whilst writing key file %i.\n", key);
            ERROR_EXIT(1);
        }
    }

    // delete temporary workspace
    delete tempfilename;

} // end Keys::create


////////////////////////////////////////////////////////////////////////////

void Keys::filename(char *dest, int no) {

    sprintf(dest,"%s.Keys%i.", choices->readSource(), no/77);
    choices->addIndex(dest);
    int len = strlen(dest);
    if ((no%77) <= 9) len += sprintf(dest+len, "0");
    sprintf(dest+len, "%i", no%77);

} // end Keys::filename


////////////////////////////////////////////////////////////////////////////
