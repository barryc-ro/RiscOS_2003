/***************************************************************************
 *
 *  File:        JOIN:SoundLdr.c++
 *
 *  Description: Join SoundLoader class implementation
 *
 *  Version:     0.0 2 Sep 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "SoundLdr.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////
// SoundLoader abstract class
////////////////////////////////////////////////////////////////////////////

SoundLoader::~SoundLoader() {
} // end SoundLoader::~SoundLoader

int SoundLoader::readSize() {

    printf("Error: SoundLoader::readSize().\n");
    ERROR_EXIT(1);
    return 0;

} // end SoundLoader::readSize

void SoundLoader::load(char *dest, int fromByte, int toByte) {

    // shut up compiler warning
    dest = dest;
    fromByte = fromByte;
    toByte = toByte;

    printf("Error: SoundLoader::load().\n");
    ERROR_EXIT(1);

} // end SoundLoader::load


////////////////////////////////////////////////////////////////////////////
// SoundLoader_RawData class
////////////////////////////////////////////////////////////////////////////

SoundLoader_RawData::SoundLoader_RawData(
    int t,
    ARMovieChoices &choices,
    ARMovieHeader &hdr
) {

    trackNo = t;
    replayRate = hdr.readReplayRate(trackNo);
    noChannels = hdr.readNoChannels(trackNo);
    precision  = hdr.readPrecision(trackNo);
    linear     = hdr.readLinear(trackNo);
    unsign     = hdr.readUnsigned(trackNo);
    subSample  = choices.readSubsample();

    // create the filename
    int pos = 0;
    if (precision == 8)
        pos = sprintf(filename, "%s.Sound", choices.readSource());
    else
        pos = sprintf(filename, "%s.Samples", choices.readSource());
    if (trackNo != 0) sprintf(filename+pos, "%i", trackNo+1);

    // ensure the sound file is existent
    FILE *file = fopen(filename, "r");
    if (!file) {
        printf("Error: The sound file %s doesn't exist.\n", filename);
        ERROR_EXIT(1);
    }
    fseek(file, 0, SEEK_END);
    filesize = (int) ftell(file);
    fclose(file);

} // end SoundLoader_RawData::SoundLoader_RawData


////////////////////////////////////////////////////////////////////////////

int SoundLoader_RawData::readSize() {

    return filesize/(precision/8)/subSample;

} // end SoundLoader_RawData::readSize


////////////////////////////////////////////////////////////////////////////

void SoundLoader_RawData::load(char *dest, int fromByte, int toByte) {

    FILE *file = fopen(filename, "r");
    if (subSample == 1) { // easy case of no subsampling

        fseek(file, fromByte, SEEK_SET);
        if (
            fread(dest, sizeof(char), toByte-fromByte, file)
            != toByte-fromByte
        ) {
            printf("Error: Error reading sound file.\n");
            fclose(file);
            ERROR_EXIT(1);
        }

    } else { // have to deal with subsampling

        fromByte *= subSample;
        toByte   *= subSample;
        for (
            int n = fromByte;
            n < toByte;
            n += subSample*precision/8*noChannels
        ) {
            fseek(file, n, SEEK_SET);
            if (
                fread(dest, sizeof(char), precision/8*noChannels, file)
                != precision/8*noChannels
            ) {
                printf("Error: Error reading sound file.\n");
                fclose(file);
                ERROR_EXIT(1);
            }
            dest += precision/8*noChannels;
        }

    }
    fclose(file);

} // end SoundLoader_RawData::load


////////////////////////////////////////////////////////////////////////////
// SoundLoader_ARMovie class
////////////////////////////////////////////////////////////////////////////

SoundLoader_ARMovie::SoundLoader_ARMovie(
    int t,
    ARMovieHeader &hdr,
    ARMovieChoices &choices,
    char *filename
) {

    trackNo = t;

    // create the ARMovieSoundReader object
    armovie = new ARMovieSoundReader(filename);
    if (!armovie) {
        printf("Error: Couldn't create the ARMovie sound file reader.\n");
        ERROR_EXIT(1);
    }

    // check if subsample switch, print warning
    if (choices.readSubsample() != 1) {
        printf("Warning: Subsample parameter given ignored for\n");
        printf("         ARMovie sound input.\n\n");
    }

    subSample      = 0;
    subSampleValue = 1;

    replayRate = armovie->readReplayRate();
    noChannels = armovie->readNoChannels();
    precision  = armovie->readPrecision();
    linear     = armovie->readLinear();
    unsign     = armovie->readUnsigned();

    // set the header information if it isn't correct
    if (replayRate != hdr.readReplayRate(t)) {
//        hdr.setReplayRate(t, replayRate);
        printf("Warning: ARMovie replay rate doesn't match that given\n");
        printf("         in header.\n");
        printf("         Source replay rate : %f\n", replayRate);
        printf("         Target replay rate: %f\n", hdr.readReplayRate(t));
        subSample      = 1;
        subSampleValue = replayRate/hdr.readReplayRate(t);
        replayRate     = hdr.readReplayRate(t);
        printf("         Subsampling by %f.\n\n", subSampleValue);
        if (subSampleValue < 1) {
            printf("Error: Subsample value is <1\n");
            ERROR_EXIT(1);
        }
    }
    if (noChannels != hdr.readNoChannels(t)) {
        hdr.setNoChannels(t, noChannels);
        printf("Warning: ARMovie no channels doesn't match that given\n");
        printf("         in header.\n");
        printf("         Altering header information.\n\n");
    }
    if (precision != hdr.readPrecision(t)) {
        hdr.setPrecision(t, precision);
        printf("Warning: ARMovie precision doesn't match that given\n");
        printf("         in header.\n");
        printf("         Altering header information.\n\n");
    }
    if (linear != hdr.readLinear(t)) {
        hdr.setLinear(t, linear);
        printf("Warning: ARMovie 'linear' doesn't match that given\n");
        printf("         in header.\n");
        printf("         Altering header information.\n\n");
    }
    if (unsign != hdr.readUnsigned(t)) {
        hdr.setUnsigned(t, unsign);
        printf("Warning: ARMovie 'unsigned' doesn't match that given\n");
        printf("         in header.\n");
        printf("         Altering header information.\n\n");
    }

} // end SoundLoader_ARMovie::SoundLoader_ARMovie


////////////////////////////////////////////////////////////////////////////

SoundLoader_ARMovie::~SoundLoader_ARMovie() {

    delete armovie;

} // end SoundLoader_ARMovie::~SoundLoader_ARMovie


////////////////////////////////////////////////////////////////////////////

int SoundLoader_ARMovie::readSize() {

    return (!subSample) ? armovie->readNoSamples()
                        : armovie->readNoSamples() / subSampleValue;

} // end SoundLoader_ARMovie::readSize


////////////////////////////////////////////////////////////////////////////

void SoundLoader_ARMovie::load(char *dest, int fromByte, int toByte) {

    int fromSample = fromByte*8/precision;
    int toSample = toByte*8/precision;

    if (!subSample) {
        armovie->loadSamples(dest, fromSample, toSample);
    } else {

        int bufferSize = (int) ((toByte-fromByte)*subSampleValue+20);
        char *tempBuffer = new char[bufferSize]; // +20 for luck
        armovie->loadSamples(
            tempBuffer,
            (int)(fromSample*subSampleValue), (int)(toSample*subSampleValue)
        );

        for (int n = 0; n < toSample-fromSample; n += noChannels) {
                int i_d = n*(precision/8);
                int i_tb = (int) (i_d*subSampleValue);
            for (int m = 0; m < noChannels; m++) {
                dest[i_d+m] = tempBuffer[i_tb+m];
                if (precision == 16)
                    dest[i_d+m*2+1] = tempBuffer[i_tb+m*2+1];
            }
        }
        delete tempBuffer;
    }

} // end SoundLoader_ARMovie::load


////////////////////////////////////////////////////////////////////////////
