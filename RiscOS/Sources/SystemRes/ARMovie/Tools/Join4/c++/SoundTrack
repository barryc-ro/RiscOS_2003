/***************************************************************************
 *
 *  File:        JOIN:SoundTrack.c++
 *
 *  Description: Join SoundTrack class implementation
 *
 *  Version:     0.0 27 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "SoundTrack.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

SoundTrack::SoundTrack() {

} // end SoundTrack::SoundTrack

// IMPORTANT NOTE:
//   subclass constructors must calulate chunksizes and noChunks themselves,
//   set maxChunksize, set up the filename, and allocate the chunksize
//   int array


////////////////////////////////////////////////////////////////////////////

SoundTrack::~SoundTrack() {

} // end SoundTrack::~SoundTrack


////////////////////////////////////////////////////////////////////////////

int SoundTrack::readFormat() {

    printf("Error: SoundTrack::readFormat.\n");
    ERROR_EXIT(1);
    return 0; // just to keep the compiler happy

} // end SoundTrack::readFormat


////////////////////////////////////////////////////////////////////////////

int SoundTrack::readSize() {

    return soundLoader->readSize();

} // end SoundTrack::readSize


////////////////////////////////////////////////////////////////////////////

int SoundTrack::readChunkSize(int chunk) {

    if (chunk < 0 || chunk > noChunks) {
        printf("Error: Out of available sound data.\n");
        printf(
            "       Requiring chunk %i when only %i available.\n",
            chunk, noChunks
        );
        ERROR_EXIT(1);
    }
    return chunksize[chunk];

} // end SoundTrack::readChunkSize


////////////////////////////////////////////////////////////////////////////

int SoundTrack::readMaxChunkSize() {

    return maxChunksize;

} // end SoundTrack::readMaxChunkSize


////////////////////////////////////////////////////////////////////////////

void SoundTrack::load(char *dest, int chunkNo) {

    // shut up compiler warning
    *dest = *dest;
    chunkNo = chunkNo;

    printf("Error: Error in coding. Join has reached the parts\n");
    printf("       other Joins can't reach and will exit.\n\n");
    printf("       SoundTrack::load()\n");
    ERROR_EXIT(1);

} // end SoundTrack::load


////////////////////////////////////////////////////////////////////////////
