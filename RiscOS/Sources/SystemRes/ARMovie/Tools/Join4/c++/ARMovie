/***************************************************************************
 *
 *  File:        JOIN:ARMovie.c++
 *
 *  Description: Join ARMovie class implementation
 *
 *  Version:     0.0 22 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

////////////////////////////////////////////////////////////////////////////
// define this to fiddle date stamps
//   if there are image chunks then the ARMovie will be date stamped
//   to that of the first image chunk file
//   Highly Acorn specific and quite grotesque

#define DATESTAMP_MUNGE

////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ARMovie.h"
#include "Global.h"

#ifdef DATESTAMP_MUNGE
#include <kernel.h>
#endif

////////////////////////////////////////////////////////////////////////////

ARMovie::ARMovie(
    ARMovieHeader  &newHeader,
    HelpfulSprite  &newSprite,
    Keys           &newKeys,
    Images         &newImages,
    Sounds         &newSounds,
    ARMovieChoices &newChoices
) {

    // reference the components
    header = &newHeader;
    helpfulSprite = &newSprite;
    keys = &newKeys;
    images = &newImages;
    sounds = &newSounds;
    choices = &newChoices;

    evenmaxsize = images->readEvenmaxsize() + sounds->readEvenmaxsize();
    oddmaxsize = images->readOddmaxsize() + sounds->readOddmaxsize();

    // calculate the number of chunks
    if (header->readVideoFormat() != 0)
        noChunks = images->readTotalNumber();
    else
        noChunks = sounds->readMaxChunk();

} // end ARMovie::ARMovie


////////////////////////////////////////////////////////////////////////////

void ARMovie::create() {

    FILE *file;
    Chunks *chunks;
    int headerUserSize; // the size of the header lines 1 to 14
    int hsOffset;
    int keyOffset;
    int ccOffset;        // offset from start of file to chunk catalogue

    // check for case of no video and no sound
    if (
        images->readTotalNumber() == 0
        && sounds->readNoTracks() == 1
        && sounds->readTrack(0)->readSize() == 0
    ) {
        printf("Error: No sound and no video.\n");
        ERROR_EXIT(1);
    }

    // check that the number of keys == the number of images
    if (
        keys->enabled() && images->enabled()
        && images->readTotalNumber() != keys->readTotalNumber()
    ) {
        printf("Error: Different number of key and image files.\n");
        ERROR_EXIT(1);
    }

    // if no images ensure there's no keys
    if (!images->enabled() && keys->enabled()) {
        keys->disable();
    }

    // check that chunks of sound == no of images
    if (
        images->readTotalNumber() > sounds->readMaxChunk()
        && sounds->readTrack(0)->readFormat() != 0
    ) {
        printf("Error: Not enough sound data for number of image chunks.\n");
        ERROR_EXIT(1);
    }

    // return an error if no video && > 1 sound track
    if (images->readTotalNumber() == 0 && sounds->readNoTracks() >1) {
        printf("Error: More than one sound track and no video.\n");
        printf("       (Unsupported option)\n");
        ERROR_EXIT(1);
    }

    // throw a wobbly if images are expected but aren't present
    if (images->readTotalNumber() == 0 && header->readVideoFormat() != 0) {
        printf("Error: Header indicates that images are required but\n");
        printf("       none were found.\n");
        ERROR_EXIT(1);
    }

    // if we are using a type 2 sound loader, reset the encoder
    for (int track = 0; track < sounds->readNoTracks(); track++) {
        if (sounds->readTrack(track)->readFormat() == 2) {
            sounds->readTrack(track)->thisPtr_Type2()->resetEncoder();
        }
    }

    // open the output file
    file = fopen(choices->readDest(), "w");
    if (!file) {
        printf("Error: Couldn't open output file for writing.\n");
        ERROR_EXIT(1);
    }

    headerUserSize = header->readUserSize();

    hsOffset = headerUserSize + header->readJoinSize();
    keyOffset = hsOffset + helpfulSprite->readSize();
    ccOffset = keyOffset + keys->readSize();

    header->createUserLines(file);
    header->createJoinLines(
        file,
        noChunks-1,
        evenmaxsize, oddmaxsize,
        ccOffset,
        hsOffset, helpfulSprite->readSize(),
        keyOffset, keys->enabled()
    );
    helpfulSprite->create(file);
    keys->create(file);

    chunks = new Chunks(
                     images, sounds, ccOffset,
                     choices->readChunkAlign(), noChunks
                 );
    if (!chunks) {
        printf("Error: No memory to create chunks.\n");
        ERROR_EXIT(1);
    }
    chunks->create(file);
    // close the output file
    fclose(file);

    #ifdef DATESTAMP_MUNGE
    // set the date stamp
    //   (if there are images, then the date stamp should be set to that
    //    of the first image chunk; otherwise who cares?)
    if (header->readVideoFormat() != 0) {
        // now this is hateful; to copy the date stamp we read old style
        // load and execution addresses, copy them onto the new object
        // prior to setting its filetype ...  nice
        char buf[256];
        _kernel_osfile_block osfileBlock;
        // read catalogue information (with no path)
        images->readFilename(buf, 0);
        _kernel_osfile(17, buf, &osfileBlock);
        // write catalogue information for named object
        _kernel_osfile(1, choices->readDest(), &osfileBlock);
    }
    #endif

    // set the filetype
    char lineBuffer[300];
    sprintf(lineBuffer, "SetType %s AE7", choices->readDest());
    system(lineBuffer);

    delete chunks;

} // end ARMovie::create


////////////////////////////////////////////////////////////////////////////
