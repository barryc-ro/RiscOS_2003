/***************************************************************************
 *
 *  File:        JOIN:ST_Type2.c++
 *
 *  Description: Join SoundTrack_Type2 class implementation
 *
 *  Version:     0.0 27 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "ST_Type2.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////
// #define CACHENAME
//     Description: this governs the way that the cache name is created
//     Values:      CACHE_FIXED  - calls the file join_C_X (x=trackNo)
//                  RESET_TMPNAM - uses C's tmpnam() function
#define CACHE_FIXED  0
#define CACHE_TMPNAM 1
#define CACHENAME CACHE_TMPNAM

////////////////////////////////////////////////////////////////////////////
// #define RESETMETHOD
//     Description: this governs the way that resetEncoder() works
//     Values:      RESET_INIT2  - calls the entry 4 again
//                                 (nice clean way)
//                  RESET_RELOAD - reloads and reinitialises the encoder
//                                 (brute force for naughty codecs)
#define RESET_INIT2  0
#define RESET_RELOAD 1
#define RESETMETHOD RESET_RELOAD


////////////////////////////////////////////////////////////////////////////
// external assembler routine that calls machine code

extern "C" {
    void mc_routine(char *address, int regs[9]);
}

////////////////////////////////////////////////////////////////////////////
// hand rolled float rounding code (there'll never be -ve numbers)

#define round_float(f)  ((int)floor(f+.5))

////////////////////////////////////////////////////////////////////////////

SoundTrack_Type2::SoundTrack_Type2(
    int track,
    SoundLoader &sndLdr,
    ARMovieHeader &hdr,
    char *newFormat
) : SoundTrack() {

    trackNo = track;
    soundLoader = &sndLdr;
    noChannels = hdr.readNoChannels(track);
    FILE *file;
    char filename[256];

    // copy the format type
    format = new char[strlen(newFormat)+1];
    if (!format) {
        printf("Error: Not enough memory for type 2 sound track.\n");
        ERROR_EXIT(1);
    }
    strcpy(format, newFormat);

    // copy other data
    parametersString
        = new char[strlen(hdr.readType2ExtraParameters(track))+1];
    if (!parametersString) {
        printf("Error: Not enough memory for type 2 sound track.\n");
        ERROR_EXIT(1);
    }
    strcpy(parametersString, hdr.readType2ExtraParameters(track));
    replayRate = (int) hdr.readReplayRate(track);

    // ensure that the sound loader provides suitable input
    if (sndLdr.readPrecision() != 16) {
        printf("Error: Input sound data doesn't match output type.\n");
        ERROR_EXIT(1);
    }
    if (sndLdr.readNoChannels() != noChannels) {
        printf("Error: Input sound data has incorrect no channels.\n");
        ERROR_EXIT(1);
    }

    ////////////////////////////////////////////////////////////////////////
    // if using a variable compression ratio type 2 compressor, we'll
    //   try to cahce the compressed data on the first pass (when we read
    //   the compressed data size, but don't write it to a file) to save
    //   compressing it next time around

    variableCaching = st2vc_on;

    ////////////////////////////////////////////////////////////////////////
    // read the information in the CInfo file

    char lineBuffer[256];
    sprintf(lineBuffer, "<ARMovie$SoundDir>.%s.CInfo", format);
    if (!(file = fopen(lineBuffer, "rb"))) {
        printf("Error: No CInfo file in the type 2 sound directory\n");
        printf("       for %s sound. (Is format name correct?)\n", format);
        ERROR_EXIT(1);
    }
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read CInfo line 1.\n");
        ERROR_EXIT(1);
    }
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read CInfo line 2.\n");
        ERROR_EXIT(1);
    }
    encoderFrameSize = atoi(lineBuffer);
    if (encoderFrameSize == 0) {
        printf("Warning: CInfo file gives frame size of zero for type 2\n");
        printf("         sound comrepessor. This is a depreciated value.\n");
        printf("         Join will continue but don't do it again...\n\n");
    }
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read CInfo line 3.\n");
        ERROR_EXIT(1);
    }
    encoderPrefFreq = atoi(lineBuffer);
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read CInfo line 4.\n");
        ERROR_EXIT(1);
    }
    encoderLow = atoi(lineBuffer);
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read CInfo line 5.\n");
        ERROR_EXIT(1);
    }
    encoderHigh = atoi(lineBuffer);
    fclose(file);

    // now compare replay rate with CInfo recommendations
    if (replayRate < encoderLow)
        printf(
            "Warning: Replay rate lower than recommended for track %i.\n\n",
            track+1
        );
    if (replayRate > encoderHigh)
        printf(
            "Warning: Replay rate higher than recommended for track %i.\n\n",
            track+1
        );

    ////////////////////////////////////////////////////////////////////////
    // read the information in the Info file

    sprintf(lineBuffer, "<ARMovie$SoundDir>.%s.Info", format);
    if (!(file = fopen(lineBuffer, "rb"))) {
        printf("Error: No Info file in the type 2 sound directory.\n");
        ERROR_EXIT(1);
    }
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 1.\n");
        ERROR_EXIT(1);
    }
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 2.\n");
        ERROR_EXIT(1);
    }
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 3.\n");
        ERROR_EXIT(1);
    }
    decompressStart = atoi(lineBuffer);
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 4.\n");
        ERROR_EXIT(1);
    }
    bitsStoragePerSample = atoi(lineBuffer);
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 5.\n");
        ERROR_EXIT(1);
    }
    fixedRatio = atoi(lineBuffer);
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 6.\n");
        ERROR_EXIT(1);
    }
    maxComprSampleSize = atof(lineBuffer);
    if (!fgets(lineBuffer, 256, file)) {
        printf("Error: couln't read Info line 7.\n");
        ERROR_EXIT(1);
    }
    overheadPerChannel = atoi(lineBuffer);
    fclose(file);

    ////////////////////////////////////////////////////////////////////////
    // load the encoder

    if (noChannels == 1)
        sprintf(filename, "<ARMovie$SoundDir>.%s.Encode", format);
    else
        sprintf(
            filename, "<ARMovie$SoundDir>.%s.Encodex%i",
            format, noChannels
        );
    if (!(file = fopen(filename, "rb"))) {
        printf(
            "Error: Type 2 sound encoder doesn't exist for %s sound.\n",
            format
        );
        printf("       File: %s\n", filename);
        ERROR_EXIT(1);
    }
    fseek(file, 0, SEEK_END);
    int encoderSize = (int) ftell(file);
    encoder = new char[encoderSize];
    if (!encoder) {
        printf("Error: Not enough memory for type 2 sound encoder.\n");
        ERROR_EXIT(1);
    }
    fseek(file, 0, SEEK_SET);
    if (fread(encoder, sizeof(char), encoderSize, file) != encoderSize) {
        printf("Error: Encoder file not read correctly.\n");
        ERROR_EXIT(1);
    }
    fclose(file);

    ////////////////////////////////////////////////////////////////////////
    // initialise the encoder workspace with first two entries

    int tempFrameSize;
    char *error;
    encode_init1(
        replayRate,
        parametersString,
        encoderWorkspaceSize,
        error,
        tempFrameSize
    );
    if (error) {
        printf("Error: Type 2 compressor error during initialisation.\n");
        printf("       %i: ",*((int *) error));
        printf("%s\n", error+4);
        ERROR_EXIT(1);
    }
    if (encoderFrameSize == 0) {
        encoderFrameSize = tempFrameSize;
    }
    encoderWorkspace = new char[encoderWorkspaceSize];
    if (!encoderWorkspace) {
        printf("Error: No memory for encoder workspace\n");
        ERROR_EXIT(1);
    }
    void *outcome = encode_init2(
                        replayRate, encoderWorkspace, encoderWorkspaceSize
                    );
    if (outcome) {
        printf("Error: When initialising type 2 sound encoder.\n");
        printf("       Error text: %s\n", ((char *) outcome)+4);
        ERROR_EXIT(1);
    }

    ////////////////////////////////////////////////////////////////////////
    // calculate input chunk size and number of whole/partial chunks
    //   for the moment assuming that the encoderFrameSize is 1, so the
    //   number of samples in each chunk is constant

    float cs; // bytes per chunk
    if (replayRate > 255) {
        cs = replayRate * hdr.readChunkTime();
    } else {
        cs = 1000000;
        cs = cs / (replayRate * hdr.readChunkTime());
    }
    cs *= sndLdr.readNoChannels();
    cs *= 16/8;

    // now calculate the number of chunks given the number of bytes in a
    // whole chunk
    // N.B. The last chunk may not be a whole chunk of data
    int filesize = readSize()*(16/8); // in bytes
    int noWholeChunks = noChunks = (int) (filesize / cs);
    if ((noChunks == 0) || (filesize % (int) cs)) noChunks++;

    // allocate memory for inputChunksize table and initialise
    inputChunksize = new int[noChunks];
    if (!inputChunksize) {
        printf("Error: No memory for sound chunksize table.\n");
        ERROR_EXIT(1);
    }
    for (int n = 0; n < noWholeChunks; n++) inputChunksize[n] = (int) cs;
    if (noWholeChunks != noChunks) inputChunksize[n] = filesize % (int) cs;

    ////////////////////////////////////////////////////////////////////////
    // calculate how many audio frames are in each chunk
    //   if there is not a whole number of audio frames per chunk, then
    //   even/odd chunks have different numbers of audio frames so that
    //   they average to the correct number of samples per chunk

    noEncoderFramesPerChunk = new int[noChunks];
    if (!noEncoderFramesPerChunk) {
        printf("Error: No memory for encoder frame chunksize table.\n");
        ERROR_EXIT(1);
    }

    float noSamplesPerChunk = replayRate
                            * hdr.readNoChannels(track)
                            * hdr.readFPC() / hdr.readFPS();
    float targetNoSamples = 0, prevNoSamples = 0;
    int frameSize = encoderFrameSize*noChannels;
    for (n = 0; n < noChunks-1; n++) {
        targetNoSamples += noSamplesPerChunk;
        int nearestLowerSample = (int) targetNoSamples
                               - ((int)targetNoSamples%frameSize);

        int nearestUpperSample = (int) targetNoSamples;
//        if (!(nearestUpperSample%frameSize))
            nearestUpperSample += frameSize-((int)targetNoSamples%frameSize);
        if (
            (targetNoSamples-nearestLowerSample)
            < (nearestUpperSample-targetNoSamples)
        ) {
            inputChunksize[n] = (nearestLowerSample-(int)prevNoSamples)*2;
        } else {
            inputChunksize[n] = (nearestUpperSample-(int)prevNoSamples)*2;
        }
        prevNoSamples += inputChunksize[n]/2;
    }
    { // last chunk
        inputChunksize[n] = (readSize()-(int)prevNoSamples)*2;
    }

    ////////////////////////////////////////////////////////////////////////
    // if using a variable compression ratio compressor, open the cache
    //   file and warning error if it won't open
    //   N.B. The choice of filename is a little nasty ATM!

    if (fixedRatio && variableCaching) {
        int cacheError = 0;
        generateCacheFilename(trackNo);
        cacheFile = fopen(cacheFilename, "rb");
        if (cacheFile) {
            cacheError = 1; // file already exists: drat!
            fclose(cacheFile);
        } else {
            cacheFile = fopen(cacheFilename, "wb");
            if (!cacheFile) cacheError = 2; // couldn't open it
        }
        if (cacheError) {
            printf("Warning: Couldn't create type 2 sound cache.\n");
            printf("         Compression will take approximately twice\n");
            printf("         as long...\n");
            if (cacheError == 1)
                printf(
                    "         (cache file \"%s\" already exists)\n\n",
                    cacheFilename
                );
            variableCaching = st2vc_off;
        }
    }

    ////////////////////////////////////////////////////////////////////////
    // perform an initial pass of compressor in order to calculate the
    //   compressed size of sound data
    //   (this will unfortunately add noticeable time to the Join activity)
    //   if there is a fixed ratio of compression, much of the nastyness of
    //   this pass is avoided

    chunksize = new int[noChunks];
    if (!chunksize) {
        printf("Error: No memory for sound chunksize table.\n");
        ERROR_EXIT(1);
    }
    maxChunksize = 0;
    for (n = 0; n < noChunks; n++) {
        chunksize[n] = readCompressedSoundSize(n);
        if (chunksize[n] > maxChunksize) maxChunksize = chunksize[n];
    }

    ////////////////////////////////////////////////////////////////////////
    // now read the cache file

    if (fixedRatio && variableCaching) {
        fclose(cacheFile);
        cacheFile = fopen(cacheFilename, "rb");
    }

} // end SoundTrack_Type2::SoundTrack_Type2


////////////////////////////////////////////////////////////////////////////

SoundTrack_Type2::~SoundTrack_Type2() {

    if (fixedRatio && variableCaching) {
        fclose(cacheFile);
        remove(cacheFilename);
    }

    delete [] format;
    delete [] encoder;
    delete [] encoderWorkspace;
    delete [] inputChunksize;
    delete [] chunksize;

} // end SoundTrack_Type2::~SoundTrack_Type2


////////////////////////////////////////////////////////////////////////////

void SoundTrack_Type2::resetEncoder() {

    ////////////////////////////////////////////////////////////////////////
    // The nice version that may not work with badly behaved codecs
    //   (so may not be used during development)

    #if RESETMETHOD == RESET_INIT2

    // This is The Old Way of doing this, by calling the entry 4.
    // It doesn't work with MPEG though, so we 'cheat' and reload the entire
    // encoder instead.
    // That works.

    // this bit has now entered hacky codesville
    // oh! for dynamic_cast
    void *outcome = encode_init2(
                        replayRate, encoderWorkspace, encoderWorkspaceSize
                    );
    if (outcome) {
        printf("Error reinitialising type 2 sound encoder.\n");
        printf("Error text: %s\n", ((char *) outcome)+4);
        ERROR_EXIT(1);
    }

    #endif

    ////////////////////////////////////////////////////////////////////////
    // The brute force method that will sort any Encoder out

    #if RESETMETHOD == RESET_RELOAD

    FILE *file;
    char filename[256];

    ////////////////////////////////////////////////////////////////////////
    // reload the encoder
    if (noChannels == 1)
        sprintf(filename, "<ARMovie$SoundDir>.%s.Encode", format);
    else
        sprintf(
            filename, "<ARMovie$SoundDir>.%s.Encodex%i",
            format, noChannels
        );
    if (!(file = fopen(filename, "rb"))) {
        printf(
            "Error: Type 2 sound encoder doesn't exist for %s sound.\n",
            format
        );
        printf("       Which is weird because it did before.\n");
        printf("       File: %s\n", filename);
        ERROR_EXIT(1);
    }
    fseek(file, 0, SEEK_END);
    int encoderSize = (int) ftell(file);
    fseek(file, 0, SEEK_SET);
    if (fread(encoder, sizeof(char), encoderSize, file) != encoderSize) {
        printf("Error: Encoder file not read correctly.\n");
        printf("       Which is weird because it did before.\n");
        ERROR_EXIT(1);
    }
    fclose(file);

    ////////////////////////////////////////////////////////////////////////
    // initialise the encoder workspace with first two entries
    int tempFrameSize;
    char *error;
    encode_init1(
        replayRate,
        parametersString,
        encoderWorkspaceSize,
        error,
        tempFrameSize
    );
    if (error) {
        printf("Error: Type 2 compressor error during initialisation.\n");
        printf("       %i: ",*((int *) error));
        printf("%s\n", error+4);
        printf("       This has been done successfully once before.\n");
        ERROR_EXIT(1);
    }
    // encoder frame size will already have been set up
    void *outcome = encode_init2(
                        replayRate, encoderWorkspace, encoderWorkspaceSize
                    );
    if (outcome) {
        printf("Error: When initialising type 2 sound encoder.\n");
        printf("       Error text: %s\n", ((char *) outcome)+4);
        printf("       Which is weird becuase it worked before.\n");
        ERROR_EXIT(1);
    }

    #endif

    ////////////////////////////////////////////////////////////////////////

} // end SoundTrack_Type2::resetEncoder


////////////////////////////////////////////////////////////////////////////

void SoundTrack_Type2::load(char *dest, int chunk) {

    ////////////////////////////////////////////////////////////////////////
    // if not fixed ratio and we've built a compressed data cache,
    //   load from that rather than recompress everything
    if (fixedRatio && variableCaching) {
        int seekpos = 0;
        for (int n = 0; n < chunk; n++) seekpos += chunksize[n];
        fseek(cacheFile, seekpos, SEEK_SET);
        if (
            fread(dest, 1, chunksize[chunk], cacheFile)
            != chunksize[chunk]
        ) {
            fclose(cacheFile);
            remove(cacheFilename);
            variableCaching = st2vc_off;
        } else {
            return;
        }
    }

    // the frame size, which loading is rounded to
    int frameSize = encoderFrameSize*noChannels;

    int bufferSize = inputChunksize[chunk];
    if (inputChunksize[chunk] % (frameSize*2))
        bufferSize += frameSize*2 - (inputChunksize[chunk] % (frameSize*2));

//printf("sample buffer size: %i", bufferSize); // diagnostic

    // claim memory for a sample buffer
    // uncompressed sound samples are loaded into this buffer prior to
    // the compression routine being called on them
    char *sampleBuffer;
    sampleBuffer = new char[bufferSize];
    if (!sampleBuffer) {
        printf("Error: No memory for sample buffer at chunk %i.\n", chunk);
        ERROR_EXIT(1);
    }

//printf(" compressed data size: %i\n", chunksize[chunk]); // diagnostic

    // load samples into the sample buffer
    int seekpos = 0;
    for (int n = 0; n < chunk; n++) seekpos += inputChunksize[n];
    soundLoader->load(
        sampleBuffer,
        seekpos,
        seekpos+inputChunksize[chunk]
    );

    // blank the top (overspill) bit of the source samples buffer,
    // just in case any old data there will effect compression routines
    // if there isn't a whole number of encoder frames of sound
    if (inputChunksize[chunk] != bufferSize) {
        if (chunk < noChunks-1) {
            printf("Warning: Encoder frame length calculation may\n");
            printf("         have become slightly incorrectat chunk.\n");
        } else {
            for (int n = inputChunksize[chunk]; n < bufferSize; n++)
                sampleBuffer[n] = 0;
        }
    }

    // compress the samples, put them in the destination buffer

    int   samplesToCompress = inputChunksize[chunk]/2;
          samplesToCompress /= noChannels;    // no samples remaining per chn
    int   opBufferBitOffset = 0;              // bit offset in output buffer
    char *inputPos =  sampleBuffer;           // pointer to input samples
    int   startOfChunk = 1;                   // true if start of chunk

    int   opBufferBitOffsetOut;               // returned offset
    char *error;                              // returned error message
    int   noSamplesCompressed;                // returned no samples cmprsd

    while (samplesToCompress > 0) {
        int noSamples;
        if (samplesToCompress > frameSize)
            noSamples = frameSize;
        else
            noSamples = samplesToCompress;
        encode_compress(
            opBufferBitOffset,
            dest,
            noSamples,
            inputPos,
            encoderWorkspace,
            startOfChunk,
            opBufferBitOffsetOut,
            error,
            noSamplesCompressed
        );
        if (error) {
            printf("Error: Type 2 compressor error at chunk %i.\n", chunk);
            printf("       %i: ",*((int *) error));
            printf("%s\n", error+4);
            ERROR_EXIT(1);
        }
        opBufferBitOffset = opBufferBitOffsetOut;
        if (opBufferBitOffset/8 > chunksize[chunk]) {
            printf(
                "Error: Overflow in type 2 sound encoder at chunk %i.\n",
                chunk
            );
            printf(
                "       (%i > calulcated compressed sound size of %i.)\n",
                opBufferBitOffset/8, chunksize[chunk]
            );
            printf(
                "       (input sound size is %i bytes == %i samples.)\n",
                inputChunksize[chunk], inputChunksize[chunk]/2
            );
            ERROR_EXIT(1);
        }

        samplesToCompress -= noSamplesCompressed;
        startOfChunk = 0;
        inputPos += noSamplesCompressed*2*noChannels;
    }

    // free the memory used
    delete [] sampleBuffer;

} // end SoundTrack_Type2::load


////////////////////////////////////////////////////////////////////////////
// NOTE:
//     This code is unfortunately hideously like SoundTrack_Type2::load above
//     Having to run an encode_compress cycle twice isn't avoidable here

int SoundTrack_Type2::readCompressedSoundSize(int chunk) {

    ////////////////////////////////////////////////////////////////////////
    // method one: for fixed compression ratios, return a simple calculation
    if (!fixedRatio) {
        int noSamples = inputChunksize[chunk]/2;
        int frameSize = encoderFrameSize * noChannels;
        if (noSamples % frameSize)
            noSamples += frameSize-(noSamples % frameSize);
        return (int) (
            round_float(noSamples*maxComprSampleSize)/8
            +overheadPerChannel*noChannels
        );
        // to make to figure correct, one needs to be added to it!
    }

    ////////////////////////////////////////////////////////////////////////
    // method two: if can't easily predict the compressed size,
    //             actually run the compressor to discover the compressed sz

    // the frame size, which loading is rounded to
    int frameSize = encoderFrameSize*noChannels;

    int bufferSize = inputChunksize[chunk];
    if (inputChunksize[chunk] % (frameSize*2))
        bufferSize += frameSize*2 - (inputChunksize[chunk] % (frameSize*2));

    // claim memory for a sample buffer
    // uncompressed sound samples are loaded into this buffer prior to
    // the compression routine being called on them
    char *sampleBuffer;
    sampleBuffer = new char[bufferSize];
    if (!sampleBuffer) {
        printf("Error: No memory for temporary sample buffer.\n");
        ERROR_EXIT(1);
    }

    // load samples into the sample buffer
    int seekpos = 0;
    for (int n = 0; n < chunk; n++) seekpos += inputChunksize[n];
    soundLoader->load(
        sampleBuffer,
        seekpos,
        seekpos+inputChunksize[chunk]
    );

    // blank the top (overspill) bit of the source samples buffer,
    // just in case any old data there will effect compression routines
    // if there isn't a whole number of encoder frames of sound
    if (inputChunksize[chunk] != bufferSize) {
        for (int n = inputChunksize[chunk]; n < bufferSize; n++)
            sampleBuffer[n] = 0;
    }

    // claim memory for a destination buffer
    // compressed sound is written here prior to being completely ignored
    char *dest;
    if (inputChunksize[chunk] > frameSize*2)
        dest = new char[inputChunksize[chunk]+overheadPerChannel];
    else
        dest = new char[frameSize*2+overheadPerChannel];
    // we claimed size+workspacesize for pathological case of no
    // compression; if we compress to size bigger than source, we'll
    // get an error in a moment!
    if (!dest) {
        printf("Error: No memory for temporary sample buffer.\n");
        ERROR_EXIT(1);
    }

    // compress the samples, put them in the destination buffer
    int   samplesToCompress = inputChunksize[chunk]/2;
          samplesToCompress /= noChannels;    // no samples remaining per chn
    int   opBufferBitOffset = 0;              // bit offset in output buffer
    char *inputPos =  sampleBuffer;           // pointer to input samples
    int   startOfChunk = 1;                   // true if start of chunk
    int   opBufferBitOffsetOut;               // returned offset
    char *error;                              // returned error message
    int   noSamplesCompressed = 0;            // returned no samples cmprsd

    while (samplesToCompress > 0) {
        int noSamples;
        if (samplesToCompress > frameSize)
            noSamples = frameSize;
        else
            noSamples = samplesToCompress;
        encode_compress(
            opBufferBitOffset,
            dest,
            noSamples,
            (char *) inputPos,
            encoderWorkspace,
            startOfChunk,
            opBufferBitOffsetOut,
            error,
            noSamplesCompressed
        );
        if (error) {
            printf("Error: Type 2 compressor error.\n");
            printf("       %i: ",*((int *) error));
            printf("%s\n", error+4);
            ERROR_EXIT(1);
        }
        opBufferBitOffset = opBufferBitOffsetOut;
        if (
            opBufferBitOffset/8 >= bufferSize
            && chunk+1 < noChunks
        ) {
            printf("Error: Overflow in type 2 sound encoder.\n");
            printf("       Compressed sound is larger than source");
            printf(" at chunk %i!\n", chunk);
            printf(
                "       Calculated to be %i bytes\n",
                inputChunksize[chunk]
            );
            printf("       Compressed to %i bytes\n", opBufferBitOffset/8);
            ERROR_EXIT(1);
        }
        samplesToCompress -= noSamplesCompressed;
        startOfChunk = 0;
        inputPos += noSamplesCompressed*2*noChannels;
    }

    // if caching the compressed data, then whap it into the cache file
    //   assumes that readCompressedSoundSize is always called before
    //   and loads and never after ... completely reasonable
    //   if saving fails, remove the cache and disable the feature
    //   (the cache must have been opened first :-)
    if (variableCaching) {
        if (
            fwrite(dest, 1, opBufferBitOffset/8, cacheFile)
            != opBufferBitOffset/8
        ) {
            fclose(cacheFile);
            remove(cacheFilename);
            variableCaching = st2vc_off;
        }
    }

    // free the memory used
    delete [] sampleBuffer;
    delete [] dest;

    return (opBufferBitOffset/8);

} // end SoundTrack_Type2::readCompressedSoundSize


void SoundTrack_Type2::generateCacheFilename(int trackNo) {

    #if CACHENAME == CACHE_FIXED

    #define WIMPSCRAP     "Wimp$ScrapDir"
    #define CACHEFILENAME "Join_C_"
    // if <Wimp$ScrapDir> is set then put the temp file there
    char *env = getenv(WIMPSCRAP);
    if (env && strlen(env) != 0) {
        sprintf(
            cacheFilename,
            "<%s>.%s%c", WIMPSCRAP, CACHEFILENAME, 97+trackNo
        );
    } else {
        // put it in current directory (euch!)
        sprintf(cacheFilename, "%s%c", CACHEFILENAME, 97+trackNo);
    }

    #elif CACHENAME == CACHE_TMPNAM

    sprintf(cacheFilename, tmpnam(NULL));

    #else
    #error "No valid method for SoundTrack_Type2::generateCacheFilename()"
    #endif

} // end SoundTrack_Type2::generateCacheFilename


////////////////////////////////////////////////////////////////////////////
// entry veneers to dynamically loaded m/c routines
////////////////////////////////////////////////////////////////////////////

void SoundTrack_Type2::encode_init1(
    int    sampleFreq,
    char  *parametersString,
    int   &workspaceSize,
    char *&error,
    int   &frameSize
) {

    int regs[9];
    regs[0] = sampleFreq;
    regs[1] = (int) parametersString;
    mc_routine(encoder, regs);
    workspaceSize = regs[0];
    error = (char *) regs[1];
    frameSize = regs[2];

} // end SoundTrack_Type2::encode_init1


////////////////////////////////////////////////////////////////////////////

void *SoundTrack_Type2::encode_init2(int sampleFreq, char *ws, int size) {

    int regs[9];
    regs[0] = sampleFreq;
    regs[1] = (int) ws;
    regs[2] = size;
    mc_routine(encoder+4, regs);
    return (void *)(regs[0]);

} // end SoundTrack_Type2::encode_init1


////////////////////////////////////////////////////////////////////////////

void SoundTrack_Type2::encode_compress(
    int opBufferBitOffset,
    char *opBuffer,
    int noSamples,
    char *samples,
    char *workspace,
    int startChunk,
    int &opBufferBitOffsetOut,
    char *&errorOut,
    int &noSamplesOut
) {

    int regs[9];
    regs[0] = opBufferBitOffset;
    regs[1] = (int) opBuffer;
    regs[2] = noSamples;
    regs[3] = (int) samples;
    regs[4] = (int) workspace;
    regs[5] = startChunk;
    mc_routine(encoder+8, regs);
    opBufferBitOffsetOut = regs[0];
    errorOut = (char *) regs[1];
    noSamplesOut = regs[2];

} // end SoundTrack_Type2::encode_compress

////////////////////////////////////////////////////////////////////////////
