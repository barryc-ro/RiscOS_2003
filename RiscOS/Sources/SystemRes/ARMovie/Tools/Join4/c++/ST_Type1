/***************************************************************************
 *
 *  File:        JOIN:ST_Type1.c++
 *
 *  Description: Join SoundTrack_Type1 class implementation
 *
 *  Version:     0.0 31 Sep 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ST_Type1.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

SoundTrack_Type1::SoundTrack_Type1(
    int track,
    SoundLoader &sndLdr,
    ARMovieHeader &hdr
) : SoundTrack() {

    trackNo = track;
    soundLoader = &sndLdr;
    precision = sndLdr.readPrecision();

    // ensure that the sound loader provides suitable input
    if (sndLdr.readPrecision() != hdr.readPrecision(track)) {
        printf("Error: Input sound data doesn't match output type.\n");
        ERROR_EXIT(1);
    }
    if (sndLdr.readNoChannels() != hdr.readNoChannels(track)) {
        printf("Error: Input sound data has incorrect no channels.\n");
        ERROR_EXIT(1);
    }

    // calculate chunk size: bytes per whole chunk
    float cs;
    if (sndLdr.readReplayRate() > 255) {
        cs = sndLdr.readReplayRate() * hdr.readChunkTime();
    } else {
        cs = 1000000;
        cs = cs / (sndLdr.readReplayRate() * hdr.readChunkTime());
    }
    cs *= sndLdr.readNoChannels();
    cs *= sndLdr.readPrecision()/8;

    // calculate the number of chunks
    // N.B. The last chunk may not be a whole chunk of data
    int filesize = readSize()*(precision/8); // in bytes
    int noWholeChunks = noChunks = (int) (filesize / cs);
    if ((noChunks == 0) || (filesize % (int) cs)) noChunks++;

    // allocate memory for chunksize table and initialise
    chunksize = new int[noChunks];
    if (!chunksize) {
        printf("Error: No memory for sound chunksize table.\n");
        ERROR_EXIT(1);
    }
    for (int n = 0; n < noWholeChunks; n++) chunksize[n] = (int) cs;

    if (noWholeChunks != noChunks) chunksize[n] = filesize % (int) cs;

    maxChunksize = (int) cs;

} // end SoundTrack_Type1::SoundTrack_Type1


////////////////////////////////////////////////////////////////////////////

SoundTrack_Type1::~SoundTrack_Type1() {

    delete [] chunksize;

} // end SoundTrack_Type1::~SoundTrack_Type1


////////////////////////////////////////////////////////////////////////////

void SoundTrack_Type1::load(char *dest, int chunk) {

    if (chunk > noChunks-1) {
        printf("Error: Attempt to load sound chunk beyond file end.\n");
        ERROR_EXIT(1);
    }

    int seekpos = 0;
    for (int n = 0; n < chunk; n++) seekpos += chunksize[n];
    soundLoader->load(dest, seekpos, seekpos+chunksize[chunk]);

} // end SoundTrack_Type1::load


////////////////////////////////////////////////////////////////////////////
