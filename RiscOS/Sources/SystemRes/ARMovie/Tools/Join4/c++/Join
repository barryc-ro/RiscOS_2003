/***************************************************************************
 *
 *  File:        JOIN:Join.h
 *
 *  Description: Join main file
 *               New (third) version of the ARMovie joiner
 *               written from scratch
 *
 *  Version:     0.0 20 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>

#include "ProgInfo.h"
#include "InPars.h"
#include "ARChoices.h"
#include "HelpSprite.h"
#include "ARHeader.h"
#include "Images.h"
#include "Keys.h"
#include "Sounds.h"
#include "ARMovie.h"

////////////////////////////////////////////////////////////////////////////
// This defines the initial stack size to be something different from the
// default 4Kb. It is used because some in-place loaded code (type 2 sound
// encoders) may need tons more stack than C will ordinarily provide

int __root_stack_size = (int) 1024*1024*.25; // 1/4 Mb!

////////////////////////////////////////////////////////////////////////////
// main()
//     Requires:  command line arguments
//     Behaviour: performs a 'join' operation
int main(int argc, char *argv[]) {

    ProgramInfo programInfo;
    InputParser inputParser(argc, argv, "Join$ExtraArgs");

    // if the command line parameters included "-help", be helpful and exit
    if (
        inputParser.exists("-help")
        || inputParser.exists("-Help")
        || inputParser.exists("-HELP")
    ) {
        programInfo.printHelp();
        return 0;
    }

    // read the command line choices by creating an ARMovieChoices object
    ARMovieChoices choices(programInfo, inputParser);

    // print startup information if not on silent running
    if (!choices.readSilent()) {
        printf("Source directory: %s\n",choices.readSource());
        printf("Destinaton file: %s\n\n",choices.readDest());
        printf("Scanning components...\n\n");
    }

    // create the helpful sprite object
    HelpfulSprite helpfulSprite(choices.readSource());

    // create the header object, loading the Header file into it
    ARMovieHeader header(choices);

    // create the images object
    Images images(choices, header);

    // create the keys object
    Keys keys(choices);

    // create the sound
    Sounds sounds(choices, header);

    // create the ARMovie object
    ARMovie movie(header, helpfulSprite, keys, images, sounds, choices);

    if (!choices.readSilent()) printf("Creating ARMovie...\n\n");

    // produce the ARMovie
    movie.create();

    if (!choices.readSilent()) {
        printf("ARMovie created successfully.\n\n");
    }

    // return successfully
    return 0;

} // end main


////////////////////////////////////////////////////////////////////////////
