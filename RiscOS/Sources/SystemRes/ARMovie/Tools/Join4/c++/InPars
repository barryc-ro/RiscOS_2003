/***************************************************************************
 *
 *  File:        JOIN:InPars.c++
 *
 *  Description: Join InputParser class implementation
 *
 *  Version:     0.0 20 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *    See .h file
 *
 ***************************************************************************/

#include <stdlib.h>     // for atoi
#include <ctype.h>      // for isdigit
#include <stdio.h>
#include <string.h>
#include "InPars.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

InputParser::InputParser(int main_argc, char *main_argv[], char *sv) {

    char *env; // pointer to grabbed system variable

    // find size of commands passed to main
    int lineSize = 1; // at least one for a terminator
    for (int n = 0; n < main_argc; n++)
        lineSize += strlen(main_argv[n])+1; // add one for space/terminator

    // if system variable extension specified then add this size
    if (sv) {
        env = getenv(sv);
        if (env && strlen(env) != 0)
            lineSize += strlen(env);
        else
            sv = NULL;
    }

    // claim workspace
    line = new char[lineSize];
    if (!line) {
        printf("Error: No memory for command line buffer.\n");
        ERROR_EXIT(1);
    }

    // copy arguements into 'line'
    int pos = 0;
    for (n = 0; n < main_argc; n++)
        pos += sprintf(line+pos, "%s ", main_argv[n]);
    line[--pos] = 0; // remove last space
    if (sv) {
        strcpy(line+pos, env);
    }

    // count the number of arguments
    argc = 1;
    for (n = 0; n < lineSize; n++) if (line[n] == ' ') argc++;

    // claim argv
    argv = new char*[argc];
    if (!argv) {
        printf("Error: No memory for command line buffer.\n");
        ERROR_EXIT(1);
    }

    // store argument positions into argv[]
    pos = 0;
    argv[pos++] = line;
    for (n = 0; n < lineSize && pos < argc;) {
        while (line[n] != ' ') n++;
        line[n++] = 0; // turn space into string terminator
        while (line[n] == ' ') n++;
        argv[pos++] = line+n;
    }
    if (pos != argc) for (n = pos; n < argc; n++) argv[n] = 0;

    // if we read an additional system variable, now remove it so we
    // don't get confused in the future
    // RISC OS specific
    char buffer [256];
    sprintf(buffer, "unset %s", sv);
    if (sv) system(buffer);

} // end InputParser::InputParser


////////////////////////////////////////////////////////////////////////////

InputParser::~InputParser() {

    delete [] line;
    delete [] argv;

} // end InputParser::~InputParser


////////////////////////////////////////////////////////////////////////////

int InputParser::exists(char *string) {

    for (int n = 1; n < argc; n++) {
        if (
            strcmp(string, argv[n]) == 0
            && string[strlen(string)] == 0
        ) return n;
    } // end for each comand line parameter

    return 0;

} // end InputParser::exists


////////////////////////////////////////////////////////////////////////////

int InputParser::hasValidStringParameter(int pos) {

    if (pos+1 >= argc) return 0;
    if (*argv[pos+1] == '-') return 0;

    return 1;

} // end InputParser::isValidStringParameter


////////////////////////////////////////////////////////////////////////////

int InputParser::hasValidIntParameter(int pos) {

    if (pos+1 >= argc) return 0;
    return isdigit(*argv[pos+1]);

} // end InputParser::isValidIntParameter


////////////////////////////////////////////////////////////////////////////

char *InputParser::readString(int pos) {

    if (pos+1 >= argc) return 0;

    return argv[pos+1];

} // end InputParser::readString


////////////////////////////////////////////////////////////////////////////

int InputParser::readInt(int pos) {

    if (pos+1 >= argc) return 0;

    return atoi(argv[pos+1]);

} // end InputParser::readInt


////////////////////////////////////////////////////////////////////////////
