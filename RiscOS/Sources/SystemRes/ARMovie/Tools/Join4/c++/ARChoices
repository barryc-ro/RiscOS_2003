/***************************************************************************
 *
 *  File:        JOIN:ARChoices.c++
 *
 *  Description: Join ARMovieChoices class implementation
 *
 *  Version:     0.0 20 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>   // for file access
#include <stdlib.h>  // for exit
#include <string.h>
#include "ARChoices.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

ARMovieChoices::ARMovieChoices(
    ProgramInfo &programInfo,
    InputParser &input
) {

    int pos;         // temporary position of a particular parameter
    int tryName = 1; // whether or not to try reading the Name file
                     // to find the destination name
    char tempfilename[256];

    ////////////////////////////////////////////////////////////////////
    // -startat

    ////////////////////////////////////////////////////////////////////
    // -silent
    silent = 0;
    if (
        input.exists("-silent")
        || input.exists("-Silent")
        || input.exists("-SILENT")
    ) {
        silent = 1;
    } else {
        printf(
            "%s %s %s\n\n",
            programInfo.readName(),
            programInfo.readVersion(),
            programInfo.readDate()
        );
     }

    ////////////////////////////////////////////////////////////////////
    // -fish: prints some details so that I can check which
    //        version of Join this is
    //        only for my use!!! Pete
    if (
        input.exists("-fish")
        || input.exists("-Fish")
        || input.exists("-FISH")
    ) {
        if (!silent) programInfo.printDetails();
    }

    ////////////////////////////////////////////////////////////////////
    // -nokeys
    keys = 1;
    if (
        input.exists("-nokeys")
        || input.exists("-NoKeys")
        || input.exists("-NOKEYS")
    ) keys = 0;

    ////////////////////////////////////////////////////////////////////
    // -noimages
    images = 1;
    if (
        input.exists("-noimages")
        || input.exists("-NoImages")
        || input.exists("-NOIMAGES")
    ) images = 0;

    ////////////////////////////////////////////////////////////////////
    // -nosound
    sound = 1;
    if (
        input.exists("-nosound")
        || input.exists("-NoSound")
        || input.exists("-NOSOUND")
    ) sound = 0;

    ////////////////////////////////////////////////////////////////////
    // -source
    pos = input.exists("-source");
    if (!pos) pos = input.exists("-Source");
    if (!pos) pos = input.exists("-SOURCE");
    if (!pos) pos = input.exists("-S");
    if (!pos) pos = input.exists("-s");

    if (pos && input.hasValidStringParameter(pos)) {
        source = new char[strlen(input.readString(pos))+1];
        if (!source) {
            printf("Error: Out of memory\n");
            ERROR_EXIT(1);
        }
        strcpy(source, input.readString(pos));
    } else {
        source = new char[2];
        if (!source) {
            printf("Error: Out of memory\n");
            ERROR_EXIT(1);
        }
        strcpy(source, "@");
    }

    ////////////////////////////////////////////////////////////////////
    // -dest
    // set destination filename to that given by "-dest" command
    // or default to "JoinOp"

    pos = input.exists("-dest");
    if (!pos) pos = input.exists("-Dest");
    if (!pos) pos = input.exists("-DEST");
    if (!pos) pos = input.exists("-D");
    if (!pos) pos = input.exists("-d");

    if (pos && input.hasValidStringParameter(pos)) {
        dest = new char[strlen(input.readString(pos))+1];
        if (!dest) {
            printf("Error: Out of memory\n");
            ERROR_EXIT(1);
        }
        strcpy(dest, input.readString(pos));
    } else {
        int joinOp = 1;
        // try to open the 'Name' file to read the destination filename
        sprintf(tempfilename, "%s.Name", source);
        FILE *file = fopen(tempfilename, "r");
        if (file) {
            int len = 0, c;
            while (
                c = fgetc(file),
                c != EOF
                && c != 0
                && c != '\n'
            ) len++;
            len++;
            dest = new char[len];
            if (!dest) {
                printf("Error: Out of memory\n");
                ERROR_EXIT(1);
            }
            rewind(file);
            fgets(dest, len, file);
            fclose(file);
            joinOp = 0;
        }

        // default to "JoinOp"
        if (joinOp) {
            dest = new char[8];
            if (!dest) {
                printf("Error: Out of memory\n");
                ERROR_EXIT(1);
            }
            strcpy(dest, "JoinOp");
        }
    }

    ////////////////////////////////////////////////////////////////////
    // -index
    index = -1;
    pos = input.exists("-index");
    if (!pos) pos = input.exists("-Index");
    if (!pos) pos = input.exists("-INDEX");

    if (pos) {
        if (!input.hasValidIntParameter(pos)) {
            printf("Error: -Index requires a number.\n");
            ERROR_EXIT(1);
        }
        index = input.readInt(pos);
        if (index < 0) {
            printf("Error: Incorrect -Index parameter.\n");
            ERROR_EXIT(1);
        }
    }

    ////////////////////////////////////////////////////////////////////
    // -size: set chunk size

    pos = input.exists("-size");
    if (!pos) pos = input.exists("-Size");
    if (!pos) pos = input.exists("-SIZE");

    if (pos) {
        if (!input.hasValidIntParameter(pos)) {
            printf("Error: -Size requires a number.\n");
            ERROR_EXIT(1);
        }
        chunkAlign = input.readInt(pos);
        if (chunkAlign <= 0) {
            chunkAlign = ARMOVIECHOICES_DEFAULTCHUNKALIGN;
            if (!silent) {
                printf("Warning: Chunk alignment size is invalid.\n");
                printf("         Using default.\n\n");
            }
        }
    } else {
        chunkAlign = ARMOVIECHOICES_DEFAULTCHUNKALIGN;
    }

    ////////////////////////////////////////////////////////////////////
    // -armovies: sound source files from ARMovies, create filenames

    armovies = 0;
    armoviefiles = 0;
    pos = input.exists("-armovies");
    if (!pos) pos = input.exists("-ARMovies");
    if (!pos) pos = input.exists("-ARMOVIES");

    if (pos) {
        printf("Choices: -armovies\n");
        if (!input.hasValidIntParameter(pos)) {
            printf("Error: -ARMovies requires a number.\n");
            ERROR_EXIT(1);
        }
        armovies = input.readInt(pos);
        if (armovies <= 0) {
            printf("Error: Incorrect -ARMovie parameter.\n");
            ERROR_EXIT(1);
        }
        armoviefiles = new char*[armovies];
        if (!armoviefiles) {
            printf("Error: No memory for ARMovie file table.\n");
            ERROR_EXIT(1);
        }
        for (int n = 0; n < armovies; n++) {
           armoviefiles[n] = new char[strlen(source)+20];
            if (!armoviefiles[n]) {
                printf("Error: No memory for ARMovie file table.\n");
                ERROR_EXIT(1);
            }
            if (n == 0)
                sprintf(armoviefiles[n], "%s.ARMovie", source);
            else
                sprintf(armoviefiles[n], "%s.ARMovie%i", source, n+1);
            pos++;
        }
    }

    ////////////////////////////////////////////////////////////////////
    // -armovie: sound source files from ARMovies, read filenames

    pos = input.exists("-armovie");
    if (!pos) pos = input.exists("-ARMovie");
    if (!pos) pos = input.exists("-ARMOVIE");

    if (!armovies && pos) {
        printf("Using ARMovie file sound input\n");
        if (!input.hasValidIntParameter(pos)) {
            printf("Error: -ARMovie requires a number.\n");
            ERROR_EXIT(1);
        }
        armovies = input.readInt(pos++);
        if (armovies <= 0) {
            printf("Error: Incorrect -ARMovie parameter.\n");
            ERROR_EXIT(1);
        }
        armoviefiles = new char*[armovies];
        if (!armoviefiles) {
            printf("Error: No memory for ARMovie file table.\n");
            ERROR_EXIT(1);
        }
        for (int n = 0; n < armovies; n++) {
            if (!input.hasValidStringParameter(pos)) {
                printf("Error: Incorrect -ARMovie filenames.\n");
                ERROR_EXIT(1);
            }
            armoviefiles[n] = new char[strlen(input.readString(pos))+1];
            if (!armoviefiles[n]) {
                printf("Error: No memory for ARMovie file table.\n");
                ERROR_EXIT(1);
            }
            strcpy(armoviefiles[n], input.readString(pos));
            pos++;
            printf("  ARMovie file %i: %s\n", n+1, armoviefiles[n]);
        }
        printf("\n");
    }

    ////////////////////////////////////////////////////////////////////
    // -subsample
    subSample = 1;
    pos = input.exists("-subsample");
    if (!pos) pos = input.exists("-Subsample");
    if (!pos) pos = input.exists("-SUBSAMPLE");

    if (pos) {
        if (!input.hasValidIntParameter(pos)) {
            printf("Error: -Subsample requires a number.\n");
            ERROR_EXIT(1);
        }
        subSample = input.readInt(pos);
        if (subSample < 1) {
            printf("Error: Incorrect -Subsample parameter.\n");
            ERROR_EXIT(1);
        }
    }

} // end ARMovieChoices::ARMovieChoices


////////////////////////////////////////////////////////////////////////////

ARMovieChoices::~ARMovieChoices() {

    delete [] source;
    delete [] dest;

    if (armoviefiles) {
        for (int n = 0; n < armovies; n++) delete [] armoviefiles[n];
        delete [] armoviefiles;  // WHY DOES THIS FAIL SOMETIMES?
    }

} // end ARMovieChoices::~ARMovieChoices


////////////////////////////////////////////////////////////////////////////

void ARMovieChoices::addIndex(char *filename) {

    // case of no index
    if (index == -1) return;

    // caluculate the length of the index string
    char buffer[10]; // beat this an I'll give you an apple
    sprintf(buffer, "%i", index);
    int indexStrLen = strlen(buffer);

    // find leaf
    int n = strlen(filename);
    while (n >= 0 && filename[n] != '.') n--;

    // shimmy the leaf by index chars
    for (int m = strlen(filename); m > n; m--)
        filename[m+indexStrLen] = filename[m];

    // insert the index no
    strncpy(filename+n+1, buffer, indexStrLen);

} // end ARMovieChoices::addIndex


////////////////////////////////////////////////////////////////////////////
