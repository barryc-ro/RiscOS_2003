/***************************************************************************
 *
 *  File:        JOIN:Sounds.c++
 *
 *  Description: Join Sounds class implementation
 *
 *  Version:     0.0 22 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Sounds.h"
#include "Global.h"

////////////////////////////////////////////////////////////////////////////

Sounds::Sounds(
    ARMovieChoices &choices,
    ARMovieHeader &hdr
) {

    armovies = choices.readARMovies();
    armoviefiles = choices.readARMovieFilenames();

    if (!choices.soundEnabled()) {
        hdr.setNoSoundTracks(1);
        hdr.setSoundFormat(0, 0);
    }

    noTracks = hdr.readNoSoundTracks();
    if (armovies) {
        noTracks = armovies;
        hdr.setNoSoundTracks(armovies);
    }
    maxChunk = 0;

    // initialise SoundTracks
    soundTracks = new SoundTrack*[noTracks];
    soundLoaders = new SoundLoader*[noTracks];
    if (!soundTracks || !soundLoaders) {
        printf("Error: No memory for sound tracks or sound loaders.\n");
        ERROR_EXIT(1);
    }
    for (int track = 0; track < noTracks; track++) {
        createSoundTrack(track, choices, hdr);
        if (!soundTracks[track]) {
            printf("Error: Couldn't create a sound track.\n");
            ERROR_EXIT(1);
        }
        if (soundTracks[track]->readNoChunks() > maxChunk)
            maxChunk = soundTracks[track]->readNoChunks();
    }

    // caculate total chunk sizes
    totalChunksize = new int[maxChunk];
    if (!totalChunksize) {
        printf("Error: No memory for total chunk size table.\n");
        ERROR_EXIT(1);
    }
    oddmaxsize = 0;
    evenmaxsize = 0;
    for (int chunk = 0; chunk < maxChunk; chunk++) {
        totalChunksize[chunk] = 0;
        for (track = 0; track < noTracks; track++) {
            if (soundTracks[track]->readNoChunks() > chunk)
                totalChunksize[chunk]
                    += soundTracks[track]->readChunkSize(chunk);
        }
        if ((chunk&1) && totalChunksize[chunk] > oddmaxsize)
            oddmaxsize = totalChunksize[chunk];
        if (!(chunk&1) && totalChunksize[chunk] > evenmaxsize)
            evenmaxsize = totalChunksize[chunk];
    }

} // end Sounds::Sounds


////////////////////////////////////////////////////////////////////////////

Sounds::~Sounds() {

    for (int track = 0; track < noTracks; track++) {
        if (soundTracks[track]) delete soundTracks[track];
        if (soundLoaders[track]) delete soundLoaders[track];
    }
    delete [] soundTracks;
    delete [] soundLoaders;
    delete [] totalChunksize;

} // end Sounds::~Sounds


////////////////////////////////////////////////////////////////////////////

SoundTrack *Sounds::readTrack(int track) {

    return soundTracks[track];

} // end Sounds::readTrack


////////////////////////////////////////////////////////////////////////////

void Sounds::createSoundTrack(
    int trk,
    ARMovieChoices &choices,
    ARMovieHeader &hdr
) {

    soundTracks[trk] = 0;
    soundLoaders[trk] = 0;

    switch (hdr.readSoundFormat(trk)) {
        case 0:
            soundTracks[trk] = new SoundTrack_Type0();
            break;
        case 1:
            switch (hdr.readPrecision(trk)) {
                case 8:
                case 16:
                    if (!armovies)
                        soundLoaders[trk] = new SoundLoader_RawData(
                            trk, choices, hdr
                        );
                    else
                        soundLoaders[trk] = new SoundLoader_ARMovie(
                            trk, hdr, choices, armoviefiles[trk]
                        );
                    soundTracks[trk] = new SoundTrack_Type1(
                        trk, *soundLoaders[trk], hdr
                    );
                    break;
                case 4:
                    printf("Error: This version of Join depreciates ");
                    printf("type 1 ADPCM.\n");
                    ERROR_EXIT(1);
                    break;
                default:
                    printf("Error: Invalid type 1 sound precision.\n");
                    ERROR_EXIT(1);
                    break;
            }
            break;
        case 2:
            if (!armovies)
                soundLoaders[trk] = new SoundLoader_RawData(
                    trk, choices, hdr
                );
            else
                soundLoaders[trk] = new SoundLoader_ARMovie(
                    trk, hdr, choices, armoviefiles[trk]
                );
            soundTracks[trk] = new SoundTrack_Type2(
                trk, *soundLoaders[trk], hdr, hdr.readType2SoundFormat(trk)
            );
            break;
        default:
            printf("Error: Unsupported sound format (Not 0, 1, or 2).\n");
            ERROR_EXIT(1);
            break;
    }

} // end Sounds::createSoundTrack


////////////////////////////////////////////////////////////////////////////
