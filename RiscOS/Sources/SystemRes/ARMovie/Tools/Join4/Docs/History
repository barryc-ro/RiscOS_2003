/***************************************************************************
 *
 *  File:        JOIN:History
 *
 *  Description: Join history file
 *
 *  Version:     1.0 5 Dec 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.co.uk)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/


August
------

20	Started new version of Join.
	Based upon Sophie Wilson's Basic source and S.Rose's C. Both are
	hideous. The former very compact with unhelpful var names, the latter
	monolithic with unhelpful var names, ~50 of which are global. Hmm.
	Coding in C++. Neatly. (I hope)
	ProgramInfo class. ARChoices class parsing CLI params using the
	InputParser class.
	
21	ARMovieHeader reads and keeps information on the header. HelpfulSprite
	class loads the helpful sprite and produces it when necessary.
	Keys, Images, Sounds,

22	ARMovie class and beginnings of movie creation. ARMovieHeader class
	generates user lines and join created lines.

26	Chunks class that creates the chunk catalogue and the chunks.

27	SoundTrack class holds information about a particular sound track,
	with SoundTrack_8bit, _16bit, _Type0 and _Type2 inheriting from it.
	Thus sound generation code can treat all output types identically
	thru polymorphism.
	Sounds now is an interface to these classes.

29	Began adding Type 2 sound in earnest. This involved altering all
	sound chunksize data to hold arrays of chunksizes since with different
	compression types it may be a variable amount.
	
Septemeber
----------

1	Merged SoundTrack_8bit adn _16bit into _Type1 since they were
	identical.
	Created the ARMovieSoundReader class to read Type 1 sound data from
	an ARMovie file.

2	Altered InputParser to accept additional arguements from a system
	variable. (John Redford needed to use Join with AREncode, and all was
	not well).
	Added SoundLoader abstract class with the SoundLoader_RawData and
	SoundLoader_ARMovie. SoundTrack_Type1 and _Type2 now take these
	as parameters to the constructor rather than information to
	create the sound filename.
	Generation wuth ARMovie sound input works.
	Altered the way ARMovie files are specified. To cope with fetcher
	type files I can't assume they're called ARMovie, ARMovie2... as I
	wanted, so ARMovieChoices reads the filenames on the command line.
	=> Added -ARMovies to opt for defaults!

3	Added destructors to objects. Most of fetcher code in ARMovieSoundReader
	it just generates white noise.

4	Added handling of linear and unsigned on the sound precision line.

9	Been having a hell of a time with fetchers. Memory leakages and odd
	behaviour; C++ being screwed up. Seems to have settled down now.
	Whether that was me or not...

10	Finished off type 2 sound bobbins. Hurrah! Altered the ADPCM encoder
	m/c veneer to put a copy of the workspace at the start of a chunk.

11	Sophie's RedDwarf test case didn't work propely.
	i) Made header reader interpret 'linear' & 'unsigned' properly.
	ii) Sound gets out of sync with ARMovie input.

12	Still at it! I've soved the Join$ExtraArgs bug; didn't add one for
	a string terminator in ARMovieChoices! (I should be shot with this level
	of muff up)
	RedDwarf test case works

October
-------

2	Type 2 sound compression: when in stereo, number of samples to compress
	wasn't given to encode_compress correctly (gave total no, not no per
	channel)

3	A few more tweaks for this.

6	Fixed bug: If less than a whole chunk of sound, fixed divide by zero
	error
	Added the Global.h file with an error code exiting macro, ERROR_EXIT()
	and made all exit(x) calls use this instead. The macro cunningly strips
	off c++. or h. first as well.

9	The Join info banner appears prior to any warnings/errors that may be
	output.
	If a type 2 sound encoder gives an error on init (i.e. wrong frequency)
	then it is now printed out.

10	-Source can be shortened to -s, -Dest to -d
	Annoyingly hard to find bug causing more halts with stacks being
	overwritten. Removed it by adding one to the length of string created
	in the InputParser constructor. So there we are.

14	A couple of wee fudges to make GSM type 2 encoding work.
	Needed to get a SoundTrack_Type2 * from any SoundTrack (if its of
	_Type2) before actually creating samples in order to clean the encoder
	state space.

15	-Fish switch
	Prevented a scan through all sound chunks when creating type 2 sound if
	the compression ration is fixed thru reading of Info file.
	Prepended appropriate amounts of silence/next bit of data to end of a
	frame of samples for compression just in case it affects the compressor.

16	Fixed the scanning 'feature' that compressed the whole of the sound data
	twice even with fixed ratio compression. (1st time read the size of the
	compressed sound data) A simple sum later, and we're twice as fast.
	Major alterations to the _Type2 encoding. Now fiddles each chunk's
	inputChunksize value so that it is enough for an exact number of encoder
	audio frames. If there are too few uncompressed samples for the chunk,
	so be it, if there are too many so be it. Replay can cope. And nasty
	clicks mid-playback go.

21	Added the -Index switch which I hadn't yet implemented. Doh! This
	being stored in the ARMovieChoices object requires several contructors
	to be altered to take the choices object, not just char *srcDir etc.
	Added -Subsample switch for raw sound data input (Sophie wanted this)

22	Added automatic subsampling for nonequal replay rate ARMovie sound
	sources.

23	Bugfixed type 2 sound that I mascred by adding subsampling, and
	corrected dogy subsampling for stereo sound.

November
--------

11	SoundLoader_ARMovie class' check for the existence of a -Subsample
	parameter was eroneous. Added '!= 1'. It only printed a Warning: anyway.

18	The SoundTrack_Type2::readCompressedSoundSize routine still had the
	hangover bodge from GSM of an arbitary +1 which made things work. This
	didn't bother ADPCM, but did bother g72x. Removed it and investigated
	why it was needed for GSM. Its down to the floating point maths
	calculation involving fractional bits per sample. Hand rolled a
	suitable rounding function and we now have a better quality bodge that
	works in all cases (so far).

December
--------

4-5	Discovered (whilst working on AREncode) that the multiple soundtrack
	facility was sverely completely broken. Fixed it with some more hideous
	parsing code in ARMovieHeader.c. Also made the InputParser delete
	the ARMovie$ExtraArgs system variable. The old joiner never did this,
	but I was getting annoyed by calling Join at the command line and
	having it throw up surreal errors because AREncode had given extra 
	args earlier.

9	Fiddled the type 2 compressor bobbins to handle the extensions in order
	to use MPEG. Specifically, ARHeader supports extra codec parameter
	strings, and the SoundTrack_Type2 now deals with CInfo files with
	frame size zero, reading its value from new entry 0 interfaces, passing
	new parameter strings, and handling the errors produced.
	The MPEG codec doesn't like being reset with a call to entry4 (despite
	my fiddling it so that it should) so... SoundTrack_Type2::reset now
	reloads and initialises the code. A little nasty, but not terrible.

January

14	Fiddled some of the additions to the ARHead class to be nice. I'd missed
	checking a few newed bits which was naughty.
	Fixed a nasty lurking bug RE blanking off the top of non-complete
	sound frames to prevent ARMovie soundtracks end in guff. This code could
	crash the encoder. It doesn't any more (Hopefully!)

22	Depreciated my CInfo frame size = 0 extensions (they still work but
	print warnings, and shouldn't be used any more; I just won't delete them
	quite yet). Altered the warnings for type 2 sound to be a little more
	informative.

26	Added a facility that caches type 2 compressed sound data in a file
	if it is of a variable compression ratio to savbe calculating it twice.

28	Fixed caching and directed it to the Wimp$ScrapDir if it exists. Tried
	unbodging ST_Type2::reset but MPEG still doesn't like to be reset.