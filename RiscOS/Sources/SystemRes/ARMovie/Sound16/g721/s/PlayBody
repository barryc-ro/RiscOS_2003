;**************************************************************************
;
;  File:        s.Decompress.g721
;
;  Description: g721 decompression bobbins
;
;  Version:     0.0 11 Nov 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point
	IMPORT	|__RelocCode|		; reloc code from module linkage

	GBLS	INIT
	GBLS	DECODER
	GBLA	SSIZE			; size of state structure
	GBLA	CFS			; compressed frame size (bytes)
	GBLA	DFS			; decompressed frame size (bytes)
	[ :LNOT: stereo
	IMPORT	|g721_mono_init|	; init workspace
	IMPORT	|g721_mono_decoder|	; the g721 library decompressor
INIT	SETS	"g721_mono_init"
DECODER	SETS	"g721_mono_decoder"
SSIZE 	SETA	52
CFS	SETA	1
DFS	SETA	2*2
	!	0, "Mono g721 playback"
	]
	[ stereo
	IMPORT	|g721_stereo_init|	; init workspace
	IMPORT	|g721_stereo_decoder|	; the g721 library decompressor
INIT	SETS	"g721_stereo_init"
DECODER	SETS	"g721_stereo_decoder"
SSIZE	SETA	52*2
CFS	SETA	2
DFS	SETA	2*2*2
	!	0, "Stereo g721 playback"
	]

;**************************************************************************
; g721 decompression code

decompress

	; decompress a chunk of g721 sound data
	; IN:  r0 = Source
	;      r1 = Length of source in bytes
	;      r3 = Destination
	; OUT: r1 = length of output produced in bytes
	;      all registers preserved

	stmdb	r13!, {r0, r2-r12, r14}

	; relocation initalisation, performed once at first call
	ldr	r4, hasinit
	cmp	r4, #0
	beq	init
init_ret

	mov	r4, r0				; input pointer
	mov	r5, r1				; input size (loop counter)
	mov	r6, r3				; dest pointer
	mov	r7, #0				; output size counter

loop
	; get input ready for |g721_XXX_decoder|

	mov	r0, r4				; source
	mov	r1, r6				; dest buffer
	adr	r2, statespace			; workspace

	; entry to |g721_XXX_decoder|
	;   r0 - source g721 frame
	;   r1 - output sample buffer
	;   r2 - workspace pointer
	bl	$DECODER

	add	r4, r4, #CFS			; update src ptr
	add	r6, r6, #DFS			; update dest ptr
	add	r7, r7, #DFS			; update length
	subs	r5, r5, #CFS			; update counter
 	bgt	loop

	mov	r1, r7

g721_end
	ldmia	r13!, {r0, r2-r12, pc}


;**************************************************************************
; init
;     this sorts out the C code that has to be reloated prior to use
;     init must be called once before the C code is called

hasinit
	DCD	0				; has init occurred?

init
	stmfd	r13!, {r0-r12}

	bl	|__RelocCode|			; relocate this code
	mov	r0,#0				; synchronise code areas
	swi	&2006e				;   (don't confuse SA)

	mov	r4, #1
	str	r4, hasinit

	adr	r0, statespace			; intialise g721 state space
	bl	$INIT

	ldmfd	r13!, {r0-r12}
	b	init_ret


;**************************************************************************

statespace
	%	SSIZE				; zeroed state space


;**************************************************************************

	END
