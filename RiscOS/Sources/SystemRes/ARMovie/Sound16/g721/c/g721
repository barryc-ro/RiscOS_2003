/***************************************************************************
 *
 *  File:        g72x:h721.c
 *
 *  Description: g721 codec port
 *
 *  Version:     1.0 11 Nov 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *               Modified from source by Sun Microsystems
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include "private.h"

////////////////////////////////////////////////////////////////////////////
// Sun Microsystems' code

/*
 * g721.c
 *
 * Description:
 *
 * g721_encoder(), g721_decoder()
 *
 * These routines comprise an implementation of the CCITT G.721 ADPCM
 * coding algorithm.  Essentially, this implementation is identical to
 * the bit level description except for a few deviations which
 * take advantage of work station attributes, such as hardware 2's
 * complement arithmetic and large memory.  Specifically, certain time
 * consuming operations such as multiplications are replaced
 * with lookup tables and software 2's complement operations are
 * replaced with hardware 2's complement.
 *
 * The deviation from the bit level specification (lookup tables)
 * preserves the bit level performance specifications.
 *
 * As outlined in the G.721 Recommendation, the algorithm is broken
 * down into modules.  Each section of code below is preceded by
 * the name of the module which it is implementing.
 *
 */

static short qtab_721[7] = {-124, 80, 178, 246, 300, 349, 400};
/*
 * Maps G.721 code word to reconstructed scale factor normalized log
 * magnitude values.
 */
static short	_dqlntab[16] = {-2048, 4, 135, 213, 273, 323, 373, 425,
				425, 373, 323, 273, 213, 135, 4, -2048};

/* Maps G.721 code word to log of scale factor multiplier. */
static short	_witab[16] = {-12, 18, 41, 64, 112, 198, 355, 1122,
				1122, 355, 198, 112, 64, 41, 18, -12};
/*
 * Maps G.721 code words to a set of values whose long and short
 * term averages are computed and then compared to give an indication
 * how stationary (steady state) the signal is.
 */
static short	_fitab[16] = {0, 0, 0, 0x200, 0x200, 0x200, 0x600, 0xE00,
				0xE00, 0x600, 0x200, 0x200, 0x200, 0, 0, 0};

/*
 * g721_encoder()
 *
 * Encodes the input value of linear PCM data sl and returns
 * the resulting code.
 */
int
g721_encoder(
	int		sl,
	struct g72x_state *state_ptr)
{
	short		sezi, se, sez;		/* ACCUM */
	short		d;			/* SUBTA */
	short		sr;			/* ADDB */
	short		y;			/* MIX */
	short		dqsez;			/* ADDC */
	short		dq, i;

	/* linearize input sample to 14-bit PCM */
	sl >>= 2;			/* 14-bit dynamic range */

	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	se = (sezi + predictor_pole(state_ptr)) >> 1;	/* estimated signal */

	d = sl - se;				/* estimation difference */

	/* quantize the prediction difference */
	y = step_size(state_ptr);		/* quantizer step size */
	i = quantize(d, y, qtab_721, 7);	/* i = ADPCM code */

	dq = reconstruct(i & 8, _dqlntab[i], y);	/* quantized est diff */

	sr = (dq < 0) ? se - (dq & 0x3FFF) : se + dq;	/* reconst. signal */

	dqsez = sr + sez - se;			/* pole prediction diff. */

	update(4, y, _witab[i] << 5, _fitab[i], dq, sr, dqsez, state_ptr);

	return (i);
}

/*
 * g721_decoder()
 *
 * Description:
 *
 * Decodes a 4-bit code of G.721 encoded data of i and
 * returns the resulting linear PCM, A-law or u-law value.
 * return -1 for unknown out_coding value.
 */
int
g721_decoder(
	int		i,
	struct g72x_state *state_ptr)
{
	short		sezi, sei, sez, se;	/* ACCUM */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dq;
	short		dqsez;

	i &= 0x0f;			/* mask to get proper bits */
	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	y = step_size(state_ptr);	/* dynamic quantizer step size */

	dq = reconstruct(i & 0x08, _dqlntab[i], y); /* quantized diff. */

	sr = (dq < 0) ? (se - (dq & 0x3FFF)) : se + dq;	/* reconst. signal */

	dqsez = sr - se + sez;			/* pole prediction diff. */

	update(4, y, _witab[i] << 5, _fitab[i], dq, sr, dqsez, state_ptr);

	return (sr << 2);	/* sr was 14-bit dynamic range */
}


////////////////////////////////////////////////////////////////////////////
// mono initialisation

int g721_mono_sizeof () {

    return (sizeof(struct g72x_state));

} // end g721_mono_sizeof


////////////////////////////////////////////////////////////////////////////

void g721_mono_init (void *state) {

    struct g72x_state *s = (struct g72x_state *) state;
    g72x_init_state(s);

} // end g721_mono_init


////////////////////////////////////////////////////////////////////////////
// stereo initialisation

int g721_stereo_sizeof () {

    return (sizeof(struct g72x_state_stereo));

} // end g721_stereo_sizeof


////////////////////////////////////////////////////////////////////////////

void g721_stereo_init (void *state) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;
    g721_mono_init(&(s->l));
    g721_mono_init(&(s->r));

} // end g721_stereo_init


////////////////////////////////////////////////////////////////////////////
// g721_mono_coder

void g721_mono_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    struct g72x_state *s = (struct g72x_state *) state;
    outdata[0] = g721_encoder(indata[0], s);
    outdata[0] |= g721_encoder(indata[1], s) << 4;

} // end g721_mono_coder


////////////////////////////////////////////////////////////////////////////
// g721_stereo_coder

void g721_stereo_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;
    outdata[0] = g721_encoder(indata[0], &(s->l));
    outdata[0] |= g721_encoder(indata[1], &(s->r)) << 4;
    outdata[1] = g721_encoder(indata[2], &(s->l));
    outdata[1] |= g721_encoder(indata[3], &(s->r)) << 4;

} // end g721_mono_coder


////////////////////////////////////////////////////////////////////////////
// g721_mono_decoder

int g721_mono_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    struct g72x_state *s = (struct g72x_state *) state;
    outdata[0] = g721_decoder(indata[0] & 0x0f, s);
    outdata[1] = g721_decoder((indata[0] & 0xf0) >> 4, s);

    return 0;

} // end g721_mono_coder


////////////////////////////////////////////////////////////////////////////
// g721_stereo_decoder

int g721_stereo_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;
    outdata[0] = g721_decoder(indata[0] & 0x0f, &(s->l));
    outdata[1] = g721_decoder((indata[0] & 0xf0) >> 4, &(s->r));
    outdata[2] = g721_decoder(indata[1] & 0x0f, &(s->l));
    outdata[3] = g721_decoder((indata[1] & 0xf0) >> 4, &(s->r));

    return 0;

} // end g721_mono_coder


////////////////////////////////////////////////////////////////////////////
