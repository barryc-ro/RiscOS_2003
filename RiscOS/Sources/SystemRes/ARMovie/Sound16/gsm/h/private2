/***************************************************************************
 *
 *  File:        GSM:private2.h
 *
 *  Description: Optimisations to GSM codec maths
 *
 *  Version:     1.0 18 Nov 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.co.uk)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************
 * This file is included by GSM:private.h only
 ***************************************************************************/

#ifndef GSM_PRIVATE2_H
#define GSM_PRIVATE2_H

////////////////////////////////////////////////////////////////////////////
// The maths code used to be these functions from add.c

// extern word	gsm_mult(word a, word b);
// extern longword gsm_L_mult(word a, word b);
// extern word	gsm_mult_r(word a, word b);
//
// extern word	gsm_div(word num, word denum);
//
// extern word	gsm_add(word a, word b);
// extern longword gsm_L_add(longword a, longword b);
//
// extern word	gsm_sub(word a, word b);
// extern longword gsm_L_sub(longword a, longword b);
//
// extern word	gsm_abs(word a);
//
// extern word	gsm_norm(longword a);
//
// extern longword gsm_L_asl(longword a, int n);
// extern word	gsm_asl(word a, int n);
//
// extern longword gsm_L_asr(longword a, int n);
// extern word	gsm_asr(word a, int n);


////////////////////////////////////////////////////////////////////////////
// Now it's these macros

#include	<assert.h>

#define	SATURATE(x) 	\
	((x) < MIN_WORD ? MIN_WORD : (x) > MAX_WORD ? MAX_WORD: (x))

// these require a register longword ltmp to be defined

#define gsm_add(a, b)	\
	( ltmp = (longword)(a) + (longword)(b), SATURATE(ltmp) )

#define gsm_sub(a, b)	\
	( ltmp = (longword)(a) - (longword)(b), SATURATE(ltmp) )

#define gsm_mult(a, b)	\
	((a == MIN_WORD && b == MIN_WORD)			\
		? MAX_WORD					\
		: SASR( (longword)a * (longword)b, 15 ))

#endif // GSM_PRIVATE2_H
