;**************************************************************************
;
;  File:        s.EncdBody
;
;  Description: Assembler veneer code body for Acorn Replay sound compressor
;               GSM version
;
;  Version:     0.0 3 Oct 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;    3 Oct 1997   Pete Goodliffe        Created this based upon ADPCM glory
;    7 Oct 1997   Pete Goodliffe        Removed the prepending of chunk by
;                                       a copy of the workspace
;    10 Oct 1997  Pete Goodliffe        Removed 8000 Hz freq restriction
;
;**************************************************************************

; requires stereo to be defined

	ASSERT	:DEF: stereo

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	EXPORT	|encode_init1|
	EXPORT	|encode_init2|
	EXPORT	|encode_compress|

;**************************************************************************
;* Set up functions to call

	GBLS	SIZEOF
	GBLS	INIT
	GBLS	CODER
	GBLA	CFS			; compressed frame size (bytes)
	GBLA	M_CFS			; compressed frame size per channel
	[ :LNOT: stereo
	IMPORT	|gsm_mono_coder|	; encode samples in GSM format
	IMPORT	|gsm_mono_sizeof|	; find size of necessary workspace
	IMPORT	|gsm_mono_init|		; initialise workspace
SIZEOF	SETS	"gsm_mono_sizeof"
INIT	SETS	"gsm_mono_init"
CODER	SETS	"gsm_mono_coder"
CFS	SETA	33
M_CFS	SETA	33
	!	0, "GSM mono encoder"
	]
	[ stereo
	IMPORT	|gsm_stereo_coder|	; encode samples in GSM format
	IMPORT	|gsm_stereo_sizeof|	; find size of necessary workspace
	IMPORT	|gsm_stereo_init|	; initialise workspace
SIZEOF	SETS	"gsm_stereo_sizeof"
INIT	SETS	"gsm_stereo_init"
CODER	SETS	"gsm_stereo_coder"
CFS	SETA	66
M_CFS	SETA	33
	!	0, "GSM stereo encoder"
	]

;**************************************************************************
;* Main code body
;**************************************************************************

;**************************************************************************
;* Initialisation

encode_init1
	; initialise for encoding
	;   on entry:
	;     r0: sample frequency in Hz for information
	;     r1: (parameter string; ignored)
        ;   returns
        ;     r0: workspace size required
	;     r1: zero or pointer to error block
	;     r2: frame size of compression type

        str     lr, [r13, #-4]!

	str	r0, sampleHz		; record the sample rate

	bl	$SIZEOF			; workspace size returned in r0
	mov	r1, #0			; no error
	mov	r2, #$M_CFS		; frame size per channel

        ldr     pc, [r13], #4


;**************************************************************************

encode_init2
	; initialise workspace
	;   on entry
	;     r0: sample frequency in Hz for information
	;     r1: pointer to workspace
	;     r2: size of workspace
	;   returns
	;     r0: either 0 or pointer to error block

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	; test sample rate
;	cmp	r0, #8000		; compare with 8000 Hz
;	adrne	r0, error_wrongFrequency; error message
;	ldmnefd	r13!, {pc}

	; check workspace size
	; ???

	mov	r0, r1			; copy workspace pointer
	bl	$INIT			; initialise workspace

	mov	r0, #0			; return success
        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(


;**************************************************************************
;* Compression
;**************************************************************************

encode_compress
	; compress a frame
	;   on entry
	;     r0: current bit offset in output buffer (updated on exit)
	;     r1: pointer to output buffer
	;     r2: number of samples (usually the input frame sample size)
	;     r3: pointer to samples
	;     r4: pointer to workspace
	;     r5: true (non zero) if frame is start of chunk, (add workspace)
	;         false otherwise
	;   returns
	;     r0: new current bit offset in output buffer
	;     r1: either 0 or pointer to error block
	;     r2: number of samples actually encoded per channel

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	mov 	r6, r0, LSR#3		; convert bit offset to byte offset
					; we can assume for this codec that
					; that it will be on a byte boundary

	; if at start of chunk, first produce a copy of the workspace
	; since using the saved workspace makes no appreciable difference
	; to the sound playback quality, this has been removed

;	cmp	r5, #0
;	beq	chunkStart_end
;	stmfd	r13!, {r1-r12}
;	bl	$SIZEOF			; let r0 = ws size == loop counter
;	ldmfd	r13!, {r1-r12}
;	add	r5, r1, r6		; let r5 = address of destination
;	add	r6, r6, r0		; update byte offset
;	mov	r8, r4			; let r8 = address of source
;loop	ldr	r9, [r8], #4
;	str	r9, [r5], #4
;	subs	r0, r0, #4
;	bgt	loop
;chunkStart_end

	; prepare registers for call to |gsm_X_coder|

	mov	r0, r3			; src ptr
	add	r1, r1, r6		; dest ptr
	mov	r2, r4			; workspace

	; for |gsm_X_coder| entry
	;   r0 = source samples pointer
	;   r1 = pointer to destination
	;   r2 = pointer to workspace
	;
	; the function consumes 160 16-bit words and produces 33 bytes mono
	;   and consumnes 320 16-bit words producing 66 byes in stereo
	;   it preserves r4-r9

	bl	$CODER

	; calculate return values
					; calculate new bit offset to return
	add	r0, r6, #CFS		; by adding CFS to orignal byte count
	mov	r0, r0, LSL#3		; and converting it to bits

	mov	r1, #0			; assume success
	mov	r2, #160		; number of samples encoded per chnl

        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(


;**************************************************************************
;* The data area
;**************************************************************************

sampleHz
	DCD	0;			; sample rate given to init1

;**************************************************************************
;* The error blocks
;**************************************************************************

;error_wrongFrequency
;	DCD	0;			; error number
;	DCB	"Incorrect GSM sample rate; should be 8000 Hz", 0
;					; error message
;	ALIGN

;**************************************************************************
;* End of file
;**************************************************************************

	END
