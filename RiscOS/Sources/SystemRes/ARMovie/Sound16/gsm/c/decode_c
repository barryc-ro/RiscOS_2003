/*
 * Copyright 1992 by Jutta Degener and Carsten Bormann, Technische
 * Universitaet Berlin.  See the accompanying file "COPYRIGHT" for
 * details.  THERE IS ABSOLUTELY NO WARRANTY FOR THIS SOFTWARE.
 */

/* $Header$ */

#include	"private.h"
#include	"gsm.h"

/*
 *  4.3 FIXED POINT IMPLEMENTATION OF THE RPE-LTP DECODER
 */

static void Postprocessing_mono(
	struct gsm_mono_state	* S,
	register word 		* s
) {
	register int		k;
	register word		msr = S->msr;
	register longword	ltmp;	/* for GSM_ADD */
	register word		tmp;

	for (k = 160; k--; s++) {
		tmp = GSM_MULT_R( msr, 28180 );
		msr = GSM_ADD(*s, tmp);  	   /* Deemphasis 	     */
		*s  = GSM_ADD(msr, msr) & 0xFFF8;  /* Truncation & Upscaling */
	}
	S->msr = msr;
}

static void Postprocessing_stereo(
	struct gsm_mono_state	* S,
	register word 		* s
) {
	register int		k;
	register word		msr = S->msr;
	register longword	ltmp;	/* for GSM_ADD */
	register word		tmp;

	// the only difference between this and the mono version above
	// is the following line that writes _every other_ sample
	for (k = 160; k--; s += 2) {
		tmp = GSM_MULT_R( msr, 28180 );
		msr = GSM_ADD(*s, tmp);  	   /* Deemphasis 	     */
		*s  = GSM_ADD(msr, msr) & 0xFFF8;  /* Truncation & Upscaling */
	}
	S->msr = msr;
}

// unrolled loops: PJG 24 Nov 1997 mono and stereo

void Gsm_Decoder_mono(
	struct gsm_mono_state	* S,

	word		* LARcr,	/* [0..7]		IN	*/

	word		* Ncr,		/* [0..3] 		IN 	*/
	word		* bcr,		/* [0..3]		IN	*/
	word		* Mcr,		/* [0..3] 		IN 	*/
	word		* xmaxcr,	/* [0..3]		IN 	*/
	word		* xMcr,		/* [0..13*4]		IN	*/

	word		* s		/* [0..159]		OUT 	*/
) {
	int		j/*, k*/;
	word		erp[40], wt[160];
	word		* drp = S->dp0 + 120;

	for (j=0; j <= 3; j++, xmaxcr++, bcr++, Ncr++, Mcr++, xMcr += 13) {

		Gsm_RPE_Decoding( S, *xmaxcr, *Mcr, xMcr, erp );
		Gsm_Long_Term_Synthesis_Filtering( S, *Ncr, *bcr, erp, drp );

//		for (k = 0; k <= 39; k++) wt[ j * 40 + k ] =  drp[ k ];
		wt[ j * 40 + 0 ] =  drp[ 0 ];
		wt[ j * 40 + 1 ] =  drp[ 1 ];
		wt[ j * 40 + 2 ] =  drp[ 2 ];
		wt[ j * 40 + 3 ] =  drp[ 3 ];
		wt[ j * 40 + 4 ] =  drp[ 4 ];
		wt[ j * 40 + 5 ] =  drp[ 5 ];
		wt[ j * 40 + 6 ] =  drp[ 6 ];
		wt[ j * 40 + 7 ] =  drp[ 7 ];
		wt[ j * 40 + 8 ] =  drp[ 8 ];
		wt[ j * 40 + 9 ] =  drp[ 9 ];
		wt[ j * 40 + 10 ] =  drp[ 10 ];
		wt[ j * 40 + 11 ] =  drp[ 11 ];
		wt[ j * 40 + 12 ] =  drp[ 12 ];
		wt[ j * 40 + 13 ] =  drp[ 13 ];
		wt[ j * 40 + 14 ] =  drp[ 14 ];
		wt[ j * 40 + 15 ] =  drp[ 15 ];
		wt[ j * 40 + 16 ] =  drp[ 16 ];
		wt[ j * 40 + 17 ] =  drp[ 17 ];
		wt[ j * 40 + 18 ] =  drp[ 18 ];
		wt[ j * 40 + 19 ] =  drp[ 19 ];
		wt[ j * 40 + 20 ] =  drp[ 20 ];
		wt[ j * 40 + 21 ] =  drp[ 21 ];
		wt[ j * 40 + 22 ] =  drp[ 22 ];
		wt[ j * 40 + 23 ] =  drp[ 23 ];
		wt[ j * 40 + 24 ] =  drp[ 24 ];
		wt[ j * 40 + 25 ] =  drp[ 25 ];
		wt[ j * 40 + 26 ] =  drp[ 26 ];
		wt[ j * 40 + 27 ] =  drp[ 27 ];
		wt[ j * 40 + 28 ] =  drp[ 28 ];
		wt[ j * 40 + 29 ] =  drp[ 29 ];
		wt[ j * 40 + 30 ] =  drp[ 30 ];
		wt[ j * 40 + 31 ] =  drp[ 31 ];
		wt[ j * 40 + 32 ] =  drp[ 32 ];
		wt[ j * 40 + 33 ] =  drp[ 33 ];
		wt[ j * 40 + 34 ] =  drp[ 34 ];
		wt[ j * 40 + 35 ] =  drp[ 35 ];
		wt[ j * 40 + 36 ] =  drp[ 36 ];
		wt[ j * 40 + 37 ] =  drp[ 37 ];
		wt[ j * 40 + 38 ] =  drp[ 38 ];
		wt[ j * 40 + 39 ] =  drp[ 39 ];
	}

	Gsm_Short_Term_Synthesis_Filter_mono( S, LARcr, wt, s );
	Postprocessing_mono(S, s);
}


void Gsm_Decoder_stereo(
	struct gsm_mono_state	* S,

	word		* LARcr,	/* [0..7]		IN	*/

	word		* Ncr,		/* [0..3] 		IN 	*/
	word		* bcr,		/* [0..3]		IN	*/
	word		* Mcr,		/* [0..3] 		IN 	*/
	word		* xmaxcr,	/* [0..3]		IN 	*/
	word		* xMcr,		/* [0..13*4]		IN	*/

	word		* s		/* [0..159]		OUT 	*/
) {
	int		j/*, k*/;
	word		erp[40], wt[160];
	word		* drp = S->dp0 + 120;

	for (j=0; j <= 3; j++, xmaxcr++, bcr++, Ncr++, Mcr++, xMcr += 13) {

		Gsm_RPE_Decoding( S, *xmaxcr, *Mcr, xMcr, erp );
		Gsm_Long_Term_Synthesis_Filtering( S, *Ncr, *bcr, erp, drp );

//		for (k = 0; k <= 39; k++) wt[ j * 40 + k ] =  drp[ k ];
		wt[ j * 40 + 0 ] =  drp[ 0 ];
		wt[ j * 40 + 1 ] =  drp[ 1 ];
		wt[ j * 40 + 2 ] =  drp[ 2 ];
		wt[ j * 40 + 3 ] =  drp[ 3 ];
		wt[ j * 40 + 4 ] =  drp[ 4 ];
		wt[ j * 40 + 5 ] =  drp[ 5 ];
		wt[ j * 40 + 6 ] =  drp[ 6 ];
		wt[ j * 40 + 7 ] =  drp[ 7 ];
		wt[ j * 40 + 8 ] =  drp[ 8 ];
		wt[ j * 40 + 9 ] =  drp[ 9 ];
		wt[ j * 40 + 10 ] =  drp[ 10 ];
		wt[ j * 40 + 11 ] =  drp[ 11 ];
		wt[ j * 40 + 12 ] =  drp[ 12 ];
		wt[ j * 40 + 13 ] =  drp[ 13 ];
		wt[ j * 40 + 14 ] =  drp[ 14 ];
		wt[ j * 40 + 15 ] =  drp[ 15 ];
		wt[ j * 40 + 16 ] =  drp[ 16 ];
		wt[ j * 40 + 17 ] =  drp[ 17 ];
		wt[ j * 40 + 18 ] =  drp[ 18 ];
		wt[ j * 40 + 19 ] =  drp[ 19 ];
		wt[ j * 40 + 20 ] =  drp[ 20 ];
		wt[ j * 40 + 21 ] =  drp[ 21 ];
		wt[ j * 40 + 22 ] =  drp[ 22 ];
		wt[ j * 40 + 23 ] =  drp[ 23 ];
		wt[ j * 40 + 24 ] =  drp[ 24 ];
		wt[ j * 40 + 25 ] =  drp[ 25 ];
		wt[ j * 40 + 26 ] =  drp[ 26 ];
		wt[ j * 40 + 27 ] =  drp[ 27 ];
		wt[ j * 40 + 28 ] =  drp[ 28 ];
		wt[ j * 40 + 29 ] =  drp[ 29 ];
		wt[ j * 40 + 30 ] =  drp[ 30 ];
		wt[ j * 40 + 31 ] =  drp[ 31 ];
		wt[ j * 40 + 32 ] =  drp[ 32 ];
		wt[ j * 40 + 33 ] =  drp[ 33 ];
		wt[ j * 40 + 34 ] =  drp[ 34 ];
		wt[ j * 40 + 35 ] =  drp[ 35 ];
		wt[ j * 40 + 36 ] =  drp[ 36 ];
		wt[ j * 40 + 37 ] =  drp[ 37 ];
		wt[ j * 40 + 38 ] =  drp[ 38 ];
		wt[ j * 40 + 39 ] =  drp[ 39 ];
	}

	Gsm_Short_Term_Synthesis_Filter_stereo( S, LARcr, wt, s );
	Postprocessing_stereo(S, s);
}
