/***************************************************************************
 *
 *  File:        g72x:h723_40.c
 *
 *  Description: g723_40 codec port
 *
 *  Version:     1.0 16 Nov 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *               Modified from source by Sun Microsystems
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include "private.h"

////////////////////////////////////////////////////////////////////////////
// Sun Microsystems' code

/*
 * g723_40.c
 *
 * Description:
 *
 * g723_40_encoder(), g723_40_decoder()
 *
 * These routines comprise an implementation of the CCITT G.723 40Kbps
 * ADPCM coding algorithm.  Essentially, this implementation is identical to
 * the bit level description except for a few deviations which
 * take advantage of workstation attributes, such as hardware 2's
 * complement arithmetic.
 *
 * The deviation from the bit level specification (lookup tables),
 * preserves the bit level performance specifications.
 *
 * As outlined in the G.723 Recommendation, the algorithm is broken
 * down into modules.  Each section of code below is preceded by
 * the name of the module which it is implementing.
 *
 */

/*
 * Maps G.723_40 code word to ructeconstructed scale factor normalized log
 * magnitude values.
 */
static short	_dqlntab[32] = {-2048, -66, 28, 104, 169, 224, 274, 318,
				358, 395, 429, 459, 488, 514, 539, 566,
				566, 539, 514, 488, 459, 429, 395, 358,
				318, 274, 224, 169, 104, 28, -66, -2048};

/* Maps G.723_40 code word to log of scale factor multiplier. */
static short	_witab[32] = {448, 448, 768, 1248, 1280, 1312, 1856, 3200,
			4512, 5728, 7008, 8960, 11456, 14080, 16928, 22272,
			22272, 16928, 14080, 11456, 8960, 7008, 5728, 4512,
			3200, 1856, 1312, 1280, 1248, 768, 448, 448};

/*
 * Maps G.723_40 code words to a set of values whose long and short
 * term averages are computed and then compared to give an indication
 * how stationary (steady state) the signal is.
 */
static short	_fitab[32] = {0, 0, 0, 0, 0, 0x200, 0x200, 0x200,
			0x200, 0x200, 0x400, 0x600, 0x800, 0xA00, 0xC00, 0xC00,
			0xC00, 0xC00, 0xA00, 0x800, 0x600, 0x400, 0x200, 0x200,
			0x200, 0x200, 0x200, 0, 0, 0, 0, 0};

static short qtab_723_40[15] = {-122, -16, 68, 139, 198, 250, 298, 339,
				378, 413, 445, 475, 502, 528, 553};

/*
 * g723_40_encoder()
 *
 * Encodes a 16-bit linear PCM, A-law or u-law input sample and retuens
 * the resulting 5-bit CCITT G.723 40Kbps code.
 * Returns -1 if the input coding value is invalid.
 */
int
g723_40_encoder(
	int		sl,
	struct g72x_state *state_ptr)
{
	short		sei, sezi, se, sez;	/* ACCUM */
	short		d;			/* SUBTA */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dqsez;			/* ADDC */
	short		dq, i;

	sl >>= 2;		/* sl of 14-bit dynamic range */

	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	d = sl - se;			/* d = estimation difference */

	/* quantize prediction difference */
	y = step_size(state_ptr);	/* adaptive quantizer step size */
	i = quantize(d, y, qtab_723_40, 15);	/* i = ADPCM code */

	dq = reconstruct(i & 0x10, _dqlntab[i], y);	/* quantized diff */

	sr = (dq < 0) ? se - (dq & 0x7FFF) : se + dq; /* reconstructed signal */

	dqsez = sr + sez - se;		/* dqsez = pole prediction diff. */

	update(5, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

	return (i);
}

/*
 * g723_40_decoder()
 *
 * Decodes a 5-bit CCITT G.723 40Kbps code and returns
 * the resulting 16-bit linear PCM, A-law or u-law sample value.
 * -1 is returned if the output coding is unknown.
 */
int
g723_40_decoder(
	int		i,
	struct g72x_state *state_ptr)
{
	short		sezi, sei, sez, se;	/* ACCUM */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dq;
	short		dqsez;

	i &= 0x1f;			/* mask to get proper bits */
	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	y = step_size(state_ptr);	/* adaptive quantizer step size */
	dq = reconstruct(i & 0x10, _dqlntab[i], y);	/* estimation diff. */

	sr = (dq < 0) ? (se - (dq & 0x7FFF)) : (se + dq); /* reconst. signal */

	dqsez = sr - se + sez;		/* pole prediction diff. */

	update(5, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

	return (sr << 2);	/* sr was of 14-bit dynamic range */
}


////////////////////////////////////////////////////////////////////////////
// mono initialisation

int g723_40_mono_sizeof () {

    return (sizeof(struct g72x_state));

} // end g723_40_mono_sizeof


////////////////////////////////////////////////////////////////////////////

void g723_40_mono_init (void *state) {

    struct g72x_state *s = (struct g72x_state *) state;
    g72x_init_state(s);

} // end g723_40_mono_init


////////////////////////////////////////////////////////////////////////////
// stereo initialisation

int g723_40_stereo_sizeof () {

    return (sizeof(struct g72x_state_stereo));

} // end g723_40_stereo_sizeof


////////////////////////////////////////////////////////////////////////////

void g723_40_stereo_init (void *state) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;
    g723_40_mono_init(&(s->l));
    g723_40_mono_init(&(s->r));

} // end g723_40_stereo_init


////////////////////////////////////////////////////////////////////////////
// g723_40_mono_coder

void g723_40_mono_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    int temp;
    struct g72x_state *s = (struct g72x_state *) state;

    outdata[0] = g723_40_encoder(indata[0], s);
    temp = g723_40_encoder(indata[1], s);
    outdata[0] |= (temp & 0x7) << 5;
    outdata[1] = temp >> 3;
    outdata[1] |= g723_40_encoder(indata[2], s) << 2;
    temp = g723_40_encoder(indata[3], s);
    outdata[1] |= (temp & 0x1) << 7;
    outdata[2] = temp >> 1;
    temp = g723_40_encoder(indata[4], s);
    outdata[2] |= (temp & 0xf) << 4;
    outdata[3] = temp >> 4;
    outdata[3] |= g723_40_encoder(indata[5], s) << 1;
    temp = g723_40_encoder(indata[6], s);
    outdata[3] |= (temp & 0x3) << 6;
    outdata[4] = temp >> 2;
    outdata[4] |= g723_40_encoder(indata[7], s) << 3;

} // end g723_40_mono_coder


////////////////////////////////////////////////////////////////////////////
// g723_40_stereo_coder

void g723_40_stereo_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    int temp;
    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;

    outdata[0] = g723_40_encoder(indata[0], &(s->l));
    temp = g723_40_encoder(indata[1], &(s->r));
    outdata[0] |= (temp & 0x7) << 5;
    outdata[1] = temp >> 3;
    outdata[1] |= g723_40_encoder(indata[2], &(s->l)) << 2;
    temp = g723_40_encoder(indata[3], &(s->r));
    outdata[1] |= (temp & 0x1) << 7;
    outdata[2] = temp >> 1;
    temp = g723_40_encoder(indata[4], &(s->l));
    outdata[2] |= (temp & 0xf) << 4;
    outdata[3] = temp >> 4;
    outdata[3] |= g723_40_encoder(indata[5], &(s->r)) << 1;
    temp = g723_40_encoder(indata[6], &(s->l));
    outdata[3] |= (temp & 0x3) << 6;
    outdata[4] = temp >> 2;
    outdata[4] |= g723_40_encoder(indata[7], &(s->r)) << 3;
    outdata[5] = g723_40_encoder(indata[8], &(s->l));
    temp = g723_40_encoder(indata[9], &(s->r));
    outdata[5] |= (temp & 0x7) << 5;
    outdata[6] = temp >> 3;
    outdata[6] |= g723_40_encoder(indata[10], &(s->l)) << 2;
    temp = g723_40_encoder(indata[11], &(s->r));
    outdata[6] |= (temp & 0x1) << 7;
    outdata[7] = temp >> 1;
    temp = g723_40_encoder(indata[12], &(s->l));
    outdata[7] |= (temp & 0xf) << 4;
    outdata[8] = temp >> 4;
    outdata[8] |= g723_40_encoder(indata[13], &(s->r)) << 1;
    temp = g723_40_encoder(indata[14], &(s->l));
    outdata[8] |= (temp & 0x3) << 6;
    outdata[9] = temp >> 2;
    outdata[9] |= g723_40_encoder(indata[15], &(s->r)) << 3;

} // end g723_40_mono_coder


////////////////////////////////////////////////////////////////////////////
// g723_40_mono_decoder

int g723_40_mono_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    int temp;
    struct g72x_state *s = (struct g72x_state *) state;

    outdata[0] = g723_40_decoder(indata[0] & 0x1f, s);
    temp = (indata[0]>>5) + ((indata[1]&0x3)<<3);
    outdata[1] = g723_40_decoder(temp, s);
    outdata[2] = g723_40_decoder((indata[1]&0x7c)>>2, s);
    temp = ((indata[1]&0x80)>>7) + ((indata[2]&0xf)<<1);
    outdata[3] = g723_40_decoder(temp, s);
    temp = ((indata[2]&0xf0)>>4) + ((indata[3]&0x1)<<4);
    outdata[4] = g723_40_decoder(temp, s);
    outdata[5] = g723_40_decoder((indata[3]&0x3e)>>1, s);
    temp = ((indata[3]&0xc0)>>6) + ((indata[4]&0x7)<<2);
    outdata[6] = g723_40_decoder(temp, s);
    outdata[7] = g723_40_decoder((indata[4]&0xf8)>>3, s);

    return 0;

} // end g723_40_mono_coder


////////////////////////////////////////////////////////////////////////////
// g723_40_stereo_decoder

int g723_40_stereo_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    int temp;
    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;

    outdata[0] = g723_40_decoder(indata[0] & 0x1f, &(s->l));
    temp = (indata[0]>>5) + ((indata[1]&0x3)<<3);
    outdata[1] = g723_40_decoder(temp, &(s->r));
    outdata[2] = g723_40_decoder((indata[1]&0x7c)>>2, &(s->l));
    temp = ((indata[1]&0x80)>>7) + ((indata[2]&0xf)<<1);
    outdata[3] = g723_40_decoder(temp, &(s->r));
    temp = ((indata[2]&0xf0)>>4) + ((indata[3]&0x1)<<4);
    outdata[4] = g723_40_decoder(temp, &(s->l));
    outdata[5] = g723_40_decoder((indata[3]&0x3e)>>1, &(s->r));
    temp = ((indata[3]&0xc0)>>6) + ((indata[4]&0x7)<<2);
    outdata[6] = g723_40_decoder(temp, &(s->l));
    outdata[7] = g723_40_decoder((indata[4]&0xf8)>>3, &(s->r));

    outdata[8] = g723_40_decoder(indata[5] & 0x1f, &(s->l));
    temp = (indata[5]>>5) + ((indata[6]&0x3)<<3);
    outdata[9] = g723_40_decoder(temp, &(s->r));
    outdata[10] = g723_40_decoder((indata[6]&0x7c)>>2, &(s->l));
    temp = ((indata[6]&0x80)>>7) + ((indata[7]&0xf)<<1);
    outdata[11] = g723_40_decoder(temp, &(s->r));
    temp = ((indata[7]&0xf0)>>4) + ((indata[8]&0x1)<<4);
    outdata[12] = g723_40_decoder(temp, &(s->l));
    outdata[13] = g723_40_decoder((indata[8]&0x3e)>>1, &(s->r));
    temp = ((indata[8]&0xc0)>>6) + ((indata[9]&0x7)<<2);
    outdata[14] = g723_40_decoder(temp, &(s->l));
    outdata[15] = g723_40_decoder((indata[9]&0xf8)>>3, &(s->r));

    return 0;

} // end g723_40_mono_coder


////////////////////////////////////////////////////////////////////////////
