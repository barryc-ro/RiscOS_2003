;**************************************************************************
;
;  File:        s.DecdBody
;
;  Description: Assembler veneer code body for Acorn Replay sound decomprssr
;               g723_40 version
;
;  Version:     1.0 11 Nov 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************

; requires stereo to be defined

	ASSERT	:DEF: stereo

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	EXPORT	|decode_init1|
	EXPORT	|decode_init2|
	EXPORT	|decode_decompress|

;**************************************************************************
;* Set up functions to call

	GBLS	SIZEOF
	GBLS	INIT
	GBLS	DECODER
	GBLA	DFS			; frame size (samples)
	GBLA	M_DFS			; frame size per channel
	GBLA	CFS			; compressed frame size (bytes)
	[ :LNOT: stereo
	IMPORT	|g723_40_mono_decoder|	; decode samples in g723_40 format
	IMPORT	|g723_40_mono_sizeof|	; find size of necessary workspace
	IMPORT	|g723_40_mono_init|	; initialise workspace
SIZEOF	SETS	"g723_40_mono_sizeof"
INIT	SETS	"g723_40_mono_init"
DECODER	SETS	"g723_40_mono_decoder"
DFS	SETA	8
M_DFS	SETA	8
CFS	SETA	5
	]
	[ stereo
	IMPORT	|g723_40_stereo_decoder|; decode samples in g723_40 format
	IMPORT	|g723_40_stereo_sizeof|	; find size of necessary workspace
	IMPORT	|g723_40_stereo_init|	; initialise workspace
SIZEOF	SETS	"g723_40_stereo_sizeof"
INIT	SETS	"g723_40_stereo_init"
DECODER	SETS	"g723_40_stereo_decoder"
DFS	SETA	8*2
M_DFS	SETA	8
CFS	SETA	5*2
	]

;**************************************************************************
;* Main code body
;**************************************************************************

;**************************************************************************
;* Initialisation

decode_init1
	; initialise for encoding
	;   on entry:
	;     r0: sample frequency in Hz for information
	;     r1: (parameter string; ignored)
        ;   returns
        ;     r0: workspace size required
	;     r1: zero or pointer to error block
	;     r2: frame size of compression type

        str     lr, [r13, #-4]!

	str	r0, sampleHz		; record the sample rate

	bl	$SIZEOF			; workspace size returned in r0
	mov	r1, #0			; no error
	mov	r2, #$M_DFS		; frame size per channel

        ldr     pc, [r13], #4

;**************************************************************************

decode_init2
	; initialise workspace
	;   on entry
	;     r0: sample frequency in Hz for information
	;     r1: pointer to workspace
	;     r2: size of workspace
	;   returns
	;     r0: either 0 or pointer to error block

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	; check workspace size
	; ???

	mov	r0, r1			; copy workspace pointer
	bl	$INIT			; initialise workspace

	mov	r0, #0			; return success
        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(

;**************************************************************************
;* Compression
;**************************************************************************

decode_decompress
	; compress a frame
	;   on entry
	;     r0: current bit offset in input buffer (updated on exit)
	;     r1: pointer to input buffer
	;     r2: number of samples (usually the input frame sample size)
	;     r3: pointer to output samples
	;     r4: pointer to workspace
	;     r5: true (non zero) if frame is start of chunk,
	;         false otherwise
	;   returns
	;     r0: new current bit offset in output buffer ???????????????
	;     r1: either 0 or pointer to error block ????????????????????
	;     r2: actual number of samples produced

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	mov 	r6, r0, LSR#3		; convert bit offset to byte offset
					; we can assume for this codec that
					; that it will be on a byte boundary

	; prepare registers for call to |g723_40_X_decoder|

	add	r0, r1, r6		; calculate source address
	mov	r1, r3			; dest ptr
	mov	r2, r4			; workspace

	; for |g723_40_decode| entry
	;   r0 = g723_40 data frame pointer
	;   r1 = output sample buffer
	;   r2 = pointer to workspace

	bl	$DECODER

	; calculate return values
					; calculate new bit offset to return
	add	r0, r6, #CFS		; by adding 33 to orignal byte count
	mov	r0, r0, LSL#3		; and converting it to bits

	mov	r1, #0			; assume success
	mov	r2, #DFS		; number of samples produced

        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(

;**************************************************************************
;* The data area
;**************************************************************************

sampleHz
	DCD	0;			; sample rate given to init1

;**************************************************************************
;* End of file
;**************************************************************************

	END
