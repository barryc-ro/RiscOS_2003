;**************************************************************************
;
;  File:        s.EncdBody
;
;  Description: Assembler veneer code body for Acorn Replay sound compressor
;               MPEG layer II version
;
;  Version:     0.0 6 Jan 1998
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************

; requires stereo to be defined

	ASSERT	:DEF: stereo

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	EXPORT	|encode_init1|
	EXPORT	|encode_init2|
	EXPORT	|encode_compress|

;**************************************************************************
;* Set up functions to call

	GBLS	ENTRY0
	GBLS	SIZEOF
	GBLS	CODER
	GBLS	RESET
	[ :LNOT: stereo
	IMPORT	|mpeg_mono_entry0|	; initialise MPEG encoder
	IMPORT	|mpeg_mono_framesize|	; returns framesize
	IMPORT	|mpeg_reset|		; reset the MPEG coder
	IMPORT	|mpeg_coder|		; encode samples into MPEG stream
SIZEOF	SETS	"mpeg_mono_framesize"
ENTRY0	SETS	"mpeg_mono_entry0"
CODER	SETS	"mpeg_coder"
RESET	SETS	"mpeg_reset"
	!	0, "MPEG mono encoder"
	]
	[ stereo
	IMPORT	|mpeg_stereo_entry0|	; initialise MPEG encoder
	IMPORT	|mpeg_stereo_framesize|	; returns framesize
	IMPORT	|mpeg_reset|		; reset the MPEG coder
	IMPORT	|mpeg_coder|		; encode samples into MPEG stream
SIZEOF	SETS	"mpeg_stereo_framesize"
ENTRY0	SETS	"mpeg_stereo_entry0"
CODER	SETS	"mpeg_coder"
RESET	SETS	"mpeg_reset"
	!	0, "MPEG stereo encoder"
	]

;**************************************************************************
;* Main code body
;**************************************************************************

;**************************************************************************
;* Initialisation

encode_init1
	; initialise for encoding
	;   on entry:
	;     r0: sample frequency in Hz for information
	;     r1: zero if no parameter string
	;         or pointer to parameter string, null terminated
        ;   returns
        ;     r0: workspace size required
	;     r1: zero or pointer to error block
	;     r2: frame size of compression type

        str     lr, [r13, #-4]!

	str	r0, sampleHz		; record the sample rate

	mov	r2, #2			; layer II
	bl	$ENTRY0			; initialise
	cmp	r0, #0
	movne	r1, r0			; move error to r1 and return
        ldrne   pc, [r13], #4

	; therefore must have been a good parameter string

	bl	$SIZEOF			; frame size returned in r0
	str	r0, frameSize		; store the frame size

	mov	r2, r0			; frame size
	mov	r1, #0			; no error
	mov	r0, #0			; no workspace required

        ldr     pc, [r13], #4


;**************************************************************************

encode_init2
	; initialise workspace
	;   on entry
	;     r0: sample frequency in Hz for information
	;     r1: pointer to workspace
	;     r2: size of workspace
	;   returns
	;     r0: either 0 or pointer to error block

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	bl	$RESET			; initialise

	mov	r0, #0			; return success
        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(


;**************************************************************************
;* Compression
;**************************************************************************

encode_compress
	; compress a frame
	;   on entry
	;     r0: current bit offset in output buffer (updated on exit)
	;     r1: pointer to output buffer
	;     r2: number of samples (usually the input frame sample size)
	;     r3: pointer to samples
	;     r4: pointer to workspace **invalid for this codec**
	;     r5: true (non zero) if frame is start of chunk, (add workspace)
	;         false otherwise
	;   returns
	;     r0: new current bit offset in output buffer
	;     r1: either 0 or pointer to error block
	;     r2: number of samples actually encoded per channel

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	mov 	r6, r0, LSR#3		; convert bit offset to byte offset
					; we can assume for this codec that
					; that it will be on a byte boundary

	; prepare registers for call to |mpeg_coder|

	mov	r0, r3			; src ptr
	add	r1, r1, r6		; dest ptr

	; for |mpeg_coder| entry
	;   r0 = source samples pointer
	;   r1 = pointer to destination
	; exit
	;   r0 = no bytes produced
	;
	; the function consumes frameSize 16-bit words and produces a
	;   varible length of bytes of mono mpeg bitstream

	bl	$CODER

	; calculate return values
					; calculate new bit offset to return
	add	r0, r0, r6		; by adding CFS to orignal byte count
	mov	r0, r0, LSL#3		; and converting it to bits

	mov	r1, #0			; assume success
	ldr	r2, frameSize

        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(


;**************************************************************************
;* The data area
;**************************************************************************

sampleHz
	DCD	0;			; sample rate given to init1
frameSize
	DCD	0;			; frame size from entry0

;**************************************************************************
;* The error blocks
;**************************************************************************

;error_wrongFrequency
;	DCD	0;			; error number
;	DCB	"Incorrect GSM sample rate; should be 8000 Hz", 0
;					; error message
;	ALIGN

;**************************************************************************
;* End of file
;**************************************************************************

	END
