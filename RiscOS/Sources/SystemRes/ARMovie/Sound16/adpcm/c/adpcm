/***************************************************************************
 *
 *  File:        ADPCM:adpcm.c
 *
 *  Description: ADPCM codec C implementation
 *
 *  Version:     1.0 19 Aug 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.co.uk)
 *               Passed on from srose
 *               From an algorithm passed on from Mark Taunton
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *    See adpcm.h file for details
 *    19 Aug 1997  Pete Goodliffe        adpcm_decoder now returns value
 *    10 Sep 1997  Pete Goodliffe        Altered 'Output last step,if needed'
 *                                       section of adpcm_coder's condition
 *                                       to 'bufferstep' set (correct way)
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "adpcm.h"

////////////////////////////////////////////////////////////////////////////
// Static data tables

static int indexTable[16] = {
    -1, -1, -1, -1, 2, 4, 6, 8,
    -1, -1, -1, -1, 2, 4, 6, 8,
};

static int stepsizeTable[89] = {
    7, 8, 9, 10, 11, 12, 13, 14, 16, 17,
    19, 21, 23, 25, 28, 31, 34, 37, 41, 45,
    50, 55, 60, 66, 73, 80, 88, 97, 107, 118,
    130, 143, 157, 173, 190, 209, 230, 253, 279, 307,
    337, 371, 408, 449, 494, 544, 598, 658, 724, 796,
    876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,
    2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,
    5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,
    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767
};

// returns the size of input consumed
//extern int adpcm_decoder (
//    unsigned char indata[],          // ptr to input data: ADPCM char stream
//    short outdata[],                 // ptr to output buffer: sign 16 bit lin
//    int len,                         // no samples
//    struct adpcm_mono_state *state,  // decoder state structure
//    int chanpos,                     // which channel mono:0 stereo:0,1
//    int nchan                        // number of channels (mono:1 stereo:2)
//);

////////////////////////////////////////////////////////////////////////////
// adpcm_[mono|stereo]_sizeof()
//     Requires:
//     Behaviour: returns the size of workspace needed by an ADPCM pass

int adpcm_mono_sizeof() {
    return sizeof(struct adpcm_mono_state);
} // end adpcm_mono_sizeof

int adpcm_stereo_sizeof() {
    return sizeof(struct adpcm_stereo_state);
} // end adpcm_stereo_sizeof


////////////////////////////////////////////////////////////////////////////
// adpcm_[mono|stereo]_init()
//     Requires:
//     Behaviour: initialises the (correct amount of) workspace

void adpcm_mono_init(struct adpcm_mono_state *state) {
    state->valprev = 0;
    state->index = 0;
} // end adpcm_mono_init


void adpcm_stereo_init(struct adpcm_stereo_state *state) {
    state->valprev_l = 0;
    state->index_l   = 0;
    state->valprev_r = 0;
    state->index_r   = 0;
} // end adpcm_mono_init


////////////////////////////////////////////////////////////////////////////
// adpcm_mono_decoder()
//     Requires:
//     Behaviour: acts as simple veneer onto adpcm_decoder for a mono version
//                This is in order to be easily called from a m/c routine
//                (needs max of 4 parameters for simplicity!)

int adpcm_mono_decoder(
    unsigned char indata[],        // ptr to input data: ADPCM char stream
    short outdata[],               // ptr to output buffer: sign 16 bit lin
    int len,                       // no samples
    struct adpcm_mono_state *state // decoder state structure
) {

    short *outp;                // output buffer pointer
    int valprev;                // virtual previous output value
    int index;                  // Current step change index

    int startpos = 0;
    int pos = 0;

    outp = outdata;

    valprev = state->valprev;
    index = state->index;

    for ( ; len > 0 ; len-- ) {

        /* Step 1 - get the delta value */
        int delta = (indata[pos>>1] >> ((pos & 1) * 4)) & 0xF;
                                                // Current adpcm output value
        int step = stepsizeTable[index];
        int vpdiff;
        pos++;

        /* Step 2 - Find new index value (for later) */
        index += indexTable[delta];
        if (index < 0) index = 0;
        if (index > 88) index = 88;

        /* Step 4 - Compute difference and new predicted value */
        /*
        ** Computes 'vpdiff = (delta+0.5)*step/4', but see comment
        ** in adpcm_coder.
        */
        vpdiff = step >> 3;
        if (delta & 4) vpdiff += step;
        if (delta & 2) vpdiff += step>>1;
        if (delta & 1) vpdiff += step>>2;

        if (delta & 8)
          valprev -= vpdiff;
        else
          valprev += vpdiff;

        /* Step 5 - clamp output value */
        if (valprev > 32767) valprev = 32767;
        else if (valprev < -32768) valprev = -32768;

        /* Step 7 - Output value */
        if (outp) {
            *outp = valprev;
            outp++;
        }

    } // end for

    state->valprev = valprev;
    state->index = index;

    return pos-startpos;

} // end adpcm_mono_decoder


////////////////////////////////////////////////////////////////////////////
// adpcm_stereo_decoder()
//     Requires:
//     Behaviour: acts as simple veneer onto adpcm_decoder for a mono version
//                This is in order to be easily called from a m/c routine
//                (needs max of 4 parameters for simplicity!)

int adpcm_stereo_decoder(
    unsigned char indata[],        // ptr to input data: ADPCM char stream
    short outdata[],               // ptr to output buffer: sign 16 bit lin
    int len,                       // no samples
    struct adpcm_stereo_state *state // decoder state structure
) {

//  return adpcm_mono_decoder(indata, outdata, len*2, (struct adpcm_mono_state *) state);

    short *outp;                // output buffer pointer
    int valprev_l;              // virtual previous output value - left
    int index_l;                // Current step change index     - left
    int valprev_r;              // virtual previous output value - right
    int index_r;                // Current step change index     - right

    int startpos = 0;
    int pos = 0;

    outp = outdata;

    valprev_l = state->valprev_l;
    index_l = state->index_l;
    valprev_r = state->valprev_r;
    index_r = state->index_r;

    for ( ; len > 0 ; len-- ) {

        ////////////////////////////////////////////////////////////////////
        // L E F T   C H A N N E L

        /* Step 1 - get the delta value */
        int delta = (indata[pos>>1] >> ((pos & 1) * 4)) & 0xF;
                                                // Current adpcm output value
        int step = stepsizeTable[index_l];
        int vpdiff;
        pos++;

        /* Step 2 - Find new index value (for later) */
        index_l += indexTable[delta];
        if (index_l < 0) index_l = 0;
        if (index_l > 88) index_l = 88;

        /* Step 4 - Compute difference and new predicted value */
        /*
        ** Computes 'vpdiff = (delta+0.5)*step/4', but see comment
        ** in adpcm_coder.
        */
        vpdiff = step >> 3;
        if (delta & 4) vpdiff += step;
        if (delta & 2) vpdiff += step>>1;
        if (delta & 1) vpdiff += step>>2;

        if (delta & 8)
          valprev_l -= vpdiff;
        else
          valprev_l += vpdiff;

        /* Step 5 - clamp output value */
        if (valprev_l > 32767) valprev_l = 32767;
        else if (valprev_l < -32768) valprev_l = -32768;

        /* Step 7 - Output value */
        if (outp) {
            *outp = valprev_l;
            outp++;
        }

        ////////////////////////////////////////////////////////////////////
        // R I G H T   C H A N N E L

        /* Step 1 - get the delta value */
        delta = (indata[pos>>1] >> ((pos & 1) * 4)) & 0xF;
                                                // Current adpcm output value
        step = stepsizeTable[index_r];
        pos++;

        /* Step 2 - Find new index value (for later) */
        index_r += indexTable[delta];
        if (index_r < 0) index_r = 0;
        if (index_r > 88) index_r = 88;

        /* Step 4 - Compute difference and new predicted value */
        /*
        ** Computes 'vpdiff = (delta+0.5)*step/4', but see comment
        ** in adpcm_coder.
        */
        vpdiff = step >> 3;
        if (delta & 4) vpdiff += step;
        if (delta & 2) vpdiff += step>>1;
        if (delta & 1) vpdiff += step>>2;

        if (delta & 8)
          valprev_r -= vpdiff;
        else
          valprev_r += vpdiff;

        /* Step 5 - clamp output value */
        if (valprev_r > 32767) valprev_r = 32767;
        else if (valprev_r < -32768) valprev_r = -32768;
//valprev_r = valprev_l;pos++;

        /* Step 7 - Output value */
        if (outp) {
            *outp = valprev_r;
            outp++;
        }

    } // end for

    state->valprev_l = valprev_l;
    state->index_l   = index_l;
    state->valprev_r = valprev_r;
    state->index_r   = index_r;

    return pos-startpos;

} // end adpcm_mono_decoder


////////////////////////////////////////////////////////////////////////////
// adpcm_mono_coder()
//     Requires:
//     Behaviour: compresses audio data in input buffer to output buffer,
//                leaves input buffer unmodified, updates state structure
//                and returns the size of output created in bytes

int adpcm_mono_coder(
    short indata[],
    unsigned char outdata[],
    int len,
    struct adpcm_mono_state *state
) {

    short *inp;                       // Input buffer pointer
    unsigned char *outp;              // output buffer pointer
    int val;                          // Current input sample value
    int sign;                         // Current adpcm sign bit
    int delta;                        // Current adpcm output value
    int diff;                         // Difference between val and valprev
    int step;                         // Stepsize
    int valprev;                      // virtual previous output value
    int vpdiff;                       // Current change to valprev
    int index;                        // Current step change index
    int outputbuffer;                 // place to keep previous 4-bit value
    int bufferstep;                   // toggle between outputbuffer/output

    outp = outdata;
    inp = indata;

    valprev = state->valprev;
    index = state->index;

    step = stepsizeTable[index];

    bufferstep = 0;

    for ( ; len > 0 ; len-- ) {

        val = *inp++;

        /* Step 1 - compute difference with previous value */
        diff = val - valprev;
        sign = (diff < 0) ? 8 : 0;
        if ( sign ) diff = (-diff);

        /* Step 2 - Divide and clamp */
        /* Note:
        ** This code *approximately* computes:
        **    delta = diff*4/step;
        **    vpdiff = (delta+0.5)*step/4;
        ** but in shift step bits are dropped. The net result of this is
        ** that even if you have fast mul/div hardware you cannot put it to
        ** good use since the fixup would be too expensive.
        */
        delta = 0;
        vpdiff = (step >> 3);

        if ( diff >= step ) {
            delta = 4;
            diff -= step;
            vpdiff += step;
        }
        step >>= 1;
        if ( diff >= step  ) {
            delta |= 2;
            diff -= step;
            vpdiff += step;
        }
        step >>= 1;
        if ( diff >= step ) {
            delta |= 1;
            vpdiff += step;
        }

        /* Step 3 - Update previous value */
        if ( sign )
          valprev -= vpdiff;
        else
          valprev += vpdiff;

        /* Step 4 - Clamp previous value to 16 bits */
        if ( valprev > 32767 )
          valprev = 32767;
        else if ( valprev < -32768 )
          valprev = -32768;

        /* Step 5 - Assemble value, update index and step values */
        delta |= sign;

        index += indexTable[delta];
        if ( index < 0 ) index = 0;
        if ( index > 88 ) index = 88;
        step = stepsizeTable[index];

        /* Step 6 - Output value */
        if ( !bufferstep )
            outputbuffer = delta;        /* must be in range 0..15 */
        else
            *outp++ = delta << 4 | outputbuffer;
        bufferstep ^= 1;

    } // end for each sample in input buffer

    /* Output last step, if needed */
    if ( bufferstep ) *outp++ = outputbuffer;

    state->valprev = valprev;
    state->index = index;

    return (outp-outdata);

} // end adpcm_mono_coder


////////////////////////////////////////////////////////////////////////////
// adpcm_stereo_coder()
//     Requires:
//     Behaviour: compresses audio data in input buffer to output buffer,
//                leaves input buffer unmodified, updates state structure
//                and returns the size of output created in bytes

int adpcm_stereo_coder(
    short indata[],
    unsigned char outdata[],
    int len,
    struct adpcm_stereo_state *state
) {

//    return adpcm_mono_coder(indata, outdata, len*2, (struct adpcm_mono_state*) state);

    short *inp;                       // Input buffer pointer
    unsigned char *outp;              // output buffer pointer
    int step_l;                       // Stepsize
    int step_r;                       // Stepsize
    int valprev_l;                    // virtual previous output value
    int valprev_r;                    // virtual previous output value
    int index_l;                      // Current step change index
    int index_r;                      // Current step change index
    int tempvalue;                    // store left value whilst making right

    outp = outdata;
    inp  = indata;

    valprev_l = state->valprev_l;
    index_l   = state->index_l;
    valprev_r = state->valprev_r;
    index_r   = state->index_r;

    step_l = stepsizeTable[index_l];
    step_r = stepsizeTable[index_r];

    for ( ; len > 0 ; len-- ) {

        ////////////////////////////////////////////////////////////////////
        // L E F T   C H A N N E L

        int val = *inp++;

        /* Step 1 - compute difference with previous value */
        int diff = val - valprev_l;
        int sign = (diff < 0) ? 8 : 0;  // current sign bit
        int delta = 0;
        int vpdiff;                     // Current change to valprev
        if (sign) diff = -diff;

        /* Step 2 - Divide and clamp */
        /* Note:
        ** This code *approximately* computes:
        **    delta = diff*4/step;
        **    vpdiff = (delta+0.5)*step/4;
        ** but in shift step bits are dropped. The net result of this is
        ** that even if you have fast mul/div hardware you cannot put it
        ** to good use since the fixup would be too expensive.
        */
        vpdiff = (step_l >> 3);

        if (diff >= step_l) {
            delta = 4;
            diff -= step_l;
            vpdiff += step_l;
        }
        step_l >>= 1;
        if (diff >= step_l) {
            delta |= 2;
            diff -= step_l;
            vpdiff += step_l;
        }
        step_l >>= 1;
        if (diff >= step_l) {
            delta |= 1;
            vpdiff += step_l;
        }

        /* Step 3 - Update previous value */
        if (sign)
            valprev_l -= vpdiff;
        else
            valprev_l += vpdiff;

        /* Step 4 - Clamp previous value to 16 bits */
        if (valprev_l > 32767)
            valprev_l = 32767;
        else if (valprev_l < -32768)
            valprev_l = -32768;

        /* Step 5 - Assemble value, update index and step values */
        delta |= sign;

        index_l += indexTable[delta];
        if (index_l < 0)  index_l = 0;
        if (index_l > 88) index_l = 88;
        step_l = stepsizeTable[index_l];

        /* Step 6 - Output value */
        tempvalue = delta;                 // must be in range 0..15

        ////////////////////////////////////////////////////////////////////
        // R I G H T   C H A N N E L

        val = *inp++;

        /* Step 1 - compute difference with previous value */
        diff = val - valprev_r;
        sign = (diff < 0) ? 8 : 0;
        if (sign) diff = -diff;

        /* Step 2 - Divide and clamp */
        /* Note:
        ** This code *approximately* computes:
        **    delta = diff*4/step;
        **    vpdiff = (delta+0.5)*step/4;
        ** but in shift step bits are dropped. The net result of this is
        ** that even if you have fast mul/div hardware you cannot put it
        ** to good use since the fixup would be too expensive.
        */
        delta = 0;
        vpdiff = (step_r >> 3);

        if (diff >= step_r) {
            delta = 4;
            diff -= step_r;
            vpdiff += step_r;
        }
        step_r >>= 1;
        if (diff >= step_r) {
            delta |= 2;
            diff -= step_r;
            vpdiff += step_r;
        }
        step_r >>= 1;
        if (diff >= step_r) {
            delta |= 1;
            vpdiff += step_r;
        }

        /* Step 3 - Update previous value */
        if (sign)
            valprev_r -= vpdiff;
        else
            valprev_r += vpdiff;

        /* Step 4 - Clamp previous value to 16 bits */
        if (valprev_r > 32767)
            valprev_r = 32767;
        else if (valprev_r < -32768)
            valprev_r = -32768;

        /* Step 5 - Assemble value, update index and step values */
        delta |= sign;

        index_r += indexTable[delta];
        if (index_r < 0)  index_r = 0;
        if (index_r > 88) index_r = 88;
        step_r = stepsizeTable[index_r];

        /* Step 6 - Output value */
        *outp++ = delta << 4 | tempvalue;

    } // end for each sample in input buffer

    state->valprev_l = valprev_l;
    state->index_l   = index_l;
    state->valprev_r = valprev_r;
    state->index_r   = index_r;

    return (outp-outdata);

} // end adpcm_stereo_coder


////////////////////////////////////////////////////////////////////////////
// adpcm_decoder()
//     Requires:
//     Behaviour:

//int adpcm_decoder (
//    unsigned char indata[],
//    short outdata[],
//    int len,
//    struct adpcm_mono_state *state,
//    int chanpos,
//    int nchan
//) {
//
//    short *outp;                // output buffer pointer
//    int valprev;                // virtual previous output value
//    int index;                        // Current step change index
//    int orig_chanpos;           // the original chanpos value
//
//    orig_chanpos = chanpos;
//
//    outp = outdata;
//
//    valprev = state->valprev;
//    index = state->index;
//
//    for ( ; len > 0 ; len-- ) {
//
//        /* Step 1 - get the delta value */
//        int delta = (indata[chanpos>>1] >> ((chanpos & 1) * 4)) & 0xF;
//                                                // Current adpcm output value
//        int step = stepsizeTable[index];
//        int vpdiff;
//        chanpos += nchan;
//
//        /* Step 2 - Find new index value (for later) */
//        index += indexTable[delta];
//        if ( index < 0 ) index = 0;
//        if ( index > 88 ) index = 88;
//
//        /* Step 4 - Compute difference and new predicted value */
//        /*
//        ** Computes 'vpdiff = (delta+0.5)*step/4', but see comment
//        ** in adpcm_coder.
//        */
//        vpdiff = step >> 3;
//        if ( delta & 4 ) vpdiff += step;
//        if ( delta & 2 ) vpdiff += step>>1;
//        if ( delta & 1 ) vpdiff += step>>2;
//
//        if ( delta & 8 )
//          valprev -= vpdiff;
//        else
//          valprev += vpdiff;
//
//        /* Step 5 - clamp output value */
//        if ( valprev > 32767 ) valprev = 32767;
//        else if ( valprev < -32768 ) valprev = -32768;
//
//        /* Step 7 - Output value */
//        if (outp) {
//            *outp = valprev;
//            outp += nchan;
//        }
//
//    } // end for
//
//    state->valprev = valprev;
//    state->index = index;
//
//    return chanpos-orig_chanpos;
//
//} // end adpcm_decoder
