;**************************************************************************
;
;  File:        s.EncdBody
;
;  Description: Assembler veneer code body for Acorn Replay sound compressor
;
;  Version:     0.0 1 Oct 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;    1 Oct 1997   Pete Goodliffe        Encode->EncdBody requiring stereo
;                                       to be predefined; stereo code added
;
;**************************************************************************

; requires stereo to be redefined

	ASSERT	:DEF: stereo

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	EXPORT	|encode_init1|
	EXPORT	|encode_init2|
	EXPORT	|encode_compress|

;**************************************************************************
;* Set up functions to call

	GBLS	SIZEOF
	GBLS	INIT
	GBLS	CODER
	GBLA	M_CFS			; compressed frame size per channel
	[ :LNOT: stereo
	IMPORT	|adpcm_mono_coder|	; encode samples in ADPCM format
	IMPORT	|adpcm_mono_sizeof|	; find size of necessary workspace
	IMPORT	|adpcm_mono_init|	; initialise workspace
SIZEOF	SETS	"adpcm_mono_sizeof"
INIT	SETS	"adpcm_mono_init"
CODER	SETS	"adpcm_mono_coder"
M_CFS	SETA	2
	]
	[ stereo
	IMPORT	|adpcm_stereo_coder|	; encode samples in ADPCM format
	IMPORT	|adpcm_stereo_sizeof|	; find size of necessary workspace
	IMPORT	|adpcm_stereo_init|	; initialise workspace
SIZEOF	SETS	"adpcm_stereo_sizeof"
INIT	SETS	"adpcm_stereo_init"
CODER	SETS	"adpcm_stereo_coder"
M_CFS	SETA	2
	]

;**************************************************************************
;* Main code body
;**************************************************************************

;**************************************************************************
;* Initialisation

encode_init1
	; initialise for encoding
	;   on entry:
	;     r0: sample frequency in Hz for information
	;     r1: (parameter string; ignored)
        ;   returns
        ;     r0: workspace size required

        str     lr, [r13, #-4]!

	str	r0, sampleHz		; record the sample rate

	bl	$SIZEOF			; workspace size returned in r0
	mov	r1, #0			; no error
	mov	r2, #$M_CFS		; frame size per channel

        ldr     pc, [r13], #4


;**************************************************************************

encode_init2
	; initialise workspace
	;   on entry
	;     r0: sample frequency in Hz for information
	;     r1: pointer to workspace
	;     r2: size of workspace
	;   returns
	;     r0: either 0 or pointer to error block
	;     r1: zero or pointer to error block
	;     r2: frame size of compression type

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	; test sample rate
	; we don't care about it

	; check workspace size
	; ???

	mov	r0, r1			; copy workspace pointer
	bl	$INIT			; initialise workspace

	mov	r0, #0			; return success
        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(


;**************************************************************************
;* Compression
;**************************************************************************

encode_compress
	; compress a frame
	;   on entry
	;     r0: current bit offset in output buffer (updated on exit)
	;     r1: pointer to output buffer
	;     r2: number of samples (usually the input frame sample size)
	;     r3: pointer to samples
	;     r4: pointer to workspace
	;     r5: true (non zero) if frame is start of chunk, (add workspace)
	;         false otherwise
	;   returns
	;     r0: new current bit offset in output buffer
	;     r1: either 0 or pointer to error block
	;     r2: number of samples actually encoded

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	mov 	r6, r0, LSR#3		; convert bit offset to byte offset
					; we can assume for this codec that
					; that it will be on a byte boundary

	mov	r7, r2			; store number of samples for later

	; if at start of chunk, first produce a copy of the workspace

	cmp	r5, #0
	beq	chunkStart_end
	stmfd	r13!, {r1-r12}
	bl	$SIZEOF			; let r0 = ws size == loop counter
	ldmfd	r13!, {r1-r12}
	add	r5, r1, r6		; let r5 = address of destination
	add	r6, r6, r0		; update byte offset
	mov	r8, r4			; let r8 = address of source
loop	ldr	r9, [r8], #4
	str	r9, [r5], #4
	subs	r0, r0, #4
	bgt	loop
chunkStart_end

	; prepare registers for call to |adpcm_encoder|

	mov	r0, r3			; input data pointer
	add	r1, r1, r6		; output buffer pointer
					; r2 contains no samples
	mov	r3, r4			; workspace

	; for |adpcm_coder| entry
	;   r0 = pointer to input data
	;   r1 = pointer to output buffer
	;   r2 = no of samples
	;   r3 = workspace
	; returns
	;   r0 = size of output
	;
	; the function consumes r2 16-bit words
	;   it preserves r4-r9

	bl	$CODER

	; calculate return values
					; calculate new bit offset to return
	add	r0, r0, r6		; by adding size of output produced
	mov	r0, r0, LSL#3		; and converting it to bits

	mov	r1, #0			; assume success
	mov	r2, r7			; number of samples encoded

        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(


;**************************************************************************
;* The data area
;**************************************************************************

sampleHz
	DCD	0;			; sample rate given to init1

;**************************************************************************
;* End of file
;**************************************************************************

	END
