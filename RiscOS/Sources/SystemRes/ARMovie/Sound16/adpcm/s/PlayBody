;**************************************************************************
;
;  File:        s.Decompress.adpcm_2
;
;  Description: Type 2 ADPCM decompression bobbins using C library code
;
;  Version:     0.0 29 Sep 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point
	IMPORT	|adpcm_mono_decoder|	; from ADPCM library
	IMPORT	|adpcm_stereo_decoder|	; from ADPCM library
	IMPORT	|__RelocCode|		; reloc code from module linkage


;**************************************************************************
; adpcm decompression code

decompress

	; adpcm decoding
	; IN:  r0 = Source
	;      r1 = Length of source in bytes
	;      r3 = Destination
	; OUT: r1 = length of output produced in bytes
	;      all registers preserved

	stmdb	r13!, {r14}
	stmdb	r13!, {r0-r12}

	ldr	r4, hasinit		; relocation initalisation
	cmp	r4, #0
	beq	init
init_ret

	[ :LNOT: stereo

	;******************************************************************
	; mono version

	; use the beginning of sound data as the ADPCM state structure
	; since a copy of it is prepended to the sound data

	mov	r4, r0				; store input
	mov	r5, r1
	mov	r6, r3

	add	r0, r4, #4			; input data
	mov	r1, r6				; output buffer
	mov	r2, r5, LSL #1			; no samples (noBytes*2)
	mov	r3, r4				; state structure

	; |adpcm_mono_decoder| entry
	; IN  r0: pointer to input data
	;     r1: pointer to output buffer
	;     r2: no samples
	;     r3: state structure
	; OUT bleugh
	bl	|adpcm_mono_decoder|

	| ;else stereo

	;******************************************************************
	; stereo version

	; use the beginning of sound data as the ADPCM state structure
	; since a copy of it is prepended to the sound data

	mov	r4, r0				; store input
	mov	r5, r1
	mov	r6, r3

	add	r0, r4, #8			; input data
	mov	r1, r6				; output buffer
	mov	r2, r5				; no samples (noBytes*2)/2
	mov	r3, r4				; state structure

	; |adpcm_stereo_decoder| entry
	; IN  r0: pointer to input data
	;     r1: pointer to output buffer
	;     r2: no samples
	;     r3: state structure
	; OUT bleugh
	bl	|adpcm_stereo_decoder|

	]

adpcm_end

	ldmia	r13!, {r0-r12}

	; OUT: r1=output size in bytes
	[ stereo			; minus header length
	sub	r1, r1, #8
	| ;else not stereo
	sub	r1, r1, #4
	]
	mov	r1, r1, LSL #2		; length = sourcelen x 4

	ldmia	r13!, {pc}


;**************************************************************************
; init
;     this sorts out the C code that has to be reloated prior to use
;     init must be called once before the C code is called

hasinit
	DCD	0				; has init occurred?

init
	stmfd	r13!, {r0-r12}

	bl	|__RelocCode|			; relocate this code
	mov	r0,#0				; synchronise code areas
	swi	&2006e				;   (don't confuse SA)

	mov	r4, #1
	str	r4, hasinit

	ldmfd	r13!, {r0-r12}
	b	init_ret


;**************************************************************************

	END
