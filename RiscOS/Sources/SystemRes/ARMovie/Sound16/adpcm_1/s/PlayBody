;**************************************************************************
;
;  File:        s.Decompress.adpcm
;
;  Description: Type 1 ADPCM decompression bobbins
;
;  Version:     0.0 29 Sep 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point

	[ stereo
	!	0, "Stereo Type 1 ADPCM decoding..."
	|
	!	0, "Mono Type 1 ADPCM decoding..."
	]

;**************************************************************************
; adpcm decompression code

decompress

	; adpcm decoding
	; IN:  R0 = Source
	;      R1 = Length
	;      R3 = Destination
	; OUT: R1 = length of output produced in bytes
	;      all others preserved

	STMDB	R13!,{R0-R12,R14}

	MOV	R2,R3			; Move destination to R2

	ADD	R1,R1,R0		; Set end pointer

	; ADPCM Header = 8 Bytes per channel
	;                2 Byte 16 Bit value
	;                1 Byte Index value

	; Initialise left channel

	LDRB	R3,[R0],#1		; First byte of value
	LDRB	R4,[R0],#1		; Second byte
	ORR	R3,R3,R4,LSL#8		; Build into 16 bits

	TST	R3,#&8000		; And sign extend
	LDRNE	R4,signMask
	ORRNE	R3,R3,R4

	; Left index

	LDRB  R4,[R0],#2		; Get index byte

 [ stereo

	; Now do the same for the right channel

	LDRB  R5,[R0],#1		; First byte of value
	LDRB  R6,[R0],#1		; Second byte
	ORR   R5,R5,R6,LSL#8		; Build into 16 bits

	TST   R5,#&8000			; And sign extend
	LDRNE R6,signMask
	ORRNE R5,R5,R6

	; Rignt index

	LDRB  R6,[R0],#2		; Get index byte

 ]

	; R0 = Source ptr
	; R1 = End ptr
	; R2 = Destination
	; R3 = Previous left
	; R4 = Index left
	; R5 = Previous right
	; R6 = Index right

	; Now build up each entry

	ADR	R12,stepTable

adpcm_loop

	TST	R0,#3			; Test for half word aligned
	LDREQ	R7,[R0],#4		; Get 4 x ADPCM values to build into
					; 8 mono samples or 4 stereo samples
	BEQ	adpcm_Go

	TST	R0,#1			; Is it byte aligned?
	BNE	adpcm_Byte

	LDR	R7,[R0,#-2]
	LDR	R8,[R0,#2]

	MOV	R7,R7,LSR #16
	ORR	R7,R7,R8,LSL #16
	ADD	R0,R0,#4

	B	adpcm_Go

adpcm_Byte

	LDRB	R7,[R0],#1
	LDRB	R8,[R0],#1
	ORR	R7,R7,R8,LSL #8
	LDRB	R8,[R0],#1
	ORR	R7,R7,R8,LSL #16
	LDRB	R8,[R0],#1
	ORR	R7,R7,R8,LSL #24

adpcm_Go

 [ stereo
	MOV	R11,#4			; Stereo do 4 times
 |
	MOV	R11,#8			; Mono do 8 times
 ]

adpcm_repeat

	; Left channel

	AND	R8,R7,#&F		; Get next data
	MOV	R7,R7,LSR #4		; Shift next value along

	LDR	R9,[R12,R4,LSL #2]	; step = StepTable[index]
	MOV	R10,R9,LSR #3		; vstep = step >>3
	TST	R8,#4
	ADDNE	R10,R10,R9		; IF (delta&4) vstep+=step
	TST	R8,#2
	ADDNE	R10,R10,R9,LSR #1	; IF (delta&2) vstep+=step>>1
	TST	R8,#1
	ADDNE	R10,R10,R9,LSR #2	; IF (delta&1) vstep+=step>>2

	TST	R8,#4
	BEQ	adpcm_indexDec
	AND	R9,R8,#3
	ADD	R9,R9,#1
	MOV	R9,R9,LSL #1
	ADD	R4,R4,R9		; index+=((delta&3)+1)<<1
	CMP	R4,#88
	MOVGT	R4,#88			; Check for > 88
	B	adpcm_step3

adpcm_indexDec

	CMP	R4,#0
	SUBGT	R4,R4,#1		; index-=1

adpcm_step3

	TST	R8,#8
	BEQ	adpcm_pos
	SUB	R3,R3,R10
;	LDR	R9,negVal
	MOV	R9,#0
	SUB	R9,R9,#&8000
	CMP	R3,R9
	MOVLT	R3,R9
	B	adpcm_out

adpcm_pos

	ADD	R3,R3,R10
	CMP	R3,#32768
	MOVGT	R3,#32768

adpcm_out

;	STRB	R3,[R2],#1		; Store value to destination
;	MOV	R8,R3,LSR #8
;	STRB	R8,[R2],#1

 [ stereo

	; Right channel

	AND	R8,R7,#&F		; Get next data
	MOV	R7,R7,LSR #4		; Shift next value along

	LDR	R9,[R12,R6,LSL #2]	; step = StepTable[index]
	MOV	R10,R9,LSR #3		; vstep = step >>3
	TST	R8,#4
	ADDNE	R10,R10,R9		; IF (delta&4) vstep+=step
	TST	R8,#2
	ADDNE	R10,R10,R9,LSR #1	; IF (delta&2) vstep+=step>>1
	TST	R8,#1
	ADDNE	R10,R10,R9,LSR #2	; IF (delta&1) vstep+=step>>2

	TST	R8,#4
	BEQ	adpcm_indexDecR
	AND	R9,R8,#3
	ADD	R9,R9,#1
	MOV	R9,R9,LSL #1
	ADD	R6,R6,R9		; index+=((delta&3)+1)<<1
	CMP	R6,#88
	MOVGT	R6,#88			; Check for > 88
	B	adpcm_step3R

adpcm_indexDecR

	CMP	R6,#0
	SUBGT	R6,R6,#1		; index-=1

adpcm_step3R

	TST	R8,#8
	BEQ	adpcm_posR
	SUB	R5,R5,R10
;	LDR	R9,negVal
	MOV	R9,#0
	SUB	R9,R9,#&8000
	CMP	R5,R9
	MOVLT	R5,R9
	B	adpcm_outR

adpcm_posR

	ADD	R5,R5,R10
	CMP	R5,#32768
	MOVGT	R5,#32768

adpcm_outR

;	STRB	R5,[R2],#1     \ Store value to destination
;	MOV	R8,R5,LSR #8
;	STRB  R8,[R2],#1

 ]
 [ stereo

	; R3 = left, R5 = right

	MOV	R8,R3,LSL #16
	MOV	R8,R8,LSR #16
	ORR	R8,R8,R5,LSL #16
	STR	R8,[R2],#4

 |
	; R3 = Left

	; Build a word to output every other time

	TST	R11,#1			; If 0 then store current value
	MOVEQ	R5,R3

	MOVNE	R5,R5,LSL #16		; Otherwise build word and store
	MOVNE	R5,R5,LSR #16

	ORRNE	R5,R5,R3,LSL #16
	STRNE	R5,[R2],#4

 ]

	SUBS	R11,R11,#1
	BNE	adpcm_repeat

	CMP	R0,R1
	BLT	adpcm_loop


adpcm_end

	LDMIA	R13!,{R0-R12}

	; this bit used to be in the main play code, now it looks as
	; if it belongs in here, as its specific to ADPCM bobbins
 [ stereo
	SUB	R1,R1,#8
	MOV	R1,R1,LSL #2		; Length  x 4
 |
	SUB	R1,R1,#4
	MOV	R1,R1,LSL #2		; Length  x 4
 ]
	LDMIA	R13!, {PC}

;**************************************************************************

stepTable

	DCD	7,8,9,10,11,12,13,14,16,17
	DCD	19,21,23,25,28,31,34,37,41,45
	DCD	50,55,60,66,73,80,88,97,107,118
	DCD	130,143,157,173,190,209,230,253,279,307
	DCD	337,371,408,449,494,544,598,658,724,796
	DCD	876,963,1060,1166,1282,1411,1552,1707,1878,2066
	DCD	2272,2499,2749,3024,3327,3660,4026,4428,4871,5358
	DCD	5894,6468,7132,7845,8630,9493,10442,11487,12635,13899
	DCD	15289,16818,18500,20350,22385,24623,27086,29794,32767

;negVal
;	DCD	-32768

signMask
	DCD	&FFFF0000

;**************************************************************************

	END
