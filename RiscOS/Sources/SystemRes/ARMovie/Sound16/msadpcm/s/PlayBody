;**************************************************************************
;
;  File:        s.Decompress.msadpcm_2
;
;  Description: Type 2 MSADPCM decompression bobbins using C library code
;
;  Version:     0.0 05 Jul 2001
;
;  Author:      Robin Watts (robin@wss.co.uk)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;    5 Jul 2001   Robin Watts           Created from Pace adpcm original
;					and PHBGs BASIC assembler version.
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point


;**************************************************************************
; adpcm decompression code

decompress

	; adpcm decoding
	; IN:  r0 = Source
	;      r1 = Length of source in bytes
	;      r3 = Destination
	; OUT: r1 = length of output produced in bytes
	;      all registers preserved

	stmdb	r13!, {r14}
	stmdb	r13!, {r0-r12}

	[ stereo
; *************************************************************************
; Stereo code
 	LDR	R4,[R0,#4]	; R4 = count of samples

	; Just in case...
	CMP	R4,#0
	BLE	msadpcm_dones

	STR	R4,msadpcm_temp_count_store
	ADR	R4,gaiP4_tab

	LDR	R5,[R0],#8+12	; R5 = number of samples to skip
				; R0 = Hdr
	LDR	R2,[R0,#-4]	; R2 = ncoefs
	ADD	R2,R0,R2,LSL#3	; R2 = Source pointer
	CMP	R5,#0
	BLE	msadpcm_no_skip
	MOV	R1,#0		; R1=(blk<<1) | (load_sample_alternate_times_flag)
msadpcm_newblk1
	LDRB	R6,[R2],#2              ; R6 = pred
	LDR	R7,[R0,#-4]             ; R7 = ncoefs
	CMP	R6,R7                   ; if (pred>=ncoefs)
	MOVGE	R6,#0                   ;     pred=0
	ADD	R7,R0,R6,LSL#3          ; R7 -> coef[pred]
	LDMIA	R7,{R7,R8}              ; R7, R8 = ic1, ic2
	LDRB	R9,[R2],#1              ; R9 = delta (sign extended)
	LDRB	R10,[R2],#3
	ORR	R9,R9,R10,LSL#8
	MOV	R9,R9,ASL#16
	MOV	R9,R9,ASR#16
	LDRB	R10,[R2],#1             ; R10 = samp1 (sign extended)
	LDRB	R11,[R2],#3
	ORR	R10,R10,R11,LSL#8
	MOV	R10,R10,ASL#16
	MOV	R10,R10,ASR#16
	LDRB	R11,[R2],#1             ; R11 = samp2 (sign extended)
	LDRB	R12,[R2],#3
	ORR	R11,R11,R12,LSL#8
	MOV	R11,R11,ASL#16
	MOV	R11,R11,ASR#16
	LDR	R1,[R0,#-8]
	SUB	R1,R1,#2
	SUBS	R5,R5,#2
	BLT	msadpcm_awkward_case
	BEQ	msadpcm_skip_done1

msadpcm_skip_lp1
	SUBS	R1,R1,#1
	BLT	msadpcm_newblk1
	LDRB	R12,[R2],#1     ; If yes, then load it.
	MOV	R14,R12,ASL#24  ; R14 = input...
	MOV	R14,R14,ASR#28  ;            ...with sign extension

	MUL	R6,R10,R7       ;       (samp1*ic1)
	MLA	R6,R11,R8,R6    ;                   + (samp2*ic2)
	MOV	R6,R6,ASR#8     ; pred=(                         ) >> 8;
	MOV	R11,R10         ; samp2 = samp1;
	MLA	R10,R14,R9,R6   ; samp1 = pred + input * delta;
	CMP	R10,#&8000      ; if(samp1 >= 32768)
	MOVGE	R10,#&8000      ;     samp1 = 32767;
	SUBGE	R10,R10,#1
	CMN	R10,#&8000      ; if(samp1 < -32768)
	MOVLT	R10,#&80000000  ;     samp1 = -32768;
	MOVLT	R10,R10,ASR#16
	AND	R14,R14,#&F     ;               (input & 15)
	LDR	R14,[R4,R14,LSL#2] ;     (gaiP4[            ])
	MUL	R9,R14,R9       ;       (                     *delta)
	MOV	R9,R9,ASR#8     ; delta=                             >>8;
	CMP	R9,#16          ; if(delta < 16)
	MOVLT	R9,#16          ;      delta = 16;
	SUBS	R5,R5,#1
	BGT	msadpcm_skip_lp1

msadpcm_skip_done1
	LDR	R5,msadpcm_temp_count_store
	B	msadpcm_dec_lp1

msadpcm_no_skip
	LDR	R5,msadpcm_temp_count_store
msadpcm_newblk2
	LDRB	R6,[R2],#2              ; R6 = pred
	LDR	R7,[R0,#-4]             ; R7 = ncoefs
	CMP	R6,R7                   ; if (pred>=ncoefs)
	MOVGE	R6,#0                   ;     pred=0
	ADD	R7,R0,R6,LSL#3          ; R7 -> coef[pred]
	LDMIA	R7,{R7,R8}              ; R7, R8 = ic1, ic2
	LDRB	R9,[R2],#1              ; R9 = delta (sign extended)
	LDRB	R10,[R2],#3
	ORR	R9,R9,R10,LSL#8
	MOV	R9,R9,ASL#16
	MOV	R9,R9,ASR#16
	LDRB	R10,[R2],#1             ; R10 = samp1 (sign extended)
	LDRB	R11,[R2],#3
	ORR	R10,R10,R11,LSL#8
	MOV	R10,R10,ASL#16
	MOV	R10,R10,ASR#16
	LDRB	R11,[R2],#1             ; R11 = samp2 (sign extended)
	LDRB	R12,[R2],#3
	ORR	R11,R11,R12,LSL#8
	MOV	R11,R11,ASL#16
	MOV	R11,R11,ASR#16
	LDR	R1,[R0,#-8]
	SUB	R1,R1,#2
	SUBS	R5,R5,#2

	STR	R10,[R3],#4		; Store samp1 Cos we are in Stereo,first pass.
	STRGE	R11,[R3],#4		; Store samp2 Cos we are in Stereo,first pass.
	BLE	msadpcm_done1

msadpcm_dec_lp1
	SUBS	R1,R1,#1
	BLT	msadpcm_newblk2
	LDRB	R12,[R2],#1		; If yes, then load it.
	MOV	R14,R12,ASL#24		; R14 = input...
	MOV	R14,R14,ASR#28		;            ...with sign extension

	MUL	R6,R10,R7       ;       (samp1*ic1)
	MLA	R6,R11,R8,R6    ;                   + (samp2*ic2)
	MOV	R6,R6,ASR#8     ; pred=(                         ) >> 8;
	MOV	R11,R10         ; samp2 = samp1;
	MLA	R10,R14,R9,R6   ; samp1 = pred + input * delta;
	CMP	R10,#&8000      ; if(samp1 >= 32768)
	MOVGE	R10,#&8000      ;     samp1 = 32767;
	SUBGE	R10,R10,#1
	CMN	R10,#&8000      ; if(samp1 < -32768)
	MOVLT	R10,#&80000000  ;     samp1 = -32768;
	MOVLT	R10,R10,ASR#16
	AND	R14,R14,#&F     ;               (input & 15)
	LDR	R14,[R4,R14,LSL#2] ;     (gaiP4[            ])
	MUL	R9,R14,R9       ;       (                     *delta)
	MOV	R9,R9,ASR#8     ; delta=                             >>8;
	CMP	R9,#16          ; if(delta < 16)
	MOVLT	R9,#16          ;      delta = 16;
	STR	R10,[R3],#4	; Store samp1 Cos we are in Stereo,first pass.

	SUBS	R5,R5,#1
	BGT	msadpcm_dec_lp1
msadpcm_done1
	LDMFD	R13,{R0-R3}

	ADD	R3,R3,#2

	LDR	R5,[R0],#8+12	; R5 = number of samples to skip
				; R0 = Hdr
	LDR	R2,[R0,#-4]		; R2 = ncoefs
	ADD	R2,R0,R2,LSL#3	; R2 = Source pointer
	CMP	R5,#0
	BLE	msadpcm_no_skips
	MOV	R1,#0
msadpcm_newblk1s
	LDRB	R6,[R2,#1]              ; R6 = pred
	LDR	R7,[R0,#-4]             ; R7 = ncoefs
	CMP	R6,R7                   ; if (pred>=ncoefs)
	MOVGE	R6,#0                   ;     pred=0
	ADD	R7,R0,R6,LSL#3          ; R7 -> coef[pred]
	LDMIA	R7,{R7,R8}              ; R7, R8 = ic1, ic2
	LDRB	R9,[R2,#4]              ; R9 = delta (sign extended)
	LDRB	R10,[R2,#5]
	ORR	R9,R9,R10,LSL#8
	MOV	R9,R9,ASL#16
	MOV	R9,R9,ASR#16
	LDRB	R10,[R2,#8]             ; R10 = samp1 (sign extended)
	LDRB	R11,[R2,#9]
	ORR	R10,R10,R11,LSL#8
	MOV	R10,R10,ASL#16
	MOV	R10,R10,ASR#16
	LDRB	R11,[R2,#12]            ; R11 = samp2 (sign extended)
	LDRB	R12,[R2,#13]
	ORR	R11,R11,R12,LSL#8
	MOV	R11,R11,ASL#16
	MOV	R11,R11,ASR#16
	LDR	R1,[R0,#-8]
	SUB	R1,R1,#2
	ADD	R2,R2,#14
	SUBS	R5,R5,#2
	BLT	msadpcm_awkward_cases
	BEQ	msadpcm_skip_done1s

msadpcm_skip_lp1s
	SUBS   R1,R1,#1
	BLT    msadpcm_newblk1s
	LDRB   R12,[R2],#1     ; load new sample
	MOV    R14,R12,ASL#28  ; R14 = input...
	MOV    R14,R14,ASR#28  ;            ...with sign extension

	MUL    R6,R10,R7       ;       (samp1*ic1)
	MLA    R6,R11,R8,R6    ;                   + (samp2*ic2)
	MOV    R6,R6,ASR#8     ; pred=(                         ) >> 8;
	MOV    R11,R10         ; samp2 = samp1;
	MLA    R10,R14,R9,R6   ; samp1 = pred + input * delta;
	CMP    R10,#&8000      ; if(samp1 >= 32768)
	MOVGE  R10,#&8000      ;     samp1 = 32767;
	SUBGE  R10,R10,#1
	CMN    R10,#&8000      ; if(samp1 < -32768)
	MOVLT  R10,#&80000000  ;     samp1 = -32768;
	MOVLT  R10,R10,ASR#16
	AND    R14,R14,#&F     ;               (input & 15)
	LDR    R14,[R4,R14,LSL#2] ;     (gaiP4[            ])
	MUL    R9,R14,R9       ;       (                     *delta)
	MOV    R9,R9,ASR#8     ; delta=                             >>8;
	CMP    R9,#16          ; if(delta < 16)
	MOVLT  R9,#16          ;      delta = 16;
	SUBS   R5,R5,#1
	BGT    msadpcm_skip_lp1s

msadpcm_skip_done1s
	LDR	R5,msadpcm_temp_count_store
	B	msadpcm_dec_lp1s

msadpcm_no_skips
	LDR	R5,msadpcm_temp_count_store
msadpcm_newblk2s
	LDRB	R6,[R2,#1]		; R6 = pred
	LDR	R7,[R0,#-4]             ; R7 = ncoefs
	CMP	R6,R7                   ; if (pred>=ncoefs)
	MOVGE	R6,#0                   ;     pred=0
	ADD	R7,R0,R6,LSL#3          ; R7 -> coef[pred]
	LDMIA	R7,{R7,R8}              ; R7, R8 = ic1, ic2
	LDRB	R9,[R2,#4]              ; R9 = delta (sign extended)
	LDRB	R10,[R2,#5]
	ORR	R9,R9,R10,LSL#8
	MOV	R9,R9,ASL#16
	MOV	R9,R9,ASR#16
	LDRB	R10,[R2,#8]             ; R10 = samp1 (sign extended)
	LDRB	R11,[R2,#9]
	ORR	R10,R10,R11,LSL#8
	MOV	R10,R10,ASL#16
	MOV	R10,R10,ASR#16
	LDRB	R11,[R2,#12]		; R11 = samp2 (sign extended)
	LDRB	R12,[R2,#13]
	ORR	R11,R11,R12,LSL#8
	MOV	R11,R11,ASL#16
	MOV	R11,R11,ASR#16
	LDR	R1,[R0,#-8]
	SUB	R1,R1,#2
	ADD	R2,R2,#14
	SUBS	R5,R5,#2
	STRB	R10,[R3],#1		; Store samp1
	MOV	R14,R10,ASR#8
	STRB	R14,[R3],#3
	BLT	msadpcm_dones
	STRB	R11,[R3],#1		; Store samp2
	MOV	R14,R11,ASR#8
	STRB	R14,[R3],#3
	BEQ	msadpcm_dones

msadpcm_dec_lp1s
	SUBS	R1,R1,#1
	BLT	msadpcm_newblk2s
	LDRB	R12,[R2],#1     ; load new sample
	MOV	R14,R12,ASL#28  ; R14 = input...
	MOV	R14,R14,ASR#28  ;            ...with sign extension

	MUL	R6,R10,R7       ;       (samp1*ic1)
	MLA	R6,R11,R8,R6    ;                   + (samp2*ic2)
	MOV	R6,R6,ASR#8     ; pred=(                         ) >> 8;
	MOV	R11,R10         ; samp2 = samp1;
	MLA	R10,R14,R9,R6   ; samp1 = pred + input * delta;
	CMP	R10,#&8000      ; if(samp1 >= 32768)
	MOVGE	R10,#&8000      ;     samp1 = 32767;
	SUBGE	R10,R10,#1
	CMN	R10,#&8000      ; if(samp1 < -32768)
	MOVLT	R10,#&80000000  ;     samp1 = -32768;
	MOVLT	R10,R10,ASR#16
	AND	R14,R14,#&F     ;               (input & 15)
	LDR	R14,[R4,R14,LSL#2] ;     (gaiP4[            ])
	MUL	R9,R14,R9       ;       (                     *delta)
	MOV	R9,R9,ASR#8     ; delta=                             >>8;
	CMP	R9,#16          ; if(delta < 16)
	MOVLT	R9,#16          ;      delta = 16;
	STRB	R10,[R3],#1	; Store samp1
	MOV	R14,R10,ASR#8
	STRB	R14,[R3],#3
	SUBS	R5,R5,#1
	BGT	msadpcm_dec_lp1s

msadpcm_dones
	LDMFD	R13!,{R0-R12}

	LDR	R1,[R0,#4]
	MOV	R1,R1,LSL#2

	LDMFD	R13!,{PC}
msadpcm_awkward_case
	;Need to store samp1, then continue after skipping
	STR	R10,[R3],#4	; OK, cos Stereo first pass

	;STRB	R10,[R3],#1
	;MOV	R14,R10,ASR#8
	;STRB	R14,[R3],#3
	SUB	R1,R1,#1
	B	msadpcm_skip_done1
msadpcm_awkward_cases
	STRB	R10,[R3],#1 ;Need to store samp1, then continue after skipping
	MOV	R14,R10,ASR#8
	STRB	R14,[R3],#3
	SUB	R1,R1,#1
	B	msadpcm_skip_done1s

	| ; Not stereo
; *************************************************************************
; Mono Code
	LDR	R4,[R0,#4]	; R4 = count of samples

	CMP	R4,#0		; Just in case...
	BLE	msadpcm_done

	STR    R4,msadpcm_temp_count_store
	ADR    R4,gaiP4_tab

	LDR	R5,[R0],#8+12	; R5 = number of samples to skip
				; R0 = Hdr
	LDR	R2,[R0,#-4]	; R2 = ncoefs
	ADD	R2,R0,R2,LSL#3	; R2 = Source pointer
	CMP	R5,#0
	BLE	msadpcm_no_skip
	MOV	R1,#0		; R1=(blk<<1) | (load_sample_alternate_times_flag)

msadpcm_newblk1
	LDRB	R6,[R2],#1              ; R6 = pred
	LDR	R7,[R0,#-4]             ; R7 = ncoefs
	CMP	R6,R7                   ; if (pred>=ncoefs)
	MOVGE	R6,#0                   ;     pred=0
	ADD	R7,R0,R6,LSL#3          ; R7 -> coef[pred]
	LDMIA	R7,{R7,R8}              ; R7, R8 = ic1, ic2
	LDRB	R9,[R2],#1              ; R9 = delta (sign extended)
	LDRB	R10,[R2],#1
	ORR	R9,R9,R10,LSL#8
	MOV	R9,R9,ASL#16
	MOV	R9,R9,ASR#16
	LDRB	R10,[R2],#1             ; R10 = samp1 (sign extended)
	LDRB	R11,[R2],#1
	ORR	R10,R10,R11,LSL#8
	MOV	R10,R10,ASL#16
	MOV	R10,R10,ASR#16
	LDRB	R11,[R2],#1             ; R11 = samp2 (sign extended)
	LDRB	R12,[R2],#1
	ORR	R11,R11,R12,LSL#8
	MOV	R11,R11,ASL#16
	MOV	R11,R11,ASR#16
	LDR	R1,[R0,#-8]
	SUB	R1,R1,#2
	MOV	R1,R1,ASL#1
	SUBS	R5,R5,#2
	BLT	msadpcm_awkward_case
	BEQ	msadpcm_skip_done

msadpcm_skip_lp1
	SUBS	R1,R1,#2
	BLT	msadpcm_newblk1
	EOR	R1,R1,#1        ; Toggle the load_sample bit
	TST	R1,#1           ; Are we due for a load?
	LDRNEB	R12,[R2],#1     ; If yes, then load it.
	MOV	R14,R12,ASL#24  ; R14 = input...
	MOV	R14,R14,ASR#28  ;            ...with sign extension
	MOV	R12,R12,ASL#4   ; Shift sample up for next time

	MUL	R6,R10,R7       ;       (samp1*ic1)
	MLA	R6,R11,R8,R6    ;                   + (samp2*ic2)
	MOV	R6,R6,ASR#8     ; pred=(                         ) >> 8;
	MOV	R11,R10         ; samp2 = samp1;
	MLA	R10,R14,R9,R6   ; samp1 = pred + input * delta;
	CMP	R10,#&8000      ; if(samp1 >= 32768)
	MOVGE	R10,#&8000      ;     samp1 = 32767;
	SUBGE	R10,R10,#1
	CMN	R10,#&8000      ; if(samp1 < -32768)
	MOVLT	R10,#&80000000  ;     samp1 = -32768;
	MOVLT	R10,R10,ASR#16
	AND	R14,R14,#&F     ;               (input & 15)
	LDR	R14,[R4,R14,LSL#2] ;     (gaiP4[            ])
	MUL	R9,R14,R9       ;       (                     *delta)
	MOV	R9,R9,ASR#8     ; delta=                             >>8;
	CMP	R9,#16          ; if(delta < 16)
	MOVLT	R9,#16          ;      delta = 16;
	SUBS	R5,R5,#1
	BGT	msadpcm_skip_lp1
                ;if(size >= skip_samples) {
                ;   *wp = (samp1<<16);
                ;   wp += NCHANNELS;
                ;}


msadpcm_skip_done
	LDR	R5,msadpcm_temp_count_store
	B	msadpcm_dec_lp1

msadpcm_no_skip
	LDR	R5,msadpcm_temp_count_store
msadpcm_newblk2
	LDRB	R6,[R2],#1              ; R6 = pred
	LDR	R7,[R0,#-4]             ; R7 = ncoefs
	CMP	R6,R7                   ; if (pred>=ncoefs)
	MOVGE	R6,#0                   ;     pred=0
	ADD	R7,R0,R6,LSL#3          ; R7 -> coef[pred]
	LDMIA	R7,{R7,R8}              ; R7, R8 = ic1, ic2
	LDRB	R9,[R2],#1              ; R9 = delta (sign extended)
	LDRB	R10,[R2],#1
	ORR	R9,R9,R10,LSL#8
	MOV	R9,R9,ASL#16
	MOV	R9,R9,ASR#16
	LDRB	R10,[R2],#1             ; R10 = samp1 (sign extended)
	LDRB	R11,[R2],#1
	ORR	R10,R10,R11,LSL#8
	MOV	R10,R10,ASL#16
	MOV	R10,R10,ASR#16
	LDRB	R11,[R2],#1             ; R11 = samp2 (sign extended)
	LDRB	R12,[R2],#1
	ORR	R11,R11,R12,LSL#8
	MOV	R11,R11,ASL#16
	MOV	R11,R11,ASR#16
	LDR	R1,[R0,#-8]
	SUB	R1,R1,#2
	MOV	R1,R1,ASL#1
	SUBS	R5,R5,#2
	STRB	R10,[R3],#1		; Store samp1
	MOV	R14,R10,ASR#8
	STRB	R14,[R3],#1
	STRGEB	R11,[R3],#1		; Store samp2
	MOVGE	R14,R11,ASR#8
	STRGEB	R14,[R3],#1
	BLE	msadpcm_done

msadpcm_dec_lp1
	SUBS	R1,R1,#2
	BLT	msadpcm_newblk2
	EOR	R1,R1,#1        ; Toggle the load_sample bit
	TST	R1,#1           ; Are we due for a load?
	LDRNEB	R12,[R2],#1     ; If yes, then load it.
	MOV	R14,R12,ASL#24  ; R14 = input...
	MOV	R14,R14,ASR#28  ;            ...with sign extension
	MOV	R12,R12,ASL#4   ; Shift sample up for next time

	MUL	R6,R10,R7       ;       (samp1*ic1)
	MLA	R6,R11,R8,R6    ;                   + (samp2*ic2)
	MOV	R6,R6,ASR#8     ; pred=(                         ) >> 8;
	MOV	R11,R10         ; samp2 = samp1;
	MLA	R10,R14,R9,R6   ; samp1 = pred + input * delta;
	CMP	R10,#&8000      ; if(samp1 >= 32768)
	MOVGE	R10,#&8000      ;     samp1 = 32767;
	SUBGE	R10,R10,#1
	CMN	R10,#&8000      ; if(samp1 < -32768)
	MOVLT	R10,#&80000000  ;     samp1 = -32768;
	MOVLT	R10,R10,ASR#16
	AND	R14,R14,#&F     ;               (input & 15)
	LDR	R14,[R4,R14,LSL#2] ;     (gaiP4[            ])
	MUL	R9,R14,R9       ;       (                     *delta)
	MOV	R9,R9,ASR#8     ; delta=                             >>8;
	CMP	R9,#16          ; if(delta < 16)
	MOVLT	R9,#16          ;      delta = 16;
	STRB	R10,[R3],#1	; Store samp1
	MOV	R14,R10,ASR#8
	STRB	R14,[R3],#1
	SUBS	R5,R5,#1
	BGT	msadpcm_dec_lp1

msadpcm_done
	LDMFD	R13!,{R0-R12}

	LDR	R1,[R0,#4]
	MOV	R1,R1,LSL#1

	LDMFD	R13!,{PC}

msadpcm_awkward_case
	STRB	R10,[R3],#1 ;Need to store samp1, then continue after skipping
	MOV	R14,R10,ASR#8
	STRB	R14,[R3],#1
	SUB	R1,R1,#1
	B	msadpcm_skip_done

	]

msadpcm_temp_count_store
	DCD	0
gaiP4_tab
	DCD	230
	DCD	230
	DCD	230
	DCD	230
	DCD	307
	DCD	409
	DCD	512
	DCD	614
	DCD	768
	DCD	614
	DCD	512
	DCD	409
	DCD	307
	DCD	230
	DCD	230
	DCD	230


;**************************************************************************

	END
