; from h_objmacro

	AREA	|trig$$code|, CODE, READONLY

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

        MACRO
        LoadStaticAddress $Addr, $Reg, $Ignore
        LDR     $Reg, =$Addr
        MEND

        GBLS    VBar
VBar    SETS    "|"

;        MACRO
;$Label  ExportedVariable $Size
;        LCLS    Temps
;        LCLA    Tempa
; [ "$Size"=""
;Tempa   SETA    1
; |
;Tempa   SETA    $Size
; ]
;Temps   SETS    VBar:CC:"$Label":CC:VBar
;        EXPORT  $Temps
;        ALIGN
;O_$Label *      .-StaticData
;$Temps  %       &$Tempa*4
;        MEND


; from s.cl_data

__errno         DCD	0;ExportedVariable ;(goodness only knows what that
						; was all about

; from s._cl_body


ERANGE  *       2
EDOM    *       1

        MACRO
$Label  DisableFPInterrupts
        ; Disables all FP exceptions, remembering the exception mask in ip
        ; for subsequent reinstatement by ReEnableFPInterrupts.  (ip must
        ; therefore be left alone by the FP procedures which call this macro).
$Label  MOV     r1, #0
        RFS     ip
        WFS     r1
        MEND

        MACRO
$Label  ReEnableFPInterrupts
        ; Reinstates the exception mask state which prevailed before the call
        ; to DisableFPInterrupts; sets r1 to the current fp flags.
$Label  RFS     r1
        WFS     ip
        MEND


        EXPORT  sin
        EXPORT  cos
        EXPORT  exp
        EXPORT  log10
        EXPORT  log
        EXPORT  sqrt
        EXPORT  pow


sin     STMFD   sp!, {r0, r1}
        LDFD    f0, [sp], #8
        SIND    f0, f0
        Return  , LinkNotStacked

cos     STMFD   sp!, {r0, r1}
        LDFD    f0, [sp], #8
        COSD    f0, f0
        Return  , LinkNotStacked

exp     STMFD   sp!, {r0, r1}
        DisableFPInterrupts
        LDFD    f0, [sp], #8
        EXPD    f0, f0
        ReEnableFPInterrupts
        TST     r1, #&0F
        Return  , LinkNotStacked, EQ
        TST     r1, #8
        BNE     underflow_error
        B       huge_error

ldfp_overflow
        LDR     r0, [r0, #0]
        CMPS    r0, #0
        BPL     huge_error
huge_negative_result
        MOV     r0, #ERANGE
        LDFD    f0, negative_huge_val   ; @@@@!!!!
Set_errno
        LoadStaticAddress |__errno|, r1		; xxxxxxxxxxxxxxxxxxxxxxx
        STR     r0, [r1, #0]
        Return  , LinkNotStacked
negative_huge_val
        DCD     &FFEFFFFF               ; put constant where it is easy to find
        DCD     &FFFFFFFF

huge_error
        MOV     r0, #ERANGE
        LDFD    f0, huge_val            ; @@@@!!!!
        B       Set_errno
huge_val
        DCD     &7FEFFFFF               ; put constant where it is easy to find
        DCD     &FFFFFFFF

negative_error
        MOV     r0, #EDOM
        LDFD    f0, negative_huge_val   ; @@@@!!!!
        B       Set_errno

underflow_error
        MOV     r0, #ERANGE
        MVFD    f0, #0
        B       Set_errno

log10   STMFD   sp!, {r0, r1}
        LDFD    f0, [sp], #8
        CMFE    f0, #0
        BEQ     huge_negative_result
        BMI     negative_error
        LOGD    f0, f0
        Return  , LinkNotStacked

log     STMFD   sp!, {r0, r1}
        LDFD    f0, [sp], #8
        CMFE    f0, #0
        BEQ     huge_negative_result
        BMI     negative_error
        LGND    f0, f0
        Return  , LinkNotStacked

sqrt    STMFD   sp!, {r0, r1}
        LDFD    f0, [sp], #8
        CMFE    f0, #0
        BMI     negative_error
        SQTD    f0, f0
        Return  , LinkNotStacked


atan    STMFD   sp!, {r0, r1}
        LDFD    f0, [sp], #8
        ATND    f0, f0
        Return  , LinkNotStacked


pow     STMFD   sp!, {r0, r1, r2, r3}
        DisableFPInterrupts
        LDFD    f0, [sp], #8
        LDFD    f1, [sp], #8
        CMFE    f0, #0
        BEQ     POWFirstArgZero
        POWD    f0, f0, f1
        ReEnableFPInterrupts
        ; Plausibly, there may have been either an overflow or IVO error.
        ; I assume that the former is always a range error, and the latter
        ; corresponds to one of the possible C domain errors (first arg
        ; negative, second non-integer).
        ; (DVZ assumed impossible).
        TST     r1, #&0F
        Return  , LinkNotStacked, EQ
        TST     r1, #1
        BNE     negative_error
        TST     r1, #8
        BNE     underflow_error
        B       huge_error

POWFirstArgZero
        CMFE    f1, #0
        MVFEQD  f0, #1              ; return 1.0 if both args 0.0
        ReEnableFPInterrupts
        Return  , LinkNotStacked, GE
        B       negative_error

	END
