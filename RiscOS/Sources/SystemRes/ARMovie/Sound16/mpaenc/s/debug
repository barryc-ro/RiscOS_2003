;**************************************************************************
;
;  File:        s.border
;
;  Description: Changes border colours and does other debugging nicities
;
;  Version:     0.0 16 Jan 1998
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************

debug_border	*	0
debug_write	*	0

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	[ debug_border=1
	EXPORT	|border_red|
	EXPORT	|border_blue|
	EXPORT	|border_green|
	EXPORT	|border_black|
	EXPORT	|border_yellow|
	EXPORT	|border_magenta|
	EXPORT	|border_cyan|
	EXPORT	|border_white|
	EXPORT	|border_grey|
	EXPORT	|border_beige|
	EXPORT	|border_pink|
	EXPORT	|border_brown|
	EXPORT	|border_lime|
	EXPORT	|mode_test|
	]
	[ debug_write=1
	EXPORT |write_string|
	EXPORT |write_hex|
	EXPORT |write_newline|
	]

	[ debug_border=1


;**************************************************************************
; SWI definitions

OS_EnterOS	*	&16			; SWI number for SVC mode


;**************************************************************************
; Awkward constants

vidc_b		DCD	&03500000		; address of VIDC border reg

Border_Red	DCD	&400000ff		; register value for red
Border_Blue	DCD	&40ff0000		; register value for blue
Border_Green	DCD	&4000ff00		; register value for green

Border_Black	DCD	&40000000
Border_Yellow	DCD	&4000FFFF
Border_Magenta	DCD	&40FF00FF
Border_Cyan	DCD	&40FFFF00
Border_White	DCD	&40FFFFFF
Border_Grey	DCD	&40808080
Border_Beige	DCD	&4080C0FF
Border_Pink	DCD	&408080FF
Border_Brown	DCD	&404080C0
Border_Lime	DCD	&4040FFC0


;**************************************************************************

; borderChange macro

	MACRO
	borderChange $colour
        FunctionEntry "r4-r9"
	mov	r9, pc				; save current status/mode
	swi	OS_EnterOS			; enter supervisor mode
	ldr	r0, vidc_b			; address of VIDC register
	ldr	r1, $colour			; register border value
	str	r1, [r0]			; write VIDC register
	teqp	r9, #0				; re-enter original mode
	mov	r0, r0				; nop to prevent contention
        Return  "r4-r9"
	MEND


;**************************************************************************
;* Main code body
;**************************************************************************

border_red
	borderChange Border_Red

border_blue
	borderChange Border_Blue

border_green
	borderChange Border_Green

border_black
	borderChange Border_Black

border_yellow
	borderChange Border_Yellow

border_magenta
	borderChange Border_Magenta

border_cyan
	borderChange Border_Cyan

border_white
	borderChange Border_White

border_grey
	borderChange Border_Grey

border_beige
	borderChange Border_Beige

border_pink
	borderChange Border_Pink

border_brown
	borderChange Border_Brown

border_lime
	borderChange Border_Lime

;**************************************************************************
; mode_test
;	reads the current mode and sets up the border colour to reflect it

mode_test
        FunctionEntry "r4-r9"
	mov	r0, pc
	ands	r0, r0, #3
	bleq	border_blue	; user mode
	cmp	r0, #1
	bleq	border_brown	; FIQ mode
	cmp	r0, #2
	bleq	border_beige	; IRQ mode
	cmp	r0, #3
	bleq	border_red	; SVC mode
        Return  "r4-r9"

	]
	[ debug_write=1

;**************************************************************************
; other debugging routines not used any more!

write_string
	; r0 = string ptr
	swi	&02	; OS_Write0
        Return  , LinkNotStacked

write_hex
	; r0 = number to print
	adr	r1, hexstr
	mov	r2, #20
	swi	&d4	; OS_ConvertHex8
	swi	&02	; OS_Write0
        Return  , LinkNotStacked

write_newline
	swi	&03	; OS_NewLine
        Return  , LinkNotStacked

hexstr	%	20

	]


;**************************************************************************
;* End of file
;**************************************************************************

	END

;**************************************************************************
; a less safe but easy VDU command way of doing it...
;
;border_blue
;	mov	r0, #19				; vdu 19
;	swi	0
;	mov	r0, #0				; logical colour
;	swi	0
;	mov	r0, #24				; mode: border
;	swi	0
;	mov	r0, #0				; red
;	swi	0
;	mov	r0, #0				; green
;	swi	0
;	mov	r0, #255			; blue
;	swi	0
;       Return  , LinkNotStacked
