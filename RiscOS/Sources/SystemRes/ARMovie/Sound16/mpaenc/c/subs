/**********************************************************************
Copyright (c) 1991 MPEG/audio software simulation group, All Rights Reserved
subs.c
**********************************************************************/

///////////////////////////////////////////
// Standard C routines used:
//     memset
//     sin, cos, atan2

/**********************************************************************
 * MPEG/audio coding/decoding software, work in progress              *
 *   NOT for public distribution until verified and approved by the   *
 *   MPEG/audio committee.  For further information, please contact   *
 *   Davis Pan, 508-493-2241, e-mail: pan@3d.enet.dec.com             *
 *                                                                    *
 * VERSION 3.9                                                        *
 *   changes made since last update:                                  *
 *   date   programmers         comment                               *
 * 2/25/91  Davis Pan           start of version 1.0 records          *
 * 5/10/91  W. Joseph Carter    Ported to Macintosh and Unix.         *
 * 7/10/91  Earle Jennings      Ported to MsDos from Macintosh        *
 *                              Replacement of one float with FLOAT   *
 * 2/11/92  W. Joseph Carter    Added type casting to memset() args.  *
 * 4/27/92  Masahiro Iwadare    Added 256 point version for Layer III *
 **********************************************************************/

#include "common.h"
#include "encoder.h"
#include "constants.h"

// constants
static FLOAT                 global_const_tmpA = {1};
#define fpFlt_1_             global_const_tmpA._i
static FLOAT                 global_const_tmpB = {0};
#define fpFlt_0_             global_const_tmpB._i

/*****************************************************************************
 ************************** Start of Subroutines *****************************
 *****************************************************************************/

/*****************************************************************************
 * FFT computes fast fourier transform of BLKSIZE samples of data            *
 *   uses decimation-in-frequency algorithm described in "Digital            *
 *   Signal Processing" by Oppenheim and Schafer, refer to pages 304         *
 *   (flow graph) and 330-332 (Fortran program in problem 5)                 *
 *   to get the inverse fft, change line 20 from                             *
 *                 w_imag[L] = -sin(PI/le1);                                 *
 *                          to                                               *
 *                 w_imag[L] = sin(PI/le1);                                  *
 *                                                                           *
 *   required constants:                                                     *
 *         #define      PI          3.14159265358979                         *
 *         #define      BLKSIZE     1024                                     *
 *         #define      LOGBLKSIZE  10                                       *
 *         #define      BLKSIZE_S   256                                      *
 *         #define      LOGBLKSIZE_S 8                                       *
 *                                                                           *
 *****************************************************************************/
#define      BLKSIZE_S   256
#define      LOGBLKSIZE_S 8

#define N 1024

void fft_r_1024(FLOAT x_real[BLKSIZE], FLOAT energy[BLKSIZE], FLOAT phi[BLKSIZE])
{
    static int     init=0;
    int i,j,L;
#define M LOGBLKSIZE
#define NV2 (N/2)
#define MM1 (M-1)
#define NM1 (N-1)

    FLOAT x_imag[BLKSIZE] = {{1}};		/* used in intermediate calc, starts 0 */
    static FLOAT w_real[LOGBLKSIZE] = {{1}}, w_imag[LOGBLKSIZE] = {{1}}; /* twiddle factors */

    if (init == 0)
    {
	memset((char *) w_real, 0, sizeof(w_real));  /* preset statics to 0 */
	memset((char *) w_imag, 0, sizeof(w_imag));  /* preset statics to 0 */
	for (L = 0; L < M; L++)
	{
	    int le = 1 << (M-L);
	    int le1 = le >> 1;
	    w_real[L]._f = cos(PI/le1);
	    w_imag[L]._f = -sin(PI/le1);
	}
	init = 1;
    }
    memset((char *)x_imag, 0, sizeof(x_imag));  /* preset to 0 (real input) */
    for (L = 0; L < MM1; L++)
    {
	FLOAT t_real, t_imag, u_real, u_imag;
	int le = 1 << (M-L);
	int le1 = le >> 1;
	u_real._i = fpFlt_1_;
	u_imag._i = const_0._i;
	for (j = 0; j < le1; j++)
	{
	    for (i = j; i < N; i += le)
	    {
		int ip = i + le1;
		t_real._i = fpAdd(x_real[i]._i, x_real[ip]._i);
		t_imag._i = fpAdd(x_imag[i]._i, x_imag[ip]._i);
		x_real[ip]._i = fpSub(x_real[i]._i, x_real[ip]._i);
		x_imag[ip]._i = fpSub(x_imag[i]._i, x_imag[ip]._i);
		x_real[i]._i = t_real._i;
		x_imag[i]._i = t_imag._i;
		t_real._i = x_real[ip]._i;
		x_real[ip]._i = fpSub(fpMul(x_real[ip]._i,u_real._i), fpMul(x_imag[ip]._i,u_imag._i));
		x_imag[ip]._i = fpAdd(fpMul(x_imag[ip]._i,u_real._i), fpMul(t_real._i,u_imag._i));
	    }
	    t_real._i = u_real._i;
	    u_real._i = fpSub(fpMul(u_real._i,w_real[L]._i), fpMul(u_imag._i,w_imag[L]._i));
	    u_imag._i = fpAdd(fpMul(u_imag._i,w_real[L]._i), fpMul(t_real._i,w_imag[L]._i));
	}
    }
    /* special case: L = M-1; all Wn = 1 */
    for (i = 0; i < N; i += 2)
    {
        static FLOAT tmpA = {0.0005};
	int ip = i + 1;
	FLOAT t_real, t_imag;
	t_real._i = fpAdd(x_real[i]._i, x_real[ip]._i);
	t_imag._i = fpAdd(x_imag[i]._i, x_imag[ip]._i);
	x_real[ip]._i = fpSub(x_real[i]._i, x_real[ip]._i);
	x_imag[ip]._i = fpSub(x_imag[i]._i, x_imag[ip]._i);
	x_real[i]._i = t_real._i;
	x_imag[i]._i = t_imag._i;
	energy[i]._i = fpAdd(fpMul(x_real[i]._i,x_real[i]._i), fpMul(x_imag[i]._i,x_imag[i]._i));
	if (fpLE(energy[i]._i, tmpA._i))
	{
	    phi[i]._i = const_0._i; energy[i]._i = tmpA._i;
	}
	else
	    phi[i]._f = atan2 (x_imag[i]._f, x_real[i]._f);
	energy[ip]._i = fpAdd(fpMul(x_real[ip]._i,x_real[ip]._i), fpMul(x_imag[ip]._i,x_imag[ip]._i));
	if (fpEQ(energy[ip]._i, fpFlt_0_))
	    phi[ip]._i = const_0._i;
	else
	    phi[ip]._f = atan2 (x_imag[ip]._f, x_real[ip]._f);
    }
//    if (sizeof(int) == sizeof(FLOAT))
    {
	/*
	 * This section reorders the data to the correct ordering.
	 * Use this section only if you need the FFT in complex number
	 * form (and in the correct ordering)
	 */
	int *xr = (int *)x_real, *e = (int *)energy, *p = (int *)phi;
	int i, j;
	j = 0;
	for (i = 0; i < NM1; i++)
	{
	    int k;
	    if (i < j)
	    {
		int t = xr[j];
		xr[j] = xr[i];
		xr[i] = t;
		/* reorder the energy and phase, phi */
		t = e[j];
		e[j] = e[i];
		e[i] = t;
		t = p[j];
		p[j] = p[i];
		p[i] = t;
	    }
	    k = NV2;
	    while (k <= j)
	    {
		j = j - k;
		k = k >> 1;
	    }
	    j = j + k;
	}
    }
//    else
//    {
//	int i, j;
//	j = 0;
//	for (i = 0; i < NM1; i++)
//	{
//	    int k;
//	    if (i < j)
//	    {
//		FLOAT t_real = x_real[j];
//		FLOAT t_imag = x_imag[j];
//		x_real[j] = x_real[i];
//		x_imag[j] = x_imag[i];
//		x_real[i] = t_real;
//		x_imag[i] = t_imag;
//		/* reorder the energy and phase, phi */
//		t_real = energy[j];
//		energy[j] = energy[i];
//		energy[i] = t_real;
//		t_real = phi[j];
//		phi[j] = phi[i];
//		phi[i] = t_real;
//	    }
//	    k = NV2;
//	    while (k <= j)
//	    {
//		j = j - k;
//		k = k >> 1;
//	    }
//	    j = j + k;
//	}
//    }
}
