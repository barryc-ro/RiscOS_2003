////////////////////////////////////////////////////////////////////////////
// musicin.c
//   heavily hacked PJG 15 Dec 1997 ... 29 Jan 1998

////////////////////////////////////////////////////////////////////////////
// Similarly to the mpadec.c code this has been munged to fit into replay
//   by removing all need for the Shared C library by linking with code
//   nicked from it. This is in the CLib directory.
// Similar debugging routines exist.
// This code was never optimised and runs in about the same way a snail
//   can't.
// It can, however compress layer I MPEGs even thought the decoder can't
//   read them.
// Again the original structure is left in but commented out so that it is
//   easy to see what I've changed to get it into a vaguely replay friendly
//   state.
// Since this code uses floating point stuff you'll be damned if you ever
//  try to run it in SVC mode. You have been warned!
//
// Pete Goodliffe (29 Jan 1998)

///////////////////////////////////////////
// Standard C routines used:
//     atoi
//     memset
//
// also in the (not used) main()
//     printf, exit, fopen, fread, fwrite, fclose


///////////////////////////////////////////
// debugging function declarations

//void write_string(char *str);
//void write_hex(int val);
//void write_newline(void);
//void border_green(void);
//void border_red(void);
//void border_blue(void);
//void border_brown(void);
//void mode_test(void);

/**********************************************************************
Copyright (c) 1991 MPEG/audio software simulation group, All Rights Reserved
musicin.c
**********************************************************************/

#include "mpaenc.h" // the interface this file implements
#include "common.h"
#include "encoder.h"
#include "tables.h" // now for table initialisation

//extern "C" {

/* Global variable definitions for "musicin.c" */

Bit_stream_struc   bs;

////////////////////////////////////////////////////////////////////////////
// these used to be in main(), but are now global for use in all functions
// in this file

// these are set to arbitrary values just to stop them appearing to the
// linker as zero init areas

FLOAT sb_sample[2][3][SCALE_BLOCK][SBLIMIT] = {{1}};
FLOAT j_sample[1][3][SCALE_BLOCK][SBLIMIT] = {{1}};
FLOAT win_que_actual[2*HAN_SIZE] = {{1}};
//FLOAT win_que[2][HAN_SIZE] = &win_que_actual;
FLOAT win_que[2][HAN_SIZE] = {{1}};
unsigned int subband[2][3][SCALE_BLOCK][SBLIMIT] = {1};

frame_params fr_ps;
layer info;
short *win_buf[2] = {(short*)1};
static short buffer[2][1152] = {1};
static unsigned int bit_alloc[2][SBLIMIT] = {1}, scfsi[2][SBLIMIT] = {1};
static unsigned int scalar[2][3][SBLIMIT] = {1}, j_scale[1][3][SBLIMIT] = {1};
static FLOAT ltmin[2][SBLIMIT] = {{1}}, lgmin[2][SBLIMIT] = {{1}}, max_sc[2][SBLIMIT] = {{1}};
FLOAT snr32[32] = {{1}};
short sam[2][1056] = {1};
int whole_SpF, extra_slot = 0;
double avg_slots_per_frame, frac_SpF, slot_lag;
int model, stereo, error_protection;
static unsigned int crc;
int i, j, k, adb;
unsigned long bitsPerSlot, samplesPerFrame, frameNum = 0;
unsigned long frameBits, sentBits = 0;


////////////////////////////////////////////////////////////////////////////
// parse_string, used by the initialisation routines

//static os_error error_replay_rate = {
//    0, "Invalid sample rate parameter string passed from ARMovie header.\n"
//};

static os_error error_token = {
    0, "Incorrect parameter token specified in parameter string.\n"
};

static os_error error_eof = {
    0, "End of parameter string reached before read whole parameter.\n"
};

static os_error error_l = {
    0, "Invalid layer specified in parameter string.\n"
};

static os_error error_l_3 = {
    0, "This codec does not support mpeg layer III audio.\n"
};

static os_error error_m_nochannels = {
    0, "Mode specified in parameter string invalid for mono encoding.\n"
};

static os_error error_m = {
    0, "Invalid mode specified in parameter string.\n"
};

static os_error error_p = {
    0, "Invalid psychoacoustic model number specified in parameter string.\n"
};

static os_error error_b = {
    0, "Invalid total bitrate specified in parameter string.\n"
};

static os_error error_d = {
    0, "Invalid emphasis specified in parameter string.\n"
};

static os_error error_c = {
    0, "Invalid copyright flag specified in parameter string.\n"
};

static os_error error_o = {
    0, "Invalid original flag specified in parameter string.\n"
};

static os_error error_e = {
    0, "Invalid error protection flag specified in parameter string.\n"
};

// used to avoid stdlib stuff if possible
int musicin_atoi(char *string) {
    int r = 0;
    while(*string >= '0' && *string <= '9') {
        r *= 10;
        r += *string - '0';
        string++;
    }
    return r;
}

static os_error *parse_strings(
    int replayRate,
    char *string,
    int noChannels,
    int layer
) {

   int brate, pos;

   // deal with the replay rate
   //   this is done by finding the nearest frequency to one of MPEG's
   //   standard one (i.e. a bit of a bodge)
   {
       #define abs(x) ((x < 0) ? -(x) : x)
       int delta, rr;
       rr = 32000; delta = abs(rr-replayRate);
       if (abs(replayRate-44100) < delta) {
           rr = 44100;
           delta = abs(rr-replayRate);
       }
       if (abs(replayRate-48000) < delta) {
           rr = 48000;
           delta = abs(rr-replayRate);
       }
       replayRate = rr;
       #undef abs
   }
//   if (replayRate != 32000 && replayRate != 44100 && replayRate != 48000)
//       return &error_replay_rate;
   info.sampling_frequency = SmpFrqIndex((long)(replayRate));

   // deal with layer number
   if (layer == 3)               return &error_l_3;
   if (layer != 1 && layer != 2) return &error_l;
   info.lay = layer;

   // check for a null parameter pointer
   if (string == 0) return NULL;

   // parse the string
   pos = 0;
   while (string[pos] != 0) {
       switch (string[pos++]) {

//           case 'l': // specify layer        // layer now not set through
//               switch (string[pos++]) {      // parameter string, but
//                   case '1':                 // implicit in the format 2
//                       info.lay = 1;         // compressor type
//                       break;
//                   case '2':
//                       info.lay = 2;
//                       break;
//                   case '3':
//                       return &error_l_3;
//                       break;
//                   case 0:
//                       return &error_eof;
//                   default:
//                       return &error_l;
//               }
//               break;

           case 'm': // specify mode
               if (noChannels == 1) return &error_m_nochannels;
               switch (string[pos++]) {
                   case 'j':
                       info.mode = MPG_MD_JOINT_STEREO;
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_m;
               }
               break;

           case 'p': // specify psychoacoustic model
               switch (string[pos++]) {
                   case '1':
                       model = 1;
                       break;
                   case '2':
                       model = 2;
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_p;
               }
               break;

           // case 's' ??? should be inferred from the header ...

           case 'b': // specify total bitrate, irrespective of the mode
               if (string[pos] == 0) return &error_eof;
               brate = musicin_atoi(string+pos);
               if(
                   (info.bitrate_index = BitrateIndex(info.lay, brate))
                   < 0
               ) return &error_b;
               while (string[pos] >= '0' && string[pos] <= '9') pos++;
               break;

           case 'd': // specify emphasis
               switch (string[pos++]) {
                   case 'n':
                       info.emphasis = 0;
                       break;
                   case '5':
                       info.emphasis = 1;
                       break;
                   case 'c':
                       info.emphasis = 3;
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_d;
               }
               break;

           case 'c': // specify copyright flag
               switch (string[pos++]) {
                   case '0':
                       info.copyright = 0;
                       break;
                   case '1':
                       info.copyright = 1;
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_c;
               }
               break;

           case 'o': // specify original flag
               switch (string[pos++]) {
                   case '0':
                       info.original = 0;
                       break;
                   case '1':
                       info.original = 1;
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_o;
               }
               break;

           case 'e': // specify error protection flag
               switch (string[pos++]) {
                   case '0':
                       info.error_protection = FALSE;
                       break;
                   case '1':
                       info.error_protection = TRUE;
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_e;
               }
               break;

           default:
               return &error_token;

       }
   }
   return NULL;
}


////////////////////////////////////////////////////////////////////////////
// Initialisation routines

static void mpeg_generic_init_pre_parse() {

    /* clear buffers */
    memset((char *) buffer, 0, sizeof(buffer));
    memset((char *) bit_alloc, 0, sizeof(bit_alloc));
    memset((char *) scalar, 0, sizeof(scalar));
    memset((char *) j_scale, 0, sizeof(j_scale));
    memset((char *) scfsi, 0, sizeof(scfsi));
    memset((char *) ltmin, 0, sizeof(ltmin));
    memset((char *) lgmin, 0, sizeof(lgmin));
    memset((char *) max_sc, 0, sizeof(max_sc));
    memset((char *) snr32, 0, sizeof(snr32));
    memset((char *) sam, 0, sizeof(sam));

    // new addition due to the nasty C++ real class
    construct_tables_1th0();
    construct_tables_1th1();
    construct_tables_1th2();
    construct_tables_2th0();
    construct_tables_2th1();
    construct_tables_2th2();

    fr_ps.header = &info;
    fr_ps.tab_num = -1;             /* no table loaded */
    fr_ps.alloc = NULL;
    info.version = MPEG_AUDIO_ID;

    // preset parsing defaults
    // i.e. everything except sample rate and mono/stereo
    info.lay = DFLT_LAY; // default layer
    model = DFLT_PSY;
    info.bitrate_index = BitrateIndex(info.lay, DFLT_BRT);
    info.emphasis = 0;
    info.copyright = 0; info.original = 0; info.error_protection = FALSE;
}

static void mpeg_generic_init_post_parse() {

    hdr_to_frps(&fr_ps);
    stereo = fr_ps.stereo;
    error_protection = info.error_protection;

    if (info.lay == 1) { bitsPerSlot = 32; samplesPerFrame = 384;  }
    else               { bitsPerSlot = 8;  samplesPerFrame = 1152; }
    /* Figure average number of 'slots' per frame. */
    /* Bitrate means TOTAL for both channels, not per side. */
    avg_slots_per_frame = ((double)samplesPerFrame /
                           s_freq[info.sampling_frequency]) *
                          ((double)bitrate[info.lay-1][info.bitrate_index] /
                           (double)bitsPerSlot);
    whole_SpF = (int) avg_slots_per_frame;
    frac_SpF  = avg_slots_per_frame - (double)whole_SpF;
    slot_lag  = -frac_SpF;
    if (frac_SpF == 0) info.padding = 0;

}

os_error *mpeg_mono_entry0(int replayRate, char *parameterString, int l) {

   os_error *error;
   mpeg_generic_init_pre_parse();
   info.mode = MPG_MD_MONO;
   info.mode_ext = 0;

   // parse parameter string
   error = parse_strings(replayRate, parameterString, 1, l);
   if (!error) mpeg_generic_init_post_parse();
   return error;
}


int mpeg_mono_framesize(void) {
    return (info.lay == 1) ? 384 : 1152;
}


os_error *mpeg_stereo_entry0(int replayRate, char *parameterString, int l) {

   os_error *error;
   mpeg_generic_init_pre_parse();
   info.mode = MPG_MD_STEREO;
   info.mode_ext = 0;

   // parse parameter string
   error = parse_strings(replayRate, parameterString, 2, l);
   if (!error) mpeg_generic_init_post_parse();
   return error;
}


int mpeg_stereo_framesize(void) {
    //return (info.lay == 1) ? 768 : 2304; this is it is in total
    return (info.lay == 1) ? 384 : 1152; // this since it is /per channel/
}


int current_offset; // global that was static in mpeg_coder

void mpeg_reset() {
    current_offset = 0; // meant to allow resetting Encode(x2) by recalling
                        // entry 4. It doesn't seem to work though!
}

////////////////////////////////////////////////////////////////////////////
// mpeg_coder
//     returns the number of bytes written

int mpeg_coder(short indata[], unsigned char outdata[]) {

// this is now global, so that I can reset it...
//    (for all the good it does me)
//    static int current_offset = 0;

    set_bit_stream(outdata, 2*samplesPerFrame*stereo, current_offset);
    massage_audio(indata, buffer, stereo, info.lay);

//    while (get_audio(musicin, buffer, num_samples, stereo, info.lay) > 0) {

       win_buf[0] = &buffer[0][0];
       win_buf[1] = &buffer[1][0];
       if (frac_SpF != 0) {
          if (slot_lag > (frac_SpF-1.0) ) {
             slot_lag -= frac_SpF;
             extra_slot = 0;
             info.padding = 0;
             /*  printf("No padding for this frame\n"); */
          }
          else {
             extra_slot = 1;
             info.padding = 1;
             slot_lag += (1-frac_SpF);
             /*  printf("Padding for this frame\n");    */
          }
       }
       adb = (whole_SpF+extra_slot) * bitsPerSlot;

       switch (info.lay) {

/***************************** Layer I **********************************/

          case 1 :
             for (j=0;j<SCALE_BLOCK;j++)
             for (k=0;k<stereo;k++) {
                window_subband(&win_buf[k], &win_que[k][0], k);
                filter_subband(&win_que[k][0], &sb_sample[k][0][j][0]);
             }

             I_scale_factor_calc(sb_sample, scalar, stereo);
             if(fr_ps.actual_mode == MPG_MD_JOINT_STEREO) {
                I_combine_LR(sb_sample, j_sample[0]);
                I_scale_factor_calc(j_sample, j_scale, 1);
             }

             put_scale(scalar, &fr_ps, max_sc);

             if (model == 1) I_Psycho_One(buffer, max_sc, ltmin, &fr_ps);
             else {
                for (k=0;k<stereo;k++) {
                   FLOAT val;
                   val._f = s_freq[info.sampling_frequency]*1000;
                   psycho_anal(&buffer[k][0],&sam[k][0], k, info.lay, snr32,
                               val);
                   for (i=0;i<SBLIMIT;i++) ltmin[k][i]._i = snr32[i]._i;
                }
             }

             I_main_bit_allocation(ltmin, bit_alloc, &adb, &fr_ps);

             if (error_protection) I_CRC_calc(&fr_ps, bit_alloc, &crc);

             encode_info(&fr_ps, &bs);

             if (error_protection) encode_CRC(crc, &bs);

             I_encode_bit_alloc(bit_alloc, &fr_ps, &bs);
             I_encode_scale(scalar, bit_alloc, &fr_ps, &bs);
             I_subband_quantization(scalar, sb_sample, j_scale[0], j_sample[0],
                                    bit_alloc, subband, &fr_ps);
             I_sample_encoding(subband, bit_alloc, &fr_ps, &bs);
             for (i=0;i<adb;i++) put1bit(&bs, 0);
          break;

/***************************** Layer 2 **********************************/

          case 2 :
             for (i=0;i<3;i++) for (j=0;j<SCALE_BLOCK;j++)
                for (k=0;k<stereo;k++) {
                   window_subband(&win_buf[k], &win_que[k][0], k);
                   filter_subband(&win_que[k][0], &sb_sample[k][i][j][0]);
                }

                II_scale_factor_calc(sb_sample, scalar, stereo, fr_ps.sblimit);
                pick_scale(scalar, &fr_ps, max_sc);
                if(fr_ps.actual_mode == MPG_MD_JOINT_STEREO) {
                   II_combine_LR(sb_sample, j_sample[0], fr_ps.sblimit);
                   II_scale_factor_calc(j_sample, j_scale, 1, fr_ps.sblimit);
                }       /* this way we calculate more mono than we need */
                        /* but it is cheap */

                if (model == 1) II_Psycho_One(buffer, max_sc, ltmin, &fr_ps);
                else {
                   for (k=0;k<stereo;k++) {
                      FLOAT val;
                      val._f = s_freq[info.sampling_frequency]*1000;
                      psycho_anal(&buffer[k][0],&sam[k][0], k,
                                 info.lay, snr32,
                                 val);
                      for (i=0;i<SBLIMIT;i++) ltmin[k][i]._i = snr32[i]._i;
                   }
                }

                II_transmission_pattern(scalar, scfsi, &fr_ps);
                II_main_bit_allocation(ltmin, scfsi, bit_alloc, &adb, &fr_ps);

                if (error_protection)
                   II_CRC_calc(&fr_ps, bit_alloc, scfsi, &crc);

                encode_info(&fr_ps, &bs);

                if (error_protection) encode_CRC(crc, &bs);

                II_encode_bit_alloc(bit_alloc, &fr_ps, &bs);
                II_encode_scale(bit_alloc, scfsi, scalar, &fr_ps, &bs);
                II_subband_quantization(scalar, sb_sample, j_scale[0],
                                      j_sample[0], bit_alloc, subband, &fr_ps);
                II_sample_encoding(subband, bit_alloc, &fr_ps, &bs);
                for (i=0;i<adb;i++) put1bit(&bs, 0);
          break;

/***************************** Layer 3 **********************************/

          case 3 : break;

       }

       frameBits = sstell(&bs) - sentBits;
//       if(frameBits%bitsPerSlot)   /* a program failure */
//          fprintf(stderr,"Sent %ld bits = %ld slots plus %ld\n",
//                  frameBits, frameBits/bitsPerSlot,
//                  frameBits%bitsPerSlot);
       sentBits += frameBits;

//    }

    {
        // we make the rash assumtion (???) here that a whole number
        // of bytes will have been produced (well, its not rash at all)
        int old_offset = current_offset;
        current_offset = sstell(&bs);
        return (current_offset-old_offset)/8;
    }

}


////////////////////////////////////////////////////////////////////////////
// main()
//     'never' used but it's here to test the encoder in a nicely bodgy way

#ifdef COMMANDLINEVERSION
int main(int argc, char **argv) {

    // built for stereo encoding

    FILE *infile, *outfile;
    unsigned char outbuffer[1152*2*2] = "no zero init";
    short inbuffer[2*2*1152] = {100};
    int outsize;
    os_error *error;
    int replayRate = 44100;
    char *paramString ="b32";
    int frameSize;

    if (argc != 3) {
        printf("useage: bodge <bodge-inname> <bodge-outname>\n");
        printf("        don't get it wrong in future\n\n");
        exit(1);
    }

    printf("Initialising...\n\n");

    // infile
    infile  = fopen(argv[1], "rb");
    outfile = fopen(argv[2], "wb");
    if (!infile || !outfile) {
        printf("fell over on input/output\n\n");
        exit(1);
    }

    // encoding
    if (error = mpeg_mono_entry0(replayRate, paramString, 2)) {
        printf("error: %s\n", error->errmess);
        exit(1);
    }

    frameSize = mpeg_mono_framesize();

    printf("frame size is %i\n\n", frameSize);

    mpeg_reset();
    printf("Called mpeg_reset\n\n");

    printf("Encoding...\n");
    while (fread(inbuffer, 2, frameSize, infile)) {
        outsize = mpeg_coder(inbuffer, outbuffer);
        printf(".");
        fwrite(outbuffer, 1, outsize, outfile);
    }

    printf("Done\n");

    fclose(infile);
    fclose(outfile);

    return 0;

}
#endif // COMMANDLINEVERSION

//} // end extern "C"
