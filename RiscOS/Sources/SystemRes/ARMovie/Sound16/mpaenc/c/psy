/**********************************************************************
Copyright (c) 1991 MPEG/audio software simulation group, All Rights Reserved
psy.c
**********************************************************************/

///////////////////////////////////////////
// Standard C routines used:
//     cos, sin
//     log, exp
//     fabs, sqrt

/**********************************************************************
 * MPEG/audio coding/decoding software, work in progress              *
 *   NOT for public distribution until verified and approved by the   *
 *   MPEG/audio committee.  For further information, please contact   *
 *   Davis Pan, 508-493-2241, e-mail: pan@3d.enet.dec.com             *
 *                                                                    *
 * VERSION 3.9                                                        *
 *   changes made since last update:                                  *
 *   date   programmers         comment                               *
 * 2/25/91  Davis Pan           start of version 1.0 records          *
 * 5/10/91  W. Joseph Carter    Ported to Macintosh and Unix.         *
 * 7/10/91  Earle Jennings      Ported to MsDos.                      *
 *                              replace of floats with FLOAT          *
 * 2/11/92  W. Joseph Carter    Fixed mem_alloc() arg for "absthr".   *
 * 7/24/92  M. Iwadare          HANN window coefficients modified.    *
 * 7/27/92  Masahiro Iwadare    Bug fix, FFT modification for Layer 3 *
 * 7/27/92  Masahiro Iwadare    Bug fix, "new", "old", and "oldest"   *
 *                              updates                               *
 * 8/07/92  Mike Coleman        Bug fix, read_absthr()                *
 **********************************************************************/

#include "common.h"
#include "encoder.h"
#include "tables.h"
#include "constants.h"

// constants
static FLOAT                 global_const_tmpA = {BLKSIZE};
#define fpFlt_BLKSIZE_       global_const_tmpA._i
static FLOAT                 global_const_tmpB = {1};
#define fpFlt_1_             global_const_tmpB._i
static FLOAT                 global_const_tmpC = {8};
#define fpFlt_8_             global_const_tmpC._i
static FLOAT                 global_const_tmpD = {-100};
#define fpFlt_minus100_      global_const_tmpD._i
static FLOAT                 global_const_tmpE = {2};
#define fpFlt_2_             global_const_tmpE._i
static FLOAT                 global_const_tmpF = {0};
#define fpFlt_0_             global_const_tmpF._i
static FLOAT                 global_const_tmpG = {LXMIN};
#define fpFlt_LXMIN_         global_const_tmpG._i
static FLOAT                 global_const_tmpH = {17};
#define fpFlt_17_            global_const_tmpH._i

void psycho_anal(short int *buffer,short int savebuf[1056],
		 int chn, int lay, FLOAT snr32[32], FLOAT sfreq)
{
    unsigned int   i, j, k;
    FLOAT          r_prime, phi_prime;
    FLOAT          freq_mult, bval_lo, minthres, sum_energy;
    FLOAT         tb, temp1, temp2, temp3;

    /* The static variables "r", "phi_sav", "new", "old" and "oldest" have    */
    /* to be remembered for the unpredictability measure.  For "r" and        */
    /* "phi_sav", the first index from the left is the channel select and     */
    /* the second index is the "age" of the data.                             */

    // trailing underscore after new for C++ compilation
    static int     new_ = 0, old = 1, oldest = 0;
    static int     init = 0, flush, sync_flush, syncsize, sfreq_idx;

    /* The following static variables are constants.                           */

    static FLOAT  nmt; // set in init PJG 9 Feb 98

    static float   crit_band_float[27] =
    {
	0,  100,  200, 300, 400, 510, 630,  770,
	920, 1080, 1270,1480,1720,2000,2320, 2700,
	3150, 3700, 4400,5300,6400,7700,9500,12000,
	15500, 25000, 30000
    };
    static FLOAT *crit_band = (FLOAT*) crit_band_float;

    static float   bmax_float[27] =
    {
	20.0, 20.0, 20.0, 20.0, 20.0, 17.0, 15.0,
	10.0,  7.0,  4.4,  4.5,  4.5,  4.5,  4.5,
	4.5,  4.5,  4.5,  4.5,  4.5,  4.5,  4.5,
	4.5,  4.5,  4.5,  3.5,  3.5,  3.5
    };
    static FLOAT *bmax = (FLOAT*) bmax_float;

    // all these assignments remove zero init PJG 18 Dec 1997

    FCB grouped_c = {{1}}, grouped_e = {{1}}, nb = {{1}}, cb = {{1}}, ecb = {{1}}, bc = {{1}};
    FBLK wsamp_r = {{1}}, phi = {{1}}, energy = {{1}};
    FHBLK c = {{1}}, fthr = {{1}};
    F32 snrtmp[2] = {{1}};

    static ICB numlines = {1};
    static IHBLK partition = {1};
    static FCB cbval = {{1}}, rnorm = {{1}};
    static FBLK window = {{1}};
//    static FHBLK absthr; PJG 16 Dec 1997
    FLOAT *absthr; // PJG 16 Dec 1997
    static DCB tmn = {{1}};
    static FCBCB s = {{1}};
    static F2HBLK   lthr = {{1}};
    static F22HBLK  r = {{1}}, phi_sav = {{1}};

    if(init==0)
    {
        nmt._f = 5.5;
	i = sfreq._f + 0.5;
	switch(i)
	{
	  case 32000: sfreq_idx = 0; break;
	  case 44100: sfreq_idx = 1; break;
	  case 48000: sfreq_idx = 2; break;
//ERR	  default:    printf("error, invalid sampling frequency: %d Hz\n",i);
//	    exit(-1);
	}
//	printf("absthr[][] sampling frequency index: %d\n",sfreq_idx);
	read_absthr(&absthr, sfreq_idx); // PJG 16 Dec 1997
	if(lay==1)
	{
	    flush = 384;
	    syncsize = 1024;
	    sync_flush = 576;
	}
	else
	{
	    flush = 384*3/2;
	    syncsize = 1056;
	    sync_flush = syncsize - flush;
	}
	/* calculate HANN window coefficients */
	/*   for(i=0;i<BLKSIZE;i++)window[i]=0.5*(1-cos(2.0*PI*i/(BLKSIZE-1.0))); */
	for(i=0;i<BLKSIZE;i++)
	    window[i]._f = 0.5*(1-cos(2.0*PI*(i-0.5)/BLKSIZE));
	/* reset states used in unpredictability measure */
	for(i=0;i<HBLKSIZE;i++)
	{
	    r[0][0][i]._i=r[1][0][i]._i=r[0][1][i]._i=r[1][1][i]._i=const_0._i;
	    phi_sav[0][0][i]._i=phi_sav[1][0][i]._i=const_0._i;
	    phi_sav[0][1][i]._i=phi_sav[1][1][i]._i=const_0._i;
	    lthr[0][i]._f = 60802371420160.0;
	    lthr[1][i]._f = 60802371420160.0;
	}
	/*****************************************************************************
	 * Initialization: Compute the following constants for use later             *
	 *    partition[HBLKSIZE] = the partition number associated with each        *
	 *                          frequency line                                   *
	 *    cbval[CBANDS]       = the center (average) bark value of each          *
	 *                          partition                                        *
	 *    numlines[CBANDS]    = the number of frequency lines in each partition  *
	 *    tmn[CBANDS]         = tone masking noise                               *
	 *****************************************************************************/
	/* compute fft frequency multiplicand */
	freq_mult._i = fpDiv(sfreq._i,fpFlt_BLKSIZE_);

	/* calculate fft frequency, then bval of each line (use fthr[] as tmp storage)*/
	for(i=0;i<HBLKSIZE;i++)
	{
	    temp1._i = fpMul(fpFlt(i),freq_mult._i);
	    j = 1;
	    while(fpGT(temp1._i,crit_band[j]._i))
		j++;
	    fthr[i]._i=fpAdd(fpFlt(j-1),fpDiv(fpSub(temp1._i,crit_band[j-1]._i),fpSub(crit_band[j]._i,crit_band[j-1]._i)));
	}
	partition[0] = 0;
	/* temp2 is the counter of the number of frequency lines in each partition */
	temp2._i = const_1._i;
	cbval[0]._i=fthr[0]._i;
	bval_lo._i=fthr[0]._i;
	for(i=1;i<HBLKSIZE;i++)
	{
	    static FLOAT tmpA = {0.33};
	    if(fpGT(fpSub(fthr[i]._i,bval_lo._i),tmpA._i))
	    {
		partition[i]=partition[i-1]+1;
		cbval[partition[i-1]]._i = fpDiv(cbval[partition[i-1]]._i,temp2._i);
		cbval[partition[i]]._i = fthr[i]._i;
		bval_lo._i = fthr[i]._i;
		numlines[partition[i-1]] = fpFix(temp2._i);
		temp2._i = const_1._i;
	    }
	    else
	    {
		partition[i]=partition[i-1];
		cbval[partition[i]]._i = fpAdd(cbval[partition[i]]._i, fthr[i]._i);
		temp2._i = fpAdd(temp2._i, fpFlt_1_);
	    }
	}
	numlines[partition[i-1]] = fpFix(temp2._i);
	cbval[partition[i-1]]._i = fpDiv(cbval[partition[i-1]]._i,temp2._i);

	/************************************************************************
	 * Now compute the spreading function, s[j][i], the value of the spread-*
	 * ing function, centered at band j, for band i, store for later use    *
	 ************************************************************************/
	for(j=0;j<CBANDS;j++)
	{
	    for(i=0;i<CBANDS;i++)
	    {
	        static FLOAT tmpA = {1.05};
	        static FLOAT tmpB = {0.5};
	        static FLOAT tmpC = {2.5};
	        static FLOAT tmpD = {0.474};
	        static FLOAT tmpE = {LN_TO_LOG10};
		temp1._i = fpMul(fpSub(cbval[i]._i,cbval[j]._i),tmpA._i);
		if(fpGE(temp1._i,tmpB._i) && fpLE(temp1._i,tmpC._i))
		{
		    temp2._i = fpSub(temp1._i, tmpB._i);
		    temp2._i = fpMul(fpFlt_8_, fpSub(fpMul(temp2._i,temp2._i), fpMul(fpFlt_2_,temp2._i)));
		}
		else
		    temp2._i = const_0._i;
		temp1._i = fpAdd(temp1._i, tmpD._i);
		temp3._f = 15.811389+7.5*temp1._f-17.5*sqrt((float) (1.0+temp1._f*temp1._f));
		if(fpLE(temp3._i, fpFlt_minus100_))
		    s[i][j]._i = const_0._i;
		else
		{
		    temp3._i = fpMul(fpAdd(temp2._i, temp3._i), tmpE._i);
		    s[i][j]._f = exp(temp3._f);
		}
	    }
	}

	/* Calculate Tone Masking Noise values */
	for(j=0;j<CBANDS;j++)
	{
	    static FLOAT tmpA = {15.5};
	    static FLOAT tmpB = {24.5};
	    temp1._i = fpAdd(tmpA._i, cbval[j]._i);
	    tmn[j]._i = fpGT(temp1._i,tmpB._i) ? temp1._i : tmpB._i;
	    /* Calculate normalization factors for the net spreading functions */
	    rnorm[j]._i = const_0._i;
	    for(i=0;i<CBANDS;i++)
	    {
		rnorm[j]._i = fpAdd(rnorm[j]._i, s[j][i]._i);
	    }
	}
	init = 1;
    }
    /************************* End of Initialization *****************************/

    switch(lay)
    {
      case 1:
      case 2:

	for(i=0; i<lay; i++)
	{
	    /*****************************************************************************
	     * Net offset is 480 samples (1056-576) for layer 2; this is because one must*
	     * stagger input data by 256 samples to synchronize psychoacoustic model with*
	     * filter bank outputs, then stagger so that center of 1024 FFT window lines *
	     * up with center of 576 "new" audio samples.                                *
	     *                                                                           *
	     * For layer 1, the input data still needs to be staggered by 256 samples,   *
	     * then it must be staggered again so that the 384 "new" samples are centered*
	     * in the 1024 FFT window.  The net offset is then 576 and you need 448 "new"*
	     * samples for each iteration to keep the 384 samples of interest centered   *
	     *****************************************************************************/
	    for(j=0; j<syncsize; j++)
	    {
		if(j<(sync_flush))
		    savebuf[j] = savebuf[j+flush];
		else
		    savebuf[j] = *buffer++;
		if(j<BLKSIZE)
		{
		    /**window data with HANN window**/
		    wsamp_r[j]._i = fpMul(window[j]._i,fpFlt(savebuf[j]));
		}
	    }
	    /**Compute FFT**/
	    fft_r_1024(wsamp_r,energy,phi);

	    /*****************************************************************************
	     * calculate the unpredictability measure, given energy[f] and phi[f]        *
	     *****************************************************************************/
	    /*only update data "age" pointers after you are done with both channels      */
	    /*for layer 1 computations, for the layer 2 float computations, the pointers */
	    /*are reset automatically on the second pass                                 */
	    if(lay==2 || (lay==1 && chn==0) )
	    {
		if(new_==0)
		{
		    new_ = 1; oldest = 1;
		}
		else
		{
		    new_ = 0; oldest = 0;
		}
		if(old==0) old = 1; else old = 0;
	    }
	    for(j=0; j<HBLKSIZE; j++)
	    {
	        static FLOAT tmpA, tmpB;
		r_prime._i = fpSub(fpMul(fpFlt_2_, r[chn][old][j]._i), r[chn][oldest][j]._i);
		phi_prime._i = fpSub(fpMul(fpFlt_2_, phi_sav[chn][old][j]._i), phi_sav[chn][oldest][j]._i);
		r[chn][new_][j]._f = sqrt((float) energy[j]._f);
		phi_sav[chn][new_][j]._i = phi[j]._i;
		//temp1._f=r[chn][new_][j]._f * cos((float) phi[j]._f) - r_prime._f * cos((float) phi_prime._f);
		tmpA._f=cos((float) phi[j]._f);    tmpA._i=fpMul(r[chn][new_][j]._i,tmpA._i);
		tmpB._f=cos((float) phi_prime._f); tmpB._i=fpMul(r_prime._i,tmpB._i);
		temp1._i=fpSub(tmpA._i, tmpB._i);
		//temp2._f=r[chn][new_][j]._f * sin((float) phi[j]._f) - r_prime._f * sin((float) phi_prime._f);
		tmpA._f=sin((float) phi[j]._f);    tmpA._i=fpMul(r[chn][new_][j]._i,tmpA._i);
		tmpB._f=sin((float) phi_prime._f); tmpB._i=fpMul(r_prime._i,tmpB._i);
		temp2._i=fpSub(tmpA._i,tmpB._i);
		//temp3._f=r[chn][new_][j]._f + fabs((float)r_prime._f);
		tmpA._f=fabs((float)r_prime._f);
		temp3._i=fpAdd(r[chn][new_][j]._i,tmpA._i);
		if(fpNE(temp3._i, fpFlt_0_)) {
		  tmpA._i=fpAdd(fpMul(temp1._i,temp1._i), fpMul(temp2._i,temp2._i));
		  tmpA._f=sqrt(tmpA._f);
		  c[j]._i=fpDiv(tmpA._i, temp3._i);
		}
		else c[j]._i = const_0._i;
	    }

	    /*****************************************************************************
	     * Calculate the grouped, energy-weighted, unpredictability measure,         *
	     * grouped_c[], and the grouped energy. grouped_e[]                          *
	     *****************************************************************************/
	    for(j=1;j<CBANDS;j++)
	    {
		grouped_e[j]._i = const_0._i;
		grouped_c[j]._i = const_0._i;
	    }
	    grouped_e[0]._i = energy[0]._i;
	    grouped_c[0]._i = fpMul(energy[0]._i, c[0]._i);
	    for(j=1;j<HBLKSIZE;j++)
	    {
		grouped_e[partition[j]]._i = fpAdd(grouped_e[partition[j]]._i, energy[j]._i);
		grouped_c[partition[j]]._i = fpAdd(grouped_c[partition[j]]._i, fpMul(energy[j]._i,c[j]._i));
	    }

	    /*****************************************************************************
	     * convolve the grouped energy-weighted unpredictability measure             *
	     * and the grouped energy with the spreading function, s[j][k]               *
	     *****************************************************************************/
	    for(j=0;j<CBANDS;j++)
	    {
		ecb[j]._i = const_0._i;
		cb[j]._i = const_0._i;
		for(k=0;k<CBANDS;k++)
		{
		    if(fpNE(s[j][k]._i, fpFlt_0_))
		    {
			ecb[j]._i = fpAdd(ecb[j]._i, fpMul(s[j][k]._i,grouped_e[k]._i));
			cb[j]._i = fpAdd(cb[j]._i, fpMul(s[j][k]._i,grouped_c[k]._i));
		    }
		}
		if(fpNE(ecb[j]._i, fpFlt_0_))
		    cb[j]._i = fpDiv(cb[j]._i,ecb[j]._i);
		else cb[j]._i = const_0._i;
	    }

	    /*****************************************************************************
	     * Calculate the required SNR for each of the frequency partitions           *
	     *         this whole section can be accomplished by a table lookup          *
	     *****************************************************************************/
	    for(j=0;j<CBANDS;j++)
	    {
	        static FLOAT tmpA = {0.05};
	        static FLOAT tmpB = {0.5};
		if(fpLT(cb[j]._i,tmpA._i))
		    cb[j]._i=tmpA._i;
		else if(fpGT(cb[j]._i,tmpB._i))
		    cb[j]._i=tmpB._i;
		tb._f = -0.434294482*log((float) cb[j]._f)-0.301029996;
		bc[j]._i = fpAdd(fpMul(tmn[j]._i,tb._i), fpMul(nmt._i,fpSub(fpFlt_1_,tb._i)));
		k = cbval[j]._f + 0.5;
		bc[j]._i = fpGT(bc[j]._i, bmax[k]._i) ? bc[j]._i : bmax[k]._i;
		bc[j]._f = exp((float) -bc[j]._f*LN_TO_LOG10);
	    }

	    /*****************************************************************************
	     * Calculate the permissible noise energy level in each of the frequency     *
	     * partitions. Include absolute threshold and pre-echo controls              *
	     *         this whole section can be accomplished by a table lookup          *
	     *****************************************************************************/
	    for(j=0;j<CBANDS;j++)
		if(rnorm[j]._f && numlines[j])
		    nb[j]._i = fpDiv(fpMul(ecb[j]._i,bc[j]._i), fpMul(rnorm[j]._i,fpFlt(numlines[j])));
		else
		    nb[j]._i = const_0._i;
	    for(j=0;j<HBLKSIZE;j++)
	    {
		/*temp1 is the preliminary threshold */
		temp1._i=nb[partition[j]]._i;
		temp1._i=fpGT(temp1._i,absthr[j]._i)?temp1._i:absthr[j]._i;
		/*do not use pre-echo control for layer 2 because it may do bad things to the*/
		/*  MUSICAM bit allocation algorithm                                         */
		if(lay==1)
		{
		    static FLOAT tmpA = {0.00316};
		    fthr[j]._i = fpLT(temp1._i, lthr[chn][j]._i) ? temp1._i : lthr[chn][j]._i;
		    temp2._i = fpMul(temp1._i, tmpA._i);
		    if (fpGT(temp2._i, fthr[j]._i))
			fthr[j]._i = temp2._i;
		}
		else
		    fthr[j]._i = temp1._i;
		lthr[chn][j]._i = fpMul(fpFlt_LXMIN_, temp1._i);
	    }

	    /*****************************************************************************
	     * Translate the 512 threshold values to the 32 filter bands of the coder    *
	     *****************************************************************************/
	    for(j=0;j<193;j += 16)
	    {
		sum_energy._i = const_0._i;
		minthres._i = fthr[j+0]._i;
		for(k=1;k<17;k++)
		{
		    if(fpGT(minthres._i,fthr[j+k]._i))
			minthres._i = fthr[j+k]._i;
		    sum_energy._i = fpAdd(sum_energy._i, energy[j+k]._i);
		}
		snrtmp[i][j/16]._i = fpDiv(sum_energy._i, fpMul(minthres._i, fpFlt_17_));
		snrtmp[i][j/16]._f = 4.342944819 * log((float)snrtmp[i][j/16]._f);
	    }
	    for(j=208;j<(HBLKSIZE-1);j += 16)
	    {
		minthres._i = const_0._i;
		sum_energy._i = const_0._i;
		for(k=0;k<17;k++)
		{
		    minthres._i = fpAdd(minthres._i, fthr[j+k]._i);
		    sum_energy._i = fpAdd(sum_energy._i, energy[j+k]._i);
		}
		snrtmp[i][j/16]._i = fpDiv(sum_energy._i, minthres._i);
		snrtmp[i][j/16]._f = 4.342944819 * log((float)snrtmp[i][j/16]._f);
	    }

	    /*****************************************************************************
	     * End of Psychoacuostic calculation loop                                    *
	     *****************************************************************************/
	}
	for (i=0; i<32; i++)
	{
	    if(lay==2)
		snr32[i]._i=fpGT(snrtmp[0][i]._i,snrtmp[1][i]._i)?snrtmp[0][i]._i:snrtmp[1][i]._i;
	    else
		snr32[i]._i=snrtmp[0][i]._i;
	}
	break;
//ERR      case 3:
//	printf("layer 3 is not currently supported\n");
//	break;
//      default:
//	printf("error, invalid MPEG/audio coding layer: %d\n",lay);
    }

}

/******************************************************************************
routine to read in absthr table from a file.
******************************************************************************/

void read_absthr(FLOAT **absthr,int table) // added a '*'
{
// FILE *fp;
// long j,index;
// FLOAT a;
// char t[80];
// char ta[16];
//
// strcpy( ta, "absthr_0" );
//
// switch(table){
//    case 0 : ta[7] = '0';
//             break;
//    case 1 : ta[7] = '1';
//             break;
//    case 2 : ta[7] = '2';
//             break;
//    default : printf("absthr table: Not valid table number\n");
// }
// if(!(fp = OpenTableFile(ta) ) ){
//    printf("Please check %s table\n", ta);
//    exit(1);
// }
// fgets(t, 150, fp);
// sscanf(t, "table %ld", &index);
// if(index != table){
//    printf("error in absthr table %s",ta);
//    exit(1);
// }
// for(j=0; j<HBLKSIZE; j++){
//    fgets(t,80,fp);
//    sscanf(t,"%f", &a);
//    absthr[j] =  a;
// }
// fclose(fp);

 switch(table){
    case 0 : *absthr = tables_absthr_0;
             break;
    case 1 : *absthr = tables_absthr_1;
             break;
    case 2 : *absthr = tables_absthr_2;
             break;
//ERR    default : printf("absthr table: Not valid table number\n");
//              exit(1);
 }
}
