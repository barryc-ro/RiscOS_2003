;**************************************************************************
;
;  File:        s.Decompress.qtima4_2
;
;  Description: Type 2 QTIMA4 decompression bobbins
;
;  Version:     0.0 05 Jul 2001
;
;  Author:      Robin Watts (robin@wss.co.uk)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;    5 Jul 2001   Robin Watts           Created from Pace adpcm original
;					and PHBGs BASIC assembler version.
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point


;**************************************************************************
; adpcm decompression code

decompress

	; adpcm decoding
	; IN:  r0 = Source
	;      r1 = Length of source in bytes
	;      r3 = Destination
	; OUT: r1 = length of output produced in bytes
	;      all registers preserved

	stmdb	r13!, {r14}
	stmdb	r13!, {r0-r12}

	LDR	R4,[R0,#4]	; R4 = count of samples

	CMP	R4,#0		; Just in case...
	BLE	qtima4_done

	LDR	R5,[R0],#8		; R5 = number of samples to skip

	; First deal with the chunk header
	; Get the 2 byte value
	; Let R6 = valprev
	LDRB	R6,[R0],#1          ; Big (Mac) endianness!
	LDRB	R7,[R0],#1
	ORR	R6,R7,R6,LSL#8

	; Sign extend R6 (valprev)
	MOV	R6,R6,ASL#16
	MOV	R6,R6,ASR#16

	; Let R7 = index (bottom 7 bits of R6)
	AND	R7,R6,#&7F

	MOV	R1,#&40

	ADR	R12,stepTable

	MOV	R2,#&8000
	SUB	R2,R2,#1

	; Lets skip the initial samples (always less than 1 chunk!)
	CMP	R5,#0
	BLE	qtima4_none_to_skip

qtima4_skiplp1
	SUBS	R1,R1,#1
	; Every other time we get 2 samples
	TST	R1,#1
	LDRNEB	R8,[R0],#1

	;Extract the sample...
	AND	R9,R8,#&F                     ;R9 = delta
	MOV	R8,R8,LSR#4                   ;Shift down for next go
	LDR	R10,[R12,R7,ASL#2]            ;R10= step
	TST	R9,#4                         ;if (delta & 4) {
	ANDNE	R11,R9,#3                   ;           delta & 3
	ADDNE	R7,R7,R11,LSL#1             ;          (         )<<1
	ADDNE	R7,R7,#3                    ;index += (              )+3;
	MOV	R11,R10,ASR#3               ;R11= vstep
	ADDNE	R11,R11,R10                 ;vstep += step;
	CMP	R7,#0                       ;if (index > 0)
	SUBGT	R7,R7,#1                    ;    index--;
	CMP	R7,#88                        ;if (index > 88)
	MOVGE	R7,#88                      ;    index = 88;
	TST	R9,#1                         ;if (delta & 1)
	ADDNE	R11,R11,R10,LSR#2           ;    vstep+=step>>2
	TST	R9,#2                         ;if (delta & 2)
	ADDNE	R11,R11,R10,LSR#1           ;    vstep+=step>>1

	TST	R9,#8                         ;if (delta & 8) {
	BEQ	qtima4_ov3
	SUB	R6,R6,R11                     ;    valprev -= vstep;
	CMN	R6,#&8000                     ;    if (valprev<-32768)
	MVNLT	R6,R2
	B	qtima4_ov4                      ;} else
qtima4_ov3                         ;{
	ADD	R6,R6,R11                     ;    valprev += vstep;
	CMP	R6,#&8000                     ;    if (valprev >= 32768)
	MOVGE	R6,R2                       ;        valprev = 32768
qtima4_ov4                         ;}
	; Here we would store R6, but we won't cos we are skipping
	SUBS	R5,R5,#1
	BGT	qtima4_skiplp1

qtima4_none_to_skip

	;Now do the REAL decompression.
qtima4_declp1
	SUBS	R1,R1,#1

	[ stereo
	ADDLT	R0,R0,#&22
	]

	LDRLTB	R6,[R0],#1          ; Big (Mac) endianness!
	LDRLTB	R7,[R0],#1
	ORRLT	R6,R7,R6,LSL#8
	MOVLT	R6,R6,ASL#16
	MOVLT	R6,R6,ASR#16
	ADDLT	R1,R1,#&40
	; Let R7 = index (bottom 7 bits of R6)
	ANDLT	R7,R6,#&7F
	; Every other time we get 2 samples
	TST	R1,#1
	LDRNEB	R8,[R0],#1

	;Extract the sample...
	AND	R9,R8,#&F                     ;R9 = delta
	MOV	R8,R8,LSR#4                   ;Shift sample down
	LDR	R10,[R12,R7,ASL#2]            ;R10= step
	TST	R9,#4                         ;if (delta & 4) {
	ANDNE	R11,R9,#3                   ;           delta & 3
	ADDNE	R7,R7,R11,LSL#1             ;          (         )<<1
	ADDNE	R7,R7,#3                    ;index += (              )+3;
	MOV	R11,R10,ASR#3               ;R11= vstep
	ADDNE R11,R11,R10                 ;vstep += step;
	CMP	R7,#0                       ;if (index > 0)
	SUBGT	R7,R7,#1                    ;    index--;
	CMP	R7,#88                        ;if (index > 88)
	MOVGE	R7,#88                      ;    index = 88;
	TST	R9,#1                         ;if (delta & 1)
	ADDNE	R11,R11,R10,LSR#2           ;    vstep+=step>>2
	TST	R9,#2                         ;if (delta & 2)
	ADDNE	R11,R11,R10,LSR#1           ;    vstep+=step>>1

	TST	R9,#8                         ;if (delta & 8) {
	BEQ	qtima4_ov1
	SUB	R6,R6,R11                     ;    valprev -= vstep;
	CMN	R6,#&8000                     ;    if (valprev<-32768)
	MVNLT	R6,R2                       ;        valprev = -32768;
	B	qtima4_ov2                      ;} else
qtima4_ov1                         ;{
	ADD	R6,R6,R11                     ;    valprev += vstep;
	CMP	R6,#&8000                     ;    if (valprev >= 32768)
	MOVGE	R6,R2                       ;        valprev = 32767;
qtima4_ov2                         ;}
	; Store the result

	[ stereo
	; Because we are Stereo first pass.
	STR	R6,[R3],#4
	;STRB	R6,[R3],#1
	;MOV	R11,R6,LSR#8
	;STRB	R11,[R3],#3
	|
	STRB	R6,[R3],#1
	MOV	R11,R6,LSR#8
	STRB	R11,[R3],#1
	]

	SUBS	R4,R4,#1
	BGT	qtima4_declp1

	[ stereo
	; Now do it again for the other stereo channel
	LDMFD R13,{R0-R3}

	ADD	R3,R3,#2
	LDR	R4,[R0,#4]
	; R4 = count of samples

	LDR	R5,[R0],#8+&22     ; Add &22 here...
	; R5 = number of samples to skip

	; First deal with the chunk header
	; Get the 2 byte value
	; Let R6 = valprev
	LDRB	R6,[R0],#1          ; Big (Mac) endianness!
	LDRB	R7,[R0],#1
	ORR	R6,R7,R6,LSL#8

	; Sign extend R6 (valprev)
	MOV	R6,R6,ASL#16
	MOV	R6,R6,ASR#16

	; Let R7 = index (bottom 7 bits of R6)
	AND	R7,R6,#&7F

	MOV	R1,#&40

	MOV	R2,#&8000
	SUB	R2,R2,#1

	; Lets skip the initial samples (always less than 1 chunk!)
	CMP	R5,#0
	BLE	qtima4_none_to_skip2

qtima4_skiplp2
	SUBS	R1,R1,#1
	; Every other time we get 2 samples
	TST	R1,#1
	LDRNEB	R8,[R0],#1

	;Extract the sample...
	AND	R9,R8,#&F                     ;R9 = delta
	MOV	R8,R8,LSR#4                   ;R9 = delta
	LDR	R10,[R12,R7,ASL#2]            ;R10= step
	TST	R9,#4                         ;if (delta & 4) {
	ANDNE	R11,R9,#3                   ;           delta & 3
	ADDNE	R7,R7,R11,LSL#1             ;          (         )<<1
	ADDNE	R7,R7,#3                    ;index += (              )+3;
	MOV	R11,R10,ASR#3               ;R11= vstep
	ADDNE	R11,R11,R10                 ;vstep += step;
	CMP	R7,#0                       ;if (index > 0)
	SUBGT	R7,R7,#1                    ;    index--;
	CMP	R7,#88                        ;if (index > 88)
	MOVGE	R7,#88                      ;    index = 88;
	TST	R9,#1                         ;if (delta & 1)
	ADDNE	R11,R11,R10,LSR#2           ;    vstep+=step>>2
	TST	R9,#2                         ;if (delta & 2)
	ADDNE	R11,R11,R10,LSR#1           ;    vstep+=step>>1

	TST	R9,#8                         ;if (delta & 8) {
	BEQ	qtima4_ov32
	SUB	R6,R6,R11                     ;    valprev -= vstep;
	CMN	R6,#&8000                     ;    if (valprev<-32768)
	MVNLT	R6,R2
	B	qtima4_ov42                     ;} else
qtima4_ov32                        ;{
	ADD	R6,R6,R11                     ;    valprev += vstep;
	CMP	R6,#&8000                     ;    if (valprev >= 32768)
	MOVGE	R6,R2                       ;        valprev = 32768
qtima4_ov42                        ;}
	; Here we would store R6, but we won't cos we are skipping
	SUBS	R5,R5,#1
	BGT	qtima4_skiplp2

qtima4_none_to_skip2

	;Now do the REAL decompression.
qtima4_declp2
	SUBS	R1,R1,#1
	ADDLT	R0,R0,#&22
	LDRLTB	R6,[R0],#1          ; Big (Mac) endianness!
	LDRLTB	R7,[R0],#1
	ORRLT	R6,R7,R6,LSL#8
	MOVLT	R6,R6,ASL#16
	MOVLT	R6,R6,ASR#16
	ADDLT	R1,R1,#&40
	; Let R7 = index (bottom 7 bits of R6)
	ANDLT	R7,R6,#&7F
	; Every other time we get 2 samples
	TST	R1,#1
	LDRNEB	R8,[R0],#1

	;Extract the sample...
	AND	R9,R8,#&F		;R9 = delta
	MOV	R8,R8,LSR#4		;shift sample down
	LDR	R10,[R12,R7,ASL#2]	;R10= step
	TST	R9,#4			;if (delta & 4) {
	ANDNE	R11,R9,#3		;           delta & 3
	ADDNE	R7,R7,R11,LSL#1		;          (         )<<1
	ADDNE	R7,R7,#3		;index += (              )+3;
	MOV	R11,R10,ASR#3		;R11= vstep
	ADDNE	R11,R11,R10		;vstep += step;
	CMP	R7,#0			;if (index > 0)
	SUBGT	R7,R7,#1		;    index--;
	CMP	R7,#88			;if (index > 88)
	MOVGE	R7,#88			;    index = 88;
	TST	R9,#1			;if (delta & 1)
	ADDNE	R11,R11,R10,LSR#2	;    vstep+=step>>2
	TST	R9,#2			;if (delta & 2)
	ADDNE	R11,R11,R10,LSR#1	;    vstep+=step>>1

	TST	R9,#8			;if (delta & 8) {
	BEQ	qtima4_ov12
	SUB	R6,R6,R11		;    valprev -= vstep;
	CMN	R6,#&8000		;    if (valprev<-32768)
	MVNLT	R6,R2			;        valprev = -32768;
	B	qtima4_ov22		;} else
qtima4_ov12				;{
	ADD	R6,R6,R11		;    valprev += vstep;
	CMP	R6,#&8000		;    if (valprev >= 32768)
	MOVGE	R6,R2			;        valprev = 32767;
qtima4_ov22				;}
	; Store the result
	;MOV R11,#0
	;STRB R11,[R3],#1
	STRB	R6,[R3],#1
	MOV	R11,R6,LSR#8
	STRB	R11,[R3],#3
	SUBS	R4,R4,#1
	BGT	qtima4_declp2
	]

qtima4_done
	LDMFD	R13!,{R0-R12}

	LDR	R1, [R0, #4]
	[ stereo
	MOV	R1,R1,LSL #2    ; Length  x 4
	|
	MOV	R1,R1,LSL #1    ; Length  x 2
	]
	LDMFD	R13!,{PC}

stepTable
	DCD	7,8,9,10,11,12,13,14,16,17
	DCD	19,21,23,25,28,31,34,37,41,45
	DCD	50,55,60,66,73,80,88,97,107,118
	DCD	130,143,157,173,190,209,230,253,279,307
	DCD	337,371,408,449,494,544,598,658,724,796
	DCD	876,963,1060,1166,1282,1411,1552,1707,1878,2066
	DCD	2272,2499,2749,3024,3327,3660,4026,4428,4871,5358
	DCD	5894,6468,7132,7845,8630,9493,10442,11487,12635,13899
	DCD	15289,16818,18500,20350,22385,24623,27086,29794,32767


;**************************************************************************

	END
