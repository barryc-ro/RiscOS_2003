;**************************************************************************
;
;  File:        s.FillCode
;
;  Description: Sound buffer fill code
;
;  Version:     0.0 24 Sep 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;               modified from original source by ESP
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;    24 Sep 1997  Pete Goodlife         modified from original source by ESP
;    05 Jul 2001  Robin Watts           Big Endian variant added
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

;**************************************************************************
; This is an ObjAsm assembler conversion of the BASIC source
; of MakeSnd16: Snd16Src.!Build.FillCode

	GBLL	use_table

    [ (type=log) :LOR: (type=mulaw) :LOR: (type=alaw)
use_table	SETL	{TRUE}
    |
use_table	SETL	{FALSE}
    ]

;**************************************************************************
; macro makeregname
;     cunning macro to make a reg name string from a reg number
;     Requires: desintation string var name, source arithmetic var number

	MACRO
	makeregname	$destSVar, $srcAVar

	[ $srcAVar<=9
$destSVar	SETS	:CHR:($srcAVar+48)
$destSVar	SETS	"r":CC:$destSVar
	]
	[ $srcAVar=10
$destSVar	SETS	"r10"
	]
	[ $srcAVar=11
$destSVar	SETS	"r11"
	]
	[ $srcAVar=12
$destSVar	SETS	"r12"
	]

	MEND

;**************************************************************************
; Copyright message

	GBLS	cpyrt
cpyrt	SETS	"© Expressive Software Projects (28 Nov 1996) 0.13"
cpyrt	SETS	cpyrt:CC:" © Acorn Computers Ltd (25 Sep 1997) 0.01"

flagMix          * 1:SHL:0
flagQuality      * 1:SHL:1
flagStereo       * 1:SHL:29
flagVolumeStored * 1:SHL:30
flagMute         * 1:SHL:31

; pre defined parameters
;   bits - no bits per sample
;   type - signed/unsigned/log
;   stereo - 0: mono, 1:stereo

; this code is loaded into line in the make program so the code must start
; and end with continous flow

;**************************************************************************
; fill

fillC	; Fill code entry point
	; On entry:
	;    R3  = flags
	;    R4  = frequency
	;    R5  = volume
	;    R7  = Data start
	;    R8  = Data end
	;    R9  = Accumulator
	;    R10 = Buffer pointer
	;    R11 = Samples to fill
	; On exit:
	;    R3 - R5 preserved
	;    R7  = Number of bytes used
	;    R8  = Number of samples used
	;    R9  = updated accumulator
	;    R10,R11 updated

	stmfd	r13!, {r3-r5, r12}


 [ use_table
	bl	getLogTablePtr		; Get pointer into R0
	orr	r3, r3, r0		; OR into bits 3-27 of flag word
 ]

	; Calculate values for R6-R8 at the start and stack them
	; Build them in R0-R2 for now

	sub	r2, r8, r7	; Calculate the number of bytes available
	mov	r8, r2		; Keep in R8 for fillSlow if needed

	; Turn this into samples

 [ stereo
  [ bits=16
	mov	r2, r2, LSR #2		; Divide by 4 for stereo 16 bit data
  |
	mov	r2, r2, LSR #1		; Divide by 2 for stereo 8 bit data
  ]
 |
  [ bits=16
	mov	r2, r2, LSR #1		; Divide by 2 for mono 16 bit data
  ]
 ]

	; r2 = Number of samples available

	; Number of samples required is obtained by multiplying R11 by the
	; fractional step

	add	r0, r4, r9			; Add in accumulator
	mov	r0, r0, LSR#16			; top 16 bits of frequency
	add	r0, r0, #1			; rounded up
	muls	r1, r0, r11			; find total increment
	addccs	r1, r1, #256			; and round up
	mov	r1, r1, LSR #8			; Find integer value

	; r1 = Number of samples required

	; If R2 >= R1 then we can fill the whole buffer
	; otherwise we use up the data available and return

	cmp	r2, r1


	; If R2 is less R1 then we have to step through the available samples
	; Otherwise we can use a faster routine to step through the fill
	; buffer sample count

	blt	fillSlow	; Slower fill routine for final parts of
				; the data buffer

	; Now use conditional assembly to do the two different methods of
	; filling and share common routines

	; To calculate the value of R11 could lead to rounding errors as it
	; involves a divide
	; In which case counting the samples used would be better
	; However, doing this ties up another register as a 'samples filled'
	; count
	; One solution is to treat the two cases differently, this will
	; duplicate some code
	; but mean that in most cases the code can be highly efficient but
	; a little slower on the buffer change situation

	GBLA	fillFst			; 1 fast routine, 0 slow one
fillFst	SETA	1
	ASSERT	fillFst=1
	WHILE	(fillFst=0):LOR:(fillFst=1)

 [ fillFst=1

	; With fast routine, set up the return values now
	; R1 = Max Number of samples to be used
	; not an accurate figure - may be over the top

 |

fillSlow

	; R2 = Number of input samples available
	; R8 = Number of input bytes
	; Work through these
	; Decrement number of input samples and the value of R11 to return
	; as number of output samples to go

	mov	r1, r8				; R1 = Input bytes
						; R2 = Input samples
 ]

	stmfd r13!, {r7}	; Stack value for return = Current data ptr

 [ fillFst=1

	; Now get on and fill R11 samples

 |

	mov	r6, r2		; Input samples available to use

	; Now work through the source data using value in R6 as number of
	; samples available
	; and decrement R11 to return as number of samples to fill, also
	; acts as a double check

 ]

	mov	r12, r4		; Move frequency and volume words to free up
				; a contiguous run of registers

	str	r5, volumeStore

	mov	r8, r3		; R8 is flag and log table word

	; R7  = Source pointer
	; R8  = Flag and log table pointer
	; R9  = Accumulator
	; R10 = Buffer pointer
	; R11 = Fill samples to do
	; R12 = Frequency

	; Main loop point for fast and slow code

 [ fillFst=1

fastFillLoop

	; Fast fill code
	; This uses R11 as a decrementing counter of sound buffer samples
	; to be filled
	; R0-R6 Available

	cmp	r11, #4			; Can we do a quad word?
	movge	r6, #4			; If yes then do 4 otherwise
	movlt	r6, r11			; do remainder in R11

fastFillLoop_go

 |

slowFillLoop

	; Slow fill code
	; This uses R6 as a decrementing counter of the number of data
	; samples available and R11 as an decrementing counter of the number
	; of sound buffer samples to be filled
	; R0-R5 Available

	; Do one output sample

 ]

	; Get sample loop

	; Build 1 to 4 samples into R1 to R4

	; Get data and modify by volume if required

	stmdb	r13!, {r11}		; Need an extra register

	GBLA	spareN
spareN	SETA	11
	GBLS	spare
	makeregname	spare, spareN

	; fillFast will have up to 4 samples to build, slow fill will only
	; have 1

	GBLA	getRegN
	GBLA	mixRegN
	GBLS	getReg
	GBLS	mixReg

getRegN	SETA	1
	WHILE	(getRegN<=1+(fillFst*3))

	makeregname	getReg, getRegN
mixRegN	SETA	getRegN+1
	makeregname	mixReg, mixRegN

	tst	r8, #flag_mute		;  Mute flag
	movne	$getReg, #0

 [ getRegN=1
  [ fillFst=1
	bne	fillNext1
  |
	bne	fillSlowNext
  ]
 ]
 [ getRegN=2
	bne	fillNext2
 ]
 [ getRegN=3
	bne	fillNext3
 ]
 [ getRegN=4
	bne	fillNext4
 ]

	; Stereo data is passed as 16 bits in one 32 bit word (getReg)
	; Mono data is pass as top 16 bits of getReg

 [ stereo
  [ bits=16
	; stereo 16 bit data = 4 bytes
	ldr	$getReg, [r7]
   [ type=unsigned
	mov	r0, #&8000
	eor	$getReg, $getReg, r0
	eor	$getReg, $getReg, r0, LSL #16
   ]
   [ type=bigendian
	mov	$spare,$getReg, LSL #8
	BIC	$getReg,$getReg,#&FF0000
	BIC	$spare,$spare,#&FF0000
	ORR	$getReg,$spare,$getReg,LSR#8
   ]
  |
	; stereo 8 bit data = 2 bytes at a time
	ldrb	 r0, [r7]		; Right
	ldrb	 $getReg, [r7,#1]	; Left
   [ use_table

	; Log 8 bit stereo data
	; Two 8 bit numbers in R0, and GetReg
	; Convert from log to linear

	bic	$spare, r8, #&F0000003	; Get log table address

	ldr	r0, [$spare, r0, LSL #2]		; 32 Bit signed
	ldr	$getReg, [$spare, $getReg, LSL #2]	; 32 Bit signed

	; Left in getReg, Right in R0

	mov	$getReg, $getReg, LSL #16
	mov	r0, r0, LSL #16
	orr	$getReg, $getReg, r0, LSR #16

   |
    [ type=unsigned

	eor	r0, r0, #&80
	eor	$getReg, $getReg, #&80
    ]
	mov	$getReg, $getReg, LSL #24		; Left
	orr	$getReg, $getReg, r0, LSL #8		; Right

   ]
  ]
	tst	r8, #flag_stereo			; Stereo reversed?
	movne	r0, $getReg, LSR #16
	orrne	$getReg, r0, $getReg, LSL #16

 |

	; Mono data
  [ bits=16
	; mono 16 bit data = 2 bytes per sample

	tst	r7, #2			; Are we on a word boundary?
	ldrne	$getReg, [r7, #-2]
	ldreq	$getReg, [r7]

	movne	r0, $getReg, LSR #16
	movne	$getReg, r0, LSL #16

	moveq	$getReg, $getReg, LSL #16

   [ type=unsigned
	eor	$getReg, $getReg, #&80000000
   ]
   [ type=bigendian
	MOV	r0,$getReg,LSL#8
	MOV	$getReg,$getReg,LSR#24
	ORR	$getReg,R0,$getReg,LSL#16
   ]
  |
	; mono 8 bit data = 1 byte

	ldrb	$getReg, [r7]

   [ use_table

	; Mono 8 bit log

	bic	r0, r8, #&F0000003	; Log table address burried in R8

	ldr	$getReg, [r0, $getReg, LSL#2]

	mov	$getReg, $getReg, LSL #16

   |
	; mono 8 bit linear

	mov	$getReg, $getReg, LSL #24

    [ type=unsigned
	eor	$getReg, $getReg, #&80000000
    ]
   ]
  ]
 ]

	; Any mixing and volume changes could go here, $getReg = one samples
	; Needs mixing with R10,(getReg-1)*4
	; and Volume

	; R0 and R5 are available - so are R(getReg+1) to R4
	; So we could pre-load the contents of R10 into R2-R5 and mix as
	; required
	; This would give us getReg and getReg+1 to mix using R0 and volume
	; I think we need 4 registers to do this, so R11 is freed for the
	; purpose

	; Now need to scale getReg by volume
	; and mix getReg+1 into it if required
	; Using getReg,getReg+1,R0 and R11

	; At some point it would make sense to build Left and Right into
	; getReg and work1 as signed 32 bit words ready for any mixing,
	; oversampling and volume scaling

	; At present the data is passed as a 32 bit combination of 16 bit
	; LR wordswhich is broken down when neccessary

	; Also volume is only a 0 or max value for Replay so could be added
	; as a flag into bit 1 0f R10 and stripped out as is the mix flag in
	; bit 0

	; Sept 9th

	; Use mixReg and getReg to pass stereo data?


	GBLA	fracValN
fracValN SETA	0
	GBLA	overRegN
overRegN SETA	spareN
mixRegN	SETA	getRegN+1
	GBLA	work1N
work1N	SETA	mixRegN

	GBLA	work2N			; used later, declared here
	GBLS	work2			; because the world is round and
					; ObjAsm conditional assembly is
					; 'featured' (or so it seems)

	GBLS	fracVal
	makeregname	fracVal, fracValN
	GBLS	overReg
	makeregname	overReg, overRegN
	makeregname	mixReg, mixRegN
	GBLS	work1
	makeregname	work1, work1N

	GBLA	shift
shift	SETA	3

;***************************************************************************

	tst	r8, #flag_quality	; If set then do oversampling
	cmpne	r12, #1:SHL:24		; If increment = 1 then do
					; no oversampling


 [ :LNOT:stereo
	orreq	$getReg, $getReg, $getReg, LSR #16
 ]


 [ getRegN=1
  [ fillFst=1
	beq	fillNoOver1
  |
	beq	fillSlowNoOver
  ]
 ]
 [ getRegN=2
	beq	fillNoOver2
 ]
 [ getRegN=3
	beq	fillNoOver3
 ]
 [ getRegN=4
	beq	fillNoOver4
 ]

;***************************************************************************

	; Any attempt to oversample comes here

	; value = ( new * f ) + ( old * ( 8 - f ) )
	;         ---------------------------------
	;                      8

	; If an increment is about to take place then oldValue needs updating
	; Could we do this at the point of increment?

	add	$fracVal, r9, r12		; Add increment
	movs	$fracVal, $fracVal, LSR #24	; Whole value

	ldr	$overReg, oldValue
	strne	$getReg, oldValue

	movs	$fracVal, r9, LSR #(24-shift)	; Top 3 bits of fraction

	; Now, if fracVal = 8 then answer will be 'New'
	;      if fracVal = 0 then answer will be 'Old'

	moveq	$getReg, $overReg

 [ :LNOT:stereo
	orreq	$getReg, $getReg, $getReg, LSR #16
 ]

 [ getRegN=1
  [ fillFst=1
	beq	fillNoOver1
  |
	beq	fillSlowNoOver
  ]
 ]
 [ getRegN=2
	beq	fillNoOver2
 ]
 [ getRegN=3
	BEQ	fillNoOver3
 ]
 [ getRegN=4
	BEQ	fillNoOver4
 ]

	; If mono then getReg contains one value in top 16 bits
	; If stereo the it is packed into top and bottom 16 bits of getReg

 [ stereo

	; If not mixing then can use mixReg to save R9,R10
	; Can we drop the need for work2 say?
	; work1=mixReg

  [ getRegN<4

work2N	SETA	$mixRegN+1
	makeregname	work2, work2N

  |

work2N	SETA	10
	makeregname	work2, work2N

	stmdb	r13!, {$work2}	; Need other registers for stereo processing

  ]

	; value = f ( new - old ) + ( 8 * old )

	; 'New' are getReg and work1
	; 'Old' are overReg and work2

	mov	$work1, $getReg, LSL #16		; Put right into work1

	mov	$getReg, $getReg, ASR #shift	; DIV 8
	mov	$work1, $work1, ASR #shift	; DIV 8

	mov	$work2, $overReg, LSL #16		; Put right into work2

	; Calculations

	sub	$getReg, $getReg, $overReg, ASR #shift
	mla	$overReg, $getReg, $fracVal, $overReg

	sub	$work1, $work1, $work2, ASR #shift
	mla	$work2, $work1, $fracVal, $work2

	; New values in overReg and work2

	mov	$getReg, $overReg, LSR #16

	MOV	$work1, $work2, LSR #16
	ORR	$getReg, $work1, $getReg, LSL #16

  [ getRegN>3

	ldmia	r13!, {$work2}				; Retrieve registers

  ]
 |
	; New value

	mov	$getReg, $getReg, ASR #shift	; DIV 8

	sub	$getReg, $getReg, $overReg, ASR #shift
	mla	$getReg, $fracVal, $getReg, $overReg

	mov	$getReg, $getReg, LSR #16
	orr	$getReg, $getReg, $getReg, LSL #16

 ]

	; Jump points for no oversampling

 [ getRegN=1
  [ fillFst=1
fillNoOver1
  |
fillSlowNoOver
  ]
 ]
 [ getRegN=2
fillNoOver2
 ]
 [ getRegN=3
fillNoOver3
 ]
 [ getRegN=4
fillNoOver4
 ]

	; Do volume scaling on getReg
	; volume stored flag in R8 indicates whether volume is max or stored

	tst	r8, #flag_volumeStored

 [ getRegN=1
  [ fillFst=1
	beq	fillNoVol1
  |
	beq	fillSlowNoVol
  ]
 ]
 [ getRegN=2
	beq	fillNoVol2
 ]
 [ getRegN=3
	beq	fillNoVol3
 ]
 [ getRegN=4
	beq	fillNoVol4
 ]

	; Volume scaling to value in volumeStored

	ldr	$mixReg, volumeStore
	cmp	$mixReg, #0
	moveq	$getReg, #0

 [ getRegN=1
  [ fillFst=1
	beq	fillNoVol1
  |
	beq	fillSlowNoVol
  ]
 ]
 [ getRegN=2
	beq	fillNoVol2
 ]
 [ getRegN=3
	beq	fillNoVol3
 ]
 [ getRegN=4
	beq	fillNoVol4
 ]

	GBLA	work1N
	GBLA	work2N
	GBLS	work1
	GBLS	work2
work1N	SETA	9
work2N	SETA	10
	makeregname	work1, work1N
	makeregname	work2, work2N

	stmdb	r13!, {r9, r10}		; Need other registers for processing

	mov	$work1, $getReg, ASR #16	; Put left into work1
	mov	$getReg, $getReg, LSL #16
	mov	$getReg, $getReg, ASR #16	; and right in getReg

	mov	$work2, $mixReg, LSR #16	; Put left vol into mixreg
	eor	$mixReg, $mixReg, $work2, LSL #16 ; and right vol into work2

	mul	$work1, $work2, $work1
	mov	$work1, $work1, LSR #16

	mul	$getReg, $mixReg, $getReg
	mov	$getReg, $getReg, LSR #16

	add	$getReg, $getReg, $work1, LSL #16

	ldmia	r13!, {r9, r10}

 [ getRegN=1
  [ fillFst=1
fillNoVol1
  |
fillSlowNoVol
  ]
 ]
 [ getRegN=2
fillNoVol2
 ]
 [ getRegN=3
fillNoVol3
 ]
 [ getRegN=4
fillNoVol4
 ]

	; Then do mix if neccessary

	tst	r8, #flag_mix			; Any mixing to do?

 [ getRegN=1
  [ fillFst=1
	beq	fillNoMix1
  |
	beq	fillSlowNoMix
  ]
 ]
 [ getRegN=2
	beq	fillNoMix2
 ]
 [ getRegN=3
	beq	fillNoMix3
 ]
 [ getRegN=4
	beq	fillNoMix4
 ]

 [ getRegN=1
	ldr	$mixReg, [r10]
 ]
 [ getRegN=2
	ldr	$mixReg, [r10, #4]
 ]
 [ getRegN=3
	ldr	$mixReg, [r10, #8]
 ]
 [ getRegN=4
	ldr	$mixReg, [r10, #12]
 ]

	; Mix code

work1N	SETA	9
work2N	SETA	10
	makeregname	work1, work1N
	makeregname	work2, work2N

	stmdb	r13!, {r9, r10}		; Need other registers for processing

	mov	$work1, $getReg, LSL #16	; Put right into work1
	eor	$getReg, $getReg, $work1, LSR #16 ; and left in getReg

	mov	$work1, $work1, ASR #1		; DIV 2

	mov	$getReg, $getReg, ASR #1	; DIV 2

	tst	$getReg, #1:SHL:15		; Remove any low bit
	eorne	$getReg, $getReg, #1:SHL:15


	mov	$work2, $mixReg, LSL #16	; Put right into work2
	eor	$mixReg, $mixReg, $work2, LSR #16 ; and left in mixReg

	mov	$work2, $work2, ASR #1		; DIV 2

	mov	$mixReg, $mixReg, ASR #1	; DIV 2

	tst	$mixReg, #1:SHL:15		; Remove any low bit
	eorne	$mixReg, $mixReg, #1:SHL:15

	; Now mix

	add	$getReg, $getReg, $mixReg
	add	$work1, $work1, $work2

	add	$getReg, $getReg, $work1, LSR #16

	ldmia	r13!, {r9, r10}			; Retrieve registers

	; Jump points for no mix

 [ getRegN=1
  [ fillFst=1
fillNoMix1
  |
fillSlowNoMix
  ]
 ]
 [ getRegN=2
fillNoMix2
 ]
 [ getRegN=3
fillNoMix3
 ]
 [ getRegN=4
fillNoMix4
 ]

	; Jump points for 0 volume

 [ getRegN=1
  [ fillFst=1
fillNext1
  |
fillSlowNext
  ]
 ]
 [ getRegN=2
fillNext2
 ]
 [ getRegN=3
fillNext3
 ]
 [ getRegN= 4
fillNext4
 ]

	; Then increment input sample pointer and accumulator


	add	r9, r9, r12			; Add increment
	movs	r0, r9, LSR #24			; Whole value

 [ fillFst=0
	subne	r6, r6, r0	; Decrement the sample counter for slow fill
 ]

	; Increment data pointer (R7) if neccessary , needs to take into
	; account byte per sample

 [ stereo
  [ bits=16
	movne	r0, r0, LSL #2		; 4 bytes for stereo 16 bit data
  |
	movne	r0, r0, LSL #1		; 2 bytes for stereo 8 bit data
  ]
 |
  [ bits=16
	movne	r0, r0, LSL #1		; 2 bytes for mono 16 bit data
  |
					; 1 byte for mono 8 bit
  ]
 ]

	addne	r7, r7, r0		; Add byte value

	movne	r9, r9, LSL #8
	movne	r9, r9, LSR #8		; Update accumulator

 [ fillFst=1
	; If fast fill then we will be doing R6 output samples
	subs	r6, r6, #1
  [ getRegN<4
	beq	fillFast_EndGet	; Jump out of repeats unless on last one
  ]
 ]

getRegN	SETA	getRegN+1
	WEND

 [ fillFst=1
fillFast_EndGet
 ]

	; So we now have 1 to 4 output samples in R1-R4 to put into output
	; buffer, with mixing if neccessary

	; If slow fill then we will only have one output samples
	; If fast fill then the number of output samples is determined by
	; the value in R11
	; If R11 is >= 4 then there are 4 samples otherwise there are R11
	; samples

	ldmia	r13!, {r11}				; Retrieve R11

 [ fillFst=1

fillFastStore

	cmp	r11, #4				; Are we filling 4 or more?
	blt	fillFast_Last

	tst	r8, #flag_mute			; Mute flag
	stmeqia	r10!, {r1-r4}
	addne	r10, r10, #16

	subs	r11, r11, #4
	bne	fastFillLoop

	b	fillFast_End

fillFast_Last

	; 1-3 to fill

	tst	r8, #flag_mute			; Mute flag
	streq	r1, [r10], #4
	addne	r10, r10, #4
	subs	r11, r11, #1
	beq	fillFast_End

	tst	r8, #flag_mute			; Mute flag
	streq	r2, [r10], #4
	addne	r10, r10, #4
	subs	r11, r11, #1
	beq	fillFast_End

	tst	r8, #flag_mute			; Mute flag
	streq	r3, [r10], #4
	addne	r10, r10, #4
	subs	r11, r11, #1

fillFast_End

 |

fillSlowStore

	tst	r8, #flag_mute			; Mute flag
	streq	r1, [r10], #4
	addne	r10, r10, #4

	subs	r11, r11, #1	; In slow fill R11 is a decremental counter
	beq	fillSlowExit	; Safety net for incorrect value in R6

	cmp	r6, #0		; The loop ends when we have run out of
				; input samples
	bgt	slowFillLoop


 ]

 [ fillFst=1
fillFastExit
 |
fillSlowExit
 ]


	; Exit routine is the same for both methods

	ldmfd	r13!, {r8}		; Return value on stack is the
					; data start value

	; R8 = Start value

	sub	r7, r7, r8		; Number of bytes = end-start
	mov	r8, r7			; Make R8 ready for sample calc

	; Now convert into samples

 [ stereo
  [ bits=16
	mov	r8, r8, LSR #2		; Divide by 4 for stereo 16 bit data
  |
	mov	r8, r8, LSR #1		; Divide by 2 for stereo 8 bit data
  ]
 |
  [ bits=16
	mov	r8, r8, LSR #1		; Divide by 2 for mono 16 bit data
  ]
 ]

	b	fillExit		; Branch to exit


	; Loop for fill method

fillFst SETA	fillFst-1
	WEND


oldValue DCD	0			; Used by oversample routine

volumeStore DCD	0

getStore DCD	0


 [ use_table
getLogTablePtr
	adr	r0, logTable
	mov	pc, r14

logTable
 [ type=log
        DCD        &0,    -&0
        DCD        &8,    -&8
        DCD       &10,   -&10
        DCD       &18,   -&18
        DCD       &20,   -&20
        DCD       &28,   -&28
        DCD       &30,   -&30
        DCD       &38,   -&38
        DCD       &40,   -&40
        DCD       &48,   -&48
        DCD       &50,   -&50
        DCD       &58,   -&58
        DCD       &60,   -&60
        DCD       &68,   -&68
        DCD       &70,   -&70
        DCD       &78,   -&78
        DCD       &80,   -&80
        DCD       &88,   -&88
        DCD       &98,   -&98
        DCD       &A8,   -&A8
        DCD       &B8,   -&B8
        DCD       &C8,   -&C8
        DCD       &D8,   -&D8
        DCD       &E8,   -&E8
        DCD       &F8,   -&F8
        DCD      &108,  -&108
        DCD      &118,  -&118
        DCD      &128,  -&128
        DCD      &138,  -&138
        DCD      &148,  -&148
        DCD      &158,  -&158
        DCD      &168,  -&168
        DCD      &178,  -&178
        DCD      &188,  -&188
        DCD      &1A8,  -&1A8
        DCD      &1C8,  -&1C8
        DCD      &1E8,  -&1E8
        DCD      &208,  -&208
        DCD      &228,  -&228
        DCD      &248,  -&248
        DCD      &268,  -&268
        DCD      &288,  -&288
        DCD      &2A8,  -&2A8
        DCD      &2C8,  -&2C8
        DCD      &2E8,  -&2E8
        DCD      &308,  -&308
        DCD      &328,  -&328
        DCD      &348,  -&348
        DCD      &368,  -&368
        DCD      &388,  -&388
        DCD      &3C8,  -&3C8
        DCD      &408,  -&408
        DCD      &448,  -&448
        DCD      &488,  -&488
        DCD      &4C8,  -&4C8
        DCD      &508,  -&508
        DCD      &548,  -&548
        DCD      &588,  -&588
        DCD      &5C8,  -&5C8
        DCD      &608,  -&608
        DCD      &648,  -&648
        DCD      &688,  -&688
        DCD      &6C8,  -&6C8
        DCD      &708,  -&708
        DCD      &748,  -&748
        DCD      &788,  -&788
        DCD      &808,  -&808
        DCD      &888,  -&888
        DCD      &908,  -&908
        DCD      &988,  -&988
        DCD      &A08,  -&A08
        DCD      &A88,  -&A88
        DCD      &B08,  -&B08
        DCD      &B88,  -&B88
        DCD      &C08,  -&C08
        DCD      &C88,  -&C88
        DCD      &D08,  -&D08
        DCD      &D88,  -&D88
        DCD      &E08,  -&E08
        DCD      &E88,  -&E88
        DCD      &F08,  -&F08
        DCD      &F88,  -&F88
        DCD     &1088, -&1088
        DCD     &1188, -&1188
        DCD     &1288, -&1288
        DCD     &1388, -&1388
        DCD     &1488, -&1488
        DCD     &1588, -&1588
        DCD     &1688, -&1688
        DCD     &1788, -&1788
        DCD     &1888, -&1888
        DCD     &1988, -&1988
        DCD     &1A88, -&1A88
        DCD     &1B88, -&1B88
        DCD     &1C88, -&1C88
        DCD     &1D88, -&1D88
        DCD     &1E88, -&1E88
        DCD     &1F88, -&1F88
        DCD     &2188, -&2188
        DCD     &2388, -&2388
        DCD     &2588, -&2588
        DCD     &2788, -&2788
        DCD     &2988, -&2988
        DCD     &2B88, -&2B88
        DCD     &2D88, -&2D88
        DCD     &2F88, -&2F88
        DCD     &3188, -&3188
        DCD     &3388, -&3388
        DCD     &3588, -&3588
        DCD     &3788, -&3788
        DCD     &3988, -&3988
        DCD     &3B88, -&3B88
        DCD     &3D88, -&3D88
        DCD     &3F88, -&3F88
        DCD     &4388, -&4388
        DCD     &4788, -&4788
        DCD     &4B88, -&4B88
        DCD     &4F88, -&4F88
        DCD     &5388, -&5388
        DCD     &5788, -&5788
        DCD     &5B88, -&5B88
        DCD     &5F88, -&5F88
        DCD     &6388, -&6388
        DCD     &6788, -&6788
        DCD     &6B88, -&6B88
        DCD     &6F88, -&6F88
        DCD     &7388, -&7388
        DCD     &7788, -&7788
 ]
 [ type = mulaw
	DCD	0x00007BE0
	DCD	0x000076A0
	DCD	0x00007198
	DCD	0x00006CC8
	DCD	0x00006828
	DCD	0x000063B8
	DCD	0x00005F80
	DCD	0x00005B70
	DCD	0x00005790
	DCD	0x000053D8
	DCD	0x00005048
	DCD	0x00004CD8
	DCD	0x00004998
	DCD	0x00004678
	DCD	0x00004378
	DCD	0x00004098
	DCD	0x00003DD8
	DCD	0x00003B38
	DCD	0x000038B0
	DCD	0x00003648
	DCD	0x000033F0
	DCD	0x000031C0
	DCD	0x00002FA0
	DCD	0x00002D98
	DCD	0x00002BA0
	DCD	0x000029C8
	DCD	0x000027F8
	DCD	0x00002648
	DCD	0x000024A0
	DCD	0x00002310
	DCD	0x00002190
	DCD	0x00002020
	DCD	0x00001EC0
	DCD	0x00001D70
	DCD	0x00001C28
	DCD	0x00001AF0
	DCD	0x000019C8
	DCD	0x000018B0
	DCD	0x000017A0
	DCD	0x00001698
	DCD	0x000015A0
	DCD	0x000014B0
	DCD	0x000013C8
	DCD	0x000012F0
	DCD	0x00001220
	DCD	0x00001150
	DCD	0x00001090
	DCD	0x00000FD8
	DCD	0x00000F28
	DCD	0x00000E80
	DCD	0x00000DE0
	DCD	0x00000D40
	DCD	0x00000CB0
	DCD	0x00000C20
	DCD	0x00000B98
	DCD	0x00000B10
	DCD	0x00000A98
	DCD	0x00000A20
	DCD	0x000009A8
	DCD	0x00000940
	DCD	0x000008D0
	DCD	0x00000870
	DCD	0x00000810
	DCD	0x000007B0
	DCD	0x00000758
	DCD	0x00000708
	DCD	0x000006B0
	DCD	0x00000668
	DCD	0x00000618
	DCD	0x000005D0
	DCD	0x00000590
	DCD	0x00000550
	DCD	0x00000510
	DCD	0x000004D0
	DCD	0x00000498
	DCD	0x00000460
	DCD	0x00000430
	DCD	0x000003F8
	DCD	0x000003C8
	DCD	0x00000398
	DCD	0x00000370
	DCD	0x00000348
	DCD	0x00000318
	DCD	0x000002F8
	DCD	0x000002D0
	DCD	0x000002A8
	DCD	0x00000288
	DCD	0x00000268
	DCD	0x00000248
	DCD	0x00000228
	DCD	0x00000210
	DCD	0x000001F0
	DCD	0x000001D8
	DCD	0x000001C0
	DCD	0x000001A8
	DCD	0x00000190
	DCD	0x00000178
	DCD	0x00000160
	DCD	0x00000150
	DCD	0x00000138
	DCD	0x00000128
	DCD	0x00000118
	DCD	0x00000108
	DCD	0x000000F8
	DCD	0x000000E8
	DCD	0x000000D8
	DCD	0x000000C8
	DCD	0x000000B8
	DCD	0x000000B0
	DCD	0x000000A0
	DCD	0x00000090
	DCD	0x00000088
	DCD	0x00000080
	DCD	0x00000070
	DCD	0x00000068
	DCD	0x00000060
	DCD	0x00000058
	DCD	0x00000048
	DCD	0x00000040
	DCD	0x00000038
	DCD	0x00000030
	DCD	0x00000028
	DCD	0x00000028
	DCD	0x00000020
	DCD	0x00000018
	DCD	0x00000010
	DCD	0x00000008
	DCD	0x00000008
	DCD	0xFFFF8420
	DCD	0xFFFF8960
	DCD	0xFFFF8E68
	DCD	0xFFFF9338
	DCD	0xFFFF97D8
	DCD	0xFFFF9C48
	DCD	0xFFFFA080
	DCD	0xFFFFA490
	DCD	0xFFFFA870
	DCD	0xFFFFAC28
	DCD	0xFFFFAFB8
	DCD	0xFFFFB328
	DCD	0xFFFFB668
	DCD	0xFFFFB988
	DCD	0xFFFFBC88
	DCD	0xFFFFBF68
	DCD	0xFFFFC228
	DCD	0xFFFFC4C8
	DCD	0xFFFFC750
	DCD	0xFFFFC9B8
	DCD	0xFFFFCC10
	DCD	0xFFFFCE40
	DCD	0xFFFFD060
	DCD	0xFFFFD268
	DCD	0xFFFFD460
	DCD	0xFFFFD638
	DCD	0xFFFFD808
	DCD	0xFFFFD9B8
	DCD	0xFFFFDB60
	DCD	0xFFFFDCF0
	DCD	0xFFFFDE70
	DCD	0xFFFFDFE0
	DCD	0xFFFFE140
	DCD	0xFFFFE290
	DCD	0xFFFFE3D8
	DCD	0xFFFFE510
	DCD	0xFFFFE638
	DCD	0xFFFFE750
	DCD	0xFFFFE860
	DCD	0xFFFFE968
	DCD	0xFFFFEA60
	DCD	0xFFFFEB50
	DCD	0xFFFFEC38
	DCD	0xFFFFED10
	DCD	0xFFFFEDE0
	DCD	0xFFFFEEB0
	DCD	0xFFFFEF70
	DCD	0xFFFFF028
	DCD	0xFFFFF0D8
	DCD	0xFFFFF180
	DCD	0xFFFFF220
	DCD	0xFFFFF2C0
	DCD	0xFFFFF350
	DCD	0xFFFFF3E0
	DCD	0xFFFFF468
	DCD	0xFFFFF4F0
	DCD	0xFFFFF568
	DCD	0xFFFFF5E0
	DCD	0xFFFFF658
	DCD	0xFFFFF6C0
	DCD	0xFFFFF730
	DCD	0xFFFFF790
	DCD	0xFFFFF7F0
	DCD	0xFFFFF850
	DCD	0xFFFFF8A8
	DCD	0xFFFFF8F8
	DCD	0xFFFFF950
	DCD	0xFFFFF998
	DCD	0xFFFFF9E8
	DCD	0xFFFFFA30
	DCD	0xFFFFFA70
	DCD	0xFFFFFAB0
	DCD	0xFFFFFAF0
	DCD	0xFFFFFB30
	DCD	0xFFFFFB68
	DCD	0xFFFFFBA0
	DCD	0xFFFFFBD0
	DCD	0xFFFFFC08
	DCD	0xFFFFFC38
	DCD	0xFFFFFC68
	DCD	0xFFFFFC90
	DCD	0xFFFFFCB8
	DCD	0xFFFFFCE8
	DCD	0xFFFFFD08
	DCD	0xFFFFFD30
	DCD	0xFFFFFD58
	DCD	0xFFFFFD78
	DCD	0xFFFFFD98
	DCD	0xFFFFFDB8
	DCD	0xFFFFFDD8
	DCD	0xFFFFFDF0
	DCD	0xFFFFFE10
	DCD	0xFFFFFE28
	DCD	0xFFFFFE40
	DCD	0xFFFFFE58
	DCD	0xFFFFFE70
	DCD	0xFFFFFE88
	DCD	0xFFFFFEA0
	DCD	0xFFFFFEB0
	DCD	0xFFFFFEC8
	DCD	0xFFFFFED8
	DCD	0xFFFFFEE8
	DCD	0xFFFFFEF8
	DCD	0xFFFFFF08
	DCD	0xFFFFFF18
	DCD	0xFFFFFF28
	DCD	0xFFFFFF38
	DCD	0xFFFFFF48
	DCD	0xFFFFFF50
	DCD	0xFFFFFF60
	DCD	0xFFFFFF70
	DCD	0xFFFFFF78
	DCD	0xFFFFFF80
	DCD	0xFFFFFF90
	DCD	0xFFFFFF98
	DCD	0xFFFFFFA0
	DCD	0xFFFFFFA8
	DCD	0xFFFFFFB8
	DCD	0xFFFFFFC0
	DCD	0xFFFFFFC8
	DCD	0xFFFFFFD0
	DCD	0xFFFFFFD8
	DCD	0xFFFFFFD8
	DCD	0xFFFFFFE0
	DCD	0xFFFFFFE8
	DCD	0xFFFFFFF0
	DCD	0xFFFFFFF8
	DCD	0xFFFFFFF8

 ]
 [ type = alaw
	DCD	0x00001580
	DCD	0x00001480
	DCD	0x00001780
	DCD	0x00001680
	DCD	0x00001180
	DCD	0x00001080
	DCD	0x00001380
	DCD	0x00001280
	DCD	0x00001D80
	DCD	0x00001C80
	DCD	0x00001F80
	DCD	0x00001E80
	DCD	0x00001980
	DCD	0x00001880
	DCD	0x00001B80
	DCD	0x00001A80
	DCD	0x00000AC0
	DCD	0x00000A40
	DCD	0x00000BC0
	DCD	0x00000B40
	DCD	0x000008C0
	DCD	0x00000840
	DCD	0x000009C0
	DCD	0x00000940
	DCD	0x00000EC0
	DCD	0x00000E40
	DCD	0x00000FC0
	DCD	0x00000F40
	DCD	0x00000CC0
	DCD	0x00000C40
	DCD	0x00000DC0
	DCD	0x00000D40
	DCD	0x00005600
	DCD	0x00005200
	DCD	0x00005E00
	DCD	0x00005A00
	DCD	0x00004600
	DCD	0x00004200
	DCD	0x00004E00
	DCD	0x00004A00
	DCD	0x00007600
	DCD	0x00007200
	DCD	0x00007E00
	DCD	0x00007A00
	DCD	0x00006600
	DCD	0x00006200
	DCD	0x00006E00
	DCD	0x00006A00
	DCD	0x00002B00
	DCD	0x00002900
	DCD	0x00002F00
	DCD	0x00002D00
	DCD	0x00002300
	DCD	0x00002100
	DCD	0x00002700
	DCD	0x00002500
	DCD	0x00003B00
	DCD	0x00003900
	DCD	0x00003F00
	DCD	0x00003D00
	DCD	0x00003300
	DCD	0x00003100
	DCD	0x00003700
	DCD	0x00003500
	DCD	0x00000158
	DCD	0x00000148
	DCD	0x00000178
	DCD	0x00000168
	DCD	0x00000118
	DCD	0x00000108
	DCD	0x00000138
	DCD	0x00000128
	DCD	0x000001D8
	DCD	0x000001C8
	DCD	0x000001F8
	DCD	0x000001E8
	DCD	0x00000198
	DCD	0x00000188
	DCD	0x000001B8
	DCD	0x000001A8
	DCD	0x00000058
	DCD	0x00000048
	DCD	0x00000078
	DCD	0x00000068
	DCD	0x00000018
	DCD	0x00000008
	DCD	0x00000038
	DCD	0x00000028
	DCD	0x000000D8
	DCD	0x000000C8
	DCD	0x000000F8
	DCD	0x000000E8
	DCD	0x00000098
	DCD	0x00000088
	DCD	0x000000B8
	DCD	0x000000A8
	DCD	0x00000560
	DCD	0x00000520
	DCD	0x000005E0
	DCD	0x000005A0
	DCD	0x00000460
	DCD	0x00000420
	DCD	0x000004E0
	DCD	0x000004A0
	DCD	0x00000760
	DCD	0x00000720
	DCD	0x000007E0
	DCD	0x000007A0
	DCD	0x00000660
	DCD	0x00000620
	DCD	0x000006E0
	DCD	0x000006A0
	DCD	0x000002B0
	DCD	0x00000290
	DCD	0x000002F0
	DCD	0x000002D0
	DCD	0x00000230
	DCD	0x00000210
	DCD	0x00000270
	DCD	0x00000250
	DCD	0x000003B0
	DCD	0x00000390
	DCD	0x000003F0
	DCD	0x000003D0
	DCD	0x00000330
	DCD	0x00000310
	DCD	0x00000370
	DCD	0x00000350
	DCD	0xFFFFEA80
	DCD	0xFFFFEB80
	DCD	0xFFFFE880
	DCD	0xFFFFE980
	DCD	0xFFFFEE80
	DCD	0xFFFFEF80
	DCD	0xFFFFEC80
	DCD	0xFFFFED80
	DCD	0xFFFFE280
	DCD	0xFFFFE380
	DCD	0xFFFFE080
	DCD	0xFFFFE180
	DCD	0xFFFFE680
	DCD	0xFFFFE780
	DCD	0xFFFFE480
	DCD	0xFFFFE580
	DCD	0xFFFFF540
	DCD	0xFFFFF5C0
	DCD	0xFFFFF440
	DCD	0xFFFFF4C0
	DCD	0xFFFFF740
	DCD	0xFFFFF7C0
	DCD	0xFFFFF640
	DCD	0xFFFFF6C0
	DCD	0xFFFFF140
	DCD	0xFFFFF1C0
	DCD	0xFFFFF040
	DCD	0xFFFFF0C0
	DCD	0xFFFFF340
	DCD	0xFFFFF3C0
	DCD	0xFFFFF240
	DCD	0xFFFFF2C0
	DCD	0xFFFFAA00
	DCD	0xFFFFAE00
	DCD	0xFFFFA200
	DCD	0xFFFFA600
	DCD	0xFFFFBA00
	DCD	0xFFFFBE00
	DCD	0xFFFFB200
	DCD	0xFFFFB600
	DCD	0xFFFF8A00
	DCD	0xFFFF8E00
	DCD	0xFFFF8200
	DCD	0xFFFF8600
	DCD	0xFFFF9A00
	DCD	0xFFFF9E00
	DCD	0xFFFF9200
	DCD	0xFFFF9600
	DCD	0xFFFFD500
	DCD	0xFFFFD700
	DCD	0xFFFFD100
	DCD	0xFFFFD300
	DCD	0xFFFFDD00
	DCD	0xFFFFDF00
	DCD	0xFFFFD900
	DCD	0xFFFFDB00
	DCD	0xFFFFC500
	DCD	0xFFFFC700
	DCD	0xFFFFC100
	DCD	0xFFFFC300
	DCD	0xFFFFCD00
	DCD	0xFFFFCF00
	DCD	0xFFFFC900
	DCD	0xFFFFCB00
	DCD	0xFFFFFEA8
	DCD	0xFFFFFEB8
	DCD	0xFFFFFE88
	DCD	0xFFFFFE98
	DCD	0xFFFFFEE8
	DCD	0xFFFFFEF8
	DCD	0xFFFFFEC8
	DCD	0xFFFFFED8
	DCD	0xFFFFFE28
	DCD	0xFFFFFE38
	DCD	0xFFFFFE08
	DCD	0xFFFFFE18
	DCD	0xFFFFFE68
	DCD	0xFFFFFE78
	DCD	0xFFFFFE48
	DCD	0xFFFFFE58
	DCD	0xFFFFFFA8
	DCD	0xFFFFFFB8
	DCD	0xFFFFFF88
	DCD	0xFFFFFF98
	DCD	0xFFFFFFE8
	DCD	0xFFFFFFF8
	DCD	0xFFFFFFC8
	DCD	0xFFFFFFD8
	DCD	0xFFFFFF28
	DCD	0xFFFFFF38
	DCD	0xFFFFFF08
	DCD	0xFFFFFF18
	DCD	0xFFFFFF68
	DCD	0xFFFFFF78
	DCD	0xFFFFFF48
	DCD	0xFFFFFF58
	DCD	0xFFFFFAA0
	DCD	0xFFFFFAE0
	DCD	0xFFFFFA20
	DCD	0xFFFFFA60
	DCD	0xFFFFFBA0
	DCD	0xFFFFFBE0
	DCD	0xFFFFFB20
	DCD	0xFFFFFB60
	DCD	0xFFFFF8A0
	DCD	0xFFFFF8E0
	DCD	0xFFFFF820
	DCD	0xFFFFF860
	DCD	0xFFFFF9A0
	DCD	0xFFFFF9E0
	DCD	0xFFFFF920
	DCD	0xFFFFF960
	DCD	0xFFFFFD50
	DCD	0xFFFFFD70
	DCD	0xFFFFFD10
	DCD	0xFFFFFD30
	DCD	0xFFFFFDD0
	DCD	0xFFFFFDF0
	DCD	0xFFFFFD90
	DCD	0xFFFFFDB0
	DCD	0xFFFFFC50
	DCD	0xFFFFFC70
	DCD	0xFFFFFC10
	DCD	0xFFFFFC30
	DCD	0xFFFFFCD0
	DCD	0xFFFFFCF0
	DCD	0xFFFFFC90
	DCD	0xFFFFFCB0

 ]
 ]
	ALIGN
	DCB cpyrt,0
	ALIGN

fillExit

	; R7,R8 Calculated above
	; R9 is accumulator
	; R10,R11 Updated

	ldmfd	r13!, {r3-r5, r12}

;***************************************************************************
;
;    \ Calculation is as follows
;    \ d = 2^shift
;    \ f = fraction given shift number of bits into 8.24 fraction
;
;    \ value = ( new * f ) + ( old * ( d - f ) )
;    \         ---------------------------------
;    \                      d
;
;    \ In other words, if shift = 3 then we are working in 8th's, d = 8
;    \ Take bits 21-23 of accumulator as fraction f
;
;    \ value = ( new * f ) + ( old * ( 8 - f ) )
;    \         ---------------------------------
;    \                      8
;
; August 21st
;
;
; (1) Oversampling is working but too slow at present.
;     Can probably loose a register.
;     May also be able to improve it by putting volume into bit 1 of R10 as
;     a mute flag and then using R8 (Volume) as oldValue throughout the code.
;
; (2) Look at ways of reducing the code that builds the getReg overReg values
;     into signed 32 bit integers.
;
;
; September 3rd
;
; (1) Mono oversampling works on mono source not on stereo version
;
; (2) R8 Changed to flag and log pointer
;
; (3)
;
;
; September 9th
;
; (1) Currently optimsed for mixing by pre-loading mixRegs
;     This is not generally required by Replay so why not optimise for no
;     mix and only load R10 mix values when required.
;
; September 24th
;
; (1) Problem reported with 8 bit stereo unsigned
;     Left channel silent.
;     Found a problem with 8 bit stereo data build - ORRing the wrong
;     registers
;
;     was:
;
;             MOV    getReg,getReg,LSL #24    \ Left
;             ORR    getReg,R0,R0,LSL #8  \ Right
;
;     now:
;
;             MOV    getReg,getReg,LSL #24    \ Left
;             ORR    getReg,getReg,R0,LSL #8  \ Right
;
;
;***************************************************************************

	END
