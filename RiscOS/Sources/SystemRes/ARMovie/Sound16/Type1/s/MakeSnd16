;**************************************************************************
;
;  File:        s.MakeSnd16
;
;  Description: Sound buffer fill code
;
;  Version:     0.0 28 Jul 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
;               modified from original source by ESP
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;    29 Sep 1997  Pete Goodliffe        Uses an assembled FillCode and
;                                       GETs hdr.config
;
;**************************************************************************
; This is an ObjAsm assembler conversion of the BASIC source of MakeSnd16
; This code is not assembled as is, but is included via a GET directive
;**************************************************************************

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System              ; swi and PSR definitions

	GET	hdr.cpyrt		; the copyright string
	GET	hdr.defns		; various constant definitions

	AREA	|!!!Sound16$$Header$$Code|, CODE, READONLY

	EXPORT	|_CodeStart|

;**************************************************************************
;* The start
;**************************************************************************

|_CodeStart|
start

;**************************************************************************
;* The entry point code header
;**************************************************************************

        ENTRY

; function entry points
	B	sndplay			; play the sound
	B	sndstop			; stop playing the sound
	B	snddata			; give data to be played

sndflags
	DCD	0			; 0 - fixed clock
					; 1 - quality cost
					; 2 - sound disabled

sndbuffA
	DCD	0			; sound bufferA address
					; set up by caller

sndbuffB
	DCD	0			; souynd bufferB address
					; set up by caller

	DCD	0			; "old mode calculation data"
	DCD	0			;  (whatever that is pjg)
	DCD	0

soundTime
	DCD	0			; soundTime

soundFrac
	DCD	0			; soundFrac

	DCD	fill-start		; fill offset from start of code
					; for use by AudioControl

	DCD	0			; more "old mode calculation data"

; There now follows workspaceMax (120) bytes of workspace data
;   This can actually be any size but it is rounded to 120 to be consistent
;   with the position of the copyright message on earlier versions of the
;   code

workspace
	%	workspaceMax			; workspace

; Copyright string

	ALIGN
	DCB	Copyright, 0
	ALIGN

;**************************************************************************
;* The main code
;**************************************************************************

;**************************************************************************

getWorkspacePtr

	ADR	R12,workspace
	MOV	PC,R14

;**************************************************************************

getSndbuffAPtr

	ADR	R2,sndbuffA
	MOV	PC,R14

;**************************************************************************

sndplay
	; Main play entry point
	; On entry:
	;    R0 = 0 , old style timing check - not supported
	;       = 1 , new style timing - set up stuff for given rate etc.
	;       = 2 , play data
	;    R1 = Pointer to 'mute block' which contains various bits of
	;         information abour the data and play parameters
	; On exit:
	;    sndifflags modified to say that 1 sec delay not required

	STMDB	R13!,{R0-R12,R14}


	ADR	R12,workspace		; Set up workspace pointer

	CMP	R0,#0
	BEQ	sndplayExit		; Not supported

	CMP	R0,#2
	BGT	sndplayExit		; Out of range

	STR	R1,[R12,#workspace_muteBlock]
					; Store mute block pointer
					; for later use

	MOV	R8,R0			; Store for later

	; Check that the sound system is active
	;   If it isn't then set the corresponding bit in the sndflags word

	BL	SoundDriver_Identify	; Returns with R0 = 0
					; if non available

	CMP	R0,#0			; If 0 then set flags and exit
	LDREQ	R0,sndflags  		; Get flags
	ORREQ	R0,R0,#sndflag_soundDisabled
	STREQ	R0,sndflags		; Rest of flags maintained
	BEQ	sndplayExit

	; Otherwise the system is OK and we can proceed

	; If R0 = AudioControl then need to set Audio Control flag

	CMP	R0,#AudioControl
	LDREQ	R0,sndflags		; Get flags
	ORREQ	R0,R0,#sndflag_AudioControlAware
	STREQ	R0,sndflags		; Rest of flags maintained

	BL	setStart		; Set up stuff for given rate

	; R8 = entry parameter, will be 1 or 2

	CMP	R8,#2			; If = 2 then start play
					; If = 1 then set flags

	LDRNE	R0,sndflags		; Get flags

	ORRNE	R0,R0,#sndflag_fixedClock
					; set timing flag to say that no
					; 1 sec wait required

	ORRNE	R0,R0,#sndflag_qualityCosts
					; Set quality costs flag to indicate
					; that quality will take cpu time

	STRNE	R0,sndflags		; Rest of flags maintained

	BLEQ	startPlay

sndplayExit

        MRS     R0,CPSR                 ; R0 = 32-bit style CPSR
        TST     R0,#2_11100             ; check for 32-bit mode
        LDMNEIA R13!,{R0-R12,PC}        ; 32-bit exit - flags corrupted
	LDMIA	R13!,{R0-R12,PC}^       ; 26-bit exit - flags preserved

;**************************************************************************

setStart
	; Set up the play details for a particular set of data
	; this includes calculating the fractional step to be used for the
	; given frequency in Hz
	; as well as taking into account the quality flag etc
	; On entry:
	;    R1  = Pointer to mute block
	;    R12 = workspace pointer
	; On exit:

	STMDB	R13!,{R0-R5,R11,R14}

	MOV	R11,R1			; Store mute block pointer

	; Install the handler and then get the fractional step value

	MOV	R0,#0
	STRB	R0,[R12,#workspace_soundOn]
					; Make sure sound flag is set to 0

	MOV	R0,#0			; No buffer active yet,
					; start with buffer A
	STRB	R0,[R12,#workspace_currentDataBuffer]

	MOV	R0,#0
	STR	R0,[R12,#workspace_FillInProgress]

	; Install handler with shared sound

	ADR	R0,fill			; Fill code
	ADR	R1,workspace		; Parameter
	MOV	R2,#0			; No flags

	BL	SoundDriver_InstallHandler

	; Now sort out sample rates and fractions

	; Get the required rate

	LDR	R0,[R11,#muteBlock_Frequency32]
	LDR	R1,[R11,#muteBlock_Frequency24]


	BL	SoundDriver_SampleRate	; Returns current rate and fraction
					; R0 = Current rate
					; R1 = 22.10 fraction

	STR	R0,[R12,#workspace_SystemRate]
	STR	R1,[R12,#workspace_Frequency]

	LDMIA	R13!,{R0-R5,R11,PC}

;**************************************************************************

startPlay
	; Make sure a handler is attached and start
	; the fill routine
	; On entry:
	;    R1  = Mute block pointer
	;    R12 = workspace pointer

	STMDB	R13!,{R0-R12,R14}

	; Handler is already there from setStart so just set the required
	; flags to begin playback

	; Initialise variables

	MOV	R0,#0			; No buffer active yet,
					; start with buffer A
	STRB	R0,[R12,#workspace_currentPlayBuffer]

	BL	SoundDriver_SetBufferSize
					; Set buffer size to reduce
					; interrupt latency

	BL	SoundDriver_SetVolume	; Adjust volume according to
					; system volume

	LDR	R3,[R12,#workspace_muteBlock]
	LDR	R0,[R3,#muteBlock_ControlWord]
					; Is there a control word active?
	CMP	R0,#0

	ADRNE	R1,start		; Start of code
	LDRNE	R2,[R1,#44]		; Offset to fill
	ADDNE	R1,R1,R2		; Added together to get absolute
					; address

;	ADRNE	R1,fill

	STRNE	R1,[R0]			; Store fill address to make this
					; the active movie

	; Start play

	MOV	R0,#0			; Initialise accumulator
	STR	R0,[R12,#workspace_Accumulator]

	MOV	R0,#1
	STRB	R0,[R12,#workspace_soundOn]

	LDMIA	R13!,{R0-R12,PC}

;**************************************************************************

sndstop
	; Stop playback immediately
	; Currently this needs to release the fill routine completely
	; however, it would be better if the fill routine could be maintained
	; if the routine is to be used again.
	; On entry:
	;    none

	STMDB	R13!,{R0-R12,R14}

	ADR	R12,workspace		; Set up workspace pointer

	BL	SoundDriver_RemoveHandler

	BL	SoundDriver_RestoreBufferSize

	BL	SoundDriver_RestoreSampleRate

      [ realtime
        MOV     R0,#0
        STR     R0,[R12,#workspace_InputBytesToSkip]
      ]

        MRS     R0,CPSR                 ; R0 = 32-bit style CPSR
        TST     R0,#2_11100             ; check for 32-bit mode
        LDMNEIA R13!,{R0-R12,PC}        ; 32-bit exit - flags corrupted
        LDMIA   R13!,{R0-R12,PC}^       ; 26-bit exit - flags preserved

;**************************************************************************

fillVolume
	DCD	&FFFFFFFF

fillFlag
	DCD	0

;**************************************************************************

getFillAddress

	ADR	R1,fill
	MOV	PC,R14

;**************************************************************************

fill
	; Entry point for fill routine
	; On entry:
	;    R0 = Pointer to workspace
	;    R1 = pointer to buffer
	;    R2 = pointer to end of buffer
	;    R3 = flags
	;    R4 = sample rate
	;
	; The following are also provided by SharedSound
	;
	;    R5 = sample period
	;    R6 = fractional step
	;    R7 = LR volume
	;
	; On exit:
	;    R3 = Updated flags

	STMDB R13!,{R0-R2,R4-R12,R14}

	MOV	R12,R0			; Get workspace pointer

;	  ADR   R12,workspace

	LDR	R0,[R12,#workspace_FillInProgress]
	CMP	R0,#1			; If set then already filling...

	LDMEQIA R13!,{R0-R2,R4-R12,R14}	; Then exit immediately

	MOV	R0,#1
	STR	R0,[R12,#workspace_FillInProgress]

	STR	R3,fillFlag
	AND	R3,R3,#(flag_mix+flag_mute)
					; Only interested in bit 0 (mix) and
					; bit 31 (audio control - not active)

	LDRB	R0,[R12,#workspace_soundOn]
					; Check if sound is on yet
	CMP	R0,#0
	BEQ	fill_Exit

	; Check Mute block, global flags for pause/mute/stop etc

	LDR	R0,[R12,#workspace_muteBlock]
	LDR	R8,[R0,#muteBlock_GlobalFlags]

	TST	R8,#pauseFlag		; Are we paused
	BNE	fill_Exit

	TST	R8,#stopFlag		; Or stopped
	BNE	fill_Exit

	; Build volume into R5

	LDR	R10,[R12,#workspace_OutputDriver]
	LDR	R9,fillVolume

	CMP	R10,#SharedSound
	MOVEQ	R5,R7			; Get volume from shared sound

	LDRNE	R5,[R12,#workspace_SoundVolume]
					; Or use set value for Sound_Linear
					; and AudioControl

	; R5 = Actual volume
	; R9 = Max volume

	CMP	R5,R9			; If volume <> max then set bit in R3
	ORRNE	R3,R3,#flag_volumeStored; to tell routine to scale volume

	TST	R8,#muteFlag		; For mute
	ORRNE	R3,R3,#flag_mute	; Bit 31 of R3 set for mute

	; Other mute flags

	; ---- Additions for One of n playback

	LDR	R8,[R0,#muteBlock_ControlWord]
					; If <> 0 then contains a
					; fill address

	CMP	R8,#0			; Only check for fill address if <>0
	ADRNE	R7,fill			; get fill address

	LDRNE	R8,[R8]			; Get crrnt fill id from control word
	CMPNE	R8,R7			; compare with stored value


	ORRNE	R3,R3,#flag_mute	; if <> then set bit 31 of R3
					; set for mute

	; ----

	; Update fill flag according to whether sound is muted or not

	LDR	R8,fillFlag
	TST	R3,#flag_mute
	MOVEQ	R8,R8,LSR #3
	MOVEQ	R8,R8,LSL #3
	ORREQ	R8,R8,#1		; If not mute then set mix flag

	STREQ	R8,fillFlag		; and update stored flag


	; Sound quality

	LDR	R8,[R0,#muteBlock_Quality]
					; This is 4 for highest, 1 for lowest

	; At present, old relay uses 4 = High, 1  = Low
	; New replay uses 0 = High, 255 = Low

	CMP	R8,#1			; Test for 1 = Low
	CMPNE	R8,#255			; 255 = low
	ORRNE	R3,R3,#flag_quality	; Bit 1 of R3 for oversampling on


	; Stereo reversed

	LDR	R8,[R0,#muteBlock_Stereo]

	TST	R8,#1			; Only bit defined is
					; stereo reversed bit
	ORRNE	R3,R3,#flag_stereo	; Set bit 29 of R3 to reverse stereo


	; R1  = Buffer
	; R2  = Buffer end
	; R3  = Fill flag
	; R4  = Sample rate
	; R5  = Volume
	; R6  = New fractional step if SharedSound
	; R10 = OutputDriver number

	; See if the system rate has changed

	LDR	R0,[R12,#workspace_SystemRate]
	CMP	R0,R4
	BEQ	fill_RateOK

	; Rate has changed

	STR	R4,[R12,#workspace_SystemRate]
					; Update rate

	CMP	R10,#SharedSound  	; If sharedSound then we can
					; change quickly
	STREQ	R6,[R12,#workspace_Frequency]
	BEQ	fill_RateOK

	; If not shared sound then will have to re-calculate...

	STMDB	R13!,{R0-R5}

	MOV	R2,R4			; Current rate into R2

	LDR	R0,[R12,#workspace_muteBlock]
					; Get rate required
	LDR	R4,[R0,#muteBlock_Frequency32]
	LDR	R5,[R0,#muteBlock_Frequency24]

	MOV	R6,R4,LSL #10		; Build a 22.10 fraction for
					; rate required
	ORR	R6,R6,R5,LSR #14

	; R2 = Current rate
	; R6 = Required rate

	BL	clockCalc		; Returns fraction in R3

	STR	R3,[R12,#workspace_Frequency]

	LDMIA	R13!,{R0-R5}


fill_RateOK

	; Now set up registers for call to fill code
	; and empty the buffers.

	MOV	R10,R1			; Buffer pointer in R10

	SUB	R11,R2,R1		; Sample bytes
	MOV	R11,R11,LSR #2		; Sample words in R11

	LDR	R9,[R12,#workspace_Accumulator]
	LDR	R4,[R12,#workspace_Frequency]


	; R3  = flags
	; R4  = frequency
	; R5  = volume
	; R9  = Accumulator
	; R10 = Buffer pointer
	; R11 = Samples to fill

	; Need to find if there is a buffer on the go
	; currentBuffer will contain 0 for buffer A, 4 for buffer B


fill_BufferFind

	LDRB	R0,[R12,#workspace_currentPlayBuffer]

fill_BufferFind1

	; Check that buffer has data in it

	ADR	R8,sndbuffA		; Address of buffer pointers

	LDR	R7,[R8,R0]		; Current buffer
	LDR	R1,[R7,#buffer_fullFlag]; Is there data in this buffer?
	TST	R1,#bufferFullBit
	BEQ	fill_BufferOK

	ADD	R0,R0,#4		; current buffer value is 0 or 4
	AND	R0,R0,#4

	LDR	R7,[R8,R0]		; Current buffer
	LDR	R1,[R7,#buffer_fullFlag]; Is there data in this buffer?
	TST	R1,#bufferFullBit
      [ realtime
        BNE     fill_Underrun           ; No data in this buffer either
      |
	BNE	fill_Exit		; No data in this buffer either
      ]

	STRB	R0,[R12,#workspace_currentPlayBuffer]
					; Update current buffer value

fill_BufferOK

	; R0 = 0 or 4 for current play buffer
	; R7 = Buffer header pointer

	STR  R7,[R12,#workspace_CurrentBufferPtr]

	; Need to use current buffer workspace header

	LDR  R0,[R7,#buffer_Pointer]
	LDR  R1,[R7,#buffer_Len]

	; Need to set up R7 and R8

	ADD  R7,R7,#buffer_data;	; Start of buffer
	ADD  R8,R7,R1			; End position
	ADD  R7,R7,R0			; Current position

; ---- External fill code -------------------------------------

	; R3  = flags
	; R4  = frequency
	; R5  = volume
	; R7  = Data start
	; R8  = Data end
	; R9  = Accumulator
	; R10 = Buffer pointer
	; R11 = Samples to fill

fillCode				; Load the relevant fill code here

;; load fillcode here *****************************************************
;; it has been converted from the assmbled M/C by !FillConv

	GET	s.FillCode

fillCodeX

	; R3 - R5 preserved
	;
	; R7  = Number of bytes used
	; R8  = Number of samples used
	; R9  = updated accumulator
	;
	; R10 = updated buffer pointer
	; R11 = Updated output samples left to fill

	; If R11 non zero then need to change buffer and continue

	; Update SoundTime and SoundFrac

	; Now update
	;   soundTime
	;   soundFrac

	LDR	R0,soundTime		; Get current value
	ADD	R0,R0,R8		; Add new increment
	STR	R0,soundTime		; And store back

	STR	R9,soundFrac		; The current accumulator value will
					; represent the fractional value

	; Update buffer header

	LDR	R0,[R12,#workspace_CurrentBufferPtr]

	CMP	R11,#0			; If non zero then we need
					; to change buffer

	BGT	fill_ChangeBuffer	; Was BNE

	; Otherwise we have completed the fill, with some data left in the
	; buffer
	; Should also check for the sound buffer and data buffer ending at
	; the same point

	LDR	R1,[R0,#buffer_Pointer]
	ADD	R1,R1,R7
	STR	R1,[R0,#buffer_Pointer]

	LDR	R2,[R0,#buffer_Len]	; If pointer = Len then mark
					; buffer as empty


	CMP	R1,R2

	LDRGE	R1,[R0,#buffer_fullFlag]
	ORRGE	R1,R1,#bufferEmpty
	STRGE	R1,[R0,#buffer_fullFlag]

	LDRGEB	R0,[R12,#workspace_currentPlayBuffer]
	ADDGE	R0,R0,#4		; current buffer value is 0 or 4
	ANDGE	R0,R0,#4

	STRGEB	R0,[R12,#workspace_currentPlayBuffer]


	B	fill_End		; OK for now

fill_ChangeBuffer

	; So current buffer has been emptied, change to other buffer

	; R0 = Current buffer pointer

	LDR	R1,[R0,#buffer_fullFlag]; Mark current buffer as empty
	ORR	R1,R1,#bufferEmpty
	STR	R1,[R0,#buffer_fullFlag]

	LDRB	R0,[R12,#workspace_currentPlayBuffer]
	ADD	R0,R0,#4		; current buffer value is 0 or 4
	AND	R0,R0,#4

	STRB	R0,[R12,#workspace_currentPlayBuffer]

	B	fill_BufferFind1

fill_End

	; Store accumulator for next round

	STR	R9,[R12,#workspace_Accumulator]

fill_Exit

	; On exit:
	;    R3 = Updated flags

	LDR	R3,fillFlag


	MOV	R0,#0
	STR	R0,[R12,#workspace_FillInProgress]

	LDMIA	R13!,{R0-R2,R4-R12,PC}

      [ realtime
fill_Underrun
        ; R3  = flags
        ; R4  = frequency
        ; R9  = accumulator
        ; R10 = output buffer pointer
        ; R11 = output buffer samples we are unable to fill
        MOV     R1,#0
fill_Underrun_loop
        ; Calculate how many samples (at the input rate) we are unable to fill
        ADD     R9,R9,R4
        ADD     R1,R1,R9,LSR #24
        MOV     R9,R9,LSL #8
        MOV     R9,R9,LSR #8
        SUBS    R11,R11,#1
        BNE     fill_Underrun_loop
        ; Multiply by sndmul% to get number of input bytes we needed
      [ stereo
       [ bits=16
        MOV     R1,R1,LSL #2
       |
        MOV     R1,R1,LSL #1
       ]
      |
       [ bits=16
        MOV     R1,R1,LSL #1
       ]
      ]
        MRS     R8,CPSR
        ORR     R9,R8,#I32_bit
        MSR     CPSR_c,R9
        LDR     R0,[R12,#workspace_InputBytesToSkip]
        ADD     R0,R0,R1
        STR     R0,[R12,#workspace_InputBytesToSkip]
        MSR     CPSR_c,R8

        ; On exit:
        ;    R3 = Updated flags

        LDR     R3,fillFlag

        MOV     R0,#0
        STR     R0,[R12,#workspace_FillInProgress]

        LDMIA   R13!,{R0-R2,R4-R12,PC}
      ]

;**************************************************************************
; Sound Data code

snddata
	; Give data to put into buffers if one is available
	; On entry:
	;    R0 = data pointer
	;    R1 = Length

	STMDB	R13!,{R0-R12,R14}

	BL	getWorkspacePtr
;	ADR	R12,workspace		; Set up workspace pointer

	LDR	R2,[R12,#workspace_muteBlock]	; Get flags
	LDR	R2,[R2,#muteBlock_GlobalFlags]
	TST	R2,#stopFlag
	BNE	snddata_Exit		; If flag set then stop in action
					; so don't try filling the buffers

;	ADR	R2,sndbuffA
	BL	getSndbuffAPtr

	LDRB	R3,[R12,#workspace_currentDataBuffer]
					; Current data buffer = 0 or 4

snddata_Loop				; Keep looking for a buffer to
					; come available

	LDR	R4,[R2,R3]		; Buffer address
	LDR	R5,[R4,#buffer_fullFlag]; Try first buffer
	TST	R5,#bufferFullBit

;	CMP	R5,#bufferFull

	ADDEQ	R3,R3,#4		; Change to other buffer
	ANDEQ	R3,R3,#4

	BEQ	snddata_Loop		; Neither buffer is available,
					; loop round


snddata_Go

	; R0 = data pointer
	; R1 = Length
	; R2 = Base source of buffer address
	; R3 = 0 or 4 for index to buffer address

	STRB 	R3,[R12,#workspace_currentDataBuffer]
					; Current data buffer = 0 or 4

	LDR	R2,[R2,R3]

	; R2 = Destination buffer adress

      [ type=compressed

	ADD	R3,R2,#buffer_data

	; type 2 decoding
	; IN:  R0 = Source
	;      R1 = Length
	;      R3 = Destination
	; OUT: R1 = length of output produced
	;      all other regs preserved

        IMPORT decompress
	BL    decompress

	; this bit used to calculate r1 length after decompress called
; [ stereo
;	SUB	R1,R1,#8
;	MOV	R1,R1,LSL #2		; Length  x 4
; |
;	SUB	R1,R1,#4
;	MOV	R1,R1,LSL #2		; Length  x 4
; ]

      |

        ; R1 = Length
        ; R2 = Destination buffer pointer

        ; Move data from R0 into R2 + buffer_data% and set empty flag to full
        ; and store length for later use

        STMDB   R13!,{R1,R2}            ; Preserve R1,R2

        ADD     R3,R2,#buffer_data


        ; .... Need to handle byte aligned, half word aligned, word aligned and quad word aligned

        TST     R0,#3                   ; Is is word aligned?
        BEQ     snddata_Word

        TST     R0,#1                   ; Is it byte aligned?
        BEQ     snddata_HalfWord

        ; Byte aligned
        ; R0 = Source, R1 = Length, R2 = Buffer, R3 = Destination

        ADD     R1,R1,R0                ; End pointer

snddata_ByteLoop

        LDRB    R4,[R0],#1              ; Get 4 bytes
        LDRB    R5,[R0],#1
        LDRB    R6,[R0],#1
        LDRB    R7,[R0],#1

        ORR     R4,R4,R5,LSL #8         ; Build into a word
        ORR     R4,R4,R6,LSL #16
        ORR     R4,R4,R7,LSL #24

        STR     R4,[R3],#4              ; Put word

        CMP     R0,R1                   ; Any more to do?
        BLT     snddata_ByteLoop

        B       snddata_NonADPCMEnd     ; Jump to the end


snddata_HalfWord ; Do a half word by building into a word
                 ; R0 = Source, R1 = Length, R2 = Buffer, R3 = Destination

        MOV     R2,R1,LSL #27           ; Calculate remainder after 8 words
        MOV     R2,R2,LSR #27
        MOV     R1,R1,LSR #5            ; Set length to multiple of 32
        MOV     R1,R1,LSL #5

        ADD     R1,R1,R0                ; Set R1 to destination pointer

        SUB     R0,R0,#2                ; Step back 2

snddata_halfWordLoop

        LDMIA   R0!,{R4-R11}            ; Get data for two halves
        LDR     R12,[R0]

        MOV     R4,R4,LSR #16           ; Make into new words
        ORR     R4,R4,R5,LSL #16

        MOV     R5,R5,LSR #16
        ORR     R5,R5,R6,LSL #16

        MOV     R6,R6,LSR #16
        ORR     R6,R6,R7,LSL #16

        MOV     R7,R7,LSR #16
        ORR     R7,R7,R8,LSL #16

        MOV     R8,R8,LSR #16
        ORR     R8,R8,R9,LSL #16

        MOV     R9,R9,LSR #16
        ORR     R9,R9,R10,LSL #16

        MOV     R10,R10,LSR #16
        ORR     R10,R10,R11,LSL #16

        MOV     R11,R11,LSR #16
        ORR     R11,R11,R12,LSL #16

        STMIA   R3!,{R4-R11}            ; Store in word aligned buffer

        CMP     R0,R1
        BLT     snddata_halfWordLoop

        ADD     R1,R1,R2

        CMP     R12,#0                  ; Data was a multiple of 32
        BEQ     snddata_NonADPCMEnd

snddata_halfWordExtra                   ; Some left to do

        LDRB    R4,[R0],#1
        STRB    R4,[R3],#1
        CMP     R0,R1
        BLT     snddata_halfWordExtra

        B       snddata_NonADPCMEnd     ; Jump to the end


snddata_Word    ; Data is word aligned
                ; R0 = Source, R1 = Length, R2 = Buffer, R3 = Destination

        ; Move 32 bytes in 8 registers

        MOV     R2,R1,LSL #27           ; Calculate remainder after 8 words
        MOV     R2,R2,LSR #27
        MOV     R1,R1,LSR #5            ; Set length to multiple of 32
        MOV     R1,R1,LSL #5

        ADD     R1,R1,R0                ; Set R1 to destination pointer

snddata_WordLoop                        ; 32 Byte LDM / STM

        LDMIA   R0!,{R4-R11}
        STMIA   R3!,{R4-R11}
        CMP     R0,R1
        BLT     snddata_WordLoop

        CMP     R2,#0                   ; Are there any bytes to do?
        BEQ     snddata_WordEnd

        ADD     R1,R1,R2                ; Move end pointer

snddata_WordExtraLoop                   ; Move last words one at a time

        LDR     R4,[R0],#4
        STR     R4,[R3],#4
        CMP     R0,R1
        BLT     snddata_WordExtraLoop

snddata_WordEnd

snddata_NonADPCMEnd

        LDMIA   R13!,{R1,R2}            ; Retrieve destination pointer and length

      ]

snddata_End

      [ realtime
        BL      getWorkspacePtr
        MRS     R8,CPSR
        ORR     R9,R8,#I32_bit
        MSR     CPSR_c,R9
        LDR     R3,[R12,#workspace_InputBytesToSkip]
        CMP     R1,R3
        MOVLO   R4,R1                   ; R4 = number of bytes from this input buffer we
        MOVHS   R4,R3                   ; need to skip in order to get back to real time
        SUB     R3,R3,R4
        STR     R3,[R12,#workspace_InputBytesToSkip]
        MSR     CPSR_c,R8

        STR     R1,[R2,#buffer_Len]     ; Store data length
        STR     R4,[R2,#buffer_Pointer] ; Store byte index to first non-skipped sample
        CMP     R4,R1
        BCS     snddata_Exit            ; Don't mark buffer as full if we're skipping all of it
      |
	STR	R1,[R2,#buffer_Len]	; Store data length

	MOV	R3,#0
	STR	R3,[R2,#buffer_Pointer]	; Initialise buffer counter to 0
      ]

	; Change buffer flag to full (0)

	LDR	R3,[R2,#buffer_fullFlag]
	MOV	R3,R3,LSR #1
	MOV	R3,R3,LSL #1
	STR	R3,[R2,#buffer_fullFlag]; Set buffer to full

snddata_Exit


        MRS     R0,CPSR                 ; R0 = 32-bit style CPSR
        TST     R0,#2_11100             ; check for 32-bit mode
        LDMNEIA R13!,{R0-R12,PC}        ; 32-bit exit - flags corrupted
        LDMIA   R13!,{R0-R12,PC}^       ; 26-bit exit - flags preserved

;**************************************************************************
; Sound driver routines

SoundDriver_Identify
	; Identify which, if any sound system is available
	; On entry:
	;    none
	; On exit:
	;    R0 = 0 if none available
	;       = 1 Audio Control
	;       = 2 Shared Sound
	;       = 3 Sound linear handler

	STMDB	R13!,{R1-R12,R14}

	; Look for these in order of preference:
	;   Audio Control
	;   Shared sound
	;   Sound linear handler

	; Try Audio Control

	MOV	R0,#0			; Return active handler

	SWI	swi_AudioControl_LinearHandler
					;  Will return error if not there

	MOVVC	R0,#AudioControl
	BVC	SoundDriver_IdentifyExit

	; Try shared sound

	MOV	R0,#0
	MOV	R1,#0
	SWI	swi_SharedSound_SampleRate
					; Will return error if not there

	MOVVC	R0,#SharedSound
	BVC	SoundDriver_IdentifyExit

	; Try linear handler

	MOV	R0,#0
	SWI	swi_Sound_Mode		; Will return error if not there

	MOVVC	R0,#SoundLinearHandler

	MOVVS	R0,#0			; Otherwise no handler available

SoundDriver_IdentifyExit

	; Store and return

	STR	R0,[R12,#workspace_OutputDriver]

	LDMIA	R13!,{R1-R12,PC}

;**************************************************************************

SoundDriver_InstallHandler
	; Install the fill code into the sound handler
	; On entry:
	;    R0  = Address of fill code
	;    R1  = Workspace pointer
	;    R2  = Flags
	;    R12 = Workspace pointer

	STMDB	R13!,{R0-R12,R14}

	; Need to make sure that the handler is not already installed
	; and skip over if it is

	; On install need to preserve important values to be restored on exit
	; and initialise any local variables


	LDR	R9,[R12,#workspace_OutputDriver]
					; Which driver is doing this
	ADD	R12,R12,#workspace_SoundWorkspace
					; Set R12 to sound Driver workspace

	CMP	R9,#SharedSound
	BEQ	SoundDriver_InstallHandler_SharedSound

	CMP	R9,#SoundLinearHandler
	BEQ	SoundDriver_InstallHandler_LinearHandler

	CMP	R9,#AudioControl
	BEQ	SoundDriver_InstallHandler_AudioControl


SoundDriver_InstallHandler_Exit

	LDMIA	R13!,{R0-R12,PC}


SoundDriver_InstallHandler_SharedSound

	;    R0  = Address of fill code
	;    R1  = Workspace pointer
	;    R2 =  Flags
	;    R12 = Shared sound's workspace pointer

	ADR	R3,playerName		; Name of handler (0 for no name)

	SWI	swi_SharedSound_InstallHandler

	STR	R0,[R12,#SharedSound_HandlerNumber]
					; Store given handler number

	B	SoundDriver_InstallHandler_Exit

;**************************************************************************

playerName
	DCB "Replay Sound16",0
	ALIGN

;**************************************************************************

SoundDriver_InstallHandler_LinearHandler

	;    R0  = Address of fill code
	;    R1  = Workspace pointer
	;    R2 =  Flags
	;    R12 = Linear handler's workspace pointer

	MOV	R2,R1			; Handler parameter in R2
	MOV	R1,R0			; Code address in R1

	MOV	R0,#1			; Install function code

	SWI	swi_Sound_LinearHandler

	; Do not preserve old value as it may go away before we get
	; around to restoring it

	B	SoundDriver_InstallHandler_Exit

;**************************************************************************

SoundDriver_InstallHandler_AudioControl

	;    R0  = Address of fill code
	;    R1  = Workspace pointer
	;    R2 =  Flags
	;    R12 = Linear handler's workspace pointer

	MOV	R2,R1			; Handler parameter in R2
	MOV	R1,R0			; Code address in R1

	MOV	R0,#1			; Install function code

	SWI	swi_AudioControl_LinearHandler

	; Nothing to store

	B	SoundDriver_InstallHandler_Exit

;**************************************************************************

SoundDriver_SampleRate
	; Sort out all the details regarding sample rate etc.
	; On entry:
	;    R0 = Whole part of sample rate
	;    R1 = 24 bit fractional part
	; On exit:
	;    R0 = Current rate as 22.10 value in Hz
	;    R1 = Frequency fraction as 22.10 value

	STMDB	R13!,{R2-R12,R14}

	; We may be allowed to set the rate to the nearest value,
	; if not then use the current value

	; The following code will depend on the type of sound system
	; being used

	MOV	R4,R0			; Put these into spare registers
	MOV	R5,R1

	LDR	R0,[R12,#workspace_OutputDriver]

	ADD	R12,R12,#workspace_SoundWorkspace
					; Set R12 to sound Driver workspace

	CMP	R0,#SharedSound
	BEQ	SoundDriver_SampleRate_SharedSound

	CMP	R0,#SoundLinearHandler
	BEQ	SoundDriver_SampleRate_LinearHandler

	CMP	R0,#AudioControl
	BEQ	SoundDriver_SampleRate_AudioControl

	MOV	R0,#0			; Not supported so quit with
					; values set to 0
	MOV	R1,#0
;	B	SoundDriver_SampleRate_Exit

SoundDriver_SampleRate_Exit

	LDMIA R13!,{R2-R12,PC}

;**************************************************************************

SoundDriver_SampleRate_SharedSound

	; R4 = Whole part of sample rate
	; R5 = Fractional part
	;
	; R12 = Sound driver workspace

	; Get fraction for handler

	LDR	R0,[R12,#SharedSound_HandlerNumber]
					; handler number

	MOV	R1,R4,LSL #10		; Build a 22.10 fraction
	ORR	R1,R1,R5,LSR #14

	SWI	swi_SharedSound_SampleRate
					; Set rate for handler & get fraction

	; R1 = Current sample rate
	; R3 = Fractional step

	; Need R0 = Current rate
	;      R1 = Fraction

	MOV	R0,R1
	MOV	R1,R3

	B	SoundDriver_SampleRate_Exit

;**************************************************************************

SoundDriver_SampleRate_LinearHandler

	; Linear handler has exclusive use of system so can change
	; the sample rate

	MOV	R0,#1			; Function code - read rate
	SWI	swi_Sound_SampleRate

	; R1 = Index
	; R2 = Rate

	STR	R1,[R12,#Sound_OldRate]	; Same for LinearHandler and
					; AudioControl

	MOV	R0,#0			; Read number of rates
	SWI	swi_Sound_SampleRate

	MOV	R6,R4,LSL #10		; Build a 22.10 fraction for
					; rate required
	ORR	R6,R6,R5,LSR #14

	; R1 = Index

	MOV	R7,R1			; Upper limit
	MOV	R1,#1

SoundDriver_SampleRate_LinearHandler_Loop

	CMP	R1,R7			; Any more rates
	BGE	SoundDriver_SampleRate_LinearHandler_RateFound

	MOV	R0,#2			; Convert index to rate
	SWI	swi_Sound_SampleRate

	; Rate value in R2

	CMP	R2,R6			; Looking for rate available to
					; be >= rate required
	ADDLT	R1,R1,#1		; Try next index value
	BLT	SoundDriver_SampleRate_LinearHandler_Loop

SoundDriver_SampleRate_LinearHandler_RateFound

	; R1 = Rate index to set

	MOV	R0,#3			; Set rate by index

	SWI	swi_Sound_SampleRate

	; The rest is the same as Audio Control

SoundDriver_SampleRate_AudioControl

	; R4 = Whole part of sample rate
	; R5 = Fractional part
	;
	; R12 = Sound driver workspace

	; Get current rate

	MOV	R0,#1			; Function code - read rate

	SWI	swi_Sound_SampleRate

	; R2 = Rate, to be returned in R0

	MOV	R10,R2			; Preserve for now

	; Need to calculate the fraction

	MOV	R6,R4,LSL #10		; Build a 22.10 fraction into R6
	ORR	R6,R6,R5,LSR #14

	; R2 = Current rate
	; R6 = Required rate

	BL	clockCalc		; Returns fraction in R3

	MOV	R1,R3			; Return fraction in R1
	MOV	R0,R10			; Current rate in R0

	B	SoundDriver_SampleRate_Exit

;**************************************************************************

volMask
	DCD	&01FF01FF

SoundDriver_SetVolume
	; Set volume from system volume

	STMDB	R13!,{R0-R12,R14}

	SWI	swi_Sound_Volume

	LDR	R1,volMask
	ORR	R1,R1,R0,LSL #9
	ORR	R1,R1,R0,LSL #25

	STR	R1,[R12,#workspace_SoundVolume]
					;  For use by non-SharedSound code

	LDR	R2,[R12,#workspace_OutputDriver]
	CMP	R2,#SharedSound
	BNE	SoundDriver_SetVolumeExit

	; If SharedSound then set the value with SS call

	; R0 = handler number
	; R1 = LR volume to set

	ADD	R12,R12,#workspace_SoundWorkspace
	LDR	R0,[R12,#SharedSound_HandlerNumber]

	SWI	swi_SharedSound_HandlerVolume

SoundDriver_SetVolumeExit

	LDMIA	R13!,{R0-R12,PC}

;**************************************************************************

SoundDriver_SetBufferSize
	; Set the buffer size to improve interupt stuff
	; On entry:
	;    R12 = workspace pointer

	STMDB	R13!,{R0-R12,R14}

	; This is the same for all handlers at present

	; Set the sound buffer to 416 rather than 208 to reduce
	; interrupt overload

	; First, get old buffer size

	MOV	R0,#0
	MOV	R1,#0
	MOV	R2,#0
	MOV	R3,#0
	MOV	R4,#0

	SWI	swi_Sound_Configure

	STR	R1,[R12,#workspace_OldBufferSize]

	MOV	R0,#0
	MOV	R1,#DMABufferSize		; Set length to new size
	MOV	R2,#0
	MOV	R3,#0
	MOV	R4,#0

	SWI	swi_Sound_Configure

	LDMIA	R13!,{R0-R12,PC}

;**************************************************************************

SoundDriver_RestoreBufferSize
	; Restore old value

	STMDB	R13!,{R0-R12,R14}

	; This is only possible if using LinearHandler as
	; other two will want this fixed

	LDR	R9,[R12,#workspace_OutputDriver]
	CMP	R9,#SoundLinearHandler

	BNE	SoundDriver_RestoreBufferSize_Exit

	; Return buffer length to original value

	MOV	R0,#0
	LDR	R1,[R12,#workspace_OldBufferSize]
					; Set length to old value
	MOV	R2,#0
	MOV	R3,#0
	MOV	R4,#0

	SWI	swi_Sound_Configure


SoundDriver_RestoreBufferSize_Exit

	LDMIA	R13!,{R0-R12,PC}

;**************************************************************************

SoundDriver_RemoveHandler
	; Remove current handler

	STMDB	R13!,{R0-R12,R14}

	LDR	R0,[R12,#workspace_OutputDriver]
	ADD	R12,R12,#workspace_SoundWorkspace

	CMP	R0,#SharedSound
	BEQ	SoundDriver_RemoveHandler_SharedSound

	CMP	R0,#SoundLinearHandler
	BEQ	SoundDriver_RemoveHandler_LinearHandler

	CMP	R0,#AudioControl
	BEQ	SoundDriver_RemoveHandler_AudioControl

SoundDriver_RemoveHandler_Exit

	LDMIA	R13!,{R0-R12,PC}

;**************************************************************************

SoundDriver_RemoveHandler_SharedSound

	LDR	R0,[R12,#SharedSound_HandlerNumber]
					; Get handler number
	CMP	R0,#0
	BEQ	SoundDriver_RemoveHandler_Exit
	SWI	swi_SharedSound_RemoveHandler

	B	SoundDriver_RemoveHandler_Exit

;**************************************************************************

SoundDriver_RemoveHandler_LinearHandler

	; Simply remove handler and leave with none
	;  - cannot guarentee that original handler is still available

	MOV	R0,#1			; Function code Install(Remove)
	MOV	R1,#0			; No handler
	MOV	R2,#0			; No parameter

	SWI	swi_Sound_LinearHandler

	B	SoundDriver_RemoveHandler_Exit

;**************************************************************************

SoundDriver_RemoveHandler_AudioControl

	MOV	R0,#3			; Function code remove
	BL	getFillAddress		; Into R1

	SWI	swi_AudioControl_LinearHandler

	B	SoundDriver_RemoveHandler_Exit

;**************************************************************************

SoundDriver_RestoreSampleRate
	; Restore sample rate

	STMDB	R13!,{R0-R12,R14}

	LDR	R0,[R12,#workspace_OutputDriver]
	ADD	R12,R12,#workspace_SoundWorkspace

	CMP	R0,#SharedSound
	BEQ	SoundDriver_RestoreSampleRate_SharedSound

	CMP	R0,#SoundLinearHandler
	BEQ	SoundDriver_RestoreSampleRate_LinearHandler

	CMP	R0,#AudioControl
	BEQ	SoundDriver_RestoreSampleRate_AudioControl

SoundDriver_RestoreSampleRate_Exit

	LDMIA	R13!,{R0-R12,PC}

;**************************************************************************

SoundDriver_RestoreSampleRate_SharedSound

	; Nothing to do

	B	SoundDriver_RestoreSampleRate_Exit

;**************************************************************************

SoundDriver_RestoreSampleRate_LinearHandler

	; Only handler that accepts rate changes

	MOV	R0,#3
	LDR	R1,[R12,#Sound_OldRate]		; Old rate index

	SWI	swi_Sound_SampleRate

	B	SoundDriver_RestoreSampleRate_Exit

;**************************************************************************

SoundDriver_RestoreSampleRate_AudioControl

	; Nothing to do

	B	SoundDriver_RestoreSampleRate_Exit

;**************************************************************************
; ADPCM decompression code was here, now type 2 decompression code
; is found in including source file
;; end if ADPCM ***********************************************************

;**************************************************************************
; Fractional step maths

clockCalc
	; Calculate fraction count
	; Pass rate in R6, actual rate in R2

	STMDB	R13!,{R14}

	MOV	R9,R2			; Store actual rate
	MOV	R4,R2			; actual rate ready for
					; next calculation

	MOV	R2,#0			; Calculate whole part
	MOV	R3,R6
		; R4=actual rate
	BL	div
	MOV	R10,R3
		; Calculate fraction
		; R2 = Remainder from above
	MOV	R3,#0
		; R4=actual rate
	MOV	R4,R9
	BL	div

	MOV	R3,R3,LSR #8		; 24 Bit fraction
	ADD	R3,R3,R10,LSL #24	; 8 Bit whole part

	LDMIA R13!,{PC}

div
	; Divide R3.R2 by R4 , R3 = result, R2 = remainder

	MOV R5,#32			; Number of bits in divisor

dloop
	MOVS	R3,R3,LSL #1
	MOV	R2,R2,LSL #1
	ORRCS	R2,R2,#1
	CMPS	R2,R4
	BCC	dnext
	SBC	R2,R2,R4
	ADD	R3,R3,#1

dnext
	SUBS	R5,R5,#1
	BNE	dloop
	MOV	PC,R14

;**************************************************************************
;* The end
;**************************************************************************

	END
