;**************************************************************************
;
;  File:        s.DecdBody
;
;  Description: Assembler veneer code body for Acorn Replay sound decomprssr
;               MPEG layer I version
;
;  Version:     0.0 7 Jan 1998
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************

	!	0, "This probably isn't implemented in the C code yet!"

; requires stereo to be defined; 0 - mono, 1 - stereo

	ASSERT	:DEF: stereo

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	EXPORT	|decode_init1|
	EXPORT	|decode_init2|
	EXPORT	|decode_decompress|

;**************************************************************************
;* Set up functions to call

	GBLS	ENTRY0
	GBLS	SIZEOF
	GBLS	DECODER
	[ :LNOT: stereo
	IMPORT	|mpeg_mono_entry0|	; initialise MPEG encoder
	IMPORT	|mpeg_mono_framesize|	; returns framesize
	IMPORT	|mpeg_decoder|		; decode samples from MPEG stream
SIZEOF	SETS	"mpeg_mono_framesize"
ENTRY0	SETS	"mpeg_mono_entry0"
DECODER	SETS	"mpeg_decoder"
	!	0, "MPEG mono decoder"
	]
	[ stereo
	IMPORT	|mpeg_stereo_entry0|	; initialise MPEG encoder
	IMPORT	|mpeg_stereo_framesize|	; returns framesize
	IMPORT	|mpeg_decoder|		; decode samples from MPEG stream
SIZEOF	SETS	"mpeg_stereo_framesize"
ENTRY0	SETS	"mpeg_stereo_entry0"
DECODER	SETS	"mpeg_decoder"
	!	0, "MPEG stereo decoder"
	]

;**************************************************************************
;* Main code body
;**************************************************************************

;**************************************************************************
;* Initialisation

decode_init1
	; initialise for encoding
	;   on entry:
	;     r0: sample frequency in Hz for information
	;     r1: zero if no parameter string
	;         or pointer to parameter string, null terminated
        ;   returns
        ;     r0: workspace size required
	;     r1: zero or pointer to error block
	;     r2: frame size of compression type

        str     lr, [r13, #-4]!

	str	r0, sampleHz		; record the sample rate

	mov	r2, #1			; layer I
	bl	$ENTRY0			; initialise
	cmp	r0, #0
	movne	r1, r0			; move error to r1 and return
        ldrne   pc, [r13], #4

	; therefore must have been a good parameter string

	bl	$SIZEOF			; frame size returned in r0
	str	r0, frameSize		; store the frame size

	mov	r2, r0			; frame size
	mov	r1, #0			; no error
	mov	r0, #0			; no workspace required

        ldr     pc, [r13], #4

;**************************************************************************

decode_init2
	; initialise workspace
	;   on entry
	;     r0: sample frequency in Hz for information
	;     r1: pointer to workspace
	;     r2: size of workspace
	;   returns
	;     r0: either 0 or pointer to error block

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	; don't need to do anything

	mov	r0, #0			; return success
        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(

;**************************************************************************
;* Compression
;**************************************************************************

decode_decompress
	; compress a frame
	;   on entry
	;     r0: current bit offset in input buffer (updated on exit)
	;     r1: pointer to input buffer
	;     r2: number of samples (usually the input frame sample size)
	;     r3: pointer to output samples
	;     r4: pointer to workspace **invalid for this codec**
	;     r5: true (non zero) if frame is start of chunk,
	;         false otherwise
	;   returns
	;     r0: new current bit offset in input buffer
	;     r1: either 0 or pointer to error block
	;     r2: actual number of samples produced per channel

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	mov 	r6, r0, LSR#3		; convert bit offset to byte offset
					; we can assume for this codec that
					; that it will be on a byte boundary

	; prepare registers for call to |mpeg_decoder|

	add	r0, r1, r6
	mov	r1, r3

	; for |mpeg_decoder| entry
	;   r0 = source samples pointer
	;   r1 = pointer to destination
	; exit
	;   r0 = no bytes consumed
	;
	; the function consumes a variable amount of bytes and produces
	;   frameSize 16-bit words from the bitstream

	bl	$DECODER

	; calculate return values

	add	r0, r0, r6		; add no bytes consumed and offset
	mov	r0, r0, LSL#3		; convert it to bits for new offset

	mov	r1, #0			; assume success
	ldr	r2, frameSize

        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(

;**************************************************************************
;* The data area
;**************************************************************************

sampleHz
	DCD	0;			; sample rate given to init1
frameSize
	DCD	0;			; frame size from entry0

;**************************************************************************
;* The error blocks
;**************************************************************************

error_implementMe
	DCD	0;			; error number
	DCB	"Layer I decoding hasn't yet been implemented!", 0
					; error message
	ALIGN

;**************************************************************************
;* End of file
;**************************************************************************

	END
