;**************************************************************************
;
;  File:        s.Decompress.MPEG
;
;  Description: MPEG layer I decompression bobbins
;
;  Version:     1.0 9 Jan 1998
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

	!	0, "This probably hasn't been implemented yet!!!"
	!	0, "use WITH CAUTION!"

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point
	IMPORT	|__RelocCode|		; reloc code from module linkage

	GBLS	ENTRY0
	GBLS	SIZEOF
	GBLS	DECODER
	GBLS	BATCH
	[ :LNOT: stereo
	IMPORT	|mpeg_mono_entry0|	; initialise MPEG encoder
	IMPORT	|mpeg_mono_framesize|	; returns framesize
	IMPORT	|mpeg_decoder|		; decode samples from MPEG stream
	IMPORT	|mpeg_mono_batch_decoder| ; batch decoder
SIZEOF	SETS	"mpeg_mono_framesize"
ENTRY0	SETS	"mpeg_mono_entry0"
DECODER	SETS	"mpeg_decoder"
BATCH	SETS	"mpeg_mono_batch_decoder"
	!	0, "Mono MPEG playback"
	]
	[ stereo
	IMPORT	|mpeg_stereo_entry0|	; initialise MPEG encoder
	IMPORT	|mpeg_stereo_framesize|	; returns framesize
	IMPORT	|mpeg_decoder|		; decode samples from MPEG stream
	IMPORT	|mpeg_stereo_batch_decoder| ; batch decoder
SIZEOF	SETS	"mpeg_stereo_framesize"
ENTRY0	SETS	"mpeg_stereo_entry0"
DECODER	SETS	"mpeg_decoder"
BATCH	SETS	"mpeg_stereo_batch_decoder"
	!	0, "Stereo MPEG playback"
	]

;**************************************************************************
; MPEG decompression code

decompress

	; decompress a chunk of MPEG bitsream sound data
	; IN:  r0 = Source
	;      r1 = Length of source in bytes
	;      r3 = Destination
	; OUT: r1 = length of output produced in bytes
	;      all registers preserved

	stmfd	r13!, {r14}
	stmfd	r13!, {r0, r2-r12}

	; relocation initalisation, performed once at first call
	ldr	r4, hasinit
	cmp	r4, #0
	beq	init
init_ret

	; call mpeg_X_batch_decoder
	;   r0 - pointer to input
	;   r1 - pointer to output buffer
	;   r2 - amount of source (bytes)
	; returns
	;   r0 - no of samples produced

	;mov	r0, r0				; input pointer
	mov	r2, r1				; length of source in bytes
	mov	r1, r3				; dest pointer
	bl	$BATCH
	mov	r1, r0, LSL #1			; convert samples -> bytes

MPEG_end
	ldmfd	r13!, {r0, r2-r12}
	ldmfd	r13!, {pc}^


;**************************************************************************
; init
;     this sorts out the C code that has to be reloated prior to use
;     init must be called once before the C code is called

hasinit
	DCD	0				; has init occurred?

init
	stmfd	r13!, {r0-r12}

	bl	|__RelocCode|			; relocate this code
	mov	r0,#0				; synchronise code areas
	swi	&2006e				;   (don't confuse SA)

	mov	r4, #1
	str	r4, hasinit

	; MPEG decoder initialisation
	;
	; There are some problems here: we don't get passed the replay
	; rate and we don't get passed a parameter string
	; To be honest, we don't care about this since the replay rate
	; isn't actually used (!?), and the parameter string isn't actually
	; needed. However, in some other codec it might be...

	mov	r0, #8000			; replay rate (AHGR!)
	mov	r1, #0				; no parameter string (AHGR!)
	mov	r2, #1				; layer I
	bl	$ENTRY0				; initialise
						; this will not give an error

	ldmfd	r13!, {r0-r12}
	b	init_ret


;**************************************************************************

	END
