/* frame.h */

#define FR_SYNC(hdr)		((hdr) >> 20 & 0xFFF)
#define FR_ID(hdr)		((hdr) >> 19 &  1) /* value 1 ISO/IEC 11172-3, 0 reserved */
#define FR_LAYER(hdr)	   (4 - ((hdr) >> 17 &  3)) /* value 0..3 (0 reserved) */
#define FR_PROT(hdr)	      (!((hdr) >> 16 &  1)) /* boolean: err prot active */
#define FR_BITRATE_X(hdr)	((hdr) >> 12 & 15) /* value: bitrate index */
#define FR_SAMPRATE_X(hdr)	((hdr) >> 10 &  3) /* value: sample rate index */
#define FR_PADDING(hdr)		((hdr) >>  9 &  1) /* boolean: extra slot in frame */
#define FR_PRIVATE(hdr)		((hdr) >>  8 &  1) /* private bit */
#define FR_MODE(hdr)		((hdr) >>  6 &  3) /* mode field: stereo,j-s,dual,mono */
#define  MODE_STEREO	0
#define  MODE_JSTEREO	1
#define  MODE_DUAL	2
#define  MODE_MONO	3
#define FR_MODEEXT(hdr)		((hdr) >>  4 &  3) /* mode-ext field: jsbound index */
#define FR_COPYRIGHT(hdr)	((hdr) >>  3 &  1) /* copyright flag */
#define FR_ORIGINAL(hdr)	((hdr) >>  3 &  1) /* original(1), copy(0) */
#define FR_EMPHASIS(hdr)	((hdr) >>  0 &  3) /* pre-emphasis: n,5/50,rsvd,CCITTJ.17 */


typedef struct
{
    uint32 header;			/* raw header information (32 bits) */
    uint32 startpos;			/* starting bit offset of frame in bitstream */
    uint32 totalbits;			/* total size of frame in bits, for frame-end */
    uint8 nchan;			/* 1 or 2 */
    uint8 jsbound;			/* lowest band coded as intensity stereo */
    uint16 crc;				/* as read after header, if protection on */
    /* Remaining fields only used for Layer II */
    struct al_table_ *alloc;		/* bit allocation table */
    uint8 sblimit;			/* lowest sub band not in use */
} FrameInfo;

void diag_header (FrameInfo *fi, FILE *s);

uint32 crc_step (uint32 crc, int databits, uint32 data);


/* EOF frame.h */
