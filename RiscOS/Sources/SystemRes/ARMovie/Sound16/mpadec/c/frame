/* frame.h */
#include <stdio.h>
#include <stdlib.h>
#include "mpa.h"
#include "frame.h"
#include "tables.h"

// altered these to _M1 28 Jab 98
static int *lbr[3] = { LI_bitrate_M1, LII_bitrate_M1, LIII_bitrate_M1 };
static char *emphtab[4] = { "none", "5/50us", "*reserved value*", "CCITT J.17" };

void diag_header (FrameInfo *fi, FILE *s)
{
    uint32 h = fi->header;
    int layer = FR_LAYER(h);
//    fprintf (s, "ID %d, layer %s, %serror protection, ",
//	     FR_ID(h), "III"+3-layer, FR_PROT(h) ? "" : "no ");
//    if (FR_BITRATE_X(h))
//	fprintf (s, "bitrate %u, ", lbr[layer-1][FR_BITRATE_X(h)-1]);
//    else
//	fprintf (s, "free format, ");
//    fprintf (s, "sample rate %u, %spadding,\n",
//	     sample_rate[FR_SAMPRATE_X(h)], FR_PADDING(h) ? "" : "no ");
//    fprintf (s, "private bit %d, mode %s, mode ext %x, ",
//	     FR_PRIVATE(h), mode_name[FR_MODE(h)], FR_MODEEXT(h));
//    fprintf (s, "%scopyright, %s, preemphasis %s\n",
//	     FR_COPYRIGHT(h) ? "" : "not ",
//	     FR_ORIGINAL(h) ? "original data" : "copied data",
//	     emphtab[FR_EMPHASIS(h)]);
//    fprintf (s, "sblimit %d, jsbound %d frame size %d bits = %d bytes\n",
//	     fi->sblimit, fi->jsbound, fi->totalbits, fi->totalbits/8);
//    fflush (s);
}

uint32 crc_step (uint32 crcval, int nbits, uint32 data)
{
    int checkpos;
    checkpos = nbits - 1;
    do
    {
	uint32 cbit = crcval >> 15;
	uint32 dbit = (data >> checkpos) & 1;
	crcval = (crcval & ~0x8000) << 1;
	if (cbit != dbit)
	    crcval ^= CRC_GENERATOR;
    } while (--checkpos >= 0);
    return crcval;
}

/* EOF frame.h */
