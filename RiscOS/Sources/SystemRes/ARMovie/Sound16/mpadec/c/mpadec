/***************************************************************************
 *
 *  File:        mpadec.c
 *
 *  Description: MPEG Audio decoder interface
 *
 *  Version:     0.0 29 Jan 1998
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *               Mark Taunton (mtaunton@acorn.com)
 *               The original MPEG team...
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *    10 Dec 1997  Pete Goodliffe        Ripped main open into sub functions
 *    ...          Pete Goodliffe        fiddle more than I care to imagine
 *
 ***************************************************************************/
//#include "MemCheck:MemCheck.h"

////////////////////////////////////////////////////////////////////////////
// I've left the structure of the original mpadec code in for reference,
//   and commented most of it out where it isn't applicable to this munged
//   version (for example, input/output stuff, looping over the entire file
//   initialisation from command line parameters etc).
// Since this code can't use the Shared C Library, some functions from it
//   have had to be hackily added. Mmm.
// A selection of new initialise routines do all of the setting up.
// This codec is only capable of decoding layer II since the additional
//   layer I optimisation would be non trivial.
// Debugging funcions are available (if built in) for some sort of limited
//   error checking within the replay environment (e.g. changing the border
//   colour, writing strings to screen (IFF you are not in SVC mode!!!))
//
// Pete Goodliffe (29 Jan 1998)

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "mpadec.h" // the interface this file now implements

#include "mpa.h"
#include "fxptparams.h"
#include "soundtypes.h"
#include "frame.h"
#include "tables.h"
#include "bits.h"
#include "decode.h"
#include "generate.h"

///////////////////////////////////////////
// debugging function declarations

//void write_string(char *str);
//void write_hex(int val);
//void write_newline(void);
//void border_green(void);
//void border_red(void);
//void border_blue(void);
//void border_brown(void);
//void mode_test(void);

extern int clipcount;

//#if defined(DIAGS)                    // old diagnostic #define, now mainly removed
//extern int qxcount[3+14];
//#endif

int diags = 0;

#define NSAMP 1152			/* must be multiple of 64 */

////////////////////////////////////////////////////////////////////////////
// data that was local, and now is global, euch!
//   given arbitrary values to prevent them becomming zero init areas

int bit_alloc[2*SBLIMIT+1] ={1};
union
{
    unsigned char mono[3][SBLIMIT];
    unsigned char stereo[3][SBLIMIT][2];
} scales ={1};
union fsampx
{
    fsamp_M	      mono[3][SBLIMIT];
    fsamp_S	      stereo[3][SBLIMIT];
};
unsigned char fsbuf[sizeof(union fsampx)+31] ={1};
union fsampx *fsampp;// = (union fsampx *)(((long int)fsbuf + 31) & ~31);
short samp_buff[NSAMP] ={1};	/* output buffer */
int i, j, nchan, err, no_out;
int crc_error_count, total_error_count;
uint32 crc;
FrameInfo fi;
short *sampout;
uint32 frame;
char infile_name[FILENAME_MAX] ={1}, outfile_name[FILENAME_MAX] ={1};

int lay, stereo, samplesPerFrame; // PJG 19 Dec 1997


////////////////////////////////////////////////////////////////////////////
// parse_string, used by the initialisation routines

//static os_error error_replay_rate = {
//    0, "Invalid sample rate parameter string passed from ARMovie header.\n"
//};

static os_error error_token = {
    0, "Incorrect parameter token specified in parameter string.\n"
};

static os_error error_eof = {
    0, "End of parameter string reached before read whole parameter.\n"
};

static os_error error_l = {
    0, "Invalid layer specified in parameter string.\n"
};

static os_error error_l_3 = {
    0, "This codec does not support mpeg layer III audio.\n"
};

static os_error error_m_nochannels = {
    0, "Mode specified in parameter string invalid for mono encoding.\n"
};

static os_error error_m = {
    0, "Invalid mode specified in parameter string.\n"
};

static os_error error_p = {
    0, "Invalid psychoacoustic model number specified in parameter string.\n"
};

static os_error error_d = {
    0, "Invalid emphasis specified in parameter string.\n"
};

static os_error error_c = {
    0, "Invalid copyright flag specified in parameter string.\n"
};

static os_error error_o = {
    0, "Invalid original flag specified in parameter string.\n"
};

static os_error error_e = {
    0, "Invalid error protection flag specified in parameter string.\n"
};

static os_error *parse_strings(
    int replayRate,
    char *string,
    int noChannels,
    int layer
) {

   int pos;

   // deal with the replay rate
   //   this is done by finding the nearest frequency to one of MPEG's
   //   standard one (i.e. a bit of a bodge)
   {
       #define abs(x) ((x < 0) ? -(x) : x)
       int delta, rr;
       rr = 32000; delta = abs(rr-replayRate);
       if (abs(replayRate-44100) < delta) {
           rr = 44100;
           delta = abs(rr-replayRate);
       }
       if (abs(replayRate-48000) < delta) {
           rr = 48000;
           delta = abs(rr-replayRate);
       }
       replayRate = rr;
       #undef abs
   }
//   if (replayRate != 32000 && replayRate != 44100 && replayRate != 48000)
//       return &error_replay_rate;

   // deal with layer number
   if (layer == 3)               return &error_l_3;
   if (layer != 1 && layer != 2) return &error_l;
   lay = layer;

   // check for a null parameter pointer
   if (string == 0) return NULL;

   // parse the string
   pos = 0;
   while (string[pos] != 0) {
       switch (string[pos++]) {

           case 'm': // specify mode
               if (noChannels == 1) return &error_m_nochannels;
               switch (string[pos++]) {
                   case 'j':
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_m;
               }
               break;

           case 'p': // specify psychoacoustic model
               switch (string[pos++]) {
                   case '1':
                   case '2':
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_p;
               }
               break;

           // case 's' ??? should be inferred from the header ...

           case 'b': // specify total bitrate, irrespective of the mode
               if (string[pos] == 0) return &error_eof;
               while (string[pos] >= '0' && string[pos] <= '9') pos++;
               break;

           case 'd': // specify emphasis
               switch (string[pos++]) {
                   case 'n':
                   case '5':
                   case 'c':
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_d;
               }
               break;

           case 'c': // specify copyright flag
               switch (string[pos++]) {
                   case '0':
                   case '1':
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_c;
               }
               break;

           case 'o': // specify original flag
               switch (string[pos++]) {
                   case '0':
                   case '1':
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_o;
               }
               break;

           case 'e': // specify error protection flag
               switch (string[pos++]) {
                   case '0':
                   case '1':
                       break;
                   case 0:
                       return &error_eof;
                       break;
                   default:
                       return &error_e;
               }
               break;

           default:
               return &error_token;

       }
   }
   return NULL;
}


////////////////////////////////////////////////////////////////////////////
// Initialisation routines

static void mpeg_generic_init_pre_parse() {
    lay = 2; // default layer
}

static void mpeg_generic_init_post_parse() {
//    this was the top bits of main()

//int main (int argc, char **argv)

//    int bit_alloc[2*SBLIMIT+1]; // now above in global scope (spew)
//    union
//    {
//	unsigned char mono[3][SBLIMIT];
//	unsigned char stereo[3][SBLIMIT][2];
//    } scales;
//    union fsampx
//    {
//	fsamp_M	      mono[3][SBLIMIT];
//	fsamp_S	      stereo[3][SBLIMIT];
//    };
//    unsigned char fsbuf[sizeof(union fsampx)+31];
//    union fsampx *fsampp = (union fsampx *)(((long int)fsbuf + 31) & ~31);
//    short samp_buff[NSAMP];	/* output buffer */
//    int i, j, nchan, err, no_out;
//    int crc_error_count, total_error_count;
//    uint32 crc;
//    FrameInfo fi;
//    FILE *outfile;
//    short *sampout;
//    uint32 frame;
//    char infile_name[FILENAME_MAX], outfile_name[FILENAME_MAX];

    // I put this one in here
    fsampp = (union fsampx *)(((long int)fsbuf + 31) & ~31);

    sampout = samp_buff;

    fi.alloc = NULL;

    infile_name[0] = '\0';
    outfile_name[0] = '\0';
    no_out = 0;
    diags = 0;
    i = 0; err = 0;
//    while (++i < argc && err == 0)
//    {
//	char c, *token, *arg, *nextArg;
//	int  argUsed;
//
//	token = argv[i];
//	if(*token++ == '-') {
//	    if(i+1 < argc) nextArg = argv[i+1];
//	    else           nextArg = "";
//	    argUsed = 0;
//	    while ((c = *token++) != '\0')
//	    {
//                if (*token /* NumericQ(token) */) arg = token;
//                else                             arg = nextArg;
//                switch(c)
//		{
//		  case 'N':
//		    no_out = 1;
//		    break;
//		  case 'd':
//		    diags++;
//		    break;
//
//		  default:   fprintf(stderr,"%s: unrecognized option %c\n",
//				     progname, c);
//		    err = 1; break;
//                }
//                if(argUsed) {
//		    if(arg == token) token = ""; /* no more from token */
//		    else             ++i; /* skip arg we used */
//		    arg = ""; argUsed = 0;
//                }
//	    }
//	}
//	else {
//	    if(infile_name[0] == '\0')
//                strcpy(infile_name, argv[i]);
//	    else
//                if(outfile_name[0] == '\0')
//		    strcpy(outfile_name, argv[i]);
//                else {
//		    fprintf(stderr,
//			    "%s: excess arg %s\n", progname, argv[i]);
//		    err = 1;
//                }
//	}
//    }
//
//    if(err || infile_name[0] == '\0') usage();  /* never returns */
//
//    if(outfile_name[0] == '\0') {
//	strcpy(outfile_name, infile_name);
//	strcat(outfile_name, ".dec");
//    }
//
//    if (strcmp(outfile_name,"stdout") == 0 ||
//	strcmp(outfile_name,"-") == 0)
//    {
//	outfile = stdout;
//    }
//    else
//    {
//	if ((outfile = fopen (outfile_name, "w+b")) == NULL)
//	{
//            fprintf (stderr, "Could not create \"%s\".\n", outfile_name);
//            exit(1);
//	}
//    }

//    open_bit_stream (infile_name, MAX_FRAME*2);

    crc_error_count = 0;
    total_error_count = 0;
}

os_error *mpeg_mono_entry0(int replayRate, char *parameterString, int l) {

   os_error *error;
   mpeg_generic_init_pre_parse();
   stereo = 1;

   // parse parameter string
   error = parse_strings(replayRate, parameterString, 1, l);
   if (!error) mpeg_generic_init_post_parse();
   samplesPerFrame = mpeg_mono_framesize();
   return error;
}


int mpeg_mono_framesize(void) {
    return (lay == 1) ? 384 : 1152;
}


os_error *mpeg_stereo_entry0(int replayRate, char *parameterString, int l) {

   os_error *error;
   mpeg_generic_init_pre_parse();
   stereo = 2;

   // parse parameter string
   error = parse_strings(replayRate, parameterString, 2, l);
   samplesPerFrame = mpeg_stereo_framesize();
   if (!error) mpeg_generic_init_post_parse();
   return error;
}


int mpeg_stereo_framesize(void) {
    //return (lay == 1) ? 768 : 2304; this is it is in total
    return (lay == 1) ? 384 : 1152; // this since it is /per channel/
}


////////////////////////////////////////////////////////////////////////////
// mpeg_decoder
//     Takes an MPEG frame of audio data, and produces NSAMP samples
//     returns 1: stream OK, 0: given up, stream must hage ended

int mpeg_decoder(unsigned char *indata, short *outdata, int indata_maxlen)
{
    static int current_offset = 0; // measured in bytes

    mpeg_set_bit_stream(indata, current_offset*8, indata_maxlen);

    sampout = outdata;

//    for (frame = 0; ; ++frame)
//    {
	if (!decode_header (&fi))
	    return 0;//break;

	/*
	 * Ask bit-input code to ensure enough data that the whole
	 * frame can be read without limit checking, for speed.
	 */

	if (!ensure_bits (fi.startpos + fi.totalbits - bitposition()))
	{
//	    fprintf (stderr, "Final frame truncated\n");
	    return 0;//break;
	}
	nchan = fi.nchan;
//#if 0
//	clipcount = 0;
//#endif

	if (FR_LAYER(fi.header) == 1)
	{
        // Layer I is dead: ATM it is non trivial to convert this to fixed point maths and add
        // other optimisations as Layer II has had. So it won't be.
//#if 0
//	    fprintf (stderr, "Layer I not currently supported\n");
//	    exit (1);
          return 0;//current_offset;
//#else
//	    if (!FR_PROT(fi.header))
//	    {
//		I_decode_bitalloc (bit_alloc, &fi, NULL);
//		I_decode_scale (bit_alloc, scale_index, &fi, NULL);
//	    }
//	    else
//	    {
//                crc = crc_step (CRC_SEED, 16, fi.header & 0xFFFF);
//		I_decode_bitalloc (bit_alloc, &fi, &crc);
//		I_decode_scale (bit_alloc, scale_index, &fi, &crc);
//                if (crc != fi.crc)
//		{
//		    crc_error_count++;
//		    total_error_count++;
//		    recover_CRC_error (crc_error_count, &fi, outfile);
//		    return 0;
////		    break;
//                }
//                else
//		    crc_error_count = 0;
//	    }
//	    for (i = 0; i < SCALE_BLOCK; i++)
//	    {
//                I_buffer_sample((*sample),bit_alloc,&fi);
//                I_dequantize_sample(*sample,*fraction,bit_alloc,&fi);
//                I_denormalize_sample((*fraction),scale_index,&fi);
//                for (j = 0; j < nchan; ++j)
//		{
//		    int q;
//		    for (q = 0; q < SBLIMIT; ++q)
//			(*ifraction)[j][0][q] = (int)((*fraction)[j][0][q] * 32768.0);
//		    ISubBandSynthesis (&((*ifraction)[j][0][0]), j, nchan, sampout + j);
//                }
//		sampout += 32 * nchan;
//		if (sampout == samp_buff + NSAMP)
//		{
////		    if (!no_out)
////		    {
////#ifdef RISC_OS
////			fwrite (samp_buff, sizeof(*sampout), NSAMP, outfile);
////#else
////			write (fileno(outfile), (char *)samp_buff, NSAMP * sizeof(*sampout));
////#endif
////		    }
//		    sampout = samp_buff;
//		}
//	     }
//#endif
	}
	else
	{

	    if (!FR_PROT(fi.header))
	    {
		int nsf = II_decode_bitalloc (bit_alloc, &fi);
		if (nchan == 1)
		    II_decode_scale_mono (bit_alloc, nsf, scales.mono, &fi);
		else
		    II_decode_scale_stereo (bit_alloc, nsf, scales.stereo, &fi);

	    }
	    else
	    {
		uint32 cn;
		int nsf;

		crc = crc_step (CRC_SEED, 16, fi.header & 0xFFFF);
		cn = II_decode_bitalloc_CRC (bit_alloc, &fi, crc);
		crc = cn & 0xFFFF;
		nsf = cn >> 16;
		if (nchan == 1)
		    crc = II_decode_scale_mono_CRC (bit_alloc, nsf, scales.mono,
							&fi, crc);
		else
		    crc = II_decode_scale_stereo_CRC (bit_alloc, nsf, scales.stereo,
							  &fi, crc);

		if (crc != fi.crc)
		{
		    crc_error_count++;
		    total_error_count++;
		    recover_CRC_error(crc_error_count, &fi, sampout/*, outfile PJG*/);
		    return 0;//break;
		}
		else
		    crc_error_count = 0;
	    }

	    if (nchan == 1)
	    {
		int i;
		memset (fsampp->mono, 0, sizeof(fsampp->mono));
		for (i = 0; i < SCALE_BLOCK; ++i)
		{

		    II_obtain_sample_mono (bit_alloc, scales.mono[i>>2], fsampp->mono);
		    for (j = 0; j < 3; ++j)
		    {
			generate_mono (fsampp->mono[j], sampout, 1);
			sampout += 32;
			if (sampout == samp_buff + NSAMP)
			{
//			    if (!no_out)
//			    {
//#ifdef RISC_OS
				//fwrite (samp_buff, sizeof(*sampout), NSAMP, outfile);
				//!!//memcpy(outdata, samp_buff, sizeof(*sampout)*NSAMP);
				//!!//outdata +=  sizeof(*sampout)*NSAMP;
//#else
//				write (fileno(outfile), (char *)samp_buff,
//				       NSAMP * sizeof(*sampout));
//#endif
//			    }
			    sampout = samp_buff;
			}
		    }
		}
	    }
	    else
	    {
		int i;
		memset (fsampp->stereo, 0, sizeof(fsampp->stereo));
		for (i = 0; i < SCALE_BLOCK; ++i)
		{
		    if (fi.jsbound >= fi.sblimit)
			II_obtain_sample_stereo (bit_alloc,
						 scales.stereo[i>>2], fsampp->stereo);
		    else
			II_obtain_sample_joint_stereo (bit_alloc,
						       scales.stereo[i>>2], fsampp->stereo);
//#if 1
		    for (j = 0; j < 3; ++j)
		    {
			generate_stereo (fsampp->stereo[j], sampout, 1);
			sampout += 32*2;
			if (sampout == samp_buff + NSAMP)
			{
			    //if (!no_out)
			    //{
//#ifdef RISC_OS
				//fwrite (samp_buff, sizeof(*sampout), NSAMP, outfile);
				//!!//memcpy(outdata, samp_buff, sizeof(*sampout)*NSAMP);
				//!!//outdata +=  sizeof(*sampout)*NSAMP;
//#else
//				write (fileno(outfile), (char *)samp_buff,
//				       NSAMP * sizeof(*sampout));
//#endif
			    //}
			    sampout = samp_buff;
			}

		    }
//#else
//		    generate_stereo (fsampp->stereo, sampout, 3);
//		    sampout += 3*32*2;
//		    if (sampout == samp_buff + NSAMP)
//		    {
//			if (!no_out)
//			{
//#ifdef RISC_OS
//			    fwrite (samp_buff, sizeof(*sampout), NSAMP, outfile);
//#else
//			    write (fileno(outfile), (char *)samp_buff,
//				   NSAMP * sizeof(*sampout));
//#endif
//			}
//			sampout = samp_buff;
//		    }
//#endif
		}
	    }
	}
	/* Deal with any spare bits at end of frame */
	decode_ancilliary_data (&fi);
//    }
    {
        // we make the (rash?) assumption here that a whole number
        // of bytes will have been consumed
        int old_offset = current_offset;
        current_offset = bitposition()/8;
        return (current_offset-old_offset);
    }
}


////////////////////////////////////////////////////////////////////////////
// the batch versions

int mpeg_mono_batch_decoder(
    unsigned char indata[],          // ptr to input data:  sign 16 bit lin
    short outdata[],                 // ptr to output buffer: char stream
    int len                          // no bytes of source buffer
) {
    int opLen = 0;
    //write_string("mpeg_mono_batch_decoder (");  // anal diagnostics
    //write_hex((int)indata); write_string(", ");
    //write_hex((int)outdata); write_string(", ");
    //write_hex(len); write_string(") ");
    //border_green();
    while (len > 0) {
        int consumed = mpeg_decoder(indata, outdata, len);
        //if (!consumed) write_string("X");
        if (!consumed) break;
        outdata += (lay == 1) ? 384 : 1152;
        opLen   += (lay == 1) ? 384 : 1152;
        indata  += consumed;
        len     -= consumed;
        //write_string(".");
    }
    //write_newline();
    //border_blue();
    //mode_test();

    return opLen;

} // end mpeg_mono_batch_decoder


int mpeg_stereo_batch_decoder(
    unsigned char indata[],          // ptr to input data:  sign 16 bit lin
    short outdata[],                 // ptr to output buffer: char stream
    int len                          // no bytes of source buffer
) {
    int opLen = 0;

    while (len > 0) {
        int consumed = mpeg_decoder(indata, outdata, len);
        if (!consumed) break;
        outdata += (lay == 1) ? 384*2 : 1152*2;
        opLen   += (lay == 1) ? 384*2 : 1152*2;
        indata  += consumed;
        len     -= consumed;
    }

    return opLen;

} // end mpeg_stereo_batch_decoder


////////////////////////////////////////////////////////////////////////////
// finalisation stuff
//     is this actually necessary any more?? I hope not!
//     this was the end of main()
//     we can easily live without it, which makes out life much easier
#if 0
void mpa_finalise(short outdata[])
{
    /* Write out any data left in the buffer */
    if (!no_out && sampout > samp_buff)
    {
//#ifdef RISC_OS
//	fwrite (samp_buff, sizeof(*sampout), sampout - samp_buff, outfile);
//#else
//	write (fileno(outfile), (char *)samp_buff,
//	       (sampout - samp_buff) * sizeof(*sampout));
//#endif
    }
//    close_bit_stream ();
//    fclose (outfile);
//    return 0;
}
#endif


////////////////////////////////////////////////////////////////////////////
// an example main
//   implementing a not particularly flexible command line version
//   useful for testing, though!

#ifdef COMMANDLINEVERSION

#define CHANNELS 1 // the number of channels for this test run

#if CHANNELS==1
  #define MONOSTEREO mono
  #define FRAMESIZE  frameSize
  #define MPEG_ENTRY0 mpeg_mono_entry0
  #define MPEG_FRAMESIZE mpeg_mono_framesize
  #define MPEG_BATCH_DECODER mpeg_mono_batch_decoder
#else
  #define MONOSTEREO stereo
  #define FRAMESIZE  frameSize*2
  #define MPEG_ENTRY0 mpeg_stereo_entry0
  #define MPEG_FRAMESIZE mpeg_stereo_framesize
  #define MPEG_BATCH_DECODER mpeg_stereo_batch_decoder
#endif

int main(int argc, char **argv) {

    FILE *infile, *outfile;
    unsigned char *inbuffer, *inpos, *outbuffer;//[NSAMP*2*2];
    int infile_size;
    int replayRate = 44100;
    char *paramString ="b128";
    int frameSize, bytes_consumed;
    os_error *error;

    //MemCheck_Init();
    //MemCheck_InterceptSCLStringFunctions();
    //MemCheck_RegisterArgs(argc, argv);
    //MemCheck_RedirectToFilename("mem::$.diagnostic");

    printf("mpadec: a new and disgusting bodge\n");
    printf("        by Pete Goodliffe\n\n");

    #if CHANNELS==1
      printf("Mono version\n\n");
    #else
      printf("Stereo version\n\n");
    #endif

    if (argc != 3) {
        printf("useage: bodge <bodge-inname> <bodge-outname>\n");
        printf("        don't get it wrong in future\n\n");
        exit(1);
    }

    printf("Initialising...\n\n");

    // infile
    infile  = fopen(argv[1], "rb");
    if (!infile) {
        printf("Error opening input file\n\n");
        exit(1);
    }
    fseek(infile, 0, SEEK_END);
    infile_size = ftell(infile);
    fseek(infile, 0, SEEK_SET);

    inpos = inbuffer = malloc(infile_size);
    outbuffer = malloc(infile_size*20);
    if (!inbuffer) {
        printf("Arse! No memory\n");
        exit(1);
    }
    fread(inbuffer, 1, infile_size, infile);

    // outfile
    outfile = fopen(argv[2], "wb");
    if (!outfile) {
        printf("Error opening output file\n\n");
        exit(1);
    }

    // decoding
    if (error = MPEG_ENTRY0(replayRate, paramString, 2)) {
        printf("error: %s\n", error->errmess);
        exit(1);
    }
    frameSize = MPEG_FRAMESIZE();
    printf("frame size is %i\n\n", frameSize);

    printf("input file size is: %i\n\n", infile_size);

    bytes_consumed = 0;

    printf("Decoding...\n"); {                               // version 1: easy
        int noSamples = MPEG_BATCH_DECODER(
            inbuffer, (short *) outbuffer, infile_size
        );
        fwrite(outbuffer, 2, noSamples, outfile);
    }

//    while (bytes_consumed < infile_size) {                 // version 2: hard work
//        int temp;
//        printf(".\n\n\n%i < %i\n\n\n", bytes_consumed, infile_size);
//        temp = mpeg_decoder(inpos+bytes_consumed, (short*) outbuffer, infile_size-bytes_consumed);
//        printf("decoded frame: consumed %i bytes\n", temp);
//        bytes_consumed += temp;
//        fwrite(outbuffer, 2, frameSize*2, outfile);
//    }

    printf("\nFinalising...\n\n");

    fclose(infile);
    fclose(outfile);

    return 0;
}
#endif
