/***************************************************************************
 *
 *  File:        bits.c
 *
 *  Description: MPEG Audio decoder bitstream interface
 *               byte version
 *
 *  Version:     0.0 29 Jan 1998
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *    10 Dec 1997  Pete Goodliffe        Fiddled away from files into buffers
 *
 ***************************************************************************/

////////////////////////////////////////////////////////////////////////////
// Highly fiddled version of the original bitstream input routines that now
//   reads from a memory buffer and not a file.
// There is a (possibly quicker) version that reads a word at a time, not
//   a byte in bits/w.c, but see notes there for reasons for using this
//   byte version.
//
// Pete Goodliffe (29 Jan 1998)

/* bits.c */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mpa.h"
#include "bits.h"
#include "use_asm.h"


////////////////////////////////////////////////////////////////////////////
// the bitstream structure and associated data types

#define EBITS 8

typedef struct {
    unsigned char *buf;     // pointer to buffer holding bitstream
    unsigned char *bcur;    // pointer to current bufelem in it
    unsigned char *buf_lim; // pointer to end of buffer
    int buf_offset;         // bytes offset in stream of start of buffer
    int bitoffset;          // next bit number in bcur
} bitstream;

// macro to twiddle bufelem into big endian format
//     asumming 4 chars per bufelem
//#define BEND(r) \
//        (r << 24 | r >> 24 | (r & 0x00FF0000) >> 8 | (r & 0x0000FF00) << 8)

bitstream the_bs;

////////////////////////////////////////////////////////////////////////////
// open_bit_stream

void mpeg_set_bit_stream (unsigned char *buffer, int offset, int bufferlen) {

    bitstream *bs = &the_bs;

    bs->buf = buffer;
    bs->bcur = buffer;
    bs->buf_lim = buffer + bufferlen;
    bs->bitoffset = EBITS;
    bs->buf_offset = offset;

}


////////////////////////////////////////////////////////////////////////////
// getbits: now in assembly code

uint32 getbits (int toget) {

    int out = 0;
    bitstream *bs = &the_bs;

    if (toget > bs->bitoffset) {
        out = *(bs->bcur++) & ((1<<bs->bitoffset)-1);
        toget -= bs->bitoffset;
        bs->bitoffset = EBITS;
    }

    while (toget > EBITS) {
        out <<= EBITS;
        out |= *(bs->bcur++);
        toget -= EBITS;
    }

    if (toget > 0) {
        out <<= toget;
        out |= (*(bs->bcur) >> (bs->bitoffset-toget)) & ((1<<toget)-1);
        bs->bitoffset -= toget;
        if (bs->bitoffset == 0) {
            bs->bitoffset = EBITS;
            bs->bcur++;
        }
    }

    return out;

}

////////////////////////////////////////////////////////////////////////////
// bitposition

uint32 bitposition () {

    bitstream *bs = &the_bs;

    uint32 r = bs->buf_offset + (bs->bcur - bs->buf)*8
             + EBITS - bs->bitoffset;

    return r;

}


////////////////////////////////////////////////////////////////////////////
// ensure_bits

int ensure_bits (int needbits)
{
    return 1;
}
