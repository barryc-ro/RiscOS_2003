; converted to ObjAsm format commenting out original differences

	GET	s._memchk	;;; new error checking routines
				;;; they brake the program
				;;;     (even when disabled)
                                ;;; BJGA 05-Mar-2001: maybe because the mov's in wrchk_(LD|ST)MFD weren't conditional?

;#include "fxptparams.h"
;#include "use_asm.h"
	GET	hdr.fxptparams

	AREA |C$$CODE|, CODE, READONLY

;#if !defined(RISC_OS)
;fp      .req    r11
;ip      .req    r12
;sp      .req    r13
;lr      .req    r14
;pc      .req    r15
;#endif
fp	RN	r11
ip	RN	r12
sp	RN	r13
lr	RN	r14
pc	RN	r15

;        .text

;#if defined(RISC_OS)
;filtadr:
;	.word	window_G16
;filtend:
;	.word	window_G16+16*16*2+16*2
;#else
;filtadr:
;	.word	_window_G16
;filtend:
;	.word	_window_G16+16*16*2+16*2
;#endif
	IMPORT	window_G16
filtadr	DCD	window_G16
filtend	DCD	window_G16+16*16*2+16*2


;#if USE_ASM
;	.global	_filter_S, filter_S
;_filter_S:
;filter_S:
;#endif
	EXPORT	filter_S
filter_S

;#if defined(PROF) && !defined(RISC_OS)
;	mov	ip, lr
;	bl	mcount
;
;	.word	filter_S_pr
;#endif

        FunctionEntry "r0,r1,r2,r4,r5,r6,r7,r8,r9,sl,fp" ; note, r2 not defined - just reserving space
	wr4chk	r4, #0, ;;;
	ldr	r4, filtadr			; r4 points into window, starting at [0]
	add	r2, r4, #17*16*2		; compute end of window (16rows * 16 els) + 1 row
	wr4chk	sp, #8, ;;;
	str	r2, [sp, #8]			; store back for later
        add     sl, r0, #4
        add     r5, r0, #60
	wr4chk	r0, #32, ;;;
        ldr     r3, [r0, #32]
	wr4chk	r4, #4, ;;;
        ldr     r2, [r4], #4
	mov	r9, r2, lsr #16
	eor	r2, r2, r9, lsl #16
        mov     r7, r3, lsl #16
        movs    r7, r7, asr #16
        movs    r3, r3, asr #16
	mov	r0, #16384
        mla     r1, r7, r2, r0
        mla     r0, r3, r2, r0

	ldmia   sl!, {r3}
	wrchk_LDMFD r5, 1, ;;;
        ldmda   r5!, {lr}
        mov     ip, r3, lsl #16
        mov     ip, ip, asr #16
        mov     r3, r3, asr #16
        rsb     ip, ip, #0
        rsb     r3, r3, #0
        mov     r6, lr, lsl #16
        add     ip, ip, r6, asr #16
        add     r3, r3, lr, asr #16
        mla     r1, ip, r9, r1
        mla     r0, r3, r9, r0

;5:	ldmia   sl!, {r3,r7}
5	ldmia   sl!, {r3,r7}
	wrchk_LDMFD r5, 2, ;;;
        ldmda   r5!, {r8,lr}
        mov     ip, r3, lsl #16
        mov     ip, ip, asr #16
        mov     r3, r3, asr #16
        mov     r6, lr, lsl #16
	wr4chk	r4, #4, ;;;
	ldr     r2, [r4], #4
	mov	r9, r2, lsr #16
	eor	r2, r2, r9, lsl #16
        add     ip, ip, r6, asr #16
        add     r3, r3, lr, asr #16
        mla     r1, ip, r2, r1
        mla     r0, r3, r2, r0
        mov     ip, r7, lsl #16
        mov     ip, ip, asr #16
        mov     r3, r7, asr #16
        rsb     ip, ip, #0
        rsb     r3, r3, #0
        mov     r6, r8, lsl #16
        add     ip, ip, r6, asr #16
        add     r3, r3, r8, asr #16
        mla     r1, ip, r9, r1
        mla     r0, r3, r9, r0
        cmp     sl, r5
        blo     %ba5 ;5b

        mov     r1, r1, asr #15
        mov     r0, r0, asr #15
	mov	r1, r1, lsl #16
	mov	r1, r1, lsr #16
        orr     r1, r1, r0, lsl #16
	wr4chk	sp, #4, ;;;
        ldr     r0, [sp, #4]			; out pointer
	wr4chk	r0, #0, ;;;
        str     r1, [r0, #0]			; store out[0]
	wr4chk	sp, #0, ;;;
        ldr     r0, [sp, #0]			; data pointer
        add     r0, r0, #4
        add     sl, r0, #2048
        mov     r0, #0
	sub	r0, r0, #16384			; init r0 and r1 to -16384
        mov     r1, r0
        mov     lr, #(1:SHL:4):OR:(1:SHL:5):OR:(1:SHL:7) ;#1<<4 | 1<<5 | 1<<7
;9:      ldr     r2, [r4], #2
9	wr4chk	r4, #2, ;;;
       ldr     r2, [r4], #2
        mov     r2, r2, lsl #16
        mov     r2, r2, lsr #16
	wr4chk	sl, #8, ;;;
        ldr     r3, [sl], #8
        mov     ip, r3, asr #16
        mov     r3, r3, lsl #16
        mov     r3, r3, asr #16
	movs	lr, lr, lsr #1
        rsbcs   r3, r3, #0
        rsbcs   ip, ip, #0
        mla     r1, r3, r2, r1
        mla     r0, ip, r2, r0
        bne     %ba9 ;9b

        sub     r1, lr, r1, asr #15		; lr known to be 0
        sub     r0, lr, r0, asr #15		; ditto
	mov	r1, r1, lsl #16
	mov	r1, r1, lsr #16
        orr     r1, r1, r0, lsl #16
	wrchk_LDMFD sp, 2, ;;;
	ldmfd	sp!, {sl, ip}			; pop data pointer, out pointer
	wr4chk	ip, #16*4, ;;;
        str     r1, [ip, #16*4]!		; store out[16], step it out by +16
        add     sl, sl, #32*4			; step dp to &data[32] - 1 group in
	wrchk_STMFD sp, 1, ;;;
	stmfd	sp!, {ip}			; save &out[16] for later

;13:	add     fp, sl, #15*4
13	add     fp, sl, #15*4
        mov     ip, #16384
        mov     r3, #16384
        mov     r2, #16384
        mov     r1, #16384
	wr4chk	r4, #4, ;;;
        ldr     r0, [r4], #4
        mov     lr, r0, lsr #16
        eor     r0, r0, lr, lsl #16
        mov     r9, r0, lsr #8
        eor     r0, r0, r9, lsl #8
;14:	ldr	r8, [sl], #4
14	wr4chk	sl, #4, ;;;
	ldr	r8, [sl], #4
	wr4chk	fp, #-4, ;;;
	ldr	r6, [fp], #-4
        mov     r7, r8, asr #16
        mov     r8, r8, lsl #16
        mov     r8, r8, asr #16
        mov     r5, r6, asr #16
        mov     r6, r6, lsl #16
        mov     r6, r6, asr #16

	teq	r9, r9, lsl #31
	bcc	%f20 ;20f
	bmi	%f18 ;18f
;19:     mla     ip, r6, lr, ip
19      mla     ip, r6, lr, ip
        mla     r3, r5, lr, r3
        mla     r2, r6, r0, r2
        mla     r1, r5, r0, r1
        mla     r2, r8, lr, r2
        mla     r1, r7, lr, r1
        rsb     r8, r8, #0
        rsb     r7, r7, #0
        mla     ip, r8, r0, ip
        mla     r3, r7, r0, r3
        b       %f15 ;15f
;18:     mla     ip, r8, r0, ip
18      mla     ip, r8, r0, ip
        mla     r3, r7, r0, r3
        mla     ip, r6, lr, ip
        mla     r3, r5, lr, r3
        mla     r2, r8, lr, r2
        mla     r1, r7, lr, r1
        rsb     r6, r6, #0
        rsb     r5, r5, #0
        b       %f35 ;35f
;20:     mla     ip, r8, r0, ip
20      mla     ip, r8, r0, ip
        mla     r3, r7, r0, r3
        rsb     r8, r8, #0
        rsb     r7, r7, #0
        rsb     r6, r6, #0
        rsb     r5, r5, #0
        mla     ip, r6, lr, ip
        mla     r3, r5, lr, r3
        mla     r2, r8, lr, r2
        mla     r1, r7, lr, r1
;35:     mla     r2, r6, r0, r2
35      mla     r2, r6, r0, r2
        mla     r1, r5, r0, r1
;15:     ldr     r0, [r4], #4
15	wr4chk	r4, #4, ;;;
      ldr     r0, [r4], #4
        mov     lr, r0, lsr #16
        eor     r0, r0, lr, lsl #16
	wr4chk	sl, #4, ;;;
	ldr	r7, [sl], #4
	wr4chk	fp, #-4, ;;;
	ldr	r6, [fp], #-4
	mov	r5, #0
        sub     r8, r5, r7, asr #16
        mov     r7, r7, lsl #16
	sub     r7, r5, r7, asr #16
        mov     r5, r6, asr #16
        mov     r6, r6, lsl #16
        mov     r6, r6, asr #16
        mla     ip, r6, lr, ip
        mla     r3, r5, lr, r3
        rsb     r6, r6, #0
        rsb     r5, r5, #0
        mla     ip, r7, r0, ip
        mla     r3, r8, r0, r3
        mla     r2, r6, r0, r2
        mla     r1, r5, r0, r1
        mla     r2, r7, lr, r2
        mla     r1, r8, lr, r1
	movs	r9, r9, lsr #2
        beq     %f24 ;24f

	wr4chk	r4, #4, ;;;
        ldr     r0, [r4], #4
        mov     lr, r0, lsr #16
        eor     r0, r0, lr, lsl #16
        b       %ba14 ;14b
;24:     mov     ip, ip, asr #15
24      mov     ip, ip, asr #15
        mov     r3, r3, asr #15
        mov     r2, r2, asr #15
        mov     r1, r1, asr #15

        mov     ip, ip, lsl #16
        mov     ip, ip, lsr #16
        orr     r3, ip, r3, lsl #16

        mov     r2, r2, lsl #16
        mov     r2, r2, lsr #16
        orr     r2, r2, r1, lsl #16

        add     sl, sl, #8*4+16*4

	wrchk_LDMFD sp, 2, ;;; should this have a '!'???
	ldmfd	sp, {r0, r6}			; get &out[16] and &window[16*16*2+16*2]
        sub     r6, r6, r4			; diff wp from window end+16
        str     r3, [r0, -r6, lsr #3]		; store out[16-i], scaling index from rows (32 bytes) to words (4 bytes)
        str     r2, [r0,  r6, lsr #3]		; and   out[16+i]
        cmp     r6, #1*4*8			; check for having stored last pair, out[15] and out[17]
        bne     %ba13 ;13b			; if not go back for next set

	add	sp, sp, #2*4			; skip 2 args on stack
        Return  "r4,r5,r6,r7,r8,r9,sl,fp"


;#if USE_ASM
;	.global	_filter_M, filter_M
;_filter_M:
;filter_M:
;#endif
	EXPORT	filter_M
filter_M

;#if defined(PROF) && !defined(RISC_OS)
;	mov	ip, lr
;	bl	mcount
;
;	.word	filter_M_pr
;#endif

        FunctionEntry "r4,r5,r6,r7,r8,r9,sl,fp"
	mov	r9, r1
	mov	r7, r0
	wr4chk_pcrel filtadr, ;;;
        ldr     fp, filtadr
        mov     r1, #16384
	wr4chk	fp, #2, ;;;
        ldr     r0, [fp], #2
        mov     r0, r0, lsl #16
        mov     r0, r0, lsr #16
	wr4chk	r7, #8*4, ;;;
        ldr     r2, [r7, #8*4]
        mla     r1, r2, r0, r1
        add     sl, r7, #1*4
        add     r3, r7, #15*4
;5:	ldr	r0, [sl], #4
5	wr4chk	sl, #4, ;;;
	ldr	r0, [sl], #4
	wr4chk	r3, #-4, ;;;
        ldr     lr, [r3], #-4
        tst     fp, #2
        rsbne   r0, r0, #0
	wr4chk	fp, #2, ;;;
        ldr     r2, [fp], #2
        mov     r2, r2, lsl #16
        mov     r2, r2, lsr #16
        add     r0, r0, lr
        mla     r1, r0, r2, r1
        cmp     sl, r3
        blt     %ba5 ;5b
        mov     r1, r1, asr #15
	wr4chk	r9, #0, ;;;
        str     r1, [r9, #0]			; word store OK: not written out[1] yet
        add     sl, r7, #4
        add     sl, sl, #2048
        mov     r1, #16384
        mov     r3, #176
;9:      ldr     r2, [fp], #2
9	wr4chk	fp, #2, ;;;
      ldr     r2, [fp], #2
        mov     r2, r2, lsl #16
        mov     r2, r2, lsr #16
	wr4chk	sl, #8, ;;;
	ldr	r0, [sl], #8
	movs	r3, r3, lsr #1
        rsbcs   r0, r0, #0
        mla     r1, r0, r2, r1
        bne     %ba9 ;9b
        rsb     r1, r1, #0
        mov     r1, r1, asr #15
	wr4chk	r9, #16*2, ;;;
        str     r1, [r9, #16*2]			; word store OK: not written out[17] yet
        add     sl, r7, #32*4

;#if 0 && STRONGARM
;	mov	all, #round		;1
;	mov	alr, #round		;1
;	mov	ahl, #0			;1
;	mov	ahr, #0			;1
;	; col 1
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;2
;	smlal	alr, ahr, c0, vr	;2
;	smlal	all, ahl, c1, xl	;2
;	smlal	alr, ahr, c1, xr	;2
;	; col 2
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;2
;	smlal	alr, ahr, c0, vr	;2
;	smlal	all, ahl, c1, xl	;2
;	smlal	alr, ahr, c1, xr	;2
;	; col 3
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;2
;	smlal	alr, ahr, c0, vr	;2
;	smlal	all, ahl, c1, xl	;2
;	smlal	alr, ahr, c1, xr	;2
;	; col 4
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;2
;	smlal	alr, ahr, c0, vr	;2
;	smlal	all, ahl, c1, xl	;2.4 (9*2+6*3)/15
;	smlal	alr, ahr, c1, xr	;2.4 (9*2+6*3)/15
;	; col 5
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;2
;	smlal	alr, ahr, c0, vr	;2
;	smlal	all, ahl, c1, xl	;2.53  (7*2+8*3)/15
;	smlal	alr, ahr, c1, xr	;2.53  (7*2+8*3)/15
;	; col 6
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;3
;	smlal	alr, ahr, c0, vr	;3
;	smlal	all, ahl, c1, xl	;3
;	smlal	alr, ahr, c1, xr	;3
;	; col 7
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;2.73 (4*2+11*3)/15
;	smlal	alr, ahr, c0, vr	;2.73
;	smlal	all, ahl, c1, xl	;3
;	smlal	alr, ahr, c1, xr	;3
;	; col 8
;	ldmia	fp!, {c0,c1}		;2 load 2 coeffs from table
;	ldmia	sl!, {vl,vr,xl,xr}	;4 load 4 signals: (left, right) * 2
;	smlal	all, ahl, c0, vl	;3
;	smlal	alr, ahr, c0, vr	;3
;	smlal	all, ahl, c1, xl	;3
;	smlal	alr, ahr, c1, xr	;3
;
;	; normalise for 16-bit output values
;	mov	ahl, ahl, lsl #X	;1
;	orr	ahl, ahl,l, lsr #32-X;1
;	mov	ahr, ahr, lsl #X	;1
;	orr	ahr, ahr,r, lsr #32-X;1
;
;	; set up constant for range-check
;	ldr	t, =0x7FFF		;1
;
;	; range check left
;	mov	x, ahl, asr #31		;1
;	cmp	x, ahl, asr #16		;1
;	eorne	ahl, t, x, lsr #16	;1
;
;	; range check right
;	mov	x, ahr, asr #31		;1
;	cmp	x, ahr, asr #16		;1
;	eorne	ahr, t, x, lsr #16	;1
;
;	; combine 2 x 16-bit into one word
;	mov	ahr, ahr, lsl #16	;1
;	mov	ahl, ahl, lsl #16	;1
;	orr	x, ahl, ahr, lsr #16	;1
;
;	; store out
;	str	x, [op], #4		;1
;
;	; check for end
;	cmp	op, opl			;1
;	bne	loop			;2
;
;					;147.32c  for 2 output samples (left, right)
;
;; Sample filtering time approx 148 cycles for 2 channels, per output time.  Hence
;; stereo filtering requires only 3.2% of 202MHz StrongARM for 44.1 kHz sample
;; rate, or 3.5% @ 48KHz sample rate.
;
;#endif

;13:     add     r6, sl, #15*4
13     add     r6, sl, #15*4
        mov     r2, #16384
        mov     r1, #16384
	wr4chk	fp, #4, ;;;
        ldr     r0, [fp], #4
        mov     lr, r0, lsr #16
	mov	r5, r0, lsr #8
	and	r5, r5, #255
        and     r0, r0, #255
;14:
14
	wr4chk	sl, #4, ;;;
        ldr     r4, [sl], #4
	wr4chk	r6, #-4, ;;;
        ldr     r3, [r6], #-4
	teq	r5, r5, lsl #31
	bcc	%f20 ;20f
	bmi	%f18 ;18f
;19:
19
        mla     r2, r3, lr, r2
        mla     r1, r3, r0, r1
        mla     r1, r4, lr, r1
        rsb     r4, r4, #0
        mla     r2, r4, r0, r2
        b       %f15 ;15f
;18:
18
        mla     r2, r4, r0, r2
        mla     r2, r3, lr, r2
        mla     r1, r4, lr, r1
        rsb     r3, r3, #0
        mla     r1, r3, r0, r1
        b       %f15 ;15f
;20:
20
        mla     r2, r4, r0, r2
        rsb     r4, r4, #0
        rsb     r3, r3, #0
        mla     r2, r3, lr, r2
        mla     r1, r4, lr, r1
        mla     r1, r3, r0, r1
;15:
15
	wr4chk	fp, #4, ;;;
        ldr     r0, [fp], #4
        mov     lr, r0, lsr #16
        eor     r0, r0, lr, lsl #16
	wr4chk	sl, #4, ;;;
	ldr	r4, [sl], #4
	wr4chk	r6, #-4, ;;;
        ldr     r3, [r6], #-4
        mla     r2, r3, lr, r2
        rsb     r4, r4, #0
        rsb     r3, r3, #0
        mla     r2, r4, r0, r2
        mla     r1, r3, r0, r1
        mla     r1, r4, lr, r1
        movs    r5, r5, lsr #2
        beq     %f24 ;24f
	wr4chk	fp, #4, ;;;
        ldr     r0, [fp], #4
        mov     lr, r0, lsr #16
        eor     r0, r0, lr, lsl #16
        b       %ba14 ;14b
;24:
24
        mov     r2, r2, asr #15
        mov     r1, r1, asr #15
        add     sl, sl, #(8+16)*4
;	wr4chk_pcrel filtadr, ;;;
        ldr     r0, filtadr
        sub     r0, fp, r0
        mov     r0, r0, asr #5
	sub	r0, r0, #1
        add     lr, r9, r0, lsl #1
	wr4chk	lr, #0, ;;;
        strb    r2, [lr, #0]
        mov     r2, r2, asr #8
        strb    r2, [lr, #1]
        rsb     r2, r0, #32
        add     r2, r9, r2, lsl #1
	wr4chk	r2, #0, ;;;
        strb    r1, [r2, #0]
        mov     r1, r1, asr #8
        strb    r1, [r2, #1]

        cmp     r0, #15
        bne     %ba13 ;13b
        Return  "r4,r5,r6,r7,r8,r9,sl,fp"



;#if defined(PROF) && !defined(RISC_OS)
;
;	.data
;filter_S_pr:	.long	0
;filter_M_pr:	.long	0
;
;#endif

	END
