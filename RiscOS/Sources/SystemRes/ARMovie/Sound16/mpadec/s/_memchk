;**************************************************************************
;
;  File:        s._memchk
;
;  Description: Macros to use in ARM asm code so that memory accesses can be
;               'easily' checked
;
;  Version:     0.0 21 Jan 1998
;
;  Author:      Julian Smith (jsmith@acorn.com)
;               Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;
; include this file with a line similar to GET s._memchk
;
; Examples of use:
;
;	wr4chk	r6, #44, NE	<- added this line to check the write
;	STRNE	r3, [r6, #44]
;
;	wr4chk	r6 #0 AL	<- added this line to check the write
;	STR	r3 [r6], #4
;
;	wrchk_STMMFD	r7, 6	<- added this line to check the write
;	STMFD		r7!, { r0-r4, lr}

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:Machine.<Machine>
        GET     Hdr:CPU.Generic26
        GET     Hdr:APCS.<APCS>

memchk	*	0				; 1 - check, 0 - don't

	[ memchk = 1
	IMPORT	|__rt_wr4chk|			; preserves /all/ regs
	]

;**************************************************************************
; MACRO wr4chk
;	Requires:  Register holding base memory address
;	           Any offset from this location
;	           The operation's condition sufix
;	Behaviour: Calls the memory access check function on the appropriate
;	           location /without/ corrupting stack, registers or your
;	           haircut in order to check an instruction like:
;	             STR$condition rX, [$reg, #$offset]
;	           or
;	             LDR$condition rX, [$reg, #$offset]

	MACRO
$loc	wr4chk			$reg, $offset, $condition

$loc
	[ memchk=1
        [ {CONFIG} = 26
	stm$condition.fd	sp!, {r0, lr}
	add$condition		r0, $reg, $offset
	bl$condition		|__rt_wr4chk|
	ldm$condition.fd	sp!, {r0, lr}
        |
        [ "$cond" <> "AL" :LAND: "$cond" <> ""
        ; branch over on opposite condition
        dci     &1A000007 :EOR: Cond_$condition
        ]
        stmfd   sp!, {r0, lr}
        mrs     lr, cpsr
        str     lr, [sp, #-4]!
        add     r0, $reg, $offset
        bl      |__rt_wr4chk|
        ldr     lr, [sp], #4
        msr     cpsr_f, lr
        ldmfd   sp!, {r0, lr}
	]
	]

	MEND


;**************************************************************************
; MACRO wr4chk_pcrel
;	Requires:  Memory address (assembled PC relative)
;	           The operation's condition sufix
;	Behaviour: Calls the memory access check function on the appropriate
;	           location /without/ corrupting stack, registers or your
;	           haircut in order to check an instruction like:
;	             LDR$condition rX, $location

; doesn't seem to work too well (Immediate value xxx isout of range a lot!)

	MACRO
$loc	wr4chk_pcrel		$location, $condition

$loc
	[ memchk=1
        [ {CONFIG} = 26
	stm$condition.fd	sp!, {r0, lr}
	adr$condition		r0, $location
	bl$condition		|__rt_wr4chk|
	ldm$condition.fd	sp!, {r0, lr}
	|
        [ "$cond" <> "AL" :LAND: "$cond" <> ""
        ; branch over on opposite condition
        dci     &1A000007 :EOR: Cond_$condition
        ]
        stmfd   sp!, {r0, lr}
        mrs     lr, cpsr
        str     lr, [sp, #-4]!
        adr     r0, $location
        bl      |__rt_wr4chk|
        ldr     lr, [sp], #4
        msr     cpsr_f, lr
        ldmfd   sp!, {r0, lr}
        ]
	]

	MEND


;**************************************************************************
; MACRO wr4chk_STMFD
;	Requires:  Register holding base memory address
;	           Number of locations below to check
;	           The operation's condition sufix
;	Behaviour: Calls the memory access check function on the appropriate
;	           locations /without/ corrupting stack, registers or your
;	           haircut in order to check an instruction like:
;	             STMFD$condition $reg, {$numwords registers}

	MACRO
$loc	wrchk_STMFD		$reg, $numwords, $condition

$loc
	[ memchk=1
        [ {CONFIG} = 26
	stm$condition.fd	sp!, {r0, r1, lr}
	mov$condition		r1, $reg
	GBLA			counter
counter	SETA			$numwords
	WHILE			counter>0
	add$condition		r0, r1, #-4*counter
	bl$condition		|__rt_wr4chk|
counter	SETA			counter-1
	WEND
	ldm$condition.fd	sp!, {r0, r1, lr}
        |
        [ "$cond" <> "AL" :LAND: "$cond" <> ""
        ; branch over on opposite condition
        dci     (&1A000006 + $numwords * 2) :EOR: Cond_$condition
        ]
        stmfd   sp!, {r0, r1, lr}
        mrs     lr, cpsr
        str     lr, [sp, #-4]!
        mov     r1, $reg
        LCLA    counter
counter SETA    $numwords
        WHILE   counter>0
        add     r0, r1, #-4*counter
        bl      |__rt_wr4chk|
counter SETA    counter-1
        WEND
        ldr     lr, [sp], #4
        msr     cpsr_f, lr
        ldmfd   sp!, {r0, r1, lr}
        ]
	]

	MEND


;**************************************************************************
; MACRO wr4chk_LDMFD
;	Requires:  Register holding base memory address
;	           Number of locations below to check
;	           The operation's condition sufix
;	Behaviour: Calls the memory access check function on the appropriate
;	           locations /without/ corrupting stack, registers or your
;	           haircut in order to check an instruction like:
;	             STMFD$condition $reg, {$numwords registers}

	MACRO
$loc	wrchk_LDMFD		$reg, $numwords, $condition

$loc
	[ memchk=1
        [ {CONFIG} = 26
	stm$condition.fd	sp!, {r0, r1, lr}
	mov$condition		r1, $reg
	LCLA			counter
counter	SETA			$numwords
	WHILE			counter>0
	add$condition		r0, r1, #4*counter
	bl$condition		|__rt_wr4chk|
counter	SETA			counter-1
	WEND
	ldm$condition.fd	sp!, {r0, r1, lr}
        |
        [ "$cond" <> "AL" :LAND: "$cond" <> ""
        ; branch over on opposite condition
        dci     (&1A000006 + $numwords * 2) :EOR: Cond_$condition
        ]
        stmfd   sp!, {r0, r1, lr}
        mrs     lr, cpsr
        str     lr, [sp, #-4]!
        mov     r1, $reg
        LCLA    counter
counter SETA    $numwords
        WHILE   counter>0
        add     r0, r1, #4*counter
        bl      |__rt_wr4chk|
counter SETA    counter-1
        WEND
        ldr     lr, [sp], #4
        msr     cpsr_f, lr
        ldmfd   sp!, {r0, r1, lr}
        ]
	]

	MEND


;**************************************************************************

	END
