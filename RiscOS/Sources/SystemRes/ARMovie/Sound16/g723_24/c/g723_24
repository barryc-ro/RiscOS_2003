/***************************************************************************
 *
 *  File:        g72x:h723_24.c
 *
 *  Description: g723_24 codec port
 *
 *  Version:     1.0 16 Nov 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *               Modified from source by Sun Microsystems
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include "private.h"

////////////////////////////////////////////////////////////////////////////
// Sun Microsystems' code

/*
 * g723_24.c
 *
 * Description:
 *
 * g723_24_encoder(), g723_24_decoder()
 *
 * These routines comprise an implementation of the CCITT G.723 24 Kbps
 * ADPCM coding algorithm.  Essentially, this implementation is identical to
 * the bit level description except for a few deviations which take advantage
 * of workstation attributes, such as hardware 2's complement arithmetic.
 *
 */

/*
 * Maps G.723_24 code word to reconstructed scale factor normalized log
 * magnitude values.
 */
static short	_dqlntab[8] = {-2048, 135, 273, 373, 373, 273, 135, -2048};

/* Maps G.723_24 code word to log of scale factor multiplier. */
static short	_witab[8] = {-128, 960, 4384, 18624, 18624, 4384, 960, -128};

/*
 * Maps G.723_24 code words to a set of values whose long and short
 * term averages are computed and then compared to give an indication
 * how stationary (steady state) the signal is.
 */
static short	_fitab[8] = {0, 0x200, 0x400, 0xE00, 0xE00, 0x400, 0x200, 0};

static short qtab_723_24[3] = {8, 218, 331};

/*
 * g723_24_encoder()
 *
 * Encodes a linear PCM, A-law or u-law input sample and returns its 3-bit code.
 * Returns -1 if invalid input coding value.
 */
int
g723_24_encoder(
	int		sl,
	struct g72x_state *state_ptr)
{
	short		sei, sezi, se, sez;	/* ACCUM */
	short		d;			/* SUBTA */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dqsez;			/* ADDC */
	short		dq, i;

	/* linearize input sample to 14-bit PCM */
	sl >>= 2;		/* sl of 14-bit dynamic range */

	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	d = sl - se;			/* d = estimation diff. */

	/* quantize prediction difference d */
	y = step_size(state_ptr);	/* quantizer step size */
	i = quantize(d, y, qtab_723_24, 3);	/* i = ADPCM code */
	dq = reconstruct(i & 4, _dqlntab[i], y); /* quantized diff. */

	sr = (dq < 0) ? se - (dq & 0x3FFF) : se + dq; /* reconstructed signal */

	dqsez = sr + sez - se;		/* pole prediction diff. */

	update(3, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

	return (i);
}

/*
 * g723_24_decoder()
 *
 * Decodes a 3-bit CCITT G.723_24 ADPCM code and returns
 * the resulting 16-bit linear PCM, A-law or u-law sample value.
 * -1 is returned if the output coding is unknown.
 */
int
g723_24_decoder(
	int		i,
	struct g72x_state *state_ptr)
{
	short		sezi, sei, sez, se;	/* ACCUM */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dq;
	short		dqsez;

	i &= 0x07;			/* mask to get proper bits */
	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	y = step_size(state_ptr);	/* adaptive quantizer step size */
	dq = reconstruct(i & 0x04, _dqlntab[i], y); /* unquantize pred diff */

	sr = (dq < 0) ? (se - (dq & 0x3FFF)) : (se + dq); /* reconst. signal */

	dqsez = sr - se + sez;			/* pole prediction diff. */

	update(3, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

	return (sr << 2);	/* sr was of 14-bit dynamic range */
}


////////////////////////////////////////////////////////////////////////////
// mono initialisation

int g723_24_mono_sizeof () {

    return (sizeof(struct g72x_state));

} // end g723_24_mono_sizeof


////////////////////////////////////////////////////////////////////////////

void g723_24_mono_init (void *state) {

    struct g72x_state *s = (struct g72x_state *) state;
    g72x_init_state(s);

} // end g723_24_mono_init


////////////////////////////////////////////////////////////////////////////
// stereo initialisation

int g723_24_stereo_sizeof () {

    return (sizeof(struct g72x_state_stereo));

} // end g723_24_stereo_sizeof


////////////////////////////////////////////////////////////////////////////

void g723_24_stereo_init (void *state) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;
    g723_24_mono_init(&(s->l));
    g723_24_mono_init(&(s->r));

} // end g723_24_stereo_init


////////////////////////////////////////////////////////////////////////////
// g723_24_mono_coder

void g723_24_mono_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    int temp;
    struct g72x_state *s = (struct g72x_state *) state;

    outdata[0]  = g723_24_encoder(indata[0], s);
    outdata[0] |= g723_24_encoder(indata[1], s) << 3;
    temp = g723_24_encoder(indata[2], s);
    outdata[0] |= (temp & 0x3) << 6;
    outdata[1] =  temp >> 2;
    outdata[1] |= g723_24_encoder(indata[3], s) << 1;
    outdata[1] |= g723_24_encoder(indata[4], s) << 4;
    temp = g723_24_encoder(indata[5], s);
    outdata[1] |= (temp & 0x1) << 7;
    outdata[2] =  temp >> 1;
    outdata[2] |= g723_24_encoder(indata[6], s) << 2;
    outdata[2] |= g723_24_encoder(indata[7], s) << 5;

} // end g723_24_mono_coder


////////////////////////////////////////////////////////////////////////////
// g723_24_stereo_coder

void g723_24_stereo_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    int temp;
    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;

    outdata[0]  = g723_24_encoder(indata[0], &(s->l));
    outdata[0] |= g723_24_encoder(indata[1], &(s->r)) << 3;
    temp = g723_24_encoder(indata[2], &(s->l));
    outdata[0] |= (temp & 0x3) << 6;
    outdata[1] =  temp >> 2;
    outdata[1] |= g723_24_encoder(indata[3], &(s->r)) << 1;
    outdata[1] |= g723_24_encoder(indata[4], &(s->l)) << 4;
    temp = g723_24_encoder(indata[5], &(s->r));
    outdata[1] |= (temp & 0x1) << 7;
    outdata[2] =  temp >> 1;
    outdata[2] |= g723_24_encoder(indata[6], &(s->l)) << 2;
    outdata[2] |= g723_24_encoder(indata[7], &(s->r)) << 5;
    outdata[3]  = g723_24_encoder(indata[8], &(s->l));
    outdata[3] |= g723_24_encoder(indata[9], &(s->r)) << 3;
    temp = g723_24_encoder(indata[10], &(s->l));
    outdata[3] |= (temp & 0x3) << 6;
    outdata[4] =  temp >> 2;
    outdata[4] |= g723_24_encoder(indata[11], &(s->r)) << 1;
    outdata[4] |= g723_24_encoder(indata[12], &(s->l)) << 4;
    temp = g723_24_encoder(indata[13], &(s->r));
    outdata[4] |= (temp & 0x1) << 7;
    outdata[5] =  temp >> 1;
    outdata[5] |= g723_24_encoder(indata[14], &(s->l)) << 2;
    outdata[5] |= g723_24_encoder(indata[15], &(s->r)) << 5;

} // end g723_24_mono_coder


////////////////////////////////////////////////////////////////////////////
// g723_24_mono_decoder

int g723_24_mono_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    int temp;
    struct g72x_state *s = (struct g72x_state *) state;

    outdata[0] = g723_24_decoder(indata[0]&0x7,       s);
    outdata[1] = g723_24_decoder((indata[0]&0x38)>>3, s);
    temp = (indata[0]>>6) + ((indata[1]&0x1)<<2);
    outdata[2] = g723_24_decoder(temp,                s);
    outdata[3] = g723_24_decoder((indata[1]&0xe)>>1,  s);
    outdata[4] = g723_24_decoder((indata[1]&0x70)>>4, s);
    temp = ((indata[1]&0x80)>>7) + ((indata[2]&0x3)<<1);
    outdata[5] = g723_24_decoder(temp,                s);
    outdata[6] = g723_24_decoder((indata[2]&0x1c)>>2, s);
    outdata[7] = g723_24_decoder((indata[2]&0xe0)>>5, s);

    return 0;

} // end g723_24_mono_coder


////////////////////////////////////////////////////////////////////////////
// g723_24_stereo_decoder

int g723_24_stereo_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    int temp;
    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;

    outdata[0] =  g723_24_decoder(indata[0]&0x7,       &(s->l));
    outdata[1] =  g723_24_decoder((indata[0]&0x38)>>3, &(s->r));
    temp = (indata[0]>>6) + ((indata[1]&0x1)<<2);
    outdata[2] =  g723_24_decoder(temp,                &(s->l));
    outdata[3] =  g723_24_decoder((indata[1]&0xe)>>1,  &(s->r));
    outdata[4] =  g723_24_decoder((indata[1]&0x70)>>4, &(s->l));
    temp = ((indata[1]&0x80)>>7) + ((indata[2]&0x3)<<1);
    outdata[5] =  g723_24_decoder(temp,                &(s->r));
    outdata[6] =  g723_24_decoder((indata[2]&0x1c)>>2, &(s->l));
    outdata[7] =  g723_24_decoder((indata[2]&0xe0)>>5, &(s->r));
    outdata[8] =  g723_24_decoder(indata[3]&0x7,       &(s->l));
    outdata[9] =  g723_24_decoder((indata[3]&0x38)>>3, &(s->r));
    temp = (indata[3]>>6) + ((indata[4]&0x1)<<2);
    outdata[10] = g723_24_decoder(temp,                &(s->l));
    outdata[11] = g723_24_decoder((indata[4]&0xe)>>1,  &(s->r));
    outdata[12] = g723_24_decoder((indata[4]&0x70)>>4, &(s->l));
    temp = ((indata[4]&0x80)>>7) + ((indata[5]&0x3)<<1);
    outdata[13] = g723_24_decoder(temp,                &(s->r));
    outdata[14] = g723_24_decoder((indata[5]&0x1c)>>2, &(s->l));
    outdata[15] = g723_24_decoder((indata[5]&0xe0)>>5, &(s->r));

    return 0;

} // end g723_24_mono_coder


////////////////////////////////////////////////////////////////////////////
