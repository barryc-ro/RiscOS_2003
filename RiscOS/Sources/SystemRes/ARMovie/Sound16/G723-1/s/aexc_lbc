	AREA	|C$code|,CODE,READONLY

        GET     Hdr:ListOpts
        GET     Hdr:APCS.<APCS>
        GET     Hdr:Macros

	EXPORT	Gen_Trn
	EXPORT	Gen_Trn2
	EXPORT	Gen_Trn32
	EXPORT	aFind_Best_core
	;EXPORT	Get_Rez
	EXPORT	aFind_Acbk_core
	EXPORT	aFind_Acbk_core2
	EXPORT	aFind_Acbk_core3
	EXPORT	aFind_Acbk_core4
	EXPORT	aFind_Acbk_core6
	EXPORT	Estim_Pitch
	EXPORT	G_code
	EXPORT  aD4i64_LBC
	EXPORT	D4_passback
	EXPORT	p_sign
	EXPORT	aCor_h

	IMPORT	AcbkGainTable085
	IMPORT	AcbkGainTable170
	IMPORT	norm_l
	IMPORT	div_s
Estim_Pitch
	; r0 = Word16 *Dpnt
	; r1 = Word32 Start	(Always Odd)
        FunctionEntry "r4-r11"

	SUB	r4,r1,#18-1	; r4 = Pr = Start - (PitchMin - 1); r4 = EVEN
	MOV	r3,#0		; r3 = Acc1 = 0
	MOV	r2,#120		; r2 = 120-j
	ADD	r0,r0,r4,LSL#1
aep_lp1
	LDR	r14,[r0],#4
	SUBS	r2,r2,#2
	MOV	r11,r14,LSL#16
	MOV	r11,r11,ASR#16
	MLA	r3,r11,r11,r3	; r3 = Acc1 += Dpnt[Pr+j] * Dpnt[Pr+j]
	MOV	r14,r14,ASR#16
	MLA	r3,r14,r14,r3	; r3 = Acc1 += Dpnt[Pr+j] * Dpnt[Pr+j]
	BGT	aep_lp1

	; r0 = &Dpnt[Pr+120]
	; r1 = Start
	; r2 = 0 (scratch)
	; r3 = Acc1
	; r4 = Pr
	MOV	r5,#127-2	; r5 = i = PitchMax-2-PitchMin
	MOV	r6,r0		; r6 = &Dpnt[Pr+120]
	MOV	r7,#30		; r7 = Mxp
	MOV	r8,#&4000	; r8 = Mcr
	MOV	r9,#&7f00	; r9 = Mnr
	ORR	r9,r9,#&ff
	MOV	r10,#18		; r10= Indx
aep_lp2
	; r6 = &Dpnt[Pr+120]
	;SUB	r4,r4,#1	; Pr--
	; Energy Update
	LDR	r1,[r6,#-242]!	; r1 = Dpnt[Pr]		; r6 = &Dpnt[Pr]
	LDR	r0,[r6,#240]	; r0 = Dpnt[Pr+120]
	MOV	r1,r1,LSL#16
	MOV	r1,r1,ASR#16
	MLA	r3,r1,r1,r3	; r3 = Acc1 += Dpnt[Pr] * Dpnt[Pr]
	MOV	r0,r0,LSL#16
	MOV	r0,r0,ASR#16
	MUL	r1,r0,r0	; r1 = Dpnt[Pr+120] * Dpnt[Pr+120]
	MOV	r0,#0		; r0 = Acc0
	SUB	r3,r3,r1	; r3 = Acc1 -= Dpnt[Pr+120] * Dpnt[Pr+120]
	MOV	r1,#119
	; Compute the cross
	SUB	r14,r5,#143		; r14 = i-143
	SUB	r14,r6,r14,LSL#1	; r14 = &Dpnt[Pr-i+143]
	EOR	r2,r6,r14
	TST	r2,#2		; if (r6 and r14 have different alignments)
	BNE	aep_misaligned	;   goto misaligned
	; So r6 and r14 both have the same alignment
	TST	r6,#2		; if (r6 is not aligned)
	BEQ	aep_ov1
	LDR	r2,[r6],#2		; r2 = Dpnt[Pr+j]
	LDR	r12,[r14],#2		; r12= Dpnt[Pr+j-i+143]
	MOV	r2,r2,LSL#16
	MOV	r2,r2,ASR#16
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	MUL	r12,r2,r12		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	; Stall
	ADDS	r0,r0,r12
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	SUBS	r1,r1,#1
aep_ov1
aep_lp3
	LDR	r2,[r6],#4		; r2 = Dpnt[Pr+j]
	LDR	r12,[r14],#4		; r12= Dpnt[Pr+j-i+143]
	MOV	r11,r2,ASR#16
	MOV	r4,r12,ASR#16
	MUL	r11,r4,r11		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	MOV	r2,r2,LSL#16
	ADDS	r0,r0,r11
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	MOV	r2,r2,ASR#16
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	MUL	r12,r2,r12		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	; Stall
	ADDS	r0,r0,r12
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	SUBS	r1,r1,#2
	BGT	aep_lp3
	CMP	r1,#0		; Another one to do?
	BNE	aep_ov2
	LDR	r2,[r6],#2		; r2 = Dpnt[Pr+j]
	LDR	r12,[r14],#2		; r12= Dpnt[Pr+j-i+143]
	MOV	r2,r2,LSL#16
	MOV	r2,r2,ASR#16
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	MUL	r12,r2,r12		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	; Stall
	ADDS	r0,r0,r12
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
aep_ov2
	; r6 = &Dpnt[Pr+120]
	ADDS	r0,r0,r0	; Acc0 = L_add(Acc0, Acc0)
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	SUBS	r11,r0,#0	; r11= Acc0
	;CMP	r0,#0		; if (Acc0 <= 0)
	BLE	aep_lpend	;   go round loop again

	; Compute Exp and Mant of the cross
	BL	norm_l		; r0 = norm_l(Acc0)
	MOV	r11,r11,LSL r0	; r11= Acc0 = Acc0 << Exp
	MOV	r12,r0		; r12= Exp
	ADD	r11,r11,#&8000
	MOV	r0,r11,ASR#16	; r0= Ccr = round(Acc0)
	MUL	r11,r0,r0	; r11= Acc0 = Ccr * Ccr
	; Stall
	MOV	r0,r11,LSL#1
	BL	norm_l		; r0 = Ccr = norm_l(Acc0<<1)
	ADD	r12,r0,r12,LSL#1; r12= Exp = Ccr + (Exp<<1)
	RSB	r0,r0,#15	; r0 = 15-Ccr
	MOV	r11,r11,ASR r0	; r11= Ccr = Acc0>>(15-Ccr)

	; Do the same with energy
	MOV	r0,r3		; r0 = Acc1
	BL	norm_l		; r0 = Enr = norm_l(Acc1)
	SUB	r12,r12,r0	; r12= Exp -= Enr
	MOV	r1,r3,LSL r0	; r1 = Enr = round(Acc1<<Enr)
	ADDS	r1,r1,#&8000
	MOVVS	r1,#1<<31
	SBCVS	r1,r1,#0
	MOV	r1,r1,ASR#16

	CMP	r11,r1		; if (Ccr >= Enr) {
	SUBGE	r12,r12,#1	;   Exp --
	MOVGE	r11,r11,ASR#1	;   Ccr >>= 1
				; }
	CMP	r12,r7		; if (Exp > Mxp)
	BGT	aep_lpend	;   go round again

	ADD	r0,r12,#1	; r0 = Exp+1
	CMP	r0,r7		; if ((Exp+1) < Mxp)
	BLT	aep_ok		; goto ok;
	MOVEQ	r0,r8,ASR#1	;    if ((Exp+1 == Mxp) r0 = Tmp = Mcr >>1
	MUL	r2,r11,r9	; r2 = Acc0 = Ccr * Mnr
	MOVNE	r0,r8		;    else r0 = Tmp = Mcr
	MUL	r0,r1,r0	; r0 = Acc2 = Enr*Tmp
	RSB	r14,r5,#125	; r14 = PitchMax - 2 - PitchMin - i
	SUBS	r0,r2,r0	; r0 = Acc0 - Acc2
	;CMP	r1,r0		; if (Acc0 <= Acc2) {
	BLE	aep_lpend
	CMP	r10,r14		; if (Indx > r14) ||
	SUBLES	r0,r0,r2,ASR#2	;    (Acc0 - (Acc0>>2) - Acc2 > 0)
	BLE	aep_lpend
aep_ok
	RSB	r10,r5,#127+18-2	; Indx = PitchMax-2-i
	MOV	r7,r12			; Mxp = Exp
	MOV	r8,r11			; Mcr = Ccr
	MOV	r9,r1			; Mnr = Enr
aep_lpend
	SUBS	r5,r5,#1
	BGT	aep_lp2

	MOV	r0,r10	; return Indx

        Return  "r4-r11"
aep_misaligned
	; So r6 and r14 both have different alignments
	TST	r6,#2		; if (r6 is not aligned)
	BEQ	aep_ov12
	LDR	r2,[r6],#2		; r2 = Dpnt[Pr+j]
	LDR	r12,[r14],#2		; r12= Dpnt[Pr+j-i+143]
	MOV	r2,r2,LSL#16
	MOV	r2,r2,ASR#16
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	MUL	r12,r2,r12		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	SUB	r1,r1,#1
	ADDS	r0,r0,r12
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
aep_ov12
	LDR	r12,[r14],#2		; r12= Dpnt[Pr+j-i+143]
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
aep_lp32
	LDR	r2,[r6],#4		; r2 = Dpnt[Pr+j]
	LDR	r4,[r14],#4		; r12= Dpnt[Pr+j-i+143]
	MOV	r11,r2,ASR#16
	MOV	r2,r2,LSL#16
	MOV	r2,r2,ASR#16
	MUL	r2,r12,r2		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	;LDR	r2,[r6],#2		; r2 = Dpnt[Pr+j]
	MOV	r12,r4,ASR#16
	ADDS	r0,r0,r2
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MUL	r4,r11,r4		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	ADDS	r0,r0,r4
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	SUBS	r1,r1,#2
	BGT	aep_lp32
	CMP	r1,#0		; Another one to do?
	BNE	aep_ov2
	LDR	r2,[r6],#2		; r2 = Dpnt[Pr+j]
	LDR	r12,[r14],#2		; r12= Dpnt[Pr+j-i+143]
	MOV	r2,r2,LSL#16
	MOV	r2,r2,ASR#16
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	MUL	r12,r2,r12		; r0 = Acc0+=Dpnt[Pr+j]*Dpnt[Pr+j-i+143]
	; Stall
	ADDS	r0,r0,r12
	MOVVS	r0,#1<<31
	SBCVS	r0,r0,#0
	B	aep_ov2
aFind_Acbk_core6
	; r0 = Word16 *Tv
	; r1 = Word16 *RezBuf
	; r2 = Word16 *ImpResp
        FunctionEntry "r4-r11"

	MOV	r3,#60		; r3 = 60-i
	MOV	r11,#&2000
	RSB	r11,r11,#0

	LDR	r12,[r0]
	RSB	r14,r3,#61	; r14 = i = i-j+1	r14 = ODD
	MOV	r8,r12,ASR#16
	MOV	r12,r12,LSL#16
	SUB	r12,r11,r12,ASR#2

	LDR	r10,[r1],#4	; r10= RezBuf[j]
	LDR	r9,[r2,#2]	; r9 = ImpResp[i-j]	UNALIGNED TO SAVE SHIFT!
	MOV	r10,r10,LSL#16
	;MOV	r9,r9,LSL#16
	MOV	r10,r10,ASR#16
	MOV	r9,r9,ASR#16
	MLA	r12,r9,r10,r12
	B	afac6_enter
afac6_lp1
	LDR	r12,[r0]
	RSB	r14,r3,#60	; r14 = i = i-j+1	r14 = ODD
	MOV	r8,r12,ASR#16
	MOV	r12,r12,LSL#16
	SUB	r12,r11,r12,ASR#2
	ADD	r2,r2,r14,LSL#1	; r2 = &ImpResp[i-j+1]
	LDR	r10,[r1],#4	; r10= RezBuf[j]
	LDR	r9,[r2]		; r9 = ImpResp[i-j]
	MOV	r7,r10,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r9,r9,LSL#16
	MOV	r10,r10,ASR#16
	MOV	r9,r9,ASR#16
	MLA	r12,r9,r10,r12
afac6_lp2
	;LDR	r10,[r1,#-2]	; r10= RezBuf[j]
	LDR	r9,[r2,#-4]!	; r9 = ImpResp[i-j]
	SUBS	r14,r14,#2
	MOV	r6,r9,ASR#16
	MLA	r12,r6,r7,r12
	LDR	r10,[r1],#4	; r10= RezBuf[j]
	;LDR	r9,[r2,#-2]!	; r9 = ImpResp[i-j]
	MOV	r9,r9,LSL#16
	MOV	r7,r10,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	MOV	r9,r9,ASR#16
	MLA	r12,r9,r10,r12
	BGT	afac6_lp2
afac6_enter
	RSB	r14,r3,#62	; r14 = i = i-j+1	r14 is EVEN
	SUB	r1,r1,r14,LSL#1
	RSB	r12,r12,#0
	; r1 is now 2*(61-r3) bigger than it was at the start.
	; r2 is now 2*(61-r3) smaller than it was at the start.
	; r2 will be corrected at the top. Just fix r1 here.
	;MOV	r12,r12,ASR#14
	;STRB	r12,[r0],#1
	;MOVS	r12,r12,ASR#8
	;STRB	r12,[r0],#1
	;SUBS	r3,r3,#1

	SUB	r8,r11,r8,LSL#14
	ADD	r2,r2,r14,LSL#1	; r2 = &ImpResp[i-j+1]
afac6_lp3
	LDR	r10,[r1],#4	; r10= RezBuf[j]
	LDR	r9,[r2,#-4]!	; r9 = ImpResp[i-j]
	MOV	r7,r10,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r6,r9,ASR#16
	MOV	r10,r10,ASR#16
	MLA	r8,r6,r10,r8
	;LDR	r10,[r1],#2	; r7 = RezBuf[j]
	;LDR	r9,[r2,#-2]!	; r9 = ImpResp[i-j]
	SUBS	r14,r14,#2
	MOV	r9,r9,LSL#16
	MOV	r9,r9,ASR#16
	MLA	r8,r9,r7,r8
	BGT	afac6_lp3
	RSB	r8,r8,#0
	; r1 is now 2*(61-r3) bigger than it was at the start.
	; r2 is now 2*(61-r3) smaller than it was at the start.
	; r2 will be corrected at the top. Just fix r1 here.
	ADDS	r8,r8,r8
	ADDVCS	r8,r8,r8
	MOVVS	r8,#1<<31
	SBCVS	r8,r8,#0
	MOV	r8,r8,ASR#16
	ADDS	r12,r12,r12
	ADDVCS	r12,r12,r12
	MOVVS	r12,#1<<31
	SBCVS	r12,r12,#0
	RSB	r14,r3,#62
	SUB	r1,r1,r14,LSL#1
	MOV	r12,r12,LSR#16
	ORR	r12,r12,r8,LSL#16
	STR	r12,[r0],#4
	SUBS	r3,r3,#2
	BGT	afac6_lp1

        Return  "r4-r11"
aFind_Acbk_core4
	; r0 = sPnt
	; r1 = Hb
	; r2 = Olp
	; r3 = Bound
        FunctionEntry "r4-r11"

	ADR	r14,AcbkGainTablePtr
	MOV	r7,#0		; r7 = Acc1
	SUB	r6,r1,#1	; r6 = Hb-Pstep
afac4_lp1
	MOV	r4,#0			; l = 0
	CMP	r2,#59			; if (Olp+k >= 59)
	MOVGE	r4,#1			;   l = 1
	LDR	r12,[r14,r4,LSL#2]
	LDR	r4,[r3,r4,LSL#2]	; r4 = Bound[l]
	ADD	r2,r2,#1
	MOV	r5,r4		; r5 = r4-i
afac4_lp2			; for (i = 0; i < Bound[l]; i++) {
	MOV	r11,#0		;   r11 = Acc0 = 0
	MOV	r10,#20		;
afac4_lp3			;   for (j = 0; j < 20; j++) {
	LDR	r9,[r0],#4	;              *(sPnt++)
	LDR	r8,[r12],#4	;                            *(lPnt++)
	SUBS	r10,r10,#1	;
	MLA	r11,r8,r9,r11	;     Acc0 += (         ) * (         )
	BGT	afac4_lp3	;   }
	CMP	r11,r7		;   if (Acc0 > Acc1)
	MOVGT	r7,r11		;     Acc1 = Acc0
	SUBGT	r9,r4,r5	;     r9 = Gid = i
	ORRGT	r6,r1,r9,LSL#6	;     r5 = Hb-Lid = Hb-k
	SUBS	r5,r5,#1	;   }
	SUBGT	r0,r0,#20*4	;   sPnt -= 20
	BGT	afac4_lp2	; }
				; sPnt += 20
	SUBS	r1,r1,#1
	BGT	afac4_lp1

	MOV	r0,r6

        Return  "r4-r11"
	DCD	0
aFind_Acbk_core3
	; r0 = sPnt
	; r1 = Hb
	; r2 = l
	; r3 = Bound[l]
        FunctionEntry "r6-r11"

	MOV	r7,#0			; r7 = Acc1
	SUB	r6,r1,#1	; r5 = Hb-Pstep
	ADR	r14,AcbkGainTablePtr
	LDR	r14,[r14,r2,LSL#2]
afac3_lp1
	MOV	r2,r3		; r2 = r3-i
	MOV	r12,r14		; r12 = lPnt = AcbkGainTablePtr[l]
afac3_lp2			; for (i = 0; i < Bound[l]; i++) {
	MOV	r11,#0		;   r11 = Acc0 = 0
	MOV	r10,#20		;
afac3_lp3			;   for (j = 0; j < 20; j++) {
	LDR	r9,[r0],#4	;              *(sPnt++)
	LDR	r8,[r12],#4	;                            *(lPnt++)
	SUBS	r10,r10,#1	;
	MLA	r11,r8,r9,r11	;     Acc0 += (         ) * (         )
	BGT	afac3_lp3	;   }
	CMP	r11,r7		;   if (Acc0 > Acc1)
	MOVGT	r7,r11		;     Acc1 = Acc0
	SUBGT	r9,r3,r2	;     r9 = Gid = i
	ORRGT	r6,r1,r9,LSL#6	;     r5 = Hb-Lid = Hb-k
	SUBS	r2,r2,#1	;   }
	SUBGT	r0,r0,#20*4	;   sPnt -= 20
	BGT	afac3_lp2	; }
				; sPnt += 20
	SUBS	r1,r1,#1
	BGT	afac3_lp1

	MOV	r0,r6

        Return  "r6-r11"
	;DCD	0
	;DCD	0
aFind_Acbk_core2
	; r0 = CorBuf
	; r1 = Hb
        FunctionEntry "r4,r11"

	MOV	r12,#0
	MOV	r4,r0
	ADDS	r11,r1,r1,LSL#2		; r11 = 5*Hb	; C clear
	RSC	r14,r12,r11,LSL#2	; r14 = 20*Hb-0-(1-C) = 20*Hb -1
	MOV	r3,#1<<31
afac2_lp1
	LDR	r2,[r0],#4	; r2 = CorBuf[i]
	SUBS	r14,r14,#1
	TEQ	r2,r3
	ADDEQ	r2,r2,#1
	TST	r2,r3
	RSBNE	r2,r2,#0	; r2 = abs(r4)
	ORR	r12,r12,r2	; r12 = Acc0 |= Acc1
	BCS	afac2_lp1

	MOV	r0,r12
	BL	norm_l
	; r0 = Exp
	; r4 = CorBuf
	; r11= 5*Hb
	MOV	r11,r11,LSL#2	; r11 = 20*Hb
	MOV	r1,#&8000
afac2_lp2
	LDR	r2,[r4]
	; Stall
	ADDS	r2,r1,r2,ASL r0
	SBCVS	r2,r3,#0
	SUBS	r11,r11,#1
	MOV	r2,r2,ASR #16
	STR	r2,[r4],#4
	BGT	afac2_lp2

        Return  "r4,r11"
	DCD	0
aFind_Acbk_core
	; r0 = Word32 *lPnt
	; r1 = Word32  FltBuf[5][60]
	; r2 = Word16 *Tv
	; r3 = Word16 *RezBuf
	; <> = Word16 *ImpResp
        FunctionEntry "r0,r2,r4-r11"
	LDR	r4,[r13,#(11)*4]	; r4 = ImpResp

	LDMIA	r3!,{r0,r2}	; r0 = RezBuf[0], RezBuf[1]
				; r2 = RezBuf[2], RezBuf[3]
				; r3 = &RezBuf[ClPitchOrd-1]
; i=0 is a special case, so we do that first...
	; r3 = &RezBuf[ClPitchOrd-1]
	MOV	r6,#&4000
	LDR	r8,[r3]		; r8 = RezBuf[4]
	LDR	r9,[r4]		; r9 = ImpResp[0]
	MOV	r8,r8,LSL#16	; r8 = RezBuf[4]<<16
	MOV	r9,r9,LSL#16	; r9 = ImpResp[0]<<16
	MOV	r8,r8,ASR#16	; r8 = RezBuf[4]
	MOV	r9,r9,ASR#16	; r9 = ImpResp[0]
	MLA	r6,r8,r9,r6	; r6 = ImpResp[4] * RezBuf[0]
	MOV	r8,r0,LSL#16	; r8 = RezBuf[0]<<16
	MOV	r10,r6,ASR#15	; r10= (ImpResp[4] * RezBuf[0])>>15
	MOV	r8,r8,ASR#16	; r8 = RezBuf[0]
	ADD	r8,r8,#2	; r8 = (RezBuf[0]+2)
	MOV	r8,r8,ASR#2	; r8 = (RezBuf[0]+2)>>2 = FltBuf[0][0]
	MOV	r14,r0,ASR#16
	ADD	r14,r14,#2
	MOV	r14,r14,ASR#2	; r14= (RezBuf[1]+2)>>2 = FltBuf[1][0]
	MOV	r12,r2,LSL#16
	MOV	r12,r12,ASR#16
	ADD	r12,r12,#2
	MOV	r12,r12,ASR#2	; r12= (RezBuf[2]+2)>>2 = FltBuf[2][0]
	MOV	r11,r2,ASR#16
	ADD	r11,r11,#2
	MOV	r11,r11,ASR#2	; r11= (RezBuf[3]+2)>>2 = FltBuf[3][0]
	STR	r8, [r1],#60*4	; FltBuf[0][j] = r8
	STR	r14,[r1],#60*4	; FltBuf[1][j] = r14
	STR	r12,[r1],#60*4	; FltBuf[2][j] = r12
	STR	r11,[r1],#60*4	; FltBuf[3][j] = r11
	STR	r10,[r1],#4	; FltBuf[4][j] = r10
	MOV	r5,#59		; r5 = 60-i
afac_lp6
	; r3 = &RezBuf[ClPitchOrd-1]
	MOV	r6,#&4000
	RSB	r7,r5,#61	; r7 = j-i
	ADD	r4,r4,r7,LSL#1	; r4 = &ImpResp[i+1]
afac_lp7
	LDR	r8,[r3],#2
	LDR	r9,[r4,#-2]!
	MOV	r8,r8,LSL#16
	MOV	r9,r9,LSL#16
	MOV	r8,r8,ASR#16
	MOV	r9,r9,ASR#16
	MLA	r6,r8,r9,r6
	SUBS	r7,r7,#1
	BGT	afac_lp7
	; r4 = &ImpResp[0]
	; r3 = &RezBuf[ClPitchOrd-1+i]
	; r6 = FltBuf[4][j]<<15
	; r10= FltBuf[4][j-1]
	; r11= FltBuf[3][j-1]
	; r12= FltBuf[2][j-1]
	; r14= FltBuf[1][j-1]
	RSB	r7,r5,#61	; r7 = j-i
	SUB	r3,r3,r7,LSL#1	; r3 = &RezBuf[ClPitchOrd-1]
	;LDR	r8,[r3,#-4]	; r8 = RezBuf[2], RezBuf[3]
	SUBS	r5,r5,#1
	RSB	r7,r5,#59	; r7 = j-i
	LDR	r9,[r4,r7,LSL#1]; r9 = ImpResp[j], crap
	MOV	r7,r2,ASR#16	; r7 = RezBuf[3]
	MOV	r9,r9,LSL#16	; r9 = ImpResp[j]<<16
	MOV	r9,r9,ASR#16	; r9 = ImpResp[j]
	MOV	r8,r2,LSL#16	; r8 = RezBuf[2]<<16
	MOV	r10,r10,LSL#15
	ADD	r10,r10,#&4000
	MLA	r10,r7,r9,r10	; r10= 0x4000 + (FltBuf[4][j-1]<<15) +
				;	RezBuf[3]*ImpResp[j]) = FltBuf[3][j]<<15
	MOV	r8,r8,ASR#16	; r8 = RezBuf[2]
	;LDR	r7,[r3,#-8]	; r7 = RezBuf[0], RezBuf[1]
	MOV	r11,r11,LSL#15
	ADD	r11,r11,#&4000
	MLA	r11,r8,r9,r11	; r11= 0x4000 + (FltBuf[3][j-1]<<15) +
				;	RezBuf[2]*ImpResp[j]) = FltBuf[2][j]<<15
	MOV	r8,r0,ASR#16	; r8 = RezBuf[1]
	MOV	r7,r0,LSL#16	; r7 = RezBuf[0]<<16
	MOV	r7,r7,ASR#16	; r7 = RezBuf[0]
	MOV	r14,r14,LSL#15
	ADD	r14,r14,#&4000
	MLA	r14,r7,r9,r14	; r14= 0x4000 + (FltBuf[1][j-1]<<15) +
				;	RezBuf[0]*ImpResp[j]) = FltBuf[0][j]<<15
	MOV	r12,r12,LSL#15
	ADD	r12,r12,#&4000
	MLA	r12,r8,r9,r12	; r12= 0x4000 + (FltBuf[2][j-1]<<15) +
				;	RezBuf[1]*ImpResp[j]) = FltBuf[1][j]<<15
	MOV	r9,r14,ASR#15
	MOV	r14,r12,ASR#15
	MOV	r12,r11,ASR#15
	MOV	r11,r10,ASR#15
	MOV	r10,r6,ASR#15
	STR	r9, [r1,#-60*4*4]	; FltBuf[0][j] = r9
	STR	r14,[r1,#-60*3*4]	; FltBuf[1][j] = r14
	STR	r12,[r1,#-60*2*4]	; FltBuf[2][j] = r12
	STR	r11,[r1,#-60*1*4]	; FltBuf[3][j] = r11
	STR	r10,[r1],#4		; FltBuf[4][j] = r10

	BGT	afac_lp6

	LDMFD	r13!,{r0,r2}

	SUB	r1,r1,#60*4*5

	MOV	r4,#5
afac_lp1
	MOV	r12,#0		; r12= Acc0
	MOV	r14,#0		; r14= Acc1
	MOV	r11,#60
afac_lp2
	LDR	r10,[r2],#2
	LDR	r9,[r1],#4
	MOV	r10,r10,LSL#16
	MLA	r12,r9,r9,r12	; Acc0 += FltBuf[i][j] * FltBuf[i][j]
	MOV	r10,r10,ASR#16
	MLA	r14,r10,r9,r14	; Acc1 += FltBuf[i][j] * Tv[j]
	SUBS	r11,r11,#1
	BGT	afac_lp2
	ADDS	r14,r14,r14
	MOVVS	r14,#1<<31
	SBCVS	r14,r14,#0
	;MOV	r14,r14,LSL#1
	STR	r14,[r0],#4
	ADDS	r12,r12,r12
	MOVVS	r12,#1<<31
	SBCVS	r12,r12,#0
	;MOV	r12,r12,LSL#1
	STR	r12,[r0,#4*4]
	SUB	r2,r2,#2*60
	SUBS	r4,r4,#1
	BGT	afac_lp1
	SUB	r1,r1,#60*5*4
	; r1 = &FltBuf[0][0]
	; r2 = &Tv[0]
	ADD	r0,r0,#5*4
	ADD	r4,r1,#60*4	; r4 = &FltBuf[1][0]
	MOV	r5,#1		; r5 = i
afac_lp4
	MOV	r6,r5		; r6 = i-j
afac_lp5
	MOV	r14,#60		; r14= 60-l
	MOV	r12,#0		; r12= Acc1
afac_lp3
	; r1 = &FltBuf[j][l]
	; r4 = &FltBuf[i][l]
	LDR	r8, [r4],#4		; r8 = FltBuf[i][l]
	LDR	r9, [r1],#4		; r9 = FltBuf[j][l]
	SUBS	r14,r14,#1
	MLA	r12,r8,r9,r12	; Acc1 += FltBuf[i][l] * FltBuf[j][l]
	BGT	afac_lp3
	;MOV	r12,r12,LSL#2	;	     Acc1<<2
	ADDS	r12,r12,r12
	ADDVCS	r12,r12,r12
	MOVVS	r12,#1<<31
	SBCVS	r12,r12,#0
	STR	r12,[r0],#4	; *lPnt++ = (       )
	SUBS	r6,r6,#1	; j++
	SUBGT	r4,r4,#60*4
	BGT	afac_lp5
	SUB	r1,r1,r5,LSL#6+2
	ADD	r1,r1,r5,LSL#2+2
	ADD	r5,r5,#1
	CMP	r5,#5
	BLT	afac_lp4

        Return  "r4-r11"
Gen_Trn2
	; r0 = Word16 *SrcDst
	; r1 = Word16  Olp
	RSBS	r2,r1,#60
	Return  , LinkNotStacked, LE

	ADD	r1,r0,r1,LSL#1	; r1 = &SrcDst[i]
gt2_lp
	LDR	r12,[r1],#2	; r12= SrcDst[i]
	LDR	r3,[r0],#2	; r3 = SrcDst[i-Olp]
	SUBS	r2,r2,#1
	ADD	r12,r12,r3
	STRB	r12,[r1,#-2]
	MOV	r12,r12,ASR#8
	STRB	r12,[r1,#-1]
	BGT	gt2_lp

        Return  , LinkNotStacked
Gen_Trn32
	; r0 = Word32 *SrcDst
	; r1 = Word16  Olp
	RSBS	r2,r1,#60
        Return  , LinkNotStacked, LE

	ADD	r1,r0,r1,LSL#2	; r1 = &SrcDst[i]
gt32_lp
	LDR	r12,[r1]	; r12= SrcDst[i]
	LDR	r3,[r0],#4	; r3 = SrcDst[i-Olp]
	SUBS	r2,r2,#1
	ADD	r12,r12,r3
	STR	r12,[r1],#4
	BGT	gt32_lp

        Return  , LinkNotStacked
Gen_Trn
	; r0 = Word32 *Dst
	; r1 = Word16 *Src
	; r2 = Word16  Olp
	; r3 = Word32 *ImrCorr
        FunctionEntry "r4-r11"

	MOV	r5,r0		; r5 = Dst
	ADR	r6,OccPos
	MOV	r0,#0		; r0 = Acc0
	SUB	r4,r2,#0	; r4 = Olp
	RSBS	r2,r2,#58	; r2 = SubFrLen - Olp
	MOVLE	r4,#60		; r4 = Tmp0 = (Olp < SubFrLen) ? Olp : SubFrLen
gt_lp
	LDR	r12,[r1],#4	; r12 = Src[i] and Src[i+1]
	SUBS	r4,r4,#2	; Decrement counter
	MOV	r14,r12,ASR#16	; Do the short thang
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	STMIA	r5!,{r12,r14}	; Dst[i] = Src[i], Dst[i+1] = Src[i+1]
	MOV	r12,r12,ASR#1	; r12 = Dst[i  ]>>1
	MOV	r14,r14,ASR#1	; r14 = Dst[i+1]>>1
	MLA	r0,r12,r12,r0	;  Acc0 += r12*r12
	STMIA	r6!,{r12,r14}	; OccPos[i] = r12, OccPos[i+1] = r14
	MLAGE	r0,r14,r14,r0	;  Acc0 += r14*r14 (but only if wanted!)
	BGT	gt_lp
	SUBLT	r1,r1,#2	; Src by a short
	SUBLT	r5,r5,#4	; Dst by a word
	SUBLT	r6,r6,#4	; OccPos by a word
	CMP	r2,#0
	BLE	gt_thirdbit
	ADD	r2,r2,#2
	CMP	r4,#0		; Do we need to backtrack?
	SUB	r14,r5,#60*4		; r14 = r0 - SubFrLen
	ADD	r14,r14,r2,LSL#2	; r14 = Dst[i-Olp]
gt_lp2
	LDR	r12,[r1],#2		; r12= Src[i]
	LDR	r4,[r14],#4		; r4 = Dst[i-Olp]
	MOV	r12,r12,LSL#16
	SUBS	r2,r2,#1
	ADD	r12,r4,r12,ASR#16
	STR	r12,[r5],#4		; Dst[i] = Dst[i-Olp] + Src[i]
	MOV	r12,r12,ASR#1
	STR	r12,[r6],#4		; OccPos[i] = Dst[i] >> 1
	MLA	r0,r12,r12,r0		; Acc0 += r12 * r12
	BGT	gt_lp2
gt_thirdbit
	MOV	r7,r0
	; r0 = Imr AutoCorr Function
	; r1 = &Src[SubFrLen] - but about to be lost
	; r3 = Word32 *ImrCorr
	; r5 = &Dst[SubFrLen]
	; r6 = &OccPos[SubFrLen]
	; r7 = Imr AutoCorr Function
	; norm_l does not touch r3 or r12!
	BL	norm_l
	; r0 = Exp
	MOV	r12,#&8000
	ADD	r7,r12,r7,LSL r0
	MOV	r7,r7,ASR#16
	STR	r7,[r3],#4

	SUB	r6,r6,#60*4	; r6 = &OccPos[0]
	ADD	r8,r6,#4	; r8 = &OccPos[1]
	; Now we compute the non-leading diagonals
	MOV	r1,#59
gt_lp3
	MOV	r2,#0		; r2 = Acc1 = 0
	MOV	r14,r1
gt_lp4
	LDR	r4,[r6],#4	; r4 = OccPos[j-i]
	LDR	r7,[r8],#4	; r7 = OccPos[j]
	SUBS	r14,r14,#1
	MLA	r2,r4,r7,r2	; Acc1 += OccPos[j] * OccPos[j-i]
	BGT	gt_lp4
	; r6 = OccPos[SubFrLen-i]
	; r8 = OccPos[SubFrLen]
	ADD	r2,r12,r2,LSL r0
	SUB	r6,r6,r1,LSL#2	; r6 = OccPos[0]
	MOV	r2,r2,ASR#16
	STR	r2,[r3],#4
	SUBS	r1,r1,#1	; i++
	SUB	r8,r8,r1,LSL#2	; r8 = OccPos[i]
	BGT	gt_lp3

	; r6 = ErrBlk
	LDR	r12,[r13,#9*4]	; r12= &Tv[0]  - verified
	SUB	r5,r5,#60*4	; r5 = &Dst[0] - verified
	MOV	r1,#60
	MOV	r8,#0		; r8 = MaxErr0
	MOV	r9,#0		; r9 = MaxErr1
	MOV	r10,#0		; r10= MaxErrPos0
	MOV	r11,#0		; r11= MaxErrPos1
	SUBS	r0,r0,#4
	BLT	gt_down
gt_lp5
	MOV	r2,#0
	MOV	r14,r1
gt_lp6
	LDR	r4,[r12],#2	; r4 = Tv[j]
	LDR	r7,[r5],#4	; r5 = Imr[j-i]
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MLA	r2,r4,r7,r2
	SUBS	r14,r14,#1
	BGT	gt_lp6
	; r5 = &Imr[SubFrLen-i]
	; r12= &Tv[SubFrLen]
	MOV	r2,r2,LSL r0
	SUB	r5,r5,r1,LSL#2		; r5 = &Imr[0]
	;MOV	r2,r2,ASR#1
	STR	r2,[r6],#4

	CMP	r2,#0
	RSBLT	r2,r2,#0
	CMP	r2,r8
	MOVGE	r8,r2
	RSBGE	r10,r1,#60

	SUB	r1,r1,#1
	SUB	r12,r12,r1,LSL#1	; r12= &Tv[i]
	MOV	r2,#0
	MOV	r14,r1
gt_lp6b
	LDR	r4,[r12],#2	; r4 = Tv[j]
	LDR	r7,[r5],#4	; r5 = Imr[j-i]
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MLA	r2,r4,r7,r2
	SUBS	r14,r14,#1
	BGT	gt_lp6b
	; r5 = &Imr[SubFrLen-i]
	; r12= &Tv[SubFrLen]
	MOV	r2,r2,LSL r0
	SUB	r5,r5,r1,LSL#2		; r5 = &Imr[0]
	;MOV	r2,r2,ASR#1
	STR	r2,[r6],#4

	CMP	r2,#0
	RSBLT	r2,r2,#0
	CMP	r2,r9
	MOVGE	r9,r2
	RSBGE	r11,r1,#60

	SUBS	r1,r1,#1
	SUB	r12,r12,r1,LSL#1	; r12= &Tv[i]
	BGT	gt_lp5
gt_rejoin
	; scratch r0,r1,r2,r4,r7,r14
	; r3 = &ImCorr[SubFrLen]
	; r5 = &Imr[0]
	; r6 = &ErrBlk[SubFrLen]
	; r8 = MaxErr0
	; r9 = MaxErr1
	; r10= MaxErrIdx0
	; r11= MaxErrIdx1
	; r12= &Tv[SubFrLen]
	STMIA	r6!,{r10,r11}
	LDR	r2,[r3,#-60*4]!		; r2 = ImrCorr[0]
	MOV	r0,#&20000000
	MOV	r1,#&20000000
	MOV	r4,#21+3	; MaxAmpId0 = NumOfGainLev - MlqSteps
	MOV	r7,#21+3	; MaxAmpID1 = NumOfGainLev - MlqSteps
	MOV	r14,#21		; i = NumOfGainLev - MlqSteps
	ADR	r10,FcbkGainTable+22*4
gt_lp9
	LDR	r11,[r10],#-4	; r11 = FcbkGainTable[i]
	; Stall
	MUL	r11,r2,r11	; r11 = Acc0
	; Stall
	SUBS	r12,r11,r8,ASR#1
	RSBLT	r12,r12,#0
	CMP	r12,r0
	MOVLT	r0,r12
	ADDLT	r4,r14,#3

	SUBS	r12,r11,r9,ASR#1
	RSBLT	r12,r12,#0
	CMP	r12,r1
	MOVLT	r1,r12
	ADDLT	r7,r14,#3

	SUBS	r14,r14,#1
	BGT	gt_lp9

	STMIA	r6!,{r4,r7}

	SUB	r0,r6,#64*4

        Return  "r4-r11"
gt_down
	RSB	r0,r0,#0
gt_lp7
	MOV	r2,#0
	MOV	r14,r1
gt_lp8
	LDR	r4,[r12],#2	; r4 = Tv[j]
	LDR	r7,[r5],#4	; r5 = Imr[j-i]
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MLA	r2,r4,r7,r2
	SUBS	r14,r14,#1
	BGT	gt_lp8
	; r5 = &Imr[SubFrLen-i]
	; r12= &Tv[SubFrLen]
	MOV	r2,r2,ASR r0
	SUB	r5,r5,r1,LSL#2		; r5 = &Imr[0]
	;MOV	r2,r2,ASR#1
	STR	r2,[r6],#4

	CMP	r2,#0
	RSBLT	r2,r2,#0
	CMP	r2,r8
	MOVGE	r8,r2
	RSBGE	r10,r1,#60

	SUBS	r1,r1,#1
	SUB	r12,r12,r1,LSL#1	; r12= &Tv[i]
	MOV	r2,#0
	MOV	r14,r1
gt_lp8b
	LDR	r4,[r12],#2	; r4 = Tv[j]
	LDR	r7,[r5],#4	; r5 = Imr[j-i]
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MLA	r2,r4,r7,r2
	SUBS	r14,r14,#1
	BGT	gt_lp8b
	; r5 = &Imr[SubFrLen-i]
	; r12= &Tv[SubFrLen]
	MOV	r2,r2,ASR r0
	SUB	r5,r5,r1,LSL#2		; r5 = &Imr[0]
	;MOV	r2,r2,ASR#1
	STR	r2,[r6],#4

	CMP	r2,#0
	RSBLT	r2,r2,#0
	CMP	r2,r9
	MOVGE	r9,r2
	RSBGE	r11,r1,#60

	SUBS	r1,r1,#1
	SUB	r12,r12,r1,LSL#1	; r12= &Tv[i]
	BGT	gt_lp7

	B	gt_rejoin
aFind_Best_core
	; r0 = OccPos
	; r1 = Temp
	; r2 = ImrCorr
	; r3 = WrkBlk
	; r4 = Np
	; <> = Imr
	; <> = Tv
	; <> = Best
	; <> = ErrBlk
	MOV	r12,r13
        FunctionEntry "r4-r11"
	LDMFD	r12,{r4}
	; r5 = k
	MOV	r5,#0
afbc_lp10
	STRB	r5,[r1,#9*4]		; Temp.GridId = k

	MOV	r9,#4
	STR	r9,i			; r9 = i
	; r0 = OccPos
	; r1 = &Temp
	; r2 = ImrCorr
	; r3 = WrkBlk
	; r4 = Np
	; r5 = k
	; r9 = i
	STR	r0,ibble
afbc_lp5
	LDR	r6,[r13,#(9+4)*4]	; r6 = ErrBlk
	MOV	r10,#15
	ADD	r6,r6,r5,LSL#2
afbc_lp7
	LDR	r12,[r6],#8
	LDR	r14,[r6],#8
	SUBS	r10,r10,#1
	STMIA	r3!,{r12,r14}
	BGT	afbc_lp7
	MOV	r10,#32/4
	MOV	r14,#0
afbc_lp8
	STR	r14,[r0],#4
	SUBS	r10,r10,#1
	BGT	afbc_lp8
	SUB	r3,r3,#8*15
	LDR	r12,[r6]		; r12= ErrBlk[SubFrLen+k]
	LDR	r10,[r6,#8]		; r10= Temp.MampId
	SUB	r0,r0,#32
	STRB	r12,[r1,#6*4]		; Temp.Ploc[0] = r12
	SUB	r10,r10,r9		; r10= Temp.MampId + i_adjustment
	MOV	r7,r12,ASR#1
	LDR	r14,[r3,r7,LSL#2]	; r14= WrkBlk[Temp.Ploc[0]>>1]
	ADR	r7,FcbkGainTable
	LDR	r7,[r7,r10,LSL#2]	; r7 = MaxAmp
	CMP	r14,#0
	STRB	r10,[r1,#9*4+1]
	STR	r7,MaxAmp
	RSBLT	r7,r7,#0		; r7 = negate(MaxAmp) (maybe)
	STR	r7,[r1]			; Temp.Pamp[0] = r7
	MOV	r6,#1
	STRB	r6,[r0,r12,ASR#1]	; OccPos[Temp.Ploc[0]>>1] = 1

	MOV	r6,#1		; r6 = j
	STR	r6,j
	ADD	r8,r1,#4*6	; r8 = &Temp.Ploc
	LDRB	r7,[r8],#1	; r14= Temp.Ploc[j-1]
	LDR	r10,[r1],#4	; r10= Temp.Pamp[j-1]
afbc_lp1
	MOV	r14,r7
	MOV	r6,#&c0000000
	MOV	r9,r5		; r9 = l = k
afbc_lp2
	LDRB	r12,[r0],#1	; r12= OccPos[l]
	; Stall
	CMP	r12,#0		; if (OccPos[l] != 0)
	BNE	afbc_over	;   continue;

	SUBS	r11,r9,r14	; r11= tmp = l-Temp.Ploc[j-1]
	RSBLT	r11,r11,#0	; r11= abs_s(tmp)
	LDR	r11,[r2,r11,LSL#2]	; r11 = ImrCorr[r11]
	LDR	r12,[r3]	; r12= WrkBlk[l]
	MUL	r11,r10,r11	; r11 = Temp.Pamp[j-1] * r11
	ADD	r9,r9,#2
	SUBS	r11,r12,r11,LSL#1	; r11 = Acc0 = WrkBlk[l] - r11 * 2
	STR	r11,[r3],#4
	RSBLT	r11,r11,#0	; r11 = abs(Acc0)
	CMP	r11,r6
	MOVGT	r6,r11
	SUBGT	r7,r9,#2	; r7 = Temp.Ploc[j] = l
	CMP	r9,#60
	BLT	afbc_lp2
afbc_return
	; r0 = &OccPos[r9]
	; r3 = &WrkPos[r9]
	SUB	r12,r9,r7		; r12= r9-Temp.Ploc[j]
	LDR	r6,j
	LDR	r11,[r3,-r12,LSL#1]	; r11= WrkPos[r9-r9+Temp.Ploc[j]]
	SUB	r9,r9,r5		; r9 = r9-l
	SUB	r3,r3,r9,LSL#1		; r3 = &WrkPos[l]
	LDR	r10,MaxAmp		; r10= MaxAmp
	STRB	r7,[r8],#1		; Temp.Ploc[j] = r7
	CMP	r11,#0
	RSBLT	r10,r10,#0
	STR	r10,[r1],#4		; Temp.Pamp[j] = (-)MaxAmp
	SUB	r0,r0,r9,LSR#1		; r0 = &OccPos[l]
	STRB	r9,[r0,r7,ASR#1]	; OccPos[Temp.Ploc[j]>>1] = 1
	ADD	r6,r6,#1
	CMP	r6,r4
	STRLT	r6,j
	BLT	afbc_lp1
        ; r0 = &OccPos[l] = &OccPos[0]
        ; r1 = &Temp.Pamp[r4]
        ; r3 = &WrkBlk[l] = &WrkBlk[k]
	; r8 = &Temp.Ploc[r4]
	MOV	r6,#59			; r6 = l = SubFrLen-1
	LDR	r10,[r13,#(9+1)*4]	; r10= Imr
	LDR	r9,[r13,#(9+2)*4]	; r9 = Tv
	MOV	r12,#0			; r12= Acc1
	ADD	r9,r9,#60*2		; r9 = Tv[SubFrLen]
afbc_lp3
	SUB	r1,r1,r4,LSL#2		; r1 = &Temp.Pamp[0]
	SUB	r8,r8,r4		; r8 = &Temp.Ploc[0]
	MOV	r14,#0			; r14= Acc0
	SUB	r7,r4,#1		; r7 = j = Np-1
afbc_lp4
	LDRB	r11,[r8],#1		; r11= Temp.Ploc[j]
	LDR	r0,[r1],#4		; r0 = Temp.Pamp[j]
	CMP	r11,r5
	SUBGES	r11,r6,r11		; r11= l-x
	LDRGE	r11,[r10,r11,LSL#2]	; r11= Imr[l-x]
	; Stall
	MLAGE	r14,r0,r11,r14		; Acc0 += Temp.Pamp[j] * Imr[l-x]
	SUBS	r7,r7,#1
	BGE	afbc_lp4
	; r1 = &Temp.Pamp[r4]
	; r8 = &Temp.Ploc[r4]
	LDR	r7,[r9,#-2]!		; r7 = Tv[l]
	MOV	r14,r14,ASR#13		; r14 = Acc0>>13
	MOV	r7,r7,LSL#16
	MOV	r7,r7,ASR#15
	MUL	r7,r14,r7		; r7 = (Tv[l]<<1) * Acc0
	MOV	r0,#1<<31
	ADDS	r12,r12,r7
	SBCVS	r12,r0,#0
	MUL	r7,r14,r14		; r7 = Acc0 = Acc0 * Acc0
	SUBS	r6,r6,#1
	SUB	r12,r12,r7
	BGE	afbc_lp3

	SUB	r1,r1,r4,LSL#2		; r1 = &Temp
	LDR	r6,[r13,#(9+3)*4]	; r6 = Best
	MOV	r14,#10		; r14 = sizeof(BESTDEF)
	LDR	r7,[r6,#8*4]
	LDR	r9,i
	CMP	r12,r7		; if ( Acc1 > (*Best).MaxErr ) {
	BLE	afbc_skip3
afbc_lp9
	LDR	r7,[r1],#4	;   memcpy((void *)Best, (void *)&Temp, r14);
	SUBS	r14,r14,#1
	STR	r7,[r6],#4
	BGT	afbc_lp9
	STR	r12,[r6,#-8]	;   (*Best).MaxErr = Acc1 ;
				; }
	SUB	r1,r1,#40
afbc_skip3
	LDR	r0,ibble
	SUBS	r9,r9,#1
	STRGT	r9,i
	; r0 = OccPos
	; r1 = &Temp
	; r2 = ImrCorr
	; r3 = WrkBlk
	; r4 = Np
	; r5 = k
	; r9 = i
	BGT	afbc_lp5

	EORS	r5,r5,#1
	BNE	afbc_lp10

        Return  "r4-r11"
afbc_over
	ADD	r3,r3,#4
	ADD	r9,r9,#2
	CMP	r9,#60
	BLT	afbc_lp2

	B	afbc_return
OccPos
	% (60+4)*4		; SubFrLen * sizeof(int) + 4 * sizeof(int)
FcbkGainTable
	DCD	1
	DCD	2
	DCD	3
	DCD	4
	DCD	6
	DCD	9
	DCD	13
	DCD	18
	DCD	26
	DCD	38
	DCD	55
	DCD	80
	DCD	115
	DCD	166
	DCD	240
	DCD	348
	DCD	502
	DCD	726
	DCD	1050
	DCD	1517
	DCD	2193
	DCD	3170
	DCD	4582
	DCD	6623
AcbkGainTablePtr
	DCD	AcbkGainTable085
	DCD	AcbkGainTable170
j
	DCD	0
i
	DCD	0
MaxAmp
	DCD	0
ibble
	DCD	0
FcbkGainTablePtr
	DCD	FcbkGainTable
G_code
	; r0 = Word16 *X
	; r1 = Word16 *Y
	; r2 = Word32 *gain_q
        FunctionEntry "r4-r7"

	MOV	r14,#30		; r14 = i
	MOV	r4,#0		; r4 = L_xy
	MOV	r6,r2		; r6 = gain_q
	MOV	r7,#0		; r7 = L_yy
gc_lp1
	LDR	r12,[r1],#4		; r12= Y[i]~Y[i+1]
	LDR	r3,[r0],#4		; r3 = X[i]~X[i+1]
	MOV	r2,r12,ASR#16+3		; r2 = Y[i+1]
	MLA	r7,r2,r2,r7		; L_yy += Y[i+1] * Y[i+1]
	MOV	r5,r3,ASR#16		; r5 = X[i+1]
	MLA	r4,r5,r2,r4		; L_xy += X[i+1] * Y[i+1]
	MOV	r12,r12,LSL#16		; r12= Y[i]<<19
	MOV	r12,r12,ASR#16+3	; r12= Y[i]
	MLA	r7,r12,r12,r7		; L_yy += Y[i] * Y[i]
	MOV	r3,r3,LSL#16
	MOV	r3,r3,ASR#16		; r12= X[i]
	MLA	r4,r3,r12,r4		; L_xy += X[i] * Y[i]
	SUBS	r14,r14,#1
	BGT	gc_lp1

	ADDS	r0,r4,r4		; L_xy = L_add(L_xy, L_xy)
	RSCVSS	r0,r14,#1<<31		; r0 = L_xy = L_add(L_xy, L_xy)
	BLE	gc_early_bath

	MOV	r4,r0			; r4 = L_xy
	BL	norm_l
	MOV	r4,r4,LSL r0
	ADD	r5,r0,#5		; r5 = exp_xy+5

	ADDS	r7,r7,r7
	MOVVS	r7,#1<<31
	SBCVS	r7,r7,#0		; r7 = L_yy = L_add(L_yy, L_yy)
	MOV	r0,r7
	BL	norm_l			; r0 = exp_yy = norm_l(L_yy)
	MOV	r7,r7,LSL r0
	SUBS	r5,r5,r0		; i = exp_xy + 5 - exp_yy
	MOV	r0,r4,ASR#17		; r0 = xy
	MOV	r1,r7,ASR#16		; r1 = yy
	BL	div_s			; r0 = gain_nq = div_s(xy,yy);
      [ {CONFIG}<>26
        CMP     r5, #0
      ]
	RSBLT	r5,r5,#0
	MOVLE	r1,r0,LSL r5
	MOVGT	r1,r0,ASR r5
	; r0 = gain_nq
	; Could be optimised to be a binary search
	MOV	r0,#0		; r0 = gain
	MOV	r5,#1
	SUBS	r14,r1,#1
	RSBLT	r14,r14,#0	; r14 = dist_min
	LDR	r3,FcbkGainTablePtr
	MOV	r2,#23		; r2 = 24-i
gc_lp2
	LDR	r12,[r3,#4]!
	SUBS	r4,r1,r12
	RSBLT	r4,r4,#0
	CMP	r4,r14
	MOVLT	r14,r4
	RSBLT	r0,r2,#24
	MOVLT	r5,r12
	SUBS	r2,r2,#1
	BGT	gc_lp2
	STR	r5,[r6]

        Return  "r4-r7"
gc_early_bath
	MOV	r1,#1
	STR	r1,[r6]
	MOV	r0,#0
        Return  "r4-r7"
aD4i64_LBC
D4i64_LBC
	; r0 = Word16 Dn[]
	; r1 = Word16 rri0i0[]
	; r2 = Word16 h[]
	; r3 = Word16 cod[]
	; <> = Word16 y[]
	; <> = Word16 *code_shift
	; <> = Word16 *sign
        FunctionEntry "r1,r4-r11"

	MOV	r12,#0
	STR	r12,[r0,#60*2]
	STR	r12,[r0,#62*2]
	MVN	r4,#0
	MVN	r5,#0
	MVN	r6,#0
	MVN	r7,#0
	MVN	r8,#0
	MVN	r9,#0
	MOV	r11,#0
	MOV	r12,#0
	MOV	r10,#8		; r10=7
	ADR	r2,p_sign
d4_lp
	LDR	r1,[r0],#4		; r1 = *Dn~*(Dn+1)
	MOV	r3,#1
	MOV	r14,r1,LSL#16
	MOV	r14,r14,ASR#16
	MOV	r1,r1,ASR#16
	CMN	r1,r14
	MOVGE	r3,#0
	STRB	r3,[r2],#1

	RSBLT	r1,r1,#0
	RSBLT	r14,r14,#0

	ADD	r12,r12,r1	; r12= L32_1 += *(Dn+1)
	CMP	r5,r1		; if (max0_1 < *(Dn+1))
	MOVLT	r5,r1		;   max0_1 = *(Dn+1)
	ADD	r11,r11,r14	; r11= L32 += *Dn
	CMP	r4,r14		; if (max0 < *Dn)
	MOVLT	r4,r14		;   max0 = *Dn

	MOV	r14,r14,LSL#16
	MOV	r14,r14,LSR#16
	ORR	r14,r14,r1,LSL#16

	LDR	r1,[r0],#4		; r14= *Dn~*(Dn+1)
	MOV	r3,#1
	STR	r14,[r0,#-8]
	MOV	r14,r1,LSL#16
	MOV	r14,r14,ASR#16
	MOV	r1,r1,ASR#16
	CMN	r1,r14
	MOVGE	r3,#0
	STRB	r3,[r2],#1

	RSBLT	r1,r1,#0
	RSBLT	r14,r14,#0

	ADD	r12,r12,r1	; r12= L32_1 += *(Dn+1)
	CMP	r7,r1		; if (max1_1 < *(Dn+1))
	MOVLT	r7,r1		;   max1_1 = *(Dn+1)
	ADD	r11,r11,r14	; r11= L32 += *Dn
	CMP	r6,r14		; if (max0 < *Dn)
	MOVLT	r6,r14		;   max0 = *Dn

	MOV	r14,r14,LSL#16
	MOV	r14,r14,LSR#16
	ORR	r14,r14,r1,LSL#16

	LDR	r1,[r0],#4
	MOV	r3,#1
	STR	r14,[r0,#-8]
	MOV	r14,r1,LSL#16
	MOV	r14,r14,ASR#16
	MOV	r1,r1,ASR#16
	CMN	r1,r14
	MOVGE	r3,#0
	STRB	r3,[r2],#1

	RSBLT	r1,r1,#0
	RSBLT	r14,r14,#0

	ADD	r12,r12,r1	; r12= L32_1 += *(Dn+1)
	CMP	r9,r1		; if (max1_1 < *(Dn+1))
	MOVLT	r9,r1		;   max1_1 = *(Dn+1)
	ADD	r11,r11,r14	; r11= L32 += *Dn)
	CMP	r8,r14		; if (max0 < *Dn)
	MOVLT	r8,r14		;   max0 = *Dn

	MOV	r14,r14,LSL#16
	MOV	r14,r14,LSR#16
	ORR	r14,r14,r1,LSL#16

	LDR	r1,[r0],#4
	MOV	r3,#1
	STR	r14,[r0,#-8]
	MOV	r14,r1,LSL#16
	MOV	r14,r14,ASR#16
	MOV	r1,r1,ASR#16
	CMN	r1,r14
	MOVGE	r3,#0
	STRB	r3,[r2],#1

	RSBLT	r1,r1,#0
	RSBLT	r14,r14,#0

	MOV	r14,r14,LSL#16
	MOV	r14,r14,LSR#16
	ORR	r14,r14,r1,LSL#16

	STR	r14,[r0,#-4]

	SUBS	r10,r10,#1
	BGT	d4_lp

	ADD	r4,r4,r6
	ADD	r4,r4,r8	; r4 = max0 = max0 + max1 + max2
	ADD	r5,r5,r7
	ADD	r5,r5,r9	; r5 = max0_1 = max0_1 + max1_1 + max2_1

	MOV	r11,r11,ASR#3	; r11 = means = L32>>3
	SUB	r4,r4,r11	; r4 = thres = max0 - means
	ADD	r4,r11,r4,ASR#1	; r4 = thres = (max0 - means)>>1 + means

	MOV	r12,r12,ASR#3	; r14 = means = L32>>3
	SUB	r5,r5,r12	; r5 = max1 = max0 - means
	ADD	r5,r12,r5,ASR#1	; r5 = max1 = (max0 - means)>>1 + means

	CMP	r5,r4
	MOVGT	r4,r5

	ADR	r0,D4_passback
	STMIA	r0!,{r4,r5}

	LDMFD	r13!,{r1}	; r1 = rri0i0
	ADR	r0,p_sign
	MOV	r2,r0
	MOV	r3,#8
	ADD	r1,r1,#32*2
d4_lp2
	MOV	r11,#4
	LDR	r5,[r0],#4	; r5 = p_sign[i0]
d4_lp3
	LDMIA	r2!,{r6,r8}	; r6 = p_sign[i1]
	LDR	r4,[r1],#4	; r4 = rri0i0[0]
	EOR	r7,r5,r6,LSR#8
	EOR	r10,r5,r8,LSR#8
	MOV	r9,r4,ASR#16
	TST	r7,#1
	RSBNE	r4,r4,#0
	TST	r10,#1
	RSBNE	r9,r9,#0
	MOV	r9,r9,LSL#16
	MOV	r4,r4,LSL#16
	ORR	r4,r9,r4,LSR#16
	STR	r4,[r1,#-4]

	LDR	r4,[r1,#192*2-4]
	TST	r7,#256
	MOV	r9,r4,ASR#16
	RSBNE	r4,r4,#0
	TST	r10,#256
	RSBNE	r9,r9,#0
	MOV	r9,r9,LSL#16
	MOV	r4,r4,LSL#16
	ORR	r4,r9,r4,LSR#16
	STR	r4,[r1,#192*2-4]

	LDR	r4,[r1,#320*2-4]
	TST	r7,#65536
	MOV	r9,r4,ASR#16
	RSBNE	r4,r4,#0
	TST	r10,#65536
	RSBNE	r9,r9,#0
	MOV	r9,r9,LSL#16
	MOV	r4,r4,LSL#16
	ORR	r4,r9,r4,LSR#16
	STR	r4,[r1,#320*2-4]

	LDR	r4,[r1,#64*2-4]
	EOR	r7,r5,r6,LSR#16
	MOV	r9,r4,ASR#16
	EOR	r10,r5,r8,LSR#16
	TST	r7,#1
	RSBNE	r4,r4,#0
	TST	r10,#1
	RSBNE	r9,r9,#0
	MOV	r9,r9,LSL#16
	MOV	r4,r4,LSL#16
	ORR	r4,r9,r4,LSR#16
	STR	r4,[r1,#64*2-4]

	LDR	r4,[r1,#256*2-4]
	TST	r7,#256
	MOV	r9,r4,ASR#16
	RSBNE	r4,r4,#0
	TST	r10,#256
	RSBNE	r9,r9,#0
	MOV	r9,r9,LSL#16
	MOV	r4,r4,LSL#16
	ORR	r4,r9,r4,LSR#16
	STR	r4,[r1,#256*2-4]

	LDR	r4,[r1,#128*2-4]
	EOR	r7,r5,r6,LSR#24
	EOR	r10,r5,r8,LSR#24
	MOV	r9,r4,ASR#16
	TST	r7,#1
	RSBNE	r4,r4,#0
	TST	r10,#1
	RSBNE	r9,r9,#0
	MOV	r9,r9,LSL#16
	MOV	r4,r4,LSL#16
	ORR	r4,r9,r4,LSR#16
	STR	r4,[r1,#128*2-4]

	SUBS	r11,r11,#1
	BGT	d4_lp3
	SUB	r2,r2,#8*4
	SUBS	r3,r3,#1
	BGT	d4_lp2

        Return  "r4-r11"
p_sign
	% 32
D4_passback
	DCD	0
	DCD	0
h
	% 64*2
cor_h_down
	MOV	r3,#30
	MOV	r7,#1<<15
	MVN	r4,#1<<15
ch_lp3
	LDR	r12,[r6],#4
	; Stall
	TST	r12,#1<<15
	ORRNE	r12,r7,r12,ASR#1
	ANDEQ	r12,r4,r12,ASR#1
	STR	r12,[r5],#4
	SUBS	r3,r3,#1
	BGT	ch_lp3
	B	cor_h_ret
aCor_h
	; r0 = Word16 *H
	; r1 = Word16 *rri0i0
        FunctionEntry "r4-r11"

	MOV	r2,#0		; r2 = cor
	MOV	r3,#30		; r3 = 60-i
	MOV	r4,#0		; Robins patent handy constant
	MOV	r6,r0
	MOV	r11,r1
ch_lp
	LDR	r12,[r0],#4
	; Stall
	MOV	r14,r12,ASR#16
	MUL	r5,r14,r14
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	ADDS	r2,r2,r5
	MUL	r5,r12,r12
	RSCVS	r2,r4,#1<<31
	ADDS	r2,r2,r5
	RSCVS	r2,r4,#1<<31
	SUBS	r3,r3,#1
	BGT	ch_lp
	ADDS	r0,r2,r2
	RSCVS	r0,r4,#1<<31

	ADR	r5,h
	STR	r4,[r5],#4
	STR	r4,[r5],#4
	CMP	r0,#32000<<16
	BGT	cor_h_down
	BL	norm_l
	MOV	r0,r0,ASR#1

	MOV	r4,#1<<16
	RSB	r4,r4,r4,LSL r0
	MVN	r4,r4
	MOV	r3,#30
ch_lp2
	LDR	r12,[r6],#4
	SUBS	r3,r3,#1
	AND	r12,r4,r12,LSL r0
	STR	r12,[r5],#4
	BGT	ch_lp2
cor_h_ret
	SUB	r0,r5,#64*2	; r0 = ptr_h1

	; Compute rri0i0[], rri1i1[], rri2i2[] and rri3i3[]
	ADD	r2,r11,#7*2		; r2 = p0
	MOV	r3,#0
	MOV	r7,#0		; Robins useful constant
	MOV	r8,#8
ch_lp4
	; First one...
	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	MOV	r5,r4,ASR#16
	MUL	r6,r5,r5	; r6 = *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	ADDS	r3,r3,r6,LSL#1
	MUL	r6,r4,r4	; r6 = *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r6,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r6,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	STRB	r6,[r2,#24*2]!
	MOV	r6,r6,ASR#8
	STRB	r6,[r2,#1]

	; Second one
	MOV	r5,r4,ASR#16
	MUL	r6,r5,r5	; r6 = *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	ADDS	r3,r3,r6,LSL#1
	MUL	r6,r4,r4	; r6 = *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r6,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r6,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	STRB	r6,[r2,#-8*2]!
	MOV	r6,r6,ASR#8
	STRB	r6,[r2,#1]

	; Third one
	MOV	r5,r4,ASR#16
	MUL	r6,r5,r5	; r6 = *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	ADDS	r3,r3,r6,LSL#1
	MUL	r6,r4,r4	; r6 = *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r6,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r6,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	STRB	r6,[r2,#-8*2]!
	MOV	r6,r6,ASR#8
	STRB	r6,[r2,#1]

	; Fourth one
	MOV	r5,r4,ASR#16
	MUL	r6,r5,r5	; r6 = *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	ADDS	r3,r3,r6,LSL#1
	MUL	r6,r4,r4	; r6 = *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r6,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r6,r3,ASR#16

	STRB	r6,[r2,#-8*2]!
	MOV	r6,r6,ASR#8
	STRB	r6,[r2,#1]
	SUB	r2,r2,#2
	SUBS	r8,r8,#1
	BGT	ch_lp4
	SUB	r0,r0,#64*2

        Return  "r4-r11"
	; Compute elements of: rri0i1[], rri0i3[], rri1i2[] and rri2i3[]
	; r0 = ptr_h1
	ADD	r2,r11,#(32+63)*2		; r2 = rri0i0
	ADD	r9,r2,#(128-1)*2		; r9 = p0 = rri0i0 + 128-1
	ADD	r1,r0,#2*2		; r1 = ptr_h2 = ptr_h1 + 2
	MOV	r7,#0			; Robins useful constant
	MOV	r8,#7			; r8 = k = 7
	MOV	r3,#0			; r3 = cor = 0
ch_lp5
	MOV	r6,r8			; r6 = i = k
ch_lp6
	; First one...
	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h2+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h2
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	STRB	r11,[r2,#(256+64)*2]!
	MOV	r11,r11,ASR#8
	STRB	r11,[r2,#1]

	; Second one
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h2+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h2
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	STRB	r11,[r2,#-128*2]!
	MOV	r11,r11,ASR#8
	STRB	r11,[r2,#1]

	; Third one
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	STRB	r11,[r2,#-192*2]!
	MOV	r11,r11,ASR#8
	STRB	r11,[r2,#1]

	; Fourth one
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	STRB	r11,[r9],#1
	MOV	r11,r11,ASR#8
	STRB	r11,[r9],#-9*2-1
	SUB	r2,r2,#2*9
	SUBS	r6,r6,#1
	BGT	ch_lp6
ch_back1
	; First one...
	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h2+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h2
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	LDR	r4,[r0],#4	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	STRB	r11,[r2,#(256+64)*2]!
	MOV	r11,r11,ASR#8
	STRB	r11,[r2,#1]

	; Second one
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h2+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h2
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	LDR	r4,[r0],#4-2*6	; r4 = *ptr_h1 ~ *(ptr_h1+1)
	LDR	r10,[r1],#4+2*2	; r4 = *ptr_h2 ~ *(ptr_h2+1)
	STRB	r11,[r2,#-128*2]!
	MOV	r11,r11,ASR#8
	STRB	r11,[r2,#1]

	; Third one
	MOV	r5,r4,ASR#16
	MOV	r11,r10,ASR#16
	MUL	r11,r5,r11	; r11= *(ptr_h1+1) * *(ptr_h1+1)
	MOV	r4,r4,LSL#16
	MOV	r4,r4,ASR#16
	MOV	r10,r10,LSL#16
	MOV	r10,r10,ASR#16
	ADDS	r3,r3,r11,LSL#1
	MUL	r11,r4,r10	; r11= *ptr_h1 * *ptr_h1
	RSCVS	r3,r7,#1<<31
	ADDS	r3,r3,r11,LSL#1
	RSCVS	r3,r7,#1<<31
	MOV	r11,r3,ASR#16

	STRB	r11,[r2,#-192*2]!
	MOV	r11,r11,ASR#8
	STRB	r11,[r2,#1]

	ADD	r2,r2,r8,LSL#3+1
	ADD	r2,r2,r8,LSL#1
	SUB	r2,r2,#8*2		; r2 = rri0i0 += (k<<3) + k -8
	ADD	r9,r9,r8,LSL#3+1
	ADD	r9,r9,r8,LSL#1
	SUB	r9,r9,#2
	SUB	r0,r0,r8,LSL#3+1
	;SUB	r0,r0,#6*2	SEE ABOVE
	SUB	r1,r1,r8,LSL#3+1
	;ADD	r1,r1,#2*2	SEE ABOVE

	MOV	r3,#0			; r3 = cor = 0
	SUBS	r8,r8,#1
	BGT	ch_lp5
	BEQ	ch_back1

        Return  "r4-r11"

	END
