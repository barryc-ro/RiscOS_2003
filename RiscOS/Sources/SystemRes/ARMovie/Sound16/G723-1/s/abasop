	AREA	|C$code|,CODE,READONLY

        GET     Hdr:ListOpts
        GET     Hdr:APCS.<APCS>
        GET     Hdr:Macros

	EXPORT	norm_l
	EXPORT	norm_s
	EXPORT	div_l
	EXPORT	div_s
	EXPORT	L_add
	EXPORT	L_sub
	EXPORT	add
	EXPORT	sub
	EXPORT	mult
	EXPORT	L_mult
	;EXPORT	shl
	EXPORT	shr
	EXPORT	round
	EXPORT	L_mac
	EXPORT	L_msu
	EXPORT	mult_r
	EXPORT	L_shl
	EXPORT	L_shr
	EXPORT	L_mls
	EXPORT	Sqrt_lbc
	EXPORT	Comp_En
	; norm_l does not touch r3 (or r12)! This is relied on.
norm_l
	SUBS	r1,r0,#0	; if ((r0 == 0)
	CMNNE	r0,#0		;               || (r0 == -1))
	ANDEQ	r0,r0,#31	;   return (r0 & 31);
        Return  , LinkNotStacked, EQ
	;MVNLT	r0,r0		; if (r0 < -1) r0 = ~r0;

	MOV	r0,#0
	MVN	r2,#0
	TST	r1,r2,LSL#16	; if (top 16 bits of r0 are clear)
	ADDEQ	r0,r0,#16
	ORREQ	r1,r1,r1,LSL#16
	TST	r1,r2,LSL#24	; if (top 8 bits of r0 are clear)
	ADDEQ	r0,r0,#8
	ORREQ	r1,r1,r1,LSL#8
	TST	r1,r2,LSL#28	; if (top 4 bits of r0 are clear)
	ADDEQ	r0,r0,#4
	ORREQ	r1,r1,r1,LSL#4
	TST	r1,r2,LSL#30	; if (top 2 bits of r0 are clear)
	ADDEQ	r0,r0,#2
	ORREQ	r1,r1,r1,LSL#2
	TST	r1,r2,LSL#31	; if (top bit of r0 is clear)
	SUBNE	r0,r0,#1

        Return  , LinkNotStacked
norm_s
	ORR	r0,r0,r0,LSL#16
	SUBS	r1,r0,#0	; if ((r0 == 0)
	CMNNE	r0,#0		;               || (r0 == &FFFFFFFF))
	ANDEQ	r0,r0,#15	; r0 &= 15
        Return  , LinkNotStacked
	;MVNLT	r0,r0		; if (r0 < 0) r0 ~= r0

	MOV	r0,#0
	TST	r1,#&FF000000	; if (top 8 bits of r0 are clear)
	ADDEQ	r0,r0,#8
	ORREQ	r1,r1,r1,LSL#8
	TST	r1,#&F0000000	; if (top 4 bits of r0 are clear)
	ADDEQ	r0,r0,#4
	ORREQ	r1,r1,r1,LSL#4
	TST	r1,#&C0000000	; if (top 2 bits of r0 are clear)
	ADDEQ	r0,r0,#2
	ORREQ	r1,r1,r1,LSL#2
	TST	r1,#&80000000	; if (top bit of r0 is clear)
	SUBNE	r0,r0,#1

        Return  , LinkNotStacked
div_l
	; r0 = Word32 num	r0 >= 0
	; r1 = Word16 den	r1 >  0
	CMP	r0,r1,LSL#16	; if (num >= den)
	MOVGE	r0,#&8000	;   return MAX_16;
	SUBGE	r0,r0,#1
        Return  , LinkNotStacked, GE
	MOV	r1,r1,LSL#15	; r1 = L_deposit_h(den)>>1
	MOV	r2,r0,LSR#1	; r2 = num >> 1
	MOV	r0,#0
	MOV	r3,#15
	MOV	r12,#0
dl_lp
	RSBS	r2,r1,r2,LSL#1	; if (num >= den) {
	ADDLT	r2,r2,r1	;   num -= den
	ADC	r0,r12,r0,LSL#1	;   var_out += 1;
				; }
				; var_out <<= 1
	SUBNES	r3,r3,#1
	BGT	dl_lp
	MOV	r0,r0,LSL r3
	CMP	r3,#0
	MOVNE	r0,r0,LSR#1

        Return  , LinkNotStacked
div_s
	; r0 = Word16 num	r0 >= 0		r0 < r1
	; r1 = Word16 den	r1 >  0
	CMP	r0,r1		; if (r0 == r1)
	MOVEQ	r0,#&8000	;   return MAX_16;
	SUBEQ	r0,r0,#1
	CMPNE	r0,#0		; if (r0 == 0)
        Return  , LinkNotStacked, EQ ; return 0

	MOV	r2,r0
	MOV	r0,#0
	MOV	r3,#15
	MOV	r12,#0
	; r0 = var_out
	; r1 = den
	; r2 = num
	; r3 = iterations to go
ds_lp
	RSBS	r2,r1,r2,LSL#1	; num <<=1
	ADDLT	r2,r2,r1	; if (num >= den) {
				;   num -= den
	ADC	r0,r12,r0,LSL#1	;   var_out ++
				; }
				; var_out <<= 1
	SUBNES	r3,r3,#1
	BGT	ds_lp
	MOV	r0,r0,LSL r3
	CMP	r3,#0
	MOVNE	r0,r0,LSR#1

        Return  , LinkNotStacked
L_add
	ADDS	r0,r0,r1
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
        Return  , LinkNotStacked
L_sub
	SUBS	r0,r0,r1
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
        Return  , LinkNotStacked
add
	MOV	r0,r0,LSL#16
	ADDS	r0,r0,r1,LSL#16
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
	MOV	r0,r0,ASR#16
        Return  , LinkNotStacked
sub
	MOV	r0,r0,LSL#16
	SUBS	r0,r0,r1,LSL#16
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
	MOV	r0,r0,ASR#16
        Return  , LinkNotStacked
mult
	MUL	r0,r1,r0
	MVN	r1,#0
	MOV	r0,r0,ASR#15
	CMP	r0,r1,LSR#17
	MOVGT	r0,r1,LSR#17
	CMP	r0,r1,LSL#15
	MOVLT	r0,r1,LSL#15
        Return  , LinkNotStacked
L_mult
	MUL	r0,r1,r0
	MVN	r1,#0
	MOVS	r0,r0,LSL#1
	MOVVS	r0,r1,ASR#1
        Return  , LinkNotStacked
shr
	RSBS	r2,r1,#0
	MOVGT	r0,r0,LSL r2
	MOVLT	r0,r0,ASR r1
        Return  , LinkNotStacked
round
	ADDS	r0,r0,#&8000
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
	MOV	r0,r0,ASR#16
        Return  , LinkNotStacked
L_mac
	MUL	r1,r2,r1
	MVN	r2,#0
	MOVS	r1,r1,LSL#1
	MOVVS	r1,r2,ASR#1
	ADDS	r0,r0,r1
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
        Return  , LinkNotStacked
L_msu
	MUL	r1,r2,r1
	MVN	r2,#0
	MOVS	r1,r1,LSL#1
	MOVVS	r1,r2,ASR#1
	SUBS	r0,r0,r1
	MOVVS	r0,#&80000000
	SBCVS	r0,r0,#0
        Return  , LinkNotStacked
mult_r
	MUL	r0,r1,r0
	MVN	r1,#0
	ADD	r0,r0,#16384
	MOV	r0,r0,ASR#15
	CMP	r0,r1,LSR#17
	MOVGT	r0,r1,LSR#17
	CMP	r0,r1,LSL#15
	MOVLT	r0,r1,LSL#15
        Return  , LinkNotStacked
L_shl
	; r0 = L_var1
	; r1 = L_var2
	; r3 corrupted
	; r2,r12 preserved
	; return L_var1 << L_var2
	RSBS	r1,r1,#0
	BGT	L_shr
        Return  , LinkNotStacked, EQ
	MOV	r3,#1<<31
L_shl_lp
	ADDS	r0,r0,r0
	SBCVS	r0,r3,#0
	ADDS	r1,r1,#1
	BLT	L_shl_lp
        Return  , LinkNotStacked
L_shr
	; r0 = L_var1
	; r1 = L_var2
	; r3 corrupted
	; r2,r12 preserved
	; return Lvar1 >> L_var2
	CMP	r1,#0
	RSBLT	r1,r1,#0
	BLT	L_shl
	CMP	r1,#32
	MOVGT	r1,#32
	MOV	r0,r0,ASR r1
        Return  , LinkNotStacked
L_mls
	; r0 = Lv
	; r1 = v
	MOV	r2,r0,LSL#16	; r2 = (Temp = Lv & 0x0000ffff)<<16
	MOV	r2,r2,LSR#16
	MUL	r2,r1,r2
	MOV	r0,r0,ASR#16
	MUL	r0,r1,r0
	MOV	r3,#1<<31
	ADDS	r0,r0,r0
	ADDS	r0,r0,r2,ASR#15
	SBCVS	r0,r3,#0
        Return  , LinkNotStacked
Sqrt_lbc
	MOV	r2,#0		; r2 = Rez = 0
	MOV	r1,#&4000	; r1 = Exp = &4000
	MVN	r3,#13		; r3 = -14
sqrt_lbc_lp
	ADD	r2,r2,r1
	MOV	r1,r1,ASR#1
	MUL	r12,r2,r2
	CMP	r0,r12,LSL#1
	SUBLT	r2,r2,r1,ASL#1
	ADDS	r3,r3,#1
	BLT	sqrt_lbc_lp
	MOV	r0,r2
        Return  , LinkNotStacked
Comp_En
	; r0 = *Dpnt
        FunctionEntry
	MOV	r14,#0
	MOV	r2,#30
ce_lp
	LDR	r3,[r0],#4
	; Stall
	MOV	r12,r3,LSL#16
	MOV	r12,r12,ASR#16+2
	MUL	r1,r12,r12
	MOV	r3,r3,ASR#16+2
	MLA	r1,r3,r3,r1
	MOV	r12,#1<<31
	ADDS	r14,r14,r1,LSL#1
	SBCVS	r14,r12,#0
	SUBS	r2,r2,#1
	BGT	ce_lp
	MOV	r0,r14
        Return

	END
