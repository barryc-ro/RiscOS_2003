;**************************************************************************
;
;  File:        s.DecdBody
;
;  Description: Assembler veneer code body for Acorn Replay sound decomprssr
;               g721 version
;
;  Version:     1.0 11 Nov 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************

; requires stereo to be defined

	ASSERT	:DEF: stereo

	AREA	|C$$code|, CODE, READONLY

; EXPORT the functions herein

	EXPORT	|decode_init1|
	EXPORT	|decode_init2|
	EXPORT	|decode_decompress|

;**************************************************************************
;* Set up functions to call

	IMPORT	pre_init		; decode samples in g723_1 format
	IMPORT	init			; find size of necessary workspace
	IMPORT	decompress		; initialise workspace

;**************************************************************************
;* Main code body
;**************************************************************************

;**************************************************************************
;* Initialisation

decode_init1
	; initialise for encoding
	;   on entry:
	;     r0: sample frequency in Hz for information
	;     r1: (parameter string; ignored)
        ;   returns
        ;     r0: workspace size required
	;     r1: zero or pointer to error block
	;     r2: frame size of compression type

        str     lr, [r13, #-4]!

	BL	pre_init

        ldr     pc, [r13], #4

;**************************************************************************

decode_init2
	; initialise workspace
	;   on entry
	;     r0: sample frequency in Hz for information
	;     r1: pointer to workspace
	;     r2: size of workspace
	;   returns
	;     r0: either 0 or pointer to error block

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	bl	init			; initialise workspace

	mov	r0, #0			; return success
        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(

;**************************************************************************
;* Decompression
;**************************************************************************

decode_decompress
	; compress a frame
	;   on entry
	;     r0: current bit offset in input buffer (updated on exit)
	;     r1: pointer to input buffer
	;     r2: number of samples (usually the input frame sample size)
	;     r3: pointer to output samples
	;     r4: pointer to workspace
	;     r5: true (non zero) if frame is start of chunk,
	;         false otherwise
	;   returns
	;     r0: new current bit offset in output buffer ???????????????
	;     r1: either 0 or pointer to error block ????????????????????
	;     r2: actual number of samples produced

        str     lr, [r13, #-4]!
        mrs     lr, cpsr
        str     lr, [r13, #-4]!

	STMFD	r13!,{r1-r12}
	MOV	r6,r13		; r6 points to returned r1
	ADD	r7,r13,#4	; r7 points to returned r2
	STMFD	r13!,{r4-r7}	; Stack
	BL	decompress
	ADD	r13,r13,#4*4	; Unstack
	LDMFD	r13!,{r1-r12}

        ldr     lr, [r13], #4
        msr     cpsr_f, lr              ; have to preserve flags across call
        ldr     pc, [r13], #4           ; for backwards compatibility :-(

;**************************************************************************
;* End of file
;**************************************************************************

	END
