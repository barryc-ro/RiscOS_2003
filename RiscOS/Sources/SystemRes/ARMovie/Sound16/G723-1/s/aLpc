	AREA	|C$code|,CODE,READONLY

        GET     Hdr:ListOpts
        GET     Hdr:APCS.<APCS>
        GET     Hdr:Macros

	; Global vars
	IMPORT	CodStat
	IMPORT	DecStat
	; Sub Routines
	IMPORT	Vec_Norm2
	IMPORT	L_shr
	IMPORT	div_l

	EXPORT	Sub_Ring
	EXPORT	Synt
	EXPORT	Spf
Synt
	; r0 = Word16 *Dpnt
	; r1 = Word32 *Lpc
	; r2 = usepf
        FunctionEntry "r4-r5,r11"

	LDR	r3,DecStatPtr	; r3 = DecStat.SyntIirDl
	MVN	r4,#59		; r4 = -60
	ADD	r3,r3,#60*4	; r3 = sid
	MOV	r11,#1<<31
slp
	LDR	r12,[r0]
	ADD	r4,r4,#10*64
	MOV	r12,r12,LSL#16	; r12 = (*Dpnt<<16)
	MOV	r12,r12,ASR#3	; r12 = Acc0 >= 3
slp1
	LDR	r14,[r1],#4
	LDR	r5,[r3],#4
	; Stall
	MUL	r14,r5,r14
	; Stall
	ADDS	r12,r12,r14,LSL#1
	SBCVS	r12,r11,#0
	SUBS	r4,r4,#1*64
	BGT	slp1

	ADDS	r12,r12,r12
	ADDVCS	r12,r12,r12
	ADDVCS	r12,r12,#&8000
	SBCVS	r12,r11,#0	; r12 = L_add(L_shl(Acc0, 2), 0x8000)
	MOV	r5,r12,ASR#16
	STR	r5,[r3,#-11*4]!	; *sid = round(Acc0<<2)

	SUB	r1,r1,#10*4

	MOV	r5,r5,LSL#16
	CMP	r2,#1
	ADDNES	r5,r5,r5
	SBCVS	r5,r11,#0
	MOV	r5,r5,ASR#16
	STRB	r5,[r0],#1
	MOV	r5,r5,ASR#8
	STRB	r5,[r0],#1

	ADDS	r4,r4,#1
	BLT	slp
	MOV	r4,#10
slp2
	LDR	r0,[r3],#4
	SUBS	r4,r4,#1
	STR	r0,[r3,#59*4]
	BGT	slp2

        Return  "r4-r5,r11"
Sub_Ring
	; r0 = Word16 *Dpnt
	; r1 = Word32 *QntLpc
	; r2 = Word32 *PerLpc
	; r3 = Word32 *PrevErr
        FunctionEntry "r4-r11"
	; r4 = PWDEF   Pw
	LDR	r4,[r13,#9*4]
	ADD	r3,r3,#145*4		; r3 = PrevErr = PrevErr + 145
	ADR	r5,Temp+145*4		; r5 = TempPtr = Temp + 145
	MOV	r7,r4,LSL#16		; r7 = i = Pw.Indx<<16
	MOV	r4,r4,ASR#16		; r4 = Pw.Gain
	SUB	r5,r5,r7,ASR#14		; r5 = TempPtr = Temp    + 145 - Pw.Indx
	SUB	r3,r3,r7,ASR#14		; r3 = PrevErr = PrevErr + 145 - Pw.Indx
	LDR	r9,CodStatPtr		; r9 = &CodStat = &CodStat.RingFirDl
	RSBS	r6,r7,#0		; r6 = -Pw.Indx
	BGE	srover1			; for (i = Pw.Indx; i>0; i--) {
srlp
	LDR	r8,[r3],#4		;                *PrevErr++
	SUBS	r7,r7,#&10000
	STR	r8,[r5],#4		;   *TempPtr++ =
	BGT	srlp			; }
srover1
	; scratch r3,r8
	ADD	r9,r9,#60*4		; r9 = FirDlPtr = CodStat.RingFirDl + 60
	MVN	r10,#59			; r10= i = -60
srlp4
	MOV	r11,#&1000		; r11= Acc0
	ADD	r10,r10,#10*64		; r10= 10*64
        MOV	r8,#0			; r8 = Acc1 = 0
srlp2
	LDR	r12,[r1],#4		; r12= *QntLpc++
	LDR	r14,[r9],#4		; r9 = *FirDlPtr++
	LDR	r7,[r2],#4		; r7 = *PerLpc++
	MLA	r11,r12,r14,r11		; Acc0 += *QntLpc++ * *FirDlPtr++
	SUBS	r10,r10,#1*64
	MLA	r8,r7,r14,r8		; Acc1 += *PerLpc++ * *FirDlPtr++
	BGT	srlp2
	; So...
	; r1 = QntLpc + 10*4
	; r9 = FirDlPtr + 10*4
	; r8 =        SUM(*PerLpc * *FirDlPtr)
	; r11= Acc0 = SUM(*QntLpc * *FirDlPtr)
	SUB	r1,r1,#10*4
	MOV	r7,r11,ASR#13		; Acc1 = Acc0>>13
	STR	r7,[r9,#-11*4]		; *(FirDlPtr-11) = Acc1
	SUB	r11,r11,r8		; Acc0 = SUM(*QntLpc * *FirDlPtr) -
					;	 SUM(*PerLpc * *FirDlPtr)
	ADD	r10,r10,#10*64
	ADD	r9,r9,#60*4		; r9 = FirDlPtr
srlp3
	LDR	r14,[r9],#4		; r9 = *IirDlPtr++
	LDR	r7,[r2],#4		; r7 = *PerLpc++
	SUBS	r10,r10,#1*64
	MLA	r11,r7,r14,r11		; Acc0 += *PerLpc++ * *IirDlPtr++
	BGT	srlp3
	; So...
	; r9 = IirDlPtr + 10*4
	; r8 = Acc0 = SUM(*QntLpc * *FirDlPtr) - SUM(*PerLpc * *FirDlPtr) +
	;						SUM(*PerLpc * *IirDlPtr)
	MOV	r7,r11,ASR#13		; Acc1 = Acc0>>13
	STR	r7,[r9,#-11*4]		; *(IirDlPtr-11) = Acc1
	STR	r7,[r5]			; *TempPtr = Acc1
	SUB	r9,r9,#(70+11)*4	; r9 = FirDlPtr

	LDR	r8,[r0]
	SUB	r2,r2,#20*4		; r2 = PerLpc -= 20
	MOV	r8,r8,LSL#16
	SUBS	r8,r8,r7,LSL#16
	MOVVS	r8,#1<<31
	; r6 = -Pw.Indx<<16
	; r4 = Pw.Gain
	LDR	r7,[r5,r6,ASR#14]	; r7 = TempPtr[-Pw.Indx]
	SBCVS	r8,r8,#0		; r8 = (sub(*Dpnt, IirDlPtr[0]))<<16
	MUL	r7,r4,r7		; r7 = Pw.Gain * (TempPtr++)[-Pw.Indx]
	ADD	r5,r5,#4
	ADDS	r8,r8,r7,LSL#1
	ADDVCS	r8,r8,#&8000
	MOVVS	r8,#1<<31
	SBCVS	r8,r8,#0
	MOV	r8,r8,ASR#16
	STRB	r8,[r0],#1
	MOV	r8,r8,ASR#8
	STRB	r8,[r0],#1

	ADDS	r10,r10,#1
	BLT	srlp4

        Return  "r4-r11"
CodStatPtr
	DCD	CodStat
DecStatPtr
	DCD	DecStat
FirDl
	% 70*4
IirDl
	% 70*4
Temp
	% 205*4
PostFiltZeroTable
	DCD	21299 + ( 24576 << 16)
	DCD	13844 + ( 18432 << 16)
	DCD	8999  + ( 13824 << 16)
	DCD	5849  + ( 10368 << 16)
	DCD	3802  + (  7776 << 16)
	DCD	2471  + (  5832 << 16)
	DCD	1606  + (  4374 << 16)
	DCD	1044  + (  3281 << 16)
	DCD	679   + (  2460 << 16)
	DCD	441   + (  1845 << 16)
Spf
	; r0 = Word16 *Tv
	; r1 = Word32 *Lpc
        FunctionEntry "r4-r11"

	MOV	r10,#1<<31

	LDR	r5,DecStatPtr
	ADR	r6,Temp+205*4-60*4	; r6 = TmpVect
	SUB	r4,r6,#20*4		; r4 = fc = ic-10
	ADD	r5,r5,#(70+60)*4	; r5 = pfd = DecStat.PostFirDl + 60
					;          = pid - 70
	ADR	r14,PostFiltZeroTable
	MOV	r12,#10
	MOV	r9,#&4000
spf_lp1
	LDR	r3,[r14],#4
	LDR	r2,[r1],#4
	MOV	r7,r3,ASR#16
	MLA	r8,r2,r7,r9	; r8 = *Lpc * *PostFiltPoleTable
	BIC	r3,r3,r7,LSL#16
	MLA	r7,r2,r3,r9	; r7 = *Lpc * *PostFiltZeroTable
	MOV	r8,r8,ASR#15
	STR	r8,[r4,#10*4]	; *ic= *Lpc * *PostFiltPoleTable
	MOV	r7,r7,ASR#15
	STR	r7,[r4],#4	; *fd= *Lpc * *PostFiltZeroTable
	SUBS	r12,r12,#1
	BGT	spf_lp1

	MOV	r12,#60
spf_lp2
	LDR	r3,[r0],#4
	SUBS	r12,r12,#2
	MOV	r7,r3,ASR#16
	MOV	r3,r3,LSL#16
	MOV	r3,r3,ASR#16
	STMIA	r6!,{r3,r7}
	BGT	spf_lp2

	SUB	r9,r0,#60*2
	SUBS	r6,r6,#60*4
	MOV	r0,r6
	MOV	r1,#60
	BL	Vec_Norm2
	; r0 = Exp
	; scratch r1,r2,r3,r7,r8,r12,r14
	; r4 = fc + 10
	; r5 = pfd
	; r6 = TmpVect
	; r9 = Tv

	; Now we compute the autocorrelation cofficients...
	MOV	r12,#0		; r12= Acc0 = 0
	MOV	r2,#0		; r2 = Acc1 = 0
	MOV	r3,#0		; r3 = *TmpVect_old
	MOV	r1,#60
spf_lp3
	LDR	r14,[r6],#4	; r14 = *TmpVect
	SUBS	r1,r1,#1
	MLA	r12,r3,r14,r12	; r12= Acc0 += *TmpVect * *TmpVect_old
	MOV	r3,r14
	MLA	r2,r14,r14,r2	; r2 = Acc1 += *TmpVect * *TmpVect
	BGT	spf_lp3

	; r0 = Exp
	; r2 = Acc1
	; scratch r1,r3,r6,r7,r8,r14
	; r4 = fc + 10
	; r5 = pfd
	; r9 = Tv
	; r12= Acc0
	MOV	r0,r0,LSL#1
	ADD	r1,r0,#3
	MOV	r0,r2
	; RELY ON THE NON-APCS NATURE OF L_shr (r2,r12 preserved)
	BL	L_shr
	; r0 = Sen
	; r2 = Acc1
	; scratch r1,r3,r6,r7,r8,r14
	; r4 = fc + 10
	; r5 = pfd
	; r9 = Tv
	; r12= Acc0
	LDR	r7,DecStatPtr
	MOV	r6,r0	; r6 = Sen
	LDR	r8,[r7,#(70+70+70)*4]	; r7 = DecStat.Park
	MOVS	r0,r2,ASR#15	; r0 = Tmp = Acc1>>15
	BEQ	spf_over
	MOV	r1,r0		; r1 = r0 = Tmp
	CMP	r12,#1<<31
	ADDEQ	r12,r12,#1
	SUBS	r0,r12,#0	; r0 = Acc0
	RSBLT	r0,r0,#0	; r0 = Acc0 = L_abs(Acc0)
      [ {CONFIG}<>26
        MOV     r11,r0
      ]
	BL	div_l		; r0 = Tmp = div_l(Acc0, Tmp)
      [ {CONFIG}<>26
        CMP     r11,#0
      ]
	RSBLT	r0,r0,#0	; if (Acc1 < 0) Tmp = -Tmp;
spf_over
	; r0 = Tmp
	; scratch r1,r3,r6,r7,r8,r14
	; r4 = fc + 10
	; r5 = pfd
	; r6 = Sen
	; r9 = Tv
	SUB	r0,r0,r8	; r0 = Tmp - DecStat.Park
	ADD	r8,r0,r8,LSL#2	; r8 = Acc0 = (DecStat.Park<<2)+Tmp-DecStat.Park
	ADD	r8,r8,#2
	MOV	r8,r8,ASR#2
	STR	r8,[r7,#(70+70+70)*4]	; DecStat.Park = r8
	RSB	r8,r8,#0
	MOV	r8,r8,ASR#3
	MOV	r8,r8,LSL#2	; r8 = Tmp
	; scratch r0,r1,r2,r3,r7,r12,r14
	; r4 = fc + 10
	; r5 = pfd
	; r6 = Sen
	; r8 = Tmp
	; r9 = Tv
	MOV	r12,#60
	ADD	r4,r4,#10*4
	LDR	r11,[r5,#70*4]
spf_lp4
	LDR	r0,[r9]
	SUB	r4,r4,#20*4	; fc -= 10
	MOV	r0,r0,LSL#16	; r0 = *Tv<<16
	MOV	r1,r0,ASR#3	; r1 = Acc0 = (*Tv<<13)
	RSB	r1,r1,#0
	MOV	r2,#10
spf_lp5
	LDR	r3,[r4],#4
	LDR	r14,[r5],#4
	SUBS	r2,r2,#1
	MLA	r1,r3,r14,r1
	BGT	spf_lp5
	RSB	r1,r1,#0
	MOV	r0,r0,ASR#16
	STR	r0,[r5,#-11*4]
	ADD	r5,r5,#60*4

	MOV	r2,#10
spf_lp6
	LDR	r3,[r4],#4
	LDR	r14,[r5],#4
	SUBS	r2,r2,#1
	MLA	r1,r3,r14,r1
	BGT	spf_lp6
	SUB	r5,r5,#(70+11)*4

	ADDS	r1,r1,r1
	ADDVCS	r1,r1,r1
	ADDVCS	r1,r1,r1
	SBCVS	r1,r10,#0		; r1 = Acc0 + &8000
	ADDS	r1,r1,#&8000
	SBCVS	r1,r10,#0		; r1 = Acc0 + &8000
	;LDR	r3,[r5,#70*4+4]
	MOV	r2,r1,ASR#16
	MUL	r3,r8,r11	; r3 = Tmp * pid[1]
	STR	r2,[r5,#70*4]
        MOV	r11,r2

	ADDS	r1,r1,r3,LSL#1	; r1 = Acc0 + &8000 + pid[1] * Tmp * 2
	SBCVS	r1,r10,#0		; r1 = Acc0 + &8000
	MOV	r1,r1,ASR#16
	STRB	r1,[r9],#1
	MOV	r1,r1,ASR#8
	STRB	r1,[r9],#1
	SUBS	r12,r12,#1
	BGT	spf_lp4
	MOV	r12,#10
spf_lp7
	LDR	r1,[r5,#70*4]
	LDR	r0,[r5],#4
	STR	r1,[r5,#(70+60-1)*4]
	STR	r0,[r5,#(60-1)*4]
	SUBS	r12,r12,#1
	BGT	spf_lp7
	MOV	r0,r6

        Return  "r4-r11"

	END
