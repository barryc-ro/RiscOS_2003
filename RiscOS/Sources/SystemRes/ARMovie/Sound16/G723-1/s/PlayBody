;**************************************************************************
;
;  File:        s.Decompress.g721
;
;  Description: g721 decompression bobbins
;
;  Version:     0.0 11 Nov 1997
;
;  Author:      Pete Goodliffe (pgoodliffe@acorn.nom)
;
;  Modification History:
;
;    Date         Name                  Description
;    ----------------------------------------------------------------------
;
;**************************************************************************
;  This is included via a GET directive and is not assembled as is
;**************************************************************************

; requires stereo to be defined

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _CodeStart              ; to pull in veneer code from library
	EXPORT	decompress		; decompression entry point
	IMPORT	|__RelocCode|		; reloc code from module linkage

	GBLS	INIT
	GBLS	DECODER
	GBLA	SSIZE			; size of state structure
	GBLA	CFS			; compressed frame size (bytes)
	GBLA	DFS			; decompressed frame size (bytes)

	IMPORT	WrapperInit		; init workspace
	IMPORT	WrapperDecompress	; the g721 library decompressor
INIT	SETS	"WrapperInit"
DECODER	SETS	"WrapperDecompress"
CFS	SETA	1
DFS	SETA	2*2
	!	0, "Mono g723_1 playback"

;**************************************************************************
; g723_1 decompression code

decompress

	; decompress a chunk of g723_1 sound data
	; IN:  r0 = Source
	;      r1 = Length of source in bytes
	;      r3 = Destination
	; OUT: r1 = length of output produced in bytes
	;      all registers preserved

	stmdb	r13!, {r0-r12,r14}

	; relocation initalisation, performed once at first call
	ldr	r4, hasinit
	cmp	r4, #0
	beq	init
init_ret

	mov	r2,r3		; r2 = destination
	ADD	r3,r13,#4	; r3 points to r1 on stack
	; entry to WrapperDecompress
	;   r0 - source pointer
	;   r1 - source length
	;   r2 - destination pointer
	;   r3 - pointer to store for output_len
	bl	$DECODER

	ldmia	r13!, {r0-r12,pc}


;**************************************************************************
; init
;     this sorts out the C code that has to be reloated prior to use
;     init must be called once before the C code is called

hasinit
	DCD	0				; has init occurred?

init
	stmfd	r13!, {r0-r12}

	bl	|__RelocCode|			; relocate this code
	mov	r0,#0				; synchronise code areas
	swi	&2006e				;   (don't confuse SA)

	mov	r4, #1
	str	r4, hasinit

	bl	$INIT

	ldmfd	r13!, {r0-r12}
	b	init_ret


;**************************************************************************

	END
