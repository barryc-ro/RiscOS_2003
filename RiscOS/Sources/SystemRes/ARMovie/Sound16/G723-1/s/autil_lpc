	AREA	|C$code|,CODE,READONLY

        GET     Hdr:ListOpts
        GET     Hdr:APCS.<APCS>
        GET     Hdr:Macros

	EXPORT	Vec_Norm
	EXPORT	Vec_Norm2

Vec_Norm2
	; r0 = Word32 *Vect
	; r1 = Word32  Len
	MOV	r2,#0
	MOV	r3,r1
vn2_lp
	LDR	r12,[r0],#4
	; Stall
	MOVS	r12,r12,LSL#16
	RSBMI	r12,r12,#0
	CMP	r12,#1<<31
	SUBEQ	r12,r12,#1
	ORR	r2,r2,r12
	SUBS	r3,r3,#1
	BGT	vn2_lp

	SUB	r3,r0,r1,LSL#2

	MVN	r0,#2
	CMP	r2,#0
	BEQ	vn2_over

	TST	r2,#&FF000000	; if (top 8 bits of r0 are clear)
	ADDEQ	r0,r0,#8
	ORREQ	r2,r2,r2,LSL#8
	TST	r2,#&F0000000	; if (top 4 bits of r0 are clear)
	ADDEQ	r0,r0,#4
	ORREQ	r2,r2,r2,LSL#4
	TST	r2,#&C0000000	; if (top 2 bits of r0 are clear)
	ADDEQ	r0,r0,#2
	ORREQ	r2,r2,r2,LSL#2
	TST	r2,#&80000000	; if (top bit of r0 is clear)
	SUBNE	r0,r0,#1
vn2_over
	; r0 = Rez -3
	CMP	r0,#0
        Return  , LinkNotStacked, EQ
	BLT	vn2_down
	CMP	r0,#12
	BGE	vn2_max
vn2_lp2
	LDR	r12,[r3]
	SUBS	r1,r1,#1
	MOV	r12,r12,LSL r0
	STR	r12,[r3],#4
	BGT	vn2_lp2
        Return  , LinkNotStacked
vn2_down
	RSB	r0,r0,#0
vn2_lp3
	LDR	r12,[r3]
	SUBS	r1,r1,#1
	MOV	r12,r12,ASR r0
	STR	r12,[r3],#4
	BGT	vn2_lp3
	RSB	r0,r0,#0
        Return  , LinkNotStacked
vn2_max
	LDR	r12,[r3]
	SUBS	r1,r1,#1
	RSB	r12,r12,r12,ASL#13
	STR	r12,[r3],#4
	BGT	vn2_max
        Return  , LinkNotStacked

Vec_Norm
	; Assumes: Len is ODD and greater than 0
	; r0 = Word16 *Vect
	; r1 = Word32  Len
	MOV	r2,#0
	SUB	r1,r1,#1
	SUB	r1,r1,r1,LSL#16
vn_lp
	LDR	r12,[r0],#4
	; Stall
	MOVS	r3,r12,LSL#16
	RSBMI	r3,r3,#0
	CMP	r3,#1<<31
	SUBEQ	r3,r3,#1
	ORR	r2,r2,r3
	MOV	r12,r12,ASR#16
	MOVS	r12,r12,LSL#16
	RSBMI	r12,r12,#0
	CMP	r12,#1<<31
	SUBEQ	r12,r12,#1
	ORR	r2,r2,r12
	ADDS	r1,r1,#2<<16
	BLT	vn_lp
	LDR	r12,[r0]
	; Stall
	MOVS	r12,r12,LSL#16
	RSBMI	r12,r12,#0
	CMP	r12,#1<<31
	SUBEQ	r12,r12,#1
	ORR	r2,r2,r12

	SUB	r3,r0,r1,LSL#1

	MVN	r0,#2
	CMP	r2,#0
	BEQ	vn_over

	TST	r2,#&FF000000	; if (top 8 bits of r0 are clear)
	ADDEQ	r0,r0,#8
	ORREQ	r2,r2,r2,LSL#8
	TST	r2,#&F0000000	; if (top 4 bits of r0 are clear)
	ADDEQ	r0,r0,#4
	ORREQ	r2,r2,r2,LSL#4
	TST	r2,#&C0000000	; if (top 2 bits of r0 are clear)
	ADDEQ	r0,r0,#2
	ORREQ	r2,r2,r2,LSL#2
	TST	r2,#&80000000	; if (top bit of r0 is clear)
	SUBNE	r0,r0,#1
vn_over
	; r0 = Rez -3
	CMP	r0,#0
        Return  , LinkNotStacked, EQ
	BLT	vn_down
	CMP	r0,#12
	BGE	vn_max
	; So we have to shift left by r0 bits
	MOV	r2,#1<<16
	RSB	r2,r2,r2,LSL r0	; r2 = <r0 1 bits><16 0 bits>
vn_lp2
	LDR	r12,[r3]
	SUBS	r1,r1,#2
	MOV	r12,r12,LSL r0
	BIC	r12,r12,r2
	STR	r12,[r3],#4
	BGT	vn_lp2
	LDR	r12,[r3]
	MOV	r12,r12,LSL r0
	STRB	r12,[r3],#1
	MOV	r12,r12,ASR#8
	STRB	r12,[r3],#1
        Return  , LinkNotStacked
vn_down
	RSB	r0,r0,#0
	MOV	r2,#1<<16
	RSB	r2,r2,r2,LSL r0	; r2 = <r0 1 bits><16 0 bits>
vn_lp3
	LDR	r12,[r3]
	; Stall
	TST	r12,#1<<15
	ORRNE	r12,r12,r2
	BICEQ	r12,r12,r2
	MOV	r12,r12,ASR r0
	SUBS	r1,r1,#2
	STR	r12,[r3],#4
	BGT	vn_lp3
	LDR	r12,[r3]
	; Stall
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	MOV	r12,r12,ASR r0
	STRB	r12,[r3],#1
	MOV	r12,r12,ASR#8
	STRB	r12,[r3],#1
	RSB	r0,r0,#0
        Return  , LinkNotStacked
vn_max
	ADD	r1,r1,#1
vn_lp4
	LDR	r12,[r3]
	SUBS	r1,r1,#1
	MOV	r12,r12,LSL#16
	MOV	r12,r12,ASR#16
	RSB	r12,r12,r12,ASL#13
	STRB	r12,[r3],#1
	MOV	r12,r12,ASR#8
	STRB	r12,[r3],#1
	BGT	vn_lp4
        Return  , LinkNotStacked

	END
