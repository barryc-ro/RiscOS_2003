

/*___________________________________________________________________________
 |                                                                           |
 |   Constants and Globals                                                   |
 |___________________________________________________________________________|
*/
extern Flag Overflow;
extern Flag Carry;

#define MAX_32 (Word32)0x7fffffff
#define MIN_32 (Word32)0x80000000

#define MAX_16 (Word16)0x7fff
#define MIN_16 (Word16)0x8000

/*___________________________________________________________________________
 |                                                                           |
 |   Operators prototypes                                                    |
 |___________________________________________________________________________|
*/

//#define add(a,b) ((a)+(b))
Word16 add(Word16 var1, Word16 var2);     /* Short add,           1 */

//#define sub(a,b) ((a)-(b))
Word16 sub(Word16 var1, Word16 var2);     /* Short sub,           1 */

#define abs_s(a) (((a) < 0) ? ((a) == (Word16)0x8000 ? MAX_16 : -(a)) : (a))
//Word16 abs_s(Word16 var1);                /* Short abs,           1 */

Word16 shl(Word16 var1, Word16 var2);     /* Short shift left,    1 */
Word16 shr(Word16 var1, Word16 var2);     /* Short shift right,   1 */

//#define mult(a,b) (((a)*(b))>>15)
Word16 mult(Word16 var1, Word16 var2);    /* Short mult,          1 */

Word32 L_mult(Word16 var1, Word16 var2);  /* Long mult,           1 */

//#define negate(a) (-((short)a))
Word16 negate(Word16 var1);               /* Short negate,        1 */

#define extract_h(a) ((Word16)((a)>>16))
//Word16 extract_h(Word32 L_var1);          /* Extract high,        1 */

#define extract_l(a) ((Word16)(a))
//Word16 extract_l(Word32 L_var1);          /* Extract low,         1 */

Word16 round(Word32 L_var1);              /* Round,               1 */
Word32 L_mac(Word32 L_var3, Word16 var1, Word16 var2); /* Mac,    1 */
Word32 L_msu(Word32 L_var3, Word16 var1, Word16 var2); /* Msu,    1 */
//Word32 L_macNs(Word32 L_var3, Word16 var1, Word16 var2);/*[Mac without sat, 1*/
//Word32 L_msuNs(Word32 L_var3, Word16 var1, Word16 var2);/* Msu without sat, 1*/

Word32 L_add(Word32 L_var1, Word32 L_var2);   /* Long add,        2 */
Word32 L_sub(Word32 L_var1, Word32 L_var2);   /* Long sub,        2 */
//Word32 L_add_c(Word32 L_var1, Word32 L_var2); /*Long add with c,  2 */
//Word32 L_sub_c(Word32 L_var1, Word32 L_var2); /*Long sub with c,  2 */

#define L_negate(a) (((a) == MIN_32) ? MAX_32 : -(a))
//Word32 L_negate(Word32 L_var1);               /* Long negate,     2 */

Word16 mult_r(Word16 var1, Word16 var2);  /* Mult with round,     2 */
Word32 L_shl(Word32 L_var1, Word16 var2); /* Long shift left,     2 */
Word32 L_shr(Word32 L_var1, Word16 var2); /* Long shift right,    2 */
Word16 shr_r(Word16 var1, Word16 var2);/* Shift right with round, 2 */
//Word16 mac_r(Word32 L_var3, Word16 var1, Word16 var2);/* Mac with rounding, 2*/
//Word16 msu_r(Word32 L_var3, Word16 var1, Word16 var2);/* Msu with rounding, 2*/

#define L_deposit_h(a) ((Word32)(a)<<16)
//Word32 L_deposit_h(Word16 var1);       /* 16 bit var1 -> MSB,     2 */

#define L_deposit_l(a) ((Word32)(a))
//Word32 L_deposit_l(Word16 var1);       /* 16 bit var1 -> LSB,     2 */

Word32 L_shr_r(Word32 L_var1, Word16 var2);/* Long shift right with round,
 3*/

//#define L_abs(a) (((Word32)(a)) == MIN_32 ? MAX_32 : -((Word32)(a)))
Word32 L_abs(Word32 L_var1);            /* Long abs,              3 */

Word32 L_sat(Word32 L_var1);            /* Long saturation,       4 */

Word16 norm_s(Word16 var1);             /* Short norm,           15 */

Word16 div_s(Word16 var1, Word16 var2); /* Short division,       18 */

Word16 norm_l(Word32 L_var1);           /* Long norm,            30 */


/*
   Additional operators
*/
//#define L_mls(a,b) L_mac( ( ((((Word32)(a)) & 0x0000ffff) * ((Word16)(b)))>>15 ) , (b), (Word16)(((Word32)(a))>>16) )
Word32 L_mls( Word32, Word16 ) ;        /* Wght ?? */
Word16 div_l( Word32, Word16 ) ;
Word16 i_mult(Word16 a, Word16 b);

