#include "typedef.h"
#include "basop.h"
#include "cst_lbc.h"
#include "tab_lbc.h"
#include "coder.h"
#include "decod.h"
#include "exc_lbc.h"
#include "util_lbc.h"
#include "cod_cng.h"
#include "dec_cng.h"
#include "vad.h"


extern Flag  UseHp;
extern Flag  UsePf;
extern Flag  UseVx;
extern enum  Crate    WrkRate;

/* Global variables */
enum  Crate    WrkRate = Rate63 ;

int   PackedFrameSize[2] = {
   24 ,
   20
   } ;

Flag    UseHp = True ;
Flag    UsePf = True ;
Flag    UseVx = False ;

static char invalid_workrate[] = "    Invalid work rate specified in encoder params: Must be 53 or 63";
static char invalid_flag[] = "    Unknown flag supplied in encoder params: v, p, h, r63 or r53 only";

int pre_init(int samp_rate, char *params, int *error_block) {

  *error_block = 0;

  UseHp = True;
  UsePf = True;
  UseVx = False;

  if (params != 0) {
    while(*params != 0) {
      switch (params[0]) {
        case 'r':
          if      ((params[1] == '6') && (params[2] == '3'))
            WrkRate = Rate63;
          else if ((params[1] == '5') && (params[2] == '3'))
            WrkRate = Rate53;
          else {
            *error_block = (int)invalid_workrate;
            return 0;
          }
          params += 2;
          break;
        case ' ':
          break;
        case 'v':
        case 'V':
          UseVx = True;
          break;
        case 'p':
        case 'P':
          UsePf = False;
          break;
        case 'h':
        case 'H':
          UseHp = False;
          break;
        default:
          *error_block = (int)invalid_flag;
          return 0;
          break;
      }
      params++;
    }
  }

  return 0;
}

int init(int samp_rate, char *wksp, int wksp_size) {

  Init_Coder( ) ;
  //Init_Decod( ) ;

  /* Init Comfort Noise Functions */
  if( UseVx ) {
    Init_Vad();
    Init_Cod_Cng( );
  }
  //Init_Dec_Cng( );

  return 0;

}

static char error_unaligned[] = "    Compress called with a non-byte-aligned output block!";

int compress(int bit_offset, char *output, int samp_count, Word16 *samples,
	char *wksp, int start_of_chunk, int *error_ptr, int *enc_count) {

  int info, size;

  *error_ptr = 0;

  if ((bit_offset & 7) != 0) {
    *enc_count = 0;
    *error_ptr = (int)error_unaligned;
    return 0;
  }
  output += (bit_offset>>3);
  if ( WrkRate == Rate53) reset_max_time();
  Coder(samples, output);
  *enc_count = 240;

  info = output[0] & 3;
  switch (info) {
    case 2: {
      size = 4;
      break;
    }
    case 3: {
      size = 1;
      break;
    }
    case 1: {
      size = 20;
      break;
    }
    case 0: {
      size = 24;
      break;
    }
  }

  return bit_offset+size*8;
}
