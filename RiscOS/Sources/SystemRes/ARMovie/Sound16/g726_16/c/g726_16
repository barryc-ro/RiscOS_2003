/***************************************************************************
 *
 *  File:        g72x:h723_24.c
 *
 *  Description: g723_24 codec port
 *
 *  Version:     1.0 16 Nov 1997
 *
 *  Author:      Pete Goodliffe (pgoodliffe@acorn.com)
 *               Modified from source by Sun Microsystems
 *
 *  Modification History:
 *
 *    Date         Name                  Description
 *    ----------------------------------------------------------------------
 *
 ***************************************************************************/

#include "private.h"

////////////////////////////////////////////////////////////////////////////
// Sun Microsystems' & Marc Randolph's code

/* 16kbps version created, used 24kbps code and changing as little as
 * possible.
 * G.726 specs are available from ITU's gopher or WWW site
 * (http://www.itu.ch)
 * If any errors are found, please contact me at mrand@tamu.edu
 *      -Marc Randolph
 */

/*
 * g726_16.c
 *
 * Description:
 *
 * g726_16_encoder(), g726_16_decoder()
 *
 * These routines comprise an implementation of the CCITT G.726 16 Kbps
 * ADPCM coding algorithm.  Essentially, this implementation is identical to
 * the bit level description except for a few deviations which take advantage
 * of workstation attributes, such as hardware 2's complement arithmetic.
 *
 */

/*
 * Maps G.723_16 code word to reconstructed scale factor normalized log
 * magnitude values.  Comes from Table 11/G.726
 */
static short	_dqlntab[4] = { 116, 365, 365, 116};

/* Maps G.723_16 code word to log of scale factor multiplier.
 *
 * _witab[4] is actually {-22 , 439, 439, -22}, but FILTD wants it
 * as WI << 5  (multiplied by 32), so we'll do that here
 */
static short	_witab[4] = {-704, 14048, 14048, -704};

/*
 * Maps G.723_16 code words to a set of values whose long and short
 * term averages are computed and then compared to give an indication
 * how stationary (steady state) the signal is.
 */

/* Comes from FUNCTF */
static short	_fitab[4] = {0, 0xE00, 0xE00, 0};

/* Comes from quantizer decision level tables (Table 7/G.726)
 */
static short qtab_723_16[1] = {261};


/*
 * g726_16_encoder()
 *
 * Encodes a linear PCM, A-law or u-law input sample and returns its 2-bit code.
 * Returns -1 if invalid input coding value.
 */
int
g726_16_encoder(
	int		sl,
	struct g72x_state *state_ptr)
{
	short		sei, sezi, se, sez;	/* ACCUM */
	short		d;			/* SUBTA */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dqsez;			/* ADDC */
	short		dq, i;

	/* linearize input sample to 14-bit PCM */
	sl >>= 2;		/* sl of 14-bit dynamic range */

	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	d = sl - se;			/* d = estimation diff. */

	/* quantize prediction difference d */
	y = step_size(state_ptr);	/* quantizer step size */
	i = quantize(d, y, qtab_723_16, 1);  /* i = ADPCM code */

	      /* Since quantize() only produces a three level output
	       * (1, 2, or 3), we must create the fourth one on our own
	       */
	if (i == 3)                          /* i code for the zero region */
	  if ((d & 0x8000) == 0)             /* If d > 0, i=3 isn't right... */
	    i = 0;

	dq = reconstruct(i & 2, _dqlntab[i], y); /* quantized diff. */

	sr = (dq < 0) ? se - (dq & 0x3FFF) : se + dq; /* reconstructed signal */

	dqsez = sr + sez - se;		/* pole prediction diff. */

	update(2, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

	return (i);
}

/*
 * g726_16_decoder()
 *
 * Decodes a 2-bit CCITT G.723_16 ADPCM code and returns
 * the resulting 16-bit linear PCM, A-law or u-law sample value.
 * -1 is returned if the output coding is unknown.
 */
int
g726_16_decoder(
	int		i,
	struct g72x_state *state_ptr)
{
	short		sezi, sei, sez, se;	/* ACCUM */
	short		y;			/* MIX */
	short		sr;			/* ADDB */
	short		dq;
	short		dqsez;

	i &= 0x03;			/* mask to get proper bits */
	sezi = predictor_zero(state_ptr);
	sez = sezi >> 1;
	sei = sezi + predictor_pole(state_ptr);
	se = sei >> 1;			/* se = estimated signal */

	y = step_size(state_ptr);	/* adaptive quantizer step size */
	dq = reconstruct(i & 0x02, _dqlntab[i], y); /* unquantize pred diff */

	sr = (dq < 0) ? (se - (dq & 0x3FFF)) : (se + dq); /* reconst. signal */

	dqsez = sr - se + sez;			/* pole prediction diff. */

	update(2, y, _witab[i], _fitab[i], dq, sr, dqsez, state_ptr);

	return (sr << 2);	/* sr was of 14-bit dynamic range */

}


////////////////////////////////////////////////////////////////////////////
// mono initialisation

int g726_16_mono_sizeof () {

    return (sizeof(struct g72x_state));

} // end g726_16_mono_sizeof


////////////////////////////////////////////////////////////////////////////

void g726_16_mono_init (void *state) {

    struct g72x_state *s = (struct g72x_state *) state;
    g72x_init_state(s);

} // end g726_16_mono_init


////////////////////////////////////////////////////////////////////////////
// stereo initialisation

int g726_16_stereo_sizeof () {

    return (sizeof(struct g72x_state_stereo));

} // end g726_16_stereo_sizeof


////////////////////////////////////////////////////////////////////////////

void g726_16_stereo_init (void *state) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;
    g726_16_mono_init(&(s->l));
    g726_16_mono_init(&(s->r));

} // end g726_16_stereo_init


////////////////////////////////////////////////////////////////////////////
// g726_16_mono_coder

void g726_16_mono_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    struct g72x_state *s = (struct g72x_state *) state;

    outdata[0]  = g726_16_encoder(indata[0], s);
    outdata[0] |= g726_16_encoder(indata[1], s) << 2;
    outdata[0] |= g726_16_encoder(indata[2], s) << 4;
    outdata[0] |= g726_16_encoder(indata[3], s) << 6;

} // end g726_16_mono_coder


////////////////////////////////////////////////////////////////////////////
// g726_16_stereo_coder

void g726_16_stereo_coder (
    short indata[],
    unsigned char outdata[],
    void *state
) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;

    outdata[0]  = g726_16_encoder(indata[0], &(s->l));
    outdata[0] |= g726_16_encoder(indata[1], &(s->r)) << 2;
    outdata[0] |= g726_16_encoder(indata[2], &(s->l)) << 4;
    outdata[0] |= g726_16_encoder(indata[3], &(s->r)) << 6;
    outdata[1]  = g726_16_encoder(indata[4], &(s->l));
    outdata[1] |= g726_16_encoder(indata[5], &(s->r)) << 2;
    outdata[1] |= g726_16_encoder(indata[6], &(s->l)) << 4;
    outdata[1] |= g726_16_encoder(indata[7], &(s->r)) << 6;

} // end g726_16_mono_coder


////////////////////////////////////////////////////////////////////////////
// g726_16_mono_decoder

int g726_16_mono_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    struct g72x_state *s = (struct g72x_state *) state;

    outdata[0] = g726_16_decoder(indata[0]&0x3,       s);
    outdata[1] = g726_16_decoder((indata[0]&0xc)>>2,  s);
    outdata[2] = g726_16_decoder((indata[0]&0x30)>>4, s);
    outdata[3] = g726_16_decoder((indata[0]&0xc0)>>6, s);

    return 0;

} // end g726_16_mono_coder


////////////////////////////////////////////////////////////////////////////
// g726_16_stereo_decoder

int g726_16_stereo_decoder (
    unsigned char indata[],
    short outdata[],
    void *state
) {

    struct g72x_state_stereo *s = (struct g72x_state_stereo *) state;

    outdata[0] = g726_16_decoder(indata[0]&0x3,       &(s->l));
    outdata[1] = g726_16_decoder((indata[0]&0xc)>>2,  &(s->r));
    outdata[2] = g726_16_decoder((indata[0]&0x30)>>4, &(s->l));
    outdata[3] = g726_16_decoder((indata[0]&0xc0)>>6, &(s->r));
    outdata[4] = g726_16_decoder(indata[1]&0x3,       &(s->l));
    outdata[5] = g726_16_decoder((indata[1]&0xc)>>2,  &(s->r));
    outdata[6] = g726_16_decoder((indata[1]&0x30)>>4, &(s->l));
    outdata[7] = g726_16_decoder((indata[1]&0xc0)>>6, &(s->r));

    return 0;

} // end g726_16_mono_coder


////////////////////////////////////////////////////////////////////////////
