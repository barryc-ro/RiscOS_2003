/*
 * scsi.c
 *
 * This is the module that handles the SCSI window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"    

#include "configure.h"
#include "scsi.h" 
#include "cmos.h"


#define SCSIWindow_FirstHard     3
#define SCSIWindow_Drive         9
#define SCSIWindow_DirCache     10

#define SCSIWindow_HardUp        7
#define SCSIWindow_HardDown      8

static int scsi_window=0;

static wimp_icreate hard_icons[4]={};
static int hard_handles[4]={};

static void scsi_geticons(void)
{
 int i;

 for (i=0;i<4;i++)
 { 
  wimp_get_icon_info(scsi_window,i+SCSIWindow_FirstHard,&hard_icons[i].i);
  hard_icons[i].w=scsi_window;
  hard_handles[i]=i+SCSIWindow_FirstHard;
 }

}

static int harddiscs=4;

static void scsi_setharddiscs()
{
 int number=cmos_get(CMOS_SCSIHardDiscs) & 7;
 int i;
 
 if (number > harddiscs)
 {
  for (i=harddiscs ; i <= number-1 ;i++)
  {
   wimp_create_icon(&hard_icons[i],&hard_handles[i]);
   wimp_set_icon_state(scsi_window,hard_handles[i],0,0);
  }
 }
 else
 {
  for (i=harddiscs-1 ; i >= number ; i--)
  {
   redraw_icon(scsi_window,&hard_icons[i].i); 
   wimp_delete_icon(scsi_window,hard_handles[i]);
  }
 }
 
 harddiscs=number;
}

static void scsi_setdrive()
{
 int drive=(cmos_get(CMOS_SCSIDrive)>>3) & 7;
 wimp_icon i;

 wimp_get_icon_info(scsi_window,SCSIWindow_Drive,&i);
 sprintf(i.data.indirecttext.buffer,"%1i",drive+4);
 wimp_set_icon_state(scsi_window,SCSIWindow_Drive,0,0);
}

static void scsi_setcache()
{
 int size=cmos_get(CMOS_SCSIDirCache);
 wimp_icon i;

 wimp_get_icon_info(scsi_window,SCSIWindow_DirCache,&i);
 sprintf(i.data.indirecttext.buffer,"%i",size);
 wimp_set_icon_state(scsi_window,SCSIWindow_DirCache,0,0);
}

static void change_hard(int dir)
{
 int byte=cmos_get(CMOS_SCSIHardDiscs);
 int current=(byte & 7)+dir;
 if ((current<0) || (current > 4)) return;
 cmos_set(CMOS_SCSIHardDiscs,(byte & ~7) | current);
 scsi_setharddiscs();
}

static void change_drive(int drive)
{
 int byte=cmos_get(CMOS_SCSIDrive);
 if ((drive>=4) && (drive<=7)) 
      cmos_set(CMOS_SCSIDrive,(byte & ~(7<<3)) | ((drive-4)<<3));
 scsi_setdrive();
}

static void change_cache(int size)
{
 if ((size>=0) && (size<=255)) 
      cmos_set(CMOS_SCSIDirCache,size);
 scsi_setcache();
}


static void scsi_event_handler(wimp_eventstr *e,void *handle)
{
 int w=(int)handle;

 switch (e->e)
 {
  case wimp_EOPEN:
       wimp_open_wind(&e->data.o);
       break;
  case wimp_ECLOSE:
       {
        wimp_mousestr m;
        wimp_get_point_info(&m);
        if (m.bbits==wimp_BRIGHT) 
        {
         wimp_wstate s;
         wimp_get_wind_state(scsi_window,&s);
         reopen_main_window(s.o.box.x0,s.o.box.y1);
        }
        wimp_close_wind(w);
        win_register_event_handler(w,0,0);
        wimp_delete_wind(w);
        scsi_window=0;
        harddiscs=4;
       }
       break;
  case wimp_EBUT:
       if ( (e->data.but.m.bbits == wimp_BLEFT) ||
            (e->data.but.m.bbits == wimp_BRIGHT)
          )
          {
           int sign=(e->data.but.m.bbits == wimp_BRIGHT) ? 1 : -1;
           switch (e->data.but.m.i)
           {
            case SCSIWindow_HardUp:
                 change_hard(-sign);
                 break;
            case SCSIWindow_HardDown:
                 change_hard(sign);
                 break;
            default:
                 break;
           }
          }
          break;
  case wimp_EKEY:
          if (e->data.key.chcode != 13) wimp_processkey(e->data.key.chcode);
          else  
          { 
           wimp_icon i;
           int value;
           wimp_get_icon_info(scsi_window,e->data.key.c.i,&i);
           sscanf(i.data.indirecttext.buffer,"%i",&value);
           switch (e->data.key.c.i)
           {
            case SCSIWindow_Drive:
                 change_drive(value);
                 break;
            case SCSIWindow_DirCache:
                 change_cache(value);
                 break;
           }
           disown_caret();
          }
          break;
 }
}


int scsi_create_window(void)
{
 if (! scsi_window)
 {
  scsi_window=create_window("SCSI",scsi_event_handler);
  scsi_geticons();
 }
 scsi_setharddiscs();
 scsi_setdrive();
 scsi_setcache();

 return scsi_window;
}

void scsi_update_window(void)
{
 if (scsi_window) scsi_create_window();
}
