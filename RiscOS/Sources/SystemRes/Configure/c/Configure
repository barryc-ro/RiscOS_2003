/*
 * Configure.c
 *
 * This is the main source file for the new !Configure
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"
#include "alarm.h"
#include "saveas.h"
#include "help.h"
#include "ftrace.h"

#include "configure.h"
#include "cmos.h"
#include "harddiscs.h"
#include "floppies.h"
#include "econet.h"
#include "printer.h"
#include "screen.h"
#include "wimpflags.h"
#include "apps.h"
#include "sound.h"
#include "mouse.h"
#include "keyboard.h"
#include "memory.h"
#include "fonts.h"
#include "system.h"
#include "lock.h"
#include "filer.h"

#define Main_Menu_Info 0
#define Main_Menu_Save 1
#define Main_Menu_Quit 2

#define MainWindow_HardDiscs 0
#define MainWindow_Floppies  1
#define MainWindow_Econet    2
#define MainWindow_Printer   3
#define MainWindow_Mouse     4
#define MainWindow_Keyboard  5
#define MainWindow_Memory    6
#define MainWindow_Sound     7
#define MainWindow_Screen    8
#define MainWindow_Fonts     9
#define MainWindow_Wimp     10
#define MainWindow_Apps     11
#define MainWindow_System   12
#define MainWindow_Lock     13
#ifdef INCLUDE_FILER
#define MainWindow_Filer    15
#endif

#define Info_Menu_Copyright_Field 5
#define Info_Menu_Version_Field   7

#ifndef Portable_Speed
#define Portable_Speed                  0x42FC0
#endif

static int main_window=0;
static int children=0;
static menu main_menu=0;
int current_menu;
BOOL portable = FALSE;


static void (*functions[])()= {
                             harddiscs_update_window,
                             floppies_update_window,
                             econet_update_window,
                             printer_update_window,
                             screen_update_window,
                             wimpflags_update_window,
                             apps_update_window,
                             sound_update_window,
                             mouse_update_window,
                             keyboard_update_window,
                             memory_update_window,
                             fonts_update_window,
                             system_update_window,
                             lock_update_window,
#ifdef INCLUDE_FILER
                             filer_update_window,
#endif
                            };

typedef struct
{
 int location;
 int function;
}check_element;

static check_element locations[] = {
        {CMOS_ADFSHardDiscs      , 1 }, /* IDE discs and ST506 discs */
  /*    {CMOS_ADFSDrive          , 1 },
        {CMOS_ADFSDirCache       , 1 },
        {CMOS_ADFSBuffers        , 1 }, */
        {CMOS_SCSIHardDiscs      , 1 },
        {-1,-1},
  /*    {CMOS_SCSIDrive          , 2 },
        {CMOS_SCSIDirCache       , 2 }, */
        {CMOS_ADFSFloppies       , 2 },
        {-1,-1},
        {CMOS_FileServer         , 3 },
        {CMOS_PrinterServer      , 3 },
        {CMOS_FileServerName     , 3 },
        {CMOS_PrinterServerName  , 3 },
        {CMOS_EconetBootType     , 3 },
        {CMOS_BroadcastLoader    , 3 },
        {-1,-1},
        {CMOS_PrinterPort        , 4 },
        {CMOS_PrinterIgnore      , 4 },
        {CMOS_PrinterIgnoreChar  , 4 },
        {CMOS_PrinterCtrls       , 4 },
        {CMOS_PrinterPageTitle   , 4 },
        {CMOS_PrinterLineNumbers , 4 },
        {CMOS_PrinterFeed        , 4 },
        {-1,-1},
        {CMOS_MonitorType        , 5 },
  /*    {CMOS_TV                 , 5 }, */
  /*    {CMOS_WimpMode           , 5 }, */
  /*    {CMOS_Interlace          , 5 }, */
        {CMOS_BlankDelay         , 5 },
  /*    {CMOS_AutoWimpMode       , 5 }, */
        {-1,-1},
        {CMOS_WimpFlags          , 6 },
        {CMOS_WimpAutoMenusDelay , 6 },
        {CMOS_Wimp2D             , 6 },
        {-1,-1},
        {CMOS_RomApps            , 7 }, /* Two bytes */
        {CMOS_RomApps+1          , 7 }, /* Two bytes */
        {-1,-1},
        {CMOS_BellVolume         , 8 },
        {CMOS_Volume             , 8 },
        {CMOS_Voice              , 8 },
        {CMOS_Speaker            , 8 },
        {-1,-1},
        {CMOS_MouseStep          , 9 },
        {CMOS_MouseType          , 9 },
        {CMOS_WimpDragMove       , 9 },
        {CMOS_WimpDragDelay      , 9 },
        {CMOS_WimpDoubleClickMove, 9 },
        {CMOS_WimpDoubleClickDelay,9 },
        {-1,-1},
        {CMOS_KeyDelay           , 10},
        {CMOS_KeyRepeat          , 10},
        {CMOS_CapsLock           , 10},
        {-1,-1},
        {CMOS_RMASize            , 11},
  /*    {CMOS_RamFSSize          , 11}, */
        {CMOS_ScreenSize         , 11},
        {CMOS_SpriteSize         , 11},
        {CMOS_HeapSize           , 11},
        {CMOS_FontSize           , 11}, /* 4K Units */
        {CMOS_FontMax            , 11},
        {-1,-1},
        {CMOS_FontMax2           , 12},
        {CMOS_FontMax3           , 12},
        {CMOS_FontMax4           , 12},
        {CMOS_FontMax5           , 12},
        {CMOS_FontMax6           , 12},
        {CMOS_FontMax7           , 12},
        {CMOS_DeskFont           , 12},
        {-1,-1},
#ifdef INCLUDE_FILER
        {CMOS_Filer              , 14},
        {-1,-1},
#endif
        {CMOS_FSLock0            , 13},
        {CMOS_FSLock1            , 13},
        {CMOS_FSLock2            , 13},
        {CMOS_FSLock3            , 13},
        {CMOS_FSLock4            , 13},
        {CMOS_FSLock5            , 13},
        {-1,-1},
        {-2,-2}
      };

char *icontext( wimp_w w, wimp_i i )
{
        wimp_icon ii;

        if ( wimp_get_icon_info( w, i, &ii ) ) return NULL;

        return ii.data.indirecttext.buffer;
}

void changeicontext( wimp_w w, wimp_i i, char *text )
{
        wimp_icon ii;

        if ( wimp_get_icon_info( w, i, &ii ) ) return;
        strcpy( ii.data.indirecttext.buffer, text );
        redraw_icon( w, &ii );
}

BOOL check_portable (void)
{
  _kernel_swi_regs r;
  r.r[0] = 0;
  r.r[1] = -1;

  return portable = (_kernel_swi (Portable_Speed, &r, &r) == NULL);
}

static last_help_token=0;
typedef struct
{
        int handle;
        char token[3];
} help_token;

static help_token help_tokens[50]={};

static void register_help_token(int handle,char *token)
{
 int i;
 for (i=0;i<last_help_token;i++)
 {
  if (help_tokens[i].handle==handle)
  {
   help_tokens[i].token[0]=*token;
   help_tokens[i].token[1]=*(token+1);
   help_tokens[i].token[2]=0;
   return;
  }
 }
 help_tokens[last_help_token].handle=handle;
 help_tokens[last_help_token].token[0]=*token;
 help_tokens[last_help_token].token[1]=*(token+1);
 help_tokens[last_help_token].token[2]=0;
 last_help_token++;
}

static void send_help_message(char *message)
{
 wimp_msgstr m;
 m.hdr.my_ref=0;
 m.hdr.your_ref=wimpt_last_event()->data.msg.hdr.my_ref;
 m.hdr.size=256;
 m.hdr.action=wimp_MHELPREPLY;
 strcpy(m.data.helpreply.text,message);
 wimp_sendmessage(wimp_ESEND,&m,wimpt_last_event()->data.msg.hdr.task);
}

static BOOL return_window_help(int window,int icon)
{
 int i;
 wimp_icon ic;
 for (i=0;i<last_help_token;i++)
 {
  if (help_tokens[i].handle==window)
  {
   char token[10];
   if (icon>=0)
   {
    sprintf(token,"%s%i\0",help_tokens[i].token,icon);
    wimp_get_icon_info(window,icon,&ic);
    if (ic.flags & wimp_ISELECTED) strcat(token,"S");
    if (ic.flags & wimp_INOSELECT) strcat(token,"D");
   }
   else sprintf(token,"%s\0",help_tokens[i].token);

   send_help_message(msgs_lookup(token));
   return TRUE;
  }
 }
 return FALSE;
}

BOOL unknown_configure_key(int key)
{
 if ((key>=0x180) && (key<=0x1c0) && ((key & 0xf)<10)) return TRUE;
 if (key>=0x1c0) return TRUE;
 if ((key<32) && (key!=13) && (key !=11)&& (key !=8)) return TRUE;
 return FALSE;
}

#ifdef AUTO_UPDATE

static void update_config(int at,void *handle)
{
 int i;
 static int old_config[256]={};
 at=at;
 handle=handle;

 for (i=0;locations[i].location != -2;i++)
 {
  if (locations[i].location == -1) continue;
  else
  {
   int value=cmos_get(locations[i].location);
   if (value != old_config[locations[i].location])
   {
    functions[locations[i].function-1]();
    while (locations[i].location >= 0) i++;
   }
  }
 }
 for (i=0;locations[i].location != -2;i++)
 {
  if (locations[i].location != -1)
               old_config[locations[i].location]=
               cmos_get(locations[i].location);
 }
 alarm_set(alarm_timenow()+500,update_config,(void *) 1);
}

#endif



void disown_caret(void)
{
 _kernel_swi_regs r;
 r.r[0]=-1;
 r.r[1]=-1;
 _kernel_swi(XOS_Bit | Wimp_SetCaretPosition,&r,&r);
}

void redraw_icon(int window, wimp_icon *icon)
{
 _kernel_swi_regs r;

 r.r[0]=window;
 r.r[1]=icon->box.x0;
 r.r[2]=icon->box.y0;
 r.r[3]=icon->box.x1;
 r.r[4]=icon->box.y1;
 _kernel_swi(XOS_Bit | Wimp_ForceRedraw,&r,&r);
}

static BOOL save_file(char *path, void *handle)
{
 char buf[256];
 int i;
 _kernel_swi_regs r;
 os_error *e;
 handle=handle;

 for (i=0;i<=240;i++) buf[i]=cmos_get(i) & 0xff;

 r.r[0]=10; /* Save file with file-type */
 r.r[1]=(int)path;
 r.r[2]=0xff2;
 r.r[4]=(int)buf;
 r.r[5]=r.r[4]+240;
 wimpt_complain( e=(os_error *)_kernel_swi(XOS_Bit | OS_File,&r,&r));
 return (e==NULL);
}

static BOOL load_file(char *path)
{
 char buf[256];
 int i;
 _kernel_swi_regs r;

 r.r[0]=16; /* Load file no path */
 r.r[1]=(int)path;
 r.r[2]=(int)buf;
 r.r[3]=0;
 if (_kernel_swi(XOS_Bit | OS_File,&r,&r) != NULL)
 {
  werr(0,_kernel_last_oserror()->errmess);
  return FALSE;
 }
 for (i=0;locations[i].location != -2;i++)
  if (locations[i].location != -1)
     cmos_set(locations[i].location,buf[locations[i].location]);


#ifdef AUTO_UPDATE
 alarm_removeall((void *) 1);
 alarm_set(alarm_timenow(),update_config,(void *) 1);     /* Update display NOW ! */
#else
 for (i=0;locations[i].location != -2;i++)
 {
  if (locations[i].location == -1) continue;
  else
  {
    functions[locations[i].function-1]();
    while (locations[i].location >= 0) i++;
  }
 }
#endif
 return TRUE;
}





static void main_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;

        switch (e->e)
        {
        case wimp_EOPEN:
                wimp_open_wind(&e->data.o);
                children=0;
                break;

        case wimp_ECLOSE:
                delete_window( &main_window );
                exit (0); /*Added by JRC 7th Nov 1994*/
                break;

       case wimp_EBUT:
                if ( (e->data.but.m.bbits == wimp_BLEFT) ||
                     (e->data.but.m.bbits == wimp_BRIGHT) )
                {
                        int window;
                        wimp_wstate s,s1;

                        switch (e->data.but.m.i)
                        {
                        case MainWindow_HardDiscs:
                                window=harddiscs_create_window();
                                break;
                        case MainWindow_Floppies:
                                window=floppies_create_window();
                                break;
                        case MainWindow_Econet:
                                window=econet_create_window();
                                break;
                        case MainWindow_Printer:
                                window=printer_create_window();
                                break;
                        case MainWindow_Screen:
                                window=screen_create_window();
                                break;
                        case MainWindow_Apps:
                                window=apps_create_window();
                                break;
                        case MainWindow_Wimp:
                                window=wimpflags_create_window();
                                break;
                        case MainWindow_Sound:
                                window=sound_create_window();
                                break;
                        case MainWindow_Mouse:
                                window=mouse_create_window();
                                break;
                        case MainWindow_Keyboard:
                                window=keyboard_create_window();
                                break;
                        case MainWindow_Memory:
                                window=memory_create_window();
                                break;
                        case MainWindow_Fonts:
                                window=fonts_create_window();
                                break;
                        case MainWindow_System:
                                window=system_create_window();
                                break;
                        case MainWindow_Lock:
                                window=lock_create_window();
                                break;
#ifdef INCLUDE_FILER
                        case MainWindow_Filer:
                                window=filer_create_window();
                                break;
#endif
                        default:
                                return;
                        }
                        if (++children == 8 ) children = 1;

                        wimp_get_wind_state(main_window,&s);
                        wimp_get_wind_state(window,&s1);
                        s1.o.behind=-1;

                        if (! (s1.flags &   wimp_WOPEN))
                        {
                                s1.o.box.x1-=s1.o.box.x0;
                                s1.o.box.y0-=s1.o.box.y1;
                                s1.o.box.x0=s.o.box.x0+children*50;
                                s1.o.box.y1=s.o.box.y1;
                                s1.o.box.x1+=s1.o.box.x0;
                                s1.o.box.y0+=s1.o.box.y1;
                        }

                        wimp_open_wind(&s1.o);

                        if (e->data.but.m.bbits == wimp_BRIGHT)
                        {
                                delete_window( &main_window );
                        }
                }
                else if ( e->data.but.m.bbits == wimp_BMID )
                {
                        help_register_handler(help_simplehandler, (void *) "MHMAIN");
                        wimp_create_menu(menu_syshandle(main_menu),e->data.but.m.x-100,e->data.but.m.y+16);
                        current_menu=Menu_Main;
                }
                break;

        case wimp_ESEND:
        case wimp_ESENDWANTACK:
                switch (e->data.msg.hdr.action)
                {
                case wimp_MDATALOAD:
                        if ( (e->data.msg.data.dataload.type==0xff2) && load_file(e->data.msg.data.dataload.name))
                        {
                                wimp_msgstr m;
                                m.hdr.action=wimp_MDATALOADOK;
                                m.hdr.my_ref=0;
                                m.hdr.your_ref=e->data.msg.hdr.my_ref;
                                m.hdr.size=256;
                                m.data=e->data.msg.data;
                                wimp_sendmessage(wimp_ESEND,&m,e->data.msg.hdr.task);
                        }
                        break;
                }
                break;
        }
}


int create_window( char *name, win_event_handler proc, char *token )
{
        int handle;
        template *temp;
        wimp_wind *wind;

        temp = template_copy(template_find(name));    /* Get window template */
        wind = &(temp->window);                              /* Get window pointer */
        wimpt_noerr(wimp_create_wind(wind,&handle));         /* Create the window */
        win_register_event_handler(handle,proc,(void *)handle);
        register_help_token(handle,token);
        win_activeinc();

        return handle;
}

void delete_window( int *winhan )
{
        if ( *winhan )
        {
                win_activedec();
                wimp_close_wind( *winhan );
                win_register_event_handler( *winhan, 0, 0 );
                wimp_delete_wind( *winhan );
                *winhan = 0;
        }
}

void main_window_lockstate_update( void )
{
        _kernel_swi_regs r;
        int t = (lock_status() == 2)?wimp_INOSELECT:0;

        if ( main_window )
        {
                wimp_set_icon_state(main_window,MainWindow_HardDiscs,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Floppies ,t,wimp_INOSELECT);
                r.r[0] = r.r[1] = 0;
                if (_kernel_swi(XOS_Bit | Econet_SetProtection,&r,&r) != NULL )
                {
                        wimp_set_icon_state(main_window,MainWindow_Econet,wimp_INOSELECT,wimp_INOSELECT);
                }
                else
                {
                        wimp_set_icon_state(main_window,MainWindow_Econet,t,wimp_INOSELECT);
                }
                wimp_set_icon_state(main_window,MainWindow_Printer  ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Mouse    ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Keyboard ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Memory   ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Sound    ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Screen   ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Fonts    ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Wimp     ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_Apps     ,t,wimp_INOSELECT);
                wimp_set_icon_state(main_window,MainWindow_System   ,t,wimp_INOSELECT);
#ifdef INCLUDE_FILER
                wimp_set_icon_state(main_window,MainWindow_Filer    ,t,wimp_INOSELECT);
#endif
        }
}

static int create_main_window(char *name,win_event_handler proc)
{
        return create_window(name,proc,"MA");
}

static void click_proc(int icon)
{
        wimp_wstate state;
        icon=icon;

        if (! main_window)
        {
                main_window=create_main_window("Main",main_event_handler); /* Create if not already created */
#ifdef AUTO_UPDATE
                alarm_removeall((void *)1);
                alarm_set(alarm_timenow()+500,update_config,(void *) 1);
#endif
                main_window_lockstate_update();
        }


        wimp_get_wind_state(main_window,&state);
        state.o.behind=-1;             /* Open at front */
        wimp_open_wind(&state.o);
}

#ifdef WITHICONONBAR
static void iconbar_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;

        switch (e->e)
        {
        case wimp_EBUT:
                if (e->data.but.m.bbits != wimp_BMID)
                {
                        click_proc(0);
                }
                else
                {
                        help_register_handler(help_simplehandler, (void *) "MHMAIN");
                        wimp_create_menu(menu_syshandle(main_menu),e->data.but.m.x-100,228);
                        current_menu=Menu_Main;
                }
                break;
        }
}
#endif


void reopen_main_window(int x0, int y1)
{
        wimp_wstate state;

        if (! main_window)
        {
                main_window=create_main_window("Main",main_event_handler); /* Create if not already created */
#ifdef AUTO_UPDATE
                alarm_removeall((void *)1);
                alarm_set(alarm_timenow()+500,update_config,(void *) 1);
#endif
                main_window_lockstate_update();
        }
        wimp_get_wind_state(main_window,&state);
        state.o.behind=-1;             /* Open at front */
        state.o.box.x1=state.o.box.x1-state.o.box.x0+x0;
        state.o.box.x0=x0;
        state.o.box.y0=y1-(state.o.box.y1-state.o.box.y0);
        state.o.box.y1=y1;
        wimp_open_wind(&state.o);
}


static void menuhelp_handler( void *handle, char *hit )
{
        hit = hit;
        help_reply( msgs_lookup( handle ));
}


void open_button_menu
(
        int menu_number,
        wimp_w window,
        wimp_i icon,
        wimp_menustr *the_menu,
        char *the_menu_help
)
{
        wimp_mousestr m;
        wimp_wstate mwindow;
        wimp_icon micon;

        if ( wimp_get_point_info( &m ) ) return;
        if ( wimp_get_wind_state( window, &mwindow ) ) return;
        if ( wimp_get_icon_info( window, icon, &micon ) ) return;
        if ( wimp_create_menu( the_menu, micon.box.x1 + mwindow.o.box.x0 - mwindow.o.x, m.y + 16 ) ) return;
        help_register_handler( menuhelp_handler, the_menu_help );
        current_menu = menu_number;
}

static BOOL unknown_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;

        if (help_process(e)) {return TRUE;}     /* Menu help event */
        switch(e->e)
        {
        case wimp_EMENU:
               {
                wimp_mousestr m;
                if (current_menu != Menu_Main) return FALSE;
                switch (e->data.menu[0])
                {
                case Main_Menu_Info:
                       {
                        dbox d = dbox_new("ProgInfo");
                        dbox_setfield(d, Info_Menu_Version_Field, msgs_lookup("VER"));
                        dbox_setfield(d, Info_Menu_Copyright_Field, msgs_lookup("C"));
                        dbox_raw_eventhandler(d, help_dboxrawevents, "INFO");
                        dbox_show(d);
                        dbox_fillin(d);
                        dbox_dispose(&d);
                       }
                        break;
                case Main_Menu_Save:
                       {
                        saveas(0xff2,msgs_lookup("fname"),0x100,save_file,0,0,NULL);
                       }
                        break;
                case Main_Menu_Quit:
                        exit(0);
                }
                wimp_get_point_info(&m);
                if (m.bbits & wimp_BRIGHT)
                        wimp_create_menu(menu_syshandle(main_menu),e->data.but.m.x-100,228);
               }
                return TRUE;

        case wimp_ESEND:
        case wimp_ESENDWANTACK:
                switch (e->data.msg.hdr.action)
                {
                case wimp_MDATAOPEN:
                        if ( (e->data.msg.data.dataload.type==0xff2) && load_file(e->data.msg.data.dataload.name))
                        {
                                wimp_msgstr m;

                                m.hdr.action=wimp_MDATALOADOK;
                                m.hdr.my_ref=0;
                                m.hdr.your_ref=e->data.msg.hdr.my_ref;
                                m.hdr.size=256;
                                m.data=e->data.msg.data;
                                wimp_sendmessage(wimp_ESEND,&m,e->data.msg.hdr.task);
                        }
                        break;

                case wimp_SAVEDESK:
                       {
                        char buf[256];
                        _kernel_swi_regs r;

                        sprintf(buf,"Run %s\n",getenv("Configure$Dir"));
                        r.r[0]=2;
                        r.r[1]=e->data.msg.data.savedesk.filehandle;
                        r.r[2]=(int)buf;
                        r.r[3]=strlen(buf);
                        wimpt_complain((os_error *)_kernel_swi(XOS_Bit | OS_GBPB,&r,&r));
                       }
                        break;

                }

                break;
        }

        return FALSE;
}


static wimp_msgaction Messages [] =
  { wimp_MDATASAVE,
    wimp_MDATASAVEOK,
    wimp_MDATALOAD,
    wimp_MDATALOADOK,
    wimp_MDATAOPEN,
    wimp_MRAMFETCH,
    wimp_MRAMTRANSMIT,
    wimp_MPREQUIT,
    wimp_PALETTECHANGE,
    wimp_SAVEDESK,
    wimp_MDATASAVED,
    wimp_MMENUWARN,
    wimp_MMODECHANGE,
    wimp_MHELPREQUEST,
    wimp_MHELPREPLY,
    wimp_MPrintFile,
    wimp_MWillPrint,
    wimp_MPrintTypeOdd,
    wimp_MPrintTypeKnown,
    wimp_MPrinterChange,
    wimp_MCLOSEDOWN
  };

static void init(void)
{
        /* OSS 13-Mar-92 Changed to specify Messages, Templates and Srpites by
           patchname. Also added setlocal() call and lookup of icon bar sprite. */

        setlocale(LC_ALL, "");
        check_portable();
        res_init("Configure");
        msgs_readfile("Configure:Messages");
        wimpt_messages (Messages);
        wimpt_wimpversion (300);
        wimpt_init(msgs_lookup("TaskID"));
        resspr_readfile("Configure:Sprites");
        template_readfile("Configure:Templates");
        alarm_init();
#ifdef WITHICONONBAR
        baricon(msgs_lookup("BarIcon"), 1,click_proc);
#endif
        main_menu=menu_new(msgs_lookup("MMenuT"),msgs_lookup("MMenu"));
#ifdef WITHICONONBAR
        win_register_event_handler(win_ICONBAR,iconbar_event_handler,NULL);
#endif
        win_add_unknown_event_processor(unknown_event_handler,NULL);
#ifndef WITHICONONBAR
        click_proc(0);
#endif
}

#ifndef STANDALONE
/* Fixed stack size !!!
 * 3.5k is the max required.
 * 0.5k is a bodge safety factor.
 */
int __root_stack_size = 3*1024+512+512;
extern int disable_stack_extension;
#endif

static void check_for_duplicate_invocation()
{
        int blk[4];
        int rover = 0;
        char *myname = msgs_lookup( "TaskID" );

        do
        {
                _swi( TaskManager_EnumerateTasks, _IN(0)|_IN(1)|_IN(2)|_OUT(0),
                        rover, blk, sizeof( blk ), &rover );

                if ( strcmp( (char *)blk[1], myname ) == 0 )
                {
                        werr( 1, msgs_lookup( "NotAlone" ));
                }
        } while ( rover >= 0 );

}

static void check_for_global_update (void)

{  char *env, write [256], unique [256];
   BOOL network_boot;

   /*Get Choices$Write.*/
   if ((env = getenv ("Choices$Write")) == NULL)
      werr (TRUE, msgs_lookup ("NotSet"), "Choices$Write");

   /*It's something like 'Choices:Boot': canonicalise it.*/
   _swi (OS_FSControl, _IN (0) | _IN (1) | _IN (2) | _IN (3) | _IN (4) | _IN (5),
         37, env, write, NULL, NULL, sizeof write);

   if ((env = getenv ("Boot$Unique")) == NULL)
      werr (TRUE, msgs_lookup ("NotSet"), "Boot$Unique");
   strcpy (unique, env);

   /*Boot was off a network if the name does NOT contain '!Boot'.*/
   network_boot = strstr (write, "!Boot") == NULL &&
         strstr (write, "!BOOT") == NULL;

   if (network_boot && strstr (write, unique) == NULL)
   {  /*Editing global configuration: this is an !ArmBoot or !ShareBoot
         directory*/
      if (_swi (Wimp_ReportError, _IN (0) | _IN (1) | _IN (2) | _IN (3) | _IN (4) | _IN (5) | _RETURN (1),
            msgs_lookup ("Global"),
            1 << 0 /*provide OK*/ | 1 << 1 /*provide Cancel*/ | 1 << 4 /*short title*/ |
            1 << 8 /*given category*/ | 4 << 9 /*question*/,
            msgs_lookup ("TaskID"), msgs_lookup ("BarIcon"), 1, 0) == 2)
         exit (0);
   }
}

int main(int argc,char *argv[])
{
#ifndef STANDALONE
        disable_stack_extension = 1;
#endif
        if (argc>2) exit(0);
        wimpt_install_signal_handlers();
        ftrace_on ();
        init();
        if (argc==2) load_file(argv[1]);
        check_for_duplicate_invocation();
        check_for_global_update();
        while (1)
        {
                event_process();
                if (wimpt_last_event()->data.msg.hdr.action==wimp_MHELPREQUEST)
                        return_window_help(wimpt_last_event()->data.msg.data.helprequest.m.w,
                                wimpt_last_event()->data.msg.data.helprequest.m.i);
        }

        return 0;
}
