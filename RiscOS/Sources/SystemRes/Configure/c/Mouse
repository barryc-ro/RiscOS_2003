/*
 * mouse.c
 *
 * This is the module that handles the Mouse window.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"
#include "alarm.h"
#include "visdelay.h"
#include "help.h"

#include "configure.h"
#include "mouse.h"
#include "cmos.h"

#ifndef OS_Pointer
#define OS_Pointer 0x64
#endif

#define MouseWindow_DragDelayDown         9
#define MouseWindow_DragDelay            10
#define MouseWindow_DragDelayUp          11

#define MouseWindow_DragDistanceDown     13
#define MouseWindow_DragDistance         14
#define MouseWindow_DragDistanceUp       15

#define MouseWindow_DoubleClickDelayDown 17
#define MouseWindow_DoubleClickDelay     18
#define MouseWindow_DoubleClickDelayUp   19

#define MouseWindow_DoubleClickDistanceDown 21
#define MouseWindow_DoubleClickDistance     22
#define MouseWindow_DoubleClickDistanceUp   23

#define MouseWindow_MouseMenu 24
#define MouseWindow_MouseName 25


#define MouseWindow_StepValue1              2  /* Set value to 1 */
#define MouseWindow_StepValue1b             3  /* both icons set this value */
#define MouseWindow_StepValue2              4  /* set step value to 2 */
#define MouseWindow_StepValue3              5  /* set step value to 3 */
#define MouseWindow_StepValue4              6  /* set step value to 4 */
#define MouseWindow_StepValue5              7  /* set step value to 5 */

#define StepValue1  1
#define StepValue1b 1
#define StepValue2  2
#define StepValue3  3
#define StepValue4  4
#define StepValue5  5

static int mouse_window=0;

#ifdef BLUEROM

typedef struct pointer {
        struct pointer *next;
        int flags;
        char type;
        char name[1];           /* Actually a string of undefined length. */
} pointerstr;

static pointerstr *pointer_list=NULL;
static menu mouse_menu=NULL;

static void free_pointer_list()
{
        _kernel_swi_regs r;

        while (pointer_list != NULL)
        {
                r.r[0]=7;     /* ModHandReason_Free */
                r.r[2]=(int)pointer_list;
                pointer_list=pointer_list->next;
                (void)_kernel_swi(XOS_Bit | OS_Module,&r,&r);
        }
}

static pointerstr *get_pointer_list()
{
        _kernel_swi_regs r;

        if (pointer_list != NULL)
                free_pointer_list();

        r.r[0]=1;              /* request pointer types */
        r.r[1]=0;
        r.r[9]=0x26;           /* PointerV */
        if ((int)_kernel_swi(XOS_Bit | OS_CallAVector,&r,&r))
                return NULL;
        return (pointer_list=(pointerstr *)r.r[1]);
}

static void mouse_settype()
{
        wimp_icon i;
        char *name=NULL;
        int type=cmos_get(CMOS_MouseType);
        pointerstr *p=get_pointer_list();

        while (p)
        {
                if (p->type == type)
                        name=p->name;
                p=p->next;
        }
        wimp_get_icon_info(mouse_window,MouseWindow_MouseName,&i);
        strncpy(i.data.indirecttext.buffer, name ? name : msgs_lookup("NoMouse"), i.data.indirecttext.bufflen);
        i.data.indirecttext.buffer[i.data.indirecttext.bufflen-1] = '\0';
        free_pointer_list();
}

#endif

static void mouse_setstep(void)
{
        int j,step=cmos_get(CMOS_MouseStep);

        if (step>127) step -=256;
        for (j=MouseWindow_StepValue1;j<=MouseWindow_StepValue5;j++)
        {
                wimp_set_icon_state(mouse_window,j,
                      ((j-MouseWindow_StepValue1b)==(step-1) )?wimp_ISELECTED:0,wimp_ISELECTED);
        }
}

static void mouse_setdragdelay(void)
{
        int value=cmos_get(CMOS_WimpDragDelay) ^ 5;
        wimp_icon i;
        wimp_caretstr c;
        wimp_get_icon_info(mouse_window,MouseWindow_DragDelay,&i);
        wimp_get_caret_pos(&c);
        sprintf(i.data.indirecttext.buffer,"%i",value);
        c.index=-1;
        wimp_set_caret_pos(&c);
        wimp_set_icon_state(mouse_window,MouseWindow_DragDelay,0,0);
}

static void mouse_setdragdistance(void)
{
        int value=cmos_get(CMOS_WimpDragMove) ^ 32;
        wimp_icon i;
        wimp_caretstr c;

        wimp_get_icon_info(mouse_window,MouseWindow_DragDistance,&i);
        wimp_get_caret_pos(&c);
        sprintf(i.data.indirecttext.buffer,"%i",value);
        c.index=-1;
        wimp_set_caret_pos(&c);
        wimp_set_icon_state(mouse_window,MouseWindow_DragDistance,0,0);
}

static void mouse_setdoubleclickdelay(void)
{
        int value=cmos_get(CMOS_WimpDoubleClickDelay) ^ 10;
        wimp_icon i;
        wimp_caretstr c;
        wimp_get_icon_info(mouse_window,MouseWindow_DoubleClickDelay,&i);
        wimp_get_caret_pos(&c);
        sprintf(i.data.indirecttext.buffer,"%i",value);
        c.index=-1;
        wimp_set_caret_pos(&c);
        wimp_set_icon_state(mouse_window,MouseWindow_DoubleClickDelay,0,0);
}

static void mouse_setdoubleclickdistance(void)
{
        int value=cmos_get(CMOS_WimpDoubleClickMove) ^ 32;
        wimp_icon i;
        wimp_caretstr c;
        wimp_get_icon_info(mouse_window,MouseWindow_DoubleClickDistance,&i);
        wimp_get_caret_pos(&c);
        sprintf(i.data.indirecttext.buffer,"%i",value);
        c.index=-1;
        wimp_set_caret_pos(&c);
        wimp_set_icon_state(mouse_window,MouseWindow_DoubleClickDistance,0,0);
}

static void change_dragdelay(int value)
{
        int v=(cmos_get(CMOS_WimpDragDelay) ^ 5);
        if (v==value) return;

        if ((value <= 255) && (value > 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDragDelay %i",value);
                _kernel_oscli(command);
        }
        mouse_setdragdelay();
}

static void change_dragdelay_by(int by)
{
        int value=(cmos_get(CMOS_WimpDragDelay) ^ 5) + by;
        if ((value <= 255) && (value > 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDragDelay %i",value);
                _kernel_oscli(command);
        }
        mouse_setdragdelay();
}

static void change_dragdistance(int value)
{
        int v=(cmos_get(CMOS_WimpDragMove) ^ 32);
        if (v==value) return;
        if ((value <= 255) && (value > 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDragMove %i",value);
                _kernel_oscli(command);
        }
        mouse_setdragdistance();
}

static void change_dragdistance_by(int by)
{
        int value=(cmos_get(CMOS_WimpDragMove) ^ 32) + by;
        if ((value <= 255) && (value > 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDragMove %i",value);
                _kernel_oscli(command);
        }
        mouse_setdragdistance();
}

static void change_doubleclickdelay(int value)
{
        int v=(cmos_get(CMOS_WimpDoubleClickDelay) ^ 10);
        if (v==value) return;
        if ((value <= 255) && (value >= 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDoubleClickDelay %i",value);
                _kernel_oscli(command);
        }
        mouse_setdoubleclickdelay();
}

static void change_doubleclickdelay_by(int by)
{
        int value=(cmos_get(CMOS_WimpDoubleClickDelay) ^ 10) + by;
        if ((value <= 255) && (value >= 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDoubleClickDelay %i",value);
                _kernel_oscli(command);
        }
        mouse_setdoubleclickdelay();
}

static void change_doubleclickdistance(int value)
{
        int v=(cmos_get(CMOS_WimpDoubleClickMove) ^ 32);
        if (v==value) return;
        if ((value <= 255) && (value >= 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDoubleClickMove %i",value);
                _kernel_oscli(command);
        }
        mouse_setdoubleclickdistance();
}
static void change_doubleclickdistance_by(int by)
{
        int value=(cmos_get(CMOS_WimpDoubleClickMove) ^ 32) + by;
        if ((value <= 255) && (value >= 0))
        {
                char command[255];
                sprintf(command,"Configure WimpDoubleClickMove %i",value);
                _kernel_oscli(command);
        }
        mouse_setdoubleclickdistance();
}

static void change_step_tovalue(int value)
{
        char buffer[3];
        _kernel_swi_regs r;
        r.r[0]=21;
        r.r[1]=(int)buffer;
        buffer[0]=2;
        buffer[1]=value>=0 ? value : value+256;
        buffer[2]=value>=0 ? value : value+256;
        if ((value >=-128) && (value <=127))
        {
                cmos_set(CMOS_MouseStep,value>=0 ? value : value+256);
                _kernel_swi(XOS_Bit | OS_Word,&r,&r);
        }
        mouse_setstep();
}

#ifdef BLUEROM

static void change_mouse_totype( int choice )
{
        pointerstr *p=get_pointer_list();

        while (--choice && p)
                p=p->next;

        if ( p )
        {
                wimp_icon i;
                int oldtype = 0;

                (void)_swix( OS_Pointer, _IN(0)|_OUT(0), 0, &oldtype );

                if ( p->type != oldtype ) {
                        os_error e;
                        int verifyres;

                        sprintf( e.errmess, msgs_lookup( "MousConf" ), p->name );
                        e.errnum = 0;
                        _swi( Wimp_ReportError, _IN(0)|_IN(1)|_IN(2)|_OUT(1), &e, 3 + (1<<4), msgs_lookup( "Warn" ), &verifyres );
                        if ( verifyres != 1 )
                        {
                                free_pointer_list();
                                return;
                        }
                }

                wimp_get_icon_info(mouse_window,MouseWindow_MouseName,&i);
                strncpy(i.data.indirecttext.buffer,p->name,i.data.indirecttext.bufflen);
                i.data.indirecttext.buffer[i.data.indirecttext.bufflen-1] = '\0';
                wimp_set_icon_state(mouse_window,MouseWindow_MouseName,0,0);

                (void)_swix( OS_Pointer, _IN(0)|_IN(1), 1, p->type );
                cmos_set(CMOS_MouseType,p->type);
                free_pointer_list();
        }
}

static void create_mousemenu(int adjust)
{
        if (!adjust)
        {
                pointerstr *p;
                visdelay_begin();
                if (mouse_menu != NULL) menu_dispose(&mouse_menu,TRUE);
                mouse_menu=NULL;
                p=get_pointer_list();
                if (p==NULL)
                {
                        visdelay_end();
                        return;
                }
                while (p)
                {
                        if (mouse_menu==NULL) mouse_menu=menu_new(msgs_lookup("MTitle"),p->name);
                        else menu_extend(mouse_menu,p->name);
                        p=p->next;
                }
                free_pointer_list();
                visdelay_end();
        }

        open_button_menu( Menu_Mouse, mouse_window, MouseWindow_MouseMenu, menu_syshandle( mouse_menu ), "MHMOUSE" );
}

static int mouse_unknown_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;
        switch (e->e)
        {
        case wimp_EMENU:
               {
                wimp_mousestr m;
                if (current_menu != Menu_Mouse) return FALSE;
                change_mouse_totype(e->data.menu[0]+1);
                wimp_get_point_info(&m);
                if (m.bbits & wimp_BRIGHT) create_mousemenu(1);
               }
                break;
        }
        return FALSE;
}

#endif

static void mouse_event_handler(wimp_eventstr *e,void *handle)
{
 handle = handle;

 switch (e->e)
 {
  case wimp_EOPEN:
       wimp_open_wind(&e->data.o);
       break;
  case wimp_ECLOSE:
       {
        wimp_mousestr m;
        wimp_get_point_info(&m);
        if (m.bbits==wimp_BRIGHT)
        {
         wimp_wstate s;
         wimp_get_wind_state(mouse_window,&s);
         reopen_main_window(s.o.box.x0,s.o.box.y1);
        }
        delete_window( &mouse_window );
        alarm_removeall((void *) 1);
#ifdef BLUEROM
        win_remove_unknown_event_processor(mouse_unknown_event_handler,NULL);
#endif
       }
       break;
  case wimp_EBUT:
#ifdef BLUEROM
       if ( (e->data.but.m.i == MouseWindow_MouseMenu) &&
             ((e->data.but.m.bbits & (wimp_BLEFT | wimp_BMID)) != 0)
          )
       {
            create_mousemenu(0);
       }
#endif
       if ( (e->data.but.m.bbits == wimp_BLEFT) ||
            (e->data.but.m.bbits == wimp_BRIGHT)
          )
          {
           int sign=(e->data.but.m.bbits == wimp_BRIGHT) ? -1 : 1;
           switch (e->data.but.m.i)
           {
            case MouseWindow_DragDelayUp:
                 change_dragdelay_by(sign);
                 break;
            case MouseWindow_DragDelayDown:
                 change_dragdelay_by(-sign);
                 break;
            case MouseWindow_DragDistanceDown:
                 change_dragdistance_by(-sign);
                 break;
            case MouseWindow_DragDistanceUp:
                 change_dragdistance_by(sign);
                 break;
            case MouseWindow_DoubleClickDelayDown:
                 change_doubleclickdelay_by(-sign);
                 break;
            case MouseWindow_DoubleClickDelayUp:
                 change_doubleclickdelay_by(sign);
                 break;
            case MouseWindow_DoubleClickDistanceDown:
                 change_doubleclickdistance_by(-sign);
                 break;
            case MouseWindow_DoubleClickDistanceUp:
                 change_doubleclickdistance_by(sign);
                 break;
            case MouseWindow_StepValue1:
                   change_step_tovalue(StepValue1);
                   break;
            case MouseWindow_StepValue1b:
                   change_step_tovalue(StepValue1b);
                   break;
            case MouseWindow_StepValue2:
                   change_step_tovalue(StepValue2);
                   break;
            case MouseWindow_StepValue3:
                   change_step_tovalue(StepValue3);
                   break;
            case MouseWindow_StepValue4:
                   change_step_tovalue(StepValue4);
                   break;
            case MouseWindow_StepValue5:
                   change_step_tovalue(StepValue5);
                   break;

            default:
                 break;
           }
          }
          break;
  case wimp_EKEY:
          if (unknown_configure_key(e->data.key.chcode)) wimp_processkey(e->data.key.chcode);
          else
          {
           wimp_icon i;
           int value=-1;
           wimp_get_icon_info(mouse_window,e->data.key.c.i,&i);
           if (strcmp(i.data.indirecttext.buffer,"")==0) break;
           if (sscanf(i.data.indirecttext.buffer,"%i",&value)!=1) value=0;
           switch (e->data.key.c.i)
           {
            case MouseWindow_DragDelay:
                   change_dragdelay(value);
                   break;
            case MouseWindow_DragDistance:
                   change_dragdistance(value);
                   break;
            case MouseWindow_DoubleClickDelay:
                   change_doubleclickdelay(value);
                   break;
            case MouseWindow_DoubleClickDistance:
                   change_doubleclickdistance(value);
                   break;
           }
/*           if (e->data.key.chcode==13) disown_caret(); */
          }
          break;
 }
}


int mouse_create_window(void)
{
        if (! mouse_window)
        {
                mouse_window=create_window("Mouse",mouse_event_handler,"MO");
#ifdef BLUEROM
                win_add_unknown_event_processor(mouse_unknown_event_handler,NULL);
#endif
        }
        mouse_setstep();
#ifdef BLUEROM
        mouse_settype();
#endif
        mouse_setdragdistance();
        mouse_setdragdelay();
        mouse_setdoubleclickdistance();
        mouse_setdoubleclickdelay();
        return mouse_window;
}

void mouse_update_window(void)
{
        if (mouse_window) mouse_create_window();
}
