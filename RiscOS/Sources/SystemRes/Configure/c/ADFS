/*
 * adfs.c
 *
 * This is the module that handles the ADFS window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"    

#include "configure.h"
#include "adfs.h" 
#include "cmos.h"


#define ADFSWindow_FirstFloppy   3
#define ADFSWindow_FirstHard    12
#define ADFSWindow_Drive        17
#define ADFSWindow_DirCache     19
#define ADFSWindow_Buffers      22

#define ADFSWindow_FloppyUp     7
#define ADFSWindow_FloppyDown   8
#define ADFSWindow_HardUp       11
#define ADFSWindow_HardDown     9

static int adfs_window=0;

static wimp_icreate floppy_icons[4]={};
static int floppy_handles[4]={};
static wimp_icreate hard_icons[4]={};
static int hard_handles[4]={};

static void adfs_geticons(void)
{
        int i;

        for (i=0;i<4;i++)
        { 
                wimp_get_icon_info(adfs_window,i+ADFSWindow_FirstFloppy,&floppy_icons[i].i);
                floppy_icons[i].w=adfs_window;
                floppy_handles[i]=i+ADFSWindow_FirstFloppy;
        }

        for (i=0;i<4;i++)
        { 
                wimp_get_icon_info(adfs_window,i+ADFSWindow_FirstHard,&hard_icons[i].i);
                hard_icons[i].w=adfs_window;
                hard_handles[i]=i+ADFSWindow_FirstHard;
        }

}

static int floppies=4;

static void adfs_setfloppies()
{
        int number=cmos_get(CMOS_ADFSFloppies) & 7;
        int i;

        if (number > floppies)
        {
                for (i=floppies ; i <= (number-1) ; i++)
                {
                        wimp_create_icon(&floppy_icons[i],&floppy_handles[i]);
                        wimp_set_icon_state(adfs_window,floppy_handles[i],0,0);
                }
        }
        else
        {
                for (i=floppies-1 ; i >= number ; i--)
                {
                        redraw_icon(adfs_window,&floppy_icons[i].i); 
                        wimp_delete_icon(adfs_window,floppy_handles[i]);
                }
        }              

        floppies=number;
 
}

static int harddiscs=4;

static void adfs_setharddiscs()
{
        int number=(cmos_get(CMOS_ADFSHardDiscs)>>3) & 7;
        int i;
        
        if (number > harddiscs)
        {
                for (i=harddiscs ; i <= number-1 ;i++)
                {
                        wimp_create_icon(&hard_icons[i],&hard_handles[i]);
                        wimp_set_icon_state(adfs_window,hard_handles[i],0,0);
                }
        }
        else
        {
                for (i=harddiscs-1 ; i >= number ; i--)
                {
                        redraw_icon(adfs_window,&hard_icons[i].i); 
                        wimp_delete_icon(adfs_window,hard_handles[i]);
                }
        }
        
        harddiscs=number;
}

static void adfs_setdrive()
{
        int drive=cmos_get(CMOS_ADFSDrive) & 7;
        wimp_icon i;

        wimp_get_icon_info(adfs_window,ADFSWindow_Drive,&i);
        sprintf(i.data.indirecttext.buffer,"%1i",drive);
        wimp_set_icon_state(adfs_window,ADFSWindow_Drive,0,0);
}

static void adfs_setcache()
{
        int size=cmos_get(CMOS_ADFSDirCache);
        wimp_icon i;

        wimp_get_icon_info(adfs_window,ADFSWindow_DirCache,&i);
        sprintf(i.data.indirecttext.buffer,"%i",size);
        wimp_set_icon_state(adfs_window,ADFSWindow_DirCache,0,0);
}

static void adfs_setbuffers()
{
        int size=cmos_get(CMOS_ADFSBuffers);
        wimp_icon i;

        wimp_get_icon_info(adfs_window,ADFSWindow_Buffers,&i);
        sprintf(i.data.indirecttext.buffer,"%i",size);
        wimp_set_icon_state(adfs_window,ADFSWindow_Buffers,0,0);
}


static void change_floppy(int dir)
{
        int byte=cmos_get(CMOS_ADFSFloppies);
        int current=(byte & 7)+dir;
        if ((current<0) || (current > 4)) return;
        cmos_set(CMOS_ADFSFloppies,(byte & ~7) | current);
        adfs_setfloppies();
}

static void change_hard(int dir)
{
        int byte=cmos_get(CMOS_ADFSHardDiscs);
        int current=( (byte >> 3) & 7)+dir;
        if ((current<0) || (current > 2)) return;
        cmos_set(CMOS_ADFSHardDiscs,(byte & ~(7<<3)) | (current<<3));
        adfs_setharddiscs();
}

static void change_drive(int drive)
{
        int byte=cmos_get(CMOS_ADFSDrive);
        if ((drive>=0) && (drive<=7)) 
                cmos_set(CMOS_ADFSDrive,(byte & ~7) | drive);
        adfs_setdrive();
}

static void change_cache(int size)
{
        if ((size>=0) && (size<=255)) 
                cmos_set(CMOS_ADFSDirCache,size);
        adfs_setcache();
}

static void change_buffers(int size)
{
        if ((size>=0) && (size<=255)) 
                cmos_set(CMOS_ADFSBuffers,size);
        adfs_setbuffers();
}


static void adfs_event_handler(wimp_eventstr *e,void *handle)
{
        int w=(int)handle;

        switch (e->e)
        {
        case wimp_EOPEN:
                wimp_open_wind(&e->data.o);
                break;
        case wimp_ECLOSE:
               {
                wimp_mousestr m;
                wimp_get_point_info(&m);
                if (m.bbits==wimp_BRIGHT) 
                {
                        wimp_wstate s;
                        wimp_get_wind_state(adfs_window,&s);
                        reopen_main_window(s.o.box.x0,s.o.box.y1);
                }
                wimp_close_wind(w);
                win_register_event_handler(w,0,0);
                wimp_delete_wind(w);
                adfs_window=0;
                floppies=4;
                harddiscs=4;
               }
                break;
        case wimp_EBUT:
                if ( (e->data.but.m.bbits == wimp_BLEFT) ||
                     (e->data.but.m.bbits == wimp_BRIGHT)
                   )
                {      
                        int sign=(e->data.but.m.bbits == wimp_BRIGHT) ? 1 : -1;
                        switch (e->data.but.m.i)
                        {
                        case ADFSWindow_FloppyUp:
                                change_floppy(-sign);
                                break;
                        case ADFSWindow_FloppyDown:
                                change_floppy(sign);
                                break;
                        case ADFSWindow_HardUp:
                                change_hard(-sign);
                                break;
                        case ADFSWindow_HardDown:
                                change_hard(sign);
                                break;
                        default:
                                break;
                        }
                }
                break;
        case wimp_EKEY:
                if (e->data.key.chcode != 13) wimp_processkey(e->data.key.chcode);
                else  
                { 
                        wimp_icon i;
                        int value;
                        wimp_get_icon_info(adfs_window,e->data.key.c.i,&i);
                        sscanf(i.data.indirecttext.buffer,"%i",&value);
                        switch (e->data.key.c.i)
                        {
                        case ADFSWindow_Drive:
                                change_drive(value);
                                break;
                        case ADFSWindow_DirCache:
                                change_cache(value);
                                break;
                        case ADFSWindow_Buffers:
                                change_buffers(value);
                                break;  
                        }
                        disown_caret();
                }
                break;
        }
}


int adfs_create_window(void)
{
        if (! adfs_window)
        {
                adfs_window=create_window("ADFS",adfs_event_handler);
                adfs_geticons();
        }
        adfs_setfloppies();
        adfs_setharddiscs();
        adfs_setdrive();
        adfs_setbuffers();
        adfs_setcache();

        return adfs_window;
}

void adfs_update_window(void)
{
        if (adfs_window) adfs_create_window();
}
