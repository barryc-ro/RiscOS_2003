/*
 * econet.c
 *
 * This is the module that handles the Econet window.
 *
 */


#include "inetsetup.h"
#ifndef UseInetSetup

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"
#include "visdelay.h"
#include "help.h"

#include "configure.h"
#include "econet.h"
#include "cmos.h"


#define EconetWindow_Station           2
#define EconetWindow_FileServer        5
#define EconetWindow_FSMenuButton      6
#define EconetWindow_PrinterServer     9
#define EconetWindow_PSMenuButton     10
#define EconetWindow_Boot             11
#define EconetWindow_BroadcastEnable  14
#define EconetWindow_ColourHourglass  15

extern int current_menu;
static menu econet_menu=NULL;

static int econet_window=0;

static void econet_setstation()
{
 _kernel_swi_regs r;
 wimp_icon i;

 _kernel_swi(XOS_Bit | Econet_ReadLocalStationAndNet,&r,&r);
 wimp_get_icon_info(econet_window,EconetWindow_Station,&i);
 sprintf(i.data.indirecttext.buffer,"%i.%i",r.r[1],r.r[0]);
 wimp_set_icon_state(econet_window,EconetWindow_Station,0,0);
}

static void econet_setfileserver()
{
 wimp_icon i;
 wimp_caretstr c;
 char s=cmos_get(CMOS_FileServer) & 0xff;
 wimp_get_icon_info(econet_window,EconetWindow_FileServer,&i);
 wimp_get_caret_pos(&c);

 if (s != 0)
 {
  int n=cmos_get(CMOS_FileServer+1);
  sprintf(i.data.indirecttext.buffer,"%i.%i",n,s);
 }
 else
 {
  char *c=i.data.indirecttext.buffer;
  int i;
  *c++=cmos_get(CMOS_FileServer+1);
  for (i=CMOS_FileServerName;i <= CMOS_FileServerName+14 ; i++)
       *c++=(char)cmos_get(i);
 }
 c.index=-1;
 wimp_set_caret_pos(&c);
 wimp_set_icon_state(econet_window,EconetWindow_FileServer,0,0);
}

static void econet_setprinterserver()
{
 wimp_icon i;
 wimp_caretstr c;
 char s=cmos_get(CMOS_PrinterServer) & 0xff;
 wimp_get_icon_info(econet_window,EconetWindow_PrinterServer,&i);
 wimp_get_caret_pos(&c);

 if (s != 0)
 {
  int n=cmos_get(CMOS_PrinterServer+1);
  sprintf(i.data.indirecttext.buffer,"%i.%i",n,s);
 }
 else
 {
  char *c=i.data.indirecttext.buffer;
  int i;
  *c++=cmos_get(CMOS_PrinterServer+1);
  for (i=CMOS_PrinterServerName;i <= CMOS_PrinterServerName+4 ; i++)
       *c++=(char)cmos_get(i);
 }
 c.index=-1;
 wimp_set_caret_pos(&c);
 wimp_set_icon_state(econet_window,EconetWindow_PrinterServer,0,0);
}

static void change_fileserver(char *name)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 wimp_icon i;
 wimp_get_icon_info(econet_window,EconetWindow_FileServer,&i);
 r.r[1]=(int)name;

  r.r[2]=r.r[3]=-1;

 if ( (*name >= '0') && (*name <= '9') &&
      (e=_kernel_swi(XOS_Bit | Econet_ReadStationNumber,&r,&r), e != NULL)
    )
 {
  werr(0,e->errmess);
  return;
 }

 if ((r.r[2]==-1) && (r.r[3]==-1))  /* Found a name */
 {
  char *c=name;
  int i;
  cmos_set(CMOS_FileServer,0);
  cmos_set(CMOS_FileServer+1,*c++);
  for (i=CMOS_FileServerName;i <= CMOS_FileServerName+14 ; i++)
  {
   cmos_set(i,(*c)<32 ? 0 : *c++);
  }
 } else
 {
  if ((r.r[2]==-1) || (r.r[3]==-1)) /* Missing element */
     werr(0,msgs_lookup("ER0"));
  else
  {
   cmos_set(CMOS_FileServer,r.r[2]);
   cmos_set(CMOS_FileServer+1,r.r[3]);
  }
 }
 econet_setfileserver();
}


static void change_printerserver(char *name)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 wimp_icon i;
 wimp_get_icon_info(econet_window,EconetWindow_PrinterServer,&i);
 r.r[1]=(int)name;
  r.r[2]=-1;
  r.r[3]=-1;
 if ((*name >= '0') && (*name <= '9') &&
     (e=_kernel_swi(XOS_Bit | Econet_ReadStationNumber,&r,&r), e != NULL)
    )
 {
  werr(0,e->errmess);
  return;
 }

 if ((r.r[2]==-1) && (r.r[3]==-1)) /* Found a name */
 {
  char *c=name;
  int i;
  cmos_set(CMOS_PrinterServer,0);
  cmos_set(CMOS_PrinterServer+1,*c++);
  for (i=CMOS_PrinterServerName;i <= CMOS_PrinterServerName+4 ; i++)
   cmos_set(i,(*c)<32 ? 0 : *c++);
 } else
 {
  if ((r.r[2]==-1) || (r.r[3]==-1)) /* Missing element */
     werr(0,msgs_lookup("ER0"));
  else
  {
   cmos_set(CMOS_PrinterServer,r.r[2]);
   cmos_set(CMOS_PrinterServer+1,r.r[3]);
  }
 }
 econet_setprinterserver();
}

static void econet_setboot(void)
{
 int type=(cmos_get(CMOS_EconetBootType) >> 1) & 1;
 wimp_set_icon_state(econet_window,EconetWindow_Boot,type ? wimp_ISELECTED : 0,wimp_ISELECTED);
}

static void econet_setbroadcastenable(void)
{
 int type=1-((cmos_get(CMOS_BroadcastLoader) >> 6) & 1);
 char command[256];
 wimp_set_icon_state(econet_window,
                     EconetWindow_BroadcastEnable,
                     type ? wimp_ISELECTED : 0,wimp_ISELECTED
                    );
 wimp_set_icon_state(econet_window,
                     EconetWindow_ColourHourglass,
                     type ? 0 :  wimp_INOSELECT ,wimp_INOSELECT
                     );
 sprintf(command,"RMReinit BroadcastLoader");
 _kernel_oscli(command); /* Ignore errors since this gives an error if disabled */
}

static void econet_setcolourhourglass(void)
{
 int type=(cmos_get(CMOS_BroadcastLoader) >> 7) & 1;
 wimp_set_icon_state(econet_window,
                     EconetWindow_ColourHourglass,
                     type ? wimp_ISELECTED : 0,wimp_ISELECTED
                    );
}


static void change_boot(void)
{
 int byte=cmos_get(CMOS_EconetBootType) ^ 2;
 cmos_set(CMOS_EconetBootType,byte);
 econet_setboot();
}

static void change_broadcastenable(void)
{
 int byte=cmos_get(CMOS_BroadcastLoader) ^ (1<<6);
 cmos_set(CMOS_BroadcastLoader,byte);
 econet_setbroadcastenable();
}

static void change_colourhourglass(void)
{
 int byte=cmos_get(CMOS_BroadcastLoader) ^ (1<<7);
 cmos_set(CMOS_BroadcastLoader,byte);
 econet_setcolourhourglass();
}

/* If RISC_OSLib provided a function to unpick menu structures I would put the
 * menu string in the help entry.  As it is, I would have to unpick it myself
 * or cache it elsewhere (the enumeration process is too slow to go through each
 * time we get a help event).  So I'll settle for a single help string for the
 * whole menu.
 */

static void create_fsmenu(int adjust)
{
        _kernel_swi_regs r;
        char buf[50];

        if (!adjust)
        {
                visdelay_begin();
                if (econet_menu != NULL) menu_dispose(&econet_menu,TRUE);
                econet_menu=NULL;

                /* Force NetFS to update its FS cache. */
                _swix( NetFS_UpdateFSList, _IN(0)|_IN(1), 0, 0 );

                r.r[0]=0;
                while (r.r[0] != -1)
                {
                        r.r[1]=(int)buf;
                        r.r[2]=50;
                        r.r[3]=1;

                        if ( (_kernel_swi(XOS_Bit | NetFS_EnumerateFSList,&r,&r)) || ((r.r[3]==0) && (econet_menu==NULL)) )
                        {
                                /* Re-enable suspended NetFS event task. */
                                _swix( NetFS_EnableCache, 0 );
                                visdelay_end();
                                return;
                        }

                        if (econet_menu==NULL)
                                econet_menu=menu_new(msgs_lookup("FSTitle"),buf+3);
                        else
                                menu_extend(econet_menu,buf+3);
                }

                /* Re-enable suspended NetFS event task. */
                _swix( NetFS_EnableCache, 0 );
                visdelay_end();
        }

        open_button_menu( Menu_FS, econet_window, EconetWindow_FSMenuButton, menu_syshandle( econet_menu ), "MHFS" );
}

static void create_psmenu(int adjust)
{
        char buf[1000];
        int i;
        int n;
        char *pos;

        if (!adjust)
        {
                event_clear_current_menu();
                if (econet_menu != NULL) menu_dispose(&econet_menu,TRUE);
                econet_menu=NULL;

                /* Use NetPrint_ListServers just the way God intended! */

                wimpt_noerr( (os_error *)_swix( NetPrint_ListServers, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_OUT(0),
                        1, buf, sizeof( buf ), 500, &n ));

                pos = buf;
                for ( i=0; i<n; i++ )
                {
                        if ( !econet_menu )
                                econet_menu = menu_new( msgs_lookup("PSTitle"), pos );
                        else
                                menu_extend( econet_menu, pos );

                        pos += strlen( pos ) + 1;
                }
        }

        open_button_menu( Menu_PS, econet_window, EconetWindow_PSMenuButton, menu_syshandle( econet_menu ), "MHPS" );
}




static int econet_unknown_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;
        switch (e->e)
        {
        case wimp_EMENU:
               {
                int i;
                char buf[30];
                _kernel_swi_regs r;
                wimp_mousestr m;
                if ( current_menu != Menu_FS && current_menu != Menu_PS ) return FALSE;
                r.r[1]=(int)menu_syshandle(econet_menu);
                r.r[2]=(int)e->data.menu;
                r.r[3]=(int)buf;
                _kernel_swi(XOS_Bit | Wimp_DecodeMenu,&r,&r);
                for (i=0;i<30;i++) if (buf[i]<32) buf[i]=0;

                if (current_menu==Menu_FS) change_fileserver(buf);
                if (current_menu==Menu_PS) change_printerserver(buf);
                wimp_get_point_info(&m);
                if ((m.bbits & wimp_BRIGHT) && (current_menu==Menu_FS))  create_fsmenu(1);
                if ((m.bbits & wimp_BRIGHT) && (current_menu==Menu_PS))  create_psmenu(1);
               }
                break;
        }
        return FALSE;
}

static void econet_event_handler(wimp_eventstr *e,void *handle)
{
        handle=handle;

        switch (e->e)
        {
        case wimp_EOPEN:
                wimp_open_wind(&e->data.o);
                break;
        case wimp_ECLOSE:
               {
                wimp_mousestr m;
                wimp_get_point_info(&m);
                if (m.bbits==wimp_BRIGHT)
                {
                        wimp_wstate s;
                        wimp_get_wind_state(econet_window,&s);
                        reopen_main_window(s.o.box.x0,s.o.box.y1);
                }
                delete_window( &econet_window );
                win_remove_unknown_event_processor(econet_unknown_event_handler,NULL);
               }
                break;
        case wimp_EBUT:
                if ( (e->data.but.m.i==EconetWindow_FSMenuButton)  &&
                     ((e->data.but.m.bbits & (wimp_BLEFT | wimp_BMID)) != 0)
                   )
                {
                        create_fsmenu(0);
                }

                if ( (e->data.but.m.i==EconetWindow_PSMenuButton) &&
                     ((e->data.but.m.bbits & (wimp_BLEFT | wimp_BMID)) != 0)
                   )
                {
                      create_psmenu(0);
                }

                if ( (e->data.but.m.bbits == wimp_BLEFT) ||
                     (e->data.but.m.bbits == wimp_BRIGHT)
                   )
                {
                        switch (e->data.but.m.i)
                        {
                        case EconetWindow_Boot:
                                change_boot();
                                break;
                        case EconetWindow_BroadcastEnable:
                                change_broadcastenable();
                                break;
                        case EconetWindow_ColourHourglass:
                                change_colourhourglass();
                                break;
                        default:
                                break;
                        }
                }
                break;
        case wimp_EKEY:
                if (unknown_configure_key(e->data.key.chcode))
                {
                        wimp_processkey(e->data.key.chcode);
                }
                else
                {
                        wimp_icon i;
                        wimp_get_icon_info(econet_window,e->data.key.c.i,&i);
                        switch (e->data.key.c.i)
                        {
                        case EconetWindow_FileServer:
                                if (e->data.key.chcode == 13) change_fileserver(i.data.indirecttext.buffer);
                                break;
                        case EconetWindow_PrinterServer:
                                if (e->data.key.chcode == 13) change_printerserver(i.data.indirecttext.buffer);
                                break;
                        default:
                                break;
                        }
                }
                break;
        }
}




int econet_create_window(void)
{
        if (! econet_window)
        {
                econet_window=create_window("Econet",econet_event_handler,"EC");
                win_add_unknown_event_processor(econet_unknown_event_handler,NULL);
        }
        econet_setstation();
        econet_setfileserver();
        econet_setprinterserver();
        econet_setboot();
        econet_setbroadcastenable();
        econet_setcolourhourglass();
        return econet_window;
}

void econet_update_window(void)
{
        if (econet_window) econet_create_window();
}

#endif /* ifndef UseInetSetup */
