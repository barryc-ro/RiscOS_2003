/*
 * version.c
 *
 * Handles all os-version requirements.
 *
 * J R C 9th Nov 1994 Written
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "msgs.h"
#include "os.h"
#include "swis.h"
#include "werr.h"

#include "version.h"

#define TABLE_LIMIT 20

static int Count;
static struct {int version; char date [5];} Table [TABLE_LIMIT];

static int Later (char *t1, char *t2)

{  return
      t1 [4] > t2 [4]? 1: t1 [4] < t2 [4]? 0:
      t1 [3] > t2 [3]? 1: t1 [3] < t2 [3]? 0:
      t1 [2] > t2 [2]? 1: t1 [2] < t2 [2]? 0:
      t1 [1] > t2 [1]? 1: t1 [1] < t2 [1]? 0:
      t1 [0] > t2 [0];
}

os_error *version_read_dates (void)

   /*Reads all version info into a private data structure.*/

{  struct msgtrans_control_block *cb;
   int context, ordinals [9], more;
   os_error *error = NULL;
   char token [20];

   cb = msgs_main_control_block ();
   Count = 0;

   context = 0;
   while (TRUE)
   {  if ((error = _swix (MessageTrans_EnumerateTokens,
            _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_OUT(2)|_OUT(4), cb, "OS*",
            token, sizeof token, context, &more, &context)) != NULL)
         goto finish;
      if (!more) break;

      if (Count > TABLE_LIMIT)
      {  werr (FALSE, "TOO MANY OSSES");
         break;
      }

      /*version*/
      sscanf (token + 2, "%d", &Table [Count].version);

      /*date*/
      if ((error = _swix (Territory_ConvertTimeStringToOrdinals,
            _IN(0)|_IN(1)|_IN(2)|_IN(3), -1, 2, msgs_lookup (token),
            ordinals)) != NULL)
         goto finish;
      ordinals [0] = ordinals [1] = ordinals [2] = ordinals [3] = 0;
         /*were -1*/
      if ((error = _swix (Territory_ConvertOrdinalsToTime,
            _IN(0)|_IN(1)|_IN(2), -1, Table [Count].date, ordinals)) != NULL)
         goto finish;

      Count++;
   }

finish:
   return error;
}

int version_from_date (char *date)

   /*Return the os version corresponding to a given date.*/

{  int i, v = 0;

   for (i = Count - 1; i >= 0; i--)
      if (Later (date, Table [i].date))
      {  v = Table [i].version;
         break;
      }

   return v;
}
