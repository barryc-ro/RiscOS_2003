/*
 * apps.c
 *
 * This is the module that handles the Apps window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"    

#include "configure.h"
#include "apps.h" 
#include "cmos.h"

/* Icon numbers.  The numbers in AppsTable[] should not clash with the
 * ones for All and None.
 */

#define AppsWindow_All         16
#define AppsWindow_None        17

#define BatManIcon1             18
#define BatManIcon2             19

static struct
{
        unsigned char tickicon, labelicon;
        unsigned char cmos_bit; 
} AppsTable[] =
{
         0,  1, CMOS_AlarmBit,
         2,  3, CMOS_CalcBit,
         4,  5, CMOS_CharsBit,
         6,  7, CMOS_ConfigureBit,
         8,  9, CMOS_DrawBit,
        10, 11, CMOS_EditBit,
        12, 13, CMOS_HelpBit,
        14, 15, CMOS_PaintBit,
        BatManIcon1, BatManIcon2, CMOS_BatManBit,
};
#define NAPPS (sizeof(AppsTable) / sizeof(AppsTable[0]))

static int apps_window=0;

static int readbit(int bit)
{
 if  ( bit < 8 ) 
      return (cmos_get(CMOS_RomApps) >> bit ) & 1;
 else return (( cmos_get(CMOS_RomApps+1) >> (bit-8) ) & 1);
}

static void togglebit(int bit)
{
 int byte=(bit <8) ? cmos_get(CMOS_RomApps) : cmos_get(CMOS_RomApps+1);
 byte ^= 1<<(bit % 8);
 if (portable || bit != CMOS_BatManBit)
  cmos_set( (bit <8) ? CMOS_RomApps : CMOS_RomApps+1 ,byte);
}

/* Set the icon associated with an app according to its CMOS bit.
 * The parameter is the slot number in AppsTable.
 */

static void apps_setapp (int slot)
{                                 
    if (portable || AppsTable[slot].cmos_bit != CMOS_BatManBit)
        wimp_set_icon_state (apps_window, AppsTable[slot].tickicon,
                             readbit(AppsTable[slot].cmos_bit) ? wimp_ISELECTED : 0,
                             wimp_ISELECTED);
}

static void apps_resetall()
{
    int slot;
    for (slot = 0; slot < NAPPS; slot++)
        apps_setapp (slot);
}

static void change_all()
{
 cmos_set(CMOS_RomApps,0xff);
 cmos_set(CMOS_RomApps+1,0xff);
 apps_resetall();
}

static void change_none()
{
 cmos_set(CMOS_RomApps,0);
 cmos_set(CMOS_RomApps+1,0);
 apps_resetall();
}

static void apps_event_handler(wimp_eventstr *e,void *handle)
{
    handle=handle;

    switch (e->e)
    {
    case wimp_EOPEN:
        wimp_open_wind(&e->data.o);
        break;
    case wimp_ECLOSE:
    {
        wimp_mousestr m;
        wimp_get_point_info(&m);
        if (m.bbits==wimp_BRIGHT) 
        {
            wimp_wstate s;
            wimp_get_wind_state(apps_window,&s);
            reopen_main_window(s.o.box.x0,s.o.box.y1);
        }
        delete_window( &apps_window );
    }
        break;
    case wimp_EBUT:
        if ((e->data.but.m.bbits==wimp_BRIGHT) ||
            (e->data.but.m.bbits==wimp_BLEFT)
            )
        {
            switch (e->data.but.m.i)
            {
            case AppsWindow_All:
                change_all();
                break;
            case AppsWindow_None:
                change_none();
                break;
            default:
                {
                    int slot;
                    for (slot = 0; slot < NAPPS; slot++)
                        if (e->data.but.m.i == AppsTable[slot].tickicon ||
                            e->data.but.m.i == AppsTable[slot].labelicon)
                        {
                            togglebit (AppsTable[slot].cmos_bit);
                            apps_setapp (slot);
                            break;
                        }
                    /* if icon is unknown, ignore */
                }
            }
        }
        break;
    }
}

static void apps_check_portable (void)
{
        if (check_portable())
        {
                wimp_set_icon_state(apps_window,BatManIcon1,0,wimp_IDELETED);
                wimp_set_icon_state(apps_window,BatManIcon2,0,wimp_IDELETED);
        }
        else
        {
                wimp_icon icon;

                wimp_get_icon_info(apps_window, BatManIcon1, &icon);
                redraw_icon(apps_window, &icon); 
                wimp_set_icon_state(apps_window,BatManIcon1,wimp_IDELETED,wimp_IDELETED);

                wimp_get_icon_info(apps_window, BatManIcon2, &icon);
                redraw_icon(apps_window, &icon); 
                wimp_set_icon_state(apps_window,BatManIcon2,wimp_IDELETED,wimp_IDELETED);
        }
}

int apps_create_window(void)
{
        if (! apps_window)
        {
                apps_window=create_window("Apps",apps_event_handler,"AP");
        }
        apps_check_portable();
        apps_resetall();
        return apps_window;
}

void apps_update_window(void)
{
        if (apps_window) apps_create_window();
}
