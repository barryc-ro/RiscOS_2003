/*
 * floppies.c
 *
 * This is the module that handles the floppies window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"    
#include "visdelay.h"

#include "configure.h"
#include "floppies.h" 
#include "cmos.h"
#include "filer.h"


#define FloppiesWindow_FirstFloppy   2

#define FloppiesWindow_FloppyUp     6
#define FloppiesWindow_FloppyDown   7
#define FloppiesWindow_OK           8

static int floppies_window=0;

static wimp_icreate floppy_icons[4]={};
static int floppy_handles[4]={};

static void floppies_geticons(void)
{
 int i;

 for (i=0;i<4;i++)
 { 
  wimp_get_icon_info(floppies_window,i+FloppiesWindow_FirstFloppy,&floppy_icons[i].i);
  floppy_icons[i].w=floppies_window;
  floppy_handles[i]=i+FloppiesWindow_FirstFloppy;
 }

}

static int floppies=4;
static int current_floppies=0;

static void floppies_setfloppies()
{
 int number=current_floppies;
 int i;

 if (number > floppies)
 {
  for (i=floppies ; i <= (number-1) ; i++)
  {
   wimp_create_icon(&floppy_icons[i],&floppy_handles[i]);
   wimp_set_icon_state(floppies_window,floppy_handles[i],0,0);
  }
 }
 else
 {
  for (i=floppies-1 ; i >= number ; i--)
  {
   redraw_icon(floppies_window,&floppy_icons[i].i); 
   wimp_delete_icon(floppies_window,floppy_handles[i]);
  }
 }              

 floppies=number;
 
}


static void restart_filers(void)
{
 visdelay_begin();

 _kernel_oscli("RMReinit ADFS");
 _kernel_oscli("RMReinit ADFSFiler");
 filer_restart_filers();

 visdelay_end();
}

static void set_filers(void)
{
 _kernel_swi_regs r;
 os_error e;
 strcpy(e.errmess,msgs_lookup("DiscConf"));
 e.errnum=0;
 r.r[0]=(int)&e;
 r.r[1]=3 + (1<<4);
 r.r[2]=(int)msgs_lookup("Warn");
 _kernel_swi(Wimp_ReportError,&r,&r);
 if (r.r[1]==1)
 {
  int byte=cmos_get(CMOS_ADFSFloppies);
  cmos_set(CMOS_ADFSFloppies,(byte & ~7) | current_floppies);
  restart_filers();
 }
}


static void change_floppy(int dir)
{
 int current=current_floppies+dir;
 if ((current<0) || (current > 4)) return;
 current_floppies=current;
 floppies_setfloppies();
}


static void floppies_event_handler(wimp_eventstr *e,void *handle)
{
 handle=handle;

 switch (e->e)
 {
  case wimp_EOPEN:
       wimp_open_wind(&e->data.o);
       break;
  case wimp_ECLOSE:
       {
        wimp_mousestr m;
        wimp_get_point_info(&m);
        if (m.bbits==wimp_BRIGHT) 
        {
         wimp_wstate s;
         wimp_get_wind_state(floppies_window,&s);
         reopen_main_window(s.o.box.x0,s.o.box.y1);
        }
        delete_window( &floppies_window );
        floppies=4;
       }
       break;
  case wimp_EBUT:
       if ( (e->data.but.m.bbits == wimp_BLEFT) ||
            (e->data.but.m.bbits == wimp_BRIGHT)
          )
          {      
           int sign=(e->data.but.m.bbits == wimp_BRIGHT) ? 1 : -1;
           switch (e->data.but.m.i)
           {
            case FloppiesWindow_FloppyUp:
                 change_floppy(-sign);
                 break;
            case FloppiesWindow_FloppyDown:
                 change_floppy(sign);
                 break;
            case FloppiesWindow_OK:
                 set_filers();
                 break;
            default:
                 break;
           }
          }
          break;
 }
}


int floppies_create_window(void)
{
 if (! floppies_window)
 {
  floppies_window=create_window("Floppies",floppies_event_handler,"FL");
  floppies_geticons();
  current_floppies=cmos_get(CMOS_ADFSFloppies) & 7;

 }
 floppies_setfloppies();
 return floppies_window;
}

void floppies_update_window(void)
{
 if (floppies_window) floppies_create_window();
}
