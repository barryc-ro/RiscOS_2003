/*
 * printer.c
 *
 * This is the module that handles the Printer window. 
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "template.h"
#include "msgs.h"
#include "menu.h"
#include "res.h"
#include "resspr.h"
#include "dbox.h"    

#include "configure.h"
#include "printer.h" 
#include "cmos.h"

#define PrinterWindow_FirstPort        2  /* 2-5 */
#define PrinterWindow_Ignore           6
#define PrinterWindow_IgnoreValue      7

static int printer_window=0;

static void printer_setport(void)
{
 int i,type=(cmos_get(CMOS_PrinterPort) >> 5) & 7;
 if (type==4) type = 3;
 if (type>3) return;

 for (i=0 ; i<= 3 ; i++)
 wimp_set_icon_state( printer_window,
                      i+PrinterWindow_FirstPort,
                      i==type ? wimp_ISELECTED : 0,
                      wimp_ISELECTED
                    );
}

static void printer_setignore(void)
{
 int ignore=!((cmos_get(CMOS_PrinterIgnore) >> 1) & 1);
 int ch=cmos_get(CMOS_PrinterIgnoreChar);
 wimp_icon i;
 wimp_caretstr c;
 wimp_set_icon_state(printer_window,PrinterWindow_Ignore,(ignore ? wimp_ISELECTED : 0), wimp_ISELECTED);
 wimp_get_icon_info(printer_window,PrinterWindow_IgnoreValue,&i);
 wimp_get_caret_pos(&c);
 sprintf(i.data.indirecttext.buffer,"%i",ch);
 c.index=-1;
 wimp_set_caret_pos(&c);
 wimp_set_icon_state(printer_window,PrinterWindow_IgnoreValue, 0 , wimp_INOSELECT);
 if (!ignore)
 {
  wimp_set_icon_state(printer_window,PrinterWindow_IgnoreValue, wimp_INOSELECT , wimp_INOSELECT);
  if ((c.w==printer_window) && (c.i==PrinterWindow_IgnoreValue))
  {
   c.i=c.w=-1;
   wimp_set_caret_pos(&c);
  }
 }
}

static void change_port(int value)
{
 int byte=cmos_get(CMOS_PrinterPort);
 if (value==3) value++;
 cmos_set(CMOS_PrinterPort,(byte & ~(7<<5)) | (value<<5));
 printer_setport();
}

static void change_ignore()
{
 int ignore=cmos_get(CMOS_PrinterIgnore) ^ 2;
 cmos_set(CMOS_PrinterIgnore,ignore);
 printer_setignore();
}

static void change_ignorechar(int value)
{
 if ((value >= 0) && (value <=255))
   cmos_set(CMOS_PrinterIgnoreChar,value);
 printer_setignore();
}


static void printer_event_handler(wimp_eventstr *e,void *handle)
{
 handle=handle;

 switch (e->e)
 {
  case wimp_EOPEN:
       wimp_open_wind(&e->data.o);
       break;
  case wimp_ECLOSE:
       {
        wimp_mousestr m;
        wimp_get_point_info(&m);
        if (m.bbits==wimp_BRIGHT) 
        {
         wimp_wstate s;
         wimp_get_wind_state(printer_window,&s);
         reopen_main_window(s.o.box.x0,s.o.box.y1);
        }
        delete_window( &printer_window );
       }
       break;
  case wimp_EBUT:
          if ((e->data.but.m.bbits==wimp_BRIGHT) ||
              (e->data.but.m.bbits==wimp_BLEFT)
             )
          {
           if ((e->data.but.m.i >= PrinterWindow_FirstPort) && 
               (e->data.but.m.i <= PrinterWindow_FirstPort+3)
              )
           {
            change_port(e->data.but.m.i-PrinterWindow_FirstPort);
           }
           else
            {
             switch (e->data.but.m.i)
             {
              case PrinterWindow_Ignore:
                  change_ignore();
                  break;
             }
            }
          }
          break;
  case wimp_EKEY:
          if (unknown_configure_key(e->data.key.chcode)) wimp_processkey(e->data.key.chcode);
          else  
          { 
           wimp_icon i;
           wimp_get_icon_info(printer_window,e->data.key.c.i,&i);
           if (e->data.key.c.i == PrinterWindow_IgnoreValue)
           {
            wimp_icon i;
            int value=-1;
            wimp_get_icon_info(printer_window,PrinterWindow_IgnoreValue,&i);
            if (sscanf(i.data.indirecttext.buffer,"%i",&value)!=1) value=0; 
            change_ignorechar(value);
           }
          }
          break;
 }
}


int printer_create_window(void)
{
 if (! printer_window)
 {
  printer_window=create_window("Printer",printer_event_handler,"PR");
 }
 printer_setport();
 printer_setignore();
 return printer_window;
}

void printer_update_window(void)
{
 if (printer_window) printer_create_window();
}
