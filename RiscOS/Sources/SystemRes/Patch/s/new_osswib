
lk	RN 14

a1	RN 0
a2	RN 1
a3	RN 2
a4	RN 3

v1	RN 4
v2	RN 5
v3	RN 6
v4	RN 7
v5	RN 8
v6	RN 9

XOS_MASK	* &20000
OS_CallASWIR12	* &71
XOS_CallASWIR12	* &20071

	AREA	|asm$$code|,CODE,READONLY
	EXPORT	rolib2

rolib2	DCD	os_swi

; void os_swi(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swi  STMFD   sp!, {a2,v1-v6,lk}
        MOV     ip, a1
	TEQ	a2, #0
	BEQ	os_swi_no_regset
	LDMIA	a2,{r0-r9}
	SWI	OS_CallASWIR12
	LDR	ip,[sp],#4
	STMIA	ip,{r0-r9}
	LDMFD	sp!,{v1-v6,pc}^
os_swi_no_regset
        SWI     XOS_CallASWIR12
        LDMIB   sp!, {v1-v6,pc}^		; Skips stored a2!


; os_error *os_swix(int swicode, os_regset* /*inout*/);

; In    a1 contains swi number, a2 points to ARM register structure

os_swix STMDB   sp!, {a2,v1-v6, lk}

        ORR     ip, a1, #XOS_MASK       ; make a SWI of V-error type
	TEQ	a2, #0
	BEQ	os_swix_no_regset
	LDMIA	a2,{r0-r9}
	SWI	XOS_CallASWIR12
	LDR	ip,[sp],#4
	STMIA	ip,{r0-r9}
	MOVVC	a1,#0
	LDMIA	sp!,{v1-v6,pc}^
os_swix_no_regset
	SWI	XOS_CallASWIR12
	MOVVC	a1,#0
	LDMIB	sp!,{v1-v6,pc}^		; Skips stored a2!
	NOP

os_swix0
os_swix1
os_swix2
os_swix3
os_swix4
os_swix5
os_swix6
        ORR     a1, a1, #XOS_MASK
os_swi0
os_swi1
os_swi2
os_swi3
os_swi4
os_swi5
os_swi6
        STMDB   sp!, {v1-v6, lk}
	MOV	ip, a1
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1, v2}
	SWI	OS_CallASWIR12
	MOVVC	a1, #0
	LDMIA	sp!, {v1-v6, pc}^
	NOP
	NOP
	NOP
	NOP

os_swix1r
        ORR     a1, a1, #&20000
os_swi1r
        STMDB   sp!, {a3, v1-v6, lk}
        MOV     r12, r0
        MOV     r0, a2
        SWI     XOS_CallASWIR12
        LDR     ip, [sp], #4
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     ip, #0
        STRNE   a1, [ip]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
	NOP
	NOP

os_swix2r
        ORR     a1, a1, #&20000
os_swi2r
        STMDB   sp!, {a4, v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        SWI     XOS_CallASWIR12
        LDR     ip, [sp],#4
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     ip, #0
        STRNE   a1, [ip]
        LDR     ip, [sp, #7 * 4]
        TEQ     ip, #0
        STRNE   a2, [ip]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
	NOP
	NOP
	NOP

os_swix3r
        ORR     a1, a1, #&20000
os_swi3r
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #7 * 4
        LDMIA   ip, {v1, v2, v3}
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
	NOP
	NOP
	NOP

os_swix4r
        ORR     a1, a1, #&20000
os_swi4r
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        LDR     a4, [sp, #7 * 4]
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #8 * 4
        LDMIA   ip, {v1-v4}
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v1, #0
        STRNE   a1, [v1]
        TEQ     v2, #0
        STRNE   a2, [v2]
        TEQ     v3, #0
        STRNE   a3, [v3]
        TEQ     v4, #0
        STRNE   a4, [v4]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
	NOP
	NOP
	NOP

os_swix5r
        ORR     a1, a1, #&20000
os_swi5r
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1}
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #9 * 4
        LDMIA   ip, {v3-v6, ip}
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^
	NOP
	NOP
	NOP

os_swix6r
        ORR     a1, a1, #&20000
os_swi6r
        STMDB   sp!, {v1-v6, lk}
        MOV     r12, r0
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
        ADD     lk, sp, #7 * 4
        LDMIA   lk, {a4, v1, v2}
        SWI     XOS_CallASWIR12
        ADD     ip, sp, #10 * 4
        LDMIA   ip, {v3-v6, ip, lk}     ; APCS-R assumption here
        LDMVSIA sp!, {v1-v6, pc}^
        TEQ     v3, #0
        STRNE   a1, [v3]
        TEQ     v4, #0
        STRNE   a2, [v4]
        TEQ     v5, #0
        STRNE   a3, [v5]
        TEQ     v6, #0
        STRNE   a4, [v6]
        TEQ     ip, #0
        STRNE   v1, [ip]
        TEQ     lk, #0
        STRNE   v2, [lk]
        MOV     a1, #0
        LDMIA   sp!, {v1-v6, pc}^

	DCD	-1

	ASSERT	os_swix - os_swi = 11*4
	ASSERT	os_swix0 - os_swix = 14*4
	ASSERT  os_swix1r - os_swix0 = 15*4
	ASSERT	os_swix2r - os_swix1r = 13*4
	ASSERT	os_swix3r - os_swix2r = 18*4
	ASSERT  os_swix4r - os_swix3r = 21*4
	ASSERT	os_swix5r - os_swix4r = 24*4
	ASSERT	os_swix6r - os_swix5r = 27*4

	END
