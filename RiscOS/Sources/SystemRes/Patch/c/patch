#include "stdio.h"
#include "stdlib.h"
#include "sigfind.h"
#include "kernel.h"
#include "swis.h"



int app_size(void)
{
  _kernel_swi_regs r;

  _kernel_swi(OS_GetEnv,&r,&r);

  return r.r[1];
}

int patch_init(void)
{
  sigfind_init();
  return 0;
}

int patch_services(int service_number, int *r, void *pw)
{
  int searchsize, AIFsize;

//  printf("Compress r0 = %d, r2 = %x, r3 = %x, r5 = %x == %s\n",r[0],r[2],r[3],r[5],r[5]);

  if ((service_number != 0xb7) || (!r[0]) ) return 0;

  searchsize = app_size()-32768;
  if (((int *)r[2])[4] == 0xef000011) /* looks pretty much like an AIF header */
  {
    AIFsize = ((int *)r[2])[5] + ((int *)r[2])[6];
    if (AIFsize < searchsize) searchsize = AIFsize;
    if (((int *)r[2])[12] & 0x80000000)
    {
        r[1] = 0;         /* claims to be StrongARM-ready - cease all patching */
        return 0;
    }
    if (sigfind_find((char *) (r)[5], (int *) (r)[2], searchsize)) {
      sigfind_patch();
      /* Don't claim it - another patcher may want a go :-( */
      //r[1] = 0;
    }
  }

//  sigfind_stats();


  return 0;
}


int patch_commands(void)
{
  sigfind_stats();
  return 0;
}
