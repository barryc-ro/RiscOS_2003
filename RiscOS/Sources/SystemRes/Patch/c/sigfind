#include "stdio.h"
#include "stdlib.h"
#include "string.h"

typedef struct {
  int *sig;
  int sigsize;
  int *new;
  int found;
  int refc;
  int totalrefc;
  char name[64];
  } Signature;

int num_sigs;

#define Sig(x,y,z,n) {extern int*x; extern int y; extern int *z; strcpy(sigs[num_sigs].name,n); sigs[num_sigs].sig = x; sigs[num_sigs].sigsize = y/sizeof(int); sigs[num_sigs++].new = z;}

Signature sigs[6];
char fname[256];
int appsize;

void sigfind_init(void)
{
  fname[0]='\0';
  appsize=0;
  memset(sigs, 0, sizeof sigs);

  Sig(RiscOSLib1_signature,RiscOSLib1_size,rolib1,"RISC_OSLib os_swi (variant 1)");
  Sig(RiscOSLib2_signature,RiscOSLib2_size,rolib2,"RISC_OSLib os_swi (variant 2)");
  Sig(SWIc1_signature, SWIc1_size,swic1,"Static _kernel_swi_c");
  Sig(SHuntSWI_signature,SHuntSWI_size,swicall1,"SWI call (SHunt)");
  Sig(Dlib_signature,Dlib_size,dlib1,"Desklib SWI veneer");
  Sig(OvrMangr_signature,OvrMangr_size,ovrmgr1,"Overlay loader");
}

int sigfind_find(char *name, int *image, int image_size)
{
  int a;
  int fnd=0;

  for (a = 0; a<num_sigs; a++) {
    sigs[a].found = 0;
    sigs[a].refc = 0;
  }
  if (name) strcpy(fname,name); else fname[0] =0;
  appsize = image_size;

#if 0
  printf ("%x => %x, %d, %x =>  %x, %d\n",*sigs[0].sig, *sigs[0].new,sigs[0].sigsize,
  	      	     *sigs[1].sig, *sigs[1].new,sigs[1].sigsize);
#endif

 // note image may not be multiple of four bytes
 while (image_size > 0) {
   for (a= 0; a<num_sigs; a++) {
     if ((*image == *sigs[a].sig) && (image_size >= (sigs[a].sigsize*sizeof(int)))) {
       int b;
       for (b = 0; b< sigs[a].sigsize; b++) {
          #if 0
          if (image[b] != sigs[a].sig[b]) break;
          #else
          /* Supporting wildcards */
          if (image[b] != sigs[a].sig[b] && sigs[a].sig[b] != -2) break;
          #endif
       }
       if (b == sigs[a].sigsize) {
         sigs[a].found = (int) image;
         sigs[a].refc++;
         sigs[a].totalrefc++;
         fnd = 1;
       }
     }
   }
   image_size -= 4;
   image++;
 }
 return fnd;
}

void sigfind_stats(void)
{
   int a;

   printf("Last application examined: %s (size = %d bytes)\n\n", fname[0] ? fname : "<Unknown>", appsize);

   printf("                                 Occurrences\n"
          "Signature                     Last app    Total\n"
          "---------                     --------    -----\n");

   for (a = 0; a<num_sigs;a++)
      printf("%-29.29s%9d%9d\n", sigs[a].name, sigs[a].refc, sigs[a].totalrefc);
}

void sigfind_patch(void)
{
  int a;
  for (a = 0; a<num_sigs;a++) {
    if (sigs[a].found) {
      if (*sigs[a].new == -1) {
        // need to fix up found+offset to be branch to new+2
        // assume app, so new address is +ve
        unsigned int new_instr = 0xea000000 + (int) (sigs[a].new - ((int *) sigs[a].found) - sigs[a].new[1]);
        *(((int *) sigs[a].found) + sigs[a].new[1]) = (int) new_instr;
      }
      else memcpy((char *) sigs[a].found, sigs[a].new, sizeof(int)*sigs[a].sigsize);
    }
  }
  /* Synchronise unnecessary as OS will do it after service call returns */
}
