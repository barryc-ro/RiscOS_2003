/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure central application
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
10/12/1997	BJGA	Split into Main, Calc, Plugin, State, ToolboxE,
			  WimpE & WimpM
			Added these headers

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <string.h>
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
/* Common */
#include "error.h"
#include "message.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "Main.h"  /* includes prototypes for this file */
#include "Plugin.h"
#include "Selector.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#ifdef TIMING  /* For optimisation purposes */
#include <stdio.h>
static int t0;
static FILE *f;
#endif

#define	WimpVersion	((int) 310)

/* Global variables */

	BOOL		quit = FALSE;
	ObjectId	savecmos_id = -1;
	ObjectId	menu_id = -1;
	ObjectId	infomenu_id = -1;
	ObjectId	proginfo_id = -1;
	MessagesFD	messages;
	int		thandle;
	BOOL		configure_seen;

/* Static global variables */

static	WimpPollBlock	poll_block;
static	IdBlock		id_block;

/* Prototypes */

static void checkinvocations (void);
static void end (void);

/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  error_initialise ();
#ifdef TIMING
  t0 = _swi (OS_ReadMonotonicTime, _RETURN(0));
#endif
  throw (toolbox_initialise (0, WimpVersion, wimpm_messages, toolboxe_events,
    "<Configure$Dir>", &messages, &id_block, NULL, &thandle, NULL));
  _swi (Hourglass_On, 0);
  checkinvocations ();
  configure_seen = (BOOL) getenv ("Configure$Seen");
  _swi (OS_CLI, _IN(0), (int) "Set Configure$Seen 1");
  throw (event_initialise (&id_block));
  throw (event_set_mask (wimpe_mask));
//
  wimpm_register ();
  wimpe_register ();
  toolboxe_register ();
//
  plugin_scan ();
  atexit (end);
  _swi (Hourglass_Off, 0);
#ifdef TIMING
  f = fopen ("$.ConfigTime", "w");
  fprintf (f, "Configure initialised in %i cs\n", _swi (OS_ReadMonotonicTime, _RETURN(0)) - t0);
  fclose (f);
#endif
//
  error_recover_point();
  while (!quit) {
    throw (event_poll (NULL, &poll_block, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	checkinvocations() ************************************************\

Purpose:	Ensures only one copy of Configure is active at once

\**************************************************************************/

static void checkinvocations (void)
{
  int buffer [4], r0 = 0;
  char taskname [2] [32];
  char sprite [13];
  message_lookup_buffer(taskname[1],messages,"_TaskName");
  message_lookup_buffer(sprite,messages,"_ConfigSprite");
  while (r0 >= 0) {
    r0 = _swi (TaskManager_EnumerateTasks, _INR(0,2)|_RETURN(0), r0, buffer, sizeof (buffer));
    str_ncpy (taskname [0], (char *) buffer [1], sizeof (taskname [0]));
    if (strcmp (taskname [0], taskname [1]) == 0) {
      _kernel_oserror err_multi = { 0, "Err_Multi" };
      wimp_report_error (
        (_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0), (int) &err_multi, (int) &messages, 0, 0, 0, 0, 0, 0),
        Wimp_ReportError_Cancel | 1u << 8 | 2u << 9,
        taskname [1], sprite, (void *) 1, 0);
      exit (EXIT_FAILURE);
    }
  }
}

/******	end() *************************************************************\

Purpose:	Tidies up at exit

\**************************************************************************/

static void end (void)
{
  selector_finalise (plugin_selector);
  free (plugin_text);
  free (plugin_list);
}
