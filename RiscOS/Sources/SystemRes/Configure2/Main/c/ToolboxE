/******	ToolboxE.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure central application
This file:	Toolbox event code

History:
Date		Who	Change
----------------------------------------------------------------------------
10/12/1997	BJGA	Split from Main
			Added these headers
15/01/1998	BJGA	Menu items now only faded/unfaded just prior to being shown
			(ie uses Menu_AboutToBeShown)
			Added support for 'Load CMOS' and 'Default CMOS' menu items
			Better OS version read routine
			Changed CMOS file format
29/04/1998	BJGA	If Boot$OSVersion cannot be read, now saves old format CMOS file

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <string.h>
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
#include "menu.h"
#include "saveas.h"
/* Common */
#include "cmos.h"
#include "message.h"
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Plugin.h"
#include "State.h"
#include "ToolboxE.h"  /* includes prototypes for this file */

#define proginfo_name		((ComponentId) 0x82b400)
#define proginfo_purpose	((ComponentId) 0x82b401)
#define proginfo_author		((ComponentId) 0x82b402)
#define proginfo_version	((ComponentId) 0x82b404)

#define menu_savecmos		((ComponentId) 0x00)
#define menu_loadcmos		((ComponentId) 0x03)
#define menu_help		((ComponentId) 0x01)
#define menu_defaultcmos	((ComponentId) 0x04)

static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_menuabouttobeshown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_menusubmenu (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_menuselection (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

int toolboxe_events [5] =     { Toolbox_ObjectAutoCreated,
				Menu_AboutToBeShown,
				Menu_SubMenu,
				Menu_Selection,
				0 };
void toolboxe_register (void)
{
  throw (event_register_toolbox_handler (-1, Toolbox_ObjectAutoCreated, toolboxe_objectautocreated, NULL));
  throw (event_register_toolbox_handler (-1, Menu_AboutToBeShown, toolboxe_menuabouttobeshown, NULL));
  throw (event_register_toolbox_handler (-1, Menu_SubMenu, toolboxe_menusubmenu, NULL));
  throw (event_register_toolbox_handler (-1, Menu_Selection, toolboxe_menuselection, NULL));
}

/******	toolboxe_objectautocreated() **************************************\

Purpose:	Handles Toolbox_ObjectAutoCreated event

\**************************************************************************/

static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  if (strcmp (((ToolboxObjectAutoCreatedEvent *) event)->template_name, "SaveCMOS") == 0) {
    savecmos_id = id_block->self_id;
  }
  
  if (strcmp (((ToolboxObjectAutoCreatedEvent *) event)->template_name, "Menu") == 0) {
    menu_id = id_block->self_id;
  }
  
  if (strcmp (((ToolboxObjectAutoCreatedEvent *) event)->template_name, "InfoMenu") == 0) {
    infomenu_id = id_block->self_id;
    plugin_buildmenu ();
  }
  
  if (strcmp (((ToolboxObjectAutoCreatedEvent *) event)->template_name, "ProgInfo") == 0) {
    proginfo_id = id_block->self_id;
  }
  
  return 1;
}

/******	toolboxe_menuabouttobeshown() *************************************\

Purpose:	Handles Menu_AboutToBeShown event (for main menu)

\**************************************************************************/

static int toolboxe_menuabouttobeshown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  if ((1 & _swi (OS_File, _INR(0,1)|_RETURN(0), 17, cmos_SAVED_FILE)) == 0) {
    throw (menu_set_fade (0, menu_id, menu_loadcmos, TRUE));
    throw (menu_set_entry_help_message (0, menu_id, menu_loadcmos, message_lookup_direct(messages,"LoadCMOSHelpFaded")));
  }
  else {
    throw (menu_set_fade (0, menu_id, menu_loadcmos, FALSE));
    throw (menu_set_entry_help_message (0, menu_id, menu_loadcmos, message_lookup_direct(messages,"LoadCMOSHelp")));
  }

  if ((1 & _swi (OS_File, _INR(0,1)|_RETURN(0), 17, cmos_DEFAULT_FILE)) == 0) {
    throw (menu_set_fade (0, menu_id, menu_defaultcmos, TRUE));
    throw (menu_set_entry_help_message (0, menu_id, menu_defaultcmos, message_lookup_direct(messages,"LoadCMOSHelpFaded")));
  }
  else {
    throw (menu_set_fade (0, menu_id, menu_defaultcmos, FALSE));
    throw (menu_set_entry_help_message (0, menu_id, menu_defaultcmos, message_lookup_direct(messages,"DefaultCMOSHelp")));
  }

  if (state_locked) {
    throw (menu_set_fade (0, menu_id, menu_savecmos, TRUE));
    throw (menu_set_fade (0, menu_id, menu_loadcmos, TRUE));
    throw (menu_set_fade (0, menu_id, menu_defaultcmos, TRUE));
    throw (menu_set_entry_help_message (0, menu_id, menu_savecmos, message_lookup_direct(messages,"SaveCMOSHelpLocked")));
    throw (menu_set_entry_help_message (0, menu_id, menu_loadcmos, message_lookup_direct(messages,"LoadCMOSHelpLocked")));
    throw (menu_set_entry_help_message (0, menu_id, menu_defaultcmos, message_lookup_direct(messages,"LoadCMOSHelpLocked")));
  }
  else {
    throw (menu_set_fade (0, menu_id, menu_savecmos, FALSE));
    throw (menu_set_entry_help_message (0, menu_id, menu_savecmos, message_lookup_direct(messages,"SaveCMOSHelp")));
  }
  
  return 1;
}

/******	toolboxe_menusubmenu() ********************************************\

Purpose:	Handles Menu_SubMenu event (for InfoMenu submenus)

\**************************************************************************/

static int toolboxe_menusubmenu (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  plugin_spec *details;
  
  details = plugin_list + (int) id_block -> self_component;
  
  throw (displayfield_set_value (0, proginfo_id, proginfo_name,
    details -> info_name == -1 ? NULL : plugin_text + (details -> info_name)));
  throw (displayfield_set_value (0, proginfo_id, proginfo_purpose,
    details -> info_purpose == -1 ? NULL : plugin_text + (details -> info_purpose)));
  throw (displayfield_set_value (0, proginfo_id, proginfo_author,
    details -> info_author == -1 ? NULL : plugin_text + (details -> info_author)));
  throw (displayfield_set_value (0, proginfo_id, proginfo_version,
    details -> info_version == -1 ? NULL : plugin_text + (details -> info_version)));
  
  throw (toolbox_show_object (Toolbox_ShowObject_AsSubMenu, proginfo_id, Toolbox_ShowObject_TopLeft,
    &(((MenuSubMenuEvent *) event) -> pos), id_block -> self_id, id_block -> self_component));
  return 1;
}

/******	toolboxe_menuselection() ******************************************\

Purpose:	Handles Menu_Selection event

\**************************************************************************/

static int toolboxe_menuselection (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  cmos dummy = { 0, 0, 8 };
  unsigned char all_cmos [244];
  const char *osversion;
  
  if (id_block -> self_id == menu_id) {
    switch (id_block -> self_component) {
      case menu_savecmos:
        for (dummy.cmosbyte = 0; dummy.cmosbyte < 240; dummy.cmosbyte++)
            all_cmos [dummy.cmosbyte] = (unsigned char) cmos_read (dummy, NULL);
        osversion = getenv ("Boot$OSVersion");
        if (osversion == NULL)
        {
          _swi (OS_File, _INR(0,2)|_INR(4,5), 10,
              (int) cmos_SAVED_FILE, 0xFF2, (int) &all_cmos, (int) &all_cmos + sizeof (all_cmos) - 4);
        }
        else
        {
          * (int *) (all_cmos + 240) = _swi (OS_ReadUnsigned, _INR(0,1)|_RETURN(2), 10, (int) osversion);
          _swi (OS_File, _INR(0,2)|_INR(4,5), 10,
              (int) cmos_SAVED_FILE, 0xFF2, (int) &all_cmos, (int) &all_cmos + sizeof (all_cmos));
        }
        toolboxe_menuabouttobeshown (0, 0, 0, 0); /* update the menu, in case it was an Adjust click */
        break;
      
      case menu_loadcmos:
        _swi (OS_CLI, _IN(0), "LoadCMOS " cmos_SAVED_FILE);
        break;
      
      case menu_defaultcmos:
        _swi (OS_CLI, _IN(0), "LoadCMOS " cmos_DEFAULT_FILE);
        break;
      
      case menu_help:
        if (getenv ("Help$Dir") == NULL) {
          if (getenv ("Help$Start")) _swix (Wimp_StartTask, _IN(0), (int) "Run <Help$Start>");
          else _swix (Wimp_StartTask, _IN(0), (int) "Run Resources:$.Apps.!Help");
        }
        break;
    }
  }
  return 1;
}
