/******	WimpE.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure central application
This file:	Wimp event code

History:
Date		Who	Change
----------------------------------------------------------------------------
10/12/1997	BJGA	Split from Main
			Added these headers

\**************************************************************************/

/* CLib */
#include <string.h>
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
/* Common */
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Plugin.h"
#include "Selector.h"
#include "State.h"
#include "WimpE.h"  /* includes prototypes for this file */

static int wimpe_redrawwindowrequest (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int wimpe_openwindow (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int wimpe_closewindow (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int wimpe_mouseclick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int wimpe_keypressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int wimpe_usermessageacknowledge (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);

int wimpe_mask =	Wimp_Poll_NullMask +
			Wimp_Poll_PointerLeavingWindowMask +
			Wimp_Poll_PointerEnteringWindowMask +
			Wimp_Poll_LoseCaretMask +
			Wimp_Poll_GainCaretMask +
			Wimp_Poll_PollWordNonZeroMask ;

void wimpe_register (void)
{
  throw (event_register_wimp_handler (-1, Wimp_ERedrawWindow, wimpe_redrawwindowrequest, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EOpenWindow, wimpe_openwindow, NULL));
  throw (event_register_wimp_handler (-1, Wimp_ECloseWindow, wimpe_closewindow, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EMouseClick, wimpe_mouseclick, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EKeyPressed, wimpe_keypressed, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EUserMessageAcknowledge, wimpe_usermessageacknowledge, NULL));
}

/******	wimpe_redrawwindowrequest() ***************************************\

Purpose:	Handles Redraw_Window_Request

\**************************************************************************/

static int wimpe_redrawwindowrequest (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (((WimpRedrawWindowBlock *) event) -> window_handle == selector_get_wimp_handle (plugin_selector))
    selector_redraw (plugin_selector);
  /* shouldn't happen otherwise */
  return 1;
}

/******	wimpe_openwindow() ************************************************\

Purpose:	Handles Open_Window_Request

\**************************************************************************/

static int wimpe_openwindow (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (((WimpOpenWindowBlock *) event) -> window_handle == selector_get_wimp_handle (plugin_selector))
    selector_open (plugin_selector, (WimpOpenWindowBlock *) event);
  else throw (wimp_open_window ((WimpOpenWindowBlock *) event));
  return 1;
}

/******	wimpe_closewindow() ***********************************************\

Purpose:	Handles Close_Window_Request

\**************************************************************************/

static int wimpe_closewindow (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  state_quit (FALSE);
  return 1;
}

/******	wimpe_mouseclick() ************************************************\

Purpose:	Handles Mouse_Click

\**************************************************************************/

static int wimpe_mouseclick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpGetWindowStateBlock state;
  selector_item item;
  int plugin, x0, y1;
  char command [256];
  WimpMessage message;
  
  if (((WimpMouseClickEvent *) event) -> buttons & Wimp_MouseButtonMenu) return 0;
  if ((state.window_handle = ((WimpMouseClickEvent *) event) -> window_handle) == selector_get_wimp_handle (plugin_selector)) {
    throw (wimp_get_window_state (&state));
    item = selector_get (plugin_selector, ((WimpMouseClickEvent *) event) -> mouse_x - state.visible_area.xmin + state.xscroll,
                                   ((WimpMouseClickEvent *) event) -> mouse_y - state.visible_area.ymax + state.yscroll, &x0, &y1);
    x0 += state.visible_area.xmin - state.xscroll; x0 = max(x0,0);
    y1 += state.visible_area.ymax - state.yscroll; y1 = max(y1,0);
    for (plugin = 0; plugin < plugin_no; plugin++) if ((plugin_list + plugin) -> item == item) break;
    if (plugin >= 0 && plugin < plugin_no) {
      if ((plugin_list + plugin) -> alive) {
        message.hdr.size = 20;
        message.hdr.your_ref= 0;
        message.hdr.action_code= Wimp_MOpenConfigWindow;
        throw (wimp_send_message (17, &message, (plugin_list + plugin) -> task_handle, 0, NULL));
      }
      else {
        sprintf (command, "/BootResources:Configure.%s.!Run -openat %i %i", plugin_text + (plugin_list + plugin) -> app_name, x0, y1);
        (plugin_list + plugin) -> task_handle = _swi (Wimp_StartTask, _IN(0)|_RETURN(0), command);
        (plugin_list + plugin) -> alive = ((plugin_list + plugin) -> task_handle != 0) ? TRUE : FALSE;
      }
    }
  }
  return 1;
}

/******	wimpe_keypressed() ************************************************\

Purpose:	Handles Key_Pressed

\**************************************************************************/

static int wimpe_keypressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  throw (wimp_process_key (event->key_pressed.key_code));
  return 1;
}

/******	wimpe_usermessageacknowledge() ************************************\

Purpose:	Handles User_Message_Acknoledge

\**************************************************************************/

static int wimpe_usermessageacknowledge (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (((WimpUserMessageAcknowledgeEvent *) event) -> hdr.action_code != Wimp_MPlugInQuit) return 0;
  
  if (state_quitduetolocking) state_lock (2);
  else {
    int plugin;
    WimpMessage buffer;
    for (plugin = 0; plugin < plugin_no; plugin++) {
      buffer.hdr.size = 20;
      buffer.hdr.your_ref = 0;
      buffer.hdr.action_code = Wimp_MQuit;
      if ((plugin_list + plugin) -> alive) throw (wimp_send_message (17, &buffer, (plugin_list + plugin) -> task_handle, 0, NULL));
    }
    quit = TRUE;
  }
  return 1;
}
