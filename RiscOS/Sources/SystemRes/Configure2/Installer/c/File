/******	File.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure Installer module (for SysMerge/FontMerge/BootMerge)
This file:	File operations

History:
Date		Who	Change
----------------------------------------------------------------------------
06/01/1998	BJGA	Started
07/01/1998	BJGA	Implemented File_Backup (part) and File_Canonicalise
08/01/1998	BJGA	Enhanced File_Backup
09/01/1998	BJGA	Moved some code to FileOp.c, implememted static_FindFontRoot
12/01/1998	BJGA	Rewrote static_FindFontRoot, completed File_Backup, implemented File_Copy
21/01/1998	BJGA	Bugfixed File_Backup
22/01/1998	BJGA	Reordered operations in File_Copy
26/01/1998	BJGA	|language| now determined by and returned from File_DiagnoseFont
			  and passed to File_Copy
28/01/1998	BJGA	|recurse| parameter added to File_Backup, replaces |overtype|;
			  delegation to Remove/DeleteObject/Components altered to reflect changes therein;
			  dating functionality removed from File_DiagnoseFont,
			  placed in File_DateDir and made (optionally) recursive
29/01/1998	BJGA	What to do with components delegated from File_Backup to FileOp_BackupComponents;
			  implemented File_DateVoid;
			  nasty memory corruption bug in File_DiagnoseFont found and fixed

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
/* Common */
#include "str.h"
/* local headers */
#include "Defs.h"
#include "File.h"
#include "FileOp.h"
#include "Log.h"
#include "Mess.h"
#include "Modver.h"

#define BUFSIZE 512 /* Size of buffer for holding file records */

typedef struct
{
  unsigned int load_addr;
  unsigned int exec_addr;
  unsigned int length;
  unsigned int attr;
  unsigned int object_type;
  unsigned int file_type;
  char         name[256];
} osgbpb_file;

static char *static_FindFontRoot (char *font);
static char FontName [41]; /* 40-byte field read from IntMetrics */


/******	File_Backup() *****************************************************\

Purpose:	Moves a given (existent) object to the same location relative to LogDir.Backup,
		or deletes it if no LogDir or if file is not below LogDir
In:		Pathname, whether to backup fonts/dirs recursively,
		object type (1 => file, 2 => font/dir), filetype (0 => dir=font),
		version number (-1 => unversioned)
Out:		Pointer to error block

\**************************************************************************/

_kernel_oserror *File_Backup (const char *file, BOOL recurse, int type, int filetype, int ver)
{
  _kernel_oserror *err = NULL;
  const char *LogDir = Log_GetDir();
  char *backup = NULL;
  int pathlen = str_len (file),
      loglen = str_len (LogDir),
      diff = 1; /* default is no match (ie to delete rather than move) */
  
  /* Determine if this is a move or a delete */
  if (LogDir != NULL && pathlen > loglen && *(file + loglen) == '.')
  {
    /* Make writable copy of filename (also used to build the backup's leafname) */
    backup = malloc (18 + pathlen); /* space left for ".Backup" and up to 10 version digits */
    if (backup == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
    if (!err)
    {
      str_cpy (backup + 7, file); /* copy tail */
      
      *(backup + 7 + loglen) = '\0';  /* case-insensitive comparison of head */
      err = _swix (Territory_Collate, _INR(0,3)|_OUT(0), -1, LogDir, backup + 7, 1, &diff);
      
      if (diff == 0 & !err) /* a move is required; work out where we move to */
      {
        str_cpy (backup, LogDir); /* copy head */
        str_cpy (backup + loglen, ".Backup"); /* insert directory */
        *(backup + loglen + 7) = '.'; /* seal the join */
        if (ver >= 0) /* append the version number */
        {
          sprintf (backup + pathlen + 7, "%03d", ver);
        }
      }
    }
  }
  
  if (!err)
  {
    if (type == 2 && filetype == 0) /* Font being removed - process message files */
    {
      char *fontdir,
           *buffer,
           *fontroot = NULL;
      const char *font_id;
      int fontroot_len = 0;
      
      fontdir = malloc (pathlen + 1 + 9);  /* extra space required by static_FindFontRoot() */
      buffer = malloc (BUFSIZE);
      if (fontdir == NULL || buffer == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
      if (!err)
      {
        str_cpy (fontdir, file);
        fontroot = static_FindFontRoot (fontdir);
        fontroot_len = str_len (fontroot);
      }
      
      if (!err && fontroot != NULL)
      {
        int offset = 0,
            nread = -1;
        font_id = file + fontroot_len + 1; /* end of string == font identifier */
        do
        {
          err = _swix (OS_GBPB, _INR(0,6)|_OUTR(3,4), 10,
              (int) fontroot, (int) buffer, 1, offset, BUFSIZE, "Messages#*", &nread, &offset);
          if (nread && ( *((int *)(buffer + 16)) == 1 ) && !err) /* only interested in files */
          {
            *(fontroot + fontroot_len) = '.';
            str_ncpy (fontroot + fontroot_len + 1, buffer + 20, 11); /* limit to 10 chars */
            err = FileOp_RemoveFontToken (font_id, fontroot);
            *(fontroot + fontroot_len) = '\0'; /* truncate again */
          }
        }
        while (offset != -1 && !err);
      }
      
      free (buffer);
      free (fontdir);
    }
  }
  
  if (!err)
  {
    if (type == 1) /* Remove file (or image file) */
    {
      if (diff == 0) /* Move */
      {
        err = FileOp_RemoveFile (file, backup);
      }
      else /* Delete */
      {
        err = FileOp_DeleteFile (file);
      }
    }
    
    else /* Backup directory contents */
    /* This will need to be recursive unless a font is being installed */
    /* over a font or non-font directory */
    /* This call will call us back, in order to correctly remove or delete fonts and modules */
    {
      err = FileOp_BackupComponents (file, recurse);
    }
  }
  
  free (backup);
  return err;
}

/******	File_Canonicalise() ***********************************************\

Purpose:	Finds the canonicalised form of a pathname
In:		Pathname, reference to string pointer to return (must be initialised)
Out:		Pointer to error block
Notes:		Block pointed to by string pointer must later be freed by caller
		Output string is null-terminated

\**************************************************************************/

_kernel_oserror *File_Canonicalise (const char *partial, char **buffer)
{
  _kernel_oserror *err = NULL;
  int size;
  
  err = _swix (OS_FSControl, _INR(0,5)|_OUT(5), 37, (int) partial, 0, 0, 0, 0, &size);
  if (!err)
  {
    *buffer = realloc (*buffer, 1 - size);
    if (*buffer == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
  }
  if (!err)
  {
    err = _swix (OS_FSControl, _INR(0,5), 37, (int) partial, (int) *buffer, 0, 0, 1 - size);
  }
  return err;
}

/******	File_Copy() *******************************************************\

Purpose:	Copies a file/font to its final installed position
In:		Pathnames, type (1 => file, 2 => font)
Out:		Pointer to error block

\**************************************************************************/

_kernel_oserror *File_Copy (const char *source, const char *dest, int type, BOOL language)
{
  _kernel_oserror *err = NULL;
  
  if (type == 1) /* File */
  {
    err = FileOp_CopyFile (source, dest);
  }
  if (type == 2) /* Font */
  {
    char *fontdir = NULL,
         *buffer = NULL,
         *fontroot = NULL;
    const char *font_id;
    int fontroot_len = 0;
    
    err = FileOp_CopyComponents (source, dest);
    
    if (!err)
    {
      fontdir = malloc (str_len (dest) + 1 + 9);  /* extra space required by static_FindFontRoot() */
      buffer = malloc (BUFSIZE);
      if (fontdir == NULL || buffer == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
      if (!err)
      {
        str_cpy (fontdir, dest);
        fontroot = static_FindFontRoot (fontdir);
        fontroot_len = str_len (fontroot);
      }
    }
    
    if (!err && fontroot != NULL)
    {
      int offset = 0,
          nread = -1;
      font_id = dest + fontroot_len + 1; /* end of string == font identifier */
      do
      {
        err = _swix (OS_GBPB, _INR(0,6)|_OUTR(3,4), 10,
            (int) fontroot, (int) buffer, 1, offset, BUFSIZE, "Messages#*", &nread, &offset);
        if (nread && ( *((int *)(buffer + 16)) == 1 ) && !err) /* only interested in files */
        {
          *(fontroot + fontroot_len) = '.';
          str_ncpy (fontroot + fontroot_len + 1, buffer + 20, 11); /* limit to 10 chars */
          err = FileOp_AddFontToken (font_id, fontroot, language);
          *(fontroot + fontroot_len) = '\0'; /* truncate again */
        }
      }
      while (offset != -1 && !err);
    }
    
    if (!err && fontroot != NULL)
    {
      int territory = 0;
      err = _swix (Territory_Number, _OUT(0), &territory); /* Territory numbers are up to 99 */
      if (!err)
      {
        sprintf (fontroot + fontroot_len, ".Messages%d", territory);
        err = FileOp_EnsureFontMessages (fontroot, fontroot_len);
        *(fontroot + fontroot_len) = '\0'; /* truncate again */
      }
    }
    
    free (buffer);
    free (fontdir);
  }

  return err;
}

/******	File_DiagnoseFont() ***********************************************\

Purpose:	Determines if a given directory is a font or not
In:		Pathname, references to return is-a-font ("filetype") and language-font flags
Out:		Pointer to error block

\**************************************************************************/

_kernel_oserror *File_DiagnoseFont (const char *pathname, int *filetype, BOOL *language)
{
  _kernel_oserror *err = NULL;
  char *buf = NULL,
       *intmet_full = NULL,
       intmet_lastchar = '\0';
  int offset = 0,
      type = 0;
  
  buf = malloc (str_len (pathname) + 8 + 1); /* 8 chars for ".IntMet*" + terminator */
  if (buf != NULL)
  {
    str_cpy (buf, pathname);
    offset = str_len (buf);
    if ( *(buf + offset - 1) != ':' )
    {
      *(buf + offset) = '.'; /* Unless a raw path, add a directory separator */
      offset++;
    }
    
    str_cpy (buf + offset, "IntMet*"); /* Not IntMetric*, see PRM 4-470 */
    err = _swix (OS_File, _INR(0,1)|_OUT(0), 23, buf, &type);
    
    if (!err)
    {
      /* Canonicalise, so we can see the last char */
      err = File_Canonicalise (buf, &intmet_full);
      if (!err)
      {
        intmet_lastchar = *(intmet_full + str_len (intmet_full) - 1);
      }
      free (intmet_full);
    }
    
    if (type == 1 && !err)
    {
      /* It's a font, okay */
      
      if (language) *language = (intmet_lastchar >= '0' && intmet_lastchar <= '9');
      
      if (filetype) *filetype = 0; /* Remember to flag as a font! */
    }
    
    free (buf);
  }
  
  return err;
}

/******	File_DateDir() ****************************************************\

Purpose:	Determines the date of a given directory (font or not)
In:		Whether to recurse, pathname, references to return hi/lo words of date
Out:		Pointer to error block
Notes:		Directories containing no typed files have date 0
		Non-recursive form is intended for font use

\**************************************************************************/

_kernel_oserror *File_DateDir (BOOL recursive, const char *pathname, int *datehi, int *datelo)
{
  _kernel_oserror *err = NULL;
  osgbpb_file *gbpb_buf;
  int offset = 0,
      nread = -1,
      hi,
      lo;
  
  *datehi = 0;
  *datelo = 0;
  
  gbpb_buf = malloc (sizeof (*gbpb_buf));
  if (gbpb_buf == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
  if (!err)
  {
    
    do
    {
      err = _swix (OS_GBPB, _INR(0,6)|_OUTR(3,4), 12,
          (int) pathname, (int) gbpb_buf, 1, offset, sizeof (*gbpb_buf), 0, &nread, &offset);
      if (nread && !err)
      {
        if (gbpb_buf->object_type & 2 && recursive) /* directory found - recurse */
        {
          char *nextdir = malloc (str_len (pathname) + 1 + str_len (gbpb_buf->name) + 1);
          if (nextdir == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
          if (!err)
          {
            sprintf (nextdir, "%s.%s", pathname, gbpb_buf->name);
            err = File_DateDir (TRUE, nextdir, &hi, &lo);
          }
          free (nextdir);
        }
        else if (gbpb_buf->object_type & 1) /* file found, use date directly */
        {
          if (gbpb_buf->file_type == -1) /* untyped */
          {
            hi = lo = 0;
          }
          else
          {
            hi = gbpb_buf->load_addr & 0xFF; /* just the low byte */
            lo = gbpb_buf->exec_addr;
          }
        }
        
        if (hi > *datehi || (hi == *datehi && lo > *datelo))
        {
          /* We have a new most-recent date */
          *datehi = hi;
          *datelo = lo;
        }
      }
    }
    while (offset != -1 && !err);
    
  }
  free (gbpb_buf);
  return err;
}

/******	File_DateVoid() ***************************************************\

Purpose:	Determines the effective date of a void (nonexistent file)
		This is useful when the given path is actually below a file
		rather than a directory, and we need to be able to compare
		against such a parent-file; if the deepest valid pathname
		is a directory rather than a file, date 0 is returned
In:		Pathname, references to return hi/lo words of date
Out:		Pointer to error block
Notes:		Function is recursive
		Untyped parent-files are also given date 0

\**************************************************************************/

_kernel_oserror *File_DateVoid (const char *pathname, int *datehi, int *datelo)
{
  _kernel_oserror *err = NULL;
  int obj_type,
      obj_load_addr,
      obj_exec_addr,
      obj_filetype,
      lastperiod;
  char *parent;
  
  err = Mess_CacheError (_swix (OS_File, _INR(0,1)|_OUT(0)|_OUTR(2,3)|_OUT(6),
      23, pathname, &obj_type, &obj_load_addr, &obj_exec_addr, &obj_filetype));
  if (!err)
  {
    switch (obj_type)
    {
      case 0: /* still a void, try parent */
        parent = malloc (str_len (pathname) + 1);
        if (parent == NULL) err = Mess_GenerateError ("NoMem", errno_DONT_CARE, 0);
        if (!err)
        {
          str_cpy (parent, pathname);
          /* now, strip off the last leafname */
          lastperiod = str_len (parent) - 1;
          while (lastperiod > 0 && *(parent + lastperiod) != '.') lastperiod--;
          if (lastperiod == 0)
          {
            /* This shouldn't happen, but just in case, make sure nothing gets done */
            *datehi = 0xFF;
            *datelo = -1;
          }
          else
          {
            /* Date the parent object instead */
            *(parent + lastperiod) = '\0'; /* terminate */
            err = File_DateVoid (parent, datehi, datelo);
          }
        }
        free (parent);
        break;
        
      case 1: /* parent-file found; return its date */
        if (obj_filetype == -1) /* untyped */
        {
          *datehi = *datelo = 0;
        }
        else
        {
          *datehi = obj_load_addr & 0xFF; /* just the low byte */
          *datelo = obj_exec_addr;
        }
        break;
        
      default: /* directory found, everything's okay */
        *datehi = *datelo = 0;
        break;
    }
  }
  return err;
}

/******	static_FindFontRoot() *********************************************\

Purpose:	Determines pathname of the font directory containing a given font
		This is done preferentially by examination of the font's
		IntMetrics file; if this fails (ie the font is installed in a
		path not containing the intended identifier) then successive
		parent directories are scanned for MessagesN files.
In:		Pathname of font (ie a directory)
		  This will be overwritten; 9 spare chars are needed in the buffer
Out:		Pathname of retaining directory, or NULL if both techniques failed

\**************************************************************************/

static char *static_FindFontRoot (char *font)
{
  FILE *intmet;
  BOOL err = FALSE,
       intmet_wrong = FALSE;
  int index,
      font_pathlen = str_len (font);
  
  /* open the IntMetrics file */
  str_cpy (font + font_pathlen, ".IntMet*"); /* This requires an extra 8 chars */
  intmet = fopen (font, "rb");
  if (intmet == 0)
  {
    err = TRUE;
  }
  else
  {
    /* Count the length of the font name (as stored at +0 of IntMetrics) */
    index = -1;
    do
    {
      index++;
      *(FontName + index) = fgetc (intmet);
    }
    while (*(FontName + index) > 31 && index < 41);
    *(FontName + index) = '\0'; /* null-terminate */
    fclose (intmet);
    
    /* Now check that the path ends with the font identifier */
    if (*(font + font_pathlen - index - 1) != '.')
    {
      /* Straight away, we know this is wrong, because we're part-way through a leafname */
      intmet_wrong = TRUE;
    }
    else
    {
      /* Check for a match */
      void *error;
      int diff;
      *(font + font_pathlen) = '\0'; /* terminate the font name again */
      error = _swix (Territory_Collate, _INR(0,3)|_OUT(0),
          -1, FontName, font + font_pathlen - index, 1 /* ignore case */, &diff);
      if (error != NULL || diff != 0) intmet_wrong = TRUE;
    }
    
    /* If we were successful, we can truncate the pathname now */
    if (!intmet_wrong)
    {
      *(font + font_pathlen - index - 1) = '\0';
    }
    
    /* If we can't rely on IntMetrics, scan for any MessagesN file that might be applicable */
    if (intmet_wrong)
    {
      /* Determine how many directories deep we are */
      int depth = -1, /* this cancels out with the '.' preceding '$' */
          type = 0; /* for returning object type */
      for (index = 0; index < font_pathlen; index++)
      {
        if (*(font + index) == '.') depth++;
      }
      
      /* For each level, check for the existence of a messages file */
      err = TRUE; /* defaults to error */
      for (; depth > 0; depth--)
      {
        /* Find next level up */
        while (*(font + --index) != '.');
        str_cpy (font + index, ".Messages#*"); /* ie at least 1 character following "Messages" */
                                               /* this requires at most 9 extra chars in buffer */
        _swix (OS_File, _INR(0,1)|_OUT(0), 23, font, &type); /* ignore errors */
        if (type == 1)
        {
          /* Found it! */
          err = FALSE;
          *(font + index) = '\0';
          break;
        }
      }
    }
    
  }
  
  return err ? NULL : font;
}
