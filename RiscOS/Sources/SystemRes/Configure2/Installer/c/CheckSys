/******	CheckSys.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure Installer module (for SysMerge/FontMerge/BootMerge)
This file:	!System version checking

History:
Date		Who	Change
----------------------------------------------------------------------------
13/01/1998	BJGA	Created from Browse Installer source; adapted static_ReadDirectory
14/01/1998	BJGA	Fixed memory leaks in, and optimised static_ReadDirectory;
			  adapted static_SystemXref
29/01/1998	BJGA	Changed call to File_Backup to reflect changes to its parameters
09/06/1998	BJGA	Applied error numbers

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <stdio.h>
#include <string.h> /* just for memset() */
#include "kernel.h"
#include "swis.h"
/* Common */
#include "str.h"
/* local headers */
#include "CheckSys.h"
#include "Defs.h"
#include "File.h"
#include "Log.h"
#include "Mess.h"
#include "Modver.h"

/* total number of OS-version-dependent directories supported */
#define NUM_OS_VERSIONS 64
/* size of buffer to use for holding complete pathnames */
#define BUFSIZE 512

typedef struct system_file
{
  struct system_file  *next;
  int                  type;
  unsigned int         date_lo;
  unsigned int         date_hi;
  unsigned int         length;
  char                *name;
  unsigned int         deleted:1;
} system_file;

typedef struct
{
  int                  version;
  char                 version_string[8];
  system_file         *files;
} os_directory;

typedef struct
{
  unsigned int load_addr;
  unsigned int exec_addr;
  unsigned int length;
  unsigned int attr;
  unsigned int object_type;
  unsigned int file_type;
  char         name[256];
} osgbpb_file;

static int dirno; /* number of OS-version-dependent directories found */
static _kernel_oserror *static_ReadDirectory (os_directory *dir, const char *subdir,
    const char *system_dir, os_directory *os_dir_table);
static void static_FreeOSDirTable (os_directory *dir);
static int static_CompareOSDirectory (const void *c1, const void *c2);
static _kernel_oserror *static_SystemXref (os_directory *os_dir_table, const char *system_dir);


#ifdef CHECK_LEAK

static struct
{
  void *addr;
  int ref;
} LEAK_List[2000];

static int LEAK_no = 0;

static void *LEAK_malloc (int ref, size_t size)
{
  LEAK_List[LEAK_no].addr = malloc (size);
  LEAK_List[LEAK_no].ref = ref;
  return LEAK_List[LEAK_no++].addr;
}

static void LEAK_free (void *ptr)
{
  int record = 0;
  if (ptr != NULL)
  {
    for (; record < LEAK_no; record++)
    {
      if (LEAK_List[record].addr == ptr)
      {
        LEAK_List[record].addr = 0;
        break;
      }
    }
    if (record == LEAK_no) printf ("%08x: Not one of our mallocs!\n", (int) ptr);
    free (ptr);
  }
}

static void LEAK_init (void)
{
  LEAK_no = 0;
}

static void LEAK_list (void)
{
  int record = 0;
  for (; record < LEAK_no; record++)
  {
    if (LEAK_List[record].addr != 0)
      printf ("%08x %d\n", (int) LEAK_List[record].addr, LEAK_List[record].ref);
  }
}

#endif


/******	CheckSys_Check() **************************************************\

Purpose:	Entry point for this file; scans for retro-versioned modules
In:		System$Dir (validated and null-terminated)
Out:		Pointer to error block

\**************************************************************************/

_kernel_oserror *CheckSys_Check (const char *system_dir)
{
  _kernel_oserror *err = NULL;
  os_directory *os_dir_table = malloc (NUM_OS_VERSIONS * sizeof (os_directory));
  if (os_dir_table == NULL) err = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
  
#ifdef CHECK_LEAK
  LEAK_init();
#endif
  
  if (!err)
  {
    memset (os_dir_table, 0, NUM_OS_VERSIONS * sizeof (os_directory));
    dirno = 1;
    err = static_ReadDirectory (os_dir_table, "", system_dir, os_dir_table);
  }
  
  if (!err)
  {
    qsort (os_dir_table, dirno, sizeof (os_directory), static_CompareOSDirectory);
    err = static_SystemXref (os_dir_table, system_dir);
  }
  
  if (!err)
  {
    static_FreeOSDirTable (os_dir_table);
  }
  
#ifdef CHECK_LEAK
  LEAK_list();
#endif
  
  return err;
}

/******	static_ReadDirectory() ********************************************\

Purpose:	Scans a given directory within system_dir.
		Initially called for "root" dir; any numeric subdirectories
		of the "root" are assumed to be OS-version subdirectories
		and this function is called again for a new |os_directory|
		struct with an appropriate |version| field.
		For each OS-version directory, a linked list of |system_file|
		structs is built, where a filename is defined as the pathname
		segment between the OS-version directory and the file.
		To achieve this, this function calls itself recursively.
In:		dir:		where to put info about this OS-version dir
		subdir:		pathname segment between system_dir and OS-version dir
		system_dir:	System$Dir string
		os_dir_table:	to allocate a new |os_directory| struct from, to pass on
				in order to perform a scan of a different OS-version directory
Out:		Pointer to error block
Notes:		Each filename string and |system_file| struct in the
		|files| linked list of each |os_version| struct
		need deallocating afterwards.
		This function may exit with an error, and with a
		partially-built set of structs that still need deallocating.

\**************************************************************************/

static _kernel_oserror *static_ReadDirectory (os_directory *dir, const char *subdir,
    const char *system_dir, os_directory *os_dir_table)
{
  _kernel_oserror *e = NULL;
  int count = 0;
  osgbpb_file *file = malloc (sizeof (osgbpb_file));
  char *dirname = malloc (BUFSIZE);
  
  if (!file || !dirname)
  {
    e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
    goto finish;
  }
  
  sprintf(dirname, "%s%s%s%s%s", system_dir,
                                 dir->version_string[0] ? "." : "", dir->version_string,
                                 subdir[0] ? "." : "", subdir);
  
  while (count != -1)
  {
    int no_read;
    
    /* Read the next file */
    e = _swix(OS_GBPB, _INR(0,6)|_OUTR(3,4), 12, dirname, file, 1, count, sizeof (osgbpb_file), "*",
                                             &no_read, &count);
    if (e) goto finish;
    
    if (no_read > 0)
    {
      if ((file->object_type & 2) && dir->version == 0 && subdir[0] == '\0')
      {
        int osver;
        
        /* If it's a top-level directory, check to see if it's numbered */
        e = _swix(OS_ReadUnsigned, _INR(0,1)|_OUT(2), (1u<<31)|10, file->name, &osver);
        if (!e)
        {
          /* It's numbered, so make it a new OS-version directory */
          str_cpy(os_dir_table[dirno].version_string, file->name);
          os_dir_table[dirno++].version = osver;
          e = static_ReadDirectory (&os_dir_table[dirno-1], "", system_dir, os_dir_table);
          if (e) goto finish;
          continue; /* get the next object from System$Dir */
        }
      }
      
      if (file->object_type & 2)
      {
        /* A normal directory - just recurse */
        char *temp = malloc (BUFSIZE);
        if (!temp)
        {
          e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
          goto finish;
        }
        
        sprintf(temp, "%s%s%s", subdir, subdir[0] ? "." : "", file->name);
        e = static_ReadDirectory(dir, temp, system_dir, os_dir_table);
        
        free (temp);
        if (e) goto finish;
      }
      
      else if ((file->object_type & 1) && (file->file_type == 0xffa))
      {
        /* A module file */
        int namelen;
        system_file *newfile;
        
        namelen = str_len(subdir) + 1 + str_len(file->name);
        
        newfile = (system_file *) malloc (sizeof(system_file));
        if (!newfile)
        {
          e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
          goto finish;
        }
        
        memset(newfile, 0, sizeof (system_file));
        
        newfile->name = (char *) malloc (namelen+1);
        if (!newfile->name)
        {
          free (newfile);
          e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
          goto finish;
        }
        
        sprintf(newfile->name, "%s%s%s", subdir, subdir[0] ? "." : "", file->name);
        newfile->type = file->file_type;
        newfile->next = dir->files;
        newfile->date_lo = file->exec_addr;
        newfile->date_hi = file->load_addr & 0xff;
        newfile->length = file->length;
        dir->files = newfile;
      }
    }
  }

finish: /* gotos are needed to prevent the variables below causing memory leaks */
        /* the original code used multiple return statements */
  free (file);
  free (dirname);
  
  return e;
}

/******	static_FreeOSDirTable() *******************************************\

Purpose:	Clears up after static_ReadDirectory()
In:		Struct to deallocate

\**************************************************************************/

static void static_FreeOSDirTable (os_directory *os_dir_table)
{
  system_file *file,
              *nextfile;
  int dir;
  
  for (dir = 0; dir < dirno; dir++)
  {
    file = os_dir_table[dir].files;
    while (file != NULL)
    {
      nextfile = file->next;
      free (file->name);
      free (file);
      file = nextfile;
    }
  }
  free (os_dir_table);
}

/******	static_CompareOSDirectory() ***************************************\

Purpose:	qsort() callback for sorting OS-version subdirectories
In:		|os_directory| pointers, cast to |void *|
Out:		Difference

\**************************************************************************/

static int static_CompareOSDirectory (const void *c1, const void *c2)
{
    const os_directory *o1 = (const os_directory *) c1;
    const os_directory *o2 = (const os_directory *) c2;

    return o1->version - o2->version;
}

/******	static_SystemXref() ***********************************************\

Purpose:	Does the actual comparisons
In:		OS-version directory struct array, System$Dir
Out:		Pointer to error block

\**************************************************************************/

static _kernel_oserror *static_SystemXref (os_directory *os_dir_table, const char *system_dir)
{
  _kernel_oserror *e = NULL;
  int i;
  char *temp = malloc (BUFSIZE);
  
  if (!temp)
  {
    e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
    goto finish;
  }
  
  /* For each OS-version directory... */
  for (i = 0; i < dirno; i++)
  {
    system_file *file;
    /* ...compare each file... */
    for (file = os_dir_table[i].files; file; file = file->next)
    {
      int j;
      if (file->deleted) continue; /* Move on to next file in (i) OS-version directory */
      
      /* ...with each of the files in the other not-yet-processed OS-version directories */
      for (j = i + 1; j < dirno; j++)
      {
        system_file *file2;
        for (file2 = os_dir_table[j].files; file2; file2 = file2->next)
        {
          int diff;
          if (file2->deleted) continue; /* Move on to next file in (j) OS-version directory */
          
          e = _swix (Territory_Collate, _INR(0,3)|_OUT(0), -1,
            file2->name, file->name, 1 /* ignore case */, &diff);
          if (e) goto finish;
          
          if (diff == 0)
          {
            int ver, ver2;
            sprintf(temp, "%s%s%s.%s", system_dir,
                                       os_dir_table[i].version ? "." : "",
                                       os_dir_table[i].version_string,
                                       file->name);
            ver = Modver_Read (temp);
            sprintf(temp, "%s%s%s.%s", system_dir,
                                       os_dir_table[j].version ? "." : "",
                                       os_dir_table[j].version_string,
                                       file2->name);
            ver2 = Modver_Read (temp);
            
            if (ver2 < ver)
            {
              /* Delete this older file in this newer OS-version directory */
              e = File_Backup (temp, SKIP, 1, 0xFFA, ver2);
              if (e) goto finish;
              file2->deleted = 1;
              
              if (os_dir_table[i].version)
              {
                e = Log_Write ("Removed", temp, " version %d.%02d; newer version %d.%02d in %d\n",
                               ver2/100, ver2%100, ver/100, ver%100, os_dir_table[i].version);
              }
              else
              {
                e = Log_Write ("Removed", temp, " version %d.%02d; newer version %d.%02d in root\n",
                               ver2/100, ver2%100, ver/100, ver%100);
                if (!e)
                {
                  e = Log_Write ("**** This module should be in a 200,310,etc "
                                 "directory, not the root\n", NULL);
                }
              }
              if (e) goto finish;
              break; /* Move on to next (j) OS-version directory */
            }
          }
        }
      }
    }
  }
  
finish:
  free (temp);
  
  return e;
}
