/******	Mess.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure Installer module (for SysMerge/FontMerge/BootMerge)
This file:	Message lookup and error handling routines

History:
Date		Who	Change
----------------------------------------------------------------------------
17/12/1997	BJGA	Created (error lookup only)
05/01/1998	BJGA	Added parameter support and non-error lookup
22/01/1998	BJGA	Added Mess_CacheError

\**************************************************************************/

/* CLib */
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
/* Common */
#include "str.h"
/* local headers */
#include "Defs.h"
#include "Housekeep.h"
#include "Mess.h"

static _kernel_oserror	static_ErrorBlockIn = { 0, "" },
			static_ErrorBlockOut = { 0, "" };
static char static_LookedUpText[256];
/* the above are held globally due to limited stack */


/******	Mess_GenerateError() **********************************************\

Purpose:	Builds an error block from a message file token
In:		Pointer to token, error number, parameter count,
		  and between 0 and 4 (const char *) parameter pointers
Globals:	messages: Message file descriptor block to use
Out:		Pointer to resultant error block

\**************************************************************************/

_kernel_oserror *Mess_GenerateError (const char *token, int errno, int nparams, ...)
{
  va_list ap;
  const char *p[4] = { NULL, NULL, NULL, NULL };
  int i;
  
  /* Set up tokenised error block */
  static_ErrorBlockIn.errnum = errno;
  str_ncpy ((char *) &(static_ErrorBlockIn.errmess),
    token, sizeof (static_ErrorBlockIn.errmess));
  
  /* Determine parameter pointers */
  va_start(ap,nparams);
  nparams = MIN(nparams,4);
  for (i = 0; i < nparams; ++i)
  {
    p[i] = va_arg(ap,const char *);
  }
  va_end(ap);  
  
  /* Look up token using our buffer */
  return _swix (MessageTrans_ErrorLookup, _INR(0,7),
    (int) &static_ErrorBlockIn, (int) &messages,
    (int) &static_ErrorBlockOut, sizeof (static_ErrorBlockOut),
    (int) p[0], (int) p[1], (int) p[2], (int) p[3]);
}

/******	Mess_CacheError() *************************************************\

Purpose:	Copies an error block where it won't be trampled on by MessageTrans
In:		Pointer to MessageTrans error block
Out:		Pointer to static error block

\**************************************************************************/

_kernel_oserror *Mess_CacheError (_kernel_oserror *err_in)
{
  if (err_in != NULL)
  {
    static_ErrorBlockOut.errnum = err_in->errnum;
    str_cpy (&static_ErrorBlockOut.errmess[0], &err_in->errmess[0]);
  }
  return (err_in ? &static_ErrorBlockOut : NULL);
}

/******	Mess_LookUp() *****************************************************\

Purpose:	Looks up text from a message file token
In:		Pointer to token (0, 10 or 13 terminated),
		  address to use to return pointer to result string,
		  parameter count,
		  and between 0 and 4 (const char *) parameter pointers
Globals:	messages: Message file descriptor block to use
Out:		Pointer to error block if lookup failed

\**************************************************************************/

_kernel_oserror *Mess_LookUp (const char *token, char **result_ptr, int nparams, ...)
{
  va_list ap;
  const char *p[4] = { NULL, NULL, NULL, NULL };
  int i;
  
  /* Determine parameter pointers */
  va_start(ap,nparams);
  nparams = MIN(nparams,4);
  for (i = 0; i < nparams; ++i)
  {
    p[i] = va_arg(ap,const char *);
  }
  va_end(ap);  
  
  /* Look up token using our buffer */
  return _swix (MessageTrans_Lookup, _INR(0,7)|_OUT(2),
    (int) &messages, (int) token,
    (int) &static_LookedUpText, sizeof (static_LookedUpText),
    (int) p[0], (int) p[1], (int) p[2], (int) p[3],
    (int *) result_ptr);
}
