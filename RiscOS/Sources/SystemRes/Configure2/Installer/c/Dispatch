/******	Dispatch.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Configure Installer module (for SysMerge/FontMerge/BootMerge)
This file:	General *-command handling, validating and dispatching

History:
Date		Who	Change
----------------------------------------------------------------------------
15/12/1997	BJGA	Created structure
05/01/1998	BJGA	Implemented log file commands
06/01/1998	BJGA	Implemented DispatchUpdate
07/01/1998	BJGA	Bugfixed DispatchUpdate, implemented DispatchRemove
08/01/1998	BJGA	Bugfixed DispatchUpdate and DispatchRemove,
			  implemented DispatchMerge, DispatchDeMerge and DispatchCheckSystem
14/01/1998	BJGA	Unified Log_Write calls
20/01/1998	BJGA	Memory leak in OS variable lookup fixed
26/01/1998	BJGA	|language| now returned from File_DiagnoseFont and passed to File_Copy
28/01/1998	BJGA	Install_Update: rules added for installing files over directories or voids
			  (in order to support replacing a file by a directory or vice-versa);
			  changes to reflect changes to File_DiagnoseFont and File_Backup parameters
29/01/1998	BJGA	Simplified syntax of *Install_Merge;
			  static_DispatchUpdate: object-type-dependent code reorganised into more
			  readable order, voids and non-font directories are now assigned dates, and
			  log file description for files replacing a parent-file changed to "Added..."
			  for consistency with subsequent files added to the same directory;
			  static_DispatchMerge: file checking changed to be in line with rules used
			  in DispatchUpdate (eg directory replacement), and now performs the loading
			  of the source files itself
30/01/1998	BJGA	static_DispatchMerge: call to File_Backup delegated to Merge_(De)Merge, and
			  the necessary extra parameters are passed to Merge_(De)Merge
20/04/1998	BJGA	Bugfix: correct filename reported back from *Install_(De)Merge when changes
			  file absent, a directory or not an obey file
27/04/1998	BJGA	Changed Dispatch_Dispatch args to be compatible with CMHG 5.18
09/06/1998	BJGA	Applied error numbers

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
/* Common */
#include "str.h"
/* local headers */
#include "CheckSys.h"
#include "Defs.h"
#include "File.h"
#include "Log.h"
#include "Merge.h"
#include "Mess.h"
#include "ModHdr.h"
#include "Modver.h"
#include "OSVar.h"

#define SYSTEMDIR "System$Dir"

#define GREATER64(xhi,xlo,yhi,ylo) ( (xhi) > (yhi) || ( (xhi) == (yhi) && (xlo) > (ylo) ) )
#define DO(x) if (err == NULL) { err = (x); } /* This tidies up considerably */

static _kernel_oserror *static_DispatchLogDir (const char *newdir);
static _kernel_oserror *static_DispatchNoLogDir (void);
static _kernel_oserror *static_DispatchUpdate (const char *source_o, const char *dest_o);
static _kernel_oserror *static_DispatchRemove (const char *file_o);
static _kernel_oserror *static_DispatchMerge (const char *base_o, const char *changes_o,
    const char *dest_o, BOOL DeMerge);
static _kernel_oserror *static_DispatchCheckSystem (void);


/******	Dispatch_Dispatch() ***********************************************\

Purpose:	General handling of * commands
In:		Standard args
Out:		Pointer to error block if command failed

\**************************************************************************/

extern _kernel_oserror *Dispatch_Dispatch (const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *returned = NULL;
  const char **argv;
  char	*argptr,
  	*argstrterm;
  int	arg;
  
  IGNORE(pw);
  
  argv = malloc (argc * sizeof (char *) + 1); /* +1 is so we never get malloc(0) */
  if (argv != NULL)
  {
    argstrterm = malloc (str_len (arg_string) + 1);
    if (argstrterm != NULL)
    {
      /* Copy the command line where we can alter it safely */
      str_cpy (argstrterm, arg_string);
      
      /* Parse the argument string */
      argptr = argstrterm;
      for (arg = 0; arg < argc; arg++)
      {
        /* Skip whitespace */
        while (*argptr == ' ') argptr++;
        /* We're pointing at beginning of argument */
        argv [arg] = argptr;
        /* Skip argument */
        while (*argptr > ' ') argptr++;
        /* And null-terminate it */
        *(argptr++) = '\0';
      }
      
      switch (cmd_no)
      {
        case CMD_Install_LogDir:
          returned = static_DispatchLogDir ((argc == 0) ? NULL : argv [0]);
          break;
        case CMD_Install_NoLogDir:
          returned = static_DispatchNoLogDir ();
          break;
        case CMD_Install_Update:
          returned = static_DispatchUpdate (argv [0], argv [1]);
          break;
        case CMD_Install_Remove:
          returned = static_DispatchRemove (argv [0]);
          break;
        case CMD_Install_Merge:
          returned = static_DispatchMerge (argv [0], argv [1], argv [2], FALSE);
          break;
        case CMD_Install_DeMerge:
          returned = static_DispatchMerge (argv [0], argv [1], argv [2], TRUE);
          break;
        case CMD_Install_CheckSystem:
          returned = static_DispatchCheckSystem ();
          break;
      }
      free (argstrterm);
    }
    free (argv);
  }
  return returned;
}

/******	static_DispatchLogDir() *******************************************\

Purpose:	Validation and dispatching of *Install_LogDir
In:		Argument pointer (or NULL if there was none)
Out:		Pointer to any returned error

\**************************************************************************/

static _kernel_oserror *static_DispatchLogDir (const char *newdir)
{
  _kernel_oserror *err = NULL;
  int	type;
  
  if (newdir == NULL)
  {
    err = Log_ShowDir ();
  }
  else
  {
    err = _swix (OS_File, _INR(0,1)|_OUT(0), 23, (int) newdir, &type);
    if (err == NULL)
    {
      switch (type)
      {
        case 0: /* No object */
          err = Mess_GenerateError ("NoDir", errno_NO_DIR, 1, newdir);
          break;
        case 1: /* File found */
          err = Mess_GenerateError ("IsntDir", errno_ISNT_DIR, 1, newdir);
          break;
        case 2:
        case 3:
          /* Directories and image files are okay to hold log files / backup directories */
          Log_SetDir (newdir);
          break;
      }
    }
  }
  return err;
}

/******	static_DispatchNoLogDir() *****************************************\

Purpose:	Dispatching of *Install_NoLogDir
Out:		Pointer to any returned error

\**************************************************************************/

static _kernel_oserror *static_DispatchNoLogDir (void)
{
  Log_SetDir (NULL);
  return NULL;
}

/******	static_DispatchUpdate() *******************************************\

Purpose:	Validation and dispatching of *Install_Update
In:		Required filespecs (unvalidated)
Out:		Pointer to any returned error

\**************************************************************************/

static _kernel_oserror *static_DispatchUpdate (const char *source_o, const char *dest_o)
{
  _kernel_oserror *err = NULL;
  int	source_type,
  	source_datehi,
  	source_datelo,
  	source_filetype,
  	dest_type,
  	dest_datehi,
  	dest_datelo,
  	dest_filetype;
  BOOL	source_language = FALSE;
  char	*source = NULL,
  	*dest = NULL;
  
  /* Canonicalise both pathnames */
  DO( File_Canonicalise (source_o, &source));
  DO( File_Canonicalise (dest_o, &dest));
  
  /* Check both pathnames are valid, read whether the objects are present,
   * and find their "filetype".
   */
  DO( _swix (OS_File, _INR(0,1)|_OUT(0)|_OUTR(2,3)|_OUT(6), 23, (int) source,
      &source_type, &source_datehi, &source_datelo, &source_filetype));
  DO( _swix (OS_File, _INR(0,1)|_OUT(0)|_OUTR(2,3)|_OUT(6), 23, (int) dest,
      &dest_type, &dest_datehi, &dest_datelo, &dest_filetype));
  
  /* Treat image files as normal files */
  if (source_type == 3) source_type = 1;
  if (dest_type == 3) dest_type = 1;
  
  /* Generate an error if the source didn't exist */
  if (source_type == 0)
  {
    DO( Mess_GenerateError ("NoAny", errno_NO_ANY, 1, source));
  }
  
  /* Get a date for a void destination */
  /* This is necessary because an element higher up the path may in fact already exist, and be */
  /* a file; the void needs to assume the date of any such parent-file */
  if (dest_type == 0)
  {
    DO( File_DateVoid (dest, &dest_datehi, &dest_datelo));
  }

  /* Give untyped files a date of 0 */
  if (source_type == 1 && source_filetype == -1)
  {
    source_datehi = source_datelo = 0;
  }
  if (dest_type == 1 && dest_filetype == -1)
  {
    dest_datehi = dest_datelo = 0;
  }
  
  /* Check source for being a font, mark as a directory with "filetype" 0 if so */
  /* Generate an error if it's a non-font directory */
  /* Also date it if it's a font (use non-recursive algorithm) */
  if (source_type == 2)
  {
    DO( File_DiagnoseFont (source, &source_filetype, &source_language));
    if (source_filetype != 0)
    {
      DO( Mess_GenerateError ("IsADir", errno_IS_A_DIR, 1, source));
    }
    DO( File_DateDir (FALSE, source, &source_datehi, &source_datelo));
  }
  
  /* Check the dest for being a font, mark as a directory with "filetype" 0 if so */
  /* Also date the directory, whether or not it's a font */
  /* Its date must only be determined non-recursively if it's being overwritten by a font */
  if (dest_type == 2)
  {
    DO( File_DiagnoseFont (dest, &dest_filetype, NULL));
    DO( File_DateDir ((source_type == 1), dest, &dest_datehi, &dest_datelo));
  }
  
  
  /* Handle sub-directory, or sub-untyped, void destinations */
  if (dest_type == 0 && dest_datehi == 0 && dest_datelo == 0) /* nothing currently at destination */
  {
    DO( File_Copy (source, dest, source_type, source_language));
      /* any necessary backup of parent-files is done during the directory tree build operation */
    DO( Log_Write ((source_type == 2) ? "Added face" : "Added file", dest, "\n"));
  }
  else
  {
    int source_ver = -1, /* these versions remain if files are not modules */
        dest_ver = -1;
    
    /* Read module versions separately, in case only one is a module */
    if (source_filetype == 0xFFA)
    {
      source_ver = Modver_Read (source);
    }
    if (dest_filetype == 0xFFA)
    {
      dest_ver = Modver_Read (dest);
    }
    
    /* Do module comparison if appropriate */
    if ((source_ver > dest_ver) && dest_ver != -1) /* NB this means both were successful */
    {
      DO( File_Backup (dest, SKIP, 1 /* == dest_type */, 0xFFA /* == dest_filetype */, dest_ver));
      DO( File_Copy (source, dest, source_type, source_language));
      DO( Log_Write ("Updated", dest, " version %d.%02d to version %d.%02d\n",
        dest_ver/100, dest_ver%100, source_ver/100, source_ver%100));
    }
    
    /* Otherwise (not modules, or module versions matched or couldn't be read) use date stamps */
    if ((source_ver == -1 || dest_ver == -1 || source_ver == dest_ver)
        && GREATER64(source_datehi,source_datelo,dest_datehi,dest_datelo) )
    {
      if (dest_type != 0)
      {
        DO( File_Backup (dest, (source_type == 1), dest_type, dest_filetype, dest_ver));
        /* ie. fonts or dirs are backed up recursively, unless being overwritten by a font */
        /* backup of sub-file-void's parent-file is done during the directory tree build operation */
      }
      DO( File_Copy (source, dest, source_type, source_language));
      DO( Log_Write ((dest_type != 0) ? "Updated" : (source_type == 2) ? "Added face" : "Added file",
           dest, "\n"));
    }
  }
  
  /* Free workspace */
  free (dest);
  free (source);
  
  return err;
}

/******	static_DispatchRemove() *******************************************\

Purpose:	Validation and dispatching of *Install_Remove
In:		Filespec to remove (unvalidated)
Out:		Pointer to any returned error

\**************************************************************************/

static _kernel_oserror *static_DispatchRemove (const char *file_o)
{
  _kernel_oserror *err = NULL;
  int	type = 0,
  	filetype = 0;
  char	*file = NULL;
  
  /* Canonicalise pathname */
  DO( File_Canonicalise (file_o, &file));
  
  /* Check pathname is valid, read whether present, and find "filetype" */
  DO( _swix (OS_File, _INR(0,1)|_OUT(0)|_OUT(6), 23, (int) file, &type, &filetype));
  
  /* Treat image files as normal files */
  if (type == 3) type = 1;
  
  /* Check for font, mark as a directory with "filetype" 0 */
  if (type == 2)
  {
    DO( File_DiagnoseFont (file, &filetype, NULL));
  }
  
  /* Don't do anything if the file is already deleted; otherwise delete it */
  if (type > 0)
  {
    int ver = -1;
    if (filetype == 0xFFA) ver = Modver_Read (file);
    DO( File_Backup (file, (filetype != 0), type, filetype, ver));
      /* fonts should not be removed recursively */
    DO( Log_Write ("Removed", file, "\n"));
  }
    
  /* Free workspace */
  free (file);
  
  return err;
}

/******	static_DispatchMerge() ********************************************\

Purpose:	Validation and dispatching of *Install_Merge and *Install_DeMerge
In:		Required filespecs (unvalidated), which command to dispatch,
		  and subsequent argument list (if appropriate)
Out:		Pointer to any returned error

\**************************************************************************/

static _kernel_oserror *static_DispatchMerge (const char *base_o, const char *changes_o,
    const char *dest_o, BOOL DeMerge)
{
  _kernel_oserror *err = NULL;
  int	base_type,
  	base_len,
  	base_filetype,
  	changes_type,
  	changes_len,
  	changes_filetype,
  	dest_type,
  	dest_filetype,
  	dest_ver = -1;
  char	*base = NULL,
  	*changes = NULL,
  	*dest = NULL,
  	*base_file = NULL,
  	*changes_file = NULL;
  
  /* Canonicalise the pathnames */
  DO( File_Canonicalise (base_o, &base));
  DO( File_Canonicalise (changes_o, &changes));
  DO( File_Canonicalise (dest_o, &dest));
  
  /* Check all pathnames are valid, read whether the objects are present,
   * and find their "filetype".
   */
  DO( _swix (OS_File, _INR(0,1)|_OUT(0)|_OUT(4)|_OUT(6), 23, (int) base,
      &base_type, &base_len, &base_filetype));
  DO( _swix (OS_File, _INR(0,1)|_OUT(0)|_OUT(4)|_OUT(6), 23, (int) changes,
      &changes_type, &changes_len, &changes_filetype));
  DO( _swix (OS_File, _INR(0,1)|_OUT(0)|_OUT(6), 23, (int) dest,
      &dest_type, &dest_filetype));
  
  /* Treat image files as normal files */
  if (base_type == 3) base_type = 1;
  if (changes_type == 3) changes_type = 1;
  if (dest_type == 3) dest_type = 1;
  
  /* Generate an error if either of the sources source didn't exist or was
   * of the wrong filetype, or was a directory */
  if (base_type == 0)
  {
    DO( Mess_GenerateError ("NoAny", errno_NO_ANY, 1, base));
  }
  if (base_type == 2)
  {
    DO( Mess_GenerateError ("IsADir", errno_IS_A_DIR, 1, base));
  }
  if (base_filetype != 0xFEB && base_filetype != 0xFEA && base_filetype != 0xFD7)
  {
    DO( Mess_GenerateError ("IsntAnObey", errno_ISNT_AN_OBEY, 1, base));
  }
  
  if (changes_type == 0)
  {
    DO( Mess_GenerateError ("NoAny", errno_NO_ANY, 1, changes));
  }
  if (changes_type == 2)
  {
    DO( Mess_GenerateError ("IsADir", errno_IS_A_DIR, 1, changes));
  }
  if (changes_filetype != 0xFEB && changes_filetype != 0xFEA && changes_filetype != 0xFD7)
  {
    DO( Mess_GenerateError ("IsntAnObey", errno_ISNT_AN_OBEY, 1, changes));
  }
  
  /* Check for destination being a font or module */
  if (dest_type == 2)
  {
    DO( File_DiagnoseFont (dest, &dest_filetype, NULL));
  }
  if (dest_type == 1 && dest_filetype == 0xFFA)
  {
    dest_ver = Modver_Read (dest);
  }
  
  /* Load the base file and changes file */
  if (!err)
  {
    base_file = malloc (base_len + 1);
    changes_file = malloc (changes_len + 1);
    if (!base_file || !changes_file) err = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
  }
  DO( _swix (OS_File, _INR(0,3), 16 /* Load */, base, base_file, 0));
  DO( _swix (OS_File, _INR(0,3), 16 /* Load */, changes, changes_file, 0));
  if (!err)
  {
    *(base_file + base_len) = *(changes_file + changes_len) = '\n'; /* terminate */
  }
  
  /* Do the Merge or DeMerge */
  /* Log writing and backup are both performed within the called function */
  if (DeMerge)
  {
    DO( Merge_DeMerge (base_file, base, base_len, changes_file, changes, changes_len,
        dest, base_filetype, dest_type, dest_filetype, dest_ver));
  }
  else
  {
    DO( Merge_Merge (base_file, base, base_len, changes_file, changes, changes_len,
        dest, base_filetype, dest_type, dest_filetype, dest_ver));
  }
  
  /* Free workspace */
  free (changes_file);
  free (base_file);
  free (dest);
  free (changes);
  free (base);
  
  return err;
}

/******	static_DispatchCheckSystem() **************************************\

Purpose:	Dispatching of *Install_CheckSystem
Out:		Pointer to any returned error

\**************************************************************************/

static _kernel_oserror *static_DispatchCheckSystem (void)
{
  _kernel_oserror *err = NULL;
  char *systemdir = NULL,
       *system = NULL;
  int syslen,
      type = 0;
  
  /* Read System$Dir variable */
  if (!OSVar_Exists (SYSTEMDIR))
  {
    DO( Mess_GenerateError ("NoSystemDir", errno_NO_SYSTEM_DIR, 0));
  }
  if (!err)
  {
    syslen = OSVar_Length (SYSTEMDIR);
    systemdir = malloc (syslen + 1);
    if (!systemdir) err = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
    DO( _swix (OS_ReadVarVal, _INR(0,4), SYSTEMDIR, systemdir, syslen + 1, 0, 0));
    if (!err) *(systemdir + syslen) = '\0'; /* needs terminating */
  }
  
  /* Canonicalise, just in case */
  DO( File_Canonicalise (systemdir, &system));
  
  /* And check we are pointing at a directory */
  DO( _swix (OS_File, _INR(0,1)|_OUT(0), 23, (int) system, &type));
  if (type != 2)
  {
    DO( Mess_GenerateError ("InvSystemDir", errno_INV_SYSTEM_DIR, 0));
  }
  else
  {
    /* Do it */
    DO( CheckSys_Check (system));
  }

  /* Free workspace */
  free (systemdir);
  free (system);

  return err;
}
