/******	WimpE.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	BootApps/BootBoot/BootRun
This file:	Wimp event code

History:
Date		Who	Change
----------------------------------------------------------------------------
10/06/1998	BJGA	Created
16/06/1998	BJGA	Implemented Redraw_Window_Request and Mouse_Click handlers
17/06/1998	BJGA	Escape now cancels drags
18/06/1998	BJGA	Clicks on pane now set input focus (to improve chances of
			receiving Escape hotkey events). Use of Escape key to double
			as Cancel is now explicitly coded.
			Added User_Drag_Box handler.

\**************************************************************************/

/* CLib */
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
#include "window.h"
/* ConfigureLib */
#include "misc.h"
/* Local headers */
#include "List.h"
#include "Main.h"
#include "WimpE.h"

#ifndef Wimp_AutoScroll
#define Wimp_AutoScroll	(0x400FD)
#endif

static int static_RedrawWindowRequest (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_MouseClick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_UserDragBox (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_KeyPressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);

int WimpE_Mask =	Wimp_Poll_NullMask +
			Wimp_Poll_PointerLeavingWindowMask +
			Wimp_Poll_PointerEnteringWindowMask +
			Wimp_Poll_LoseCaretMask +
			Wimp_Poll_GainCaretMask +
			Wimp_Poll_PollWordNonZeroMask ;


void WimpE_Register (void)
{
  throw (event_register_wimp_handler (-1, Wimp_ERedrawWindow, static_RedrawWindowRequest, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EMouseClick, static_MouseClick, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EUserDrag, static_UserDragBox, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EKeyPressed, static_KeyPressed, NULL));
}

/******	static_RedrawWindowRequest() **************************************\

Purpose:	Handles Redraw_Window_Request event

\**************************************************************************/

static int static_RedrawWindowRequest (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  int pane_handle;
  throw (window_get_wimp_handle (0, Pane_Obj, &pane_handle));
  if (((WimpRedrawWindowRequestEvent *) event)->window_handle == pane_handle)
  {
    List_RedrawWindow (pane_handle);
  }
  return 1;
}

/******	static_MouseClick() ***********************************************\

Purpose:	Handles Mouse_Click event

\**************************************************************************/

static int static_MouseClick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpGetWindowStateBlock pane;
  int wao_x;
  int wao_y;
  throw (window_get_wimp_handle (0, Pane_Obj, &(pane.window_handle)));
  throw (wimp_get_window_state (&pane));
  wao_x = pane.visible_area.xmin - pane.xscroll;
  wao_y = pane.visible_area.ymax - pane.yscroll;
  if (((WimpMouseClickEvent *) event)->window_handle == pane.window_handle)
  {
    if (((WimpMouseClickEvent *) event)->buttons & (Wimp_MouseButtonAdjust | Wimp_MouseButtonSelect))
    {
      int handle;
      throw (window_get_wimp_handle (0, Window_Obj, &handle));
      throw (wimp_set_caret_position (handle, -1, 0, 0, 1<<25, -1));
    }
    List_HandleMouseClick (pane.window_handle, ((WimpMouseClickEvent *) event)->mouse_x - wao_x,
        ((WimpMouseClickEvent *) event)->mouse_y - wao_y, ((WimpMouseClickEvent *) event)->buttons);
  }
  return 1;
}

/******	static_UserDragBox() **********************************************\

Purpose:	Handles User_Drag_Box event

\**************************************************************************/

static int static_UserDragBox (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpGetWindowStateBlock pane;
  int wao_x;
  int wao_y;
  throw (window_get_wimp_handle (0, Pane_Obj, &(pane.window_handle)));
  throw (wimp_get_window_state (&pane));
  wao_x = pane.visible_area.xmin - pane.xscroll;
  wao_y = pane.visible_area.ymax - pane.yscroll;
  /* Make bbox work-area-relative */
  ((WimpUserDragBoxEvent *) event)->bbox.xmin -= wao_x;
  ((WimpUserDragBoxEvent *) event)->bbox.ymin -= wao_y;
  ((WimpUserDragBoxEvent *) event)->bbox.xmax -= wao_x;
  ((WimpUserDragBoxEvent *) event)->bbox.ymax -= wao_y;
  /* Make sure min/max values are the right way round */
  if (((WimpUserDragBoxEvent *) event)->bbox.xmin > ((WimpUserDragBoxEvent *) event)->bbox.xmax)
  {
    int temp = ((WimpUserDragBoxEvent *) event)->bbox.xmax;
    ((WimpUserDragBoxEvent *) event)->bbox.xmax = ((WimpUserDragBoxEvent *) event)->bbox.xmin;
    ((WimpUserDragBoxEvent *) event)->bbox.xmin = temp;
  }
  if (((WimpUserDragBoxEvent *) event)->bbox.ymin > ((WimpUserDragBoxEvent *) event)->bbox.ymax)
  {
    int temp = ((WimpUserDragBoxEvent *) event)->bbox.ymax;
    ((WimpUserDragBoxEvent *) event)->bbox.ymax = ((WimpUserDragBoxEvent *) event)->bbox.ymin;
    ((WimpUserDragBoxEvent *) event)->bbox.ymin = temp;
  }
  
  _swi (Wimp_AutoScroll, _IN(0), 0); /* stop autoscrolling */
  
  List_HandleDragBox (pane.window_handle, ((WimpUserDragBoxEvent *) event)->bbox);
  return 1;
}

/******	static_KeyPressed() ***********************************************\

Purpose:	Handles Key_Pressed event

\**************************************************************************/

static int static_KeyPressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (event->key_pressed.key_code == 0x1B) /* Escape */
  {
    if (Dragging)
    {
      _swi (Wimp_DragBox, _IN(1), -1);   /* stop dragging */
      _swi (Wimp_AutoScroll, _IN(0), 0); /* stop scrolling */
      Dragging = FALSE;
    }
    else
    {
      ToolboxEvent ev;
      ev.hdr.size = sizeof (ev.hdr);
      ev.hdr.event_code = ActionButton_Selected;
      ev.hdr.flags = ActionButton_Selected_Cancel | ActionButton_Selected_Cancel;
      throw (toolbox_raise_toolbox_event (0, Window_Obj, Window_CANCEL, &ev));
    }
  }
  else
  {
    throw (wimp_process_key (event->key_pressed.key_code));
  }
  return 1;
}
