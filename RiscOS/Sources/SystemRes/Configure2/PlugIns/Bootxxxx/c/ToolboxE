/******	ToolboxE.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	BootApps/BootBoot/BootRun
This file:	Toolbox event code

History:
Date		Who	Change
----------------------------------------------------------------------------
10/06/1998	BJGA	Created
11/06/1998	BJGA	Implemented Cancel action button handler and
			DCS Discard button and DialogueCompleted handlers
16/06/1998	BJGA	Implemented Select-all and Clear-selection button
			handlers; reads list from disc again on Adjust-Cancel
18/06/1998	BJGA	Implemented Remove-selection button handler.
19/06/1998	BJGA	Implemented "Set" buttons in main window and DCS box

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
#include "dcs.h"
#include "gadgets.h"
/* ConfigureLib */
#include "misc.h"
/* Local headers */
#include "List.h"
#include "Main.h"
#include "ToolboxE.h"
#include "WimpM.h"

static	unsigned int	LastActionButtonFlags = 0;
static	BOOL		IgnoreNextDCSDialogueCompleted = FALSE;
	int		ToolboxE_DCS_Action = 0; /* 1 => desktop shutdown, 2 => plug-in quit */

static int static_ActionButtonSelected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int static_DCSDiscard (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int static_DCSSave (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int static_DCSDialogueCompleted (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static void static_Cancel (int buttons);

int ToolboxE_Events [5] =     { ActionButton_Selected,
				DCS_Discard,
				DCS_Save,
				DCS_DialogueCompleted,
				0 };

void ToolboxE_Register (void)
{
  throw (event_register_toolbox_handler (-1, ActionButton_Selected, static_ActionButtonSelected, NULL));
  throw (event_register_toolbox_handler (-1, DCS_Discard, static_DCSDiscard, NULL));
  throw (event_register_toolbox_handler (-1, DCS_Save, static_DCSSave, NULL));
  throw (event_register_toolbox_handler (-1, DCS_DialogueCompleted, static_DCSDialogueCompleted, NULL));
}

/******	static_ActionButtonSelected() *************************************\

Purpose:	Handles ActionButton_Selected event

\**************************************************************************/

static int static_ActionButtonSelected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  if (id_block->self_id == Window_Obj)
  {
    switch (id_block->self_component)
    {
      case Window_REMOVE:
        List_RemoveSelection ();
        break;
        
      case Window_ALL:
        List_SetAll (TRUE);
        break;
        
      case Window_CLEAR:
        List_SetAll (FALSE);
        break;
        
      case Window_SET:
        List_Write (event->hdr.flags);
        break;
        
      case Window_CANCEL:
        if (Modified)
        {
          LastActionButtonFlags = event->hdr.flags;
          throw (toolbox_show_object (Toolbox_ShowObject_AsMenu, DCS_Obj, Toolbox_ShowObject_Centre,
              NULL, NULL_ObjectId, NULL_ComponentId));
        }
        else
        {
          static_Cancel (event->hdr.flags);
        }
        break;
    }
  }
  return 1;
}

/******	static_DCSDiscard() ***********************************************\

Purpose:	Handles DCS_Discard event

\**************************************************************************/

static int static_DCSDiscard (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  WimpPollBlock block;
  int tda = ToolboxE_DCS_Action;
  
  IgnoreNextDCSDialogueCompleted = TRUE;
  ToolboxE_DCS_Action = 0; /* set now in case an error occurs */
  
  switch (tda)
  {
    case 0: /* Normal case - equivalent to Cancel */
      static_Cancel (LastActionButtonFlags);
      break;
      
    case 1: /* Desktop shutdown - equivalent to Cancel + generate hotkey */
      static_Cancel (LastActionButtonFlags);
      block.key_pressed.key_code = 0x1FC; /* Ctrl-Shift-F12 */
      throw (wimp_send_message (Wimp_EKeyPressed, &block, WimpM_Sender, 0, NULL));
      break;
      
    case 2: /* Plug-in quit - restart process, don't complain next time */
      block.user_message.hdr.size = 24;
      block.user_message.hdr.your_ref = 0;
      block.user_message.hdr.action_code = Wimp_MPlugInQuitContinue;
      block.user_message.data.words [0] = WimpM_SenderDescriptor;
      throw (wimp_send_message (Wimp_EUserMessage, &block, WimpM_Sender, 0, NULL));
      Complain = FALSE;
      break;
  }
  return 1;
}

/******	static_DCSSave() **************************************************\

Purpose:	Handles DCS_Save event

\**************************************************************************/

static int static_DCSSave (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  WimpPollBlock block;
  int tda = ToolboxE_DCS_Action;
  _kernel_oserror *err;
  
  IgnoreNextDCSDialogueCompleted = TRUE;
  ToolboxE_DCS_Action = 0; /* set now in case an error occurs */
  
  /* Fake a click on "Set" */
  err = List_Write (LastActionButtonFlags);
  
  switch (tda)
  {
    case 0: /* Normal case - no further action required */
      break;
      
    case 1: /* Desktop shutdown - if no error, generate hotkey */
      if (!err)
      {
        block.key_pressed.key_code = 0x1FC; /* Ctrl-Shift-F12 */
        throw (wimp_send_message (Wimp_EKeyPressed, &block, WimpM_Sender, 0, NULL));
      }
      break;
      
    case 2: /* Plug-in quit - if no error, send PlugInQuitContinue, else broadcast PlugInQuitAbort */
      if (!err)
      {
        block.user_message.hdr.size = 24;
        block.user_message.hdr.your_ref = 0;
        block.user_message.hdr.action_code = Wimp_MPlugInQuitContinue;
        block.user_message.data.words [0] = WimpM_SenderDescriptor;
        throw (wimp_send_message (Wimp_EUserMessage, &block, WimpM_Sender, 0, NULL));
      }
      else
      {
        block.user_message.hdr.size = 24;
        block.user_message.hdr.your_ref = 0;
        block.user_message.hdr.action_code = Wimp_MPlugInQuitAbort;
        block.user_message.data.words [0] = WimpM_SenderDescriptor;
        throw (wimp_send_message (Wimp_EUserMessage, &block, 0, 0, NULL));
      }
      break;
  }
  
  /* Throw the error returned from List_Write */
  throw (err);
  
  return 1;
}

/******	static_DCSDialogueCompleted() *************************************\

Purpose:	Handles DCS_DialogueCompleted event

\**************************************************************************/

static int static_DCSDialogueCompleted (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  BOOL inddc = IgnoreNextDCSDialogueCompleted;
  IgnoreNextDCSDialogueCompleted = FALSE; /* set now in case an error occurs */
  
  if (inddc == FALSE)
  {
    WimpMessage block;
    if (ToolboxE_DCS_Action == 2)
    {
      /* Broadcast Message_PlugInQuitAbort */
      block.hdr.size = 24;
      block.hdr.your_ref = 0;
      block.hdr.action_code = Wimp_MPlugInQuitAbort;
      block.data.words [0] = WimpM_SenderDescriptor;
      throw (wimp_send_message (Wimp_EUserMessage, &block, 0, 0, NULL));
    }
    
    ToolboxE_DCS_Action = 0;
  }
  return 1;
}

/******	static_Cancel() ***************************************************\

Purpose:	Performs the actions of a click on the Cancel action button
		without opening DCS box
In:		Mouse button state of click

\**************************************************************************/

void static_Cancel (int buttons)
{
  LastActionButtonFlags = buttons;
  if (0 == (buttons & ActionButton_Selected_Adjust))
  {
    Quit = TRUE;
  }
  else
  {
    /* Restore list from disc */
    throw (List_Read (FALSE));
    
    /* Update modified flag */
    if (Modified)
    {
      throw (window_set_title (0, Window_Obj, Title_Unmodified));
      Modified = FALSE;
    }
  }
}
