/******	WimpM.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	BootApps/BootBoot/BootRun
This file:	Wimp message code

History:
Date		Who	Change
----------------------------------------------------------------------------
10/06/1998	BJGA	Created
11/06/1998	BJGA	Implemented Message_PreQuit and
			Message_PlugInQuit(Abort) handlers
19/06/1998	BJGA	Implemented handlers for Message_DataLoad,
			Message_FilerSelection, Message_HelpRequest,
			Message_FontChanged, "Set" form of Message_PlugInQuit
			and Message_ChoicesChanged

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "window.h"
#include "gadgets.h"
/* ConfigureLib */
#include "message.h"
#include "misc.h"
#include "str.h"
/* Local headers */
#include "List.h"
#include "Main.h"
#include "ToolboxE.h"
#include "WimpM.h"

#ifndef Wimp_MFilerSelection
#define Wimp_MFilerSelection (0x407)
#endif

static int static_Quit (WimpMessage *message, void *handle);
static int static_DataLoad (WimpMessage *message, void *handle);
static int static_PreQuit (WimpMessage *message, void *handle);
static int static_FilerSelection (WimpMessage *message, void *handle);
static int static_HelpRequest (WimpMessage *message, void *handle);
static int static_FontChanged (WimpMessage *message, void *handle);
static int static_PlugInQuit (WimpMessage *message, void *handle);
static int static_PlugInQuitAbort (WimpMessage *message, void *handle);
static int static_OpenConfigWindow (WimpMessage *message, void *handle);
static int static_ChoicesChanged (WimpMessage *message, void *handle);

	int	WimpM_Sender;			/* used for restarting shutdowns */
	int	WimpM_SenderDescriptor;

int WimpM_Messages [10] =     { Wimp_MDataLoad,
				Wimp_MPreQuit,
				Wimp_MFilerSelection,
				Wimp_MHelpRequest,
				Wimp_MFontChanged,
    		       	      	Wimp_MPlugInQuit,
    		       	      	Wimp_MPlugInQuitAbort,
				Wimp_MOpenConfigWindow,
				Wimp_MChoicesChanged,
				0 };

void WimpM_Register (void)
{
  throw (event_register_message_handler (Wimp_MQuit, static_Quit, NULL));
  throw (event_register_message_handler (Wimp_MDataLoad, static_DataLoad, NULL));
  throw (event_register_message_handler (Wimp_MPreQuit, static_PreQuit, NULL));
  throw (event_register_message_handler (Wimp_MFilerSelection, static_FilerSelection, NULL));
  throw (event_register_message_handler (Wimp_MHelpRequest, static_HelpRequest, NULL));
  throw (event_register_message_handler (Wimp_MFontChanged, static_FontChanged, NULL));
  throw (event_register_message_handler (Wimp_MPlugInQuit, static_PlugInQuit, NULL));
  throw (event_register_message_handler (Wimp_MPlugInQuitAbort, static_PlugInQuitAbort, NULL));
  throw (event_register_message_handler (Wimp_MOpenConfigWindow, static_OpenConfigWindow, NULL));
  throw (event_register_message_handler (Wimp_MChoicesChanged, static_ChoicesChanged, NULL));
}

/******	static_Quit() *****************************************************\

Purpose:	Handles Message_Quit

\**************************************************************************/

static int static_Quit (WimpMessage *message, void *handle)
{
  Quit = TRUE;
  return 1;
}

/******	static_DataLoad() *************************************************\

Purpose:	Handles Message_DataLoad

\**************************************************************************/

static int static_DataLoad (WimpMessage *message, void *handle)
{
  #if APP != BOOTRUN
  if (message->data.data_load.file_type == 0x1000 || message->data.data_load.file_type == 0x2000)
  #endif
  {
    List_Load (message->data.data_load.leaf_name, (message->data.data_load.file_type == 0x1000));
  }
  return 1;
}

/******	static_PreQuit() **************************************************\

Purpose:	Handles Message_PreQuit

\**************************************************************************/

static int static_PreQuit (WimpMessage *message, void *handle)
{
  if (Modified)
  {
    /* Take note of message details */
    WimpM_Sender = message->hdr.sender;
    WimpM_SenderDescriptor = 0;
    
    /* Acknowledge the message */
    message->hdr.your_ref = message->hdr.my_ref;
    throw (wimp_send_message (Wimp_EUserMessageAcknowledge, message, WimpM_Sender, 0, NULL));
    
    if ((message->hdr.size > 20) && (message->data.words [0] & 1 != 0))
    {
      /* Single-task quit from Task Manager */
      
      /* ToolboxE_DCS_Action remains at 0 */
      
      /* Fake Select-Cancel */
      {
        ToolboxEvent ev;
        ev.hdr.size = 16;
        ev.hdr.event_code = ActionButton_Selected;
        ev.hdr.flags = ActionButton_Selected_Select;
        throw (toolbox_raise_toolbox_event (0, Window_Obj, Window_CANCEL, &ev));
      }
    }
    else
    {
      /* Desktop shutdown */
      
      /* Remember what to do after DCS is shown */
      ToolboxE_DCS_Action = 1;
      
      /* Fake Adjust-Cancel */
      {
        ToolboxEvent ev;
        ev.hdr.size = 16;
        ev.hdr.event_code = ActionButton_Selected;
        ev.hdr.flags = ActionButton_Selected_Adjust;
        throw (toolbox_raise_toolbox_event (0, Window_Obj, Window_CANCEL, &ev));
      }
    }
  }
  return 1;
}

/******	static_FilerSelection() *******************************************\

Purpose:	Handles Message_FilerSelection

\**************************************************************************/

static int static_FilerSelection (WimpMessage *message, void *handle)
{
  List_Load (NULL, FALSE);
  return 1;
}

/******	static_HelpRequest() **********************************************\

Purpose:	Handles Message_HelpRequest

\**************************************************************************/

static int static_HelpRequest (WimpMessage *message, void *handle)
{
  WimpGetWindowStateBlock block;
  throw (window_get_wimp_handle (0, Pane_Obj, &(block.window_handle)));
  throw (wimp_get_window_state (&block));
  if (message->data.help_request.window_handle == block.window_handle)
  {
    int x;
    int y;
    x = message->data.help_request.mouse_x - (block.visible_area.xmin - block.xscroll);
    y = message->data.help_request.mouse_y - (block.visible_area.ymax - block.yscroll);
    if (List_Examine (x, y) > 1)
    {
      message_lookup_buffer(message->data.help_reply.text, messages, "ItemHelp");
    }
    else
    {
      message_lookup_buffer(message->data.help_reply.text, messages, "PaneHelp");
    }
    str_cpy (message->data.help_reply.text, message->data.help_reply.text); /* null-terminate */
    message->hdr.size = sizeof (message->hdr) +  (~3 & (4 + str_len (message->data.help_reply.text)));
    message->hdr.your_ref = message->hdr.my_ref;
    message->hdr.action_code = Wimp_MHelpReply;
    throw (wimp_send_message (Wimp_EUserMessage, message, message->hdr.sender, 0, NULL));
  }
  return 1;
}

/******	static_FontChanged() **********************************************\

Purpose:	Handles Message_FontChanged

\**************************************************************************/

static int static_FontChanged (WimpMessage *message, void *handle)
{
  List_HandleFontChanged ();
  return 1;
}

/******	static_PlugInQuit() ***********************************************\

Purpose:	Handles Message_PlugInQuit (sent by Configure)

\**************************************************************************/

static int static_PlugInQuit (WimpMessage *message, void *handle)
{
  if ((message->data.words [0] == PlugInSystem_Configure)
      || (message->data.words [0] == PlugInSystem_Boot))
  {
    /* If "complain" and "modified" */
    if (Complain && Modified)
    {
      /* Take note of message details */
      WimpM_Sender = message->hdr.sender;
      WimpM_SenderDescriptor = message->data.words [0];
      
      if ((message->hdr.size > 24) && (message->data.words [1] & 1 != 0))
      {
        /* Fake Adjust-Set */
        _kernel_oserror *err = List_Write (ActionButton_Selected_Adjust);
        if (err)
        {
          /* Acknowledge the message */
          message->hdr.your_ref = message->hdr.my_ref;
          wimp_send_message (Wimp_EUserMessageAcknowledge, message, WimpM_Sender, 0, NULL);
          
          /* Broadcast Message_PlugInAbort */
          message->hdr.size = 24;
          message->hdr.your_ref = 0;
          message->hdr.action_code = Wimp_MPlugInQuitAbort;
          wimp_send_message (Wimp_EUserMessage, message, 0, 0, NULL);
          
          /* And report the error from List_Write() */
          throw (err);
        }
      }
      else
      {
        /* Acknowledge the message */
        message->hdr.your_ref = message->hdr.my_ref;
        throw (wimp_send_message (Wimp_EUserMessageAcknowledge, message, WimpM_Sender, 0, NULL));
        
        /* Remember what to do after DCS is shown */
        ToolboxE_DCS_Action = 2;
        
        /* Fake Adjust-Cancel */
        /* Strictly speaking, we should trap errors here, and broadcast Message_PlugInQuitAbort if one */
        /* occurs, but that's lots of hassle, is very unlikely, and would have non-fatal results anyway */
        {
          ToolboxEvent ev;
          ev.hdr.size = 16;
          ev.hdr.event_code = ActionButton_Selected;
          ev.hdr.flags = ActionButton_Selected_Adjust;
          throw (toolbox_raise_toolbox_event (0, Window_Obj, Window_CANCEL, &ev));
        }
      }
    }
  }
  return 1;
}

/******	static_PlugInQuitAbort() ******************************************\

Purpose:	Handles Message_PlugInQuitAbort (sent by another plug-in)

\**************************************************************************/

static int static_PlugInQuitAbort (WimpMessage *message, void *handle)
{
  if ((message->data.words [0] == PlugInSystem_Configure)
      || (message->data.words [0] == PlugInSystem_Boot))
  {
    /* The quit has been aborted - reset Complain flag */
    Complain = TRUE;
  }
  return 1;
}

/******	static_OpenConfigWindow() *****************************************\

Purpose:	Handles Message_OpenConfigWindow

\**************************************************************************/

static int static_OpenConfigWindow (WimpMessage *message, void *handle)
{
  misc_openwindow (Window_Obj, FALSE);
  return 1;
}

/******	static_ChoicesChanged() *******************************************\

Purpose:	Handles Message_ChoicesChanged

\**************************************************************************/

static int static_ChoicesChanged (WimpMessage *message, void *handle)
{
  /* Compare case-insensitively (just in case) */
  int diff = _swi (Territory_Collate, _INR(0,3)|_RETURN(0), -1, message->data.bytes,
      #if APP == BOOTAPPS
      "Boot.PreDesktop", 1);
      #else
      "Boot.Desktop", 1);
      #endif
  
  if (diff == 0 && message->hdr.sender != MyTaskHandle)
  {
    List_Read (TRUE);
  }
  return 1;
}
