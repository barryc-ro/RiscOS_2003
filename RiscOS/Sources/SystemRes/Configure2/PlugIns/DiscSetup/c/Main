/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Discs configuration plug-in
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
23/06/1998	BJGA	Created
24/06/1998	BJGA	Added static_initMemorySizeVariables
15/06/1998	BJGA	Now reads total RAM size using documented call.

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "toolbox.h"
/* Common */
#include "error.h"
#include "misc.h"
/* Local headers */
#include "Main.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#define	WimpVersion	((int) 310)

/* Global variables */

	BOOL		Quit = FALSE;
	ObjectId	Window_Obj;
	MessagesFD	messages;
	const char	*StatusFile = "<Choices$Write>.Boot.PreDesk.DiscSetup";
	int		RAMFS_Limit;
	int		ADFS_Default_Buffer;

/* Prototypes */

void static_InitMemorySizeVariables (void);


/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  WimpPollBlock poll_block;
  IdBlock id_block;
  
  error_initialise ();
  throw (toolbox_initialise (0, WimpVersion, WimpM_Messages, ToolboxE_Events,
    "<DiscSetup$Dir>", &messages, &id_block, NULL, NULL, NULL));
  misc_parsearguments (argc, argv);
  throw (event_initialise (&id_block));
  throw (event_set_mask (WimpE_Mask));
  
  WimpM_Register ();
  WimpE_Register ();
  ToolboxE_Register ();
  
  static_InitMemorySizeVariables ();
  
  error_recover_point();
  while (!Quit)
  {
    throw (event_poll (NULL, &poll_block, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	static_InitMemorySizeVariables() **********************************\

Purpose:	Initialises things related to total RAM size

\**************************************************************************/

void static_InitMemorySizeVariables (void)
{
  int PageSize;
  int RAM_Size;
  
  /* Get total RAM size (in bytes) */
  _swi (OS_ReadMemMapInfo, _OUTR(0,1), &PageSize, &RAM_Size);
  RAM_Size *= PageSize;
  
  /* This is the way ADFS does it, via an undocumented OS_SetEnv call:
  **
  ** RAM_Size = _swi (OS_SetEnv, _INR(0,7)|_RETURN(2), 0, 0, 0, 0, 0, 0, 0, 0);
  **
  */
  
  /* The default value for both ADFSBuffers and ADFSDirCache is 1/256th of */
  /* the total RAM, capped and collared by 255K and 4K */
  ADFS_Default_Buffer = RAM_Size >> 18;
  ADFS_Default_Buffer = min(255, ADFS_Default_Buffer);
  ADFS_Default_Buffer = max(4, ADFS_Default_Buffer);
  
  /* RAMFS is limited by available memory, or by 128MB, whichever is smaller */
  RAMFS_Limit = (RAM_Size >> 20) * 10;
  if (RAMFS_Limit >= 1280)
  {
    RAMFS_Limit = 1280;
  }
}
