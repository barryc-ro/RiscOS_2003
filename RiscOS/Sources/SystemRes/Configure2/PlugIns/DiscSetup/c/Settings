/******	Settings.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Discs configuration plug-in
This file:	GUI <-> settings routines

History:
Date		Who	Change
----------------------------------------------------------------------------
23/06/1998	BJGA	Created
24/06/1998	BJGA	Implemented most of Settings_Read, added static_UpdateCDFSDisplay
25/06/1998	BJGA	Now reads RAM disc size. Implemented most of Settings_Write; added
			static_ReadRAMFSSize, static_WriteRAMFSSize and static_WriteDiscs.
26/06/1998	BJGA	Completed Settings_Write, including warning box before buffer changes.
			Capped and collared RAM disc sizes when read in static_WriteRAMFSSize.
			Made sure ADFS only gets RMReInited once during a set operation.
29/07/1998	BJGA	Now copes if value returned for RAM disc size has overflowed.
28/08/1998	BJGA	Implemented autodetect time numberrange

\**************************************************************************/

/* CLib */
#include <string.h>
#include "swis.h"
/* Toolbox */
#include "wimplib.h"
#include "gadgets.h"
/* Common */
#include "message.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "Main.h"
#include "Settings.h"

/* Global variables */

const cmos CmosDetails [6] =  { { 0x87, 0, 3 },		/* ADFSFloppies */
				{ 0x89, 0, 8 },		/* ADFSBuffers */
				{ 0x8A, 5, 3 },		/* CDFSBuffers */
				{ 0xBD, 0, 6 },		/* autodetect time */
				{ 0xC7, 0, 8 },		/* ADFSDirCache */
				{ 0xD0, 0, 3 } };	/* SCSIDiscs */

/* Prototypes */

static int static_ReadRAMFSSize (void);
static void static_WriteRAMFSSize (void);
static void static_WriteDiscs (BOOL *ReInit_ADFS);


/******	Settings_Read() ***************************************************\

Purpose:	Reads current / default settings, reflect them in GUI
In:		Routine to determine settings (cmos_read or cmos_default)

\**************************************************************************/

void Settings_Read (int(*get)(cmos item, void *messages))
{
  int value;
  
  value = get (cmos_AUTODETECT_TIME, &messages);
  throw (numberrange_set_value (0, Window_Obj, Window_AUTODETECT_TIME, value));
  
  value = get (cmos_ADFS_FLOPPIES, &messages);
  throw (numberrange_set_value (0, Window_Obj, Window_FLOPPY_DISCS, value));
  
  value = get (cmos_SCSI_DISCS, &messages);
  throw (numberrange_set_value (0, Window_Obj, Window_SCSI_DISCS, value));
  
  value = get (cmos_ADFS_DIR_CACHE, &messages);
  if (value == 0) value = ADFS_Default_Buffer;
  throw (numberrange_set_value (0, Window_Obj, Window_ADFS_DIR_CACHE, value));
  
  value = get (cmos_ADFS_BUFFERS, &messages);
  if (value == 1) value = ADFS_Default_Buffer;
  throw (numberrange_set_value (0, Window_Obj, Window_ADFS_BUFFERS, value));
  
  value = get (cmos_CDFS_BUFFERS, &messages);
  throw (numberrange_set_value (0, Window_Obj, Window_CDFS_BUFFERS_ARROWS, value));
  Settings_UpdateCDFSDisplay ();
  
  /* Now read the configured RAMFS size */
  if (get == cmos_default)
  {
    value = 0;
  }
  else
  {
    value = static_ReadRAMFSSize ();
  }
  /* Set numberrange and optionbutton, and fade/unfade as necessary */
  if (value == 0)
  {
    throw (numberrange_set_value (0, Window_Obj, Window_RAMFS_SIZE, 5 /* reasonable default */));
    misc_shadecomponents (TRUE, Window_Obj, Window_RAMFS_SIZE, Window_RAMFS_SIZE_LABEL);
    throw (optionbutton_set_state (0, Window_Obj, Window_RAMFS_ENABLE, 0));
  }
  else
  {
    throw (numberrange_set_value (0, Window_Obj, Window_RAMFS_SIZE, value));
    misc_shadecomponents (FALSE, Window_Obj, Window_RAMFS_SIZE, Window_RAMFS_SIZE_LABEL);
    throw (optionbutton_set_state (0, Window_Obj, Window_RAMFS_ENABLE, 1));
  }
  
}

/******	Settings_Write() **************************************************\

Purpose:	Reads GUI, reflect in current and configured settings
Out:		TRUE => operation performed successfully

\**************************************************************************/

BOOL Settings_Write (void)
{
  BOOL success = TRUE;
  int old_floppies;
  int new_floppies;
  int old_scsi;
  int new_scsi;
  int old_adfsdir;
  int new_adfsdir;
  int old_adfsbuf;
  int new_adfsbuf;
  int old_cdfsbuf;
  int new_cdfsbuf;
  int time;
  
  /* Before we proceed, check if the user is aware of the consequences of RMReIniting modules... */
  
  old_floppies = cmos_read (cmos_ADFS_FLOPPIES, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_FLOPPY_DISCS, &new_floppies));
  
  old_scsi = cmos_read (cmos_SCSI_DISCS, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_SCSI_DISCS, &new_scsi));
  
  old_adfsdir = cmos_read (cmos_ADFS_DIR_CACHE, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_ADFS_DIR_CACHE, &new_adfsdir));
  if (new_adfsdir > 255) new_adfsdir = 255;
  if (new_adfsdir == 0) new_adfsdir = 1;
  if (new_adfsdir == ADFS_Default_Buffer) new_adfsdir = 0;
  
  old_adfsbuf = cmos_read (cmos_ADFS_BUFFERS, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_ADFS_BUFFERS, &new_adfsbuf));
  if (new_adfsbuf > 255) new_adfsbuf = 255;
  if (new_adfsbuf == 1) new_adfsbuf = 2;
  if (new_adfsbuf == ADFS_Default_Buffer) new_adfsbuf = 1;
  
  old_cdfsbuf = cmos_read (cmos_CDFS_BUFFERS, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_CDFS_BUFFERS_ARROWS, &new_cdfsbuf));
  
  if (old_floppies != new_floppies || old_scsi != new_scsi)
  {
    int button;
    _kernel_oserror err = { 0, "" };
    str_cpy (err.errmess, message_lookup_direct(messages,"Err_DiscChange"));
    button = wimp_report_error (&err, Wimp_ReportError_OK | Wimp_ReportError_Cancel | 1u << 8 | 4u << 9,
        message_lookup_direct(messages,"_TaskName"),
        message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, NULL);
    if (button == 2)
    {
      success = FALSE; /* Cancel clicked */
    }
  }
  
  if (success && (old_adfsdir != new_adfsdir || old_adfsbuf != new_adfsbuf || old_cdfsbuf != new_cdfsbuf))
  {
    int button;
    _kernel_oserror err = { 0, "" };
    str_cpy (err.errmess, message_lookup_direct(messages,"Err_BufChange"));
    button = wimp_report_error (&err, Wimp_ReportError_OK | Wimp_ReportError_Cancel | 1u << 8 | 4u << 9,
        message_lookup_direct(messages,"_TaskName"),
        message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, NULL);
    if (button == 2)
    {
      success = FALSE; /* Cancel clicked */
    }
  }
  
  /* Now we can set things... */
  
  if (success)
  {
    BOOL ReInit_ADFS = FALSE;
    
    _swix (Hourglass_On, 0);
    
    throw (numberrange_get_value (0, Window_Obj, Window_AUTODETECT_TIME, &time));
    cmos_write (cmos_AUTODETECT_TIME, time);
    
    if (old_adfsdir != new_adfsdir || old_adfsbuf != new_adfsbuf)
    {
      cmos_write (cmos_ADFS_DIR_CACHE, new_adfsdir);
      cmos_write (cmos_ADFS_BUFFERS, new_adfsbuf);
      ReInit_ADFS = TRUE;
    }
    
    if (old_cdfsbuf != new_cdfsbuf)
    {
      cmos_write (cmos_CDFS_BUFFERS, new_cdfsbuf);
      _swix (OS_CLI, _IN(0), "RMReInit CDFS");
    }
    
    static_WriteRAMFSSize ();
    
    static_WriteDiscs (&ReInit_ADFS);
    
    if (ReInit_ADFS)
    {
      _swix (OS_CLI, _IN(0), "RMReInit ADFS");
    }
    
    _swix (Hourglass_Off, 0);
  }
  
  return success;
}

/******	Settings_UpdateCDFSDisplay() **************************************\

Purpose:	Translates from internal CDFSBuffers number (0-7) to value
		(in K), and updates CDFSBuffers display field appropriately

\**************************************************************************/

void Settings_UpdateCDFSDisplay (void)
{
  int internal;
  char *external;
  
  throw (numberrange_get_value (0, Window_Obj, Window_CDFS_BUFFERS_ARROWS, &internal));
  
  switch (internal)
  {
    case 0:
      external = "0";
      break;
      
    case 1:
      external = "8";
      break;
      
    case 2:
      external = "16";
      break;
      
    case 3:
      external = "32";
      break;
      
    case 4:
      external = "64";
      break;
      
    case 5:
      external = "128";
      break;
      
    case 6:
      external = "256";
      break;
      
    case 7:
      external = "512";
      break;
      
    default:
      external = "Error";
      break;
  }
  
  throw (displayfield_set_value (0, Window_Obj, Window_CDFS_BUFFERS_DISPLAY, external));
}

/******	static_ReadRAMFSSize() ********************************************\

Purpose:	Returns currently configured RAM disc size
Out:		Size, in 1/10ths of a megabyte

\**************************************************************************/

static int static_ReadRAMFSSize (void)
{
  int value;
  if (misc_fileisunreadable ((char *) StatusFile))
  {
    value = 0;
  }
  else
  {
    FILE *handle = fopen (StatusFile, "r");
    if (handle == NULL)
    {
      value = 0;
    }
    else
    {
      char line [100];
      char *compare = "ChangeDynamicArea -RamFsSize ";
      BOOL success;
      success = misc_readline (line, sizeof (line), handle);
      if (success)
      {
        success = (0 == strncmp (line, compare, str_len (compare)));
      }
      if (success)
      {
        if (*(line + str_len (line) - 1) != 'K')
        {
          success = FALSE;
        }
        else
        {
          *(line + str_len (line) - 1) = '\0';
        }
      }
      if (success)
      {
        _kernel_oserror *e = _swix (OS_ReadUnsigned, _INR(0,1)|_OUT(2), 1u<<31, line + str_len (compare), &value);
        if (e != NULL)
        {
          success = FALSE;
        }
      }
      
      if (!success)
      {
        _kernel_oserror err;
        err.errnum = 0;
        str_cpy (err.errmess, message_lookup_direct(messages,"CantRead"));
        wimp_report_error (&err, Wimp_ReportError_OK | 1u << 8 | 2u << 9,
            message_lookup_direct(messages,"_TaskName"),
            message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, NULL);
        value = 0;
      }
      
      fclose (handle);
    }
  }
  
  /* Rescale value */
  value = (int) (value / 102.4);
  
  return value;
}

/******	static_WriteRAMFSSize() *******************************************\

Purpose:	Sets and configures RAMFS size from current GUI settings

\**************************************************************************/

static void static_WriteRAMFSSize (void)
{
  int oldval; /* measured in 1/10th MB */
  int newval;
  
  /* Work out number of kilobytes of RAM disc requested */
  int NewRAMFS_K;
  int PageSize = _swi (OS_ReadMemMapInfo, _RETURN(0)) >> 10; /* in K */
  int CurrentRAMFSSize = _swi (OS_ReadDynamicArea, _IN(0)|_RETURN(1), 5) >> 10; /* in K */
  
  throw (optionbutton_get_state (0, Window_Obj, Window_RAMFS_ENABLE, &oldval)); /* oldval used temporarily */
  throw (numberrange_get_value (0, Window_Obj, Window_RAMFS_SIZE, &newval));
  if (newval > RAMFS_Limit || /* overflowed? */ newval < 0) newval = RAMFS_Limit;
  if (newval == 0) newval = 1;
  if (oldval == 0) newval = 0;
  oldval = static_ReadRAMFSSize (); /* the currently *configured* value, not necessarily the current one! */
  
  NewRAMFS_K = newval * 1024; /* start off 10 times too large */
  NewRAMFS_K = (NewRAMFS_K + (10 * PageSize) - 1) / (10 * PageSize); /* now measured in multiples of page size */
  NewRAMFS_K *= PageSize; /* finally, in K  :-) */
  
  /* Set current RAM disc size - unless it's already that size */
  if (NewRAMFS_K != CurrentRAMFSSize)
  {
    int type;
    _kernel_oserror *e;
    e = _swix (OS_File, _INR(0,1)|_OUT(0), 23, "RAM:$.*", &type);
    if (e != NULL)
    {
      if (e->errnum != 0xF8 /* filing system or path not found */)
      {
        throw (e);
      }
    }
    if (e == NULL && type != 0)
    {
      /* Complain that RAMFS is in use */
      char buttons [40];
      _kernel_oserror err = { 0, "" };
      str_cpy (buttons, message_lookup_direct(messages,"ButtDefer"));
      str_cpy (err.errmess, message_lookup_direct(messages,"Err_RAMFSNotEmpty"));
      wimp_report_error (&err, 1u << 8 | 1u << 9,
          message_lookup_direct(messages,"_TaskName"),
          message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, buttons);
    }
    else
    {
      /* Give it a go */
      char command [100];
      sprintf (command, "ChangeDynamicArea -RamFsSize %dK", NewRAMFS_K);
      e = _swix (OS_CLI, _IN(0), command);
      if (e != NULL)
      {
        /* Complain about lack of memory */
        char buttons [40];
        _kernel_oserror err = { 0, "" };
        str_cpy (buttons, message_lookup_direct(messages,"ButtDefer"));
        str_cpy (err.errmess, message_lookup_direct(messages,"Err_RAMFSTooBig"));
        wimp_report_error (&err, 1u << 8 | 1u << 9,
            message_lookup_direct(messages,"_TaskName"),
            message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, buttons);
      }
    }
  }
  
  /* Write settings file - unless the configured value isn't changing */
  if (newval != oldval)
  {
    char command [100];
    if (newval == 0)
    {
      /* Simply remove the status file - it's not needed */
      sprintf (command, "Remove %s", StatusFile);
      _swix (OS_CLI, _IN(0), command);
    }
    else
    {
      sprintf (command, "ChangeDynamicArea -RamFsSize %dK", NewRAMFS_K);
      if (!misc_fileislocked ((char *) StatusFile))
      {
        if (!_swix (OS_FSControl, _INR(0,3), 26, "<DiscSetup$Dir>.Blank", StatusFile, 2))
        {
          FILE *handle;
          if (NULL != (handle = fopen (StatusFile, "a")))
          {
            fprintf (handle, "%s\n", command);
            fclose (handle);
          }
        }
      }
    }
  }
}

/******	static_WriteDiscs() ***********************************************\

Purpose:	Sets and configures floppy and SCSI hard discs from GUI settings
In:		Reference to BOOL to clear if we've already RMReInited ADFS

\**************************************************************************/

static void static_WriteDiscs (BOOL *ReInit_ADFS)
{
  int oldval_adfs; /* floppies */
  int newval_adfs;
  int oldval_scsi; /* SCSI hard discs */
  int newval_scsi;
  
  oldval_adfs = cmos_read (cmos_ADFS_FLOPPIES, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_FLOPPY_DISCS, &newval_adfs));
  
  oldval_scsi = cmos_read (cmos_SCSI_DISCS, &messages);
  throw (numberrange_get_value (0, Window_Obj, Window_SCSI_DISCS, &newval_scsi));
  
  if (oldval_adfs != newval_adfs || oldval_scsi != newval_scsi)
  {
    int FilerWorkspace;
    int FilerHandle;
    _kernel_oserror *e;
    
    /* ADFS */
    if (oldval_adfs != newval_adfs)
    {
      cmos_write (cmos_ADFS_FLOPPIES, newval_adfs);
      _swix (OS_CLI, _IN(0), "RMReInit ADFS");
      _swix (OS_CLI, _IN(0), "RMReInit ADFSFiler");
      *ReInit_ADFS = FALSE;
    }
    
    /* SCSI */
    if (oldval_scsi != newval_scsi)
    {
      cmos_write (cmos_SCSI_DISCS, newval_scsi);
      _swix (OS_CLI, _IN(0), "RMReInit SCSIFS");
      _swix (OS_CLI, _IN(0), "RMReInit SCSIFiler");
    }
    
    /* Look up Filer's workspace */
    e = _swix (OS_Module, _INR(0,1)|_OUT(4), 18, "Filer", &FilerWorkspace);
    if (e == NULL && FilerWorkspace > NULL)
    {
      /* Get Filer's task handle from its workspace, and check it has initialised! */
      FilerHandle = * (int *) FilerWorkspace;
      if (FilerHandle > 0)
      {
        int claimed;
        char *command;
        /* Broadcast Service_StartFiler until nobody claims it */
        do
        {
          _swi (OS_ServiceCall, _INR(0,1)|_OUTR(0,1), FilerHandle, 0x4B, &command, &claimed);
          if (claimed == 0)
          {
            _swix (Wimp_StartTask, _IN(0), command);
          }
        }
        while (claimed == 0);
        /* Broadcast Service_StartedFiler to clear up after any non-initialised filers */
        _swi (OS_ServiceCall, _IN(1), 0x4C);
      }
    }
  }
}
