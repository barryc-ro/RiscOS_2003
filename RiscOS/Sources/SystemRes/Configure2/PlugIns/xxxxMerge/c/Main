/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Boot/Font/SysMerge
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
29/05/1998	BJGA	Created
01/06/1998	BJGA	Added Main_ChangeState, fixed window offset bug
02/06/1998	BJGA	Added static_ReadVariables
04/06/1998	BJGA	Deleted icons now undrawn correctly.
			Agenda list freed when pane removed.
05/06/1998	BJGA	Added code to create DCS object

\**************************************************************************/

/* CLib */
#include <stdlib.h>
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
#include "dcs.h"
#include "window.h"
#include "gadgets.h"
/* ConfigureLib */
#include "error.h"
#include "message.h"
#include "misc.h"
#include "str.h"
/* Local headers */
#include "Main.h"
#include "Merge.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#define WimpVersion	((int) 380)

/* Global variables */

	state		State = state_clean;
	BOOL		Quit = FALSE;
	BOOL		Complain = TRUE;
	MessagesFD	messages;
	ObjectId	Window_Obj;
	ObjectId	Pane_Obj;
	ObjectId	DCS_Obj;
	char		*BootDir;
	char		*SystemDir;
	char		*Source = NULL;
	char		*Destination;

/* Static global variables */

static	WimpPollBlock	PollBlock;
static	IdBlock		IDBlock;
static	int		PaneXOffset;
static	int		PaneYOffset;

/* Prototypes */

static void static_CreateWindows (void);
static void static_ReadVariables (void);


/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  error_initialise ();
  throw (toolbox_initialise (0, WimpVersion, WimpM_Messages, ToolboxE_Events,
  #if   APP == BOOTMERGE
    "<BootMerge$Dir>",
  #elif APP == FONTMERGE
    "<FontMerge$Dir>",
  #elif APP == SYSMERGE
    "<SysMerge$Dir>",
  #endif
    &messages, &IDBlock, NULL, NULL, NULL));
  misc_parsearguments (argc, argv);
  throw (event_initialise (&IDBlock));
  throw (event_set_mask (WimpE_Mask));
  
  WimpM_Register ();
  WimpE_Register ();
  ToolboxE_Register ();
  
  static_CreateWindows ();
  static_ReadVariables ();
  
  error_recover_point();
  while (!Quit)
  {
    throw (event_poll (NULL, &PollBlock, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	Main_ChangeState() ************************************************\

Purpose:	Changes the display state of the window
In:		New state

\**************************************************************************/

void Main_ChangeState (state NewState)
{
  WimpSetIconStateBlock block;
  block.clear_word = WimpIcon_Deleted;
  throw (window_get_wimp_handle (0, Window_Obj, &(block.window_handle)));
  
  if (State == state_agenda)
  {
    /* Delete "All" and "None", undelete "Agenda" */
    block.EOR_word = WimpIcon_Deleted;
    throw (gadget_get_icon_list (0, Window_Obj, Window_ALL, &(block.icon_handle), 4, NULL));
    throw (wimp_set_icon_state (&block));
    throw (gadget_get_icon_list (0, Window_Obj, Window_NONE, &(block.icon_handle), 4, NULL));
    throw (wimp_set_icon_state (&block));
    block.EOR_word = 0;
    throw (gadget_get_icon_list (0, Window_Obj, Window_AGENDA, &(block.icon_handle), 4, NULL));
    throw (wimp_set_icon_state (&block));
    /* Force window redraw (otherwise deleted icons remain!) */
    throw (wimp_force_redraw (block.window_handle, -0xFFFFFF, -0xFFFFFF, 0xFFFFFF, 0xFFFFFF));
    /* Close pane */
    throw (toolbox_hide_object (0, Pane_Obj));
    /* Free agenda list */
    Merge_FreeAgenda ();
  }
  
  switch (NewState)
  {
    case state_clean:
      if (State != state_clean)
      {
        /* Fade "Agenda" and "Merge" */
        misc_shadecomponents (TRUE, Window_Obj, Window_AGENDA, Window_AGENDA);
        misc_shadecomponents (TRUE, Window_Obj, Window_MERGE, Window_MERGE);
      }
      break;
      
    case state_primed:
      if (State == state_clean)
      {
        /* Unfade "Agenda" and "Merge" */
        misc_shadecomponents (FALSE, Window_Obj, Window_AGENDA, Window_AGENDA);
        misc_shadecomponents (FALSE, Window_Obj, Window_MERGE, Window_MERGE);
      }
      break;
      
    case state_agenda:
      /* Delete "Agenda", undelete "All" and "None", open pane */
      block.EOR_word = WimpIcon_Deleted;
      throw (gadget_get_icon_list (0, Window_Obj, Window_AGENDA, &(block.icon_handle), 4, NULL));
      throw (wimp_set_icon_state (&block));
      block.EOR_word = 0;
      throw (gadget_get_icon_list (0, Window_Obj, Window_ALL, &(block.icon_handle), 4, NULL));
      throw (wimp_set_icon_state (&block));
      throw (gadget_get_icon_list (0, Window_Obj, Window_NONE, &(block.icon_handle), 4, NULL));
      throw (wimp_set_icon_state (&block));
      /* Force window redraw (otherwise deleted icons remain!) */
      throw (wimp_force_redraw (block.window_handle, -0xFFFFFF, -0xFFFFFF, 0xFFFFFF, 0xFFFFFF));
      {
        WindowShowObjectBlock show;
        WimpGetWindowStateBlock window_state;
        WimpGetWindowStateBlock pane_state;
        throw (window_get_wimp_handle (0, Window_Obj, &(window_state.window_handle)));
        throw (wimp_get_window_state (&window_state));
        throw (window_get_wimp_handle (0, Pane_Obj, &(pane_state.window_handle)));
        throw (wimp_get_window_state (&pane_state));
        show.visible_area.xmin = window_state.visible_area.xmin + PaneXOffset;
        show.visible_area.ymax = window_state.visible_area.ymax + PaneYOffset;
        show.visible_area.xmax = show.visible_area.xmin +
            pane_state.visible_area.xmax - pane_state.visible_area.xmin;
        show.visible_area.ymin = show.visible_area.ymax +
            pane_state.visible_area.ymin - pane_state.visible_area.ymax;
        show.xscroll = show.yscroll = 0;
        show.behind = -1;
        show.parent_window_handle = block.window_handle; /* == Window_Obj handle */
        show.alignment_flags = 0; /* flags not specified, link to work area */
        throw (toolbox_show_object (Toolbox_ShowObject_AsSubWindow,
            Pane_Obj, Toolbox_ShowObject_FullSpec, &show, Window_Obj, NULL_ComponentId));
      }
      break;
  }
  State = NewState;
}

/******	static_CreateWindows() ********************************************\

Purpose:	Creates and opens window and pane

\**************************************************************************/

static void static_CreateWindows (void)
{
  WimpSetIconStateBlock block;
  WimpGetWindowStateBlock window_state;
  WimpGetWindowStateBlock pane_state;
  
  /* Create window objects */
  throw (toolbox_create_object (0, "Merge", &Window_Obj));
  throw (toolbox_create_object (0, "Pane", &Pane_Obj));
  throw (toolbox_create_object (0, "DCS", &DCS_Obj));
  
  /* Remember window/pane relative position, because pane won't be opened for a while */
  throw (window_get_wimp_handle (0, Window_Obj, &(window_state.window_handle)));
  throw (wimp_get_window_state (&window_state));
  throw (window_get_wimp_handle (0, Pane_Obj, &(pane_state.window_handle)));
  throw (wimp_get_window_state (&pane_state));
  PaneXOffset = pane_state.visible_area.xmin - window_state.visible_area.xmin;
  PaneYOffset = pane_state.visible_area.ymax - window_state.visible_area.ymax;
  
  /* Delete "All" and "None" action buttons */
  block.clear_word = WimpIcon_Deleted;
  block.EOR_word = WimpIcon_Deleted;
  throw (window_get_wimp_handle (0, Window_Obj, &(block.window_handle)));
  throw (gadget_get_icon_list (0, Window_Obj, Window_ALL, &(block.icon_handle), 4, NULL));
  throw (wimp_set_icon_state (&block));
  throw (gadget_get_icon_list (0, Window_Obj, Window_NONE, &(block.icon_handle), 4, NULL));
  throw (wimp_set_icon_state (&block));
  
  /* Open main window */
  misc_openwindow (Window_Obj, TRUE);
}

/******	static_ReadVariables() ********************************************\

Purpose:	Reads system variables, initialises Destination

\**************************************************************************/

static void static_ReadVariables (void)
{
  const char *var;
  const char *ptr0 = NULL;
  const char *ptr1 = NULL;
  _kernel_oserror e = { 0, "Err_Alloc" };
  
  var = getenv ("Boot$Dir");
  BootDir = malloc (str_len (var) + 1);
  if (!BootDir) message_error(messages,e);
  str_cpy (BootDir, var);
  var = getenv ("System$Dir");
  SystemDir = malloc (str_len (var) + 1);
  if (!SystemDir) message_error(messages,e);
  str_cpy (SystemDir, var);
  
  #if   APP == BOOTMERGE
  Destination = BootDir;
  ptr0 = ptr0; /* satisfy compiler */
  ptr1 = ptr1;
  
  #elif APP == SYSMERGE
  Destination = SystemDir;
  ptr0 = ptr0; /* satisfy compiler */
  ptr1 = ptr1;
  
  #elif APP == FONTMERGE
  var = getenv ("Font$Path");
  ptr1 = var + str_len (var);
  while (ptr1 > var && *(ptr1 - 1) != ',') ptr1--;
  /* ptr1 now points at last element of path (ResourceFS) */
  ptr1--;
  while (ptr1 > var && *(ptr1 - 1) != ',') ptr1--;
  /* ptr1 now points at penultimate element of path (Font$Prefix) */
  ptr0 = ptr1 - 1;
  while (ptr0 > var && *(ptr0 - 1) != ',') ptr0--;
  /* ptr0 now points at the element we want to merge into */
  if (ptr1 - ptr0 <= 2)
  {
    /* Invalid or no directory */
    _kernel_oserror e = { 0, "Err_NoFonts" };
    message_error(messages,e);
  }
  else
  {
    Destination = malloc (ptr1 - ptr0 - 1);
    if (!Destination) message_error(messages,e);
    str_ncpy (Destination, ptr0, ptr1 - ptr0 - 1); /* also remove trailing "." */
  }
  
  #endif
}
