/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Main WIMP shell for Filer configuration                          */
/* Author:  Richard Leggett                                                  */
/* History: 06-Nov-97: RML: Begun.                                           */
/*          20-Mar-98: RML: Minor modifications.                             */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "common.h"
#include "window.h"
#include "wimplib.h"
#include "defines.h"
#include "filer.h"

#define CMOSFileSwitchOptions  28
#define CMOSInteractiveCopyBit 1<<2

static IdBlock    idb;
static MessagesFD messages_desc;
static char       messages_string[255];
static int        main_window;
static int        fullinfo_truncation = 4096;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

static void program_exit(void)
{
    exit(0);
}


/*---------------------------------------------------------------------------*
 * save_choices                                                              *
 *                                                                           *
 * Read the choices from the window and output a command file.               *
 *---------------------------------------------------------------------------*/

static void save_choices(void)
{
    char options_command[256] = "Filer_Options";
    char truncation_command[256] = "Filer_Truncation";
    char layout_command[256] = "Filer_Layout";
    int  selected;
    int  largeicon_truncation;
    int  smallicon_truncation;
    
    /* Add icon size switch to Filer_Layout command */
    error_trap(radiobutton_get_state(0, main_window, LargeIconRadio, 0, &selected), 0);
    switch(selected)
    {
        case LargeIconRadio: strcat(layout_command, " -LargeIcons"); break;
        case SmallIconRadio: strcat(layout_command, " -SmallIcons"); break;
        case FullInfoRadio:  strcat(layout_command, " -FullInfo");   break;
    }                                                                
    
    /* Add sort type switch to Filer_Layout command */
    error_trap(radiobutton_get_state(0, main_window, SortByNameRadio, 0, &selected), 0);
    switch (selected)
    {
        case SortByNameRadio: strcat(layout_command, " -SortByName"); break;
        case SortByTypeRadio: strcat(layout_command, " -SortByType"); break;
        case SortBySizeRadio: strcat(layout_command, " -SortBySize"); break;
        case SortByDateRadio: strcat(layout_command, " -SortByDate"); break;
    }
    
    /* Make up Filer_Options command */
    error_trap(optionbutton_get_state(0, main_window, ConfirmOption, &selected), 0);
    if (selected)
    {
        error_trap(radiobutton_get_state(0, main_window, ConfirmAllRadio, 0, &selected), 0);
        switch(selected)
        {
            case ConfirmAllRadio:     strcat(options_command, " -ConfirmAll");     break;
            case ConfirmDeletesRadio: strcat(options_command, " -ConfirmDeletes"); break;
        }
    }

    error_trap(optionbutton_get_state(0, main_window, VerboseOption, &selected), 0);
    if (selected) strcat(options_command, " -Verbose");

    error_trap(optionbutton_get_state(0, main_window, NewerOption, &selected), 0);
    if (selected) strcat(options_command, " -Newer");

    error_trap(optionbutton_get_state(0, main_window, ForceOption, &selected), 0);
    if (selected) strcat(options_command, " -Force");

    error_trap(optionbutton_get_state(0, main_window, FasterOption, &selected), 0);
    if (selected) strcat(options_command, " -Faster");
    
    /* Make up a Filer_Truncation command */
    error_trap(numberrange_get_value(0, main_window, LargeIconRange, &largeicon_truncation), 0);
    error_trap(numberrange_get_value(0, main_window, SmallIconRange, &smallicon_truncation), 0);
    sprintf(truncation_command, "Filer_Truncation -LargeIconDisplay %d -SmallIconDisplay %d -FullInfoDisplay %d",
            largeicon_truncation, smallicon_truncation, fullinfo_truncation);
 
    /* Now write the choices file */
    error_trap(write_filer_choices(options_command, truncation_command, layout_command), 0);
}


/*---------------------------------------------------------------------------*
 * update_icon_widths                                                        *
 *                                                                           *
 * Update the 'at least...' boxes.                                           *
 *---------------------------------------------------------------------------*/

static void update_icon_widths(void)
{
    char string[256];
    int  value;
    
    error_trap(numberrange_get_value(0, main_window, LargeIconRange, &value), 0);
    sprintf(string, "%d", how_many_characters(value));
    error_trap(displayfield_set_value(0, main_window, LargeNotLessThan, string), 0);    
    error_trap(numberrange_get_value(0, main_window, SmallIconRange, &value), 0);
    sprintf(string, "%d", how_many_characters(value));
    error_trap(displayfield_set_value(0, main_window, SmallNotLessThan, string), 0);
}


/*---------------------------------------------------------------------------*
 * set_default_choices                                                       *
 *                                                                           *
 * Fill in the default choices in the dialogue box.                          *
 *---------------------------------------------------------------------------*/

static void set_default_choices(void)
{
    error_trap(radiobutton_set_state(0, main_window, LargeIconRadio, 1), 0);
    error_trap(radiobutton_set_state(0, main_window, SortByNameRadio, 1), 0);
    error_trap(optionbutton_set_state(0, main_window, ActiveCopyOption, 1), 0);
    error_trap(optionbutton_set_state(0, main_window, ConfirmOption, 0), 0);
    grey_gadget(main_window, ConfirmAllRadio);
    grey_gadget(main_window, ConfirmDeletesRadio);
    error_trap(optionbutton_set_state(0, main_window, VerboseOption, 1), 0);
    error_trap(optionbutton_set_state(0, main_window, NewerOption, 1), 0);
    error_trap(optionbutton_set_state(0, main_window, ForceOption, 0), 0);
    error_trap(optionbutton_set_state(0, main_window, FasterOption, 0), 0);
    error_trap(numberrange_set_value(0, main_window, LargeIconRange, 256), 0);
    error_trap(numberrange_set_value(0, main_window, SmallIconRange, 256), 0);
    update_icon_widths();
}


/*---------------------------------------------------------------------------*
 * parse_options_command                                                     *
 *                                                                           *
 * Parse a *Filer_Options command and set options in configure window as     *
 * appropriate.                                                              *
 *                                                                           *
 * In: string -> Parameters from *Filer_Options                              *
 *---------------------------------------------------------------------------*/

static void parse_options_command(char *string)
{
    char options_args[] = "ConfirmAll/S,ConfirmDeletes/S,Verbose/S,Force/S,Newer/S,Faster/S";
    int  buffer[32];

    error_trap(_swix(OS_ReadArgs, _INR(0,3), options_args, string, buffer, 32*sizeof(int)), 0);
    
    if ((buffer[0]) || (buffer[1]))
    {
        error_trap(optionbutton_set_state(0, main_window, ConfirmOption, 1), 0);
        ungrey_gadget(main_window, ConfirmAllRadio);
        ungrey_gadget(main_window, ConfirmDeletesRadio);
    }
    else
    {
        error_trap(optionbutton_set_state(0, main_window, ConfirmOption, 0), 0);
        grey_gadget(main_window, ConfirmAllRadio);
        grey_gadget(main_window, ConfirmDeletesRadio);
    }
     
    if (buffer[0]) error_trap(radiobutton_set_state(0, main_window, ConfirmAllRadio, 1), 0);
    if (buffer[1]) error_trap(radiobutton_set_state(0, main_window, ConfirmDeletesRadio, 1), 0);

    error_trap(optionbutton_set_state(0, main_window, VerboseOption, buffer[2]>0 ? 1:0), 0);
    error_trap(optionbutton_set_state(0, main_window, ForceOption,   buffer[3]>0 ? 1:0), 0);
    error_trap(optionbutton_set_state(0, main_window, NewerOption,   buffer[4]>0 ? 1:0), 0);
    error_trap(optionbutton_set_state(0, main_window, FasterOption,  buffer[5]>0 ? 1:0), 0);
}


/*---------------------------------------------------------------------------*
 * parse_truncation_command                                                  *
 *                                                                           *
 * Parse a *Filer_Truncation command and set options in configure window as  *
 * appropriate.                                                              *
 *                                                                           *
 * In: string -> Parameters from *Filer_Truncation                           *
 *---------------------------------------------------------------------------*/


static void parse_truncation_command(char *string)
{
    char  truncation_args[] = "LargeIconDisplay=LID/E,SmallIconDisplay=SID/E,FullInfoDisplay=FID/E";
    char *byte;
    int   buffer[64];
    int   value;

    _swi(OS_ReadArgs, _INR(0,3), truncation_args, string, (char*)buffer, 256);

    /* LargeIconDisplay */
    if (buffer[0])
    {
        byte = (char*)(buffer[0]);
        value = byte[1] + (byte[2]<<8) + (byte[3]<<16) + (byte[4]<<24);
        error_trap(numberrange_set_value(0, main_window, LargeIconRange, value), 0);
    }

    /* SmallIconDisplay */
    if (buffer[1])
    {
        byte = (char*)(buffer[1]);
        value = byte[1] + (byte[2]<<8) + (byte[3]<<16) + (byte[4]<<24);
        error_trap(numberrange_set_value(0, main_window, SmallIconRange, value), 0);
    }

    /* FullInfoDisplay */
    if (buffer[2])
    {
        byte = (char*)(buffer[2]);
        fullinfo_truncation = byte[1] + (byte[2]<<8) + (byte[3]<<16) + (byte[4]<<24);
    }

}


/*---------------------------------------------------------------------------*
 * parse_layout_command                                                      *
 *                                                                           *
 * Parse a *Filer_Layout command and set options in configure window as      *
 * appropriate.                                                              *
 *                                                                           *
 * In: string -> Parameters from *Filer_Layout                               *
 *---------------------------------------------------------------------------*/

static void parse_layout_command(char *string)
{
    char layout_args[256];
    int  buffer[32];
    
    strcpy(layout_args,"LargeIcons=LI/S,SmallIcons=SI/S,FullInfo=FI/S,");
    strcat(layout_args,"SortByName=SBN/S,SortByType=SBT/S,SortBySize=SBS/S,SortByDate=SBD/S");

    error_trap(_swix(OS_ReadArgs, _INR(0,3), layout_args, string, buffer, 32*sizeof(int)), 0);

    /* Large, Small or Full Info */
    if (buffer[0]) error_trap(radiobutton_set_state(0, main_window, LargeIconRadio, 1), 0);
    if (buffer[1]) error_trap(radiobutton_set_state(0, main_window, SmallIconRadio, 1), 0);
    if (buffer[2]) error_trap(radiobutton_set_state(0, main_window, FullInfoRadio, 1), 0);
    
    /* Sort type */
    if (buffer[3]) error_trap(radiobutton_set_state(0, main_window, SortByNameRadio, 1), 0);
    if (buffer[4]) error_trap(radiobutton_set_state(0, main_window, SortByTypeRadio, 1), 0);
    if (buffer[5]) error_trap(radiobutton_set_state(0, main_window, SortBySizeRadio, 1), 0);
    if (buffer[6]) error_trap(radiobutton_set_state(0, main_window, SortByDateRadio, 1), 0);
}


/*---------------------------------------------------------------------------*
 * read_cmos                                                                 *
 *                                                                           *
 * Read the options store in CMOS                                            *
 *---------------------------------------------------------------------------*/

static void read_cmos(void)
{
    int interactive;
 
    /* Interactive file copying */
    interactive = (read_cmos_value(CMOSFileSwitchOptions) && CMOSInteractiveCopyBit) ? 1:0;
    error_trap(optionbutton_set_state(0, main_window, ActiveCopyOption, interactive), 0);
}    


/*---------------------------------------------------------------------------*
 * read_choices                                                              *
 *                                                                           *
 * Read the *Filer_Options command from the choices file.                    *
 *---------------------------------------------------------------------------*/

static void read_choices(void)
{
    FILE *fp;
    char  string[256];
    int   more = 1;

    /* Read current setup */
    fp = fopen(ChoicesFile, "r");
    if (fp)
    {
        while (more)
        {
            more = (int)fgets(string, 256, fp);
            if (more)
            {
                if (strncmpa(string, "Filer_Options", 13)==0) parse_options_command(string+14);
                if (strncmpa(string, "Filer_Truncation", 16)==0) parse_truncation_command(string+17);
                if (strncmpa(string, "Filer_Layout", 12)==0) parse_layout_command(string+13);
            }
        }
        fclose(fp);
    }
    
    read_cmos();    
}


/*-----------------------------------------------------------------------------------------------*/
/*                                          Event handlers                                       */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

static int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
    _kernel_oserror    err;

    strcpy(err.errmess, error_event->errmess);
    err.errnum = error_event->errnum;
    wimp_report_error(&err, 0, "Configure", 0, 0, 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * default_key_handler                                                       *
 *                                                                           *
 * Handler for key presses.                                                  *
 *---------------------------------------------------------------------------*/

static int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   int key_code = event->key_pressed.key_code;

   wimp_process_key(key_code);

   return 1;
}


/*---------------------------------------------------------------------------*
 * action_selected                                                           *
 *                                                                           *
 * Handler for when action buttons are clicked on.                           *
 *---------------------------------------------------------------------------*/

static int action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent*) event_block;
    int                        icon = id_block->self_component;

    switch (icon)
    {
        case SetButton:
            save_choices();
            if ((block->hdr.flags & 7)==0) program_exit(); /* Return pressed */
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;

        case CancelButton:
            if ((block->hdr.flags & 7)==0) program_exit(); /* Escape pressed */
            if (block->hdr.flags & 1)                      /* Right button */
            {
                 read_choices();      
                 update_icon_widths();
            }
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;
            
        case DefaultButton:
            set_default_choices();
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * option_changed                                                            *
 *                                                                           *
 * Handler for option button changed events.                                 *
 *---------------------------------------------------------------------------*/

static int option_changed(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    OptionButtonStateChangedEvent *event = (OptionButtonStateChangedEvent*) event_block;    
    int                            icon = id_block->self_component;
    int                            state = event->new_state;

    switch(icon)
    {
        case ConfirmOption:
            if (state==1)
            {
                ungrey_gadget(main_window, ConfirmAllRadio);
                ungrey_gadget(main_window, ConfirmDeletesRadio);
            }
            else
            {
                grey_gadget(main_window, ConfirmAllRadio);
                grey_gadget(main_window, ConfirmDeletesRadio);
            }
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * numrange_changed                                                          *
 *---------------------------------------------------------------------------*/

static int numrange_changed(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    NumberRangeValueChangedEvent *event = (NumberRangeValueChangedEvent*)event_block;
    int                           icon = id_block->self_component;
    char                          string[16];

    switch(icon)
    {
        case LargeIconRange:
            sprintf(string, "%d", how_many_characters(event->new_value));
            error_trap(displayfield_set_value(0, main_window, LargeNotLessThan, string), 0);
            break;
            
        case SmallIconRange:
            sprintf(string, "%d", how_many_characters(event->new_value));
            error_trap(displayfield_set_value(0, main_window, SmallNotLessThan, string), 0);
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
static int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_reopen                                                            *
 *                                                                           *
 * Called when we receive a message from Configure telling us to reopen our  *
 * window.                                                                   *
 *---------------------------------------------------------------------------*/

static int message_reopen(WimpMessage *event, void *handler)
{
    error_trap(toolbox_show_object(0, main_window, 0, 0, 0, 0), 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * close_window                                                              *
 *                                                                           *
 * Called when user has clicked on close icon of window.                     *
 *---------------------------------------------------------------------------*/

static int close_window(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*-----------------------------------------------------------------------------------------------*/
/*                               Program startup & polling loop                                  */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * open_configure_window                                                     *
 *                                                                           *
 * Called to open the configure window on screen and register handlers.      *
 *---------------------------------------------------------------------------*/

static void open_configure_window(int at_x, int at_y)
{
    BBox bbox;
    int  screenx;
    int  screeny;
    int  buffer[2];

    /* Create window */
    error_trap(toolbox_create_object(0, "Filer", &main_window), 1);

    set_default_choices();
    read_choices();
    update_icon_widths();

    /* Register handlers for the configure window */
    error_trap(event_register_toolbox_handler(-1,Toolbox_Error,toolbox_error,NULL) ,0);
    error_trap(event_register_wimp_handler(main_window, Wimp_ECloseWindow, close_window, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window, ActionButton_Selected, action_selected, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window, OptionButton_StateChanged, option_changed, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window, NumberRange_ValueChanged, numrange_changed, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL), 0);

    /* Work out positioning (unless it was supplied in the command line) */
    if ((at_x==-1) && (at_y==-1))
    {
        error_trap(common_read_screensize(&screenx, &screeny), 0);
        error_trap(window_get_extent(0, main_window, &bbox), 0);
        at_y = screeny - ((screeny+bbox.ymin)/2);
        at_x = (screenx - bbox.xmax)/2;
    }

    /* Show the window */
    buffer[0] = at_x;
    buffer[1] = at_y;
    error_trap(toolbox_show_object(0, main_window, 2, buffer, 0, 0), 0);
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    static int mess_wanted[] = {Wimp_MQuit,
                                Wimp_MOpenConfigWindow,
                                0};
    static int tbox_wanted[] = {Toolbox_Error,
        	                ActionButton_Selected,
                                OptionButton_StateChanged,
                                NumberRange_ValueChanged,
                                0};
    int        task_handle;
                                
    error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                  "<FilerConfig$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0) ,1);


    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_NullMask), 0);    
    messages_register(&messages_desc, messages_string);

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_message_handler(Wimp_MOpenConfigWindow, message_reopen, NULL), 0);

    return 1;
}
                                  

/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
    WimpPollBlock wpb;
    int           event_code;
    int           openat_x = -1;
    int           openat_y = -1;

    /* Have we been passed any co-ordinates to open at? */
    if (strcmp(argv[1], "-openat")==0)
    {
        openat_x = atoi(argv[2]);
        openat_y = atoi(argv[3]);
    }

    /* Do main initialisation */
    if (!main_initialise()) return 0;
    
    /* Open configure window */
    open_configure_window(openat_x, openat_y);

    /* Poll loop */
    while (TRUE)
    {
        error_trap(event_poll(&event_code, &wpb, NULL), 0);
    }
    
    return 0;
}         
