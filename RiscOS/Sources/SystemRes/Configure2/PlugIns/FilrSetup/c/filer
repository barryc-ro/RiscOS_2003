/*---------------------------------------------------------------------------*/
/* File:    c.filer                                                          */
/* Purpose: Non WIMP, but Filer specific code                                */
/* Author:  Richard Leggett                                                  */
/* History: 12-Nov-97: RML: Begun.                                           */
/*                                                                           */
/* Copyright © 1997 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "common.h"
#include "defines.h"

#define MaxTermination 72000*10
#define ReadFontHandle 8


/*---------------------------------------------------------------------------*
 * how_many_characters                                                       *
 *                                                                           *
 * Given a length of OS Units, decide how many characters in the current     *
 * desktop font will fit in the length.                                      *
 *                                                                           *
 * In: os_units = length.                                                    *
 *                                                                           *
 * Returns: Approximate number of characters which will fit in length.       *
 *---------------------------------------------------------------------------*/

int how_many_characters(int os_units)
{
    _kernel_oserror *e=NULL;
    int m_width, i_width, av_width, system_font_handle;
    
    if (os_units>10000) os_units=10000;
    
    _swi(Wimp_ReadSysInfo, _IN(0)|_OUT(0), ReadFontHandle, &system_font_handle);
    if (e) return 0;
    if (system_font_handle==0) return os_units/16;

    _swi(Font_CharBBox, _INR(0,2)|_OUT(3), system_font_handle, 'M', 1<<4, &m_width);
    if (e) return 0;
    _swi(Font_CharBBox, _INR(0,2)|_OUT(3), system_font_handle, 'I', 1<<4, &i_width);
    if (e) return 0;

    av_width = (m_width + i_width) / 2;
    
    return 1+(os_units/av_width);
}


/*---------------------------------------------------------------------------*
 * ignore_string                                                             *
 *                                                                           *
 * Decide if a string in the choices file should be ignored (because we're   *
 * going to output an updated version)                                       *
 *                                                                           *
 * In: string -> the string                                                  *
 *                                                                           *
 * Returns: 1 if ignore, 0 not to ignore                                     *
 *---------------------------------------------------------------------------*/

static int ignore_string(char *string)
{
    if (strncmpa(string, "Filer_Options", 13)==0) return 1;
    if (strncmpa(string, "Filer_Truncation", 16)==0) return 1;
    if (strncmpa(string, "Filer_Layout", 12)==0) return 1;
    
    return 0;
}


/*---------------------------------------------------------------------------*
 * write_filer_choices                                                       *
 *                                                                           *
 * Given a *Filer_Options, *Filer_Truncation and *Filer_Layout command,      *
 * ammend the choices file to have these commands.                           *
 *                                                                           *
 * In: options_command -> *Filer_Options string                              *
 *     truncation_command -> *Filer_Truncation string                        *
 *     layout_command -> *Filer_Layout string                                *
 *---------------------------------------------------------------------------*/

_kernel_oserror* write_filer_choices(char* options_command, char* truncation_command, char* layout_command)
{
    FILE *source_fp;
    FILE *dest_fp;
    char  string[256];
    int   more=1;
    
    source_fp=fopen(ChoicesFile, "r");
    dest_fp=fopen(ScrapFile, "w");
    if (!dest_fp) return common_error(messages_lookup("ChoicesFileNotOpen"));
        
    /* Write the commands into the choices file */
    fputs(options_command, dest_fp); fputc(NewLine, dest_fp);
    fputs(truncation_command, dest_fp); fputc(NewLine, dest_fp);
    fputs(layout_command, dest_fp); fputc(NewLine, dest_fp);

    if (source_fp)
    {
        /* Write out any other commands that were in the file */
        while(more)
        {
            more=(int)fgets(string, 256, source_fp);
            if (more)
            {
                if (!ignore_string(string)) fputs(string, dest_fp);
            }
        }

        fclose(source_fp);
    }

    fclose(dest_fp);
    
    /* Set filetype of the new file */
    error_trap(_swix(OS_File, _INR(0, 2), 18, ScrapFile, 0xFEB), 0);

    sprintf(string,"Copy %s %s A~CDF~L~N~P~Q~R~S~T~V", ScrapFile, ChoicesFile);
    error_trap(_swix(OS_CLI, _IN(0), string), 0);
    _swix(OS_File, _INR(0,1), 6, ScrapFile);
    //sprintf(string, "Filer_Run %s", ChoicesFile);
    //error_trap(_swix(OS_CLI, _IN(0), string), 0);

    error_trap(_swix(OS_CLI, _IN(0), options_command), 0);
    error_trap(_swix(OS_CLI, _IN(0), truncation_command), 0);
    error_trap(_swix(OS_CLI, _IN(0), layout_command), 0);

    return NULL;
}
