/******	WimpE.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	!Boot configuration plug-in
This file:	Wimp event code

History:
Date		Who	Change
----------------------------------------------------------------------------
22/06/1998	BJGA	Created

\**************************************************************************/

/* CLib */
#include "swis.h"
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "window.h"
/* Common */
#include "misc.h"
/* local headers */
#include "Main.h"
#include "WimpE.h"

static int static_MouseClick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_KeyPressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_UserMessageAcknowledge (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);

int WimpE_Mask =	Wimp_Poll_NullMask +
			Wimp_Poll_PointerLeavingWindowMask +
			Wimp_Poll_PointerEnteringWindowMask +
			Wimp_Poll_LoseCaretMask +
			Wimp_Poll_GainCaretMask +
			Wimp_Poll_PollWordNonZeroMask ;

void WimpE_Register (void)
{
  throw (event_register_wimp_handler (-1, Wimp_EMouseClick, static_MouseClick, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EKeyPressed, static_KeyPressed, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EUserMessageAcknowledge, static_UserMessageAcknowledge, NULL));
}

/******	static_MouseClick() ***********************************************\

Purpose:	Handles Key_Pressed event

\**************************************************************************/

static int static_MouseClick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  BOOL button_gadget = TRUE;
  BOOL *alive = NULL;
  int *task_handle = NULL;
  char *app = NULL;
  
  /* Get the appropriate flag/handle/application */
  switch (id_block->self_component)
  {
    case Window_ADDAPPS:
      alive = &(BootApps.alive);
      task_handle = &(BootApps.task_handle);
      app = "/<BootSetup$Dir>.!BootApps.!Run";
      break;
      
    case Window_LOOKAT:
      alive = &(BootBoot.alive);
      task_handle = &(BootBoot.task_handle);
      app = "/<BootSetup$Dir>.!BootBoot.!Run";
      break;
      
    case Window_RUN:
      alive = &(BootRun.alive);
      task_handle = &(BootRun.task_handle);
      app = "/<BootSetup$Dir>.!BootRun.!Run";
      break;
      
    case Window_INSTALL:
      alive = &(BootMerge.alive);
      task_handle = &(BootMerge.task_handle);
      app = "/<BootSetup$Dir>.!BootMerge.!Run";
      break;
      
    default:
      button_gadget = FALSE; /* not a click on a button gadget - do nothing */
  }
  
  if (button_gadget)
  {
    if (*alive)
    {
      /* Re-open window */
      WimpMessage message;
      
      message.hdr.size = 20;
      message.hdr.your_ref = 0;
      message.hdr.action_code = Wimp_MOpenConfigWindow;
      throw (wimp_send_message (17, &message, *task_handle, 0, NULL));
    }
    else
    {
      /* Start plug-in task */
      WimpGetWindowStateBlock state;
      BBox gadget;
      int x0, y1;
      char command [256];
      
      throw (window_get_wimp_handle (0, id_block->self_id, &(state.window_handle)));
      throw (wimp_get_window_state (&state));
      throw (gadget_get_bbox (0, id_block->self_id, id_block->self_component, &gadget));
      x0 = gadget.xmin + state.visible_area.xmin - state.xscroll;
      y1 = gadget.ymax + state.visible_area.ymax - state.yscroll;
      y1 = min(y1, state.visible_area.ymax - 28); /* Looks neat against main !Configure window */
      sprintf (command, "%s -openat %i %i", app, x0, y1);
      *task_handle = _swi (Wimp_StartTask, _IN(0)|_RETURN(0), command);
      *alive = (*task_handle != 0) ? TRUE : FALSE;
    }
  }
  
  return 1;
}

/******	static_KeyPressed() ***********************************************\

Purpose:	Handles Key_Pressed event

\**************************************************************************/

static int static_KeyPressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  throw (wimp_process_key (event->key_pressed.key_code));
  return 1;
}

/******	static_UserMessageAcknowledge() ***********************************\

Purpose:	Handles User_Message_Acknoledge

\**************************************************************************/

static int static_UserMessageAcknowledge (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  switch (((WimpUserMessageAcknowledgeEvent *) event) -> hdr.action_code)
  {
    case Wimp_MDataOpen:
      /* This is only generated after we tried to open <Choices$Write>.Boot.Tasks.!Boot */
      /* No task responded, so run the file directly */
      _swi (Wimp_StartTask, _IN(0), "@RunType_FFF <Choices$Write>.Boot.Tasks.!Boot");
      break;
      
    case Wimp_MPlugInQuit:
      {
        WimpMessage buffer;
        plugin *list [4] = { &BootApps, &BootBoot, &BootRun, &BootMerge };
        int p;
        
        /* Quit everything unconditionally */
        buffer.hdr.size = 20;
        buffer.hdr.your_ref = 0;
        buffer.hdr.action_code = Wimp_MQuit;
        
        for (p = 0; p < 4; p++)
        {
          if (list[p]->alive)
          {
            throw (wimp_send_message (17, &buffer, list[p]->task_handle, 0, NULL));
          }
        }
        
        if (QuitMeToo)
        {
          Quit = TRUE;
        }
      }
      break;
  }
  return 1;
}
