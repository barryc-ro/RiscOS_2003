/******	ToolboxE.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Keyboard configuration plug-in
This file:	Toolbox event code

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers
10/12/1997	BJGA	Made handler routines static

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "toolbox.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Keyboards.h"
#include "Settings.h"
#include "ToolboxE.h"  /* includes prototypes for this file */

static int toolboxe_actionbuttonselected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_optionbuttonstatechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_stringsetabouttobeshown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

int toolboxe_events [5] =     { ActionButton_Selected,
				Toolbox_ObjectAutoCreated,
				OptionButton_StateChanged,
				StringSet_AboutToBeShown,
				0 };

void toolboxe_register (void)
{
  throw (event_register_toolbox_handler (-1, ActionButton_Selected, toolboxe_actionbuttonselected, NULL));
  throw (event_register_toolbox_handler (-1, Toolbox_ObjectAutoCreated, toolboxe_objectautocreated, NULL));
  throw (event_register_toolbox_handler (-1, OptionButton_StateChanged, toolboxe_optionbuttonstatechanged, NULL));
  throw (event_register_toolbox_handler (-1, StringSet_AboutToBeShown, toolboxe_stringsetabouttobeshown, NULL));
}

/******	toolboxe_actionbuttonselected() ***********************************\

Purpose:	Handles ActionButton_Selected event

\**************************************************************************/

static int toolboxe_actionbuttonselected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  switch (id_block->self_component) {
    case mainwindow_default:
      settings_read (cmos_default);
      break;
    case mainwindow_cancel:
      if (!(event->hdr.flags & 1)) quit = TRUE;
      else settings_read (cmos_read);
      break;
    case mainwindow_set:
      if (settings_write ()) if (!(event->hdr.flags & 1)) quit = TRUE;
      break;
  }
  return 1;
}

/******	toolboxe_objectautocreated() **************************************\

Purpose:	Handles Toolbox_ObjectAutoCreated event

\**************************************************************************/

static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  mainwindow_id = id_block->self_id;
  misc_openwindow (mainwindow_id, TRUE);
  settings_read (cmos_read);
  return 1;
}

/******	toolboxe_optionbuttonstatechanged() *******************************\

Purpose:	Handles OptionButton_StateChanged event

\**************************************************************************/

static int toolboxe_optionbuttonstatechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  misc_shadecomponents (!((OptionButtonStateChangedEvent *) event)->new_state, mainwindow_id, mainwindow_repeat_shademin, mainwindow_repeat_shademax);
  return 1;
}

/******	toolboxe_stringsetabouttobeshown() ********************************\

Purpose:	Handles StringSet_AboutToBeShown event

\**************************************************************************/

static int toolboxe_stringsetabouttobeshown (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  static int crc = 0;  /* crc stuff is to alleviate a memory leak in the toolbox when new available list is set */
  int newcrc;
  char buffer [400] = "";
  if ((newcrc = keyboards_getavailable (buffer, sizeof(buffer))) != crc) {
    crc = newcrc;
    throw (stringset_set_available (0, mainwindow_id, mainwindow_keyboardhandler, buffer));
  }
  return 1;
}
