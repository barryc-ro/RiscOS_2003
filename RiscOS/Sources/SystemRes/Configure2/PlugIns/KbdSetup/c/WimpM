/******	WimpM.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Keyboard configuration plug-in
This file:	Wimp message code

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers
10/12/1997	BJGA	Made handler routines static
28/08/1998	BJGA	Added Message_DataLoad handler

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "toolbox.h"
#include "window.h"
#include "wimplib.h"
/* Common */
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Settings.h"
#include "WimpM.h"  /* includes prototypes for this file */

static int wimpm_quit (WimpMessage *message, void *handle);
static int wimpm_dataload (WimpMessage *message, void *handle);
static int wimpm_openconfigwindow (WimpMessage *message, void *handle);

int wimpm_messages [3] =      { Wimp_MDataLoad,
				Wimp_MOpenConfigWindow,
				0 };

void wimpm_register (void)
{
  throw (event_register_message_handler (Wimp_MQuit, wimpm_quit, NULL));
  throw (event_register_message_handler (Wimp_MDataLoad, wimpm_dataload, NULL));
  throw (event_register_message_handler (Wimp_MOpenConfigWindow, wimpm_openconfigwindow, NULL));
}

/******	wimpm_quit() ******************************************************\

Purpose:	Handles Message_Quit

\**************************************************************************/

static int wimpm_quit (WimpMessage *message, void *handle)
{
  quit = TRUE;
  return 1;
}

/******	wimpm_dataload() **************************************************\

Purpose:	Handles Message_DataLoad

\**************************************************************************/

static int wimpm_dataload (WimpMessage *message, void *handle)
{
  ObjectId    drop_window;
  ComponentId drop_gadget;
  throw (window_wimp_to_toolbox (0, message->data.data_load.destination_window,
      message->data.data_load.destination_icon, &drop_window, &drop_gadget));
  if (drop_window == mainwindow_id)
  {
    switch (drop_gadget)
    {
      case mainwindow_keyalone:
      case mainwindow_shiftkey:
      case mainwindow_ctrlkey:
      case mainwindow_ctrlshiftkey:
        if (message->data.data_load.file_type == 0x1000)
        {
          char new_string [1000];
          /* Directories need Filer_OpenDir preprending */
          sprintf (new_string, "Filer_OpenDir %s", message->data.data_load.leaf_name);
          throw (writablefield_set_value (0, drop_window, drop_gadget, new_string));
        }
        else
        {
          throw (writablefield_set_value (0, drop_window, drop_gadget, message->data.data_load.leaf_name));
        }
        /* Reply with Message_DataLoadAck */
        message->hdr.your_ref = message->hdr.my_ref;
        message->hdr.action_code = Wimp_MDataLoadAck;
        throw (wimp_send_message (Wimp_EUserMessage, message, message->hdr.sender, 0, NULL));
    }
  }
  return 1;
}

/******	wimpm_openconfigwindow() ******************************************\

Purpose:	Handles Message_OpenConfigWindow

\**************************************************************************/

static int wimpm_openconfigwindow (WimpMessage *message, void *handle)
{
  misc_openwindow (mainwindow_id, FALSE);
  return 1;
}
