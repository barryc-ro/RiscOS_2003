/******	Settings.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Keyboard configuration plug-in
This file:	GUI <-> settings routines

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers

\**************************************************************************/

/* CLib */
#include "swis.h"
/* Toolbox */
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "Main.h"
#include "Keyboards.h"
#include "Settings.h"  /* includes prototypes for this file */

const cmos cmos_details [3] = { { 0x0C, 0, 8 },		/* AutoRepeatDelay (if 0 then inactive) */
				{ 0x0D, 0, 8 },		/* AutoRepeatRate */
				{ 0x0B, 3, 3 } };	/* CapsMode */


/******	settings_read() ***************************************************\

Purpose:	Reads current / default settings, reflect them in GUI
In:		Routine to determine settings (cmos_read or cmos_default)

\**************************************************************************/

void settings_read (int(*get)(cmos item, void *messages))
{
  int	value;
  char	buffer [100];
//
  if (misc_fileislocked (status_file)) misc_shadecomponents (1, mainwindow_id, mainwindow_handler_shademin, mainwindow_handler_shademax);
  throw (stringset_set_selected (0, mainwindow_id, mainwindow_keyboardhandler, keyboards_get (buffer, sizeof(buffer), get)));
//
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_repeat, (value = get (AutoRepeatDelay, &messages)) != 0));
  misc_shadecomponents (!value, mainwindow_id, mainwindow_repeat_shademin, mainwindow_repeat_shademax);
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_startdelay, value ? get (AutoRepeatDelay, &messages) : cmos_default (AutoRepeatDelay, &messages)));
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_repeatdelay, value ? get (AutoRepeatRate, &messages) : cmos_default (AutoRepeatRate, &messages)));
//
  switch (value = get (CapsMode, &messages)) {
    case 4: throw (radiobutton_set_state (0, mainwindow_id, mainwindow_caps_on, 1)); break;
    case 2: throw (radiobutton_set_state (0, mainwindow_id, mainwindow_caps_off, 1)); break;
    case 1: throw (radiobutton_set_state (0, mainwindow_id, mainwindow_caps_shift, 1)); break;
  }
}

/******	settings_write() **************************************************\

Purpose:	Reads GUI, reflect in current and configured settings
Out:		TRUE => operation performed successfully

\**************************************************************************/

BOOL settings_write (void)
{
  int value;
  char string [256];
//
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_keyboardhandler, (unsigned int *) &value));
  if (!(value & Gadget_Faded)) {
    throw (stringset_get_selected (0, mainwindow_id, mainwindow_keyboardhandler, string, sizeof (string), NULL));
    str_cpy (string, string);
    keyboards_set (string);
  }
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_repeat, &value));
  if (value) {
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_startdelay, &value));
    cmos_write (AutoRepeatDelay, value);
    _swi (OS_Byte, _INR(0,1), 11, value);
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_repeatdelay, &value));
    cmos_write (AutoRepeatRate, value);
    _swi (OS_Byte, _INR(0,1), 12, value);
  }
  else
  {
    cmos_write (AutoRepeatDelay, 0);
    _swi (OS_Byte, _INR(0,1), 11, 0);
  }
//
  throw (radiobutton_get_state (0, mainwindow_id, mainwindow_caps_off, NULL, &value));
  switch (value) {
    case mainwindow_caps_on:
      cmos_write (CapsMode, 4);
      _swi (OS_Byte, _INR(0,2), 202, 0, 0x6F);
      break;
    case mainwindow_caps_off:
      cmos_write (CapsMode, 2);
      _swi (OS_Byte, _INR(0,2), 202, 1<<4, 0x6F);
      break;
    case mainwindow_caps_shift:
      cmos_write (CapsMode, 1);
      _swi (OS_Byte, _INR(0,2), 202, 1<<7, 0x6F);
      break;
  }
  _swi (OS_Byte, _IN(0), 118);
  return TRUE;
}


