/******	Settings.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Keyboard configuration plug-in
This file:	GUI <-> settings routines

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers
30/06/1998	BJGA	Added support for delete-type option button
02/07/1998	BJGA	Delete-type CMOS bit now as allocated
11/08/1998	BJGA	Now refreshes the screen if setting the keyboard
			caused the current alphabet to be changed
17/08/1998	BJGA	Uses Message_FontChanged to redraw screen, so the
			Wimp recaches the desktop font at the same time
27/08/1998	BJGA	Added support for Win95 key settings, including
			  settings_UpdateXFromY() functions
			PC-delete option now applied even if choices file is locked

\**************************************************************************/

/* CLib */
#include "swis.h"
/* Toolbox */
#include "wimplib.h"
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "Main.h"
#include "Keyboards.h"
#include "Settings.h"  /* includes prototypes for this file */

const cmos cmos_details [4] = { { 0x0C, 0, 8 },		/* AutoRepeatDelay (if 0 then inactive) */
				{ 0x0D, 0, 8 },		/* AutoRepeatRate */
				{ 0x0B, 3, 3 },		/* CapsMode */
				{ 0xC3, 1, 1 } };	/* DeleteType */


/******	settings_read() ***************************************************\

Purpose:	Reads current / default settings, reflect them in GUI
In:		Routine to determine settings (cmos_read or cmos_default)

\**************************************************************************/

void settings_read (int(*get)(cmos item, void *messages))
{
  int	value;
  char	buffer [100];
//
  if (misc_fileislocked (status_file))
  {
    misc_shadecomponents (1, mainwindow_id, mainwindow_handler_shademin, mainwindow_handler_shademax);
    misc_shadecomponents (1, mainwindow_id, mainwindow_acorn_shademin, mainwindow_acorn_shademax);
  }
  throw (stringset_set_selected (0, mainwindow_id, mainwindow_keyboardhandler, keyboards_get (buffer, sizeof(buffer), get)));
//
  Win95State = 0; /* always reset to displaying Acorn key functionality after read */
  throw (radiobutton_set_state (0, mainwindow_id, mainwindow_acornkey, 1));
  settings_UpdateWritablesFromArray ();
//
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_repeat, (value = get (AutoRepeatDelay, &messages)) != 0));
  misc_shadecomponents (!value, mainwindow_id, mainwindow_repeat_shademin, mainwindow_repeat_shademax);
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_startdelay, value ? get (AutoRepeatDelay, &messages) : cmos_default (AutoRepeatDelay, &messages)));
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_repeatdelay, value ? get (AutoRepeatRate, &messages) : cmos_default (AutoRepeatRate, &messages)));
//
  switch (value = get (CapsMode, &messages)) {
    case 4: throw (radiobutton_set_state (0, mainwindow_id, mainwindow_caps_on, 1)); break;
    case 2: throw (radiobutton_set_state (0, mainwindow_id, mainwindow_caps_off, 1)); break;
    case 1: throw (radiobutton_set_state (0, mainwindow_id, mainwindow_caps_shift, 1)); break;
  }
//
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_pc_delete, get (DeleteType, &messages)));
}

/******	settings_write() **************************************************\

Purpose:	Reads GUI, reflect in current and configured settings
Out:		TRUE => operation performed successfully

\**************************************************************************/

BOOL settings_write (void)
{
  int value;
  char string [256];
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_pc_delete, &value));
  cmos_write (DeleteType, value); /* must happen before *Keyboard gets issued in keyboards_set() */
//
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_keyboardhandler, (unsigned int *) &value));
  if (!(value & Gadget_Faded)) {
    int pre_alphabet = _swi (OS_Byte, _INR(0,1)|_RETURN(1), 71, 127); /* read current alphabet */
    int post_alphabet;
    throw (stringset_get_selected (0, mainwindow_id, mainwindow_keyboardhandler, string, sizeof (string), NULL));
    str_cpy (string, string);
    keyboards_set (string);
    post_alphabet = _swi (OS_Byte, _INR(0,1)|_RETURN(1), 71, 127); /* read current alphabet */
    if (post_alphabet != pre_alphabet)
    {
      /* Keyboard change caused alphabet change */
      /* so prod Wimp to recache desktop font and redraw screen */
      WimpMessage buffer;
      buffer.hdr.size = 20;
      buffer.hdr.your_ref = 0;
      buffer.hdr.action_code = Wimp_MFontChanged;
      throw (wimp_send_message (17, &buffer, 0, 0, NULL));
    }
  }
  else
  {
    /* Reaffirm the current keyboard, so the PC-delete option takes effect */
    int handler = _swi (OS_Byte, _INR(0,1)|_RETURN(1), 71, 255);
    _swi (OS_Byte, _INR(0,1), 71, handler + 128);
  }
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_repeat, &value));
  if (value) {
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_startdelay, &value));
    cmos_write (AutoRepeatDelay, value);
    _swi (OS_Byte, _INR(0,1), 11, value);
    throw (numberrange_get_value (0, mainwindow_id, mainwindow_repeatdelay, &value));
    cmos_write (AutoRepeatRate, value);
    _swi (OS_Byte, _INR(0,1), 12, value);
  }
  else
  {
    cmos_write (AutoRepeatDelay, 0);
    _swi (OS_Byte, _INR(0,1), 11, 0);
  }
//
  throw (radiobutton_get_state (0, mainwindow_id, mainwindow_caps_off, NULL, &value));
  switch (value) {
    case mainwindow_caps_on:
      cmos_write (CapsMode, 4);
      _swi (OS_Byte, _INR(0,2), 202, 0, 0x6F);
      break;
    case mainwindow_caps_off:
      cmos_write (CapsMode, 2);
      _swi (OS_Byte, _INR(0,2), 202, 1<<4, 0x6F);
      break;
    case mainwindow_caps_shift:
      cmos_write (CapsMode, 1);
      _swi (OS_Byte, _INR(0,2), 202, 1<<7, 0x6F);
      break;
  }
  _swi (OS_Byte, _IN(0), 118);
  return TRUE;
}

/******	settings_UpdateWritablesFromArray() *******************************\

Purpose:	Changes text in key-task writables to show meaning of
		key-task array indicated by Win95State

\**************************************************************************/

void settings_UpdateWritablesFromArray (void)
{
  WimpGetCaretPositionBlock caret;
  ObjectId    focus_window;
  ComponentId focus_gadget;
  if (Win95State == 0)
  {
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_keyalone,     Tasks_Acorn [0]));
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_shiftkey,     Tasks_Acorn [1]));
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_ctrlkey,      Tasks_Acorn [2]));
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_ctrlshiftkey, Tasks_Acorn [3]));
  }
  else
  {
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_keyalone,     Tasks_Menu [0]));
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_shiftkey,     Tasks_Menu [1]));
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_ctrlkey,      Tasks_Menu [2]));
    throw (writablefield_set_value (0, mainwindow_id, mainwindow_ctrlshiftkey, Tasks_Menu [3]));
  }
  throw (wimp_get_caret_position (&caret));
  throw (window_wimp_to_toolbox (0, caret.window_handle, caret.icon_handle, &focus_window, &focus_gadget));
  if (focus_window == mainwindow_id)
  {
    switch (focus_gadget)
    {
      case mainwindow_keyalone:
      case mainwindow_shiftkey:
      case mainwindow_ctrlkey:
      case mainwindow_ctrlshiftkey:
        /* Reposition caret at and of icon */
        throw (wimp_set_caret_position (caret.window_handle, caret.icon_handle, 0, 0, -1, 0x100000));
    }
  }
}

/******	settings_UpdateArrayFromWritables() *******************************\

Purpose:	Reads text from key-task writables and assigns to key-task
		array indicated by Win95State

\**************************************************************************/

void settings_UpdateArrayFromWritables (void)
{
  if (Win95State == 0)
  {
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_keyalone,     Tasks_Acorn [0], sizeof (Tasks_Acorn [0]), NULL));
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_shiftkey,     Tasks_Acorn [1], sizeof (Tasks_Acorn [1]), NULL));
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_ctrlkey,      Tasks_Acorn [2], sizeof (Tasks_Acorn [2]), NULL));
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_ctrlshiftkey, Tasks_Acorn [3], sizeof (Tasks_Acorn [3]), NULL));
  }
  else
  {
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_keyalone,     Tasks_Menu [0], sizeof (Tasks_Menu [0]), NULL));
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_shiftkey,     Tasks_Menu [1], sizeof (Tasks_Menu [1]), NULL));
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_ctrlkey,      Tasks_Menu [2], sizeof (Tasks_Menu [2]), NULL));
    throw (writablefield_get_value (0, mainwindow_id, mainwindow_ctrlshiftkey, Tasks_Menu [3], sizeof (Tasks_Menu [3]), NULL));
  }
}
