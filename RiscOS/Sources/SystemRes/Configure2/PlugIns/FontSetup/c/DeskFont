/******	DeskFont.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Fonts configuration plug-in
This file:	Desktop font handling

History:
Date		Who	Change
----------------------------------------------------------------------------
21/05/1998	BJGA	Created
28/05/1998	BJGA	Implemented DeskFont_Set

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <string.h>
/* Toolbox */
#include "wimplib.h"
#include "fontmenu.h"
#include "gadgets.h"
/* ConfigLib */
#include "message.h"
#include "misc.h"
#include "str.h"
/* Local headers */
#include "DeskFont.h"  /* includes prototypes for this file */
#include "Main.h"
#include "Settings.h"

/* Static global variables */

static int maxfont = 1;
static char *romfonttable [16] = { "", "SystemFont", "", "",
                                   "", "", "", "",
                                   "", "", "", "",
                                   "", "", "", "" };

/* Static prototypes */

static char *static_DecodeFontName (const char *full_id);
static char *static_DecodeFontID (const char *full_id);

/* "Static" typedefs */

typedef struct
{
  unsigned int load_addr;
  unsigned int exec_addr;
  unsigned int length;
  unsigned int attr;
  unsigned int object_type;
  unsigned int file_type;
  char         name[256];
} osgbpb_file;


/******	DeskFont_BuildRomFontTable() **************************************\

Purpose:	Builds lookup table of WimpFont number -> simple font ID
In:		Directory within which to scan for fonts,
		subdirectory of that directory (or NULL for top-level call)
Notes:		Recursive

\**************************************************************************/

void DeskFont_BuildRomFontTable (const char *dir, const char *subdir)
{
  /* Bail out if we've assigned names to every available font number */
  if (maxfont < 15)
  {
    /* Check directory exists (only important for top level) */
    if (subdir || (2 & _swi (OS_File, _INR(0,1)|_RETURN(0), 17, dir)))
    {
      _kernel_oserror err_alloc = { 0, "Err_Alloc" };
      int offset = 0;
      int nread = -1;
      char *thisdir;
      char *tempname;
      osgbpb_file gbpb_buf;
      
      /* Build the name of this directory from dir and subdir */
      thisdir = malloc (str_len (dir) + 1 + str_len (subdir) + 1);
      if (!thisdir) message_error(messages,err_alloc);
      sprintf (thisdir, "%s%s%s", dir, subdir ? "." : "", subdir ? subdir : "");
      
      /* Does this directory contain a font? */
      tempname = malloc (str_len (thisdir) + 1 + 10 + 1);
      if (!tempname) message_error(messages,err_alloc);
      sprintf (tempname, "%s.IntMetric*", thisdir);
      if (1 & _swi (OS_File, _INR(0,1)|_RETURN(0), 17, tempname))
      {
        /* We've found a font! */
        maxfont++;
        romfonttable [maxfont] = malloc (str_len (subdir) + 1);
        if (!romfonttable [maxfont]) message_error(messages,err_alloc);
        str_cpy (romfonttable [maxfont], subdir);
      }
      free (tempname);
      
      /* Scan for subdirectories */
      do
      {
        _swi (OS_GBPB, _INR(0,6)|_OUTR(3,4), 12,
            thisdir,
            &gbpb_buf,
            1,
            offset,
            sizeof (gbpb_buf),
            "*",
            &nread,
            &offset);
        if (nread && gbpb_buf.object_type & 2)
        {
          /* Found a subdirectory */
          tempname = malloc (str_len (subdir) + 1 + str_len (gbpb_buf.name) + 1);
          if (!tempname) message_error(messages,err_alloc);
          sprintf (tempname, "%s%s%s", subdir ? subdir : "", subdir ? "." : "", gbpb_buf.name);
          DeskFont_BuildRomFontTable (dir, tempname); /* recurse */
          free (tempname);
        }
      }
      while (offset != -1);
      
      free (thisdir);
    }
  }
}

/******	DeskFont_GetByNumber() ********************************************\

Purpose:	Updates desktop font GUI to reflect a *Configure WimpFont number
In:		Font number

\**************************************************************************/

void DeskFont_GetByNumber (int fontindex)
{
  if ('\0' == *(romfonttable [fontindex]))
  {
    throw (fontmenu_set_font (0, fontmenu_id, "SystemFont"));
  }
  else
  {
    throw (fontmenu_set_font (0, fontmenu_id, romfonttable [fontindex]));
  }
  DeskFont_ReflectFontNameInDisplayField ();
}

/******	DeskFont_GetByName() **********************************************\

Purpose:	Updates desktop font GUI to reflect the contents of the choices file
In:		Font number

\**************************************************************************/

void DeskFont_GetByName (const char *file)
{
  if (misc_fileisunreadable ((char *) file))
  {
    throw (fontmenu_set_font (0, fontmenu_id, "SystemFont"));
  }
  else
  {
    FILE *handle = fopen (file, "r");
    if (NULL == handle)
    {
      throw (fontmenu_set_font (0, fontmenu_id, "SystemFont"));
    }
    else
    {
      char line [100];
      BOOL success;
      success = misc_readline (line, sizeof(line), handle);
      if (!success || str_len (line) <= 14)
      {
        _kernel_oserror err;
        err.errnum = 0;
        str_cpy (err.errmess, message_lookup_direct(messages,"CantRead"));
        wimp_report_error (&err, Wimp_ReportError_OK | 1u << 8 | 2u << 9,
            message_lookup_direct(messages,"_TaskName"),
            message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, NULL);
        throw (fontmenu_set_font (0, fontmenu_id, "SystemFont"));
      }
      else
      {
        throw (fontmenu_set_font (0, fontmenu_id, line + 14));
      }
      fclose (handle);
    }
  }
  DeskFont_ReflectFontNameInDisplayField ();
}

/******	DeskFont_Set() ****************************************************\

Purpose:	Sets WimpFont CMOS from fontmenu (if possible), otherwise
		writes option to status file
In:		Status file name

\**************************************************************************/

void DeskFont_Set (const char *file, const char *fullfontid)
{
  char *shortid = static_DecodeFontID (fullfontid);
  char command [256];
  int fontindex;
  int value = 0; /* Default */
  WimpMessage buffer;
  
  for (fontindex = 1; fontindex <= 15; fontindex++)
  {
    if (0 == _swi (Territory_Collate, _INR(0,3)|_RETURN(0), -1,
        shortid, romfonttable [fontindex], 1 /* ignore case */))
    {
      value = fontindex;
    }
  }
  
  sprintf (command, "Configure WimpFont %d", value);
  _swi (OS_CLI, _IN(0), command);
  
  if (value == 0)
  {
    /* Need to write the status file as well */
    sprintf (command, "Set Wimp$Font %s", fullfontid);
    _swi (OS_CLI, _IN(0), command);
    if (!misc_fileislocked ((char *) file))
    {
      if (!_swix (OS_FSControl, _INR(0,3), 26, "<FontSetup$Dir>.Blank", file, 2))
      {
        FILE *handle;
        if (NULL != (handle = fopen (file, "a")))
        {
          fprintf (handle, "%s\n", command);
          fclose (handle);
        }
      }
    }
  }
  else
  {
    /* Remove the status file - it's not needed */
    sprintf (command, "Remove %s", file);
    _swix (OS_CLI, _IN(0), command);
  }
  
  /* And prod the Wimp so it realises the font has changed! */
  buffer.hdr.size = 20;
  buffer.hdr.your_ref = 0;
  buffer.hdr.action_code = Wimp_MFontChanged;
  throw (wimp_send_message (17, &buffer, 0, 0, NULL));
}

/******	DeskFont_ReflectFontNameInDisplayField() **************************\

Purpose:	Updates desktop font name display field in line with the
		selected font from the font menu

\**************************************************************************/

void DeskFont_ReflectFontNameInDisplayField (void)
{
  _kernel_oserror err_alloc = { 0, "Err_Alloc" };
  char *buffer;
  int bufsize;
  const char *fontname;
  
  throw (fontmenu_get_font (0, fontmenu_id, NULL, 0, &bufsize));
  buffer = malloc (bufsize);
  if (!buffer) message_error(messages,err_alloc);
  throw (fontmenu_get_font (0, fontmenu_id, buffer, bufsize, NULL));
  fontname = static_DecodeFontName (buffer);
  free (buffer);
  
  if (0 == strcmp (fontname, romfonttable [1]))
  {
    /* System font selected */
    fontname = message_lookup_direct(messages,fontname);
  }
  throw (displayfield_set_value (0, mainwindow_id, mainwindow_fontdisplay, (char *) fontname));
}

/******	static_DecodeFontName() *******************************************\

Purpose:	Determine font name to present to user
In:		Full font id (including qualifiers)
Out:		Font name

\**************************************************************************/

static char *static_DecodeFontName (const char *full_id)
{
  _kernel_oserror err_alloc = { 0, "Err_Alloc" };
  static char *buf = NULL;
  const char *ptr, *end;
  
  /* Try to find an "f" qualifier */
  if (_swi (Font_FindField, _INR(1,2)|_OUT(1)|_RETURN(2), full_id, 'f', &ptr))
  {
    /* "f" qualifier present, skip territory number and whitespace */
    while (*ptr >= '0' && *ptr <= '9') ptr++;
    while (*ptr == ' ') ptr++;
  }
  else
  {
    /* "f" qualifier not present, try "F" instead */
    if (_swi (Font_FindField, _INR(1,2)|_OUT(1)|_RETURN(2), full_id, 'F', &ptr))
    {
      /* "F" qualifier present, leave ptr as it is */
    }
    else
    {
      /* assume font name is given directly */
      ptr = full_id;
    }
  }
  
  /* ptr now points at a string that's terminated by "\", " " or a control character */
  /* so we need to make a null-terminated copy in a buffer */
  end = ptr;
  while (*end > ' ' && *end != '\\') end++;
  if (buf) free (buf);
  buf = malloc (end - ptr + 1);
  if (!buf) message_error(messages,err_alloc);
  str_ncpy (buf, ptr, end - ptr + 1);
  
  return buf;
}

/******	static_DecodeFontID() *********************************************\

Purpose:	Determine font ID to compare against directory struture
In:		Full font id (including qualifiers)
Out:		Simple font id

\**************************************************************************/

static char *static_DecodeFontID (const char *full_id)
{
  _kernel_oserror err_alloc = { 0, "Err_Alloc" };
  static char *buf = NULL;
  const char *ptr, *end;
  
  /* Try to find an "F" qualifier */
  if (_swi (Font_FindField, _INR(1,2)|_OUT(1)|_RETURN(2), full_id, 'F', &ptr))
  {
    /* "F" qualifier present, leave ptr as it is */
  }
  else
  {
    /* assume font name is given directly */
    ptr = full_id;
  }
  
  /* ptr now points at a string that's terminated by "\", " " or a control character */
  /* so we need to make a null-terminated copy in a buffer */
  end = ptr;
  while (*end > ' ' && *end != '\\') end++;
  if (buf) free (buf);
  buf = malloc (end - ptr + 1);
  if (!buf) message_error(messages,err_alloc);
  str_ncpy (buf, ptr, end - ptr + 1);
  
  return buf;
}
