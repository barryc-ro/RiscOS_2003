/******	WimpM.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Fonts configuration plug-in
This file:	Wimp message code

History:
Date		Who	Change
----------------------------------------------------------------------------
20/05/1998	BJGA	Created
27/05/1998	BJGA	Added Message_TaskCloseDown handler
28/05/1998	BJGA	Added handlers for Message_PreQuit, Message_PlugInQuit,
			Message_PlugInQuitContinue and Message_PlugInQuitAbort,
			Also quits plug-in unconditionally on Message_Quit
08/06/1998	BJGA	Removed Message_PlugInQuit and Message_PlugInQuitAbort handlers

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
/* Common */
#include "misc.h"
/* local headers */
#include "Main.h"
#include "WimpM.h"  /* includes prototypes for this file */

static int wimpm_quit (WimpMessage *message, void *handle);
static int wimpm_prequit (WimpMessage *message, void *handle);
static int wimpm_pluginquitcontinue (WimpMessage *message, void *handle);
static int wimpm_taskclosedown (WimpMessage *message, void *handle);
static int wimpm_openconfigwindow (WimpMessage *message, void *handle);

int wimpm_messages [6] =      { Wimp_MPreQuit,
    		       	      	Wimp_MPlugInQuit,
    		       	      	Wimp_MPlugInQuitContinue,
    		       	      	Wimp_MTaskCloseDown,
				Wimp_MOpenConfigWindow,
				0 };

void wimpm_register (void)
{
  throw (event_register_message_handler (Wimp_MQuit, wimpm_quit, NULL));
  throw (event_register_message_handler (Wimp_MPreQuit, wimpm_prequit, NULL));
  throw (event_register_message_handler (Wimp_MPlugInQuitContinue, wimpm_pluginquitcontinue, NULL));
  throw (event_register_message_handler (Wimp_MTaskCloseDown, wimpm_taskclosedown, NULL));
  throw (event_register_message_handler (Wimp_MOpenConfigWindow, wimpm_openconfigwindow, NULL));
}

/******	wimpm_quit() ******************************************************\

Purpose:	Handles Message_Quit

\**************************************************************************/

static int wimpm_quit (WimpMessage *message, void *handle)
{
  /* Quit both unconditionally */
  if (fontmerge_alive)
  {
    WimpMessage buffer;
    buffer.hdr.size = 20;
    buffer.hdr.your_ref = 0;
    buffer.hdr.action_code = Wimp_MQuit;
    throw (wimp_send_message (17, &buffer, fontmerge_taskhandle, 0, NULL));
  }
  quit = TRUE;
  return 1;
}

/******	wimpm_prequit() ***************************************************\

Purpose:	Handles Message_PreQuit

\**************************************************************************/

static int wimpm_prequit (WimpMessage *message, void *handle)
{
  if ((message -> hdr.size > 20) && (message -> data.words[0] & 1))
  {
    /* We're being quit as a single task from the Task Manager */
    /* (We mustn't intercept general desktop closedown here - then it's each plug-in for itself) */
    
    message -> hdr.your_ref = message -> hdr.my_ref;
    throw (wimp_send_message (19, message, message -> hdr.sender, 0, NULL));
      /* claim message, we'll be quitting ourselves if we want to without
       * prompting by a later Message_Quit  */
    
    main_startquit (0); /* Plug-in should complain if there's any outstanding work */
  }
  return 1;
}

/******	wimpm_pluginquitcontinue() ****************************************\

Purpose:	Handles Message_PlugInQuitContinue (sent by FontMerge)

\**************************************************************************/

static int wimpm_pluginquitcontinue (WimpMessage *message, void *handle)
{
  if (message->data.words [0] == PlugInSystem_Fonts)
  {
    main_startquit (-1); /* Keep the flags word from the last time */
  }
  return 1;
}

/******	wimpm_taskclosedown() *********************************************\

Purpose:	Handles Message_TaskCloseDown

\**************************************************************************/

static int wimpm_taskclosedown (WimpMessage *message, void *handle)
{
  if (message->hdr.sender == fontmerge_taskhandle)
  {
    fontmerge_alive = FALSE;
  }
  return 1;
}

/******	wimpm_openconfigwindow() ******************************************\

Purpose:	Handles Message_OpenConfigWindow

\**************************************************************************/

static int wimpm_openconfigwindow (WimpMessage *message, void *handle)
{
  misc_openwindow (mainwindow_id, FALSE);
  return 1;
}
