/******	Settings.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Fonts configuration plug-in
This file:	GUI <-> settings routines

History:
Date		Who	Change
----------------------------------------------------------------------------
20/05/1998	BJGA	Created
27/05/1998	BJGA	Initial faded-out values are now forcibly constrained
			by "parent" fontmax setting
28/05/1998	BJGA	Implemented settings_write
28/08/1998	BJGA	Strips encoding information from font identifier
			returned by fontmenu_get_font()

\**************************************************************************/

/* CLib */
#include "swis.h"
/* Toolbox */
#include "toolbox.h"
#include "fontmenu.h"
#include "window.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "DeskFont.h"
#include "Main.h"
#include "Settings.h"  /* includes prototypes for this file */

const cmos cmos_details [7] = { { 0x8C, 1, 4 },		/* WimpFont */
				{ 0xCA, 0, 8 },		/* FontMax2 EOR 12 */
				{ 0xCB, 0, 8 },		/* FontMax3 EOR 24 */
				{ 0xCC, 0, 8 },		/* FontMax4 */
				{ 0xCD, 0, 8 },		/* FontMax5 */
				{ 0x86, 0, 8 },		/* FontSize / 4K */
				{ 0xC8, 0, 8 } };	/* FontMax / 4K */


/******	settings_read() ***************************************************\

Purpose:	Reads current / default settings, reflect them in GUI
In:		Routine to determine settings (cmos_read or cmos_default)

\**************************************************************************/

void settings_read (int(*get)(cmos item, void *messages))
{
  int	value,
  	fontmax2,
  	fontmax3,
  	fontmax4,
  	fontmax5;
  
  value = get (WimpFont, &messages);
  if (value > 0 || get == cmos_default)
  {
    DeskFont_GetByNumber (value);
  }
  else
  {
    DeskFont_GetByName (status_file);
  }
  
  fontmax2 = get (FontMax2, &messages) ^ 12;
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_cachebitsoption, fontmax2 != 0));
  misc_shadecomponents (!fontmax2, mainwindow_id, mainwindow_cachebits_shademin, mainwindow_cachebits_shademax);
  if (fontmax2 == 0)
  {
    fontmax2 = cmos_default (FontMax2, &messages) ^ 12;
  }
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_cachebits, fontmax2));
  
  fontmax3 = get (FontMax3, &messages) ^ 24;
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_antialiasoption, fontmax3 != 0));
  misc_shadecomponents (!fontmax3, mainwindow_id, mainwindow_antialias_shademin, mainwindow_antialias_shademax);
  if (fontmax3 == 0)
  {
    fontmax3 = cmos_default (FontMax3, &messages) ^ 24;
    fontmax3 = (fontmax3 <= fontmax2) ? fontmax3 : fontmax2;
  }
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_antialias, fontmax3));
  
  fontmax4 = get (FontMax4, &messages);
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_horizaaoption, fontmax4 != 0));
  misc_shadecomponents (!fontmax4, mainwindow_id, mainwindow_horizaa_shademin, mainwindow_horizaa_shademax);
  if (fontmax4 == 0)
  {
    fontmax4 = (12 <= fontmax3) ? 12 : fontmax3;
  }
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_horizaa, fontmax4));
  
  fontmax5 = get (FontMax5, &messages);
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_vertaaoption, fontmax5 != 0));
  misc_shadecomponents (!fontmax5, mainwindow_id, mainwindow_vertaa_shademin, mainwindow_vertaa_shademax);
  if (fontmax5 == 0)
  {
    fontmax5 = (12 <= fontmax3) ? 12 : fontmax3;
  }
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_vertaa, fontmax5));

  value = get (FontSize, &messages) * 4;
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_cacheinit, value));

  value = get (FontMax, &messages) * 4;
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_cachelimit, value));
}

/******	settings_write() **************************************************\

Purpose:	Reads GUI, reflect in current and configured settings
Out:		TRUE => operation performed successfully

\**************************************************************************/

BOOL settings_write (void)
{
  int fontsize,
      fontmax,
      fontmax1,
      fontmax2,
      fontmax3,
      fontmax4,
      fontmax5,
      value;
  char string [256];
  
  throw (fontmenu_get_font (0, fontmenu_id, string, sizeof(string), NULL));
  {
    /* Strip out the encoding information ("\E" and/or "\e") */
    const char *rd = string;
    char *wr = string;
    do
    {
      if (*rd == '\\' && (*(rd+1) == 'E' || *(rd+1) == 'e'))
      {
        /* Skip qualifier */
        do
        {
          rd++;
        }
        while (*rd != '\\' && *rd >= ' ');
      }
      else
      {
        /* Copy byte down */
        *wr = *rd;
        rd++;
        wr++;
      }
    }
    while (*rd >= ' ');
    *wr = '\0';
  }
  DeskFont_Set (status_file, string);
  
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_cachelimit, &fontmax));
  fontmax >>= 2;
  cmos_write (FontMax, fontmax);
  
  fontmax1 = _swi (Font_ReadFontMax, _RETURN(1)); /* remember current setting of FontMax1 */
  
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_cachebits, &fontmax2));
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_cachebitsoption, &value));
  if (fontmax2 > 255) fontmax2 = 255;
  if (fontmax2 < 1)   fontmax2 = 1;
  if (value == 0)     fontmax2 = 0;
  cmos_write (FontMax2, fontmax2 ^ 12);
  
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_antialias, &fontmax3));
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_antialiasoption, &value));
  if (fontmax3 > 255) fontmax3 = 255;
  if (fontmax3 < 1)   fontmax3 = 1;
  if (value == 0)     fontmax3 = 0;
  cmos_write (FontMax3, fontmax3 ^ 24);
  
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_horizaa, &fontmax4));
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_horizaaoption, &value));
  if (fontmax4 > 255) fontmax4 = 255;
  if (fontmax4 < 1)   fontmax4 = 1;
  if (value == 0)     fontmax4 = 0;
  cmos_write (FontMax4, fontmax4);
  
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_vertaa, &fontmax5));
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_vertaaoption, &value));
  if (fontmax5 > 255) fontmax5 = 255;
  if (fontmax5 < 1)   fontmax5 = 1;
  if (value == 0)     fontmax5 = 0;
  cmos_write (FontMax5, fontmax5);
  
  /* Now update the Font Manager's current FontMax settings.
     Doing this in one go is a lot faster than using four *Configure commands! */
  _swi (Font_SetFontMax, _INR(0,7), fontmax, fontmax1, fontmax2, fontmax3, fontmax4, fontmax5, 0, 0);
  
  throw (numberrange_get_value (0, mainwindow_id, mainwindow_cacheinit, &fontsize));
  cmos_write (FontSize, fontsize >> 2);
  sprintf (string, "ChangeDynamicArea -FontSize %dK", fontsize);
  _swix (OS_CLI, _IN(0), string);
  
  return TRUE;
}
