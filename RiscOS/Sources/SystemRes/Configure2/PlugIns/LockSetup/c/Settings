/******	Settings.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	FSLock configuration plug-in
This file:	GUI <-> settings routines

History:
Date		Who	Change
----------------------------------------------------------------------------
12/12/1997	BJGA	Created

\**************************************************************************/

/* CLib */
#include <string.h>
#include "kernel.h"
#include "swis.h"
/* Toolbox */
#include "wimplib.h"
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "message.h"
#include "misc.h"
#include "str.h"
/* local headers */
#include "Main.h"
#include "Settings.h"  /* includes prototypes for this file */

#define level_unlocked_perm	0
#define level_unlocked_temp	1
#define level_locked		2

#define err_no_oldpass		(&err[0])
#define err_wrong_oldpass	(&err[1])
#define err_no_newpass		(&err[2])
#define err_one_newpass		(&err[3])
#define err_newpass_mismatch	(&err[4])
#define err_newpass_invalid	(&err[5])

const cmos cmos_details [1] = { { 0x05, 0, 8 } };	/* FileSystem */

static _kernel_oserror err [6] =      {	{ 0, "Err_Old1" },
					{ 0, "Err_Old2" },
					{ 0, "Err_New1" },
					{ 0, "Err_New2" },
					{ 0, "Err_New3" },
					{ 0, "Err_New4" } };

static char oldpass [30] = "", newpass1 [30] = "", newpass2 [30] = "";
static int newlevel = -1, newFS = -1;
static BOOL adjust_used = FALSE;

static void settings_complain (_kernel_oserror *error);


/******	settings_read() ***************************************************\

Purpose:	Reads current locking level, reflects it in GUI.
		Also clears all password writables.

\**************************************************************************/

void settings_read (void)
{
  int currentlevel = -1;
  int flags = -1;
  
  /* First set current locking level display and shade relevant radios */
  switch (currentlevel = _swi (FSLock_Status, _RETURN(0))) {
    case level_unlocked_perm:
      throw (displayfield_set_value (0, mainwindow_id, mainwindow_locklevel,
        message_lookup_direct(messages,"Level0")));
      misc_shadecomponents (FALSE, mainwindow_id, mainwindow_oplock, mainwindow_oplock);
      misc_shadecomponents (TRUE, mainwindow_id, mainwindow_opunlock, mainwindow_opchpass);
      break;
      
    case level_unlocked_temp:
      throw (displayfield_set_value (0, mainwindow_id, mainwindow_locklevel,
        message_lookup_direct(messages,"Level1")));
      misc_shadecomponents (FALSE, mainwindow_id, mainwindow_oplock, mainwindow_opchpass);
      break;
      
    default: /* case level_locked */
      throw (displayfield_set_value (0, mainwindow_id, mainwindow_locklevel,
        message_lookup_direct(messages,"Level2")));
      misc_shadecomponents (TRUE, mainwindow_id, mainwindow_oplock, mainwindow_oplock);
      misc_shadecomponents (FALSE, mainwindow_id, mainwindow_opunlock, mainwindow_opchpass);
  }
  
  /* Select radio icon:
   * use first unshaded one, in increasing order of danger, lock => chpass => unlock  */
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_oplock, (unsigned int *) &flags));
  if (!(flags & Gadget_Faded)) {
    throw (radiobutton_set_state (0, mainwindow_id, mainwindow_oplock, 1));
  }
  else {
    throw (gadget_get_flags (0, mainwindow_id, mainwindow_opchpass, (unsigned int *) &flags));
    if (!(flags & Gadget_Faded))
      throw (radiobutton_set_state (0, mainwindow_id, mainwindow_opchpass, 1));
    else
      throw (radiobutton_set_state (0, mainwindow_id, mainwindow_opunlock, 1));
  }
  
  /* And drop through to next function */
  settings_reset_writables ();
}

/******	settings_reset_writables() ****************************************\

Purpose:	Shades and clears all password writables.

\**************************************************************************/

void settings_reset_writables (void)
{
  int currentlevel = -1;
  int flags = -1;
  ComponentId selected;
  
  currentlevel = _swi (FSLock_Status, _RETURN(0));
  
  /* Clear the writable icons */
  throw (writablefield_set_value (0, mainwindow_id, mainwindow_oldpass, NULL));
  throw (writablefield_set_value (0, mainwindow_id, mainwindow_newpass1, NULL));
  throw (writablefield_set_value (0, mainwindow_id, mainwindow_newpass2, NULL));
  
  /* Now shade the writable icons as according to the selected radio button */
  throw (radiobutton_get_state (0, mainwindow_id, mainwindow_oplock, NULL, &selected));
  switch (selected) {
    case mainwindow_oplock:
      misc_shadecomponents (TRUE,
        mainwindow_id, mainwindow_oldpass_shademin, mainwindow_oldpass_shademax);
      misc_shadecomponents (currentlevel == level_unlocked_temp,
        mainwindow_id, mainwindow_newpass_shademin, mainwindow_newpass_shademax);
      break;
      
    case mainwindow_opunlock:
      misc_shadecomponents (FALSE,
        mainwindow_id, mainwindow_oldpass_shademin, mainwindow_oldpass_shademax);
      misc_shadecomponents (TRUE,
        mainwindow_id, mainwindow_newpass_shademin, mainwindow_newpass_shademax);
      break;
      
    default: /* case mainwindow_opchpass: */
      misc_shadecomponents (FALSE,
        mainwindow_id, mainwindow_oldpass_shademin, mainwindow_oldpass_shademax);
      misc_shadecomponents (FALSE,
        mainwindow_id, mainwindow_newpass_shademin, mainwindow_newpass_shademax);
      break;
  }
  
  /* And place the caret in the first available writable icon (if any)
   * Note, the toolbox moves _up_ an icon if the first gadget is faded (!)
   * so we can't rely on that to the job.  */
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_oldpass, (unsigned int *) &flags));
  if (!(flags & Gadget_Faded))
    gadget_set_focus (0, mainwindow_id, mainwindow_oldpass);
  else
    gadget_set_focus (0, mainwindow_id, mainwindow_newpass1); /* errors deliberately ignored */
}

/******	settings_validate_passwords() *************************************\

Purpose:	Checks that the passwords appropriate to the currently-
		selected operation are valid, and (if appropriate) that
		the two new password fields match.
		
		Also, if a password is currently active, it attempts to
		change the old password to itself. This will catch an
		incorrect password *before* we go bothering other plug-ins.
		
		The information needed to perform the operation is stored
		internally to prevent any tampering during the subsequent
		messaging process.
		
Out:		TRUE => all passwords are valid / correct

\**************************************************************************/

BOOL settings_validate_passwords (void)
{
  unsigned int flags = -1;
  ComponentId selected;
  int oldlevel = -1, oldFS = -1;
  
  /* First, get all the information we require. */
  
  *oldpass  = '\0'; /* Ensure no old value remains */
  *newpass1 = '\0'; /* Ensure no old value remains */
  *newpass2 = '\0'; /* Ensure no old value remains */
  throw (writablefield_get_value (0, mainwindow_id, mainwindow_oldpass,
    oldpass, sizeof (oldpass), NULL));
  str_cpy (oldpass, oldpass); /* null-terminate */
  throw (writablefield_get_value (0, mainwindow_id, mainwindow_newpass1,
    newpass1, sizeof (newpass1), NULL));
  str_cpy (newpass1, newpass1); /* null-terminate */
  throw (writablefield_get_value (0, mainwindow_id, mainwindow_newpass2,
    newpass2, sizeof (newpass2), NULL));
  str_cpy (newpass2, newpass2); /* null-terminate */

  _swi (FSLock_Status, _OUTR(0,1), &oldlevel, &oldFS);
  throw (radiobutton_get_state (0, mainwindow_id, mainwindow_oplock, NULL, &selected));
  switch (selected) {
    case mainwindow_oplock:
      newlevel = 2;
      if (oldlevel == 1) newFS = oldFS;
      else {
        int boot_remote, nread, vartype;
        if (NULL ==_swix (OS_ReadVarVal, _INR(0,4)|_OUT(2)|_OUT(4),
            (int) "Boot$Remote", (int) &boot_remote, 4, 0, 0, &nread, &vartype)
            && nread != 0 && (vartype != 1 || boot_remote != 0)) {
          /* use ADFS */
          newFS = cmos_default (FileSystem, &messages);
        }
        else {
          /* use configured power-on default filing system */
          newFS = cmos_read (FileSystem, NULL);
        }
      }
      break;
      
    case mainwindow_opunlock:
      if (oldlevel == 1) newlevel = 0;
      else newlevel = 1;
      newFS = oldFS;
      break;
      
    default: /* case mainwindow_opchpass: */
      newlevel = oldlevel;
      newFS = oldFS;
      break;
  }
  
  /* Then, check the validity of the passwords (if any). */
  
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_oldpass_shademin, &flags));
  if (!(flags & Gadget_Faded)) {
    /*** Old password needs validating ***/
    
    /* Check for null string */
    if (str_len (oldpass) == 0) {
      settings_complain (err_no_oldpass);
      return FALSE;
    }
    /* Check for incorrect password */
    if (NULL != _swix (FSLock_ChangeStatus, _INR(0,3), oldlevel, oldpass, oldpass, oldFS)) {
      settings_complain (err_wrong_oldpass);
      return FALSE;
    }
  }
  
  throw (gadget_get_flags (0, mainwindow_id, mainwindow_newpass_shademin, &flags));
  if (!(flags & Gadget_Faded)) {
    /*** New passwords need validating ***/
    
    /* Check for both null strings */
    if ((str_len (newpass1) == 0) && (str_len (newpass2) == 0)) {
      settings_complain (err_no_newpass);
      return FALSE;
    }
    /* Check for one null string */
    if ((str_len (newpass1) == 0) || (str_len (newpass2) == 0)) {
      settings_complain (err_one_newpass);
      return FALSE;
    }
    /* Check for unmatching strings */
    if (strcmp (newpass1, newpass2) != 0) {
      settings_complain (err_newpass_mismatch);
      return FALSE;
    }
    /* Check for short strings */
    if (str_len (newpass1) < 5) {
      settings_complain (err_newpass_invalid);
      return FALSE;
    }
  }
  /* Everything's okay */
  return TRUE;
}

/******	settings_complain() ***********************************************\

Purpose:	Warns the user something is wrong about the password(s)
In:		Pointer to tokenised error block

\**************************************************************************/

static void settings_complain (_kernel_oserror *error)
{
  wimp_report_error (
    (_kernel_oserror *) _swix (MessageTrans_ErrorLookup, _INR(0,7)|_RETURN(0),
      (int) error, (int) &messages, 0, 0, 0, 0, 0, 0),
    Wimp_ReportError_Cancel | 1u << 8 | 2u << 9,
    message_lookup_direct(messages,"_TaskName"),
    message_lookup_direct(messages,"_ConfigSprite"), (void *) 1, NULL);
}

/******	settings_broadcast() **********************************************\

Purpose:	Broadcasts Message_FSLockStateChangeRequest, to allow
		other plug-ins to save choices (or abort the process)
		before the disc is locked.
In:		Bit 0 set => don't quit when operation is complete
		(ie Adjust was used to click on "Set")

\**************************************************************************/

void settings_broadcast (unsigned int flags)
{
  WimpMessage message;
  
  adjust_used = ((flags & 1) != 0);
  message.hdr.size = 24;
  message.hdr.your_ref = 0;
  message.hdr.action_code = Wimp_MFSLockStateChangeRequest;
  message.data.words[0] = newlevel;
  throw (wimp_send_message (18, &message, 0, 0, NULL));
}

/******	settings_write() **************************************************\

Purpose:	Actually performs the lock operation.

\**************************************************************************/

void settings_write (void)
{
  WimpMessage message;
  
  if (newlevel != -1) {
    _swi (FSLock_ChangeStatus, _INR(0,3), newlevel, oldpass, newpass1, newFS);
      /* We'll just have to hope nobody is intercepting this SWI  :-(  */
    if (!adjust_used) quit = TRUE;
    
    message.hdr.size = 20;
    message.hdr.your_ref = 0;
    message.hdr.action_code = Wimp_MFSLockStateChanged;
    throw (wimp_send_message (17, &message, 0, 0, NULL));
      /* Tells everyone (including us) to update their display */
  }
  newlevel = -1; /* make sure we only do it the one time, immediately after the message protocol */
}
