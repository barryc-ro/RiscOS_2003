/******	ToolboxE.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Windows configuration plug-in
This file:	Toolbox event code

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers
10/12/1997	BJGA	Made handler routines static
11/05/1998	BJGA	Added NumberRange_ValueChanged handler

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "toolbox.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Settings.h"
#include "ToolboxE.h"  /* includes prototypes for this file */

static int toolboxe_actionbuttonselected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_numberrangevaluechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

int toolboxe_events [4] =     { ActionButton_Selected,
				NumberRange_ValueChanged,
				Toolbox_ObjectAutoCreated,
				0 };

void toolboxe_register (void)
{
  throw (event_register_toolbox_handler (-1, ActionButton_Selected, toolboxe_actionbuttonselected, NULL));
  throw (event_register_toolbox_handler (-1, NumberRange_ValueChanged, toolboxe_numberrangevaluechanged, NULL));
  throw (event_register_toolbox_handler (-1, Toolbox_ObjectAutoCreated, toolboxe_objectautocreated, NULL));
}

/******	toolboxe_actionbuttonselected() ***********************************\

Purpose:	Handles ActionButton_Selected event

\**************************************************************************/

static int toolboxe_actionbuttonselected (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  int gadget;
  switch (id_block->self_component) {
    case mainwindow_dragall:
      for (gadget = mainwindow_dragmin; gadget <= mainwindow_dragmax; gadget++) throw (optionbutton_set_state (0, mainwindow_id, gadget, 1));
      break;
    case mainwindow_dragnone:
      for (gadget = mainwindow_dragmin; gadget <= mainwindow_dragmax; gadget++) throw (optionbutton_set_state (0, mainwindow_id, gadget, 0));
      break;
    case mainwindow_default:
      settings_read (cmos_default);
      break;
    case mainwindow_cancel:
      if (!(event->hdr.flags & 1)) quit = TRUE;
      else settings_read (cmos_read);
      break;
    case mainwindow_set:
      if (settings_write ()) if (!(event->hdr.flags & 1)) quit = TRUE;
      break;
  }
  return 1;
}

/******	toolboxe_numberrangevaluechanged() ********************************\

Purpose:	Handles NumberRange_ValueChanged event

\**************************************************************************/

static int toolboxe_numberrangevaluechanged (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  ComponentId this_c, that_c;
  int offset = mainwindow_speed2 - mainwindow_speed; /* == mainwindow_accel2 - mainwindow_accel */
  int new_value = ((NumberRangeValueChangedEvent *) event) -> new_value;
  int other_value;
  
  this_c = id_block->self_component;
  that_c = (mainwindow_speed == this_c) ? mainwindow_accel : mainwindow_speed;
  throw (numberrange_get_value (0, mainwindow_id, that_c, &other_value));
  
  settings_update_display (mainwindow_id, this_c + offset, new_value);
  
  if ((0 == new_value) && (0 == other_value))
  {
    /* Don't allow both to be set to zero at the same time! */
    throw (numberrange_set_value (0, mainwindow_id, that_c, 1));
    settings_update_display (mainwindow_id, that_c + offset, 1);
  }
  
  return 1;
}

/******	toolboxe_objectautocreated() **************************************\

Purpose:	Handles Toolbox_ObjectAutoCreated event

\**************************************************************************/

static int toolboxe_objectautocreated (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  mainwindow_id = id_block->self_id;
  misc_openwindow (mainwindow_id, TRUE);
  settings_read (cmos_read);
  return 1;
}
