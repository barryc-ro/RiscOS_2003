/******	Settings.c ********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Windows configuration plug-in
This file:	GUI <-> settings routines

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split from Main
			Added these headers
15/01/1998	BJGA	Adapted to use stored CMOS defaults
11/05/1998	BJGA	Now uses reorganised Wimp CMOS allocation
			Support for new Wimp options added (including iconbar values
			lookup table code and split display field / number range support)

\**************************************************************************/

/* CLib */
#include "swis.h"
/* Toolbox */
#include "toolbox.h"
#include "window.h"
#include "gadgets.h"
/* Common */
#include "cmos.h"
#include "misc.h"
/* local headers */
#include "Main.h"
#include "Settings.h"  /* includes prototypes for this file */

const cmos cmos_details [14] ={ { 0xDE, 7, 1 },		/* WimpIconiseButton */
				{ 0x8C, 5, 1 },		/* WimpSpritePrecedence */
				{ 0x1C, 1, 1 },		/* DragASprite */
				{ 0x1C, 4, 1 },		/* WimpShiftToggle */
				{ 0x8C, 7, 1 },		/* DesktopTileStatus */
				{ 0xC5, 0, 1 },		/* WimpFlagsInstantDragMove */
				{ 0xC5, 1, 1 },		/* WimpFlagsInstantDragResize */
				{ 0xC5, 2, 1 },		/* WimpFlagsInstantDragHScroll */
				{ 0xC5, 3, 1 },		/* WimpFlagsInstantDragVScroll */
				{ 0xC5, 4, 1 },		/* WimpFlagsErrorAction */
				{ 0xC5, 5, 1 },		/* WimpFlagsConfinementBR */
				{ 0xC5, 6, 1 },		/* WimpFlagsConfinementTL */
				{ 0x17, 5, 3 },		/* (WimpIconBarSpeed index) EOR 4 */
				{ 0x1B, 5, 3 } };	/* (WimpIconBarAcceleration index) EOR 3 */

/******	settings_read() ***************************************************\

Purpose:	Reads current / default settings, reflect them in GUI
In:		Routine to determine settings (cmos_read or cmos_default)

\**************************************************************************/

void settings_read (int(*get)(cmos item, void *messages))
{
  int value;
//
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_dragmove, get (WimpFlagsInstantDragMove, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_dragresize, get (WimpFlagsInstantDragResize, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_draghscroll, get (WimpFlagsInstantDragHScroll, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_dragvscroll, get (WimpFlagsInstantDragVScroll, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_dragfiles, get (DragASprite, &messages)));
//
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_bandr, get (WimpFlagsConfinementBR, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_tandl, get (WimpFlagsConfinementTL, &messages)));
//
  value = get (IconBarSpeed, &messages) ^ 4;
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_speed, value));
  settings_update_display (mainwindow_id, mainwindow_speed2, value);
  value = get (IconBarAcceleration, &messages) ^ 3;
  throw (numberrange_set_value (0, mainwindow_id, mainwindow_accel, value));
  settings_update_display (mainwindow_id, mainwindow_accel2, value);
//
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_shifttoggle, !get (WimpShiftToggle, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_textures, !get (DesktopTileStatus, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_errorbeep, !get (WimpFlagsErrorAction, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_icons, get (ROMIconProtect, &messages)));
  throw (optionbutton_set_state (0, mainwindow_id, mainwindow_iconise, get (IconiseButton, &messages)));
}

/******	settings_write() **************************************************\

Purpose:	Reads GUI, reflect in current and configured settings
Out:		TRUE => operation performed successfully

\**************************************************************************/

BOOL settings_write (void)
{
  int value, ovalue;
  char buffer [6], string [60];
  BOOL reassert_mode = FALSE;
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_dragmove, &value));
  cmos_write (WimpFlagsInstantDragMove, value);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_dragresize, &value));
  cmos_write (WimpFlagsInstantDragResize, value);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_draghscroll, &value));
  cmos_write (WimpFlagsInstantDragHScroll, value);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_dragvscroll, &value));
  cmos_write (WimpFlagsInstantDragVScroll, value);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_dragfiles, &value));
  cmos_write (DragASprite, value);
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_bandr, &value));
  cmos_write (WimpFlagsConfinementBR, value);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_tandl, &value));
  cmos_write (WimpFlagsConfinementTL, value);
//
  throw (displayfield_get_value (0, mainwindow_id, mainwindow_speed2, buffer, sizeof(buffer), NULL));
  sprintf (string, "Configure WimpIconBarSpeed %s", buffer);
  _swi (OS_CLI, _IN(0), string);
  throw (displayfield_get_value (0, mainwindow_id, mainwindow_accel2, buffer, sizeof(buffer), NULL));
  sprintf (string, "Configure WimpIconBarAcceleration %s", buffer);
  _swi (OS_CLI, _IN(0), string);
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_shifttoggle, &value));
  cmos_write (WimpShiftToggle, !value);
//
  ovalue = !cmos_read (DesktopTileStatus, NULL);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_textures, &value));
  cmos_write (DesktopTileStatus, !value);
  if (value != ovalue) reassert_mode = TRUE;
//
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_errorbeep, &value));
  cmos_write (WimpFlagsErrorAction, !value);
//
  ovalue = cmos_read (ROMIconProtect, NULL);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_icons, &value));
  if (0 == value)
  {
    _swi (OS_CLI, _IN(0), "Configure WimpSpritePrecedence RAM");
  }
  else
  {
    _swi (OS_CLI, _IN(0), "Configure WimpSpritePrecedence ROM");
  }
  if (value != ovalue) reassert_mode = TRUE;
//
  ovalue = cmos_read (IconiseButton, NULL);
  throw (optionbutton_get_state (0, mainwindow_id, mainwindow_iconise, &value));
  if (0 == value)
  {
    _swi (OS_CLI, _IN(0), "Configure WimpIconiseButton Off");
  }
  else
  {
    _swi (OS_CLI, _IN(0), "Configure WimpIconiseButton On");
  }
  if (value != ovalue) reassert_mode = TRUE;
//
  misc_applywimpflags ();
  if (reassert_mode) _swi (Wimp_SetMode, _IN(0), _swi (OS_ScreenMode, _IN(0)|_RETURN(1), 1));
  return TRUE;
}

/******	settings_update_display() *****************************************\

Purpose:	Reflects internal icon bar speed/accel number in display field
In:		Gadget paramaters, internal (log) value

\**************************************************************************/

void settings_update_display (ObjectId wind, ComponentId comp, int setting)
{
  int value;
  char string [6];
//
  switch (setting)
  {
    case 0: value = 0; break;
    case 1: value = 20; break;
    case 2: value = 50; break;
    case 3: value = 100; break;
    case 4: value = 200; break;
    case 5: value = 500; break;
    case 6: value = 1000; break;
    case 7: value = 2000; break;
    default: value = -1; break; /* shouldn't happen */
  }
  sprintf (string, "%d", value);
  throw (displayfield_set_value (0, wind, comp, string));
}
