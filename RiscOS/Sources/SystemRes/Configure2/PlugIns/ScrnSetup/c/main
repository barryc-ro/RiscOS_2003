/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Main WIMP shell for Screen configuration                         */
/* Author:  Richard Leggett                                                  */
/* History: 17-Nov-97: RML: Begun.                                           */
/*          20-Mar-98: RML: Minor updates.                                   */
/*          24-Mar-98: RML: ScrSaver$Path is now ScrSaver$Dir.               */
/*          25-Mar-98: RML: Added setting of ScrSaver$MinMem.                */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "menu.h"
#include "colourdbox.h"
#include "event.h"
#include "common.h"
#include "window.h"
#include "wimplib.h"
#include "defines.h"
#include "screen.h"
#include "monitor.h"

#define BlankTimeBits     7<<3
#define CMOSBlankTimeByte 188

static MessagesFD messages_desc;
static IdBlock    idb;
static char       messages_string[255];
static int        settings_handle = 0;
static int        blanktime = 0;
static int        unblank_on_writes = 0;
int               main_window_id;
int               dpms_window_id;
int               res_menu_id;
int               menus_are_grey = 0;
int               currently_ticked = 0;
static char      *blanktime_to_text[8] = {"Off",
                                          "30 sec.",
                                          "1 min.",
                                          "2 min.",
                                          "5 min.",
                                          "10 min.",
                                          "15 min.",
                                          "30 min."};


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

static void program_exit(void)
{
    /* Discard screenmodes instantiation */
    discard_screenmodes_instantiation();

    /* If there's a settings plug-in open, shut it down too. */
    if (settings_handle!=0)
    {
        WimpMessage msg;

        msg.hdr.size = 20;
        msg.hdr.your_ref = 0;
        msg.hdr.action_code = Wimp_MQuit;
        error_trap(wimp_send_message(Wimp_EUserMessage, &msg, settings_handle, 0, 0), 0);
    }

    exit(0);
}


/*---------------------------------------------------------------------------*
 * update_settings_icon                                                      *
 *                                                                           *
 * Grey or ungrey the 'Settings' icon according to if there is a settings    *
 * app for the current screen blanker.                                       *
 *---------------------------------------------------------------------------*/

static void update_settings_icon(void)
{
    int index;

    error_trap(stringset_get_selected(1, main_window_id, SaverTypeStringSet, &index), 0);

    if (check_has_settings(index))
    {
        ungrey_gadget(main_window_id, SettingsOption);
    }
    else
    {
        grey_gadget(main_window_id, SettingsOption);
    }
}    


/*---------------------------------------------------------------------------*
 * try_it                                                                    *
 *                                                                           *
 * Try the currently selected screen saver.                                  *
 *---------------------------------------------------------------------------*/

static void try_it(void)
{
    char command[1024];
    int  selected;
    int  time;
    int  end_time;
    int  min;
    int  free_mem;
    
    error_trap(stringset_get_selected(1, main_window_id, SaverTypeStringSet, &selected), 0);

    /* Set MinMem */
    if (selected)
    {
        /* Find the memory required for the saver */
        sprintf(command, "%s.!Run", get_saver_filename(selected));
        min = get_wimpslot_min(command);

        /* Check we've enough free memory to try the saver */
        _swix(Wimp_SlotSize, _INR(0,1)|_OUT(2), -1, -1, &free_mem);
        if ( (free_mem / 1024) < (min + 16) )
        {
            warning_box(messages_lookup("SaverNoMemory"));
            return;
        }

        sprintf(command, "SetEval ScrSaver$MinMem %d", min);
        if (min) _swix(OS_CLI, _IN(0), command);
    }
    
    /* Set the screen blanker dir for the currently selected one */
    if (selected==0) sprintf(command, "Unset ScrSaver$Dir");
    else sprintf(command, "Set ScrSaver$Dir %s", get_saver_filename(selected));
    error_trap(_swix(OS_CLI, _IN(0), command), 0);

    /* Do a slight delay before starting the blanker (to allow for extra mouse movement) */
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    end_time = time + 100;
    while (time < end_time) _swix(OS_ReadMonotonicTime, _OUT(0), &time);

    /* Now start the blanker */
    error_trap(_swix(ScreenBlanker_Control, _IN(0), 0), 0);
}


/*---------------------------------------------------------------------------*
 * save_choices                                                              *
 *                                                                           *
 * Read the choices from the window and output a command file.               *
 *---------------------------------------------------------------------------*/

static void save_choices(void)
{
    char set_string[1024];
    char blanktime_string[32];
    char mem_string[64];
    int  cmosvalue;
    int  selected;
    int  min;
    int  blanktime_to_seconds[8] = {0, 30, 60, 120, 300, 600, 900, 1800};

    memset(set_string, 0, 1024);
    memset(mem_string, 0, 64);
    memset(blanktime_string, 0, 32);

    /* Write BlankTime CMOS bit */
    cmosvalue = read_cmos_value(CMOSBlankTimeByte);
    cmosvalue = cmosvalue &~ (BlankTimeBits);
    cmosvalue = cmosvalue | (blanktime<<3);
    write_cmos_value(CMOSBlankTimeByte, cmosvalue);
    
    /* Issue a *Blanktime command so we're up to date */
    sprintf(set_string, "Blanktime %d", blanktime_to_seconds[blanktime]);
    error_trap(_swix(OS_CLI, _IN(0), set_string), 0);
    error_trap(stringset_get_selected(1, main_window_id, SaverTypeStringSet, &selected), 0);

    /* Deal with ScrSaver$Dir & ScrSaver$MinMem setting */
    if (selected==0)
    {
        sprintf(set_string, "Unset ScrSaver$Dir");
        if (unblank_on_writes) sprintf(blanktime_string, "Blanktime -W");
    }
    else
    {
        sprintf(set_string, "%s.!Run", get_saver_filename(selected));
        min = get_wimpslot_min(set_string);
        if (min) sprintf(mem_string, "SetEval ScrSaver$MinMem %d", min);
        sprintf(set_string, "Set ScrSaver$Dir %s", get_saver_filename(selected));
    }

    /* Write settings to screen choices file */
    write_screen_choices(set_string, mem_string, blanktime_string);
    write_monitor_choices();

    /* Do the commands */
    error_trap(_swix(OS_CLI, _IN(0), set_string), 0);
    error_trap(_swix(OS_CLI, _IN(0), mem_string), 0);
}


/*---------------------------------------------------------------------------*
 * set_default_choices                                                       *
 *                                                                           *
 * Fill in the default choices in the dialogue box.                          *
 *                                                                           *
 * Globals: blanktime                                                        *
 *---------------------------------------------------------------------------*/

static void set_default_choices(void)
{
    blanktime = 1;
    error_trap(stringset_set_selected(0, main_window_id, SaverTypeStringSet, DPMSString), 0);
    error_trap(displayfield_set_value(0, main_window_id, BlankDelayDisplay, "30 sec."), 0);
    update_settings_icon();
}


/*---------------------------------------------------------------------------*
 * parse_blanktime_command                                                   *
 *                                                                           *
 * What useful stuff can we get from the Blanktime command?                  *
 *                                                                           *
 * In: string -> *Blanktime command string.                                  *
 *---------------------------------------------------------------------------*/

static void parse_blanktime_command(char *string)
{
    char *switches = string+10;
    
    if (strstr(switches, "-W")) unblank_on_writes=1;

    optionbutton_set_state(0, dpms_window_id, DPMSUnblankButton, unblank_on_writes);
}


/*---------------------------------------------------------------------------*
 * parse_set_command                                                         *
 *                                                                           *
 * Find the screensaver path from a Set ScrSaver$Dir command.                *
 *---------------------------------------------------------------------------*/

static void parse_set_command(char *string)
{
    char *path = string + 17;
    char *name;

    name = check_saver_path(path);

    if (!name)
    {    
        warning_box(messages_lookup("SaverNotRecognised"));
    }
    else
    {
        error_trap(stringset_set_selected(0, main_window_id, SaverTypeStringSet, name), 0);
        error_trap(_swix(OS_CLI, _IN(0), string), 0);
    }
    
    update_settings_icon();
}


/*---------------------------------------------------------------------------*
 * read_choices                                                              *
 *                                                                           *
 * Read the choices file.                                                    *
 *---------------------------------------------------------------------------*/

static void read_choices(void)
{
    FILE *fp;
    char *menustring;
    char  string[1024];
    int   more = 1;    

    /* Make monitors menu */
    menustring = malloc(read_monitors_list());
    if (!menustring) return;
    make_monitors_menu(menustring);
    error_trap(stringset_set_available(0, main_window_id, MonitorTypeStringSet, menustring), 0);
    free(menustring);
        
    /* Make screensaver menu */
    menustring = malloc(read_savers_list()+16);
    if (!menustring) return;
    make_savers_menu(menustring);
    error_trap(stringset_set_available(0, main_window_id, SaverTypeStringSet, menustring), 0);
    free(menustring);

    update_settings_icon();
 
    /* Read in choices from file */
    fp=fopen(ChoicesFile, "r");
    if (fp)
    {
        while (more)
        {
            more=(int)fgets(string, 1024, fp);
            if (more)
            {
                if (strncmpa(string, "Set ScrSaver$Dir", 16)==0)
                {
                    parse_set_command(string);
                }

                else if (strncmpa(string, "Blanktime", 9)==0)
                {
                    parse_blanktime_command(string);
                }

                else if (strncmpa(string, "Set ScrSaver$MinMem", 19)==0)
                {
                    error_trap(_swix(OS_CLI, _IN(0), string), 0); 
                }
            }
        }
        fclose(fp);
    }        

    blanktime = (read_cmos_value(CMOSBlankTimeByte) & BlankTimeBits) >> 3;
    error_trap(displayfield_set_value(0, main_window_id, BlankDelayDisplay,
                                      blanktime_to_text[blanktime]), 0);
}


/*---------------------------------------------------------------------------*
 * load_settings_app                                                         *
 *                                                                           *
 * User has clicked on 'Settings' - load the settings app.                   *
 *---------------------------------------------------------------------------*/

static void load_settings_app(void)
{
    WimpGetWindowStateBlock  block;
    char                    *savername;
    char                     pathname[960];
    char                     command_string[1024];
    int                      type;
    int                      openx;
    int                      openy;
    int                      index;

    /* Decide which openat to give to the settings app */
    error_trap(window_get_wimp_handle(0, main_window_id, &block.window_handle), 0);
    error_trap(wimp_get_window_state(&block),0);
    openx=block.visible_area.xmin+200;
    openy=block.visible_area.ymax-400;
    
    /* FInd out which blanker is selected */
    error_trap(stringset_get_selected(1, main_window_id, SaverTypeStringSet, &index), 0);

    /* DPMS blanker */
    if (index==0)
    {
        error_trap(toolbox_show_object(0, dpms_window_id, 0, 0, 0, 0), 0);
        return;
    }

    /* Something other than DPMS */
    savername = get_saver_filename(index);
    if (savername==0) return;
    sprintf(pathname, "%s.!Settings",savername);
    _swix(OS_File, _INR(0,1)|_OUT(0), 17, pathname, &type);

    switch (type)
    {
        case 2:
            sprintf(command_string, "Run %s -openat %d %d",pathname, openx, openy);
            error_trap(wimp_start_task(command_string, &settings_handle), 0);
            break;

        case 1:
            settings_handle = 0;
            sprintf(command_string, "Filer_Run %s",pathname);
            error_trap(_swix(OS_CLI, _IN(0), command_string), 0);
            break;
    }
}


/*-----------------------------------------------------------------------------------------------*/
/*                                          Event handlers                                       */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

static int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
    _kernel_oserror    err;

    strcpy(err.errmess, error_event->errmess);
    err.errnum=error_event->errnum;
    wimp_report_error(&err, 0, "Configure", 0, 0, 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * default_key_handler                                                       *
 *                                                                           *
 * Handler for key presses.                                                  *
 *---------------------------------------------------------------------------*/

static int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   int key_code = event->key_pressed.key_code;

   wimp_process_key(key_code);

   return 1;
}


/*---------------------------------------------------------------------------*
 * string_changed                                                            *
 *                                                                           *
 * Handle stringset changed events.                                          *
 *---------------------------------------------------------------------------*/

static int string_changed(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    int gadget = id_block->self_component;
    int selected;

    switch (gadget)
    {
        case SaverTypeStringSet:
            update_settings_icon();
            break;
            
        case MonitorTypeStringSet:
            error_trap(stringset_get_selected(1, main_window_id, MonitorTypeStringSet, &selected), 0);
            if (selected==0)
            {
                grey_gadget(main_window_id, ColoursStringSet);
                grey_gadget(main_window_id, ResolutionMenu);
                grey_gadget(main_window_id, ResolutionDisplay);
                menus_are_grey = 1;
            }
            else
            {
                if (menus_are_grey)
                {
                    ungrey_gadget(main_window_id, ColoursStringSet);
                    ungrey_gadget(main_window_id, ResolutionMenu);
                    ungrey_gadget(main_window_id, ResolutionDisplay);
                }            
                switch_monitor(selected-1);
            }
            break;
            
        case ColoursStringSet:
            error_trap(stringset_get_selected(1, main_window_id, ColoursStringSet, &selected), 0);
            switch_colour(selected);
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * menu_select                                                               *
 *                                                                           *
 * Handle menu selections.                                                   *
 *---------------------------------------------------------------------------*/

static int menu_select(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    char string[256];
    int  gadget = id_block->self_component;

    /* Update the displayfield to show the new choice */
    error_trap(menu_get_entry_text(0, res_menu_id, gadget, string, 256, 0), 0);
    error_trap(displayfield_set_value(0, main_window_id, ResolutionDisplay, string), 0);
    switch_resolution();
    error_trap(menu_set_tick(0, res_menu_id, currently_ticked, 0), 0);
    error_trap(menu_set_tick(0, res_menu_id, gadget, 1), 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * adjuster_clicked                                                          *
 *                                                                           *
 * Handle events caused by clicks on adjuster arrows.                        *
 *---------------------------------------------------------------------------*/

static int adjuster_clicked(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    AdjusterClickedEvent *block = (AdjusterClickedEvent*) event_block;
    int                   gadget = id_block->self_component;
    
    if ((gadget!=TimeAdjusterDown) && (gadget!=TimeAdjusterUp)) return 1;
    
    if (block->direction) blanktime++;
    else blanktime--;
    
    if (blanktime>7) blanktime = 7;
    if (blanktime<0) blanktime = 0;
    
    error_trap(displayfield_set_value(0, main_window_id, BlankDelayDisplay, blanktime_to_text[blanktime]), 0);
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * action_selected                                                           *
 *                                                                           *
 * Handler for when action buttons are clicked on.                           *
 *---------------------------------------------------------------------------*/

static int action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent*) event_block;
    int                        gadget = id_block->self_component;

    switch (gadget)
    {
        case SetButton:
            save_choices();
            if ((block->hdr.flags & 7)==0) program_exit(); /* Return pressed */
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;

        case CancelButton:
            read_choices();
            read_current_mode_settings();
            discard_screenmodes_instantiation();
            create_screenmodes_instantiation();
            if ((block->hdr.flags & 7)==0) program_exit();             /* Escape pressed */
            if (block->hdr.flags & 1)      create_resolutions_menu();  /* Right button */
            if (block->hdr.flags & 4)      program_exit();             /* Left button */
            break;
            
        case DefaultButton:
            set_default_choices();
            break;
            
        case SettingsOption:
            load_settings_app();
            break;
            
        case TryButton:
            try_it();
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * dpms_action_selected                                                      *
 *                                                                           *
 * Handler for when action buttons are clicked on in the dpms saver settings *
 * window.                                                                   *
 *---------------------------------------------------------------------------*/

static int dpms_action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent*) event_block;
    int                        gadget = id_block->self_component;

    switch(gadget)
    {
        case DPMSDefaultButton:
            error_trap(optionbutton_set_state(0, dpms_window_id, DPMSUnblankButton, 0), 0);
            break;
            
        case DPMSCancelButton:
            if ((block->hdr.flags & 7)==0)                  /* Escape pressed */
                error_trap(toolbox_hide_object(0, dpms_window_id), 0);
            if (block->hdr.flags & 1)                       /* Right button */
                error_trap(optionbutton_set_state(0, dpms_window_id, DPMSUnblankButton, unblank_on_writes), 0);
            if (block->hdr.flags & 4)                       /* Left button */
                error_trap(toolbox_hide_object(0, dpms_window_id), 0);
            break;
            
        case DPMSSetButton:
            error_trap(optionbutton_get_state(0, dpms_window_id, DPMSUnblankButton, &unblank_on_writes), 0);
            if (unblank_on_writes)
                _swix(OS_CLI, _IN(0), "Blanktime -W");
            else
                _swix(OS_CLI, _IN(0), "Blanktime -O");
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
static int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_reopen                                                            *
 *                                                                           *
 * Called when we receive a message from Configure telling us to reopen our  *
 * window.                                                                   *
 *---------------------------------------------------------------------------*/

static int message_reopen(WimpMessage *event, void *handler)
{
    error_trap(toolbox_show_object(0, main_window_id, 0, 0, 0, 0), 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_closedown                                                         *
 *                                                                           *
 * Handler for message_closedown, sent when a task exits. Check the exiting  *
 * task isn't a screensaver settings plug-in.                                *
 *---------------------------------------------------------------------------*/

static int message_closedown(WimpMessage *event, void *handler)
{
    if (event->hdr.sender==settings_handle) settings_handle = 0;
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * close_window                                                              *
 *                                                                           *
 * Called when user has clicked on close icon of window.                     *
 *---------------------------------------------------------------------------*/

static int close_window(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*-----------------------------------------------------------------------------------------------*/
/*                               Program startup & polling loop                                  */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * open_configure_window                                                     *
 *                                                                           *
 * Called to open the configure window on screen and register handlers.      *
 *---------------------------------------------------------------------------*/

static void open_configure_window(int at_x, int at_y)
{
    BBox bbox;
    int  screenx;
    int  screeny;
    int  buffer[2];

    /* Create window */
    error_trap(toolbox_create_object(0, "Window", &main_window_id), 1);
    error_trap(toolbox_create_object(0, "ResMenu", &res_menu_id), 1);
    error_trap(toolbox_create_object(0, DPMSString, &dpms_window_id), 1);
    error_trap(popup_set_menu(0, main_window_id, ResolutionMenu, res_menu_id), 1);

    read_choices();
    read_current_mode_settings();
    create_screenmodes_instantiation();
    create_resolutions_menu();
    update_monitor_displayfields();
    update_dpms_status();

    /* Register handlers */
    error_trap(event_register_toolbox_handler(-1,Toolbox_Error,toolbox_error,NULL) ,0);
    error_trap(event_register_wimp_handler(main_window_id, Wimp_ECloseWindow, close_window, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window_id, ActionButton_Selected, action_selected, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window_id, Adjuster_Clicked, adjuster_clicked, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window_id, StringSet_ValueChanged, string_changed, NULL), 0);
    error_trap(event_register_toolbox_handler(res_menu_id, Menu_Selection, menu_select, NULL), 0);
    error_trap(event_register_message_handler(Wimp_MTaskCloseDown, message_closedown, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL), 0);
    error_trap(event_register_toolbox_handler(dpms_window_id, ActionButton_Selected, dpms_action_selected, NULL), 0);

    /* Work out positioning (unless it was supplied in the command line) */
    if ((at_x==-1) && (at_y==-1))
    {
        error_trap(common_read_screensize(&screenx, &screeny), 0);
        error_trap(window_get_extent(0, main_window_id, &bbox), 0);
        at_y = screeny - ((screeny+bbox.ymin)/2);
        at_x = (screenx - bbox.xmax)/2;
    }

    /* Show the window */
    buffer[0] = at_x;
    buffer[1] = at_y;
    error_trap(toolbox_show_object(0, main_window_id, 2, buffer, 0, 0), 0);
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    static int mess_wanted[] = {Wimp_MQuit,
                                Wimp_MOpenConfigWindow,
                                Wimp_MTaskCloseDown,
                                0};
    static int tbox_wanted[] = {Toolbox_Error,
            	                ActionButton_Selected,
            	                StringSet_ValueChanged,
                                Adjuster_Clicked,
                                Menu_Selection,
                                0};
    int        task_handle;
                                
    error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                  "<ScreenConfig$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0) ,1);


    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_NullMask), 0);    
    messages_register(&messages_desc, messages_string);

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_message_handler(Wimp_MTaskCloseDown, message_closedown, NULL), 0);
    error_trap(event_register_message_handler(Wimp_MOpenConfigWindow, message_reopen, NULL), 0);

    check_scrsaver_choices_dir();

    return 1;
}
                                  

/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
    WimpPollBlock wpb;
    int           event_code;
    int           openat_x = -1;
    int           openat_y = -1;

    /* Have we been passed any co-ordinates to open at? */
    if (strcmp(argv[1], "-openat")==0)
    {
        openat_x = atoi(argv[2]);
        openat_y = atoi(argv[3]);
    }

    /* Do main initialisation */
    if (!main_initialise()) return 0;
    
    /* Open configure window */
    open_configure_window(openat_x, openat_y);

    /* Poll loop */
    while (TRUE)
    {
        error_trap(event_poll(&event_code, &wpb, NULL), 0);
    }
    
    return 0;
}

