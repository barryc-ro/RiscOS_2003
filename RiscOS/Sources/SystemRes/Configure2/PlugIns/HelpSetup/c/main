/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Main WIMP shell for Help configuration                           */
/* Author:  Richard Leggett                                                  */
/* History: 06-Jan-98: RML: Begun.                                           */
/*          13-Jan-98: RML: Updated after spec. review.                      */
/*          16-Feb-98: RML: Now broadcasts Message_HelpEnable when config.   */
/*                          options change.                                  */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "common.h"
#include "window.h"
#include "fontmenu.h"
#include "wimplib.h"
#include "defines.h"

/* Global variables */
static IdBlock    idb;
static MessagesFD messages_desc;
static int        main_window;
static int        fontmenu_id;
char              messages_string[255];


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

static void program_exit(void)
{
    exit(0);
}


/*---------------------------------------------------------------------------*
 * get_current_font                                                          *
 *                                                                           *
 * Find the currently selected font in the fontmenu.                         *
 *                                                                           *
 * In: pointer to buffer which can be used to get name.                      *
 *                                                                           *
 * Returns: pointer to start of font name string.                            *
 *---------------------------------------------------------------------------*/

static char* get_current_font(char* buffer, int size)
{
    char *start;
    char *end;
    int   length;

    /* fontmenu_get_font returns a font ID of the form /FTrinity.Medium/ELatin1 */
    /* We want the font name. */
    error_trap(fontmenu_get_font(0, fontmenu_id, buffer, size, &length), 0);
    if (buffer[0]==92) start = buffer + 2;    
    else start = buffer;
    end = strstr(start, "\\");
    if (end) *end=0;
    
    return start;  
}    


/*---------------------------------------------------------------------------*
 * save_choices                                                              *
 *                                                                           *
 * Read the choices from the window and output a command file.               *
 *---------------------------------------------------------------------------*/

static void save_choices(void)
{
    WimpMessage  event;
    FILE        *fp;
    char         string[256];
    char         buffer[200];
    int          type, state, delay, fontsize;

    /* Ensure choices directory exists */
    error_trap(_swix(OS_File, _INR(0,1)|_OUT(0), 17, ChoicesDir, &type), 0);
    if (type==0) error_trap(_swix(OS_CLI, _IN(0), "CDir "ChoicesDir), 0);
    
    /* Open choices file */
    fp=fopen(ConfigFile, "w");
    if (fp)
    {
        /* Write comment line */
        fputs("# Help configuration", fp);
        fputc(NewLine, fp);

        /* Write Font: config */
        sprintf(string, "%s:%s", FontConfig, get_current_font(buffer, 200));
        fputs(string, fp);
        fputc(NewLine, fp);

        /* Write Size: config */
        error_trap(numberrange_get_value(0, main_window, FontSizeNumber, &fontsize), 0);
        sprintf(string, "%s:%d", SizeConfig, fontsize);
        fputs(string, fp);
        fputc(NewLine, fp);

        /* Write Delay: config */
        error_trap(numberrange_get_value(0, main_window, DelayNumber, &delay), 0);
        sprintf(string, "%s:%d", DelayConfig, delay);
        fputs(string, fp);
        fputc(NewLine, fp);        

        /* Write Still distance: config */
        error_trap(numberrange_get_value(0, main_window, StillDistanceNumber, &delay), 0);
        sprintf(string, "%s:%d", StillConfig, delay);
        fputs(string, fp);
        fputc(NewLine, fp);        

        /* Write Hide common: config */
        error_trap(optionbutton_get_state(0, main_window, HideCommonOption, &state), 0);
        sprintf(string, "%s:%s", CommonConfig, state ? Yes:No);
        fputs(string, fp);
        fputc(NewLine, fp);
        
        /* Write Drop shadow: config */
        error_trap(optionbutton_get_state(0, main_window, DropShadowOption, &state), 0);
        sprintf(string, "%s:%s", ShadowConfig, state ? Yes:No);
        fputs(string, fp);
        fputc(NewLine, fp);
        
        /* Write Repeat message: config */
        error_trap(optionbutton_get_state(0, main_window, RepeatOption, &state), 0);
        sprintf(string, "%s:%s", RepeatConfig, state ? Yes:No);
        fputs(string, fp);
        fputc(NewLine, fp);

        fclose(fp);
    }

    /* Send a Message_HelpEnable so that any !Help running updates it's settings */
    event.hdr.size = 24;
    event.hdr.your_ref = 0;
    event.hdr.action_code = Wimp_MHelpEnable;
    event.data.words[0] = HelpEnable_ReadSettings;
    error_trap(wimp_send_message(Wimp_EUserMessage, &event, 0, 0, 0), 0);
}


/*---------------------------------------------------------------------------*
 * set_default_choices                                                       *
 *                                                                           *
 * Fill in the default choices in the dialogue box.                          *
 *---------------------------------------------------------------------------*/

static void set_default_choices(void)
{
    error_trap(fontmenu_set_font(0, fontmenu_id, DefaultFont), 0);
    error_trap(displayfield_set_value(0, main_window, FontDisplayField, DefaultFont), 0);
    error_trap(numberrange_set_value(0, main_window, DelayNumber, DefaultDelay), 0);
    error_trap(numberrange_set_value(0, main_window, FontSizeNumber, DefaultFontSize), 0);
    error_trap(numberrange_set_value(0, main_window, StillDistanceNumber, DefaultStillDistance), 0);
    error_trap(optionbutton_set_state(0, main_window, HideCommonOption, 0), 0);
    error_trap(optionbutton_set_state(0, main_window, DropShadowOption, 1), 0);
    error_trap(optionbutton_set_state(0, main_window, RepeatOption, 1), 0);
}


/*---------------------------------------------------------------------------*
 * read_options                                                              *
 *                                                                           *
 * Read the help config file.                                                *
 *---------------------------------------------------------------------------*/

static void read_options(void)
{
    FILE *fp;
    char *item;
    char *value;
    char  buffer[256];
    char  fontname[256];
    int   colon, fontsize, fh, delay, options, still_distance;
    int   more = 1;

    /* Setup default options */
    strcpy(fontname, DefaultFont);
    fontsize = DefaultFontsize;
    delay = DefaultDelay;
    options = Option_DropShadow;
    still_distance = -1;

    /* Open configuration file */
    fp = fopen(ConfigFile, "r");
    if (fp)
    {
        /* Found config file */
        options = 0;

        while (more)
        {
            /* Get the next line from the file */
            more = (int)fgets(buffer, 256, fp);
            if (more)
            {
                /* Check for a colon in this line, indicating it's a setting */
                colon = strstr(buffer, ":") - buffer;
                if (colon>0)
                {
                    /* Break the string into item (eg. 'Font') and value (eg. 'Homerton.Medium') */
                    buffer[colon] = 0;
                    item = buffer;
                    value = item + colon + 1;
                    value[strlen(value)-1] = 0;

                    if (strcmp(item, FontConfig)==0) strcpy(fontname, value);
                    else if (strcmp(item, SizeConfig)==0) fontsize = atoi(value);
                    else if (strcmp(item, DelayConfig)==0) delay = atoi(value);
                    else if (strcmp(item, StillConfig)==0) still_distance = atoi(value);
                    else if (strcmp(item, CommonConfig)==0 && strcmp(value, Yes)==0) options += Option_HideCommon;
                    else if (strcmp(item, ShadowConfig)==0 && strcmp(value, Yes)==0) options += Option_DropShadow;
                    else if (strcmp(item, RepeatConfig)==0 && strcmp(value, Yes)==0) options += Option_Repeat;
                }
            }
        }        
        fclose(fp);
    }

    /* Check font is available */
    if (_swix(Font_FindFont, _INR(1,5)|_OUT(0), fontname, 16*16, 16*16, 0, 0, &fh)) strcpy(fontname, DefaultFont);
    else _swix(Font_LoseFont, _IN(0), fh);

    /* Check bounds */
    if (delay<0 || delay>200) delay = DefaultDelay;
    if (fontsize<4 || fontsize>144) fontsize = DefaultFontsize;

    /* Tick and set things as appropriate */
    error_trap(fontmenu_set_font(0, fontmenu_id, fontname), 0);
    error_trap(displayfield_set_value(0, main_window, FontDisplayField, fontname), 0);
    error_trap(numberrange_set_value(0, main_window, DelayNumber, delay), 0);
    error_trap(numberrange_set_value(0, main_window, FontSizeNumber, fontsize), 0);
    error_trap(numberrange_set_value(0, main_window, StillDistanceNumber, still_distance), 0);
    error_trap(optionbutton_set_state(0, main_window, HideCommonOption,
                                      options & Option_HideCommon ? 1:0), 0);
    error_trap(optionbutton_set_state(0, main_window, RepeatOption,
                                      options & Option_Repeat ? 1:0), 0);
    error_trap(optionbutton_set_state(0, main_window, DropShadowOption,
                                      options & Option_DropShadow ? 1:0), 0);

}


/*-------------------------------------------------------------------------------------------*/
/*                                        Event handlers                                     */
/*-------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

static int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
    _kernel_oserror err;

    strcpy(err.errmess, error_event->errmess);
    err.errnum=error_event->errnum;
    wimp_report_error(&err, 0, "Configure", 0, 0, 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * default_key_handler                                                       *
 *                                                                           *
 * Handler for key presses.                                                  *
 *---------------------------------------------------------------------------*/

static int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   int key_code = event->key_pressed.key_code;

   wimp_process_key(key_code);

   return 1;
}


/*---------------------------------------------------------------------------*
 * font_selected                                                             *
 *                                                                           *
 * User has selected a new font from the menu. Update displayfield.          *
 *---------------------------------------------------------------------------*/

static int font_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    FontMenuSelectionEvent *event = (FontMenuSelectionEvent*)event_block;
    char* start;
    char* end;
    
    /* Turn font ID into a font string - there must be a simpler way? */
    start = event->font_id + 2;
    end = strstr(start, "\\");
    if (end) *end=0;
    
    /* Update displayfield */    
    error_trap(displayfield_set_value(0, main_window, FontDisplayField, start), 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * action_selected                                                           *
 *                                                                           *
 * Handler for when action buttons are clicked on.                           *
 *---------------------------------------------------------------------------*/

static int action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent*) event_block;
    int icon = id_block->self_component;

    switch (icon)
    {
        case SetButton:
            save_choices();
            if ((block->hdr.flags & 7)==0) program_exit(); /* Return pressed */
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;

        case CancelButton:
            if ((block->hdr.flags & 7)==0) program_exit(); /* Escape pressed */
            if (block->hdr.flags & 1)                      /* Right button */
            {
                 read_options();      
            }
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;
            
        case DefaultButton:
            set_default_choices();
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
static int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_reopen                                                            *
 *                                                                           *
 * Called when we receive a message from Configure telling us to reopen our  *
 * window.                                                                   *
 *---------------------------------------------------------------------------*/

static int message_reopen(WimpMessage *event, void *handler)
{
    error_trap(toolbox_show_object(0, main_window, 0, 0, 0, 0), 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * close_window                                                              *
 *                                                                           *
 * Called when user has clicked on close icon of window.                     *
 *---------------------------------------------------------------------------*/

static int close_window(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*-------------------------------------------------------------------------------------------*/
/*                             Program startup & polling loop                                */
/*-------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * open_configure_window                                                     *
 *                                                                           *
 * Called to open the configure window on screen and register handlers.      *
 *---------------------------------------------------------------------------*/

static void open_configure_window(int at_x, int at_y)
{
    BBox  bbox;
    int   screenx, screeny;
    int   buffer[2];

    /* Create window */
    error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    error_trap(toolbox_create_object(0, "FontMenu", &fontmenu_id), 1);
    error_trap(popup_set_menu(0, main_window, FontPopUpButton, fontmenu_id), 1);

    read_options();

    /* Register handlers for the configure window */
    error_trap(event_register_toolbox_handler(-1,Toolbox_Error,toolbox_error,NULL) ,0);
    error_trap(event_register_wimp_handler(main_window, Wimp_ECloseWindow, close_window, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window, ActionButton_Selected, action_selected, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL), 0);
    error_trap(event_register_toolbox_handler(fontmenu_id, FontMenu_Selection, font_selected, NULL), 0);

    /* Work out positioning (unless it was supplied in the command line) */
    if ((at_x==-1) && (at_y==-1))
    {
        error_trap(common_read_screensize(&screenx, &screeny), 0);
        error_trap(window_get_extent(0, main_window, &bbox), 0);
        at_y = screeny - ((screeny+bbox.ymin)/2);
        at_x = (screenx - bbox.xmax)/2;
    }

    /* Show the window */
    buffer[0] = at_x;
    buffer[1] = at_y;
    error_trap(toolbox_show_object(0, main_window, 2, buffer, 0, 0), 0);
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    static int mess_wanted[] = {Wimp_MQuit,
                                Wimp_MOpenConfigWindow,
                                0};
    static int tbox_wanted[] = {Toolbox_Error,
        			ActionButton_Selected,
        			FontMenu_Selection,
                                0};
    int        task_handle;
                                
    error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                  "<HelpConfig$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0) ,1);


    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Mask_NoNullEvents), 0);    
    messages_register(&messages_desc, messages_string);

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_message_handler(Wimp_MOpenConfigWindow, message_reopen, NULL), 0);

    return 1;
}
                                  

/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
    WimpPollBlock wpb;
    int           event_code;
    int           openat_x=-1;
    int           openat_y=-1;

    /* Have we been passed any co-ordinates to open at? */
    if (strcmp(argv[1], "-openat")==0)
    {
        openat_x=atoi(argv[2]);
        openat_y=atoi(argv[3]);
    }

    /* Do main initialisation */
    if (!main_initialise()) return 0;
    
    /* Open configure window */
    open_configure_window(openat_x, openat_y);

    /* Poll loop */
    while (TRUE)
    {
        error_trap(event_poll(&event_code, &wpb, NULL), 0);
    }
    
    return 0;
}         

