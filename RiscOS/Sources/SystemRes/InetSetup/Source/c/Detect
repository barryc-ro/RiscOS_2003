
/* File:    detect.c
 * Purpose: Detection of installed expansion cards and the CMOS IP address
 * Author:  K Bracey
 * History: 07-Nov-06: KJB: fixed for different cards with same driver
 *                          removed use of podule_read_info for RISC OS 3.1
 *
 *          04-Aug-97: DTAB: added kludgy support for PPP.  PPP is chosen
 *                           in preference to Slip if both are available
 *
 *          08-Sep-97: DTAB: added detection of additional network cards
 *                           and added additional comments
 *          15-Dec-97: RCE   corrected some errors in the card type table.
 *          09-Jan-97: RCE   corrected entries for Castle Technology cards.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"

#include "osbyte.h"
#include "podule.h"

#include "ModUtils.h"
#include "Load.h"
#include "Main.h"

static int count[12];

static struct
{
    const int type;          /* Podule product type */
    const char *description; /* Token for description lookup in messages file */
    const char *unit;
    const char *modules;     /* Required modules for this expansion card */
    int *const count;
}
known_types[] =
{
  /*    type  desc    unit                      modules      count */

    { 0x0003, "et",   "et", ":Ether1:4.00:Ether1",       &count[0]  }, /* Ethernet                                     */
/*    { 0x0031, "ev",   "ev", ":EtherV:0.00:EtherV",       &count[1]  },*/ /* WildAtoD?                                    */
    { 0x0061, "en",   "en", ":Ether2:3.55:Ether2",       &count[2]  }, /* Ethernet2                                    */
    { 0x00a4, "ea",   "ea", ":Ether3:4.23:Ether3-16",    &count[3]  }, /* AtomwideEtherA                               */
    { 0x00bd, "eh2" , "eh", ":EtherH:4.16:EtherH8",      &count[5]  }, /* EtherLan200           ICubed                 */
    { 0x00c3, "er",   "er", ":EtherR:2.00:EtherR",       &count[4]  }, /* RISCDevEthernet                              */
    { 0x00cf, "eh1" , "eh", ":EtherH:4.16:EtherH8",      &count[5]  }, /* EtherLan100           ICubed                 */
    { 0x00d4, "eh5",  "eh", ":EtherH:4.18:EtherH16",     &count[5]  }, /* ICubedEtherLan500     expansion card         */
    { 0x00d8, "em"  , "em", ":EtherM:0.39:EtherM",       &count[10] }, /* AtomwideEtherM                               */
    { 0x00e4, "eb",   "eb", ":EtherB:4.23:EtherB",       &count[6]  }, /* ANTEtherB                                    */
    { 0x00e8, "cte8", "ez", ":CTNetDrvr:0.50:CTNetDrvr", &count[7]  }, /* CastleTechIDE         Castle technology      */
    { 0x00e9, "cte9", "ez", ":CTNetDrvr:0.50:CTNetDrvr", &count[7]  }, /* CastleTechEthernet                           */
    { 0x00ec, "eh6",  "eh", ":EtherH:4.18:EtherH16",     &count[5]  }, /* ICubedEthernetMedusa  NIC                    */
    { 0x00f4, "ctf4", "ez", ":CTNetDrvr:0.50:CTNetDrvr", &count[7]  }, /* CastleTechEtherSCSIDS Castle technology      */
    { 0x00f5, "ctf5", "ez", ":CTNetDrvr:0.50:CTNetDrvr", &count[7]  }, /* CastleTechSCSI        Castle technology      */
    { 0x011c, "eh1a", "eh", ":EtherH:4.16:EtherH8",      &count[5]  }, /* EtherLanA100          Acorn                  */
    { 0x011d, "eh2a", "eh", ":EtherH:4.16:EtherH8",      &count[5]  }, /* EtherLanA200          Acorn                  */
    { 0x011e, "eh6",  "eh", ":EtherH:4.18:EtherH16",     &count[5]  }, /* EtherLanA600          NIC (Acorn)            */
/*  { 0x011e, "eh6a", "eh", ":EtherH:4.18:EtherH16",     &count[5]  },*/ /* NIC (Acorn) same product type as eh6         */
    { 0x011f, "eh5a", "eh", ":EtherH:4.18:EtherH16",     &count[5]  }, /* EtherLanA500          expansion card (Acorn) */
    { 0x012e, "eh7a", "eh", ":EtherH:4.18:EtherH16",     &count[5]  }, /* EtherLanA700          Acorn                  */
    { 0x012f, "eh7" , "eh", ":EtherH:4.18:EtherH16",     &count[5]  }, /* EtherLan700           ICubed                 */
    { 0x0139, "ei"  , "ei", ":EtherI:2.00:EtherI",       &count[11] }, /* NC EtherI                                    */
/*  { 0xffff, "eo",   "eo", ":EtherO:4.00:EtherO",       &count[8]  },*/ /* Unknown podule id                            */
/*  { 0xffff, "ea8",  "ea", ":Ether3:4.20:Ether3-8",     &count[9]  }, *//* Unknown podule id                            */
    { 0, 0 },
};

/* Address stored is CMOS108.CMOS109.CMOS110.CMOS0 */

#define osbyte_CONFIGURE_IPADDRESS0 108
#define osbyte_CONFIGURE_IPADDRESS1 109
#define osbyte_CONFIGURE_IPADDRESS2 110
#define osbyte_CONFIGURE_IPADDRESS3 osbyte_CONFIGURE_STATION

/*************************************************/
/* ReadCMOSIP()                                  */
/*                                               */
/* Reads the IP address stored in CMOS ram and   */
/* returns it as an unsigned integer             */
/*                                               */
/* Returns: The IP address read                  */
/*************************************************/
static unsigned int ReadCMOSIP(void)
{
  unsigned int b0, b1, b2, b3;

  b0=readCMOS(osbyte_CONFIGURE_IPADDRESS0);
  b1=readCMOS(osbyte_CONFIGURE_IPADDRESS1);
  b2=readCMOS(osbyte_CONFIGURE_IPADDRESS2);
  b3=readCMOS(osbyte_CONFIGURE_IPADDRESS3);

  if (b0==0 && b1==0 && b2==0)
  {
    if (b3==0)
    {
      return 0;
    }
    else
    {
      /* Call it 10.0.0.x, an IANA assigned private block */
      return 10 | (b3 << 24);
    }
  }
  return b0 | (b1 << 8) | (b2 << 16) | (b3 << 24);
}

/*************************************************/
/* ScanInterfaces()                              */
/*                                               */
/* Scans for a variety of interfaces and sets up */
/* appropriate system variables for each found.  */
/* After this the function sets up structures    */
/* for each detected interface                   */
/*************************************************/
os_error *ScanInterfaces(void)
{
    podule_section slot;
    podule_header header;
    int type, i;
    char *p, *p2;
    char buffer[256];

    memset(count, 0, sizeof count);

    /* Scan podule bus */
    for (slot = 0; slot <= 8; slot++)
    {
      if (xpodule_read_header(&header, slot)) continue; /* No card present */

      if ((header.b[0] & 0x78) != 0) continue;          /* Simple ID only */

      /* Construct podule type from header */
      type = header.b[3] + (header.b[4] << 8);

      /* Scan through known types for a match */
      for (i = 0; known_types[i].type; i++)
      {
        /* Is type regognised? */
        if (type == known_types[i].type)
        {
          char buffer[64];
          char buffer2[64];

          if (slot < 8)
          {
            /* podule number is less than 8 so it is a normal podule */
            sprintf(buffer2, msgs_lookup("Slot"), slot);
            sprintf(buffer, "InetSetup$Driver$%s", buffer2);
          }
          else
          {
            /* podule number is 8 so it is a NIC */
            sprintf(buffer, "InetSetup$Driver$%s", msgs_lookup("NIC"));
          }

          if (!getenv(buffer))
          {
            sprintf(buffer2, "%s:%s%d%s", msgs_lookup(known_types[i].description),
            known_types[i].unit,
            (*known_types[i].count)++,
            known_types[i].modules);
            _kernel_setenv(buffer, buffer2);
          }
          break;
        }
      }
    }

    /* Check for existance of Econet */
    if (RMLoaded("Econet"))
    {
      _kernel_setenv("InetSetup$Driver$Econet", "Econet:ec0:EconetA:0.00:EconetA");
      HaveEconet = TRUE;
    }

    /* Has InetSetup$Driver$Serial already been setup? */
    if (!getenv("InetSetup$Driver$Serial"))
    {
      /* Does PPP driver exist in directory */
      if (Exists("System:Modules.Network.PPP"))
      {
        /* Name it as InetSetup$Driver$Serial device */
        _kernel_setenv("InetSetup$Driver$Serial", "PPP:ppp0:PPP:1.13:PPP:P");
      }
      else
      {
        /* No PPP, then look for Slip after all it's better than nothing */
        if (Exists("System:Modules.Network.Slip"))
        {
          /* stick it in as InetSetup$Driver$Serial device */
          _kernel_setenv("InetSetup$Driver$Serial", "SLIP:sl0:Slip:2.07:Slip:P");
        }
      }
    }

    CMOSIP=ReadCMOSIP();

    /* Right, now to examine those variables, and any other ones that may have been set */

    p = 0;

    for (;;)
    {
      int len;
      if (xos_read_var_val("InetSetup$Driver$*", buffer, sizeof buffer, (int) p, 3, &len, (int *) &p, 0))
      {
        break;
      }

      buffer[len]='\0';

      strcpy(interface_location[interfaces], p + sizeof "InetSetup$Driver$" - 1);
      for (p2 = interface_location[interfaces]; *p2; p2++)
      {
        if (*p2 == '_') *p2 = ' ';
      }

      strcpy(interface_name[interfaces], strtok(buffer, ":"));
      strcpy(interface_unit[interfaces], strtok(0, ":"));
      if ((p2 = strtok(0, ":")) != 0)
      {
        strcpy(interface_module[interfaces], p2);
        interface_version[interfaces] = VersionToInt(strtok(0, ":"));
        if ((p2 = strtok(0, ":")) != 0)
        {
          strcpy(interface_filename[interfaces], p2);
          if ((p2 = strtok(0, ":")) != 0)
          {
            if (strchr(p2, 'P'))
            {
              /* Local and remote IP addresses not needed for PPP */
              if (strcmp(interface_name[interfaces], "PPP") == 0)
              {
                interface_is_pp[interfaces] = 2;
              }
              else
              {
                /* Typical PP devices have local and remote IP addresses */
                interface_is_pp[interfaces] = 1;
              }
            }
          }
        }
      }
      interfaces++;
    }

    return NULL;
}
