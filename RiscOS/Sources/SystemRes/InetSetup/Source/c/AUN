#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "osbyte.h"
#include "econet.h"
#include "hourglass.h"
#include "netfs.h"
#include "netprint.h"
#include "displayfield.h"
#include "stringset.h"
#include "event.h"
#include "writablefield.h"

#include "AUN.h"
#include "ModUtils.h"
#include "Gadgets.h"
#include "Main.h"

static bool setshow(bits event_code, toolbox_action *event,
                    toolbox_block *id, void *handle)
{
    int context = 0;
    netfs_file_server server;
    int totallen=0;
    char *buffer, *p;
    int count, i;
    os_error *e;

    NOT_USED(event_code); NOT_USED(event); NOT_USED(handle);

    if (id->this_cmp == aun_FileServer)
    {
        xhourglass_on();
        for (;;)
        {
            e=xnetfs_enumerate_fs_list(context, &server, sizeof server, 1, &context, &i);
            if (e)
            {
                xhourglass_off();
            	return TRUE;
            }
            if (i==1)
            	totallen+=17;
            if (context == -1)
                break;
        }

        buffer=malloc(totallen);
        if (buffer)
        {
            context=0;
            p=buffer;
            *p='\0';
            for (;;)
            {
                context=netfs_enumerate_fs_list(context, &server, sizeof server, 1, &i);
                if (i==1)
                {
        	    sprintf(p, "%s,%n", server.disc_name, &i);
        	    p += i;
                }
                if (context == -1)
            	    break;
       	    }
       	    if (p>buffer)
            	*(p-1)='\0';

            stringset_set_available(0, id->this_obj, aun_FileServer, buffer);
            free(buffer);
        }
        netfs_enable_cache();
        xhourglass_off();
        return TRUE;
    }
    else if (id->this_cmp == aun_PrintServer)
    {
        buffer=malloc(8192);
        if (buffer)
        {
            e=xnetprintlistservers_name((netprint_name_entry *)buffer, 8192, 300, &count, 0);
            if (e==0)
            {
            	for (i = 0; i < count - 1; i++)
                    buffer[strlen(buffer)]=',';
            	stringset_set_available(0, id->this_obj, aun_PrintServer, buffer);
            }
            free(buffer);
        }
        return TRUE;
    }
    return FALSE;
}

void AUNFaff(toolbox_o o)
{
    char buffer[64];
    os_station_number sn = { 0 }; // important to zero this (see next line)

    if (xeconet_read_local_station_and_net((byte *)&sn.station, (byte *)&sn.net) == 0)
    	sprintf(buffer, "%d.%d", sn.net, sn.station);
    else
        sprintf(buffer, "%d", readCMOS(osbyte_CONFIGURE_STATION));

    displayfield_set_value(0, o, aun_ThisStation, buffer);

    event_register_toolbox_handler(o, action_STRING_SET_ABOUT_TO_BE_SHOWN, setshow, 0);

    sn.station=readCMOS(osbyte_CONFIGURE_FS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_FS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_FS_NAME0);
        for (i = osbyte_CONFIGURE_FS_NAME1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */
    }
    stringsetsetselected_string(0, o, aun_FileServer, buffer);

    sn.station=readCMOS(osbyte_CONFIGURE_PS_STATION);

    if (sn.station != 0)
    {
        sn.net = readCMOS(osbyte_CONFIGURE_PS_NET);
        sprintf(buffer, "%d.%d", sn.net, sn.station);
    }
    else
    {
        char *p=buffer;
        int i;
        *p++ = readCMOS(osbyte_CONFIGURE_PS_NAME0);
        for (i = osbyte_CONFIGURE_PS_NAME1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
            *p++ = readCMOS(i);
        *p='\0'; /* Just in case */
    }
    stringsetsetselected_string(0, o, aun_PrintServer, buffer);
}

void UpdateAUNCMOS(void)
{
    char FS[32] = {0}, PS[32] = {0};
    os_station_number sn;
    os_error *e;
    char *p;
    int i;
    extern toolbox_o AUNObject;

    stringsetgetselected_string(0, AUNObject, aun_FileServer, FS, sizeof FS);
    stringsetgetselected_string(0, AUNObject, aun_PrintServer, PS, sizeof PS);

    e=xeconet_read_station_number(FS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_FS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_FS_NAME0, FS[0]);
    	for (i = osbyte_CONFIGURE_FS_NAME1, p = FS+1; i <= osbyte_CONFIGURE_FS_NAME15; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_FS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_FS_NET, sn.net >= 0 ? sn.net : 0);
    }

    e=xeconet_read_station_number(PS, 0, &sn.station, &sn.net);
    if (e || sn.station == -1)
    {
        if (e->errnum != error_BAD_NUMB && e->errnum != error_NO_SUCH_SWI)
        {
            report_error(e);
            return;
        }
    	writeCMOS(osbyte_CONFIGURE_PS_STATION, 0);
    	writeCMOS(osbyte_CONFIGURE_PS_NAME0, PS[0]);
    	for (i = osbyte_CONFIGURE_PS_NAME1, p = PS+1; i <= osbyte_CONFIGURE_PS_NAME5; i++)
    	    writeCMOS(i, *p++);
    }
    else
    {
        writeCMOS(osbyte_CONFIGURE_PS_STATION, sn.station);
        writeCMOS(osbyte_CONFIGURE_PS_NET, sn.net >= 0 ? sn.net : 0);
    }

    AUNFaff(AUNObject);
}
