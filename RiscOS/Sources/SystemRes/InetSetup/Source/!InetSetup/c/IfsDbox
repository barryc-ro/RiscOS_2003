#include <string.h>
#include <stdio.h>

#include "window.h"
#include "gadget.h"
#include "label.h"
#include "optionbutton.h"
#include "actionbutton.h"
#include "writablefield.h"
#include "radiobutton.h"

#include "event.h"
#include "Load.h"
#include "Gadgets.h"
#include "IfsDbox.h"
#include "Main.h"
#include "ModUtils.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "arpa/inet.h"

extern toolbox_o InterfacesObject;
toolbox_o interface_object[16];
toolbox_c interface_addrtype[16];

static void FillInterfaceDbox(toolbox_o, int);
static bool ifs_enable_handler(bits, toolbox_action *, toolbox_block *, void *);
static bool ifs_close_handler(bits, toolbox_action *, toolbox_block *, void *);
//static bool ifs_show_handler(bits, toolbox_action *, toolbox_block *, void *);
static bool if_button_handler(bits, toolbox_action *, toolbox_block *, void *);
static bool if_option_handler(bits, toolbox_action *, toolbox_block *, void *);
static bool if_action_handler(bits, toolbox_action *, toolbox_block *, void *);
static bool default_netmask_handler(bits, toolbox_action *, toolbox_block *, void *);

/*
 * Two possible styles of Interfaces dbox:
 *
 * 1)     Serial [       SLIP      ] []       { The original and still the worst! }
 *           NIC [ Beebug Ethernet ] []
 *
 * 2)     Serial [] SLIP            [ Configure... ]    { Somewhat more intuitive }
 *           NIC [] Beebug Ethernet [ Configure... ]
 */
#define IfsStyle 2

void MakeIfsDbox(toolbox_block *id)
{
    int i, w;
    int label_width = 80, close_width;
    #if IfsStyle == 1
    int button_width = 320;
    #elif IfsStyle == 2
    int button_width = 0, config_width;
    #endif
    os_box box;
    toolbox_resource_file_object *obj;
    window_object *win;
    toolbox_position pos;
    static gadget_OBJECT(4) g;

    InterfacesObject = toolbox_create_object(0, (toolbox_id) "Interfaces");

    for (i=0; i < interfaces; i++)
    {
        // RISC OS 3.5 SWI
        w = wimptextop_string_width(interface_location[i], 0);
        if (w > label_width) label_width = w;

        w = wimptextop_string_width(interface_name[i], 0);
        if (w > button_width) button_width = w;
    }

    #if IfsStyle == 1
    label_width += 12;
    button_width += 32;
    #elif IfsStyle == 2
    label_width += 12;
    button_width += 24 + 44;
    config_width = wimptextop_string_width(msgs_lookup("Conf"), 0) + 32;
    #endif

    gadget_get_bbox(0, InterfacesObject, ifs_Close, &box);
    close_width = box.x1 - box.x0;

    box.y1 = -8 - (52+8) * interfaces - 8;
    box.y0 = box.y1 - 68;
    #if IfsStyle == 1
    box.x1 = 12 + label_width + 8 + button_width + 8 + 44;
    #elif IfsStyle == 2
    box.x1 = 12 + label_width + 8 + button_width + 8 + config_width;
    #endif
    box.x0 = box.x1 - close_width;

    gadget_move_gadget(0, InterfacesObject, ifs_Close, &box);

    gadget_get_bbox(0, InterfacesObject, ifs_Logo, &box);
    close_width = box.x1 - box.x0;

    box.y1 = -8 - (52+8) * interfaces - 8;
    box.y0 = box.y1 - 68;

    gadget_move_gadget(0, InterfacesObject, ifs_Logo, &box);

    for (i = 0; i < interfaces; i++)
    {
        int have_driver;
        char buffer[256];

        sprintf(buffer, "System:Modules.Network.%s", interface_filename[i]);
        have_driver = RMFind(interface_module[i], buffer, interface_version[i]);

        g.flags = label_NO_BOX | label_RJUSTIFIED;
        if (!have_driver)
            g.flags |= gadget_FADED;
        g.class_no = class_LABEL;
        g.size = 0;
        g.bbox.x0 = 12;
        g.bbox.x1 = 12 + label_width;
        g.bbox.y1 = -8 - (52+8) * i;
        g.bbox.y0 = g.bbox.y1 - 52;
        g.cmp = (i << 8) + 1;
        g.help_message = 0;
        g.help_limit = 0;
        ((label_gadget *) g.gadget)->label = interface_location[i];
        window_add_gadget(0, InterfacesObject, (gadget_object *) &g);

        g.flags = actionbutton_IS_LOCAL;
        if (interface_address[i][0] == '\0' && interface_addrtype[i] == 0 || !have_driver)
    	    g.flags |= gadget_FADED;
        g.class_no = class_ACTION_BUTTON;
        g.size = 0;
    	#if IfsStyle == 1
        g.bbox.x0 = 12 + label_width + 8;
        g.bbox.x1 = g.bbox.x0 + button_width;
    	#elif IfsStyle == 2
    	g.bbox.x0 = 12 + label_width + 8 + button_width + 8;
        g.bbox.x1 = g.bbox.x0 + config_width;
    	#endif
        g.bbox.y1 = -8 - (52+8) * i;
        g.bbox.y0 = g.bbox.y1 - 52;
        g.cmp = (i << 8) + 2;
        sprintf(buffer, msgs_lookup("IfsHelp1"), interface_name[i]);
        g.help_message = buffer;
        g.help_limit = strlen(buffer)+1;
        #if IfsStyle == 1
        ((actionbutton_gadget *) g.gadget)->text = interface_name[i];
        ((actionbutton_gadget *) g.gadget)->text_limit = strlen(interface_name[i])+1;
        #elif IfsStyle == 2
        ((actionbutton_gadget *) g.gadget)->text = msgs_lookup("Conf");
        ((actionbutton_gadget *) g.gadget)->text_limit =
          strlen(((actionbutton_gadget *) g.gadget)->text) + 1;
        #endif
        ((actionbutton_gadget *) g.gadget)->click_show = 0;
        ((actionbutton_gadget *) g.gadget)->action = 0;
        window_add_gadget(0, InterfacesObject, (gadget_object *) &g);

        interface_object[i] = toolbox_create_object(0, (toolbox_id)
                                (interface_is_pp[i] ? "InterfacePP" : "Interface"));

        actionbutton_set_click_show(0, InterfacesObject, (i << 8) + 2,
                                                         interface_object[i], 0);

        g.flags = 1; /* Generate events */
        if (!have_driver)
            g.flags |= gadget_FADED;
        else if (Set(interface_address[i]) || interface_addrtype[i])
            g.flags |= 4; /* Selected */
        g.class_no = class_OPTION_BUTTON;
        g.size = 0;
        #if IfsStyle == 1
        g.bbox.x0 = g.bbox.x1 + 8;
        g.bbox.x1 = g.bbox.x0 + 44;
        #elif IfsStyle == 2
        g.bbox.x0 = 12 + label_width + 8;
        g.bbox.x1 = g.bbox.x0 + button_width;
        #endif
        g.bbox.y1 = -8 - (52+8) * i - 4;
        g.bbox.y0 = g.bbox.y1 - 44;
        g.cmp = (i << 8) + 3;
        g.help_message = msgs_lookup("IfsHelp2");
        g.help_limit = strlen(g.help_message)+1;
        #if IfsStyle == 1
        ((optionbutton_gadget *) g.gadget)->label = 0;
        ((optionbutton_gadget *) g.gadget)->label_limit = 0;
        #elif IfsStyle == 2
        ((optionbutton_gadget *) g.gadget)->label = interface_name[i];
        ((optionbutton_gadget *) g.gadget)->label_limit = strlen(interface_name[i]) + 1;
        #endif
        ((optionbutton_gadget *) g.gadget)->action = 0;
        window_add_gadget(0, InterfacesObject, (gadget_object *) &g);

        FillInterfaceDbox(interface_object[i], i);
    	event_register_toolbox_handler(interface_object[i],
    	                               action_RADIO_BUTTON_STATE_CHANGED,
                                       if_button_handler, (void *) i);
    	event_register_toolbox_handler(interface_object[i],
    	                               action_OPTION_BUTTON_STATE_CHANGED,
                                       if_option_handler, (void *) i);
    	event_register_toolbox_handler(interface_object[i],
    	                               action_ACTION_BUTTON_SELECTED,
                                       if_action_handler, (void *) i);
    }

    obj = (toolbox_resource_file_object *) toolbox_template_look_up(0, "Interfaces");
    win = (window_object *) obj->object;

    pos.full.visible.x0 = win->window.visible.x0;
    #if IfsStyle == 1
    pos.full.visible.x1 = pos.full.visible.x0 + 12 + label_width + 8 + button_width + 8 + 44 + 12;
    #elif IfsStyle == 2
    pos.full.visible.x1 = pos.full.visible.x0 + 12 + label_width + 8 + button_width + 8 + config_width + 12;
    #endif
    pos.full.visible.y1 = win->window.visible.y1;
    pos.full.visible.y0 = pos.full.visible.y1 - 8 - (52+8) * interfaces - 8 - 68 - 12;
    pos.full.xscroll = win->window.xscroll;
    pos.full.yscroll = win->window.yscroll;
    pos.full.next = wimp_TOP;

    event_register_toolbox_handler(InterfacesObject,
    	    	    	    	   action_OPTION_BUTTON_STATE_CHANGED,
    	    	    	    	   ifs_enable_handler, 0);

    event_register_toolbox_handler(InterfacesObject,
    	    	    	    	   action_WINDOW_DIALOGUE_COMPLETED,
    	    	    	    	   ifs_close_handler, 0);

    event_register_toolbox_handler(event_ANY,
    	    	    	    	   action_DefaultNetmask,
    	    	    	    	   default_netmask_handler, 0);

    /*event_register_toolbox_handler(InterfacesObject,
    	    	    	    	   action_WINDOW_ABOUT_TO_BE_SHOWN,
    	    	    	    	   ifs_show_handler, 0);*/

    if (id)
    	toolbox_show_object(0, InterfacesObject, toolbox_POSITION_FULL, &pos,
                            id->this_obj, id->this_cmp);
}

static void FillInterfaceDbox(toolbox_o o, int i)
{
    char buffer[128];

    sprintf(buffer, "%s: %s", interface_location[i], interface_name[i]);
    window_set_title(0, o, buffer);
    if (interface_addrtype[i] == if_FromHostname)
        /* Because host name might have been changed... */
        writablefield_set_value(0, o, if_Address, HostName);
    else
        writablefield_set_value(0, o, if_Address, interface_address[i]);
    writablefield_set_value(0, o, if_Netmask, interface_netmask[i]);
    if (interface_is_pp[i])
        writablefield_set_value(0, o, if_LinkAddr, interface_linkaddr[i]);
    optionbutton_set_state(0, o, if_Primary, primary_interface == i);
    if (interface_addrtype[i] == if_BOOTP || interface_addrtype[i] == if_RevARP)
    {
        gadget_set_flags(0, o, if_ICMP, 0);
        writablefield_set_value(0, o, if_Address,
          msgs_lookup(interface_addrtype[i] == if_BOOTP ? "BOOTP" : "RevARP"));
    }

    if (interface_addrtype[i] == 0)
    	interface_addrtype[i] = if_Manual;

    radiobutton_set_state(0, o, interface_addrtype[i], TRUE);

    if (!radiobutton_get_state(0, o, if_Manual, 0))
    	gadget_set_flags(0, o, if_Address, gadget_FADED);

    if (!interface_is_pp[i])
        gadget_set_flags(0, o, if_FromCMOS, CMOSIP ? 0 : gadget_FADED);

    if (!interface_is_pp[i] && !Exists("Inet:bin.IfRConfig"))
    {
        gadget_set_flags(0, o, if_RevARP, gadget_FADED);
        gadget_set_flags(0, o, if_BOOTP, gadget_FADED);
    }

    if (strcmp(interface_netmask[i], "zzzz") == 0)
    {
        strcpy(interface_netmask[i], "default");
        writablefield_set_value(0, o, if_Netmask, msgs_lookup("ICMPReq"));
        gadget_set_flags(0, o, if_Netmask, gadget_FADED);
        if (!interface_is_pp[i])
            optionbutton_set_state(0, o, if_ICMP, TRUE);
        window_set_default_focus(0, o, (toolbox_c) -2);
    }

    if (strcmp(interface_unit[i], "ec0") == 0)
        gadget_set_flags(0, o, if_Primary, gadget_FADED);
    else if (interfaces == 1)
    {
        gadget_set_flags(0, o, if_Primary, gadget_FADED);
    	optionbutton_set_state(0, o, if_Primary, TRUE);
    }
}

#if 0
static bool ifs_show_handler(bits event_code, toolbox_action *event,
                             toolbox_block *id, void *handle)
{
    int i;

    /* Window module bug - we can't seem to set the flags above */
    for (i = 0; i < interfaces; i++)
    	if (interface_address[i][0] == '\0')
    	    gadget_set_flags(0, InterfacesObject, (i << 8) + 2, gadget_FADED);
    	else
    	    gadget_set_flags(0, InterfacesObject, (i << 8) + 2, 0);

    return TRUE;
}
#endif

static bool ifs_close_handler(bits event_code, toolbox_action *event,
                               toolbox_block *id, void *handle)
{
    int i;

    for (i = 0; i < interfaces; i++)
    	toolbox_hide_object(0, interface_object[i]);

    return FALSE;
}

static bool ifs_enable_handler(bits event_code, toolbox_action *event,
                               toolbox_block *id, void *handle)
{
    optionbutton_action_state_changed *optevent =
                     (optionbutton_action_state_changed *) &event->data;

    gadget_set_flags(0, id->this_obj, id->this_cmp - 1, optevent->on ? 0 : gadget_FADED);
    if (!optevent->on)
    	toolbox_hide_object(0, interface_object[id->this_cmp >> 8]);

    return TRUE;
}

static bool if_action_handler(bits event_code, toolbox_action *event,
                              toolbox_block *id, void *handle)
{
    int i = (int) handle;

    if (event->flags & actionbutton_SELECTED_DEFAULT)
    {
        writablefield_get_value(0, interface_object[i], if_Address,
                                interface_address[i], sizeof interface_address[i]);
        writablefield_get_value(0, interface_object[i], if_Netmask,
                                interface_netmask[i], sizeof interface_netmask[i]);
        if (interface_is_pp[i])
            writablefield_get_value(0, interface_object[i], if_LinkAddr,
                                    interface_linkaddr[i], sizeof interface_linkaddr[i]);
        if (optionbutton_get_state(0, interface_object[i], if_Primary))
            primary_interface = i;
        else if (primary_interface == i)
            primary_interface = -1;
        radiobutton_get_state(0, interface_object[i], if_Manual,
                              &interface_addrtype[i]);

        return TRUE;
    }
    if (event->flags & actionbutton_SELECTED_CANCEL)
    {
        toolbox_action action;
    	radiobutton_action_state_changed *r =
    	                  (radiobutton_action_state_changed *) &action.data;
    	optionbutton_action_state_changed *opt =
    	                  (optionbutton_action_state_changed *) &action.data;

    	writablefield_set_value(0, id->this_obj, if_Address, interface_address[i]);
    	writablefield_set_value(0, id->this_obj, if_Netmask, interface_netmask[i]);
    	if (interface_is_pp[i])
            writablefield_set_value(0, id->this_obj, if_LinkAddr, interface_linkaddr[i]);

        action.size = 16 + 8;
        action.action_no = action_RADIO_BUTTON_STATE_CHANGED;
        action.flags = radiobutton_STATE_CHANGED_SELECT;
        r->on = FALSE;
        radiobutton_get_state(0, id->this_obj, if_Manual, &r->previous_on);
        radiobutton_set_state(0, id->this_obj, interface_addrtype[i], TRUE);
        toolbox_raise_toolbox_event(0, id->this_obj, r->previous_on, &action);

        r->on = TRUE;
        toolbox_raise_toolbox_event(0, id->this_obj, interface_addrtype[i], &action);

    	action.size = 16 + 4;
    	action.action_no = action_OPTION_BUTTON_STATE_CHANGED;
        action.flags = optionbutton_STATE_CHANGED_SELECT;
    	opt->on = primary_interface == i;
    	optionbutton_set_state(0, id->this_obj, if_Primary, opt->on);
    	toolbox_raise_toolbox_event(0, id->this_obj, if_Primary, &action);
        return TRUE;
    }
    return FALSE;
}

static bool if_button_handler(bits event_code, toolbox_action *event,
                              toolbox_block *id, void *handle)
{
    radiobutton_action_state_changed *r = (radiobutton_action_state_changed *) &event->data;

    switch (id->this_cmp)
    {
      case if_FromHostname:
        if (r->on)
        {
            int i;
            writablefield_set_value(0, id->this_obj, if_Address, HostName);
            for (i = 0; i < interfaces; i++)
            	if (i != (int) handle &&
            	       radiobutton_get_state(0, interface_object[i], if_FromHostname, 0))
            	{
            	    radiobutton_set_state(0, interface_object[i], if_Manual, TRUE);
            	    gadget_set_flags(0, interface_object[i], if_Address, 0);
            	}
        }
        break;

      case if_Manual:
        gadget_set_flags(0, id->this_obj, if_Address, r->on ? 0 : gadget_FADED);
        if (r->on)
        {
            writablefield_set_value(0, id->this_obj, if_Address,
                                    interface_address[(int) handle]);
            if (toolbox_get_object_info(0, id->this_obj) & toolbox_INFO_SHOWING)
            	gadget_set_focus(0, id->this_obj, if_Address);
        }
        else
            writablefield_get_value(0, id->this_obj, if_Address,
                                    interface_address[(int) handle],
                                    sizeof interface_address[(int) handle]);
        break;

      case if_RevARP:
        if (r->on)
            writablefield_set_value(0, id->this_obj, if_Address, msgs_lookup("RevARP"));
        /*else
            writablefield_set_value(0, id->this_obj, if_Address, "");*/
        break;

      case if_BOOTP:
      	if (r->on)
            writablefield_set_value(0, id->this_obj, if_Address, msgs_lookup("BOOTP"));
       /* else
            writablefield_set_value(0, id->this_obj, if_Address, "");*/
        break;

      case if_FromCMOS:
        if (r->on)
        {
            /* Silliness */
            struct in_addr in;
            in.s_addr = CMOSIP;
            writablefield_set_value(0, id->this_obj, if_Address, inet_ntoa(in));
        }
    }

    if (id->this_cmp != if_RevARP && id->this_cmp != if_BOOTP &&
        (r->previous_on == if_RevARP || r->previous_on == if_BOOTP))
    {
        gadget_set_flags(0, id->this_obj, if_ICMP, gadget_FADED);
        gadget_set_flags(0, id->this_obj, if_Netmask, 0);
        window_set_default_focus(0, id->this_obj, if_Address);
        if (optionbutton_get_state(0, id->this_obj, if_ICMP))
        {
            optionbutton_set_state(0, id->this_obj, if_ICMP, FALSE);
            writablefield_set_value(0, id->this_obj, if_Netmask, interface_netmask[(int) handle]);
        }
    }
    else if ((id->this_cmp == if_RevARP || id->this_cmp == if_BOOTP) &&
             r->previous_on != if_RevARP && r->previous_on != if_BOOTP)
    {
        gadget_set_flags(0, id->this_obj, if_ICMP, 0);
    }

    return TRUE;
}

static bool if_option_handler(bits event_code, toolbox_action *event,
                              toolbox_block *id, void *handle)
{
    optionbutton_action_state_changed *r = (optionbutton_action_state_changed *) &event->data;

    switch (id->this_cmp)
    {
      case if_Primary:
        if (r->on)
        {
            int i;

            for (i = 0; i < interfaces; i++)
            {
                if (interface_object[i] == id->this_obj)
                    continue;

                optionbutton_set_state(0, interface_object[i], if_Primary, FALSE);
            }
        }
        break;
      case if_ICMP:
        if (r->on)
        {
            xwimp_set_caret_position(window_get_wimp_handle(0, id->this_obj),
                                     (wimp_i) -1, 0, 0, (1<<25), 0);
            gadget_set_flags(0, id->this_obj, if_Netmask, gadget_FADED);
            writablefield_get_value(0, id->this_obj, if_Netmask, interface_netmask[(int) handle], sizeof interface_netmask[(int) handle]);
            writablefield_set_value(0, id->this_obj, if_Netmask, msgs_lookup("ICMPReq"));
            window_set_default_focus(0, id->this_obj, (toolbox_c) -2);
        }
        else
        {
            gadget_set_flags(0, id->this_obj, if_Netmask, 0);
            writablefield_set_value(0, id->this_obj, if_Netmask, interface_netmask[(int) handle]);
            gadget_set_focus(0, id->this_obj, if_Netmask);
            window_set_default_focus(0, id->this_obj, if_Address);
        }
    }

    return TRUE;
}

static bool default_netmask_handler(bits event_code, toolbox_action *event,
                                    toolbox_block *id, void *handle)
{
    writablefield_set_value(0, id->ancestor_obj, if_Netmask, "default");
    gadget_set_flags(0, id->ancestor_obj, if_Netmask, 0);
    xoptionbutton_set_state(0, id->ancestor_obj, if_ICMP, FALSE);

    return TRUE;
}
