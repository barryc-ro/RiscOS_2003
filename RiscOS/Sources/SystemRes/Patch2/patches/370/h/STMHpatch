
/* patches/370/STMHpatch.h */

/*
   conditional patches for StrongARM silicon bug with STM {}^
   
   - required for StrongARM (ARM ID register) revisions before 3

   " 11-Oct-1996 (Digital)

     The SA110 with ID register (CP15 Register 1)
     revision less than 3 have a bug in User Register Store Multiple
     instruction (STM^). This is the PRIVILEGED MODE STM that is used to store 
     user mode registers while in a privileged mode. If the STM^ is executed
     while a data cache fill is completing the store address for all but the 
     first register may be wrong. 

     This is fix in the SA110 revision 3 and the following software work around
     can be used on revision 2 parts. Precede the STM^ with 
     any of the following, a store that is not a STM^, a MCR, or an MRC. 
     Note a "MCR P15, 0, r0, c0, c0, 0", which is a write to the ID register
     and on the SA110 is a NOP will fix the problem and uses no registers, 
     nor does any writes to memory. "

   - MCR fix doesn't seem to work properly, hence:

   - patches split STM{}^ into STM{} of unbanked regs followed by STM{}^ of
     banked regs, with appropriate base index adjustment

   - should work on all ARMs but only necessary for StrongARM < revision 3, so
     make patches conditional

   - patch list:

     03803A10 : E8CE7FFF : STMIA   R14,{R0-R14}^         ; sources.OS_Core.Kernel.s.Kernel, line 801

     03813520 : E8C07FFE : STMIA   R0,{R1-R14}^          ; sources.OS_Core.Kernel.s.Middle, line 240

     038138A0 : 08C07F00 : STMEQIA R0,{R8-R14}^          ; sources.OS_Core.Kernel.s.Middle, line 586

     038162C0 : 08C27F00 : STMEQIA R2,{R8-R14}^          ; sources.OS_Core.Kernel.s.ARM600, line 2533

     038162EC : E8CDFF00 : STMIA   R13,{R8-PC}^          ; sources.OS_Core.Kernel.s.ARM600, line 2550

     03835160 : E8C263C0 : STMIA   R2,{R6-R9,R13,R14}^   ; sources.OS_Core.FileSys.FileSwitch.s.FSControl, line 430

     03938FB0 : E8E97FFF : STMIA   R9!,{R0-R14}^         ; sources.NetWorking.Econet.s.Receive, line 626
                                                           ** not patched - sod Econet **

     0396A30C : E8CD7FFF : STMIA   R13,{R0-R14}^         ; sources.OS_Core.HWSupport.FPASC.coresrc.s.fpaundef, line 49

     0396AEA0 : E8CD7FFF : STMIA   R13,{R0-R14}^         ; sources.OS_Core.HWSupport.FPASC.coresrc.s.fpeundef, line 49

     039E8690 : E8CE7FFF : STMIA   R14,{R0-R14}^         ; sources.OS_Core.Desktop.TaskWindow.s.Taskman, line 3720

     03A165D8 : E9CE7FFE : STMIB   R14,{R1-R14}^         ; sources.Lib.RISC_OSLib.kernel.s.k_body, line 768

     03A16B5C : E8CE7FFF : STMIA   R14,{R0-R14}^         ; sources.Lib.RISC_OSLib.kernel.s.k_body, line 1360

     03A16BCC : E94B2000 : STMDB   R11,{R13}^            ; sources.Lib.RISC_OSLib.kernel.s.k_body, line 1396
                                                           ** not patched - no bug for 1 reg (we hope) **

     03B49140 : E94D4000 : STMDB   R13,{R14}^            ; sources.Printing.Printers.Modules.PDModules.s.PDriverDP.Private, line 154
                                                           ** not patched - no bug for 1 reg (we hope) **

*/

static patchentry_t *STMHpatches370_proc(void *handle)
{
  uint32 armid,armN,armrev;

  extern uint32 svcarmid(void);

  static patchentry_t STMHpatches370[] =
  {
  /*            addr        old         new */

     {(uint32 *)0x03803a10, 0xe8ce7fff, 0xea004c9a},

     {(uint32 *)0x0381351c, 0xe1a00000, 0xe8a01ffe},
     {(uint32 *)0x03813520, 0xe8c07ffe, 0xe8c06000},
     {(uint32 *)0x03813524, 0xe1a00000, 0xe2400030},

     {(uint32 *)0x038138a0, 0x08c07f00, 0x0a000cfe},

     {(uint32 *)0x038162c0, 0x08c27f00, 0x0a00027e},

     {(uint32 *)0x038162ec, 0xe8cdff00, 0xea00027b},

     {(uint32 *)0x03816c80, 0x00000000, 0xe8ae1fff},   /*  extra code in spare area (in already patched page :-) ... */
     {(uint32 *)0x03816c84, 0x00000000, 0xe8ce6000},
     {(uint32 *)0x03816c88, 0x00000000, 0xe1a00000},
     {(uint32 *)0x03816c8c, 0x00000000, 0xe24ee034},
     {(uint32 *)0x03816c90, 0x00000000, 0xe3a0cf4f},
     {(uint32 *)0x03816c94, 0x00000000, 0xe89c9000},

     {(uint32 *)0x03816ca0, 0x00000000, 0xe8a01f00},
     {(uint32 *)0x03816ca4, 0x00000000, 0xe8c06000},
     {(uint32 *)0x03816ca8, 0x00000000, 0xe2400014},
     {(uint32 *)0x03816cac, 0x00000000, 0xeafff30c},

     {(uint32 *)0x03816cc0, 0x00000000, 0xe8a21f00},
     {(uint32 *)0x03816cc4, 0x00000000, 0xe8c26000},
     {(uint32 *)0x03816cc8, 0x00000000, 0xe2422014},
     {(uint32 *)0x03816ccc, 0x00000000, 0xeafffd82},

     {(uint32 *)0x03816ce0, 0x00000000, 0xe8ad1f00},
     {(uint32 *)0x03816ce4, 0x00000000, 0xe8cd6000},
     {(uint32 *)0x03816ce8, 0x00000000, 0xe1a00000},
     {(uint32 *)0x03816cec, 0x00000000, 0xe58df008},
     {(uint32 *)0x03816cf0, 0x00000000, 0xe24dd014},
     {(uint32 *)0x03816cf4, 0x00000000, 0xeafffd7d},

     {(uint32 *)0x03816d00, 0x00000000, 0xe8a203c0},
     {(uint32 *)0x03816d04, 0x00000000, 0xe8c26000},
     {(uint32 *)0x03816d08, 0x00000000, 0xe2422010},
     {(uint32 *)0x03816d0c, 0x00000000, 0xea007914},  /* ... extra code ends */

     {(uint32 *)0x03835160, 0xe8c263c0, 0xeaff86e6},

     {(uint32 *)0x0396a308, 0xe1a00000, 0xe8ad1fff},
     {(uint32 *)0x0396a30c, 0xe8cd7fff, 0xe8cd6000},

     {(uint32 *)0x0396a314, 0xe1a00000, 0xe24dd034},

     {(uint32 *)0x0396ae9c, 0xe1a00000, 0xe8ad1fff},
     {(uint32 *)0x0396aea0, 0xe8cd7fff, 0xe8cd6000},

     {(uint32 *)0x0396aea8, 0xe1a00000, 0xe24dd034},

     {(uint32 *)0x039e8680, 0xe1a00000, 0xe8bd4000},
     {(uint32 *)0x039e8684, 0xe8bd4000, 0xe8ae1fff},
     {(uint32 *)0x039e8688, 0xe1a00000, 0xe8ce6000},

     {(uint32 *)0x039e8690, 0xe8ce7fff, 0xe24ee034},

     {(uint32 *)0x03a165d4, 0xe1a00000, 0xe9ae1ffe},
     {(uint32 *)0x03a165d8, 0xe9ce7ffe, 0xe9ce6000},

     {(uint32 *)0x03a165e0, 0xe1a00000, 0xe24ee030},

     {(uint32 *)0x03a16b54, 0xe1a00000, 0xe8ae1fff},
     {(uint32 *)0x03a16b58, 0xe1a00000, 0xe8ce6000},
     {(uint32 *)0x03a16b5c, 0xe8ce7fff, 0xe1a0c000},
     {(uint32 *)0x03a16b60, 0xe1a0c000, 0xe24ee034},

     {(uint32 *)0,0,0}
  };

  armid  = svcarmid();
  armN   = armid & 0xf000;
  armrev = armid & 0x000f;

  return ((armN == 0xa000) && (armrev < 3)) ? STMHpatches370 : NULL;
}
