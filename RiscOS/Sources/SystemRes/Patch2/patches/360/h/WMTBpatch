
/* patches/360/WMTBpatch.h */


/*
   unconditional patches for Wimp_TransferBlock

   - fixes equivalent to some of those in Wimp 3.69 for RISC OS 3.71 (19 Feb 97):
     Bug since  Description    
          3.50  Transfer crashes if forced to map current task out because
                there is not enough spare Application space.
          3.50  Transfer crashes if transfer is large (> 7 Mb) and there is
                less than transfer_size spare Application space.
          3.50  Transfer fails or crashes if source or destination is a
                Dynamic Area at logical address 2G or greater.

   - patch list: (from pdiff utility with -m option):

  addr      old                            | new

  038f7e94: LDR     R14,[R12,R14]          | CMP     R14,#0                
  038f7e98: CMP     R14,#0                 | LDRNE   R14,[R12,R14]         
  038f7e9c: STRGT   R1,[R14,#40]           | CMPNE   R14,#0                
  038f7ea0: STMDB   R13!,{R0}              | STRGT   R1,[R14,#40]          
  038f7ea4: LDRB    R0,[R12,#467]          | LDMIA   R13,{R0-R4}           
  038f7ea8: CMP     R0,#1                  | MOV     R0,R0                 
  038f7eac: LDMIA   R13!,{R0}              | MOV     R0,R0                 
  038f7eb0: LDMEQIA R13,{R0-R4}            | MOV     R0,R0                 
  038f7eb4: LDMNEIA R13!,{R0-R4}           | MOV     R0,R0                 

  038f7f14: SUBGES  R8,R1,#&8000           | SUB     R8,R1,#&8000          
  038f7f18: SUBGES  R9,R3,#&8000           | SUB     R9,R3,#&8000          
  038f7f1c: BLT     &038F8238              | MOV     R0,R0                 

  038f7f28: ADDGE   R8,R8,#&8000           | ADDCS   R8,R8,#&8000          
  038f7f2c: BGE     &038F7F40              | BCS     &038F7F40             

  038f7f3c: BGT     &038F8238              | BHI     &038F8238             

  038f7f44: ADDGE   R9,R9,#&8000           | ADDCS   R9,R9,#&8000          
  038f7f48: BGE     &038F7F5C              | BCS     &038F7F5C             

  038f7f58: BGT     &038F8238              | BHI     &038F8238             

  038f7f68: STMDB   R13!,{R0}              | TEQ     R6,R7                 
  038f7f6c: LDRB    R0,[R12,#467]          | BEQ     &038F7FA8             
  038f7f70: CMP     R0,#1                  | CMP     R10,#&00080000        
  038f7f74: LDMIA   R13!,{R0}              | BLT     &038F7FA8             
  038f7f78: BNE     &038F807C              | MOV     R10,#&00080000        
  038f7f7c: CMP     R6,R7                  | STMDB   R13!,{R1}             
  038f7f80: BEQ     &038F7FA8              | ADD     R0,R13,#8             
  038f7f84: CMP     R10,#&00700000         | LDMIA   R0,{R0-R4}            
  038f7f88: BLT     &038F7FA8              | ADD     R1,R1,#&00080000      
  038f7f8c: MOV     R10,#&00700000         | ADD     R3,R3,#&00080000      
  038f7f90: ADD     R0,R13,#4              | SUB     R4,R4,#&00080000      
  038f7f94: LDMIA   R0,{R0-R4}             | SWI     XWimp_TransferBlock   
  038f7f98: ADD     R1,R1,#&00700000       | LDMIA   R13!,{R1}             
  038f7f9c: ADD     R3,R3,#&00700000       | MOV     R0,R0                 
  038f7fa0: SUB     R4,R4,#&00700000       | MOV     R0,R0                 
  038f7fa4: SWI     XWimp_TransferBlock    | MOV     R0,R0                 

  038f7fb8: CMP     R1,R4                  | TEQ     R1,R4                 

  038f7fc0: CMP     R1,R5                  | TEQ     R1,R5                 

  038f7fcc: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R10             
  038f7fd0: ADDLT   R0,R0,R2               | ADDCC   R0,R0,R2              

  038f7fd8: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R10             
  038f7fdc: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R2              

  038f7ffc: BLT     &038F807C              | BCC     &038F807C             
  038f8000: STMDB   R13!,{R1}              | B       &038F8028             

  038f8010: ADD     R0,R13,#4              | ADD     R0,R13,#8             

  038f8030: CMP     R5,R4                  | TEQ     R5,R4                 

  038f803c: BLT     &038F8050              | BCC     &038F8050             

  038f8044: CMP     R5,R4                  | TEQ     R5,R4                 

  038f8050: ADDLT   R0,R0,R10              | ADDCC   R0,R0,R10             
  038f8054: ADDLT   R0,R0,R2               | ADDCC   R0,R0,R2              

  038f8074: BLT     &038F807C              | BCC     &038F807C             

  038f80ac: BGE     &038F80D0              | BCS     &038F80D0             
  038f80b0: CMP     R3,R5                  | TEQ     R3,R5                 

  038f80d4: BGE     &038F80F8              | BCS     &038F80F8             
  038f80d8: CMP     R3,R4                  | TEQ     R3,R4                 

  038f810c: BGE     &038F812C              | BCS     &038F812C             

  038f8140: CMP     R2,R5                  | TEQ     R2,R5                 

  038f8154: CMP     R2,R4                  | TEQ     R2,R4                 

  038f8170: BGE     &038F8190              | BCS     &038F8190             

Notes:

  - all patches are in code from Sources.OS_Core.Desktop.Wimp.s.Wimp08

  - all patches are 'inline' (no extra patch page required)

  - Attempting to map out current task to make space doesn't work at all
    on 3.60 (reasons still uncertain; appears to be issue with taskhandle = 0).
    Hence, the patch reduces the maximum block size to 512k from 7M, to make the
    problem much less likely (whilst not causing too deep recursion), and the
    map out is changed to silently do nothing (avoid crashing the machine).

*/

static patchentry_t *WMTBpatches360_proc(void *handle)
{

  static patchentry_t WMTBpatches360[] =
  {
  /*            addr        old         new */

     {(uint32 *)0x038f7e94, 0xe79ce00e, 0xe35e0000},
     {(uint32 *)0x038f7e98, 0xe35e0000, 0x179ce00e},
     {(uint32 *)0x038f7e9c, 0xc58e1028, 0x135e0000},
     {(uint32 *)0x038f7ea0, 0xe92d0001, 0xc58e1028},
     {(uint32 *)0x038f7ea4, 0xe5dc01d3, 0xe89d001f},
     {(uint32 *)0x038f7ea8, 0xe3500001, 0xe1a00000},
     {(uint32 *)0x038f7eac, 0xe8bd0001, 0xe1a00000},
     {(uint32 *)0x038f7eb0, 0x089d001f, 0xe1a00000},
     {(uint32 *)0x038f7eb4, 0x18bd001f, 0xe1a00000},

     {(uint32 *)0x038f7f14, 0xa2518902, 0xe2418902},
     {(uint32 *)0x038f7f18, 0xa2539902, 0xe2439902},
     {(uint32 *)0x038f7f1c, 0xba0000c5, 0xe1a00000},

     {(uint32 *)0x038f7f28, 0xa2888902, 0x22888902},
     {(uint32 *)0x038f7f2c, 0xaa000003, 0x2a000003},

     {(uint32 *)0x038f7f3c, 0xca0000bd, 0x8a0000bd},

     {(uint32 *)0x038f7f44, 0xa2899902, 0x22899902},
     {(uint32 *)0x038f7f48, 0xaa000003, 0x2a000003},

     {(uint32 *)0x038f7f58, 0xca0000b6, 0x8a0000b6},

     {(uint32 *)0x038f7f68, 0xe92d0001, 0xe1360007},
     {(uint32 *)0x038f7f6c, 0xe5dc01d3, 0x0a00000d},
     {(uint32 *)0x038f7f70, 0xe3500001, 0xe35a0702},
     {(uint32 *)0x038f7f74, 0xe8bd0001, 0xba00000b},
     {(uint32 *)0x038f7f78, 0x1a00003f, 0xe3a0a702},
     {(uint32 *)0x038f7f7c, 0xe1560007, 0xe92d0002},
     {(uint32 *)0x038f7f80, 0x0a000008, 0xe28d0008},
     {(uint32 *)0x038f7f84, 0xe35a0607, 0xe890001f},
     {(uint32 *)0x038f7f88, 0xba000006, 0xe2811702},
     {(uint32 *)0x038f7f8c, 0xe3a0a607, 0xe2833702},
     {(uint32 *)0x038f7f90, 0xe28d0004, 0xe2444702},
     {(uint32 *)0x038f7f94, 0xe890001f, 0xef0600f1},
     {(uint32 *)0x038f7f98, 0xe2811607, 0xe8bd0002},
     {(uint32 *)0x038f7f9c, 0xe2833607, 0xe1a00000},
     {(uint32 *)0x038f7fa0, 0xe2444607, 0xe1a00000},
     {(uint32 *)0x038f7fa4, 0xef0600f1, 0xe1a00000},

     {(uint32 *)0x038f7fb8, 0xe1510004, 0xe1310004},

     {(uint32 *)0x038f7fc0, 0xe1510005, 0xe1310005},

     {(uint32 *)0x038f7fcc, 0xb080000a, 0x3080000a},
     {(uint32 *)0x038f7fd0, 0xb0800002, 0x30800002},

     {(uint32 *)0x038f7fd8, 0xb080000a, 0x3080000a},
     {(uint32 *)0x038f7fdc, 0xb080000a, 0x30800002},

     {(uint32 *)0x038f7ffc, 0xba00001e, 0x3a00001e},
     {(uint32 *)0x038f8000, 0xe92d0002, 0xea000008},

     {(uint32 *)0x038f8010, 0xe28d0004, 0xe28d0008},

     {(uint32 *)0x038f8030, 0xe1550004, 0xe1350004},

     {(uint32 *)0x038f803c, 0xba000003, 0x3a000003},

     {(uint32 *)0x038f8044, 0xe1550004, 0xe1350004},

     {(uint32 *)0x038f8050, 0xb080000a, 0x3080000a},
     {(uint32 *)0x038f8054, 0xb0800002, 0x30800002},

     {(uint32 *)0x038f8074, 0xba000000, 0x3a000000},

     {(uint32 *)0x038f80ac, 0xaa000007, 0x2a000007},
     {(uint32 *)0x038f80b0, 0xe1530005, 0xe1330005},

     {(uint32 *)0x038f80d4, 0xaa000007, 0x2a000007},
     {(uint32 *)0x038f80d8, 0xe1530004, 0xe1330004},

     {(uint32 *)0x038f810c, 0xaa000006, 0x2a000006},

     {(uint32 *)0x038f8140, 0xe1520005, 0xe1320005},

     {(uint32 *)0x038f8154, 0xe1520004, 0xe1320004},

     {(uint32 *)0x038f8170, 0xaa000006, 0x2a000006},

     {(uint32 *)0,0,0}
  };

  return WMTBpatches360;
}
