Acronyms
~~~~~~~~
ETS 300 706 - European Telecommunication Standard, Enhanced Teletext specification.


API
~~~
Character set selection.

VDU 23, 18, 4, characterSet, 0, 0, 0, 0, 0

where characterSet specifies the character set to use. It is the bit pattern in table 32 of ETS 300 706 with bits 10, 9, 8 substituted as specified in note 1 and then shifted right 8 bits to place it in the least significant byte. Only the latin character sets are implemented.

This gives:

Hex     G0 set  National option sub set

00      Latin   English
01      Latin   German
02      Latin   Swedish/Finnish/Hungarian
03      Latin   Italian
04      Latin   French
05      Latin   Portuguese/Spanish
06      Latin   Czech/Slovak
08      Latin   Polish
09      Latin   German
0a      Latin   Swedish/Finnish/Hungarian
0b      Latin   Italian
0c      Latin   French
0e      Latin   Czech/Slovak
10      Latin   English
11      Latin   German
12      Latin   Swedish/Finnish/Hungarian
13      Latin   Italian
14      Latin   French
15      Latin   Portuguese/Spanish
16      Latin   Turkish
1d      Latin   Serbian/Croatian/Slovenian
1f      Latin   Rumanian
21      Latin   German
22      Latin   Estonian
23      Latin   Lettish/Lithuanian
26      Latin   Czech/Slovak
36      Latin   Turkish
40      Latin   English
44      Latin   French

At start up, MODE 7 uses the historic character set. The above switch to other character sets.

There is no code defined in table 32 meaning return to default so we use a number outside 7 bit space to return to the historic version of teletext:

80      Latin   Default      ie BBC model B style teletext.


Incorporation into the kernel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There is a good chance that these character sets will need to be extended (Hebrew, Arabic, various Cyrillic, Greek and a number of alternate sets). This will be done by adding a suplementry character set selection table. The algorythm is:

Look first in the suplementary table.
If no entry is found then look in the default table.
If still not found, use the default RiscOS character set.

Doing the look up in this order means that character sets can be replaced.

OS_Word will be extended to pass in a pointer to the suplementary character set selection table.


Implementation
~~~~~~~~~~~~~~
The DSL4000 uses at least 2 different ROMs but most are the recent one. ie 1910. 1807 and 1910 are known to be identical as far as this patch is concerned.

In ROM 1910, the character set is at &3828F3C. 20*16 pixels * 1bpp bit maps. Offset &F3C into &1000 (4K) block.
Source code is at Kernel.s.vdu.vduttx:1552

The code to patch is Kernel.s.vdu.vduttx:1265  Address &3828C34.
Replace with jump to new code which requires 2 words. Return to following instruction.

ROM checksum and CRC for STB400 1910 are &475F09A4, &78E9FB78, &09591606.

ROM checksum and CRC for STB400 1807 are &BE00C7F6, &F4B95576, &FB5711E8.

Data structures
~~~~~~~~~~~~~~~
Character lookup
~~~~~~~~~~~~~~~~

/* offsets from map to character lookup table */
/* indexed by 7 bit numbers from table 33 of ETS 300 706 */

  unsigned map [ 128 ];

/* the glyphs table to use, and mapping from ASCII code to glyph number */

  struct characterLookup
  {
    unsigned offsetToTheGlyphsTable;
    char     glyphNumber [ 96 ];            /* Indexed by ASCII code - &20 */
  }
  characterLookupTable;

/* contains the Latin character set and the national varients from table 36 */

  struct glyphsTable
  {
    char glyph [ 40 ];                     
  }
  glyphs [ 235 ];                          /* 235 used so far */

Pointers to the character lookup table and the glyphs table are set up at module initialisation and when the character set is changed.


Differences from the contract
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Icelandic and Norwegian are not mentioned in ETS 300 706 so they have not beem implemented.

Lithuanian/Lettish is in the standard so that has been done instead.


Outstanding issues
~~~~~~~~~~~~~~~~~~
1. The standard assumes character glyphs 12 pixels wide. In this implementation they are 16 pixels wide giving a different aspect ratio to most implementations of teletext. This also means that some characters may be lost off the edge of the screen with some TV's due to overscan. Fixing this is non-trivial as changes will be required in numerous places in the rendering code as well as modifying all of the characters.


Extension
~~~~~~~~~
Additional alphabets can be created efficiently by adding the additional glyphs to the start of the glyphs table. There is insufficient room after the current table to fit in Hebrew. However, it can be added onto the start (or the end as well), and probably arabic or cyrillic as well. After that a new glyphs table will be needed, or some characters will need to be repeated. ie each character lookup table maps into a 256 character window into the glyph set.