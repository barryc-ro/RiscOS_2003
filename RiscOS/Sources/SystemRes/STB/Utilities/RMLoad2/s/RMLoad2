; >RMLoad2
;
; This transient will replace the functionality of the *RMLoad command, usually
; by using some command like...
;
;   *Set Alias$RMLoad RMLoad2 %%*0
;
; ...into the boot sequence somewhere. It behaves in exactly the same way as the
; traditional *RMLoad command except for when the module is in ResourceFS already.
; In this case, it will attempt to link the module directly into the module chain
; without loading it.
;
; This will probably break if the module is in ResourceFS and was put there by some
; module in ROM (i.e. the module is in ROM not RAM), is isn't modsqz'd and contains
; self-modifying aspects (i.e. a C module). If you don't understand why, think about
; it some more!
;
; --- SAR, 07th Sep 2000
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

;
; Set this label to 'TRUE' for a debug build...
;
				GBLL	DEBUG_BUILD
DEBUG_BUILD			SETL	{FALSE}
;
; Values for OS_ReadSysInfo...
;
OSFind_CloseFile		*	0x00
OSFind_ReadFile			*	0x4C
OSFSControl_ReadFSHandle	*	0x15
OSModule_RMLoad			*	0x01
OSModule_InitInPlace		*	0x0A
FS_number			*	0xFF
ResourceFS			*	0x2E

        AREA    |Asm$$Data|, DATA

;
; Various string constants
;
Utility_Title			=	"RMLoad2", 9
Utility_VersionAndDate		=	"1.02 (07 Sep 2000)"
Utility_Copyright		=	" © Pace Micro Technology plc", 0
	ALIGN

        AREA    |Asm$$Code|, CODE, READONLY

; Open the file (to get a handle)
open_file
	STMFD	SP !, {R1-R4, LR}

	; R1 -> filename
	MOV	R0, #OSFind_ReadFile
	SWI	XOS_Find
	BVS	error_exit
	MOV	R3, R0
	MOV	R4, R1
	; R3 -> handle
	; R4 -> filename

; Extract the FS number for that file (and it's base address)
file_info
	MOV	R0, #OSFSControl_ReadFSHandle
	MOV	R1, R3
	SWI	XOS_FSControl
	MOVVS	R2, #0
	BVS	close_file

	; Swap handle and address registers
	EOR	R1, R3, R1
	EOR	R3, R3, R1
	EOR	R1, R3, R1
	; R1 -> handle
	; R2 -> FS information word
	; R3 -> address of file

; Close the file
close_file
	MOV	R0, #OSFind_CloseFile
	SWI	XOS_Find
	BVS	error_exit

; If it is in ResourceFS, initialise in place, else RMLoad it
	AND	R2, R2, #FS_number
	TEQ	R2, #ResourceFS
	BNE	rmload_module

; Initialise the module in place (in ResourceFS, word below = module size)
	MOV	R0, #OSModule_InitInPlace
	MOV	R1, R3
	SWI	XOS_Module
	LDMFD	SP !, {R1-R4, PC}

; The module isn't in ResourceFS (or we couldn't open it), *RMLoad it instead
rmload_module
	MOV	R0, #OSModule_RMLoad
	MOV	R1, R4
	SWI	XOS_Module
error_exit
	LDMFD	SP !, {R1-R4, PC}

	END
