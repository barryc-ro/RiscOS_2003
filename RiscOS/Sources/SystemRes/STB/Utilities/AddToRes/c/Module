/**************************************************************/
/* File   : AddToRes.c                                        */
/*                                                            */
/* Purpose: Add files to ResourceFS.                          */
/*                                                            */
/* Author:  J.R.Byrne                                         */
/*                                                            */
/* History: 19-Jun-2002 (JRB): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "Global/Services.h"
#include "swis.h"

#include "ModHdr.h"

/* Constants */

#define DA_NAME      "Extra resources"
#define DA_MAX_SIZE  (8*1024*1024)
#define DIR_BUF_SIZE (1024)

/* Callback function used by Service_ResourceFSStarting */

typedef void (*RFS_link_func)(void *, int, int, int);

/* Structures */

typedef struct dir_info
{
  unsigned  load;
  unsigned  exec;
  unsigned  size;
  unsigned  attr;
  unsigned  obj_type;
  char      name[1];
} dir_info;

typedef struct resourcefs_file_header
{
  unsigned  data_size;
  unsigned  load;
  unsigned  exec;
  unsigned  size;
  unsigned  attr;
  char      name[1];
} resourcefs_file_header;

/* Errors */

static _kernel_oserror  ResPathError = { 255, "Do not include filing system or $ in target name, use path relative to Resources:$." };
static _kernel_oserror  MemError = { 255, "AddToRes could not claim enough memory" };

/* Global variables */

static unsigned    DANum = 0;
static unsigned    DAFree = 0;
static char      * DABase = NULL;
static char      * DAPtr = NULL;

/*
 * Strncmp_ci()
 *
 * Compare two strings case insensitively up to a maximum char count
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strncmp.
 * Result: matches the exit conditions of strncmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */

static int Strncmp_ci(const char *first, const char *second, size_t limit)
{
        for (;limit;--limit) {
                unsigned int a = *first++;
                unsigned int b = *second++;

                if (a == 0) return -b;
                if (a != b) {
                        unsigned int c = (unsigned int) tolower(a);
                        unsigned int d = (unsigned int) tolower(b);
                        signed int result = c - d;
                        if (result != 0) return result;
                }
        }

        return 0;
}

/*
 * ensure_space()
 *
 * Ensure that our dynamic area has a cetrain amount of free space by
 * enlarging it if necessary.
 *
 * Parameters: The amount of free space required.
 */

static _kernel_oserror * ensure_space(size_t space_needed)
{
  _kernel_oserror * e;
  unsigned          change;

  if (space_needed <= DAFree)
    return NULL;

  e = _swix(OS_ChangeDynamicArea,
            _INR(0,1) | _OUT(1),

            DANum,
            space_needed - DAFree,

            &change);

  if (e == NULL)
    DAFree += change;

  return e;
}

/*
 * add_file()
 *
 * Add a single file to the resources block.
 *
 * Parameters: Load address of file.
 *             Exec address of file.
 *             Size of file.
 *             Attributes of file.
 *             File name of original file to read.
 *             Name to use for file in ResourceFS.
 */

static _kernel_oserror * add_file(unsigned load, unsigned exec, unsigned size,
  unsigned attr, const char *file_name, const char *r_file_name)
{
  _kernel_oserror        * e;
  size_t                   r_file_name_len, r_file_name_padded, space_needed;
  resourcefs_file_header * hdr;
  char                   * p;

  /* Work out file name length with padding, and total space required */
  r_file_name_len = strlen(r_file_name) + 1;  /* Including null */
  r_file_name_padded = (r_file_name_len + 3) & ~3;
  space_needed = (20 + r_file_name_padded + 4 + size + 3) & ~3;

  /* Make sure we have enough space */
  e = ensure_space(space_needed);
  if (e != NULL)
    return e;

  /* Fill in file header */
  hdr = (resourcefs_file_header *)DAPtr;
  hdr->load = load;
  hdr->exec = exec;
  hdr->size = size;
  hdr->attr = attr;

  /* Fill in file name and pad with nulls */
  strcpy(hdr->name, r_file_name);
  p = DAPtr + 20 + r_file_name_len;
  while(r_file_name_len++ < r_file_name_padded)
    *p++ = 0;

  /* The next word holds size+4 */
  *((unsigned *)p) = size + 4;
  p += 4;

  /* Insert file data */
  e = _swix(OS_File,
            _INR(0,3),

            16,
            file_name,
            p,
            0);

  if (e != NULL)
    return e;

  /* Pad the remaining bytes with zeros */
  p += size;
  while ((size++ & 3) != 0)
    *p++ = 0;

  /* Finally, store total size at start of header */
  hdr->data_size = p - (char *)hdr;

  /* Update pointers */
  DAPtr = p;
  DAFree -= space_needed;

  return NULL;
}

/*
 * add_directory()
 *
 * Recursively add all the files in a directory to the resources block.
 *
 * Parameters: The directory name to read.
 *             The target directory name to use in ResourceFS
 */

static _kernel_oserror * add_directory(const char *dir_name, const char *r_dir_name)
{
  _kernel_oserror * e;
  size_t            dir_name_len, r_dir_name_len;
  dir_info        * dir_buf;
  unsigned          num_read, offset;

  /* Get path lengths for later */
  dir_name_len = strlen(dir_name);
  r_dir_name_len = strlen(r_dir_name);

  /* Allocate buffer to hold directory entries */
  dir_buf = malloc(DIR_BUF_SIZE);
  if (dir_buf == NULL)
    return &MemError;

  /* Process the directory */
  offset = 0;
  do
  {
    /* Read a group of directory entries */
    e = _swix(OS_GBPB,
              _INR(0,6) | _OUTR(3,4),
  
              10,
              dir_name,
              dir_buf,
              1024, /* Any large number will do*/
              offset,
              DIR_BUF_SIZE,
              0,
  
              &num_read,
              &offset);

    /* Process each object in the group */
    while (e == NULL && num_read-- > 0)
    {
      char * new_obj_name;
      char * new_r_obj_name;
      size_t name_len = strlen(dir_buf->name);

      /* Allocate buffer to hold the paths of this object */
      new_obj_name = malloc(dir_name_len + name_len + 2 + r_dir_name_len + name_len + 2);
      if (new_obj_name == NULL)
      {
        e = &MemError;
        break;
      }

      /* Create object paths by appending name to directory paths */
      strcpy(new_obj_name, dir_name);
      new_obj_name[dir_name_len] = '.';
      strcpy(new_obj_name + dir_name_len + 1, dir_buf->name);

      new_r_obj_name = new_obj_name + dir_name_len + 1 + name_len + 1;
      strcpy(new_r_obj_name, r_dir_name);
      new_r_obj_name[r_dir_name_len] = '.';
      strcpy(new_r_obj_name + r_dir_name_len + 1, dir_buf->name);

      /* Now add the object */
      if (dir_buf->obj_type == 2)
        e = add_directory(new_obj_name, new_r_obj_name);
      else
        e = add_file(dir_buf->load, dir_buf->exec, dir_buf->size, dir_buf->attr, new_obj_name, new_r_obj_name);

      /* Discard the path buffer */
      free (new_obj_name);

      /* Move to the next directory entry */
      dir_buf = (dir_info *)&dir_buf->name[((name_len + 1 + 3) & ~3)];
    }
  }
  while (e == NULL && offset != -1);

  free(dir_buf);

  return e;
}

/*
 * add_object()
 *
 * Add an object to the resources block.
 *
 * Parameters: The object name to add.
 *             The target name to use in ResourceFS.
 */

static _kernel_oserror * add_object(const char *object, const char *r_object)
{
  _kernel_oserror * e;
  unsigned          type, load, exec, size, attr;

  /* Read the object information */
  e = _swix(OS_File,
            _INR(0,1) | _OUT(0) |_OUTR(2,5),
   
            5,
            object,
   
            &type,
            &load,
            &exec,
            &size,
            &attr);

  if (e == NULL)
  {
    switch (type)
    {
      case 0:
        /* Object not found - return error */
        e = _swix(OS_File,
                  _INR(0,2),
         
                  19,
                  object,
                  type);
        break;
  
      case 1:
      case 3:
        /* Add a single file */
        e = add_file(load, exec, size, attr, object, r_object);
        break;
  
      case 2:
        /* Recursively add a directory */
        e = add_directory(object, r_object);
        break;
    }
  }

  return e;
}

/*
 * deregister_files()
 *
 * Deregister all the blocks we have registered with ResourceFS.
 */

static _kernel_oserror * deregister_files(void)
{
  _kernel_oserror * e = NULL;
  char            * p = DABase;
  unsigned          offset;

  while (e == NULL && p != DAPtr)
  {
    /* Deregister this block */
    e = _swix(ResourceFS_DeregisterFiles,
              _IN(0),

              p);

    /* Find the end of the block */
    while ((offset = *(unsigned *)p) != 0)
      p += offset;

    /* The next block follows on */
    p += 4;
  }

  DAFree += (DAPtr - DABase);
  DAPtr = DABase;

  return e;
}

/*
 * add_to_res()
 *
 * Implements the *AddToRes command.
 */

static _kernel_oserror * add_to_res(const char *arg_string)
{
  static const char arg_template[] = "%0\0%1";
  static const char resfs_path[] = "Resources:";
  _kernel_oserror * e;
  char              src[256];
  char            * res;
  char            * prev_da_ptr;

  /* Get the two arguments. Note that things won't work if the arguments are
   * in quotation marks - room for improvement.
   */

  /* Use OS_SubstituteArgs to extract the command arguments using CLI rules. */
  e = _swix(OS_SubstituteArgs,
            _INR(0,4),

            (unsigned)arg_string|(1U<<31),
            src,
            sizeof(src),
            arg_template,
            sizeof(arg_template));

  if (e != NULL)
    return e;

  /* Set res to point to the second argument. */
  res = src + strlen(src) + 1;

  /* Check that the ResourceFS path is valid. */
  if (
      (Strncmp_ci(res, resfs_path, sizeof(resfs_path) - 1) == 0) ||
      (strchr(res, '$') != NULL)
     )
    return &ResPathError;

  /* Add the specified object to a resource block at the end of the DA. */
  prev_da_ptr = DAPtr;
  e = add_object(src, res);
  if (e == NULL && DAPtr != prev_da_ptr)
  {
    /* Something was successfully added. Terminate the block with a null word. */
    e = ensure_space(4);
    if (e == NULL)
    {
      *((unsigned *)DAPtr) = 0;
      DAPtr += 4;
      DAFree -= 4;

      /* Now register the block with ResourceFS. */
      e = _swix(ResourceFS_RegisterFiles,
                _IN(0),

                prev_da_ptr);
    }
  }

  if (e != NULL)
  {
    /* Something went wrong - reset the DA variables */
    DAFree += (DAPtr - prev_da_ptr);
    DAPtr = prev_da_ptr;
  }

  return e;
}

/*
 * initialise_module()
 *
 * Module initialisation.
 */

_kernel_oserror * initialise_module(const char * cmd_tail, int podule_base, void * pw)
{
  _kernel_oserror * e;
  unsigned          page_size;

  (void) cmd_tail;
  (void) pw;
  (void) podule_base;

  /* Create dynamic area */

  e = _swix(OS_ReadMemMapInfo, _OUT(0), &page_size);
  if (e == NULL)
  {
    e = _swix(OS_DynamicArea,
              _INR(0,8) | _OUT(1),

              0,
              -1,         /* area number */
              page_size,  /* initial size */
              -1,         /* area base */
              0x81,       /* flags: read-only in User Mode; not draggable */
              DA_MAX_SIZE,
              0, 0,       /* handler and workspace */
              DA_NAME,

              &DANum);
  }

  if (e == NULL)
  {
    e = _swix(OS_DynamicArea,
              _INR(0,1) | _OUTR(2,3),

              2,
              DANum,

              &DAFree,
              &DABase);

    DAPtr = DABase;
  }

  return e;
}

/*
 * finalise_module()
 *
 * Module finalisation.
 */

_kernel_oserror * finalise_module(int fatal, int podule, void * pw)
{
  _kernel_oserror * e = NULL;

  (void) fatal;
  (void) podule;
  (void) pw;

  /* If our dynamic area exists, deregister any resources and remove it */
  if (DANum != 0)
  {
    deregister_files();

    e = _swix(OS_DynamicArea,
              _INR(0,1),

              1,
              DANum);

    DANum = 0;
  }

  return e;
}

/*
 * service_handler()
 *
 * Service call handler.
 */

void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
  (void) pw;
  
  if (service_number == Service_ResourceFSStarting)
  {
    RFS_link_func link_block = (RFS_link_func)r->r[2];
    unsigned      offset;
    char        * p = DABase;

    while (p != DAPtr)
    {
      /* Re-link this block */
      link_block(p, 0, 0, r->r[3]);

      /* Find the end of the block */
      while ((offset = *(unsigned *)p) != 0)
        p += offset;
  
      /* The next block follows on */
      p += 4;
    }
  }
}

/*
 * cmd_handler()
 *
 * Module command handler.
 */

_kernel_oserror * cmd_handler(const char * arg_string, int argc, int cmd_no, void * pw)
{
  _kernel_oserror * e = NULL;

  (void) argc;
  (void) pw;

  switch (cmd_no)
  {
    case CMD_AddToRes:
      e = add_to_res(arg_string);
      break;
  }

  return e;
}
