; >FixSVBmip
;
; The SVBmip module (version 1.10) in the standard DSL4000 ROM has
; a bug where it fails to notice the Internet module being reinitialised
; and thinks its socket is still open. This means that if a newer
; Internet module has been loaded after the ROM SVBmip has been initialised,
; then when SVBmip is killed (i.e. when being replaced with a newer version)
; it will close a socket that now doesn't belong to it. This leads
; to unfortunate effects, like the multicast group membership being
; associated with the wrong socket.
;
; This utility looks to see if the Internet module is not the one in the ROM
; and if the SVBmip module in the ROM is version 1.10 and is active, and if
; this is the case, it alters the socket number in SVBmip's workspace to an
; invalid value, then kills the module. This will safely remove SVBmip without
; closing the wrong socket.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System


        AREA    |Asm$$Data|, DATA

;
; Various string constants
;
STRING_SVBmip		=	"SVBmip", 0
STRING_Internet		=	"Internet", 0

	ALIGN

        AREA    |Asm$$Code|, CODE, READONLY

	STMFD	sp!,{LR}
;Look for the Internet module in ROM
	MOV	R0,#19
	MOV	R1,#0
	MOV	R2,#-1
	ADR	R7,STRING_Internet
01	SWI	XOS_Module
	BVS	exit
	BL	compare_str
	BNE	%BT01
;Found Internet - is it active?
	CMP	R4,#1
	BEQ	exit	; Give up if ROM Internet module in use - things are OK
;Look for the SVBmip module in ROM
	MOV	R0,#20
	ADR	R7,STRING_SVBmip
02	SWI	XOS_Module
	BVS	exit
	BL	compare_str
	BNE	%BT02
;Found SVBmip - is it active?
	CMP	R4,#1
	BNE	exit		; Give up if ROM SVBmip module not in use
	CMP	R6,#&00011000	; Is the version 1.10 (the one we can fix)?
	BNE	exit		; Give up if not
;SVBmip is active with the wrong socket number - let's fix things
;First get SVBmip module information
	MOV	R0,#18
	ADR	R1,STRING_SVBmip
	SWI	XOS_Module
	BVS	exit
;Set the socket number in SVBmip's workspace to -1
	MOV	R0,#-1
	STR	R0,[R4,#&1C]
;Kill SVBmip and exit
	MOV	R0,#4
	ADR	R1,STRING_SVBmip
	SWI	XOS_Module
	LDMFD	sp!,{PC}

exit
	CLRV
	LDMFD	sp!,{PC}

compare_str	ROUT
;Compare strings pointed to by R3 and R7.
;Return Z set if they match, else Z clear.
;Preserves all registers.
	STMFD	SP!,{R0,R1,R3,R7}
01	LDRB	R0,[R3],#1
	LDRB	R1,[R7],#1
	CMP	R0,R1
	BNE	%FT02
	CMP	R0,#0
	BNE	%BT01
02	LDMFD	SP!,{R0,R1,R3,R7}
	MOV	PC,LR

	END
