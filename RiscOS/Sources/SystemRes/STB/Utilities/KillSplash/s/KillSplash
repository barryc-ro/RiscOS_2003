; >KillSplash
;
; The STBSplash module (version 1.04) in the standard STB3 ROM (acTiVe OS 3.0.0) has a bug
; where it adds a CallAfter event with a 10 second delay at (ROM) module initialisation.
; However, the module finalisation code makes no attempt to remove this ticker event if it
; is still pending.
;
; So, to kill the STBSplash module, we have to first remove it's ticker event. To do this,
; we need to know two things: the address of the CallAfter handler code, and the module's
; private word *pointer*.
;
; For STBSplash version 1.04, we can 'know' the CallAfter handler code's offset from the
; module base. There is no open API for getting at the private word pointer. So we have to
; extract it from the Kernel's module list.
;
; The start of the module list is pointed to by a word in the Kernel's workspace (zero-page)
; which is given by using the undocumented API OS_ReadSysInfo 6 (see 'Kernel.s.Middle').
; However, in older versions of the Kernel (including that in the STB3 ROM). this SWI was
; not implemented. In those cases, we have no choice but to 'know' the address of this
; pointer.
;
; This utility checks that STBSplash is loaded and requires fixing. If the version <> 1.04
; we simply wait for ten seconds before killing it. Otherwise, we can use the above to find
; the private word pointer and remove the ticker event before killing the module.
;
; If the version of STBSplash is > 1.09, we know that the ticker event fault has been fixed
; so we can simply kill STBSplash.
;
; --- SAR, 22nd Jun 2000
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

;
; Set this label to 'TRUE' for a debug build...
;
				GBLL	DEBUG_BUILD
DEBUG_BUILD			SETL	{FALSE}
;
; Values for OS_ReadSysInfo...
;
ReadKernelValues		*	6
NoInputBlock			*	0
Module_List			*	9
;
; Various magic numbers...
;
TenSeconds			*	1000
RiscOS380BCD			*	&00038000
StbOS300ModuleListOffset	*	&000007D0
STBSplash104CallAfterOffset	*	&00000218
;
; Look for the STBSplash module (ie: OS_Module 18)
; If not found Then
;   Exit
; Else
;   Store module Base_Address
; Endif
;

        AREA    |Asm$$Data|, DATA

;
; Various string constants
;
STRING_STBSplashDisable		=	"STBSplash$Disable", 0
STRING_UtilityModule		=	"UtilityModule", 0
STRING_STBSplash		=	"STBSplash", 0
	ALIGN
;
; Various numerical constants
;
NUMBER_one			DCD	1
NUMBER_StbOS300BCD		DCD	&00047100
NUMBER_STBSplash104		=	"40.1"		; String MUST be 4 bytes long!
NUMBER_STBSplash109		=	"90.1"		; String MUST be 4 bytes long!
	ALIGN	; (just in case!)

	[ DEBUG_BUILD			; Create a 16 byte buffer for our number to string conversion
buffer	DCD	0
	DCD	0
	DCD	0
	DCD	0
	]

        AREA    |Asm$$Code|, CODE, READONLY

	MOV	R0, #18
	ADR	R1, STRING_STBSplash
	SWI	XOS_Module
	MOVVS	R3, #0			; On error (ie: 'Module not found')
	CMP	R3, #0			; clear the V flag and exit
	MOVEQ	PC, LR
	MOV	R11, R1			; module number
	MOV	R12, R3			; module base address
;
; Set STBSplash$Disable to 1
;
	ADR	R0, STRING_STBSplashDisable
	ADR	R1, NUMBER_one
	MOV	R2, #4
	MOV	R3, #0
	MOV	R4, #1
	SWI	XOS_SetVarVal
	MOVVS	PC, LR
;
; Extract module version number (ie: OS_Module 20 won't always work)
; If <> 1.04 Then
;   If < 1.10 Then
;     Wait for ten seconds
;   Endif
;   Kill STBSplash
;   Exit
; Endif
;
	LDR	R0, [R12, #48]		; Read the version number from the help string (ie: word contains '4' '0' '.' '1')
	ADR	R2, NUMBER_STBSplash104
	LDMIA	R2, {R2, R3}		; Load the version numbers for STBSplash 1.04 and 1.09
	EOR	R1, R0, R0, ROR #16	; Swap the endianness of the word (ie: word contains '1' '.' '0' '4')
	BIC	R1, R1, #&00FF0000
	MOV	R0, R0, ROR #8
	EOR	R0, R0, R1, LSR #8
	CMP	R0, R3			; Compare this version against 1.09
	BGT	kill_stbsplash		; This CMP will still work if the version is something like '10.01'!
	TEQ	R0, R2			; Compare this version against 1.10
	BNE	wait_and_exit
;
; Extract Kernel version number (ie: OS_Module 18, OS_Module 20)
;
stbsplash_fix
	[ DEBUG_BUILD
		SWI	XOS_WriteS
		=	"stbsplash_fix", 10, 13, 0
		ALIGN
	]
	MOV	R0, #18			; Over-engineered... don't assume module version 0!
	ADRL	R1, STRING_UtilityModule
	SWI	XOS_Module
	MOVVS	PC, LR
	MOV	R0, #20
	MVN	R2, #0
	SWI	XOS_Module
	MOVVS	PC, LR
;
; Case Version
;   > &00030700
;     Get Module_List from OS_ReadSysInfo 6,9
;   = {whatever STB3 uses}
;     Module_List = {some known value}
; Else
;   Wait for ten seconds
;   Kill STBSplash
;   Exit
; Endcase
;
	LDR	R0, NUMBER_StbOS300BCD
	CMP	R6, R0
	MOVEQ	R0, #StbOS300ModuleListOffset
	BEQ	traverse_module_list
	CMP	R6, #RiscOS380BCD
	BLT	wait_and_exit
use_os_readsysinfo_6			; Magic SWI to tell us the address of the pointer
	MOV	R0, #ReadKernelValues	; to the start of the Kernel's module list
	MOV	R1, #NoInputBlock
	MOV	R2, #Module_List
	SWI	XOS_ReadSysInfo
	MOVVS	PC, LR
	MOV	R0, R2
;
; Traverse Module_List
; Until matching Base_Address is found Or at end of list (zero)
;
traverse_module_list
	[ DEBUG_BUILD
		SWI	XOS_WriteS
		=	"traverse_module_list", 10, 13, 0
		ALIGN
	]
	LDR	R0, [R0]
	TEQ	R0, #0
	BEQ	wait_and_exit
traverse_loop				; Load... R0 -> next entry
	LDR	R2, [R0, #12]		;         R1 -> module base
	LDMIA	R0, {R0, R1}		;         R2 -> instantiation list
	TEQ	R1, R12
	BEQ	kill_ticker_event
	TEQ	R0, #0
	BNE	traverse_loop
;
; If end of list Then
;   {something has gone wrong - STBSplash should be in the list}
;   Wait for ten seconds
;   Kill STBSplash
;   Exit
; Endif
;
wait_and_exit
	[ DEBUG_BUILD
		SWI	XOS_WriteS
		=	"wait_and_exit", 10, 13, 0
		ALIGN
	]
	SWI	XOS_ReadMonotonicTime
	MOVVS	PC, LR
	ADD	R1, R0, #TenSeconds
wait_loop
	SWI	XOS_ReadMonotonicTime
	MOVVS	PC, LR
	CMP	R0, R1
	BLT	wait_loop
	B	kill_stbsplash
;
; Use module base address plus known offset to CallAfter handler
; code, along with the private word pointer to remove the ticker
; event for STBSplash (OS_RemoveTickerEvent)
;
kill_ticker_event
	[ DEBUG_BUILD
	SWI	XOS_WriteS
	=	"kill_ticker_event", 10, 13, 0
	ALIGN
	STMFD	SP !, {R0,R1,R2,R3}	; Output the contents of our calculated CallAfter handler address and private word pointer
	ADD	R3, R2, #4
	ADD	R0, R12, #STBSplash104CallAfterOffset
	ADR	R1, buffer
	MOV	R2, #16
	SWI	XOS_ConvertCardinal4	; Use XOS_ConvertHex8 if you want hexadecimal output
	SWI	XOS_Write0
	SWI	XOS_NewLine
	MOV	R0, R3
	ADR	R1, buffer
	MOV	R2, #16
	SWI	XOS_ConvertCardinal4	; Use XOS_ConvertHex8 if you want hexadecimal output
	SWI	XOS_Write0
	SWI	XOS_NewLine
	LDMFD	SP !, {R0,R1,R2,R3}
	]
	ADD	R1, R2, #4
	ADD	R0, R12, #STBSplash104CallAfterOffset
	SWI	XOS_RemoveTickerEvent
	MOVVS	PC, LR
;
; Kill the STBSplash module (ie: OS_Module 4)
;
kill_stbsplash
	[ DEBUG_BUILD
	SWI	XOS_WriteS
	=	"kill_stbsplash", 10, 13, 0
	ALIGN
	]
	MOV	R0, #4
	ADR	R1, STRING_STBSplash
	SWI	XOS_Module
;
; Exit
;
exit
	MOV	PC, LR

	END
