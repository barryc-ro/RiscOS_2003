; >FlashVsn:s.FlashVsn

		GET	Hdr:ListOpts
		GET	Hdr:Macros
		GET	Hdr:System
		GET	Hdr:ModHand
		GET	Hdr:Proc
;		GET	Hdr:Services
;		GET	Hdr:EnvNumbers
;		GET	Hdr:HighFSI
;		GET	Hdr:MsgTrans
		GET	VersionASM
;		GET	s.Macros

  [ No32bitCode
  ! 0, ""
  ! 0, "Warning - this is not a 32bit compatible build!"
  ]

	AREA	|Asm$$Code|, CODE, READONLY


; ****************************************************
; *
; * Module header block
; *
Module_BaseAddr
	&	Mod_Start	-Module_BaseAddr	; Module start entry point offset
	&	Mod_Init	-Module_BaseAddr	; Module intialisation entry point offset
	&	Mod_Die		-Module_BaseAddr	; Module finalisation entry point offset
	&	Mod_Service	-Module_BaseAddr	; Module service call entry point offset
	&	Mod_Title	-Module_BaseAddr	; Module title string offset
	&	Mod_HelpStr	-Module_BaseAddr	; Module version info string offset
	&	Mod_HC_Table	-Module_BaseAddr	; Help and command keyword table offset
	&	DAHeapSWI_Base				; SWI chunk
	&	Mod_SWIHandler	-Module_BaseAddr	; Module SWI handler entry point offset
	&	Mod_SWITable	-Module_BaseAddr	; Module SWI table offset
	&	0					; no swi name decode entry
	&	0					; no messages file
	&	Mod_Flags	-Module_BaseAddr	; Module flags word offset


; ****************************************************
; *
; * Module version, date (and copyright) string
; *
Mod_HelpStr
	=	"$Module_ComponentName", 9, 9
	=	"$Module_MajorVersion ($Module_Date)"
  [ Module_MinorVersion <> ""
	=	" $Module_MinorVersion"
  ]
	=	0
	ALIGN


; ****************************************************
; *
; * Module flags word
; *
Mod_Flags
  [ No32bitCode
	&	0
  |
	&	ModuleFlag_32bit
  ]


; ****************************************************
; *
; * Module help and command keyword table
; *
Mod_HC_Table  * Module_BaseAddr	; not required by this module


; ****************************************************
; *
; *  Module title string
; *
Mod_Title
	=	"$Module_ComponentName", 0
	ALIGN


; ****************************************************
; *
; *  Module SWI table
; *
Mod_SWITable * Module_BaseAddr	; not required by this module


; ****************************************************
; *
; * Module execution start entry point.
; *
; * In...
; *   R0	= pointer to command string, including module title
; *   R12	= pointer to private word for preferred instance
; * Out...
; *   SHOULD NOT RETURN. Call SWI OS_Exit or start another application.
; *
Mod_Start * Module_BaseAddr	; not required by this module


; ****************************************************
; *
; * Module initialisation entry point
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Init Entry
	ADR	R0, cli
	SWI	XOS_CLI
	EXIT
cli	DCB	"SetEval Flash$Version ""$Module_MajorVersion""", 0
	ALIGN


; ****************************************************
; *
; * Module finalisation entry point
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Die * Module_BaseAddr	; not required by this module


; ****************************************************
; *
; * Module service call entry point
; *
; * In...
; *   R1	= service call reason code
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be altered to return a result
; *   R1	= 0 if we claimed it
; *   R2-R8	= may be altered to return a result
; *   R9-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13-R14	= must be preserved
; *
; * Do NOT return V set errors from this routine!
; *
Mod_Service * Module_BaseAddr	; not required by this module


; ****************************************************
; *
; * Module SWI handler entry point
; *
; * In...
; *   R0-R9	= passed in from caller
; *   R11	= SWI number offset from SWI chunk base
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R9	= values to return to caller
; *   R10-R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_SWIHandler * Module_BaseAddr	; not required by this module


	END
