<HTML>
<HEAD>
<META NAME="ncbrowsermode" CONTENT="SELECTED=SELECTION;">
<META HTTP-EQUIV=Content-Type CONTENT="text/html; charset=iso-8859-1">
<TITLE>êêHTMLPlugPlay_Titleëë</TITLE>
<SCRIPT LANGUAGE="JavaScript1.1">

// this page extends the more simple multicast example by allowing channel
// channel changing and an on screen display.  This also introduces the more
// complex issue of screen mode changes.
var mediaObject = new MediaCtrl();

// this variable is a Boolean used to determine if the on screen display
// is visible or not.
var visible = true;

// the variable used to remember status
var state = "unloaded";

// Assign the response script to a short script which is executed whenever a
// response is received from the server.
mediaObject.responseScript = "getResponse();"

// define an array of possible channels
var channels = new Array(4);
var current_channel = -1;

channels[0] = new Object();
channels[0].name = new String("Ch1");
channels[0].value = 1;

channels[1] = new Object();
channels[1].name = new String("Ch8");
channels[1].value = 8;

channels[2] = new Object();
channels[2].name = new String("Ch9");
channels[2].value = 9;

channels[3] = new Object();
channels[3].name = new String("Ch10");
channels[3].value = 10;

// This example utilises a centralised error management routine.  This can be extended
// in more complex operations by filtering on error numbers to determine what the
// user should see.
function errorHandler(error)
{
        if (error != null)
        {
          alert("ERROR:("+error.identifier+") "+error.description);
          error = null;
        }
}

// This function sets up the screen mode,  The objects defined here are of local
// scope only, as they are defined within the function.  The mode change will remain
// until 'mediaObject' is deleted or its screen mode set to 'default';
// Note that this will effect the appearance of the toolbar, it is suggested that this
// be hidden or checked to ensure it looks alright.
function setUpTelly()
{
        var mode = new Object();
        var error = null;
        mode.bpp = 4; // set the bit depth to 4 (16 colours)

        mode.palette = new Array(15);   //set a palette to an array of 15 editable
// colours.

        mode.palette[0] = "cornflowerblue";     // this must be the most neutral
        mode.palette[1] = "grey20";
        mode.palette[2] = "grey30";
        mode.palette[3] = "grey40";
        mode.palette[4] = "grey50";
        mode.palette[5] = "grey55";
        mode.palette[6] = "grey60";
        mode.palette[7] = "grey65";
        mode.palette[8] = "grey70";
        mode.palette[9] = "grey75";
        mode.palette[10] = "grey80";
        mode.palette[11] = "grey85";
        mode.palette[12] = "grey90";
        mode.palette[13] = 0xffffff;    // note that passing a number is allowed.
        mode.palette[14] = "red";       // this colour will be selected as the
                                        //selection colour as it is the closest.

        // note that if an error occurs here the channel will still load as error
        // mechanism informative and will not stop the JavaScript engine.
        errorHandler(mediaObject.setOption("screen mode", mode));
        loadChannel();
}

function loadChannel()
{
        current_channel = document.movieOptions.elements[0].selectedIndex;
        loadCurrentChannel();
}

// this method is called when the page is loaded this sends a load request to the
// server and sets the state (remembering that it has sent the load)
function loadCurrentChannel()
{
         var error = null;

         if (state == "playing")
         {
                // close any existing channel
                error = mediaObject.unload();
         }

         if (!error)
         {
           error = mediaObject.load("rtsp:///multicast?channel="+channels[current_channel].value);
         }

         if (error)
         {
             errorHandler(error);
         }
         else
         {
             state = "loaded";
         }
}

// this function is similar to the load function with the exception that it sends
// a play request.  This is called from the response to the load request.
function playTelly()
{
        error = mediaObject.play();

        if (error)
        {
                errorHandler(error);
        }
        else
        {
                // set the current channel to what it is
                document.movieOptions.elements[0].selectedIndex = current_channel;
                state = "playing";
        }
}

// this increments the current channel (if available) looping to the least significant channel if necessary
function channelUp()
{
        current_channel++;

        if ((current_channel >= channels.length)||(current_channel < 0))
        {
                current_channel = 0;
        }

        loadCurrentChannel();
}

// this decrements the current channel (if available) looping to the most significant channel if necessary
function channelDown()
{
        current_channel--;

        if ((current_channel < 0)||(current_channel >= channels.length))
        {
                current_channel = channels.length -1;
        }

        loadCurrentChannel();
}

// this function is called when a response is received from the server.  This is called
// when the responseScript is executed.  It parses the response code for a server error.
function getResponse()
{
        var response_received = false;
        var code = 0;
        var error = null;

        error = mediaObject.getResponse(response_received, code);

        if (error != null)
        {
                errorHandler(error);
        }
        else
        {
                if (response_received == true)
                {
                        if (code != 200)
                        {
                                alert("the server returned the error "+ code);
                                mediaObject.unload();
                                state = "unloaded";
                        }
                        else
                        {
                                if (state == "loaded")
                                {
                                        playTelly();
                                }

                                if (state == "playing")
                                {
                                        mediaObject.plugin = "tv_window";
                                }
                        }

                        return true;
                }
                else
                {       // this should never be called as we are not
                        // expecting asynchronous messages
                        alert("response called without a response");
                }
        }
        return false;
}

// This function handles all of the key presses, it also takes the opportunity to look
// for keys that would mean leaving the page these unload the current movie.  This is
// not necessary as they will be deleted anyway but by removing the multicast traffic
// we can allow a faster loading of the next page. This application uses the info key to
// scroll page out of visibility and back in.  This scrolling uses the info key to
// toggle the on screen display, if this is selected we do not want its usual action
// of displaying the info pop-up, so we return false.  Similarly page up and down is
// overloaded to change channels up and down.
function key_handler(e)
{
         var pass_keypress_on = true;

        switch (e.which)
        {
                case 0x80000084:// back
                case 0x80000083:// home
                        // By tearing down a stream more bandwidth is available to load
                        // the new page this is otherwise done (automatically) later,
                        // during the loading process.  The error is ignored as we are
                        // exiting the page.
                        mediaObject.unload();
                        break;
                case 0x80000082://info
                        if (visible == true)
                        {
                                window.scroll(0,132);
                                visible = false;
                        }
                        else
                        {
                                window.scroll(0,-132);
                                visible = true;
                        }
                        pass_keypress_on = false;
                        break;
                case 0x8000009e:// channel down (page up)
                        channelDown();
                        pass_keypress_on = false;
                        break;
                case 0x8000009f:// channel up
                        channelUp();
                        pass_keypress_on = false;
                        break;
        }

        return pass_keypress_on;
}
</SCRIPT>
</HEAD>

<BODY onkeypress="javascript:return key_handler(event)" bgcolor="cornflowerblue" onload="javascript:setUpTelly()">
<DIV ALIGN="right">
<TABLE CELLSPACING="0" CELLPADDING="0">

<TR>
<TD ROWSPAN=3><IMG SRC="../images/multicast/left.gif"></TD>

<!--TD ROWSPAN=3><img src="../images/multicast/divide.gif"></TD-->
<TD><img src="../images/multicast/top.gif"></TD>
<TD><img src="../images/multicast/top.gif"></TD> <!-- this is the top of the selection form the mid and bottom are defined below -->
<!--TD ROWSPAN=3><img src="../images/multicast/divide.gif"></TD-->

<TD ROWSPAN=3><FORM METHOD="GET" ACTION="javascript:channelUp()"><INPUT TYPE=SUBMIT VALUE="" SELIMAGE="../images/multicast/chup2.gif" BORDERIMAGE="../images/multicast/chup.gif"></FORM></TD>

<TD ROWSPAN=3><FORM METHOD="GET" ACTION="javascript:channelDown()"><INPUT TYPE=SUBMIT VALUE="" SELIMAGE="../images/multicast/chdn2.gif" BORDERIMAGE="../images/multicast/chdn.gif"></FORM></TD>

<TD ROWSPAN=3><IMG SRC="../images/multicast/right.gif"></TD>

</TR>

<tr>
<TD BGCOLOUR="#FFFFFF" ALIGN="CENTER" HEIGHT="32" COLSPAN="2">
<FORM  NAME="movieOptions" METHOD="GET">
<SELECT ID="SELECTION" onChange="javascript:loadChannel()">
<SCRIPT LANGUAGE = "JavaScript1.1">
var i = 0;
        for (i=0; i < channels.length; i++)
        {
                document.write("<OPTION>"+channels[i].name);
        }
</SCRIPT>
</SELECT>
</FORM>
</TD>
</TR>
<TR>
<TD ALIGN=BOTTOM><img src="../images/multicast/bottom.gif"></TD>
<TD ALIGN=BOTTOM><img src="../images/multicast/bottom.gif"></TD>
</TR>
</TABLE>
</DIV>
    <DIV align="center">
      <TABLE BORDER="0" WIDTH="1000">
        <TR> <TD COLSPAN="3">

          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë

        </TD> <TR> <TD WIDTH="252">

          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë

        </TD> <TD WIDTH="496">

          <!-- WIDTH should really be 360 for most clips (they're 720 wide) - this tests re-sizing of plugin -->
          <OBJECT TYPE="video/mpeg" STANDBY="Telly" WIDTH="350" HEIGHT="288" DATA="rtsp:///multicast?channel=9">
            <PARAM NAME="id" VALUE="tv_window">
            <PARAM NAME="adjust" VALUE="yes">
            <PARAM NAME="border" VALUE="-10">
            êêPlugPlay_NoPluginëë
          </OBJECT>

        </TD> <TD WIDTH="252">

          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë

        </TD> <TR> <TD COLSPAN="3">

          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë
          êêPlugPlay_Aëë
          êêPlugPlay_Bëë

        </TD>
      </TABLE>
    </DIV>
</BODY>
</HTML>
