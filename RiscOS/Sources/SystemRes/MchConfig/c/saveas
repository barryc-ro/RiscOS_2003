/*saveas.c - general purpose saveas box (one day)*/

/*From CLib*/
#include <string.h>

/*From OSLib*/
#include "dragasprite.h"
#include "macros.h"
#include "os.h"
#include "osfile.h"
#include "osbyte.h"
#include "wimp.h"
#include "wimpspriteop.h"

/*From Support*/
#include "application.h"
#include "callback.h"
#include "icon.h"
#include "m.h"
#include "riscos.h"
#include "task.h"
#include "trace.h"

/*Local*/
#include "main.h"
#include "saveas.h"

static bool Use_Drag_A_Sprite;

struct saveas_d_
   {  saveas_dialogue dialogue;
      bool dragging;
   };

static os_error *Reply (void *s, wimp_block *block)

{  os_error *error = NULL;
   saveas_d d = (saveas_d) s;

   tracef ("Reply\n");

   tracef ("Wimp says file is %s\n" _
         block ASREF message.data AS data_xfer.file_name);

   /*Copy the given file name into the icon.*/
   if ((error = icon_set_text (d->dialogue.w, d->dialogue.file_name, block
         ASREF message.data AS data_xfer.file_name)) != NULL)
      goto finish;

   /*Save the data.*/
   if ((error = (*d->dialogue.saver) (d, d->dialogue.handle)) != NULL)
      goto finish;

   /*And close the dialogue.*/
   if ((error = (*d->dialogue.closer) (d, d->dialogue.handle)) != NULL)
      goto finish;

finish:
   return error;
}

static os_error *Close (void *s, void *dd, bool *unclaimed)

{  os_error *error = NULL;
   saveas_d d = (saveas_d) s;

   NOT_USED (dd)
   NOT_USED (unclaimed)

   tracef ("Close\n");

   if ((error = xwimp_create_menu (wimp_CLOSE_MENU, SKIP, SKIP)) != NULL)
      goto finish;

   /*And close the dialogue.*/
   if ((error = (*d->dialogue.closer) (d, d->dialogue.handle)) != NULL)
      goto finish;

finish:
   return error;
}

#if 0
static os_error *Reopen (void *s, void *dd, bool *unclaimed)

{  os_error *error = NULL;
   saveas_d d = (saveas_d) s;

   NOT_USED (dd)
   NOT_USED (unclaimed)

   tracef ("Reopen\n");

   if ((error = xwimp_create_menu ((wimp_menu *) d->dialogue.w, SKIP, SKIP))
         != NULL)
      goto finish;

finish:
   return error;
}
#endif

static os_error *Save (void *s, void *dd, bool *unclaimed)

{  os_error *error = NULL;
   saveas_d d = (saveas_d) s;

   NOT_USED (dd)
   NOT_USED (unclaimed)

   tracef ("Save\n");

   /*Save the data.*/
   if ((error = (*d->dialogue.saver) (d, d->dialogue.handle)) != NULL)
      goto finish;

finish:
   return error;
}

static os_error *Start_Drag (void *s, void *dd, bool *unclaimed)

{  os_error *error = NULL;
   saveas_d d = (saveas_d) s;
   wimp_window_state window_state;
   wimp_icon_state icon_state;
   wimp_drag drag;
   int sx, sy;
   wimp_pointer pointer;
   bits drag_a_sprite;

   NOT_USED (dd)
   NOT_USED (unclaimed)

   tracef ("Start_Drag\n");
   window_state.w = d->dialogue.w;
   if ((error = xwimp_get_window_state (&window_state)) != NULL)
      goto finish;
   sx = window_state.visible.x0 - window_state.xscroll;
   sy = window_state.visible.y1 - window_state.yscroll;

   icon_state.w = d->dialogue.w;
   icon_state.i = d->dialogue.file_icon;
   if ((error = xwimp_get_icon_state (&icon_state)) != NULL)
      goto finish;

   drag.initial = icon_state.icon.extent;
   drag.initial.x0 += sx;
   drag.initial.y0 += sy;
   drag.initial.x1 += sx;
   drag.initial.y1 += sy;

   if ((error = xos_byte (osbyte_READ_CMOS, osbyte_CONFIGURE_DRAG_ASPRITE, SKIP,
         NULL, (int *) &drag_a_sprite)) != NULL)
      goto finish;
   Use_Drag_A_Sprite = (drag_a_sprite & osbyte_CONFIGURE_DRAG_ASPRITE_MASK)
         != NONE;

   if (Use_Drag_A_Sprite)
   {  if ((error = xdragasprite_start (dragasprite_HPOS_CENTRE |
            dragasprite_VPOS_CENTRE | dragasprite_BOUND_POINTER |
            dragasprite_DROP_SHADOW, wimpspriteop_AREA, "directory",
            &drag.initial, SKIP)) != NULL)
         goto finish;
   }
   else
   {  if ((error = xwimp_get_pointer_info (&pointer)) != NULL)
         goto finish;

      drag.type = wimp_DRAG_USER_FIXED;
      drag.bbox.x0 = pointer.pos.x - drag.initial.x0;
      drag.bbox.y0 = pointer.pos.y - drag.initial.y0;
      drag.bbox.x1 = main_xlimit + drag.initial.x1 - pointer.pos.x;
      drag.bbox.y1 = main_ylimit + drag.initial.y1 - pointer.pos.y;
      if ((error = xwimp_drag_box (&drag)) != NULL)
         goto finish;
   }

   d->dragging = TRUE;

finish:
   return error;
}

static os_error *End_Drag (void *s, void *dd, bool *unclaimed)

{  os_error *error = NULL;
   saveas_d d = (saveas_d) s;
   wimp_pointer pointer;
   wimp_icon_state state;
   char *text, *dot, *leaf;

   NOT_USED (dd)
   NOT_USED (unclaimed)

   tracef ("End_Drag: dragging %s\n" _ WHETHER (d->dragging));

   if (d->dragging)
   {  if (Use_Drag_A_Sprite)
      {  if ((error = xdragasprite_stop ()) != NULL)
            goto finish;
      }
      else
      {  if ((error = xwimp_drag_box (NULL)) != NULL)
            goto finish;
      }

      d->dragging = FALSE;

      if ((error = xwimp_get_pointer_info (&pointer)) != NULL)
         goto finish;

      /*Get the current icon text - we use the leaf in the message.*/
      state.w = d->dialogue.w;
      state.i = d->dialogue.file_name;
      if ((error = xwimp_get_icon_state (&state)) != NULL)
         goto finish;

      text = icon_TEXT (&state.icon);
      if ((dot = strrchr (text, '.')) != NULL || (dot = strrchr (text, ':'))
            != NULL)
         leaf = dot + 1;
      else
         leaf = text;

      if ((error = task_send_user_message_recorded_to_window (pointer.w,
            pointer.i, 0, application_task, &Reply, NULL, d,
            message_DATA_SAVE, pointer.w, pointer.i, pointer.pos, 0,
            osfile_TYPE_DIR, leaf)) != NULL)
         goto finish;
   }

finish:
   return error;
}

os_error *saveas_open (bits flags, saveas_dialogue *dialogue, saveas_d *d_out)

{  os_error *error = NULL;
   saveas_d d;
   callback_l app_l = application_list;
   wimp_w w;
   wimp_icon_state state;

   NOT_USED (flags)

   tracef ("saveas_open\n");

   if ((d = m_ALLOC (sizeof *d)) == NULL)
   {  error = riscos_error_lookup (os_GLOBAL_NO_MEM, "NoMem");
      goto finish;
   }

   d->dialogue = *dialogue;
   d->dragging = FALSE;

   w = d->dialogue.w; /*cache only*/

   state.w = w;
   state.i = d->dialogue.file_name;
   if ((error = xwimp_get_icon_state (&state)) != NULL)
      goto finish;

   if ((error = xwimp_create_menu ((wimp_menu *) w, d->dialogue.visible.x0,
         d->dialogue.visible.y1)) != NULL)
      goto finish;

   if ((error = xwimp_set_caret_position (w, d->dialogue.file_name, SKIP,
         SKIP, -1, strlen (icon_TEXT (&state.icon)))) != NULL)
      goto finish;

   tracef ("Registering callbacks ...\n");
   if ((error = callback_register (app_l, &Save, d, 5, wimp_MOUSE_CLICK,
            wimp_CLICK_SELECT, NONE, w, d->dialogue.ok)) != NULL ||
      (error = callback_register (app_l, &Close, d, 5, wimp_MOUSE_CLICK,
            wimp_CLICK_SELECT, NONE, w, d->dialogue.ok)) != NULL ||

      (error = callback_register (app_l, &Close, d, 5, wimp_MOUSE_CLICK,
            wimp_CLICK_SELECT, NONE, w, d->dialogue.cancel)) != NULL ||

      (error = callback_register (app_l, &Save, d, 5, wimp_MOUSE_CLICK,
            wimp_CLICK_ADJUST, NONE, w, d->dialogue.ok)) != NULL ||

      (error = callback_register (app_l, &Save, d, 4, wimp_KEY_PRESSED,
            wimp_KEY_RETURN, w, d->dialogue.file_name, NONE)) != NULL ||
      (error = callback_register (app_l, &Close, d, 4, wimp_KEY_PRESSED,
            wimp_KEY_RETURN, w, d->dialogue.file_name, NONE)) != NULL ||

      (error = callback_register (app_l, &Close, d, 4, wimp_KEY_PRESSED,
            wimp_KEY_ESCAPE, w, d->dialogue.file_name)) != NULL ||

      (error = callback_register (app_l, &Start_Drag, d, 5,
            wimp_MOUSE_CLICK, wimp_DRAG_SELECT, NONE, w,
            d->dialogue.file_icon)) != NULL ||
      (error = callback_register (app_l, &End_Drag, d, 1,
            wimp_USER_DRAG_BOX)) != NULL)
      goto finish;

   if (d_out != NULL) *d_out = d;

finish:
   return error;
}

os_error *saveas_close (bits flags, saveas_d d)

{  os_error *error = NULL;

   NOT_USED (flags)
   NOT_USED (d)

   tracef ("saveas_close\n");
   if ((error = xwimp_create_menu (wimp_CLOSE_MENU, SKIP, SKIP)) != NULL)
      goto finish;

   m_FREE (d, sizeof *d);

finish:
   return error;
}
