;
; s.LoadWimp
;
; Copyright (C) Acorn Computers Ltd.
;
; This utility will load a new WindowManager module from System:Modules.Wimp
; whilst keeping the ResourceFS resources intact.
;
; It also loads the code into the RMA and then links it into the module chain
; to avoid problems with ColourPicker failing to call some Wimp SWIs on callback
; whilst no WindowManager is in the active module list.
;
;
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:Symbols
	GET	Hdr:System
	GET	Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     Hdr:NewErrors
	GET	Hdr:Proc
	GET	Hdr:Wimp
	GET	Hdr:ResourceFS
	GET	Hdr:FileTypes
	GET	Hdr:EnvNumbers
	GET	Hdr:Services
	GET	VersionASM

	AREA	Utility,CODE,PIC,READONLY

	GBLL	directload
directload 	SETL	1=1

	ENTRY

	Entry	"R1-R11"

; Check the version of RISC OS
	MOV	R0,#129
	MOV	R1,#0
	MOV	R2,#255
	SWI	XOS_Byte
	EXIT	VS
	MOV	R8,R1
; Earlier than RISC OS 3.10 is no good.
	CMP	R8,#&A4
	BLO	RISCOSTooOld
	BEQ	RISCOS310

; RISC OS 3.5-3.7 versions of the Wimp will remove the free pool
; when killed. We need to prevent this, so read the amount of
; application space currently allocated.
	MOV	R0,#ApplicationSpaceSize
	MOV	R1,#0
	SWI	XOS_ChangeEnvironment
	EXIT	VS
	MOV	R7,R1
	MOV	R6,#0
	B	LoadWimp

; The RISC OS 3.10 Wimp registers its own Sprites file in ResourceFS.
; As we want to keep it after the Wimp is killed, get its address
; so we can reregister it.
RISCOS310
	SWI	XWimp_BaseOfSprites
	EXIT	VS
	MOV	R6,R0
	MOV	R7,#0

LoadWimp
; Discover size of module for initial RMA alloc.  Squeezed modules
; thought to be OK as kernel will allocate its own block for these.
	[ :LNOT: directload
	STMFD	sp!, {R5-R8}
	MOV	R0,#OSFile_ReadWithType
	ADR	R1,T_WimpFilename
	SWI	XOS_File
	SUBVC	R6,R6,#(FileType_Module :AND: &FF0)
	TEQVC	R6,#(FileType_Module :AND: &F)
	LDMFD	sp!,{R5-R8}
	EXIT	VS
	BNE	NotAModule
	MOV	R3,R4
	MOV	R0,#ModHandReason_Claim
	SWI	XOS_Module
	EXIT	VS
; Load the new WindowManager
	MOV	R3,#0
	MOV	R0,#OSFile_Load
	ADR	R1,T_WimpFilename
	STMFD	sp!,{R2}
	SWI	XOS_File
	LDMFD	sp!,{R2}
	BVS	FreeR2AndExitVSet
	]
; Now link it into the module chain.  We have claimed a block of memory OK.
; We rely on the structure of the heap that the word of memory immediately
; preceding R2 is the length of block allocated.  The PRMs document this.
InitWimp
	BL	KillColourPicker
	[ :LNOT: directload
	MOV	R0,#ModHandReason_AddArea
	MOV	R1,R2
	SWI	XOS_Module
	BVS	FreeR2AndExitVSet
	|
	MOV	r0,#ModHandReason_Load
	ADR	r1,T_WimpFilename
	SWI	XOS_Module
	]
	CMP	R8,#&A5
	BHS	ChangeFreePool

PutBackSprites
; Reregister the Wimp's Sprites file (and also its Tools file -
; unnecessary but harmless). 44 is a magic number: the length of the
; ResourceFS header, including the filename.
	SUB	R0,R6,#44
	SWI	XResourceFS_RegisterFiles
; Ignore errors. On a German (RISC OS 3.19) machine, the Wimp
; doesn't register its own Sprites file; it's done by a separate
; module. In this case the SWI will complain that the resources
; are already registered ("ResourceFS wurden bereits registriert")

; Reinitialise the modules required - clear V first
	CLRV
	BL	ReinitColourPicker
	BLVC	ReinitColourDbox
; Return
	EXITS

ChangeFreePool
; Check the application space now, then adjust it back to original
; setting by growing the free pool.
	MOV	R0,#ApplicationSpaceSize
	MOV	R1,#0
	SWI	XOS_ChangeEnvironment
	EXIT	VS
	MOV	R0,#6
	SUB	R1,R1,R7
	SWI	XOS_ChangeDynamicArea
	BLVC	ReinitColourPicker
	BLVC	ReinitColourDbox
	EXIT

FreeR2AndExitVSet
; Frees the RMA block allocated in R2 and returns the error held in R0 on entry
	MOV	R4,R0
	MOV	R0,#ModHandReason_Free
	SWI	XOS_Module
	BL	ReinitColourPicker
	MOV	R0,R4
	PullEnv
	ORRS	PC,LR,#V_bit

RISCOSTooOld
	ADR	R0,E_RISCOSTooOld
	PullEnv
	ORRS	PC,LR,#V_bit

NotAModule
	ADR	R0,E_NotAModule
	PullEnv
	ORRS	PC,LR,#V_bit

KillColourPicker Entry "r0-r12"
	TEQ	r8, #&A7
	EXITS	NE
	ADR	r1, T_ColourPicker
	MOV	r0, #ModHandReason_Delete
	SWI	XOS_Module
	EXITS

ReinitColourPicker Entry "r0-r12"
	TEQ	r8, #&A7
	EXITS	NE
	ADR	r1, T_ColourPicker
	MOV	r0, #ModHandReason_ReInit
	SWI	XOS_Module
	EXIT

ReinitColourDbox Entry "r0-r12"
; ColourDbox (the Toolbox object module) must only reinitialise if it was alive when
; all this started - otherwise it may have been unplugged in favour of a yet-to-be-loaded
; newer version in !System (usually courtesy of UnplugTbox)
	TEQ	r8, #&A7
	EXITS	NE
	ADR	r1, T_ColourDbox
	MOV	r0, #ModHandReason_LookupName
	SWI	XOS_Module
	ADRVC	r1, T_ColourDbox
	MOVVC	r0, #ModHandReason_ReInit
	SWIVC	XOS_Module
	EXITS

E_RISCOSTooOld
	&	ErrorNumber_ModuleTooOld ; Error code for "Module %0 too old"
	=	"This version of the Window Manager requires RISC OS 3.10 or later", 0
	ALIGN
E_NotAModule
	&	ErrorNumber_NotMod       ; Error code for "This is not a relocatable module"
	=	"This is not a relocatable module", 0
T_WindowManager
	=	"WindowManager", 0
T_ColourPicker
	=	"ColourPicker", 0
T_ColourDbox
	=	"ColourDbox", 0
	ALIGN
T_WimpFilename
	=	"System:Modules.Wimp", 0
	=	"LoadWimp ", Module_MajorVersion, " ", Module_Date
	END
