/*
 * Revision History:
 *
 * 07-Apr-91(?)  JSR     Updated to copy with shared RISC_OSLib.
 * 28-Jul-94     AMcC    Modified process_ifile(..) to process Entry2 lines
 *                       for symbols and aliases.
 */

#include <stdio.h>
#include <string.h>
#include "VersionNum"

#define MapBufferSize 300

/* process_ifile:
 *   Search the input file for lines which use the 'Entry' or 'Entry2' macros.
 *   Extract the symbol (1st field after Entry or Entry2) and the alias (last
 *   field after Entry2). Output symbols and aliases on separate lines to
 *   the output 'Entries' file.
 */
void process_ifile(FILE *ofile, FILE *ifile)
{
  char buffer[MapBufferSize]; /* should be enough */
  char *sym;
  int entries;

  while (fgets(buffer, MapBufferSize, ifile))
  {
    sym = strtok(buffer, " ");

    if (strcmp(sym, "Entry") == 0)
      entries = 1;
    else if (strcmp(sym, "Entry2") == 0)
      entries = 2;
    else entries = 0;

    if (entries)
    {
      sym  = strtok(NULL, " ,");
      if (sym != NULL)
        fprintf(ofile, "%s\n", sym);

      if (entries == 2)
      {
         char *alias;
         char *endsym;
         char *lastcomma;

         endsym = sym + (strlen(sym) + 2);
         lastcomma = strrchr(endsym, ',');
         alias = strtok(lastcomma, " ,\n");
         if (alias != NULL)
          fprintf(ofile, "%s\n", alias);
        else
          printf("xtentries: Bad alias for Entry2: %s\n", sym);
      }
    }
  }
}

int main(int argc, char **argv)
{
        FILE *ofile;
        int ifi;
        FILE *ifile;

        if (argc < 3)
        {
                printf("%s " Module_MajorVersion " [" Module_Date "] " Module_MinorVersion "\n\n", argv[0]);
                printf("%s <EntriesListFile> <EntriesSourceFile>[ <EntriesSourceFile>]*\n", argv[ 0 ]);
                printf("This takes the entries source files and scans them for lines\n");
                printf("of the form:\n");
                printf("        Entry   <entryname>, <other junk>\n");
                printf("or       Entry2  <entryname>, <other junk>\n");
                printf("and places <entryname> into <EntriesListFile> onto a line on its own.\n");

                return 1;
        }

        ofile = fopen(argv[1], "w");
        if (ofile == NULL)
        {
                printf("Failed to open %s\n", argv[1]);
                return 1;
        }

        for (ifi = 2; ifi < argc; ifi++)
        {
                ifile = fopen(argv[ifi], "r");
                if (ifile == NULL)
                {
                        printf("Failed to open %s\n", argv[ ifi ]);
                        return 1;
                }

                process_ifile(ofile, ifile);

                fclose(ifile);
        }

        fclose(ofile);

        return 0;
}
