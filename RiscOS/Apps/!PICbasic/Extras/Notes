Notes to remember - BINARY RULES
-----------------
A '1' (ASCii value &31) is read as a set bit
A ' ' (ASCii value &20) is ignored and has NO EFFECT
Any other character is interpretted as a clear bit 
So for example:
   11xxxxxx = 128+64
   11 xxxxx 0 = 128+64
   11000 000 = 128+64 too

Notes to remember - SOURCE CODE
-----------------
If possible,BASIC tokenises the assembler statements,so ANDLW k will be 
tokenised as 'AND' then 'LW k'.As a result,the PIC mnemonic SWAPF is tokenised
to 'SWAP' then 'F' under BBC basic V but left as text under BASIC II.To 
maintain backwards compatibility include some lower case (eg.'SWaPF') to 
prevent tokenisation.

When DIMing memory,base the amount required on the number of object code words 
that you expect to need.So,if your program is about 200 instructions long use 
something like      
              DIM myprog% 256
However,because neither the 12 or 14 bit opcodes will fit in an 8 bit byte you
will need to have at least TWICE that much memory free.This is only really a 
problem on a BBC micro where memory is of a premium.

There are NO reserved global variables as variables are assigned using 
PICbasic's own assigner.There is a limit to the number of variables you may 
define,and this is determined automatically for you at the start by the amount
of free memory.

Notes to remember - ASSEMBLY
-----------------
Because the assembler isn't running on a PIC,the 'use offset assembly' bit of
mnemonic 'OPT' must always be set (bit 2).The 'check range limit' bit must not
be set and will cause an error.

Parameters placed after mnemonics not requiring them (eg.NOP) results in the 
excess parameters being ignored.

The resulting object code should be saved before quitting by use of the SAVE
command in direct mode.eg.SAVE"filename" or similar.

Resulting output is of the form <LO><HI> ready to be programmed into the chip,
because the PIC program bus is wider than 8 bits,the spare top two or four 
bits will be set to zero.

The assembler pseudo mnemonics EQUS,EQUD,EQUW,EQUB are not accepted and cause 
an error since placing data in the program memory is silly - that's the whole 
idea of a Harvard architechture.

Notes to remember - BASIC KEYWORDS
-----------------
During program execution the following keywords will cause the 'Command not 
supported' error and execution will stop:
&85 - ERROR              &86 - LINE               &87 - OFF
&89 - SPC                &8A - TAB                &8B - ELSE
&8C - THEN               &8E - OPENIN             &8F - PTR
&90 - PAGE               &92 - LOMEM              &93 - HIMEM
&96 - ADVAL              &9A - BGET               &9C - COUNT
&9E - ERL                &9F - ERR                &A0 - EVAL
&A2 - EXT                &A4 - FN                 &A5 - GET
&A6 - INKEY              &AD - OPENUP             &AE - OPENOUT
&B0 - POINT(             &B1 - POS                &BA - USR
&BE - GET$               &BF - INKEY$             &C5 - EOF
&C6 - AUTO               &C7 - DELETE             &C8 - LOAD
&C9 - LIST               &CA - NEW                &CB - OLD
&CC - RENUMBER           &CD - SAVE               &CF - PTR
&D0 - PAGE               &D2 - LOMEM              &D3 - HIMEM
&D4 - SOUND              &D5 - BPUT               &D6 - CALL
&D7 - CHAIN              &D8 - CLEAR              &D9 - CLOSE
&DA - CLG                &DC - DATA               &DD - DEF
&DF - DRAW               &E1 - ENDPROC            &E2 - ENVELOPE
&E4 - GOSUB              &E5 - GOTO               &E6 - GCOL
&E7 - IF                 &E8 - INPUT              &EA - LOCAL
&EB - MODE               &EC - MOVE               &EE - ON
&EF - VDU                &F0 - PLOT               &F2 - PROC
&F3 - READ               &F5 - REPEAT             &F6 - REPORT
&F7 - RESTORE            &F8 - RETURN             &F9 - RUN
&FB - COLOUR or COLOR    &FC - TRACE              &FD - UNTIL
&FF - OSCLI
