
Summary of pertinent ARM variant features
-----------------------------------------

1. Abort timing (Data aborts)
-----------------------------

Note that 810/StrongARM have new halfword and signed byte variants of
LDR/STR, ie. LDRH,STRH,LDRSB,LDRSH. These new instructions may of course
cause data aborts.


1.1 ARM 610
-----------

  LDR/STR
  - If 'early abort' aborted as though it never happened (so, no writeback)
  - If 'late abort' any writeback occurs

  SWP
  - aborted as though it never happened

  LDM/STM
  - completes, and if writeback is set, it occurs
  - overwriting of base with data is prevented (LDM with base in list)
  - all register overwriting (of rest in list) prevented after abort
    is indicated, so that PC (always last) is always preserved


1.2 ARM 710
-----------

  LDR/STR
  - any writeback occurs

  SWP
  - aborted as though it never happened (though external read may take place)

  LDM/STM
  - completes, and if writeback is set, it occurs
  - overwriting of base with data is prevented (LDM with base in list)
  - all register overwriting (of rest in list) prevented after abort is indicated,
    so that PC (always last) is always preserved

  [ARM710 == ARM610 'late abort']


1.3 ARM 810
-----------

(with some interpretation...)

  LDR/STR
  - aborted with no registers modified

  SWP
  - aborted as though it never happened (though external read may take place)

  LDM/STM
  - aborts on the first access that connot complete
  - any writeback does NOT occur
  - the 'aborting' and later registers preserved (LDM)
  - overwriting of base with data is prevented (LDM with base in list)


1.4 StrongARM
-------------

  LDR/STR
  - aborted with no registers modified

  SWP
  - aborted as though it never happened (though external read may take place)

  LDM/STM
  - aborts on the first access that connot complete
  - any writeback does NOT occur
  - the 'aborting' and later registers preserved (LDM)
  - overwriting of base with data is prevented (LDM with base in list)

  [ARM810 == StrongARM == a maximum preservation of registers]


2. 26-bit/32-bit operation
--------------------------

2.1 ARM 610
-----------

2.1.1 Configuration
-------------------

Configuration options are two control register bits (prog32,data32) in
coprocessor 15 (MMU/cache control), register 1 (Control).

   CoPro #15 register 1 bit4 = 26 bit prog (0), 32 bit prog (1)
   CoPro #15 register 1 bit5 = 26 bit data (0), 32 bit data (1)


On reset, configuration is set to 26 bit program and data space.

A prog26,data26 configuration would be locked into 26 bit modes (including
exception handling). A prog26,data32 configuration would be similar, but
allow programs access to 32 bit data. A prog32,data32 configuration
means 32 bit in general, but 26 bit mode is allowed (see below). A
prog26,data32 configuration is undefined.

2.1.2 Mode
----------

[From Appendix C of ARM 8 datasheet; Comparing ARM6 and earlier ARMs]

A program executing in a privileged 32 bit mode can enter a 26 bit mode
(with ARM2/3 equivalent programmer's model) by executing an MSR which alters
the mode bits to one of the following:

  M[4:0]     Mode
  00000      usr26
  00001      fiq26
  00010      irq26
  00011      svc26

(comparing to 32 bit modes, bit 4 is set to 0 rather than 1, to enter the
26 bit mode).

Note that, in 26 bit mode, there are minor differences from ARM2/3
equivalent: address exceptions are never generated; new instruction for
transfer between general regs. and program status regs. (eg. MSR) remain
operative; exceptions return to 32 bit mode (see below).

Assume 32 bit configuration:
When in 26 bit mode, any exception (including SWI) will automatically
enter the 32 bit version of the relevant mode. (Saved value in R14 will be
just the PC part, not including the status bits from the 26 bit mode.)

Assume 32 bit configuration:
When in a privileged 26 bit mode, the MSR instruction is still available
(as an adjunct to the ARM2/3 programmer's model), allowing transfer to
one of the 32 bit modes.


2.2 ARM 710
-----------

Same as ARM 610 (both configuration and mode options).


2.3 ARM 810
-----------

2.3.1 Configuration
-------------------

At all times, only 32 bit program and data space configuration is available.
Bits 4 and 5 of the Control register should not be modified.

2.3.2 Mode
----------

Same as ARM610/710 in 32 bit configuration. However, an IMB instruction
(Instruction Memory Barrier) must accompany any change from 26 to 32 bit
mode or vice versa. Also, to avoid problems associated with ARM 810's
prefetch unit:

 - do not enter 26 bit mode when at an address outside 26 bit range
 - do not execute 26 code sequentially from 0x03FFFFFC to 0x00000000


2.4 StrongARM
-------------

Same options as ARM 810.


3. Cache(s) and and write buffer
--------------------------------

3.1 ARM 610
-----------

Cache:
 - 4 kByte mixed instruction/data cache (IDC); 'write through'
 - operates with virtual addresses from processor core
 - IDC is 256 lines of 4 words (4 blocks of 64 lines)
 - random IDC line replacement (I think)

Cache flushing:
   Flush of whole cache via write to copro 15 register 7; cache
   flushed immediately, but following 2 instruction fetches may
   come from cache as before register write

Write buffer:
 - 8 words max; 2 addresses max

3.2 ARM 710
-----------

Cache:
 - 8 kByte mixed instruction/data cache (IDC); 'write through'
 - operates with virtual addresses from processor core
 - IDC is 256 lines of 8 words [512/4 for some variants?]
 - random IDC line replacement (I think)

Cache flushing:
   Flush of whole cache via write to copro 15 register 7; cache
   flushed immediately, but following 2 instruction fetches may
   come from cache as before register write

Write buffer:
  - 8 data entries, 4 address entries

3.3 ARM 810
-----------

[16k cache was indicated, but now seems to be 8k]

Cache:
  - 8 kByte mixed instruction/data cache (IDC); 'write back'
    ('write through' option on per page/section basis, via MMU)
  - operates with virtual addresses from core
  - 4 words per line (8 64-line segments in total)
  - allocate on read; no allocate on write (ie. writes without cache
    hit will not cause that line to be read and cached, I think)
  - random replacement
  - 2 words/cycle read bandwidth (can attempt branch prediction);
    1 word/cycle write
  - optional lock-down of entries with 64 word granularity

Cache cleaning and flushing:
  Via Copro 15 register 7
  - Clean_Flush_Line (specific line, via segment and index spec.)
    If valid and dirty, write back; always mark as invalid
  - Clean_Line (specific line, via segment and index spec.)
    If valid and dirty, write back and mark as not dirty
  - Flush_Line (specific line, via segment and index spec.)
    Mark as invalid; does not check for dirty status
  - Flush_Whole_Cache
    Mark whole cache as invalid; does not check for any dirty lines

Time to clean and flush whole cache (software routine for clean):
... involves cleaning all 64 lines of each of the 8 segments...

Write buffer:
  - 8 data entries, 4 address entries


3.4 StrongARM
-------------

Caches:
  - 16 kByte instruction cache (IC); 512x 8-word lines
  - 16 kByte data cache (DC); 512x 8-word lines; 'write back'
  - IC and DC operate with virtual addresses from core
  - IC is round-robin replacement within a set
  - DC is allocate on read, round-robin replacement
  - DC has 2 dirty bits per line entry; if a line is evicted
    but only one half-line is dirty, only that half-line will be
    written back

Cache cleaning and flushing:
  Via copro 15 register 7:
  - flush of whole IC 
    (following 4 instructions may come from cache as before copro write)
  - clean and flush of single DC entry (specified by virtual address)
  - clean of single DC entry (specified by virtual address)
  - flush of single DC entry (specified by virtual address)
  - flush of whole DC
  - flush of whole DC and whole IC

Time to clean and flush whole DC (software routine for clean of DC):
...DC clean involves reading from block of address space, in 32 byte
   (8 words, or one entry) jumps, to guarantee eviction of any dirty
   entries via round-robin replacement. Block must be 32k (twice DC size)
   if DC could contain entries from block (which would then hit on read,
   and not evict), or 16k (exact DC size) if this is known not to be the case...

Write buffer:
  - buffers up to 8 entries (8 addresses) of 1-16 bytes each
  - a write to the same 16-byte aligned area as the last write can be
    merged into the same entry
  - drain operation available (via copro 15 register 7)


4. MMU
------

4.0 General (for ARM 6 and above)
---------------------------------

 - Translates virtual->physical, and controls memory access permissions.
 - memory access based on Sections or Pages
 - Sections are 1 MByte blocks; only require one level of fetch (from
   physical memory)
 - Pages are 4 kByte (Small) or 64 kByte (Large) blocks; require 2 levels
   of fetch
 - Domains: up to 16 domains can have separate access control, via
   two bits each in Domain Control Register
 - A Translation Lookaside Buffer (TLB) caches translated entries
 - Translation Table Base register specifies base address of table in 
   physical memory containing Section and/or Page descriptors.
 - Translation Table base is bits 31:14 of register (rest 0); ie. base
   on 16 kB alignment.


4.0.1 Level 1 fetch
-------------------

If the TLB misses, then a Level 1 fetch must be initiated. A Level 2
fetch will also be required, if the access is to a Page, rather than a
Section.

Bits 31:20 of the virtual address from the core are the (Level 1) table
index; ie. one Level 1 table entry covers 1 MByte of virtual address
space. The total address for look up is: bits 31:14 are direct from
Translation Table Base register; bits 13:2 are the table index (bits
31:20 of virtual address); bits 1:0 are zero (word address).

The one word descriptor fetched from this table address is one of four
types, depending on state of bits 1:0 of the descriptor:

  00 = translation fault
  01 = Page descriptor
  10 = Section descriptor
  11 = reserved

For a Section, no further fetch would be required. For a Page, a
subsequent, Level 2 fetch would be required.

A Section descriptor holds the physical base address of the Section,
access permission bits for the Section, domain number and cache/write
buffer control bits (Cacheable, Bufferable). On ARM 610, another bit
controls cache Updateable; ie data in (non write back) cache should be
updated as necessary with write.

The Section access permission bits (2 bits) are combined with one or
two bits (depending on ARM variant) in Copro 15 register 1 (Control
register) to decide whether no access, or read only or read/write access
is allowed, in supervisor and in user mode.

A Page descriptor holds the physical base address for the 2nd level page
table, and the domain number. On ARM 610, there is cache Updateable bit,
as for Section descriptors.

4.0.2 Level 2 fetch
-------------------

A Level 2 fetch is only required if the Level 1 fetch describes an
access to a Page, rather than a Section.

Bits 31:10 of the Level 1 descriptor are the Page table (ie. Level 2
table) base address. Bits 19:12 of the virtual address from the core are
the Level 2 table index. The total address for lookup is: bits 31:10
are direct from Level 1 descriptor; bits 9:2 are the table index (bits
19:12 from the virtual address); bits 1:0 are zero (word address).

The one word descriptor fetched from this address contains: the page
base address; permission bits for each of four sub-pages; cache/write
buffer control bits (Cacheable, Bufferable); bits flagging small or
large Page. The permission bits for each sub-page are applied as for
sections.

An access to a small Page (4k) has physical address as follows: bits
31:12 are the Page base address, direct from the Level 2 descriptor;
bits 11:0 are the index into the page, direct from the virtual address
supplied by the core.

An access to a large Page (64k) has physical address as follows: bits
31:16 are the Page base address, direct from the Level 2 descriptor;
bits 15:0 are the index into the page, direct from the virtual address
supplied by the core. Since there is an overlap of 4 bits between the
page index in the virtual address (bits 15:0), and the Level 2 table
index in the virtual address (bits 19:12), each Page table entry in
the second level table for a large page must be duplicated 16 times
in consecutive locations.

4.1 ARM 610
-----------

The ARM 610 MMU is as described in 4.0, with the extra Updateable bit
in the Level 1 descriptor. Only one bit (S, the 'System' bit) from
the Control Register is defined, for combination with the access
permission bits (AP). This gives permissions as follows:

-----!------Permissions-------
AP S ! Supervisor !  User
-----!------------------------
00 0 ! No access  ! No access
00 1 ! Read       ! No access
01 X ! Read/Write ! No access
10 X ! Read/Write ! Read
11 X ! Read/Write ! Read/Write


The TLB has 32 entries.


4.1 ARM 710
-----------

The ARM 710 MMU is as described in 4.0, without the Updateable bit.
Two bits are defined in the Control Register ('S', system; 'R', ROM)
for combination with the access permission bits (AP). This gives
permissions as follows:

-------!------Permissions-------
AP S R ! Supervisor !  User
-------!------------------------
00 0 0 ! No access  ! No access
00 1 0 ! Read       ! No access
00 0 1 ! Read       ! Read
00 1 1 !        Reserved
01 X X ! Read/Write ! No access
10 X X ! Read/Write ! Read
11 X X ! Read/Write ! Read/Write
XX 1 1 !        Reserved

The TLB is "larger than that for 610" (64 entry?).


4.2 ARM 810
-----------

Essentially similar to 710, with the following additions:

A Terminal exception can be raised, if cache wrtieback is attempted to
a virtual address that corresponds to an invalid MMU page table entry.

A vector exception is raised if processor *reads* (as well as writes,
as with 710) from locations 0x00000000 to 0x0000001F inclusive when
in 26-bit mode.

TLB entries can be locked-down.

ARM 810 allows selection of write-through or write-back cache operation
(set CB bits in Section or Page descriptors to 10 for write-through
cached, and buffered).

Note that ARM 810 (with write back cache), must have cache cleaned
*before* MMU remapping, since writebacks rely on translation of virtual
addresses in cache.

The TLB is 64 entries.

4.3 StrongARM
-------------

[Little MMU info so far. Presumably, similar to ARM 810, without
write-through and lock-down extras]

Separate instruction and data TLBs; 32 entries each; round-robin
replacement.

StrongARM appears not to need cache clean *before* (as opposed to
after) MMU remapping, because cache entries include physical address.


5. System Control Processor (CoPro 15) Registers
------------------------------------------------

5.1 ARM 610
-----------

Reg  0: Processor ID
Reg  1: Control Register (bits 0..8 defined)
Reg  2: Translation Table Base (bits 31:14)
Reg  3: Domain Access Control (16x 2bits)
Reg  4: Reserved
Reg  5: Fault Status (read); TLB flush (write)
Reg  6: Fault Address (read); TLB purge entry (write)
Reg  7: IDC flush
Regs 8-15: Reserved


5.2 ARM 710
-----------

Reg  0: Processor ID
Reg  1: Control Register (bits 0..10 defined)
Reg  2: Translation Table Base (bits 31:14)
Reg  3: Domain Access Control (16x 2bits)
Reg  4: Reserved
Reg  5: Fault Status (read); TLB flush (write)
Reg  6: Fault Address (read); TLB purge entry (write)
Reg  7: IDC flush
Regs 8-15: Reserved

[Same basic regs. as 610; 2 extra Control bits]


5.3 ARM 810
-----------

Reg  0: Processor ID
Reg  1: Control Register (bits 0..11 defined, some fixed)
Reg  2: Translation Table Base (bits 31:14)
Reg  3: Domain Access Control (16x 2bits)
Reg  4: Reserved
Reg  5: Fault Status (read and write)
Reg  6: Fault Address (read and write)
Reg  7: Cache functions (4 functions)
Reg  8: TLB functions (2 functions)
Reg  9: Cache lock-down
Reg 10: TLB lock-down
Regs 11-15: Reserved


5.4 StrongARM
-------------

Reg  0: Processor ID
Reg  1: Control Register (bits 0..12 defined, some fixed)
Reg  2: Translation Table Base (bits 31:14)
Reg  3: Domain Access Control (16x 2bits)
Reg  4: Reserved
Reg  5: Fault Status (read and write)
Reg  6: Fault Address (read and write)
Reg  7: Cache functions (7 functions)
Reg  8: TLB functions (4 functions)
Regs 9-14: Reserved
Reg 15: Test,clock and idle control


6. Instruction Memory Barrier (IMB)
-----------------------------------

6.0 General
-----------

The IMB must be used to make the instruction stream coherent with the data memory,
after the instruction stream is changed and before the modified instructions are
executed. This has implications for program loading (instructions treated as data),
and any form of self modifying code. Also, changing the virtual to physical
mapping can change the instruction stream, and so should be accompanied by IMB.

[The IMB SWIs are no longer defined by Architecture 4; may still be recommended,
as described below]
The newer ARM architecture defines two pre-allocated SWI numbers for IMB (0xF00000)
and IMBRange (0xF00001). The former flushes all stored info regarding instruction
stream, the latter for instructions at addresses within the range specified
by R0 (inclusive) to R1 (exclusive).

The ARM 610 and 710 have no IMB considerations, because of the mixed instruction
and data cache, and the lack of branch prediction etc. The ARM 810 has IMB
considerations because of branch prediction; the StrongARM because of the separate
instruction/data cache architecture.

For both ARM 810 and StrongARM, the IMB and IMBRange instruction must be
appropriately handled in OS software. 

6.1 ARM 810
-----------
For ARM 810, the SWI call is sufficient in itself (flushes prefetch unit), so:

IMB
IMBRange
  MOVS PC,R14_svc


6.2 StrongARM
--------------

For StrongARM ... [clean DC, drain write buffer, flush IC ]


7. Storing R15
--------------

7.1 ARM 610
-----------

In general, when R15 is stored (eg. STR R15,[R0]), the value is PC+12.

7.2 ARM 710
-----------

Same as ARM 610.

7.3 ARM 810
-----------

In general, when R15 is stored (eg. STR R15,[R0]), the value is PC+8.
(Some more obscure uses of R15 are now said to be UNPREDICTABLE, I think).

7.4 StrongARM
-------------

Same as ARM 810.


mjs, Jan 96
