import java.awt.*;
import com.acorn.MPEG.*;

/**
  * InformationWindow.java
  * --
  * @author Robert Dyke
  * @version Tue Apr 06 14:56:21 1999
  *
  */
public class InformationWindow extends Canvas
  implements Runnable
{
  static int DEFAULT_INDENT = 3;
  static int DEFAULT_DELAY = 10;
  static int DEFAULT_PAUSE = 3000;
  static int DEFAULT_SPEED = 4;

  private Image offImage;                 // off screen image
  private Graphics offGraphics;           // off screen graphics context

  private Color textColor;                // the colour of the text
  private Color background;               // the background colour

  private Thread runner;                  // the thread

  private String[] text;                  // the text
  private int noLines;                    // the number of lines

  private int currentY;                   // current y coordinate
  private int indent = DEFAULT_INDENT;    // indented x coordinate
  private int delay = DEFAULT_DELAY;      // the thread sleep time
  private int pauseTime = DEFAULT_PAUSE;  // the amount of time to pause
  private int speed = DEFAULT_SPEED;      // the number of pixels to increment

  private Font font;                      // the font to use
  private int fontSize;                   // the size of the font

  /**
    * Constructor
    * @param text the text to display
    * @param font the font to use
    * @param fontSize the size of the font
    * @param textColor the colour of the text
    * @param background the background colour
    */
  public InformationWindow(
    String[] text, String font, int fontSize, Color textColor, Color background)
  {
    noLines = text.length;
    this.text = new String[noLines];
    this.text = text;

    this.font = new Font(font, Font.PLAIN, fontSize);
    this.fontSize = fontSize;

    this.textColor = textColor;
    this.background = background;
  }

  /**
    * This method initialises the off screen image,
    * the off screen graphics context and the current
    * y coordinate
    *
    * NOTE: This method should <i>only</i> be called
    * when the component is displayed i.e. after a
    * show() method call
    */
  public void initIW()
  {
    offImage = createImage(size().width, size().height);
    offGraphics = offImage.getGraphics();
    currentY = size().height + fontSize;
  }

  /**
    * This method performs all graphical operations
    * @param g the graphics context to use
    */
  public void paint(Graphics g)
  {
    /* clear the previous image */
    offGraphics.setColor(background);
    offGraphics.fillRect(0,0, size().width, size().height);

    /* draw the lines */
    offGraphics.setColor(textColor);
    offGraphics.setFont(font);

    for(int i = 0; i < noLines; i++)
    {
      offGraphics.drawString(text[i], indent, currentY + (i * fontSize));
    }

    /* flip the buffer */
    g.drawImage(offImage, 0,0, this);
  }

  /**
    * The off screen image is the same size as the component
    * so there is no need to clear the component on repaints.
    * The paint method is called here.
    * @param g the graphics context to use
    */
  public void update(Graphics g)
  {
    paint(g);
  }

  /**
    * This method creates the thread and starts it
    */
  public void startScrolling()
  {
    runner = null;
    runner = new Thread(this);
    runner.start();
  }

  /**
    * This method stops the thread
    */
  public void stopScrolling()
  {
    if(runner != null)
    {
      runner.stop();
      runner = null;
    }
  }

  /**
    * This method implements the Runnable interface
    * Here the y coordinate is decremented and the repaint
    * method called
    */
  public void run()
  {
    Thread me = Thread.currentThread();

    while(me == runner)
    {
      repaint();
      synchronized(this)
      {
        currentY -= speed;
        if(noMoreText())
        {
          currentY = size().height + fontSize;
        }
        else if(pageDone())
        {
          pause();
        }
      }
      try
      {
        Thread.sleep(delay);
      }
      catch(InterruptedException e) {}
    }
  }

  /**
    * This method returns true if all the text
    * has been displayed i.e. the bottom of the
    * text is off the screen
    * @return boolean true if displayed false otherwise
    */
  private boolean noMoreText()
  {
    if((currentY + (noLines * fontSize)) < 0)
    {
      return true;
    }
    else
    {
      return false;
    }
  }

  /**
    * This method returns true if a page of
    * text has been displayed
    * @return boolean true if a page has been displayed
    * false otherwise
    */
  private boolean pageDone()
  {
    if(((currentY - fontSize) % size().height) == 0)
    {
      return true;
    }
    else
    {
      return false;
    }
  }

  /**
    * This method sends the thread to sleep
    */
  private void pause()
  {
    try
    {
      Thread.sleep(pauseTime);
    }
    catch(InterruptedException e) {}
  }
} // end of class InformationWindow
