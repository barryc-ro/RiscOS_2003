import java.awt.*;
import java.applet.*;
import com.acorn.MPEG.*;

/**
  * MPEGInterface.java
  * --
  * @author Robert Dyke
  * @version Wed Apr 07 09:26:18 1999
  *
  */
public class MPEGInterface extends Applet
  implements MPEGListener
{
  // keyboard constants
  static final int KEY_MENU = 1011;     // m key 109 (IR 1011 'Options')
  static final int KEY_INFO = 1009;     // i key 105 (IR 1009)
  static final int LEFT_ARROW = 1006;   // left arrow key 1006 (IR 1036)
  static final int RIGHT_ARROW = 1007;  // right arrow key 1007 (IR 1037)
  static final int KEY_SELECT = 10;     // return 10 (IR 10)
  static final int KEY_PLAY = 1016;     // p key 112(IR 1016)
  static final int KEY_STOP = 1018;     // s key 115(IR 1018)
  static final int KEY_STOP_KEYBOARD = 115;
  static final int KEY_PAUSE = 1013;    // space bar 32 (IR 1013)
  static final int KEY_REWIND = 1015;   // r key 114 (IR 1015)
  static final int KEY_FORWARD = 1017;  // f key 102 (IR 1017)
  static final int KEY_THREADS = 116;   // t key (none)
  static final int KEY_DEBUG = 100;     // d key (none)

  Panel control_panel;  // the panel to use for the controls

  Icon rewind_icon;     // rewind icon
  Icon forward_icon;    // forward icon
  Icon stop_icon;       // stop icon
  Icon play_icon;       // play icon
  Icon pause_icon;      // pause icon
  IconGroup controls;   // an icon group object to use with the above

  Image rewind_img;     // the image to use for rewind
  Image forward_img;    // the image to use for forward
  Image stop_img;       // the image to use for stop
  Image play_img;       // the image to use for play
  Image pause_img;      // the image to use for pause
  Image intro_img;      // the introductory image
  Image logo_img;       // logo image to display when playing

  String rewindImageName;   // name of the rewind image
  String forwardImageName;  // name of the forward image
  String stopImageName;     // name of the stop image
  String playImageName;     // name of the play image
  String pauseImageName;    // name of the pause image
  String introImageName;    // name of the intro image
  String logoImageName;     // the name of the logo image

  String fileName;          // the name of the MPEG
  String extension;         // the extension of the MPEG
  String server;            // the server
  String transport;         // the MPEG transport

  StreamController sc;      // the MPEG player

  InformationWindow window; // a window to display information about the MPEG

  DisappearingGraphic rewind_graphic;   // the graphic to display when play is selected
  DisappearingGraphic forward_graphic;  // the graphic to display when forward is selected
  DisappearingGraphic stop_graphic;     // the graphic to display when stop is selected
  DisappearingGraphic play_graphic;     // the graphic to display when play is selected
  DisappearingGraphic pause_graphic;    // the graphic to display when pause is selected

  Graphic logo_graphic; // the graphic to display when playing

  boolean playMode = false;           // is the interface in play mode
  boolean streamCreated = false;      // has a controller been created successfully
  boolean usingLogoGraphic = true;    // are we using a logo graphic
  boolean debug = true;               // set this field to true to display debugging info

  // applet constants
  static final int APPLET_WIDTH = 628;   // the width of the applet
  static final int APPLET_HEIGHT = 476;  // the height of the applet

  static final int TIMEOUT = 3;  // the number of seconds to display a disappearing graphic

  static final int CP_WIDTH = 250;                           // the width of the control panel
  static final int CP_HEIGHT = 50;                           // the height of the control panel
  static final int CP_XPOS = APPLET_WIDTH/2 - CP_WIDTH/2;    // the x coordinate of the control panel
  static final int CP_YPOS = 400;                            // the y coordinate of the control panel

  static final int W_WIDTH = 350;                           // the width of a window
  static final int W_HEIGHT = 200;                          // the height of a window
  static final int IW_XPOS = 20;                            // the x coordinate of the information window
  static final int IW_YPOS = APPLET_HEIGHT/2 - W_HEIGHT/2;  // the y coordinate of the information window

  static final int DG_WIDTH = 50;                                 // the width of the disappearing graphics
  static final int DG_HEIGHT = 50;                                // the height of the disappearing graphics
  static final int DG_INDENT = 20;                                // the ident from the top right
  static final int DG_XPOS = APPLET_WIDTH - DG_WIDTH - DG_INDENT; // the x coordinate of the disappearing graphics
  static final int DG_YPOS = DG_INDENT;                           // the y coordinate of the disappearing graphics

  static final int LOGO_WIDTH = 50;                               // the width of the logo
  static final int LOGO_HEIGHT = 50;                              // the height of the logo
  static final int LOGO_INDENT = 20;                              // the logo indent

  /**
    * This method initialises the applet
    */
  public void init()
  {
    setBackground(new Color(0x0000e0));
    setForeground(new Color(0xffffff));

    // no layout manager
    setLayout(null);

    // read all parameters
    readParameters();

    // create the stream
    try
    {
      sc = new StreamController(fileName, extension, server, transport);
      streamCreated = true;
    }
    catch(Throwable th)
    {
      System.out.println("Piers code says: " + th.toString());
      th.printStackTrace();
    }
    if(!streamCreated)
    {
      System.err.println("No StreamController created");
    }
    else
    {
      sc.addMPEGListener(this);
      if(debug)
      {
        System.out.println("Using version: " + sc.getVersion());
      }
    }

    // initialise the interface
    readImages();
    initialiseControlPanel();
    initialiseInformation();
    initialiseGraphics();
  }

  /**
    * Reads all parameters
    */
  private void readParameters()
  {
    // image parameters
    rewindImageName = getParameter("rewind_image");
    forwardImageName =  getParameter("forward_image");
    stopImageName =  getParameter("stop_image");
    playImageName =  getParameter("play_image");
    pauseImageName =  getParameter("pause_image");
    introImageName =  getParameter("intro_image");
    logoImageName = getParameter("logo_image");

    if(logoImageName == null)
    {
      usingLogoGraphic = false;
    }

    // mpeg parameters
    fileName = getParameter("filename");
    extension = getParameter("extension");
    server = getParameter("server");
    transport = getParameter("transport");

    if(debug)
    {
      System.out.println("Using rewind image:" + rewindImageName);
      System.out.println("Using forward image: " + forwardImageName);
      System.out.println("Using stop image: " + stopImageName);
      System.out.println("Using play image: " + playImageName);
      System.out.println("Using pause image: " + pauseImageName);
      System.out.println("Using intro image: " + introImageName);
      System.out.println("Using logo image: " + logoImageName);

      System.out.println("Using filename: " + fileName);
      System.out.println("Using extension: " + extension);
      System.out.println("Using server: " + server);
      System.out.println("Using transport: " + transport);
    }
  }

  /**
    * This method loads all the images required by the applet
    */
  private void readImages()
  {
    // use a media tracker to wait for images to load
    MediaTracker tracker = new MediaTracker(this);

    // get the images
    rewind_img = getImage(getDocumentBase(), rewindImageName);
    forward_img = getImage(getDocumentBase(), forwardImageName);
    stop_img = getImage(getDocumentBase(), stopImageName);
    play_img = getImage(getDocumentBase(), playImageName);
    pause_img = getImage(getDocumentBase(), pauseImageName);
    intro_img = getImage(getDocumentBase(), introImageName);
    if(usingLogoGraphic)
    {
      logo_img = getImage(getDocumentBase(), logoImageName);
    }

    // add the images to the media tracker
    tracker.addImage(rewind_img, 0);
    tracker.addImage(forward_img, 0);
    tracker.addImage(stop_img, 0);
    tracker.addImage(play_img, 0);
    tracker.addImage(pause_img, 0);
    tracker.addImage(intro_img, 0);
    if(usingLogoGraphic)
    {
      tracker.addImage(logo_img, 0);
    }

    // wait for the images to load
    try
    {
      tracker.waitForID(0);
    }
    catch(InterruptedException e) {}

    // check for problems
    if((tracker.statusID(0, false) & MediaTracker.ERRORED) != 0)
    {
      System.err.println("There was an error loading the images");
    }
    else if((tracker.statusID(0, false) & MediaTracker.COMPLETE) != 0)
    {
      if(debug)
      {
        System.out.println("Images loaded sucessfully");
      }
    }
  }

  /**
    * This method initialises the control panel
    */
  private void initialiseControlPanel()
  {
    // create the panel
    control_panel = new Panel();
    control_panel.setLayout(new GridLayout(1,5));

    // create the icons
    rewind_icon = new Icon(rewind_img, getBackground());
    forward_icon = new Icon(forward_img, getBackground());
    stop_icon = new Icon(stop_img, getBackground());
    play_icon = new Icon(play_img, getBackground());
    pause_icon = new Icon(pause_img, getBackground());

    // create the icon group with the stop icon selected
    controls = new IconGroup(stop_icon);

    // set up the icons
    rewind_icon.setLeft(pause_icon);
    rewind_icon.setRight(forward_icon);
    forward_icon.setLeft(rewind_icon);
    forward_icon.setRight(stop_icon);
    stop_icon.setLeft(forward_icon);
    stop_icon.setRight(play_icon);
    play_icon.setLeft(stop_icon);
    play_icon.setRight(pause_icon);
    pause_icon.setLeft(play_icon);
    pause_icon.setRight(rewind_icon);

    // add the icons to the panel
    control_panel.add(rewind_icon);
    control_panel.add(forward_icon);
    control_panel.add(stop_icon);
    control_panel.add(play_icon);
    control_panel.add(pause_icon);

    // position the panel and add it to the applet
    control_panel.resize(CP_WIDTH, CP_HEIGHT);
    control_panel.move(CP_XPOS, CP_YPOS);
    add(control_panel);

    // hide the panel
    control_panel.hide();
  }

  /**
    * This method initialises the information
    */
  private void initialiseInformation()
  {
    // read the text to display
    String[] text = new String[10];

    for(int i = 0; i < text.length; i++)
    {
      text[i] = getParameter("info" + i);
    }

    // create the information window
    window = new InformationWindow(text, "TimesRoman", 32, Color.green, getBackground());

    // position the window and add to the applet
    window.resize(W_WIDTH, W_HEIGHT);
    window.move(IW_XPOS, IW_YPOS);

    add(window);

    // hide the component
    window.hide();
  }

  /**
    * This method initialises all the disappearing graphics / graphics
    * in the applet
    */
  private void initialiseGraphics()
  {
    // create the disappearing graphics
    rewind_graphic = new DisappearingGraphic(rewind_img, TIMEOUT);
    forward_graphic = new DisappearingGraphic(forward_img, TIMEOUT);
    stop_graphic = new DisappearingGraphic(stop_img, TIMEOUT);
    play_graphic = new DisappearingGraphic(play_img, TIMEOUT);
    pause_graphic = new DisappearingGraphic(pause_img, TIMEOUT);

    // create logo graphic
    logo_graphic = new Graphic(logo_img);

    // postion them and add to the applet
    rewind_graphic.resize(DG_WIDTH, DG_HEIGHT);
    rewind_graphic.move(DG_XPOS, DG_YPOS);
    forward_graphic.resize(DG_WIDTH, DG_HEIGHT);
    forward_graphic.move(DG_XPOS, DG_YPOS);
    stop_graphic.resize(DG_WIDTH, DG_HEIGHT);
    stop_graphic.move(DG_XPOS, DG_YPOS);
    play_graphic.resize(DG_WIDTH, DG_HEIGHT);
    play_graphic.move(DG_XPOS, DG_YPOS);
    pause_graphic.resize(DG_WIDTH, DG_HEIGHT);
    pause_graphic.move(DG_XPOS, DG_YPOS);
    logo_graphic.move(LOGO_INDENT, LOGO_INDENT);
    logo_graphic.resize(LOGO_WIDTH, LOGO_HEIGHT);

    add(rewind_graphic);
    add(forward_graphic);
    add(stop_graphic);
    add(play_graphic);
    add(pause_graphic);
    add(logo_graphic);

    // hide the components
    rewind_graphic.hide();
    forward_graphic.hide();
    stop_graphic.hide();
    play_graphic.hide();
    pause_graphic.hide();
    logo_graphic.hide();
  }

  /**
    * This method paints the applet. If the interface is in play mode
    * a filled rectangle is painted clearing the background ready to play
    * a MPEG. Otherwise the into graphic is drawn.
    * @param g the graphics context to use
    */
  public void paint(Graphics g)
  {
    if(!playMode)
    {
      g.drawImage(intro_img, 0,0, APPLET_WIDTH, APPLET_HEIGHT, this);
    }
    else
    {
      g.setColor(getBackground());
      g.fillRect(0,0,APPLET_WIDTH,APPLET_HEIGHT);
    }
  }

  /**
    * The intro graphic fills the applet so we only need
    * call the paint method on repaints
    * @param g the graphics context to use
    */
  public void update(Graphics g)
  {
    paint(g);
  }

  /**
    * This method is called when the applet is to be stopped.
    * Here all threads are stopped by calling the relervant
    * methods of the components
    */
  public void stop()
  {
    window.stopScrolling();
    rewind_graphic.hide();
    forward_graphic.hide();
    stop_graphic.hide();
    play_graphic.hide();
    pause_graphic.hide();

    if(streamCreated && sc.isPlaying())
    {
      try
      {
      sc.close();
      }
      catch(MPEGException e)
      {
         System.out.println(e.toString());
      }
    }
  }

  /**
    * This method is called when the applet is being reclaimed.
    * Here the stream is disposed off.
    */
  public void destroy()
  {
    if(streamCreated)
    {
      sc.dispose();
    }
  }

  /**
    * This method prepares the interface to play
    * an MPEG and plays the MPEG
    */
  private void startPlaying()
  {
    if(stop_graphic.isShowing())
    {
      stop_graphic.hide();
    }

    if(!playMode)
    {
      playMode = true;
      repaint();
      play_graphic.show();
      if(usingLogoGraphic)
      {
        logo_graphic.show();
      }
    }

    if(streamCreated)
    {
      try
      {
        sc.play();
      }
      catch(MPEGException e)
      {
        System.out.println(e.toString());
      }
    }
  }

  /**
    * This method prepares the interface to stop
    * playing an MPEG and stops the MPEG. This method
    * will be called when the stop button is pressed
    */
  private void stopPlaying()
  {
    if(play_graphic.isShowing())
    {
      play_graphic.hide();
    }
    if(window.isShowing())
    {
      window.hide();
      window.stopScrolling();
    }

    if(playMode)
    {
      stop_graphic.show();
      if(usingLogoGraphic)
      {
        logo_graphic.hide();
      }
      playMode = false;
      repaint();
    }

    if(streamCreated)
    {
      try
      {
        sc.close();
      }
      catch(MPEGException e)
      {
        System.out.println(e.toString());
      }
    }
  }

  /**
    * This method pauses the MPEG
    */
  private void pause()
  {
    if(!pause_graphic.isShowing() && playMode)
    {
      pause_graphic.show();
    }
    if(streamCreated)
    {
      try
      {
        sc.togglePause();
      }
      catch(MPEGException e)
      {
        System.out.println(e.toString());
      }
    }
  }

  /**
    * This method rewinds the MPEG
    */
  private void rewind()
  {
    if(!rewind_graphic.isShowing() && playMode)
    {
      rewind_graphic.show();
    }
    if(streamCreated && sc.isPlaying())
    {
      try
      {
        sc.setSpeed(StreamController.SPEED_REW);
      }
      catch(MPEGException e)
      {
        System.out.println(e.toString());
      }
    }
  }

  /**
    * This method fast-forwards the MPEG
    */
  private void forward()
  {
    if(!forward_graphic.isShowing() && playMode)
    {
      forward_graphic.show();
    }
    if(streamCreated && sc.isPlaying())
    {
      try
      {
        sc.setSpeed(StreamController.SPEED_FF);
      }
      catch(MPEGException e)
      {
        System.out.println(e.toString());
      }
    }
  }

  /**
    * This method is called whenever a key event occurs
    */
  public boolean keyDown(Event evt, int key)
  {
    if(debug)
    {
      System.err.println(key);
    }

    switch(key)
    {
      case KEY_MENU:
        if(!control_panel.isShowing())
        {
          control_panel.show();
        }
        else
        {
          control_panel.hide();
        }
      break;

      case KEY_INFO:
        if(!window.isShowing())// && playMode)
        {
          window.show();
          window.initIW();
          window.startScrolling();
        }
        else
        {
          window.hide();
          window.stopScrolling();
        }
      break;

      case LEFT_ARROW:
        if(control_panel.isShowing())
        {
          controls.setCurrent(controls.getCurrent().getLeft());
        }
      break;

      case RIGHT_ARROW:
        if(control_panel.isShowing())
        {
          controls.setCurrent(controls.getCurrent().getRight());
        }
      break;

      case KEY_SELECT:
        if(control_panel.isShowing())
        {
          Icon current = controls.getCurrent();
          if(current == play_icon)
          {
            startPlaying();
          }
          else if(current == stop_icon)
          {
            stopPlaying();
          }
          else if(current == pause_icon)
          {
            pause();
          }
          else if(current == rewind_icon)
          {
            rewind();
          }
          else if(current == forward_icon)
          {
            forward();
          }
        }
      break;

      case KEY_PLAY:
        startPlaying();
      break;

      case KEY_STOP:
        stopPlaying();
      break;

      case KEY_STOP_KEYBOARD:
        stopPlaying();
      break;

      case KEY_PAUSE:
       pause();
      break;

      case KEY_REWIND:
       rewind();
      break;

      case KEY_FORWARD:
        forward();
      break;

      case KEY_THREADS:
        System.out.println("No of threads: " + Thread.activeCount());
      break;

      case KEY_DEBUG:
        if(debug)
        {
          System.out.println("Debug off");
          debug = false;
        }
        else
        {
          System.out.println("Debug on");
          debug = true;
        }
      break;
    }
    return true;
  }

  /******* MPEGListener methods ********/

  public void mpegPauseTimeout(MPEGEvent e) {}
  public void mpegStarted(MPEGEvent e) {}

  public void mpegEnded(MPEGEvent e)
  {
    stopPlaying();
  }

  public void mpegStreamClosed(MPEGEvent e) {}
  public void mpegError(MPEGErrorEvent e) {}
  public void mpegDiagnostic(MPEGDiagnosticEvent e) {}
  public void mpegUnknownEvent(MPEGUnknownEvent e) {}

  /**
    * Returns information about this applet
    */
  public String getAppletInfo()
  {
    return "MPEGInterface\r\n--\r\nauthor Robert Dyke\r\nversion 12/04/99\r\ncopyright Element 14";
  }

  /**
    * Returns information about the parameters understood
    * by this applet
    */
  public String [][] getParameterInfo()
  {
    String info[][] = {
                        {"filename","String","The name of the MPEG"},
                        {"extension","String","The extension to be appended to the filename"},
                        {"server","String","The name of the video server"},
                        {"transport","String either 'mpeg1ss or 'mpeg2ts'","The transport"},
                        {"rewind_image", "<image location>", "The image to use for rewind"},
                        {"forward_image", "<image location>", "The image to use for forward"},
                        {"stop_image", "<image location>", "The image to use for stop"},
                        {"play_image", "<image location>", "The image to use for play"},
                        {"pause_image", "<image location>", "The image to use for pause"},
                        {"intro_image", "<image location>", "The intro image"},
                        {"logo_image", "<image location>", "The logo image"},
                        {"infox", "A line of text", "Some text to display up tp ten lines"}
                      };
    return info;
  }
} // end of class MPEGInterface
