import java.awt.*;

/**
  * Icon.java
  * --
  * @author Robert Dyke
  * @version Tue Apr 06 09:15:11 1999
  *
  */
public class Icon extends Canvas
{
  private Image img;          // the image to use
  private Icon left;          // the icon on the left
  private Icon right;         // the icon on the right
  private IconGroup group;    // the icon group this icon belongs to
  private boolean selected;   // whether the icon is currently selected

  /**
    * Constructor
    * @param img the icon image to use
    * @param background the background colour to use
    */
  public Icon(Image img, Color background)
  {
    this.img = img;
    setBackground(background);
  }

  /**
    * Draws the image with a one pixel border then
    * calls the either the select(Graphics g) or
    * deselect(Graphics g) depending on the boolean
    * selected.
    * @param g the graphics context to paint to
    */
  public void paint(Graphics g)
  {
    g.drawImage(img, 1, 1, size().height - 1, size().height - 1, this);

    if(selected)
    {
      select(g);
    }
    else
    {
      deselect(g);
    }
  }

  /**
    * The image fills the component so there is no need
    * to clear the component on repaints. This method
    * just calls the paint method.
    * @param g the graphics context to paint to
    */
  public void update(Graphics g)
  {
    paint(g);
  }

  /**
    * Draws a red rectangle outline
    * @param g the graphics context to paint to
    */
  protected void select(Graphics g)
  {
    g.setColor(Color.red);
    g.drawRect(0,0, size().width - 1, size().height - 1);
  }

  /**
    * Draws a rectangle outline the colour returned by
    * getBackground()
    */
  protected void deselect(Graphics g)
  {
    g.setColor(Color.gray);
    g.drawRect(0,0, size().width - 1, size().height - 1);
  }

  /**
    * Sets the boolean field selected to true and
    * repaints
    */
  public void select()
  {
    selected = true;
    repaint();
  }

  /**
    * Sets the boolean field selected to false and
    * repaints
    */
  public void deselect()
  {
    selected = false;
    repaint();
  }

  /**
    * This method returns the icon on the left
    * @return Icon the icon on the left
    */
  public Icon getLeft()
  {
    return left;
  }

  /**
    * This method returns the icon on the right
    * @return Icon the icon on the right
    */
  public Icon getRight()
  {
    return right;
  }

  /**
    * This method sets the icon on the left
    * @param left the icon
    */
  public void setLeft(Icon left)
  {
    this.left = left;
  }

  /**
    * This method sets the icon on the right
    * @param right the icon
    */
  public void setRight(Icon right)
  {
    this.right = right;
  }

  /**
    * This method returns the icon group that this
    * icon belongs to
    * @return IconGroup the icon group
    */
  public IconGroup getIconGroup()
  {
    return group;
  }

  /**
    * This methods set the icon group
    * @param group the icon group
    */
  public void setIconGroup(IconGroup group)
  {
    this.group = group;
  }
} // end of class Icon
