#include <kernel.h>
#include <stdio.h>
#include "swis.h"

#include "cmhg.h"

#define  TM                     "STBUtils"
#define  UNUSED(x)              (x = x) /* suppress warnings */

#define Service_PreReset 0x45

#define UpcallV  0x1d

#define Upcall_Online   0x0d
#define Upcall_Standby  0x0e
#define STBState_Busy   0x4B403

/* Global variables */
static void *module_wspG = NULL;
int standbyFunction=0 ;

_kernel_oserror *stbutils_cmd(const char *arg_string, int argc, int cmd_no, void *pw)
{

    int p  = 0 ;
    int x  = 0 ;
    int xe = 0 ;
    int y  = 0 ;
    int ye = 0 ;
    int margin  = 32 ;   /* percentage width of box border */
    int hmargin = 25 ;   /* percentage horizontal margin   */
    int bheight = 10 ;   /* percentage vertical height     */

    int fullbarwidth = 0 ;
    int barheight    = 0 ;
    int xpos         = 0 ;
    int ypos         = 0 ;

    _kernel_oserror  *e;
    _kernel_swi_regs  regs;

    UNUSED(pw);
    if (cmd_no == 0) {             /* *Bar  */
       p = atoi(arg_string) ;
       regs.r[0] =      -1 ;
       regs.r[1] =      11 ;
       _kernel_swi (OS_ReadModeVariable, &regs, &regs) ;
       x = regs.r[2] + 1;
       regs.r[0] =      -1 ;
       regs.r[1] =      12 ;
       _kernel_swi (OS_ReadModeVariable, &regs, &regs) ;
       y = regs.r[2] + 1;
       regs.r[0] =      -1 ;
       regs.r[1] =       4 ;
       _kernel_swi (OS_ReadModeVariable, &regs, &regs) ;
       xe = regs.r[2]      ;
       regs.r[0] =      -1 ;
       regs.r[1] =       5 ;
       _kernel_swi (OS_ReadModeVariable, &regs, &regs) ;
       ye = regs.r[2]      ;
       x = x << xe ;
       y = y << ye ;

       fullbarwidth = x * (100-hmargin) / 100 ;
       barheight    = y * bheight / 100       ;
       xpos         = x * hmargin / 2 / 100   ;
       ypos         = (y - barheight) / 2     ;

       colour(0x00f00000) ;  /* 0xbbggrr00 */
       rectangle(xpos,ypos,fullbarwidth,barheight) ;
       colour(0) ;
       rectangle(xpos+margin/2,ypos+margin/2,fullbarwidth-margin,barheight-margin) ;
       colour(0x00f00000) ;  /* 0xbbggrr00 */
       rectangle(xpos+margin/2,ypos+margin/2,fullbarwidth*p/100,barheight-margin) ;
    }
    
    if (cmd_no == 1) {             /* LEDs  */    
       p = atoi(arg_string) ;
       leds(p) ;
    }

    if (cmd_no == 2) {             /* StandbyFuction  */    
       standbyFunction = atoi(arg_string) ;
    }
    return NULL;
}

int leds(int p){
    _kernel_swi_regs  regs;
    if (p != 0 ) {
      p = 1 ;
    }
    regs.r[0] = p ;
    _kernel_swi (STBState_Busy, &regs, &regs) ;
}


int colour(int col) {
    _kernel_swi_regs  regs;
    regs.r[0] = col ;
    regs.r[3] = 0   ; /* Flags = 0 -> Set foreground colour */
    regs.r[4] = 0   ; /* GCOL action 0 -> Set colour        */
    _kernel_swi (ColourTrans_SetGCOL, &regs, &regs) ;

    return 0 ; }

int rectangle(int x, int y, int w, int h) {
    _kernel_swi_regs  regs;
    regs.r[0] = 4 ;                            /* Move absolute       */
    regs.r[1] = x ;
    regs.r[2] = y ;
    _kernel_swi (OS_Plot, &regs, &regs) ;    
    regs.r[0] = 96+1 ;                         /* Plot solid relative */
    regs.r[1] = w ;
    regs.r[2] = h ;
    _kernel_swi (OS_Plot, &regs, &regs) ;  
    return 0;
}


int readMPEGplayerState()
{
    return readVarValue("STB$MPEGPlayStatus") ;
}

int readVarValue(char *name)
{
    _kernel_swi_regs  regs;
    _kernel_oserror    *e ;
    char *buffer ;
    int val = 0;
    buffer = (char *) malloc(0x100) ;
    regs.r[0] = (int) name   ;   /* r0 points to name of system variable */
    regs.r[1] = (int) buffer ;
    regs.r[2] = 0x100 ;
    e = _kernel_swi (OS_ReadVarVal, &regs, &regs) ;
    /* if (e != NULL) printf("Error:%s",e->errmess) ; */
    if (e == NULL) {
      if (regs.r[4] == 1) {
        val = (int) *buffer ;
        /* printf("Val = %d\n",val) ;  */
      }
    }
    free(buffer) ;
    return val ;
}



_kernel_oserror * stbutils_initialise(const char *cmd_tail, int podule_base, void *private_word)
{
    _kernel_swi_regs  regs;
    UNUSED(cmd_tail);
    UNUSED(podule_base);
    module_wspG = private_word ;

    regs.r[0] = UpcallV;
    regs.r[1] = (int)UpcallHandler_entry;
    regs.r[2] = (int)module_wspG;

    _kernel_swi(OS_AddToVector, &regs, &regs);

    leds(1) ;   /* Turn red LED off and flash green LED */

   return NULL;
}

_kernel_oserror *stbutils_finalise(int fatal, int podule, void *private_word)
{
   _kernel_swi_regs regs;

    UNUSED(fatal);
    UNUSED(podule);
    UNUSED(private_word);

   /* release Upcall vector */
   regs.r[0] = UpcallV;
   regs.r[1] = (int)UpcallHandler_entry;
   regs.r[2] = (int)module_wspG;

   _kernel_swi(OS_Release, &regs, &regs);

    return NULL;
}

int UpcallHandler(_kernel_swi_regs *regs, void *private_word)
{                                                            
   /* This routine called when Standby presses to turn STB off         *
    * Read setting of STB$StandbyFunction and then:                    *
    *    Unset or not Number then equate to function 0                 *
    *    Bit 0 -> Do nothing, default behavior is to blank the screen  *
    *    Bit 1 -> Set STB$StandbyPressed to abort MPEG                 *
    *    Bit 2 -> No reboot on coming back up                          */

   int result = 1;
   int m      ;
   _kernel_swi_regs r;

   UNUSED(private_word);

   if ( (regs->r[0] == Upcall_Standby) || (regs->r[0] == Upcall_Online) )
   {
      /* printf("ClaimSvc: just received Upcall %i ", regs->r[0]); */
      
      if(regs->r[0] == Upcall_Online)
      {
         /* Do nothing on coming back up. Handle this with Service_PreReset instead */
         if ((standbyFunction & 2) == 2) {
           if ((standbyFunction & 1) == 1) {
              r.r[0] = (int) "SetEval STB$StandbyPressed 0" ;
              _kernel_swi(OS_CLI, &r, &r);    /* Flag that it's OK to play MPEG */
           }
           regs->r[0] = 0 ;
           result = 0 ;
         }
      }

      else
      {

        /* If you want to not pass the call on then this is done by *
         *        result = 0 ;                                      *
         *        regs->r[0] = 0 ;                                  *
         * We never want to do this because we want the screen to   *
         * turn off                                                 */

        if ((standbyFunction & 1) == 1) {
           r.r[0] = (int) "SetEval STB$StandbyPressed 1" ;
           _kernel_swi(OS_CLI, &r, &r);    /* Flag to !MPEG not to flush buffer if stopping
                                              and in skip dialogue */
        }
      }
   }

   else
   {
      /* = pass it on, ie do nothing */
   }

   return result;
}

void stbutils_service(int service_number, _kernel_swi_regs *regs, void *private_word)
{
   /* This routine called when Standy presses to bring the STB back up *
    * Read setting of STB$StandbyFunction and then:                    *
    *    Unset or not Number then equate to function 0                 *
    *    Bit 0 -> Do nothing, default behavior is to blank the screen  *
    *    Bit 1 -> Set STB$StandbyPressed to abort MPEG                 *
    *    Bit 2 -> No reboot on coming back up                          */

   if ((standbyFunction & 2) == 2) {
      regs->r[1] = 0;       /* Claim the Service_PreReset so STBState doesn't OS_Reset */
   }

}
