                AREA        TxBuffer, CODE, READONLY


                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:System
                GET     Hdr:HostFS

                GET         a.swiextra
                GET         a.debuga
                GET         a.defs+ws
                GET         a.fs

                EXPORT      txbuffer_process

txbuffer_process
;
;Entry:
;  R0  =  parameter from R1 in call to ShareSound_InstallHandler
;  R1  -> base of buffer
;  R2  -> word immediately after end of buffer
;  R3  =  flags
;  R4  =  sample frequency
;  R5  =  sample period
;  R6  =  fractional step
;  R7  =  volume/balance
;
;Exit:
;  R3  =  flags, modified

                ;           ;
                STMFD       sp!, {r0-r2, r4-r9, r12, lr}
 [ debug:LAND:debugtx
                debuga_outs "SoundFS: SharedSound callback handler entered, data @"
                debuga_outx  r0
                debuga_outs ", buffer @"
                debuga_outx  r1
                debuga_outs ", pc "
                debuga_outx  pc
                debuga_outnl
 ]

                MOV         r4, r1 ; pop pointers to buffer
                MOV         r5, r2 ; and end somewhere safe
                MOV         r6, r3

                MOV         r7, r0 ; Our data block
                LDR         r8,  [r7, #FS_Workspace] ; R8 <- R12 value! / WS
 [ ReentryLock
                LDR         r12, [r8, #Lock]
                TEQ         r12, #0
                BNE         %FT90
                STR         r8, [r8, #Lock]
 ]
 [ {FALSE} ;debug
                STMFD       sp!, {r8-r9}
                MOV         r9, pc
                ORR         r8, r9, #3
                TEQP        r8, #0
                MOV         r0, r0
                STMFD       sp!, {lr}
                MOV         r0, #129
                SWI         XHostFS_WriteC
                LDMFD       sp!, {lr}
                MOV         r9, #0
                MOV         r0, r0
                LDMFD       sp!, {r8-r9}
 ]
                LDR         r12, [r8, #BufferR12]
                LDR         r3,  [r7, #FS_SizeLastProcess] ; assume
                LDR         r1,  [r7, #FS_TxBufferID]
                MOV         r0,  #Buffer_RC_NextFilledBlock

 [ debug:LAND:debugtx
                debuga_outs    "SoundFS: calling buffer entry point with "
                debuga_outx    r0
                debuga_outchar 32
                debuga_outx    r1
                debuga_outchar 32
                debuga_outx    r3
                debuga_outchar 32
                debuga_outx    r12
                debuga_outnl
 ]
                ADR         lr, %FT20
                LDR         pc,  [r8, #BufferEntry]
;                CLC
; [ debug
;                LDR         r0,  [r8, #BufferEntry]
;                debuga_outs "SoundFS: call address is "
;                debuga_outx r0
;                debuga_outnl
; ]


20
; r2  -> first byte in 'next' block
; r3  =  no. of bytes in 'next' block

;                LDMFD        sp!, {r0-r2, r4-r9, r12, pc}^
 [ debug:LAND:debugtx
                BCC         %FT23
                debuga_outs    "SoundFS: buffer call failed (CS)"
                debuga_outnl
 ]
23
                STRCS       r3, [r7, #FS_SizeLastProcess]
                BCS         %FT90

                SUB          r5, r5, r4 ; get size of destination buffer
 [ debug:LAND:debugtx
                debuga_outs  "SoundFS: source size "
                debuga_outx  r3
                debuga_outs  ", destination size "
                debuga_outx  r5
                debuga_outnl
 ]
                CMP          r3, r5 ; r3 = min (r3, r5)
                MOVHI        r3, r5 ;
                BICS         r3, r3, #3 ; round down to multiple of 4 (sample size)
                STR          r3, [r7, #FS_SizeLastProcess]
                BEQ          %FT90
; r2 = source
; r4 = destination
; r3 = size
 [ debug:LAND:debugtx
                debuga_outs "SoundFS: About to copy data"
                debuga_outnl
 ]
; ! 0, "Remove next line in txbuffer_process (nr label 30)"
;                LDMFD        sp!, {r0-r2, r4-r9, r12, pc}^

;temporary
; (inefficient, but then we're going to have to put processing here anyhow)
 [ {FALSE}
                ADR         lr, %FT90
                B           copy_data

                LDR          r0, [r7, #FS_SampleRate]
                LDR          r5, =CDSampleRate
                CMP          r0, r5, LSR #1
                ADR          lr, %FT90
                BEQ          double_rate
                B            copy_data
;                CMPHI        r0, r5
;                BEQ          copy_data
 |
                STMFD        sp!, {r6-r8}
                ADD          r2, r2, r3
                ADD          r4, r4, r3
                SUBS         r3, r3, #32
                BLO          %FT30
20
                LDMDB        r2!, {r0-r1, r5-r9, r12}
                STMDB        r4!, {r0-r1, r5-r9, r12}
                SUBS         r3, r3, #32
                BHS          %BT20
30
                ADD          r3, r3, #32
                CMP          r3, #4
                LDMFD        sp!, {r6-r8}
                BLO          %FT90
50
                SUBS         r3, r3, #4 ; (sample size)
                LDR          r0, [r2], #-4
                STR          r0, [r4], #-4
                BHI          %BT50

;                LDMFD        sp!, {r6-r8}
;30
;                SUBS         r3, r3, #4 ; (sample size)
;                LDR          r0, [r2, r3]
;                STR          r0, [r4, r3]
;                BHI          %BT30
 ]
90

 [ ReentryLock
                MOV          r3, #0
                STR          r3,  [r8, #Lock]
 ]
 [ debug:LAND:debugtx
                debuga_outs "SoundFS: SharedSound callback handler complete "
                debuga_outnl
 ]

 [ {FALSE}
                BIC          r3, r6, #31 :SHL: 2
 |
                MOV          r3, r6
 ]
;                MOV         r0, #130
;                SWI         XHostFS_WriteC
                LDMFD        sp!, {r0-r2, r4-r9, r12, pc}

copy_data ROUT
; these registers do not require preservation unless otherwise stated
; r0 = source sample rate
; r1 = don't care
; r2 = start of source buffer
; r3 = size of data in bytes, multiple of 4
; r4 = destination
; r5 = don't care
; r9 = don't care
; r6, r7, r8 MUST BE PRESERVED

;                STMFD        sp!, {r0-r1, r5-r9, lr}
                STMFD        sp!, {r6-r8, lr}
                ADD          r2, r2, r3
                ADD          r4, r4, r3
                SUBS         r3, r3, #32
                BLO          %FT30
20
;                CMP          r3, #32
;                BLO          %FT30
                LDMDB        r2!, {r0-r1, r5-r9, lr}
                STMDB        r4!, {r0-r1, r5-r9, lr}
                SUBS         r3, r3, #32
                BHS          %BT20
30
                ADDS         r3, r3, #32
;               CMP          r3, #4
                LDMLSFD      sp!, {r6-r8, pc}^
50
                SUBS         r3, r3, #4 ; (sample size)
                LDR          r0, [r2], #-4
                STR          r0, [r4], #-4
                BHI          %BT50

;                LDMFD        sp!, {r0-r1, r5-r9, pc}^
                LDMFD        sp!, {r6-r8, pc}^

double_rate     ROUT

; these registers do not require preservation
; r0  =  source sample rate
; r1  =  don't care
; r2  =  start of source buffer
; r3  =  size of data in bytes, multiple of 4
; r4  =  destination
; r5  =  don't care
; r9  =  don't care
; r12 =  don't care


; THESE REGISTERS MUST BE PRESERVED
; r7  -> data structure for this stream
; r6, r8 and all others MUST BE PRESERVED


                LDR          r0, [r7, #FS_LastSample]
                ADD          r3, r2, r3
20
                LDR          r1, [r2], #4          ;
                MOV          r9, r0, LSL #16       ; get left
                ADDS         r9, r9, r1, LSL #16   ; left1 + left0
                MOV          r9, r9, ASR #1        ; ÷ 2
                EORVS        r9, r9, #&80000000    ; correct sign
                BIC          r0, r0, #&ff00        ; avoid corruption of bottom bit (fussy)
                ADDS         r0, r0, r5            ; +
                MOV          r0, r0, ASR #17       ; ÷ 2
                MOV          r0, r0, LSL #16       ; cleanup
                EORVS        r0, r0, #&80000000    ; correct sign
                ORR          r0, r0, r9, LSR #16
                STMIA        r4!, {r0, r1}
                MOV          r0, r1
                CMP          r2, r3
                BLO          %BT20
                MOVS         pc, lr

                END
