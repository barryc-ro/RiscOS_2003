                AREA        TxBuffer, CODE, READONLY


                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:System
                GET     Hdr:HostFS

                GET         a.swiextra
                GET         a.debuga
                GET         a.defs+ws
                GET         a.fs

                EXPORT      txbuffer_process


txbuffer_process
;
;Entry:
;  R0  =  parameter from R1 in call to ShareSound_InstallHandler
;  R1  -> base of buffer
;  R2  -> word immediately after end of buffer
;  R3  =  flags
;  R4  =  sample frequency
;  R5  =  sample period
;  R6  =  fractional step
;  R7  =  volume/balance
;
;Exit:
;  R3  =  flags, modified

                STMFD       sp!, {r0-r8, r12, lr}

                MOV         r5,  r1    ; -> destination buffer
                SUB         r6, r2, r1 ; length of destination buffer
                MOV         r7,  r0    ; our data block

                LDR         r8, [r7, #FS_Workspace]
 [ ReentryLock
                LDR         r12, [r8, #Lock]
                TEQ         r12, #0
                BNE         %FT90 ; just exits, can't do much else
                STR         r8, [r8, #Lock]
 ]

                LDR         r12, [r8, #BufferR12]
                LDR         r3,  [r7, #FS_SizeLastProcess]
10
                LDR         r1,  [r7, #FS_TxBufferID]
                MOV         r0,  #Buffer_RC_NextFilledBlock

; Call buffer entry point

                MOV         lr, pc
                LDR         pc,  [r8, #BufferEntry]
20
; r2  -> first byte in 'next' block (start of this source buffer)
; r3  =  no. of bytes in 'next' block (length of this source buffer)

; if buffer empty then last process is zilch

                ADR         lr, %FT90 ; so that zero_remaining 'returns' to 90
                STRCS       r3, [r7, #FS_SizeLastProcess]
                BCS         zero_remaining
;               BCS %FT90
 [ debugtx
                debuga_outs  "SoundFS: source size "
                debuga_outx  r3
                debuga_outs  ", destination size "
                debuga_outx  r6
                debuga_outnl
 ]
 ASSERT :LNOT:DoTranslation

 ; If we do, at some later date, do translation then it is probably best to
 ; load sample size into a register and dedeuct 1 from it to use as the
 ; second source operand in the following two ops. An appropriate data
 ; copying routine should then be used.

                BIC          r3,  r3,  #3 ; word only source

                LDR          r0,  [r7, #FS_SampleRate]
                LDR          r4,  =CDSampleRate
                CMP          r0,  r4, LSR #1
                BNE          %FT50

; if rate = 22050 Hz
                BICEQ        r6,  r6,  #7 ; bi-word aligned desination
                CMP          r6,  r3,  LSL #1
                MOVLO        r3,  r6,  LSR #1
                SUB          r6,  r6,  r3,  LSL #1
                B            %FT60
50
; else rate = 44100 Hz
                BIC          r6,  r6,  #3 ; word only destination
                CMP          r3,  r6
                MOVHI        r3,  r6
                SUB          r6,  r6,  r3
60
                STR          r3, [r7, #FS_SizeLastProcess]
                CMP          r3, #0
                BEQ          zero_remaining

;                LDR          r0, [r7, #FS_SampleRate]
;                LDR          r4, =CDSampleRate
                CMP          r0, r4, LSR #1
                ADR          lr, %FT80
                BEQ          double_rate
                B            copy_data
80
                CMP          r6, #0
                LDRHI        r3, [r7, #FS_SizeLastProcess]
                BHI          %BT10
90

 [ ReentryLock
                MOV          r3, #0
                STR          r3,  [r8, #Lock]
 ]
                LDMFD        sp!, {r0-r8, r12, lr}
                BIC          r3, r3, #&fc
                MOVS         pc, lr

zero_remaining ROUT
; r5  -> start of area to zero
; r6  =  length of area to zero

 [ debugtx
                debuga_outs  "SoundFS: zeroing "
                debuga_outx  r5
                debuga_outs  " + "
                debuga_outx  r6
                debuga_outnl
 ]

                STMFD        sp!, {r6-r9, lr}
                ADR          r2, %FT60
                LDMIA        r2,  {r0-r1, r3, r4, r7-r9, lr}
                SUBS         r6, r6, #32
                BLO          %FT30
20
                STMIA        r5!, {r0-r1, r3, r4, r7-r9, lr}
                SUBS         r6, r6, #32
                BHS          %BT20
30
                ADDS         r6, r6, #32
;                CMP          r6, #4
                LDMLSFD      sp!, {r6-r9, pc}
50
                SUBS         r6, r6, #4 ; (sample size)
                STR          r0, [r5], #4
                BHI          %BT50

                LDMFD        sp!, {r6-r9, pc}
60
                DCD          0, 0, 0, 0, 0, 0, 0, 0
copy_data ROUT
; these registers do not require preservation unless otherwise stated
; r0  =  source sample rate (don't care)
; r1  =  don't care
; r2  -> start of source buffer
; r3  =  size of data in bytes, multiple of 4
; r4  =  don't care
; r5  -> destination
; r6, r7, r8, r9, r12 MUST BE PRESERVED

; on exit:
;   r5 ->  first word after the end of transfer

 [ debugtx
                debuga_outs  "SoundFS: copying "
                debuga_outx  r2
                debuga_outs  " + "
                debuga_outx  r3
                debuga_outs  " -> "
                debuga_outx  r5
                debuga_outnl
 ]
                STMFD        sp!, {r6-r9, lr}
                SUBS         r3, r3, #32
                BLO          %FT30
20
                LDMIA        r2!, {r0-r1, r4, r6-r9, lr}
                STMIA        r5!, {r0-r1, r4, r6-r9, lr}
                SUBS         r3, r3, #32
                BHS          %BT20
30
                ADDS         r3, r3, #32
;                CMP          r3, #4
                LDMLSFD      sp!, {r6-r9, pc}
50
                SUBS         r3, r3, #4 ; (sample size)
                LDR          r0, [r2], #4
                STR          r0, [r5], #4
                BHI          %BT50

;                LDMFD        sp!, {r0-r1, r5-r9, pc}^
                LDMFD        sp!, {r6-r9, pc}

double_rate     ROUT

; these registers do not require preservation
; r0  =  source sample rate
; r1  =  don't care
; r2  -> start of source buffer
; r3  =  size of data in bytes, multiple of 4
; r4  =  don't care
; r5  -> destination


; THESE REGISTERS MUST BE PRESERVED
; r7  -> data structure for this stream
; r6, r8, r9, r12 and all others MUST BE PRESERVED

; on exit:
;  r5 -> word after end of transfer

 [ debugtx
                debuga_outs  "SoundFS: processing (×2) "
                debuga_outx  r2
                debuga_outs  " + "
                debuga_outx  r3
                debuga_outs  " -> "
                debuga_outx  r5
                debuga_outnl
 ]
                LDR          r0, [r7, #FS_LastSample]
                ADD          r3, r2, r3
20
                LDR          r1, [r2], #4          ;
                MOV          r4, r0, LSL #16       ; get left
                ADDS         r4, r4, r1, LSL #16   ; left1 + left0
                MOV          r4, r4, ASR #1        ; ÷ 2
                EORVS        r4, r4, #&80000000    ; correct sign
                BIC          r0, r0, #&ff00        ; avoid corruption of bottom bit (fussy)
                ADDS         r0, r0, r1            ; +
                MOV          r0, r0, ASR #17       ; ÷ 2
                MOV          r0, r0, LSL #16       ; cleanup
                EORVS        r0, r0, #&80000000    ; correct sign
                ORR          r0, r0, r4, LSR #16
                STMIA        r5!, {r0, r1}
                MOV          r0, r1
                CMP          r2, r3
                BLO          %BT20
                STR          r1, [r7, #FS_LastSample]
                MOV          pc, lr

                END
