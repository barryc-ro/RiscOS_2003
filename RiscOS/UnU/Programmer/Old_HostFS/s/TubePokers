        SUBT    > TubePokers for Host Filing System

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;     Nasty Host interface - pinched from Brazil to let me do some testing !
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; All these entries may corrupt tubewrk and set up tubebase

           ^ 0, tubebase
R1_status  # 4
R1_data    # 4
R2_status  # 4
R2_data    # 4
R3_status  # 4
R3_data    # 4
R4_status  # 4
R4_data    # 4

        ^ 0
RDCHNO  # 2
CLINO   # 2
SBYTNO  # 2
BYTENO  # 2
WORDNO  # 2
RDLNNO  # 2
ARGSNO  # 2
BGETNO  # 2
BPUTNO  # 2
FINDNO  # 2
FILENO  # 2
GBPBNO  # 2

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;       These ones are not called from FileSwitch, so must preserve more
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Must preserve flags

Host_WriteC ENTRY "tubebase"

        LDR     tubebase, TubeAddress

10      LDRB    r14, R1_status
        TST     r14, #&40
        BEQ     %BT10
        STRB    r0, R1_data
        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_Write0 ENTRY "r1"

        MOV     r1, r0

05      LDRB    r0, [r1], #1
        TEQ     r0, #0
        BLNE    Host_WriteC
        BNE     %BT05

        SUB     r0, r1, #1
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Pass a string across Toob and term with CR

; In     r1 -> string,0

Host_CLI ENTRY "r0-r1, tubebase, tubewrk"

        BL      Host_Common
        BL      Host_ClaimFIQ           ; Fools may startup code to copy

        MOV     r0, #CLINO
        BL      WriteTubeR2

        BL      PassStringToHost        ; Write string, CR

        BL      ReadTubeR2PollingError  ; Discard continuation state
        ADRVS   r0, HostErrorBuffer
        STRVS   r0, [sp]

        BL      Host_ReleaseFIQ
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Pass two strings across Toob and term with CR

; In     r0 -> first string,0  (possibly null string)
;        r1 -> second string,0

Host_CLI_Pair ENTRY "r0-r2, tubebase, tubewrk"

        BL      Host_Common
        BL      Host_ClaimFIQ           ; Fools may startup code to copy

        MOV     r2, r0                  ; Save string^
        MOV     r0, #CLINO
        BL      WriteTubeR2

10      LDRB    tubewrk, R2_status      ; Write first string, no term
        TST     tubewrk, #&40
        BEQ     %BT10
        LDRB    r0, [r2], #1
        TEQ     r0, #0
        STRNEB  r0, R2_data
 [ fsdebug
        SWINE   XOS_WriteC
 ]
        BNE     %BT10

        BL      PassStringToHost        ; Write second string, CR

        BL      ReadTubeR2PollingError  ; Discard continuation state
        ADRVS   r0, HostErrorBuffer
        STRVS   r0, [sp]

        BL      Host_ReleaseFIQ
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_Word ENTRY "r0-r3, tubebase, tubewrk"

 [ debugword
 DREG r0,"OSWord rc = ",cc
 DREG r1," cb^ "
 ]
        BL      Host_Common
        BL      Host_ClaimFIQ           ; Will be doing data xfer

        MOV     r3, r0                  ; Remember OSWord rc

        MOV     r0, #WORDNO
 [ debugword
 DREG r0,"Writing WORDNO ",cc
 ]
        BL      WriteTubeR2

        MOV     r0, r3                  ; OSWord rc
 [ debugword
 DREG r0,"Writing rc ",cc
 ]
        BL      WriteTubeR2

        CMP     r3, #&80
        MOVCC   r0, #16                 ; Fixed send
        LDRCSB  r0, [r1]                ; Variable send

 [ debugword
 DREG r0,"Writing xfer to Host ",cc
 ]
        BL      WriteTubeR2             ; Number of bytes going to Host
        SUBS    r2, r0, #1
        BMI     %FT40                   ; [none]

20      LDRB    r0, [r1, r2]            ; Bytes go in descending address order
        BL      WriteTubeR2
        SUBS    r2, r2, #1
        BPL     %BT20

40      CMP     r3, #&80
        MOVCC   r0, #16                 ; Fixed receive
        LDRCSB  r0, [r1, #1]            ; Variable recive

 [ debugword
 DREG r0,"Writing xfer from Host ",cc
 ]
        BL      WriteTubeR2             ; Number of bytes coming from Host
        SUBS    r2, r0, #1
        BMI     %FT90                   ; [none]

60      BL      ReadTubeR2PollingError  ; Bytes come in descending addr order
        ADRVS   r0, HostErrorBuffer
        BVS     %FT90
        STRB    r0, [r1, r2]
        SUBS    r2, r2, #1
        BPL     %BT60

90      BL      Host_ReleaseFIQ
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Load Tube hardware address and clear any errors that have come from the Host

Host_Common ENTRY

        LDR     tubebase, TubeAddress
        MVN     r14, #I_bit             ; Tube needs interrupts
        TSTP    r14, pc
        MOV     r14, #0
        STR     r14, TextOffset         ; No text yet
        STRB    r14, HostErrorFlag      ; No errors yet
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_File ENTRY "r0, r2-r5"             ; Pushing parms to send to Host
                                        ; DO NOT ALTER WITHOUT ENGAGING BRAIN

        BL      Host_Common
        BL      Host_ClaimFIQ           ; Will be doing data xfer

        MOV     r0, #FILENO
        BL      WriteTubeR2

        MOV     r2, #5*4-1              ; Send all the bytes - highest first
10      LDRB    r0, [sp, r2]
        BL      WriteTubeR2
        TEQ     r2, #4
        SUBNE   r2, r2, #1
        BNE     %BT10

        BL      PassStringToHost        ; Pass filename to Host
        LDRB    r0, [sp]
        BL      WriteTubeR2             ; Pass RC to Host

        BL      ReadTubeR2PollingError  ; Read 1st byte to r0b stacked
        ADRVS   r0, HostErrorBuffer     ; Or error^
 [ fsdebug
 DLINE
 DREG r0, "r0 back from OSFile is "
 DLINE
 ]
        STR     r0, [sp]
        BVS     %FT30

        MOV     r2, #5*4-1
20      BL      ReadTubeR2
        STRB    r0, [sp, r2]
        TEQ     r2, #4
        SUBNE   r2, r2, #1
        BNE     %BT20

30      BL      Host_ReleaseFIQ
        EXIT                            ; Updating parms

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; OPENIN/UP/OUT

Host_Open ENTRY "r0"                    ; Handle returned into stack

        BL      Host_Common
        MOV     r0, #FINDNO
        BL      WriteTubeR2
        LDRB    r0, [sp]
        BL      WriteTubeR2             ; Pass reason code to Host
        BL      PassStringToHost        ; Pass filename to Host

        BL      ReadTubeR2PollingError  ; Read file handle from Host
        ADRVS   r0, HostErrorBuffer     ; Or error^
        STR     r0, [sp]
        EXIT                            ; V from read

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_BGet ENTRY

        BL      Host_Common
        MOV     r0, #BGETNO
        BL      WriteTubeR2
        MOV     r0, r1
        BL      WriteTubeR2             ; Pass file handle to Host

        BL      ReadTubeR2PollingError  ; Read validity
        ADRVS   r0, HostErrorBuffer     ; Or error^
        EXIT    VS

        CMP     r0, #&80                ; C_bit := byte & &80
        BL      ReadTubeR2              ; Read char
        PullEnv
        BICCCS  pc, lr, #C_bit
        ORRCSS  pc, lr, #C_bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_BPut ENTRY "r0"                    ; Preserves r0

        BL      Host_Common
        MOV     r0, #BPUTNO
        BL      WriteTubeR2
        MOV     r0, r1                  ; Pass file handle to Host
        BL      WriteTubeR2
        LDRB    r0, [sp]                ; Pass char to Host
        BL      WriteTubeR2

        BL      ReadTubeR2PollingError  ; Discard sync byte
        ADRVS   r0, HostErrorBuffer
        STRVS   r0, [sp]
        EXIT                            ; V from read

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Does OSARGS r0, r1, r2

Host_Args ENTRY "r0"                    ; RC returned into stack

        BL      Host_Common
        MOV     r0, #ARGSNO
        BL      WriteTubeR2
        MOV     r0, r1
        BL      WriteTubeR2             ; Pass file handle to Host
        MOV     r0, r2
        BL      WriteTubeR2Word         ; Pass data to Host
        LDRB    r0, [sp]
        BL      WriteTubeR2             ; Pass RC to Host

        BL      ReadTubeR2PollingError  ; Get RC from Host
        ADRVS   r0, HostErrorBuffer     ; Or error^
        STR     r0, [sp]
        BLVC    ReadTubeR2              ; Get data from Host, MSB first
        MOV     r2, r0, LSL #24
        BLVC    ReadTubeR2
        ORR     r2, r2, r0, LSL #16
        BLVC    ReadTubeR2
        ORR     r2, r2, r0, LSL #8
        BLVC    ReadTubeR2
        ORR     r2, r2, r0
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_GBPB ENTRY "r0"                    ; RC returned into stack

        BL      Host_Common
        BL      Host_ClaimFIQ           ; Will be doing data xfer

        MOV     r0, #GBPBNO
        BL      WriteTubeR2

        STMFD   sp!, {r2, r3, r4}       ; Pass parms to Host
        MOV     r2, #3*4-1
10      LDRB    r0, [sp, r2]
        BL      WriteTubeR2
        SUBS    r2, r2, #1
        BPL     %BT10

        MOV     r0, r1
        BL      WriteTubeR2             ; Pass file handle to Host
        LDRB    r0, [sp, #4*3]
        BL      WriteTubeR2             ; Pass reason code to Host

        MOV     r2, #3*4-1              ; Get updated parms from Host
20      BL      ReadTubeR2PollingError
        LDMVSFD sp!, {r2, r3, r4}       ; Buchanan you bastard !
        BVS     %FT90
        STRB    r0, [sp, r2]
        SUBS    r2, r2, #1
        BPL     %BT20
        LDMFD   sp!, {r2, r3, r4}
        BL      ReadTubeR2              ; Discard returned handle

        BL      ReadTubeR2              ; Discard returned validity (C UND)
        BL      ReadTubeR2              ; Read RC
        CLRV

90      ADRVS   r0, HostErrorBuffer
        STR     r0, [sp]                ; RC/error^

        BL      Host_ReleaseFIQ
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; CLOSE#r1. Preserves r0 (=0)

Host_Close ENTRY "r0"

        BL      Host_Common
        MOV     r0, #FINDNO
        BL      WriteTubeR2
        MOV     r0, #0
        BL      WriteTubeR2             ; Pass reason code (0) to Host
        MOV     r0, r1
        BL      WriteTubeR2             ; Pass file handle to Host

        BL      ReadTubeR2PollingError  ; Discard sync byte
        ADRVS   r0, HostErrorBuffer
        STRVS   r0, [sp]
        EXIT                            ; V from read

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Host_Byte ENTRY "r0"

        BL      Host_Common
        CMP     r0, #&8E                ; Forbid this (StartupLanguage)
        EXIT    EQ                      ; VClear

        CMP     r0, #&80                ; RC >= &80 ?
        MOVHS   r0, #BYTENO             ; Different protocols
        MOVLO   r0, #SBYTNO
        BL      WriteTubeR2
        MOV     r0, r1                  ; Pass r1
        BL      WriteTubeR2
        BCS     %FT50

        LDRB    r0, [sp]                ; Pass r0
        BL      WriteTubeR2

        BL      ReadTubeR2PollingError  ; Read r1
        MOVVC   r1, r0                  ; V from read

40      ADRVS   r0, HostErrorBuffer     ; From below too
        STRVS   r0, [sp]
        EXIT                            ; NB. We haven't corrupted r2


50      MOV     r0, r2                  ; Pass r2
        BL      WriteTubeR2
        LDRB    r0, [sp]                ; Pass r0
        BL      WriteTubeR2

        CMP     r0, #&9D                ; Fast Tube BPut ?
        EXIT    EQ                      ; VClear

        BL      ReadTubeR2PollingError  ; Read validity
        BVS     %BT40
        CMP     r0, #&80                ; C_bit := byte & &80
        BL      ReadTubeR2              ; Read r2
        MOV     r2, r0
        BL      ReadTubeR2              ; Read r1
        MOV     r1, r0
        PullEnv
        BICCCS  pc, lr, #C_bit
        ORRCSS  pc, lr, #C_bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;      All the grotty code to deal with Tube IRQ/FIQ and data transfers
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 -> IRQ/FIQ handler table

ClaimIRQ ENTRY "r0-r1"

        STR     r0, FIQTableAddress     ; Set up IRQ/FIQ handlers

        MOV     r0, #IrqV               ; Claim IRQ vector
        ADR     r1, IRQHandler
        MOV     r2, wp
        SWI     XOS_Claim
        STRVS   r0, [sp]

        LDRVC   r1, =IOC                ; Enable Tube interrupts if vector ok
        LDRVCB  r0, [r1, #IOCIRQMSKB]
        ORRVC   r0, r0, #podule_IRQ_bit
        STRVCB  r0, [r1, #IOCIRQMSKB]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Sit on IRQ vector looking for Tube podule IRQ

; Need to stack wp, tubebase, tubewrk and tubewrk2 at least

        GBLS    IRQRegs
IRQRegs SETS    "r9-r12"                ; lr_irq not included


; NB. lr is NOT that going back to the user as OS now checks CallBack
;     Therefore don't exit with SUBS pc, r14_irq, #4 !
;     Just MOV pc, lr will do

IRQHandler ROUT

        Push    "$IRQRegs, lr_irq"

        LDR     tubebase, TubeAddress

        LDRB    tubewrk, R4_status      ; r4 IRQ ?
        CMP     tubewrk, #&80
        BCS     TubeIRQ4

        LDRB    tubewrk, R1_status      ; r1 IRQ ?
        CMP     tubewrk, #&80
        Pull    "$IRQRegs, pc", CC      ; Pass it on (not Tube podule)

TubeIRQ1
        LDRB    tubewrk, R1_data        ; Escape update or event ?
        CMP     tubewrk, #&80
        BCC     TubeEvent

; .............................................................................
; In    r0 bit 6 is new Escape status - this doesn't seem to work

TubeEscapeUpdate ROUT

        Pull    "$IRQRegs, lr_irq, pc"  ; Discard updates

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

TubeEvent ROUT

        Push    "r0-r3"
        BL      ReadTubeR1              ; Read parameters for event
        MOV     r2, r0
        BL      ReadTubeR1
        MOV     r1, r0
        BL      ReadTubeR1
 [ xferdebug
        CMP     r0, #7
        LDR     r14, =VIDC
        ADR     r10, colourtable
        MOVHI   r10, #&730 ; scummy blue-grey
        LDRLS   r10, [r10, r0, LSL #2]
        ORR     r10, r10, #border
        BIC     r10, r10, #&088 ; take out top intensity bits
        BIC     r10, r10, #&800
        STR     r10, [r14]
 ]

 [ :LNOT: minimal
        TEQ     r0, #9                  ; Is it a User event (ie. Wrch)
        BEQ     %FT50                   ; if so, that's ours!

        MOV     r3, pc                  ; Must save lr_svc
        TEQP    pc, #I_bit+SVC_mode
        NOP
        Push    lr_svc
        SWI     XOS_GenerateEvent
        Pull    lr_svc
        TEQP    r3, #0                  ; Restore state (IRQ)
        NOP
        Pull    "r0-r3, $IRQRegs, lr_irq, pc"

50      LDR     r0, TextOffset          ; Buffer range is 0..(?TextBuffer-1)
        CMP     r0, #?TextBuffer
        ADRLO   r1, TextBuffer
        STRLOB  r2, [r1, r0]            ; Char in r2
        ADDLO   r0, r0, #1              ; EQ marks overflowed condition
        STRLS   r0, TextOffset
        Pull    "r0-r3, $IRQRegs, lr_irq, pc"
 |
        Pull    "r0-r3, $IRQRegs, lr_irq, pc" ; Discard events from Host
 ]

 [ xferdebug
colourtable
        DCD     &00F                    ; 0 is red
        DCD     &0F0                    ; 1 is green
        DCD     &F00                    ; 2 is blue
        DCD     &0FF                    ; 3 is yellow
        DCD     &FF0                    ; 4 is cyan
        DCD     &000                    ; 5 is black
        DCD     &F0F                    ; 6 is magenta
        DCD     &FFF                    ; 7 is white
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Read error from Host and copy into local buffer. Can't cause errors directly

; Asynchronous errors from the Host are essentially discarded (Remote, VDU 2)

TubeError ROUT

        Push    "r0"
        ADR     tubewrk2, HostErrorBuffer
        BL      ReadTubeR2              ; Discard first byte
        BL      ReadTubeR2              ; Next is error number
        LDR     r14, =TubeNumber
        ADD     r0, r0, r14             ; Modify error number
        STR     r0, [tubewrk2], #4
10      BL      ReadTubeR2              ; Copy error string across
        STRB    r0, [tubewrk2], #1      ; NUL terminated
        CMP     r0, #0
        BNE     %BT10
        MOV     r0, #1
        STRB    r0, HostErrorFlag
        Pull    "r0, $IRQRegs, lr_irq, pc" ; And return

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

TubeIRQ4
        LDRB    tubewrk, R4_data        ; Data xfer or error ?
        CMP     tubewrk, #&80
        BCS     TubeError


TubeTransfer ROUT

        Push    "r0-r4"
        MOV     r4, tubewrk             ; r4 := transfer type (0..7)
 [ xferdebug
        CMP     r4, #7
        LDR     r14, =VIDC
        ADR     r10, colourtable
        MOVHI   r10, #&830 ; scummy blue-grey
        LDRLS   r10, [r10, r4, LSL #2]
        ORR     r10, r10, #border
        STR     r10, [r14]
 ]
        BL      ReadTubeR4              ; Discard claimer id byte

        TEQ     r4, #5                  ; FS release guarantees no more FIQs
        BEQ     ReleaseFIQAndExit       ; will be given to the parasite

        BL      ReadTubeR4              ; Read 32-bit start address
        MOV     r2, r0, LSL #24         ; for data transfer
        BL      ReadTubeR4
        ORR     r2, r2, r0, LSL #16
        BL      ReadTubeR4
        ORR     r2, r2, r0, LSL #8
        BL      ReadTubeR4
        ORR     r2, r2, r0              ; r2 := data address

        CMP     r4, #4                  ; Running code ?
        BLEQ    TryStartCode

        MOV     r0, tubebase            ; Where the Tube is
        MOV     r1, pc                  ; Save state
        TEQP    pc, #FIQ_mode+I_bit     ; Into FIQ mode to set xferaddr
        NOP
        MOV     tubebase, r0            ; tubebase_fiq := Tube address
        MOV     xferaddr, r2            ; xferaddr := start address
        TEQP    r1, #0                  ; Back to where we were
        NOP                             ; Need this to access banked registers
                                        ; ie. workspace pointer !

        LDR     r3, FIQTableAddress     ; Copy FIQ code into RAM
        LDR     r1, [r3, r4, LSL #2]    ; Routine offset
        ADD     r3, r3, r1              ; Routine address
        MOV     r1, #FIQCodeAddress     ; Dest^

50      LDR     r0, [r3], #4
        STR     r0, [r1], #4
        TEQ     r1, #(FIQCodeAddress+LongestFiq)
        BNE     %BT50

        LDRB    r0, R3_data             ; Ensure r3 empty first
        LDRB    r0, R3_data

; As soon as the synchronising byte is read, FIQs will start to occur

        BL      ReadTubeR4              ; Get synchronising byte. Bang !

        CMP     r4, #6                  ; Protocol 6 + 7 don't FIQ so call code
        MOVHS   lr, pc                  ; directly - lr with all proc bits
        MOVHS   pc, #FIQCodeAddress     ; Can't Branch there, we're a RelModule

;;;        CMP     r4, #4                  ; Release for ones that won't
;;;        BHS     ReleaseFIQAndExit       ; get FS release (4, 6, 7)
;;;                                     ; Allow net to get back in every few ms

IRQEND ; Return, claiming IRQ vector

        Pull    "r0-r4, $IRQRegs, lr_irq, pc"


; Had FS release or end of 256 byte transfer. Tube no need FIQ no more

ReleaseFIQAndExit * IRQEND


; In    r2 = code address to run

TryStartCode ENTRY "r0-r4"

        STREQ   r2, WhereToCall

        LDRB    r14, WhetherToCall      ; Still in naff state, don't request
        CMP     r14, #0                 ; callback to run this code
        EXIT    EQ

        MOV     r4, pc
        TEQP    pc, #I_bit+SVC_mode     ; Must save lr_svc to do SWI from IRQ
        NOP
        Push    lr_svc

        MOV     r0, #CallBackHandler
        ADRL    r1, CallBackCode
        MOV     r2, wp
        ADR     r3, CallBackBuffer
        SWI     XOS_ChangeEnvironment
        SWI     XOS_SetCallBack

 [ True
        LDR     r14, =VIDC              ; Indicate about to run code
        LDR     r10, =&40000000
        ORR     r10, r10, #&C80         ; by going sick blue colour
        STR     r10, [r14]
 ]
        Pull    lr_svc
        TEQP    r4, #0                  ; Restore state (IRQ)
        NOP
        EXITS

        LTORG

 [ True
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 = rc

; Now done from foreground SVC mode only

Host_ClaimFIQ ENTRY "r1"

        MOV     r1, #Service_ClaimFIQ
        SWI     XOS_ServiceCall
 [ xferdebug
 LDR r14, =VIDC
 MOV r1,#&0F0
 ORR r1,r1,#border
 STR r1,[r14]
 ]
        LDR     r1, =IOC
        MOV     r14, #podule_FIQ_bit    ; Yee ! Enable our FIQ and that alone
        STRB    r14, [r1, #IOCFIQMSK]
        EXITS


Host_ReleaseFIQ ENTRY "r1"

        LDR     r1, =IOC
        MOV     r14, #0                 ; Disable all FIQ sources
        STRB    r14, [r1, #IOCFIQMSK]

        MOV     r1, #Service_ReleaseFIQ
        SWI     XOS_ServiceCall
        EXITS
 |
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 = rc

TubeClaimReleaseFIQ ENTRY "r0-r1, r12"  ; Service call may corrupt r1. Paranoia

        MOV     r12, pc
        TEQP    pc, #I_bit+SVC_mode     ; Must save lr_svc
        NOP
        Push    lr_svc
        SWI     XOS_ServiceCall
        Pull    lr_svc
        TEQP    r12, #0                 ; Restore state (IRQ)
        NOP
        EXITS

HostClaimFIQ ENTRY "r1"

        MOV     r1, #Service_ClaimFIQ
        BL      TubeClaimReleaseFIQ

 [ xferdebug
 LDR r14, =VIDC
 MOV r1,#&0F0
 ORR r1,r1,#border
 STR r1,[r14]
 ]
        LDR     r1, =IOC
        MOV     r14, #podule_FIQ_bit    ; Yee ! Enable our FIQ and that alone
        STRB    r14, [r1, #IOCFIQMSK]
        EXITS

HostReleaseFIQ ENTRY "r0-r1"

        LDR     r1, =IOC
        MOV     r14, #0                 ; Disable all FIQ sources
        STRB    r14, [r1, #IOCFIQMSK]

        MOV     r1, #Service_ReleaseFIQ
        BL      TubeClaimReleaseFIQ
        EXITS
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Good FIQ data transfer code - copy into RAM as appropriate

RealFIQTable
        DCD     FIQP0 -RealFIQTable
        DCD     FIQP1 -RealFIQTable
        DCD     FIQP2 -RealFIQTable
        DCD     FIQP3 -RealFIQTable
        DCD     FIQDEF-RealFIQTable     ; 4 is Address setup (no xfer)
        DCD     FIQDEF-RealFIQTable     ; 5 is FS release
        DCD     FIQP6 -RealFIQTable     ; Copy 6 and 7 to RAM for speed
        DCD     FIQP7 -RealFIQTable


FIQP0   LDRB    xfertemp, [xferaddr], #1 ; Protocol 0: 1 byte Parasite->Host
        STRB    xfertemp, R3_data
        SUBS    pc, lr_fiq, #4

FIQP1   LDRB    xfertemp, R3_data        ; Protocol 1: 1 byte Host->Parasite
        STRB    xfertemp, [xferaddr], #1
        SUBS    pc, lr_fiq, #4


FIQP2   LDRB    xfertemp, [xferaddr], #1 ; Protocol 2: 2 bytes Parasite->Host
        STRB    xfertemp, R3_data
        LDRB    xfertemp, [xferaddr], #1
        STRB    xfertemp, R3_data
        SUBS    pc, lr_fiq, #4

FIQP3   LDRB    xfertemp, R3_data        ; Protocol 3: 2 bytes Host->Parasite
        STRB    xfertemp, [xferaddr], #1
        LDRB    xfertemp, R3_data
        STRB    xfertemp, [xferaddr], #1

FIQDEF  SUBS    pc, lr_fiq, #4          ; Ignore FIQ


; Immediate data transfers - don't FIQ. r2 = start address. tubewrk2 = 256

; Protocol 6: 256 byte transfer - Parasite to Host

FIQP6 ROUT

        MOV     tubewrk2, #256
10      LDRB    tubewrk, R3_status      ; Poll till ready
        TST     tubewrk, #&80
        BEQ     %BT10
        LDRB    tubewrk, [r2], #1
        STRB    tubewrk, R3_data        ; Send a byte
        SUBS    tubewrk2, tubewrk2, #1
        BNE     %BT10

20      LDRB    tubewrk, R3_status      ; Keep R3 filled otherwise may get NMId
        TST     tubewrk, #&80
        BEQ     %BT20
        STRB    tubewrk, R3_data
        MOVS    pc, lr_irq

LongestFiq * .-FIQP6+4

 [ False
 ! 0, "Longest FIQ routine is &" :CC: (:STR: LongestFiq)
 ]
 ASSERT LongestFiq + FIQCodeAddress <= &100 ; Mustn't overflow


; Protocol 7: 256 byte transfer - Host to Parasite

FIQP7 ROUT

        MOV     tubewrk2, #256
10      LDRB    tubewrk, R3_status
        TST     tubewrk, #&80
        BEQ     %BT10
        LDRB    tubewrk, R3_data
        STRB    tubewrk, [r2], #1
        SUBS    tubewrk2, tubewrk2, #1
        BNE     %BT10
        MOVS    pc, lr_irq

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Duff FIQ data transfer code - copy into RAM as appropriate

; Allows parasite to be peeked, but no data can be written to it from the Host

DuffFIQTable
        DCD     FIQP0     -DuffFIQTable
        DCD     DuffFIQP1 -DuffFIQTable
        DCD     FIQP2     -DuffFIQTable
        DCD     DuffFIQP3 -DuffFIQTable
        DCD     FIQDEF    -DuffFIQTable ; 4 is Address setup (no xfer)
        DCD     FIQDEF    -DuffFIQTable ; 5 is FS release
        DCD     FIQP6     -DuffFIQTable ; Copy 6 and 7 to RAM for speed
        DCD     DuffFIQP7 -DuffFIQTable


DuffFIQP3
        LDRB    xfertemp, R3_data       ; Protocol 3: discard 2 bytes
DuffFIQP1
        LDRB    xfertemp, R3_data       ; Protocol 1: discard 1 byte
        SUBS    pc, lr_fiq, #4

; Protocol 7: discard 256 bytes - Host to Parasite

DuffFIQP7 ROUT

        MOV     tubewrk2, #256
10      LDRB    tubewrk, R3_status
        TST     tubewrk, #&80
        BEQ     %BT10
        LDRB    tubewrk, R3_data
        SUBS    tubewrk2, tubewrk2, #1
        BNE     %BT10
        MOVS    pc, lr_irq

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; All lowlevel pokers corrupt tubewrk; peekers don't

DoR4WhilstR1IRQ
        Push    "$IRQRegs, lr_irq"
        MOV     lr_irq, pc              ; No longer obscure code a la Roger !
        B       TubeIRQ4                ; Process as if genuine IRQ from R4
        Pull    "$IRQRegs, lr_irq"      ; Drop back to reading R1

ReadTubeR1
        LDRB    r0, R4_status           ; Allow r4 IRQ during r1 IRQ
        CMP     r0, #&80
        BCS     DoR4WhilstR1IRQ

        LDRB    r0, R1_status
        TST     r0, #&80
        BEQ     ReadTubeR1
        LDRB    r0, R1_data
        MOVS    pc, lr

ReadTubeR2
        LDRB    r0, R2_status
        TST     r0, #&80
        BEQ     ReadTubeR2
        LDRB    r0, R2_data
        MOVS    pc, lr

ReadTubeR2PollingError
        LDRB    r0, HostErrorFlag       ; Must check this every time
        TEQ     r0, #0
        ADRNE   r0, HostErrorBuffer
 [ xferdebug
 BEQ %FT00
 Push r1
 ADD r1, r0, #4
 DSTRING r1, "***Error from Host: "
 Pull r1
00
 ]
        ORRNES  pc, lr, #V_bit          ; Oh shit ! Protocol aborted
        LDRB    r0, R2_status
        TST     r0, #&80
        BEQ     ReadTubeR2PollingError
        LDRB    r0, R2_data
 [ xferdebug
 DLINE
 DREG r0,"Data read from r2 "
 DREG tubebase,"Tube at "
 ]
 [ :LNOT: minimal
        Push    lr
        BL      PrintAnyTextFromHost
        Pull    lr
 ]
        BICS    pc, lr, #V_bit

ReadTubeR4
        LDRB    r0, R4_status
        TST     r0, #&80
        BEQ     ReadTubeR4
        LDRB    r0, R4_data
        MOVS    pc, lr


        MACRO
$label  POKER2
$label
01      LDRB    tubewrk, R2_status
        TST     tubewrk, #&40
        BEQ     %BT01
 [ xferdebug
 DREG r0, "Sending R2_data "
 ]
        STRB    r0, R2_data
        MEND


WriteTubeR2Word
        MOV     r0, r0, ROR #24 ;HNML > NMLH
        POKER2
        MOV     r0, r0, ROR #24 ;MLHN
        POKER2
        MOV     r0, r0, ROR #24 ;LHNM
        POKER2
        MOV     r0, r0, ROR #24 ;HNML

WriteTubeR2
        POKER2
        MOVS    pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 = offset of register to poll
;       r1 = bitmask to test for

; Out   NE: ok
;       EQ: bored

PollTubeUntilBored ENTRY "r2, tubebase"

        LDR     r2, PollHostDelay
        LDR     tubebase, TubeAddress

20      LDRB    r14, [tubebase, r0]
        TST     r14, r1                 ; ~2uS per failed loop
        EXIT    NE
        SUBS    r2, r2, #1
        BNE     %BT20

        SWI     XOS_WriteS              ; Ignore errors here
        DCB     "BBC Host timeout", LF,CR, LF, 0
        ALIGN
        CMP     r0, r0                  ; EQ -> bored
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

PollContinuationTillBored ENTRY "r0-r2, tubebase"

        MOV     r2, pc                  ; Preserve state
        TSTP    r2, #(ARM_CC_Mask :AND: (:NOT: I_bit)) ; Enable IRQ
        MOV     r0, #:INDEX: R2_status
        MOV     r1, #&80
        BL      PollTubeUntilBored      ; Poll for continuation byte
        LDRNE   tubebase, TubeAddress
        LDRNEB  r0, R2_data             ; Discard continuation state if ~bored
        TEQP    r2, #0                  ; Restore state
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> string to pass across to the Host

PassStringToHost ENTRY "r0-r1"

10      LDRB    r0, R2_status
        TST     r0, #&40
        BEQ     %BT10
        LDRB    r0, [r1], #1
        TEQ     r0, #LF
        TEQNE   r0, #0
        TEQNE   r0, #CR
        MOVEQ   r0, #CR                 ; Always pass Host &0D !
        STRB    r0, R2_data
 [ fsdebug
        SWINE   XOS_WriteC
        SWIEQ   XOS_NewLine
 ]
        BNE     %BT10                   ; But terminate on any of 00, 0A, 0D
        EXITS

 [ :LNOT: minimal
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; No errors, thank you

PrintAnyTextFromHost ENTRY "r0-r3"

        ADR     r1, TextBuffer
        LDR     r2, TextOffset
        MOV     r3, #0
10      CMP     r2, r3
        BEQ     %FT90
        LDRB    r0, [r1, r3]
        ADD     r3, r3, #1
        SWI     XOS_WriteC
        BVC     %BT10
        EXITS

90      MOV     r14, #0
        STR     r14, TextOffset
        CMP     r2, #?TextBuffer        ; If = ?TextBuffer then overflowed
        ADRHS   r0, %FT99
        SWIHS   XOS_Write0
        EXITS
99
        DCB     LF,CR
        DCB     "... some text has been lost ..."
        DCB     LF,CR, 0
        ALIGN
 ]
        LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    wp valid

CallBackCode ROUT

        MOV     r14, #VIDC
        LDR     r4, =&40000000          ; Set border black again
        STR     r4, [r14]

        MOV     r0, #ExceptionDumpArea
        MOV     r1, #0
        SWI     XOS_ChangeEnvironment

        ADR     r14, CallBackBuffer     ; Copy user mode registers into EDA
        LDMIA   r14!, {r2-r9}           ; so we can *ShowRegs if this goes
        STMIA   r1!, {r2-r9}            ; spastic
        LDMIA   r14!, {r2-r9}
        STMIA   r1!, {r2-r9}

        TEQP    pc, #0                  ; Into USR mode
        NOP
        MOV     lr, pc
        LDR     pc, WhereToCall

        SWI     XOS_WriteS
        DCB     LF,CR, "Panic !", LF,CR, 7, 0
        ALIGN

        SWI     OS_Exit

        END
