
#ifndef __NFSNFS_H
#include "NFS.h"
#endif

#include "access.h"

#define RISCOS_Style 1 /* When set, if open update fails write access, it returns a read-only handle
                        * when unset, if open update fails write access, it fails */

/*
        Perform a low-level rename, making sure all open files are kept up to date
*/
_kernel_oserror *nfs_rename_safely
(
        MountPoint *mp,
        nfs_fh *to_dir,
        char *to_name,
        nfs_fh *from_dir,
        char *from_name
)
{
        _kernel_oserror *err;
        Chain_Link *link;
        OpenFile *of;
        char *new_name;

        err = nfs_rename( mp, to_dir, to_name, from_dir, from_name );

        if ( !err )
        {
                /*
                        Go down that mount point's open file list
                */
                for ( link = mp->open_files.forwards;
                        link->forwards != NULL;
                        link = link->forwards )
                {
                        of = Link_Wrapper( link );

                        /*
                                If the open file's a match
                        */
                        if ( memcmp( &of->nfs_fd.dir, from_dir, sizeof( *from_dir ) ) == 0 &&
                                strcmp( of->nfs_fd.desc.name, from_name ) == 0 )
                        {
                                /*
                                        Change the open file's information
                                */
                                new_name = malloc( strlen( to_name ) + 1 );
                                if ( new_name != NULL )
                                {
                                        free( of->nfs_fd.desc.name );
                                        of->nfs_fd.desc.name = new_name;
                                        strcpy( new_name, to_name );
                                        of->nfs_fd.dir = *to_dir;
                                }
                                else
                                {
                                        /*
                                                do nothing, return an error, and let a
                                                failure happen at file closure
                                        */
                                        err = &mb_malloc_failed;
                                }
                        }
                }
        }

        return err;
}


/*
        Creates a structure describing an open file, without the descriptor filled in.
*/
static _kernel_oserror *create_open_file
(
        OpenFile **of,
        int fileswitch_handle,
        YesNoAnswer read_only,
        SpoolFileDetails *sfdetails
)
{
        *of = (OpenFile *)malloc( sizeof( OpenFile ));

        if ( *of == NULL )
        {
                return &mb_malloc_failed;
        }
        else
        {
                (*of)->fileswitch_handle = fileswitch_handle;
                (*of)->sequential_file_pointer = 0;
                (*of)->read_only = read_only;
                (*of)->spool_details = sfdetails;

                return NULL;
        }
}

/*
        Enter the open file into NFS's open file list.
*/
static void enter_open_file
(
        OpenFile *of
)
{
        insert_before_header( &of->link, of, &of->nfs_fd.mp->open_files );
}


/*
        Try real hard to create the nfs file with the required attributes.
        Will write memory at filling to the file if fill_it is true
*/
_kernel_oserror *create_nfs_file
(
        nfs_file_descriptor     *ndesc,
        char                    *riscos_name,
        int                     *length,
        int                     *load_address,
        int                     *execute_address,
        int                     *access,
        char                    *filling,
        bool_t                  fill_it  /* JRS 7/92 added because filling can have a valid value of 0 */
)
{
        _kernel_oserror *err;
        sattr nattr;
        char *path_to_leaf;
        char *leaf_position;
        riscos_file_description rdesc;
        _kernel_swi_regs r;
        char time_result[ 5 ];
        fattr *nattrres;
        appendum bit_on_the_end;

        err = find_dir_for_leaf( riscos_name, ndesc, &path_to_leaf, &leaf_position, &current_directory );

        if ( err )
                return err;

        err = find_object_in_directory( ndesc, leaf_position );

        if ( err == &mb_nfserr_noent )
        {
                /*
                        Object doesn't exist
                */

                rdesc.name = leaf_position;

                rdesc.attr.type = FileType_File;

                if ( load_address || execute_address )
                {
                        /*
                                load or exec exists - untyped file
                        */
                        if ( load_address )
                                rdesc.attr.load_address = *load_address;
                        else
                                rdesc.attr.load_address = 0;

                        if ( execute_address )
                                rdesc.attr.execute_address = *execute_address;
                        else
                                rdesc.attr.execute_address = *load_address;
                }
                else
                {
                        /*
                                Load and exec not specified - create data file stamped now
                        */
                        r.r[0] = Word_DateAndTime;
                        time_result[0] = Word_ReadRealTime5ByteFormat;
                        r.r[1] = (int)time_result;

                        err = _kernel_swi( XOS_Bit | OS_Word, &r, &r );

                        if ( err )
                        {
                                free( path_to_leaf );
                                return err;
                        }

                        rdesc.attr.load_address = NewFile_DefaultLoad | time_result[4];
                        rdesc.attr.execute_address = *(int *)time_result;
                }

                if ( access )
                        rdesc.attr.access = *access;
                else
                        rdesc.attr.access = FileAccess_OwnerRead | FileAccess_OwnerWrite;

                err = riscos_to_nfs_description( &ndesc->desc, &rdesc );

                if ( err )
                {
                        return err;
                }

                /*
                        If no access specified, create an access from the system variable.
                        If the variable fails to read, don't bother with it.
                */
                if ( !access )
                {
                        int cr_access = utils_getcreateaccess(ndesc);
                        if (cr_access >= 0)
                        {
                                ndesc->desc.attr.mode =
                                        ( ndesc->desc.attr.mode &
                                                ~( NFSMODE_OTHERS_WRITE | NFSMODE_OTHERS_READ |
                                                   NFSMODE_GROUP_WRITE | NFSMODE_GROUP_READ |
                                                   NFSMODE_USER_WRITE | NFSMODE_USER_READ ))
                                        | cr_access;
                        }
                }

                nattr.mode = ndesc->desc.attr.mode;
                nattr.uid = ndesc->mp->user->uid;
                nattr.gid = ndesc->mp->user->gid;
                nattr.size = 0;
                nattr.atime = ndesc->desc.attr.atime;
                nattr.mtime = ndesc->desc.attr.mtime;

                err = nfs_create( &ndesc->file, &nattrres, ndesc->mp, &ndesc->dir, ndesc->desc.name, &nattr );

                if ( err )
                {
                        free( ndesc->desc.name );

                        return err;
                }

                ndesc->desc.attr = *nattrres;

                /*
                        If we have a bit on the end, write it.
                */
                if ( ndesc->desc.file_is_lxa )
                {
                        bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                        bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;
                        err = nfs_write( &nattrres, ndesc->mp, &ndesc->file, 0, (char *)&bit_on_the_end, sizeof( appendum ));

                        if ( err )
                        {
                                free( ndesc->desc.name );

                                return err;
                        }

                        ndesc->desc.attr = *nattrres;
                }
        }
        else if ( err )
        {
                /*
                        error other than 'Object doesn't exists'
                */
                free( path_to_leaf );

                return err;
        }

        /*
                Object exists and needs its length/contents/date stamps fixing
        */

        free( path_to_leaf );

        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) != NFSMODE_REG )
        {
                /*
                        Object exists and isn't a regular file.
                */
                free( ndesc->desc.name );

                return &mb_nfserr_dontmatch;
        }

        /*
                ndesc now refers to an extant regular file whose size may be wrong.
                ndesc's contents are also fully filled in and as up-to-date as reasonable.
        */

        err = change_length_given_file( ndesc, length ? *length : 0, filling, fill_it );

        if ( !err )
                err = change_info_given_file( ndesc, load_address, execute_address, access );

        if ( err )
        {
                free( ndesc->desc.name );
        }

        return err;
}

/*
        Given the fattr for a file and its mount point, return
        the best guess as to what we're permitted to do to it.
*/
static int access_on_file( fattr *nattr, MountPoint *mount_point )
{
        int access_bits;
        int result = 0;

        /*
                Get the access bits which apply into access_bits
        */
        if ( mount_point->user->uid == nattr->uid )
        {
                access_bits = (nattr->mode >> 6) & 0xf;
        }
        else if ( mount_point->user->gid == nattr->gid )
        {
                access_bits = (nattr->mode >> 3) & 0x7;
        }
        else
        {
                access_bits = nattr->mode & 0x7;
        }

        /*
                Translate the access bits to fileinfo bits
        */
        if ( access_bits & NFSMODE_OTHERS_READ )
        {
                result |= FileInfo_ReadPermitted;
        }
        if ( access_bits & NFSMODE_OTHERS_WRITE )
        {
                result |= FileInfo_WritePermitted;
        }

        return result;
}

/*
        Peel a .<item> into item
*/
static _kernel_oserror *peel_item( char **item, char **rover0, char *default_string )
{
        char *rover1;

        if ( **rover0 )
        {
                for ( rover1 = *rover0 + 1;
                        *rover1 && *rover1 != FileChar_DirectorySeparator;
                        rover1++ );

                *item = malloc( (rover1-*rover0) );

                if ( *item == NULL )
                {
                        return &mb_malloc_failed;
                }

                strncpy( *item, *rover0 + 1, (rover1-*rover0) - 1 );
                (*item)[ (rover1-*rover0) - 1 ] = '\0';

                *rover0 = rover1;
        }
        else
        {
                *item = malloc( strlen( default_string ) + 1 );

                if ( *item == NULL )
                {
                        return &mb_malloc_failed;
                }

                strcpy( *item, default_string );
        }

        return NULL;
}

/*
        Pick spooling filename apart into spool file details:

        NFS#Printer::<host>[[.$].<printername>[.<username>[.<options>]]]

        Directory returned by pcnfsd is mounted as Spool:<host>[:<printername>]

        NO translation is made from the given name to sending it to the pcnfsd.
*/
static _kernel_oserror *process_sfdetails
(
        SpoolFileDetails        **sfdetails,
        MountPoint              **artificial_mount,
        char                    **filename_out,
        char                    *filename_in
)
{
        _kernel_oserror *err;
        SpoolFileDetails *sfdet = *sfdetails = (SpoolFileDetails *)malloc( sizeof( SpoolFileDetails ));
        char *rover;
        char *spool_hostname;
        char *artificial_mountname;
        Host *spool_host;
        unused_client *pcnfsd_client;
        char machname[ MAX_MACHINE_NAME + 1 ];
        UserSpecification *user_nobody = NULL;
        pr_init_args pri_args;
        pr_init_results *pri_res;

        *artificial_mount = NULL;

        if ( !sfdet )
                return &mb_malloc_failed;

        rover = filename_in;

        if ( *rover != FileChar_MountIntroduction )
        {
                free( sfdet );

                return &mb_missing_spool_host;
        }

        /*
                Find the end of the spool host name.
        */
        err = peel_item( &spool_hostname, &rover, "" );
        if ( err )
        {
                free( sfdet );

                return err;
        }

        /*
                Skip a .$ if present and filter references to other directories
        */
        if ( rover[0] == FileChar_DirectorySeparator )
        {
                switch( rover[1] )
                {
                case FileChar_CSD:
                case FileChar_URD:
                case FileChar_PSD:
                case FileChar_Library:
                        /*
                                Flag as errors .@, .&, .\ and .%
                        */
                        free( spool_hostname );
                        free( sfdet );

                        return &mb_dir_not_valid_when_spooling;
                        break;

                case FileChar_Root:
                        /*
                                Skip .$
                        */
                        rover += 2;
                        break;

                default:
                        /*
                                Everything else is ok
                        */
                        break;
                }
        }

        /*
                Process [.<printername>]
        */
        err = peel_item( &sfdet->printername, &rover, Spooling_DefaultPrinter );
        if ( err )
        {
                free( spool_hostname );
                free( sfdet );

                return err;
        }

        /*
                Process [.<username>]
        */
        err = peel_item( &sfdet->username, &rover, "" );
        if ( err )
        {
                free( sfdet->printername );
                free( spool_hostname );
                free( sfdet );

                return err;
        }

        /*
                Process [.<options>]
        */
        err = peel_item( &sfdet->options, &rover, "" );
        if ( err )
        {
                free( sfdet->username );
                free( sfdet->printername );
                free( spool_hostname );
                free( sfdet );

                return err;
        }

        /*
                Discount filenames with more leaves on their end
        */
        if ( *rover )
        {
                free( sfdet->options );
                free( sfdet->username );
                free( sfdet->printername );
                free( spool_hostname );
                free( sfdet );

                return &mb_too_many_print_leaves;
        }

        /*
                Check if mount point already present
        */
        artificial_mountname = malloc( strlen( Spooling_MountPrefix ) + strlen( spool_hostname ) + 1 + strlen( sfdet->printername ) + 1 );

        if ( artificial_mountname == NULL )
        {
                free( sfdet->options );
                free( sfdet->username );
                free( sfdet->printername );
                free( spool_hostname );
                free( sfdet );

                return &mb_malloc_failed;
        }

        sprintf( artificial_mountname, "%s%s%c%s", Spooling_MountPrefix, spool_hostname, FileChar_MountIntroduction, sfdet->printername );

        /*
                If mount not already present, create it
        */
        if ( !find_mount( artificial_mountname ) )
        {
                /*
                        Mount point not there yet - generate a mount
                */
                if ( gethostname( machname, MAX_MACHINE_NAME ) == -1 )
                {
                        free( artificial_mountname );
                        free( sfdet->options );
                        free( sfdet->username );
                        free( sfdet->printername );
                        free( spool_hostname );
                        free( sfdet );

                        return &mb_machname_too_big;
                }


                spool_host = NULL;
                err = new_host( &spool_host, spool_hostname );

                if ( err )
                {
                        free( artificial_mountname );
                        free( sfdet->options );
                        free( sfdet->username );
                        free( sfdet->printername );
                        free( spool_hostname );
                        free( sfdet );

                        return err;
                }

                err = get_pcnfsd_client_for_host( &pcnfsd_client, spool_host );

                if ( err )
                {
                        release_host( spool_host );

                        free( artificial_mountname );
                        free( sfdet->options );
                        free( sfdet->username );
                        free( sfdet->printername );
                        free( spool_hostname );
                        free( sfdet );

                        return err;
                }

                pri_args.pia_client = machname;
                if ( sfdet->printername )
                        pri_args.pia_printername = sfdet->printername;
                else
                        pri_args.pia_printername = "";

                pri_res = pcnfsd_pr_init_1( &pri_args, pcnfsd_client->client );
                err = rpcpcnfsd_pi_to_riscos_err( pri_res, pcnfsd_client->client, spool_hostname );
                release_client( pcnfsd_client );

                if ( err )
                {
                        release_host( spool_host );

                        free( artificial_mountname );
                        free( sfdet->options );
                        free( sfdet->username );
                        free( sfdet->printername );
                        free( spool_hostname );
                        free( sfdet );

                        return err;
                }

                /*
                        Create nobody
                */
                err = new_user( &user_nobody, User_Nobody, NULL, UNIX_MagicNumber_UID_Nobody, UNIX_MagicNumber_GID_Nobody, authunix_create_default());

                if ( err )
                {
                        release_host( spool_host );

                        free( artificial_mountname );
                        free( sfdet->options );
                        free( sfdet->username );
                        free( sfdet->printername );
                        free( spool_hostname );
                        free( sfdet );

                        return err;
                }


                /*
                        Generate the artificial internal mount point for spooling
                */
                err = nfs_mount_internal( artificial_mountname, pri_res->pir_spooldir, spool_host, user_nobody );

                /*
                        Drop 'Nobody' and spool_host given that our handles on these are being dropped now
                */
                release_user( user_nobody );
                release_host( spool_host );

                if ( err )
                {
                        free( artificial_mountname );
                        free( sfdet->options );
                        free( sfdet->username );
                        free( sfdet->printername );
                        free( spool_hostname );
                        free( sfdet );

                        return err;
                }
        }

        free( spool_hostname );

        /*
                Pick up our mount
        */
        *artificial_mount = find_mount( artificial_mountname );

        /*
                Generate the real filename to use
        */
        *filename_out = malloc( 1 + strlen( artificial_mountname ) + 1 + 8 + 1 );

        if ( *filename_out == NULL )
        {
                free( artificial_mountname );
                free( sfdet->options );
                free( sfdet->username );
                free( sfdet->printername );
                free( sfdet );

                return &mb_malloc_failed;
        }

        sprintf( *filename_out, "%c%s%c%08x", FileChar_MountIntroduction, artificial_mountname, FileChar_DirectorySeparator, spool_name_count++ );
        free( artificial_mountname );

        return NULL;
}

_kernel_oserror *fsentry_open( FSEntry_Open_Parameter *parm )
{
        _kernel_oserror *err = NULL;
        FileSystemHandle fshandle = 0;
        char *path_to_leaf;
        char *leaf_position;
        OpenFile *of;
        SpoolFileDetails *sfdetails = NULL;
        char *filename = parm->open_definition.filename;
        MountPoint *spool_mount = NULL;

        hourglass_on();

#ifdef SHOWCALLS
        if ( parm->open_definition.special_field )
                printf(
                        "_Open( %d,, %s, %s )\n",
                        parm->open_definition.reason,
                        parm->open_definition.special_field,
                        parm->open_definition.filename );
        else
                printf(
                        "_Open( %d,, %s )\n",
                        parm->open_definition.reason,
                        parm->open_definition.filename );
#endif

        /*
                Process print spooling functions
        */
        if ( parm->open_definition.special_field )
        {
                if ( caseless_strcmp( parm->open_definition.special_field, Spooling_SpecialField ) == 0 )
                {
                        /*
                                It's NFS#printer:
                        */
                        err = process_sfdetails( &sfdetails, &spool_mount, &filename, filename );
                }
                else
                {
                        err = &mb_bad_special_field;
                }
        }

        if ( !err )
        {
                switch ( parm->open_definition.reason )
                {
                case FSEntry_Open_Reason_Update:
                case FSEntry_Open_Reason_OpenRead:
                        err = create_open_file(
                                &of,
                                parm->open_definition.handle,
                                (parm->open_definition.reason == FSEntry_Open_Reason_OpenRead) ? Yes : No, /* readonly */
                                sfdetails );

                        if ( err )
                                break;

                        err = find_leaf( filename, &of->nfs_fd, &path_to_leaf, &leaf_position, &current_directory );

                        if ( err )
                        {
                                free( of );
                                break;
                        }

                        free( path_to_leaf );

                        /* JRS 7/92 check we have read access to file */
                        if ( !access_Icanread(of->nfs_fd.mp, &of->nfs_fd.desc.attr)
#if !RISCOS_Style
                          /* and write access if update. (RISCOS converts this to open read) */
                          || ( (parm->open_definition.reason == FSEntry_Open_Reason_Update)
                              && !access_Icanwrite(of->nfs_fd.mp, &of->nfs_fd.desc.attr) )
#endif
                           )
                        {
                                free( of );
                                err = &mb_nfserr_acces;
                                break;
                        }
 
#if RISCOS_Style
                        /* set readonly flag of read-only file */
                        if ( (parm->open_definition.reason == FSEntry_Open_Reason_Update)
                            && !access_Icanwrite(of->nfs_fd.mp, &of->nfs_fd.desc.attr) )
                        {
                                of->read_only = Yes;
                        }
#endif

                        enter_open_file( of );

                        fshandle = (FileSystemHandle)of;

                        if ( (of->nfs_fd.desc.attr.mode & NFSMODE_FMT) == NFSMODE_DIR )
                        {
                                parm->open_result.information_word =
                                        FileInfo_ObjectIsDirectory;
                        }
                        else
                        {
                                parm->open_result.information_word =
                                        FileInfo_UnbufferedGBPBIsOK |
                                        access_on_file( &of->nfs_fd.desc.attr, of->nfs_fd.mp );
                        }
                        break;

                case FSEntry_Open_Reason_CreateUpdate:
                        /* It appears that this entry is never called! */
                        err = create_open_file( &of, parm->open_definition.handle, No, sfdetails );

                        if ( err )
                                break;

                        err = create_nfs_file( &of->nfs_fd, filename, NULL, NULL, NULL, NULL, NULL, No);

                        if ( err )
                                break;

                        enter_open_file( of );

                        fshandle = (FileSystemHandle)of;

                        parm->open_result.information_word =
                                FileInfo_UnbufferedGBPBIsOK | access_on_file( &of->nfs_fd.desc.attr, of->nfs_fd.mp );
                        break;

                default:
                        err = &mb_nfserr_BadParameters;
                       /* JRS 7/92 removed return here which would leave hourglass on */
                        break;
                }
        }

        /*
                Free any articifially generated filenames
        */
        if ( filename != parm->open_definition.filename )
                free( filename );

        /*
                Unmount the temporary spool mount if it has no open files in it and there was an error
        */
        if ( err && spool_mount && spool_mount->open_files.forwards->forwards == NULL )
        {
                (void)nfs_dismount( spool_mount );
        }

        /*
                remap unset directory, ran out of memory and not found errors
        */
        if ( err == &mb_no_library ||
             err == &mb_no_previous ||
             err == &mb_no_urd ||
             err == &mb_no_current_directory ||
             err == &mb_directory_unset )
        {
                err = NULL;
                fshandle = -1;
        }
        else if ( err == &mb_malloc_failed ||
                  err == &mb_nfserr_noent )
        {
                err = NULL;
        }

        if ( !err )
        {
                parm->open_result.handle = fshandle;
                parm->open_result.buffer_size = NFSBufferSize;
                parm->open_result.file_extent = riscos_extent( &of->nfs_fd );
                parm->open_result.allocated_space = riscos_extent( &of->nfs_fd );
        }

        hourglass_off();

        return err;
}
