
#ifndef __NFSNFS_h
#include "NFS.h"
#endif

/*
        Convert a UNIX date (GM time in seconds and useconds) to
        a RISC OS date (5 byte format in centiseconds).
*/
static void unix_date_to_riscos_date
(
        unsigned int *riscos_date_lo,
        unsigned int *riscos_date_hi,
        unsigned int useconds,
        unsigned int seconds
)
{
        very_long_multiply( riscos_date_lo, riscos_date_hi, seconds, 0, 100, 0 );
        very_long_add( riscos_date_lo, riscos_date_hi, *riscos_date_lo, *riscos_date_hi, useconds / 10000, 0 );
        very_long_add( riscos_date_lo, riscos_date_hi, *riscos_date_lo, *riscos_date_hi, UToR_DateOffset_Lo, UToR_DateOffset_Hi );

        very_long_add( riscos_date_lo, riscos_date_hi, *riscos_date_lo, *riscos_date_hi, time_offset_lo, time_offset_hi );
}


/*
        Convert a RISC OS date (5 byte format in centiseconds) to
        a UNIX date (GM time in seconds and useconds).
*/
static void riscos_date_to_unix_date
(
        unsigned int *useconds,
        unsigned int *seconds,
        unsigned int riscos_date_lo,
        unsigned int riscos_date_hi
)
{
        unsigned int a;
        unsigned int b;

        very_long_subtract( useconds, seconds, riscos_date_lo, riscos_date_hi, time_offset_lo, time_offset_hi );

        /*
                Remove the offset between the two date schemes
        */
        very_long_subtract( useconds, seconds, *useconds, *seconds, UToR_DateOffset_Lo, UToR_DateOffset_Hi );

        /*
                Take the 5-byte value in *seconds and *useconds
                and divide it into two 20 bit chunks.
                Process each chunk separately, then re-combine:

        */
        /* split into top and bottom 20 bits */
        a = (*seconds << 12) | (*useconds >> 20);
        b = *useconds & 0xfffff;

        /* (a<<20 + b)%100 * 10000 */
        *useconds = (( ((a%100)<<20) + b )%100) * 10000;

        /* (a<<20 + b)/100 */
        *seconds = ((a/100)<<20) + (((a%100)<<20) + b)/100;

        /* Round up to the nearest second to get copy newer to work vaguely reasonably */
        if ( *useconds )
        {
                (*seconds)++;
                *useconds = 0;
        }
}

void nfs_to_riscos_attributes
(
        RISCOSAttributes *rattr,
        nfs_file_description *ndesc
)
{
        unsigned int riscos_date_lo;
        unsigned int riscos_date_hi;
        int dummy;

        /*
                Transfer the size
        */
        rattr->file_length = ndesc->attr.size;

        switch( ndesc->attr.mode & NFSMODE_FMT )
        {
        case NFSMODE_REG:
                /*
                        Regular file processing
                */
                extensions_check_nfs_name_for_extension( ndesc->name, &rattr->load_address, &dummy );
                if ( rattr->load_address >= 0 )
                {
                        /*
                                Typed file specified by user suffix
                        */

                        /*
                                Pick up the date
                        */
                        unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );

                        /*
                                Combine the date and type
                        */
                        rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                        rattr->execute_address = riscos_date_lo;
                }
                else if ( ndesc->name[ ndesc->chars_before_suffix ] == FileChar_TypedNamePrefix )
                {
                        if ( strcmp( &ndesc->name[ ndesc->chars_before_suffix + 1 ], FileString_DeadFile ) == 0 )
                        {
                                /*
                                        Dead file
                                */
                                rattr->load_address = 0xdeaddead;
                                rattr->execute_address = 0xdeaddead;
                        }
                        else if ( strcmp( &ndesc->name[ ndesc->chars_before_suffix + 1 ], FileString_UntypedFile ) == 0 )
                        {
                                /*
                                        Untyped file
                                */
                                rattr->load_address = ndesc->load_address;
                                rattr->execute_address = ndesc->execute_address;

                                rattr->file_length -= sizeof( appendum );

                                /*
                                        A little bit of paranoia
                                */
                                if ( rattr->file_length < 0 )
                                        rattr->file_length = 0;
                        }
                        else
                        {
                                /*
                                        Typed file (only isn't if an internal inconsistency has crept in)
                                */

                                /*
                                        Pick up the date
                                */
                                unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );

                                /*
                                        Extract the type from the file name
                                */
                                sscanf( &ndesc->name[ ndesc->chars_before_suffix + 1 ], "%3x", &rattr->load_address );

                                /*
                                        Combine the date and type
                                */
                                rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                                rattr->execute_address = riscos_date_lo;
                        }
                }
                else
                {
                        /*
                                File without suffix - text or UNIXExecutable
                        */

                        /*
                                Pick up the date
                        */
                        unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );

                        /*
                                Choose between text or unix_ex
                        */
                        rattr->load_address =
                                ((ndesc->attr.mode & (NFSMODE_USER_EXECUTE | NFSMODE_GROUP_EXECUTE | NFSMODE_OTHERS_EXECUTE)) != 0) ?
                                        FileType_UNIXExecutable :
                                        FileType_Text;

                        /*
                                Combine the date and type.
                        */
                        rattr->load_address = 0xfff00000 | (rattr->load_address << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                        rattr->execute_address = riscos_date_lo;
                }
                break;

        case NFSMODE_LNK:
                /*
                        Soft links get reflected as soft links.
                */
                unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );

                rattr->load_address = 0xfff00000 | (FileType_SoftLink << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                rattr->execute_address = riscos_date_lo;
                break;

        default:
                /*
                        Non regular file nor soft link. Typically this means directories.
                */

                /*
                        Pick up the date
                */
                unix_date_to_riscos_date( &riscos_date_lo, &riscos_date_hi, ndesc->attr.mtime.useconds, ndesc->attr.mtime.seconds );

                /*
                        Combine the date and type, type is given as UNIX executable.
                */
                rattr->load_address = 0xfff00000 | (FileType_UNIXExecutable << FileType_Shift) | (int)(riscos_date_hi & 0xff );
                rattr->execute_address = riscos_date_lo;
        }

        /*
                Transfer the access
        */
        rattr->access = 0;
        if ( ndesc->attr.mode & NFSMODE_USER_READ )
                rattr->access |= FileAccess_OwnerRead;
        if ( ndesc->attr.mode & NFSMODE_USER_WRITE )
                rattr->access |= FileAccess_OwnerWrite;
        if ( ndesc->attr.mode & NFSMODE_OTHERS_READ )
                rattr->access |= FileAccess_PublicRead;
        if ( ndesc->attr.mode & NFSMODE_OTHERS_WRITE )
                rattr->access |= FileAccess_PublicWrite;

        /*
                Choose which FileType to use - these aren't supported:
                character special type
                block special type
                named socket
        */
        switch( ndesc->attr.mode & NFSMODE_FMT )
        {
        case NFSMODE_REG:
        case NFSMODE_LNK:
                rattr->type = FileType_File;
                break;

        case NFSMODE_DIR:
                if ( !(ndesc->attr.mode & NFSMODE_OTHERS_EXECUTE) )
                        rattr->access |= FileAccess_Locked;
                rattr->type = FileType_Directory;
                break;

        default:
                rattr->type = FileType_None;
                break;
        }
}

/*
        Translate from a fattr to RISCOS file attributes.

        Caller reponsible for freeing constructed rdesc.
*/
static _kernel_oserror *nfs_to_riscos_description
(
        riscos_file_description *rdesc,
        nfs_file_descriptor     *ndesc
)
{
        _kernel_oserror *err;

        /*
                Copy the name across
        */
        err = nfsname_to_riscos_name( &rdesc->name, ndesc->desc.name, ndesc );

        if ( err )
                return err;

        nfs_to_riscos_attributes( &rdesc->attr, &ndesc->desc );

        return NULL;
}

/*
        Converts from riscos to nfs file description.
        Only these field of the fattr in ndesc are filled in:
                mode;
                uid;
                gid;
                size;
                atime;
                mtime;
*/
_kernel_oserror *riscos_to_nfs_description
(
        nfs_file_description    *ndesc,
        riscos_file_description *rdesc
)
{
        _kernel_oserror *err;
        YesNoAnswer is_executable = No;

        /*
                Generate a nfs name
        */
        err = riscos_name_to_nfsname( &ndesc->name, rdesc->name, &rdesc->attr );

        if ( err )
                return err;

        ndesc->chars_before_suffix = strlen( rdesc->name );

        /*
                Generate lxa information.
                If (its a file) and (its stamped obviously or load=exec) and (its not dead) then its lxa
        */
        if ( rdesc->attr.type == FileType_File &&
             (
                 (   rdesc->attr.load_address & 0xfff00000) != 0xfff00000 ||
                     rdesc->attr.load_address == rdesc->attr.execute_address
             ) &&
             (
                     rdesc->attr.load_address != 0xdeaddead ||
                     rdesc->attr.execute_address != 0xdeaddead
             ))
        {
                ndesc->file_is_lxa = Yes;
                ndesc->load_address = rdesc->attr.load_address;
                ndesc->execute_address = rdesc->attr.execute_address;
        }
        else
        {
                ndesc->file_is_lxa = No;
        }

        /*
                Fill in the attr
        */
        if ( rdesc->attr.type == FileType_Directory )
        {
                ndesc->attr.mode = NFSMODE_DIR;
                ndesc->attr.size = -1;
        }
        else if ( rdesc->attr.type == FileType_File &&
                        ((rdesc->attr.load_address >> FileType_Shift) & FileType_Mask) == FileType_SoftLink )
        {
                ndesc->attr.mode = NFSMODE_LNK;
                ndesc->attr.size = -1;
        }
        else
        {
                ndesc->attr.mode = NFSMODE_REG;

                if ( (rdesc->attr.load_address & 0xffffff00) == (0xfff00000 | (FileType_UNIXExecutable << FileType_Shift)) )
                {
                        is_executable = Yes;
                }

                ndesc->attr.size = rdesc->attr.file_length;

                if ( ndesc->file_is_lxa )
                        ndesc->attr.size += sizeof( appendum );
        }

        if ( rdesc->attr.access & FileAccess_OwnerRead )
        {
                ndesc->attr.mode |= is_executable ? (NFSMODE_USER_EXECUTE | NFSMODE_USER_READ) : NFSMODE_USER_READ;
        }

        if ( rdesc->attr.access & FileAccess_OwnerWrite )
        {
                ndesc->attr.mode |= NFSMODE_USER_WRITE;
        }

        if ( rdesc->attr.access & FileAccess_PublicRead )
        {
                ndesc->attr.mode |=
                        is_executable ?
                                (NFSMODE_OTHERS_EXECUTE | NFSMODE_OTHERS_READ | NFSMODE_GROUP_EXECUTE | NFSMODE_GROUP_READ) :
                                (NFSMODE_OTHERS_READ | NFSMODE_GROUP_READ);
        }

        if ( rdesc->attr.access & FileAccess_PublicWrite )
        {
                ndesc->attr.mode |= NFSMODE_OTHERS_WRITE | NFSMODE_GROUP_WRITE;
        }

        if ( rdesc->attr.type == FileType_Directory )
        {
                ndesc->attr.mode |= NFSMODE_USER_EXECUTE | NFSMODE_USER_READ | NFSMODE_USER_WRITE;

                if ( !( rdesc->attr.access & FileAccess_Locked ) )
                        ndesc->attr.mode |= NFSMODE_OTHERS_EXECUTE | NFSMODE_GROUP_EXECUTE;
        }

        ndesc->attr.uid = -1;
        ndesc->attr.gid = -1;

        /*
                Convert the date.
        */
        riscos_date_to_unix_date( &ndesc->attr.mtime.useconds, &ndesc->attr.mtime.seconds, rdesc->attr.execute_address, rdesc->attr.load_address & 0xff );

        ndesc->attr.atime = ndesc->attr.mtime;

        return NULL;
}

/*
        Change the info on a particular file
*/
_kernel_oserror *change_info_given_file
(
        nfs_file_descriptor *ndesc,
        int *load_address,
        int *execute_address,
        int *access
)
{
        _kernel_oserror *err;
        riscos_file_description rdesc;
        sattr snattr;
        nfs_file_description new_file_desc;
        fattr *nattr;
        appendum bit_on_the_end_of_the_file;
        int old_mode = ndesc->desc.attr.mode;

        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
        {
                return &mb_not_to_a_soft_link_you_dont;
        }

        /*
                Convert the info and adjust the bits which need changing
        */
        err = nfs_to_riscos_description( &rdesc, ndesc );

        if ( err )
                return err;

        if ( load_address )
                rdesc.attr.load_address = *load_address;
        if ( execute_address )
                rdesc.attr.execute_address = *execute_address;
        if ( access )
                rdesc.attr.access = *access;

        err = riscos_to_nfs_description( &new_file_desc, &rdesc );

        free( rdesc.name );

        if ( err )
                return err;

        /*
                Leave owner read/write bits alone on directories
        */
        if ( (old_mode & NFSMODE_FMT) == NFSMODE_DIR )
        {
                new_file_desc.attr.mode =
                        (new_file_desc.attr.mode & ~(NFSMODE_USER_READ | NFSMODE_USER_WRITE)) |
                        (old_mode & (NFSMODE_USER_READ | NFSMODE_USER_WRITE));
        }

        /*
                Set up most of the fields of snattr for a set attributes
        */
        if ( access )
                snattr.mode = new_file_desc.attr.mode;
        else
                snattr.mode = -1;
        snattr.uid = -1;
        snattr.gid = -1;
        snattr.size = -1;
        snattr.atime = new_file_desc.attr.atime;
        snattr.mtime = new_file_desc.attr.mtime;

        /*
                Check for change in LXA status
        */
        if ( new_file_desc.file_is_lxa &&
                ( !ndesc->desc.file_is_lxa ||
                ndesc->desc.load_address != new_file_desc.load_address ||
                ndesc->desc.execute_address != new_file_desc.execute_address ) )
        {
                /*
                        New attributes indicate file will be an lxa form and
                        either the file wasn't lxa before or the load or exec
                        address has changed. This means an appendum needs to
                        be written out.
                */

                /*
                        Append (changed) lxa to end of file.
                */
                bit_on_the_end_of_the_file.lxa.load_address = new_file_desc.load_address;
                bit_on_the_end_of_the_file.lxa.execute_address = new_file_desc.execute_address;

                err = nfs_write(
                        &nattr,
                        ndesc->mp,
                        &ndesc->file,
                        riscos_extent( ndesc ),
                        (char *)&bit_on_the_end_of_the_file,
                        sizeof( appendum ) );

                if ( err )
                {
                        free( new_file_desc.name );
                        return err;
                }

                ndesc->desc.file_is_lxa = Yes;
                ndesc->desc.load_address = new_file_desc.load_address;
                ndesc->desc.execute_address = new_file_desc.execute_address;

                ndesc->desc.attr = *nattr;
        }
        else if ( !new_file_desc.file_is_lxa && ndesc->desc.file_is_lxa )
        {
                ndesc->desc.file_is_lxa = No;

                /*
                        Shorten file to remove lxa - gets performed in change attributes below.
                */
                snattr.size = new_file_desc.attr.size;
        }

        /*
                Don't allow non-owners to explicitely adjust the date stamps
        */
        if ( ndesc->desc.attr.uid != ndesc->mp->user->uid )
        {
                snattr.atime.seconds =
                snattr.atime.useconds =
                snattr.mtime.seconds =
                snattr.mtime.useconds = -1;
        }

        /*
                Change the nfs attributes
        */
        err = nfs_setattr( &nattr, ndesc->mp, &ndesc->file, &snattr );

        if ( err )
        {
                free( new_file_desc.name );
                return err;
        }

        ndesc->desc.attr = *nattr;

        /******************************************************************

        This window is open when the file has been truncated for becoming
        dated, but hasn't yet been renamed.

        ******************************************************************/

        /*
                Check for change in name.
        */
        if ( strcmp( new_file_desc.name, ndesc->desc.name ) != 0 )
        {
                /*
                        Rename to new name.
                */
                err = nfs_rename_safely( ndesc->mp, &ndesc->dir, new_file_desc.name, &ndesc->dir, ndesc->desc.name );

                if ( err )
                {
                        free( new_file_desc.name );
                        return err;
                }
        }

        free( ndesc->desc.name );
        ndesc->desc.name = new_file_desc.name;
        ndesc->desc.chars_before_suffix = new_file_desc.chars_before_suffix;

        return err;
}

_kernel_oserror *change_info
(
        char *name,
        int *load_address,
        int *execute_address,
        int *access
)
{
        _kernel_oserror *err;
        nfs_file_descriptor ndesc;
        char *path_to_leaf;
        char *leaf_position;

        err = find_leaf( name, &ndesc, &path_to_leaf, &leaf_position, &current_directory );

        if ( err )
                return err;

        free( path_to_leaf );

        err = change_info_given_file( &ndesc, load_address, execute_address, access );

        free( ndesc.desc.name );

        return err;
}

/*
        Changes the length of the file and
        fills with the filling if fill_it is true
*/
_kernel_oserror *change_length_given_file
(
        nfs_file_descriptor     *ndesc,
        int                     wanted_length,
        char                    *filling,
        bool_t                  fill_it    /* JRS 7/92 added because filling can be 0 and still valid! */
)
{
        _kernel_oserror *err = NULL;
        sattr nattr;
        appendum bit_on_the_end;
        fattr *nattrres;
        int current_length = riscos_extent( ndesc );
        int start;
        int len;

        if ( (ndesc->desc.attr.mode & NFSMODE_FMT) == NFSMODE_LNK )
        {
                return &mb_not_to_a_soft_link_you_dont;
        }

        /*
                Truncate the file as necessary
        */
        if ( current_length > wanted_length )
        {
                nattr.mode = -1;
                nattr.uid = -1;
                nattr.gid = -1;
                nattr.size = wanted_length;
                nattr.atime.seconds = -1;
                nattr.atime.useconds = -1;
                nattr.mtime.seconds = -1;
                nattr.mtime.useconds = -1;

                ndesc->desc.attr.size = wanted_length;

                /*
                        Write the bit on the end if necessary.
                */
                if ( ndesc->desc.file_is_lxa )
                {
                        bit_on_the_end.lxa.load_address = ndesc->desc.load_address;
                        bit_on_the_end.lxa.execute_address = ndesc->desc.execute_address;
                        err = nfs_write( &nattrres, ndesc->mp, &ndesc->file, 0, (char *)&bit_on_the_end, sizeof( appendum ));

                        if ( err )
                        {
                                free( ndesc->desc.name );

                                return err;
                        }

                        ndesc->desc.attr = *nattrres;

                        nattr.size += 8;
                }


                /*
                        Shorten the file (to the bit on the end perhaps)
                */
                err = nfs_setattr( &nattrres, ndesc->mp, &ndesc->file, &nattr );

                if ( err )
                {
                        free( ndesc->desc.name );

                        return err;
                }

                ndesc->desc.attr = *nattrres;
        }

        /*
                Write out the filling or extend the file as necessary
        */
        if ( fill_it )
        {
                start = 0;
                len = wanted_length;
                err = putbytes( &filling, ndesc, &start, &len );
        }
        else if ( current_length < wanted_length )
        {
                err = write_zeros( ndesc, wanted_length - 1, 1 );
        }

        return err;
}

int riscos_extent
(
        nfs_file_descriptor *ndesc
)
{
        if ( ndesc->desc.file_is_lxa )
                return ndesc->desc.attr.size - sizeof( appendum );
        else
                return ndesc->desc.attr.size;
}
