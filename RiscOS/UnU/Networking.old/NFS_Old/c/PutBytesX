/*	PUTBYTESX

Purpose :

History :
Date	Who    Comments
-----------------------------------------------------------------------------

10/02/95  CP    Added code to increment network access counter

****************************************************************************/

#ifndef __NFSNFS_H
#include "NFS.h"
#endif

#ifdef NETACCESSCOUNT
extern unsigned int NetAccessCountG;
#endif


static struct timeval TIMEOUT = { 25, 0 };

/*
 * XDR counted bytes with appendum on end.
 * *cpp is a pointer to the struct, *sizep is the count.
 */
static bool_t xdr_bytes_with_appendum
(
        XDR *xdrs,
        bytes_with_appendum **cpp,
        u_int *sizep,
        u_int maxsize
)
{
        bytes_with_appendum *bwa;
        static bytes_with_appendum retstruct;
        char transfer_buffer[ BYTES_PER_XDR_UNIT + sizeof( appendum ) ];
        u_int nodesize;
#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 3;     /* entering NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif

        switch( xdrs->x_op )
        {
        case XDR_ENCODE:
                bwa = *cpp;

                /*
                        Size too much?
                */
                if ( *sizep > maxsize )
                        return FALSE;

                /*
                        nodesize is the total size of the bytes with the appendum
                */
                nodesize = *sizep + sizeof( appendum );

                /*
                        Transfer the nodesize
                */
                if ( !xdr_u_int( xdrs, &nodesize ) )
                        return FALSE;

                /*
                        Transfer the bulk in one lump as a whole multplie of the XDR unit size.
                        This will ensure no packing is placed between the bytes and the appendum.
                */
#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* returning to other people's code */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                if ( !xdr_opaque( xdrs, bwa->bytes, *sizep & ~(BYTES_PER_XDR_UNIT-1) ) )
                        return FALSE;

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 3;     /* entering NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                /*
                        Copy the remainder of the bytes to the transfer buffer
                */
                memcpy( &transfer_buffer[ 0 ],
                        bwa->bytes + (*sizep & ~(BYTES_PER_XDR_UNIT-1)),
                        *sizep & (BYTES_PER_XDR_UNIT-1) );

                /*
                        Copy the appendum to the transfer buffer
                */
                memcpy( &transfer_buffer[ *sizep & (BYTES_PER_XDR_UNIT-1) ],
                        &bwa->bit_on_the_end,
                        sizeof( appendum ));

                /*
                        Encode the transfer buffer, which may have some packing on the end
                */
#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* returning to other people's code */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                if ( !xdr_opaque( xdrs, transfer_buffer, (*sizep & (BYTES_PER_XDR_UNIT-1)) + sizeof( appendum )) )
                        return FALSE;

                return TRUE;
                break;

        case XDR_DECODE:
                *cpp = bwa = &retstruct;

                /*
                        Get the total number of bytes
                */
                if ( !xdr_u_int( xdrs, &nodesize ) )
                        return FALSE;

                *sizep = nodesize - sizeof( appendum );

                if ( *sizep > maxsize )
                        return FALSE;

                /*
                        Get some memory to put the bytes
                */
                if ( (bwa->bytes = (char *)mem_alloc( *sizep )) == NULL )
                        return FALSE;

                /*
                        Get the bulk of the opaque data, as a number of XDR units to circumvent packing problems
                */
                if ( !xdr_opaque( xdrs, bwa->bytes, *sizep & ~(BYTES_PER_XDR_UNIT-1) ) )
                        return FALSE;

                /*
                        Get the rest of the data into the transfer buffer
                */
                if ( !xdr_opaque( xdrs, transfer_buffer, (*sizep & (BYTES_PER_XDR_UNIT-1)) + sizeof( appendum ) ) )
                        return FALSE;

                /*
                        Move the bytes residue to the required destination
                */
                memcpy( bwa->bytes + (*sizep & ~(BYTES_PER_XDR_UNIT-1)), transfer_buffer, (*sizep & (BYTES_PER_XDR_UNIT-1)) );
                /*
                        Move the appendum to the required location
                */
                memcpy( &bwa->bit_on_the_end, transfer_buffer + (*sizep & (BYTES_PER_XDR_UNIT-1)), sizeof( appendum ) );

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* leaving NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                return TRUE;
                break;

        case XDR_FREE:
                bwa = *cpp;

                if ( bwa->bytes )
                {
                        mem_free( bwa->bytes, *sizep );
                        bwa->bytes = NULL;
                }

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* leaving NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
                return TRUE;
                break;
        }

#ifdef PROFILEIT
{
        _kernel_swi_regs r;
        r.r[1] = 2;     /* leaving NFS bowels */
        _kernel_swi( 0xc0103, &r, &r );
}
#endif
        return FALSE;
}

static bool_t xdr_writeargs_with_appendum
(
        XDR *xdrs,
        writeargs_with_appendum *objp
)
{
        if (!xdr_nfs_fh(xdrs, &objp->file)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->beginoffset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->offset)) {
                return (FALSE);
        }
        if (!xdr_u_int(xdrs, &objp->totalcount)) {
                return (FALSE);
        }
        if (!xdr_bytes_with_appendum(xdrs, (bytes_with_appendum **)&objp->data.data_val, (u_int *)&objp->data.data_len, NFS_MAXDATA)) {
                return (FALSE);
        }
        return (TRUE);
}


attrstat *nfsproc_write_with_appendum_2
(
        writeargs_with_appendum *argp,
        CLIENT                  *clnt
)
{
        static attrstat res;

        bzero(&res, sizeof(res));

#ifdef NETACCESSCOUNT
NetAccessCountG++;
#endif
        if (clnt_call(
                clnt,
                NFSPROC_WRITE,
                xdr_writeargs_with_appendum,
                argp,
                xdr_attrstat,
                &res,
                TIMEOUT) != RPC_SUCCESS)
        {
                return (NULL);
        }

        return (&res);
}
