
#ifndef __NFSNFS_h
#include "NFS.h"
#endif

_kernel_oserror *fsentry_args( FSEntry_Args_Parameter *parm )
{
        _kernel_oserror *err;
        OpenFile *of = (OpenFile *)parm->handle;
        fattr *nattr;
        RISCOSAttributes rattr;
        int dummy_length;

        hourglass_on();

#ifdef SHOWCALLS
        printf(
                "_Args( %d, %s )\n",
                parm->reason,
                of->nfs_fd.desc.name );
#endif

        switch( parm->reason )
        {
        case FSEntry_Args_Reason_ReadSequentialFilePointer:
                parm->arg.sequential_pointer = of->sequential_file_pointer;
                err = NULL;
                break;

        case FSEntry_Args_Reason_WriteSequentialFilePointer:
                if ( of->read_only )
                {
                        err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );

                        if ( err )
                                break;

                        of->nfs_fd.desc.attr = *nattr;

                        if ( ( !of->nfs_fd.desc.file_is_lxa && parm->arg.sequential_pointer > nattr->size ) ||
                                ( of->nfs_fd.desc.file_is_lxa && parm->arg.sequential_pointer > nattr->size - sizeof( appendum ) ) )
                        {
                                err = &mb_outside_file;
                                break;
                        }
                }

                dummy_length = 0;
                err = putbytes( NULL, &of->nfs_fd, &parm->arg.sequential_pointer, &dummy_length );

                if ( err )
                        break;

                of->sequential_file_pointer = parm->arg.sequential_pointer;
                break;

        case FSEntry_Args_Reason_ReadFileExtent:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );

                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;

                        parm->arg.extent = riscos_extent( &of->nfs_fd );
                }
                break;

        case FSEntry_Args_Reason_WriteFileExtent:
                err = change_length_given_file( &of->nfs_fd, parm->arg.extent, NULL, No );
                break;

        case FSEntry_Args_Reason_ReadSizeAllocatedToFile:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );
                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;
                        parm->arg.extent = nattr->blocksize * nattr->blocks;
                }
                break;

        case FSEntry_Args_Reason_EOFCheck:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );

                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;

                        parm->arg.EOF_Has_Been_Reached = of->sequential_file_pointer >= riscos_extent( &of->nfs_fd );
                }
                break;

        case FSEntry_Args_Reason_FlushFileBuffer:
                /*
                        Ignore flush commands - they mean nothing to us
                */
                err = NULL;
                break;

        case FSEntry_Args_Reason_EnsureFileSize:
                /*
                        Nothing to do here - NFS protocol does not
                        do this.
                */
                err = NULL;
                break;

        case FSEntry_Args_Reason_WriteZerosToFile:
                err = write_zeros(
                        &of->nfs_fd,
                        parm->arg.write_zeros.start,
                        parm->arg.write_zeros.number );
                break;

        case FSEntry_Args_Reason_ReadFileDateStamp:
                err = nfs_getattr( &nattr, of->nfs_fd.mp, &of->nfs_fd.file );
                if ( !err )
                {
                        of->nfs_fd.desc.attr = *nattr;

                        nfs_to_riscos_attributes( &rattr, &of->nfs_fd.desc );

                        parm->arg.info.load_exec.load_address = (char *)rattr.load_address;
                        parm->arg.info.load_exec.execute_address = (char *)rattr.execute_address;
                }
                break;

        default:
                return &mb_nfserr_BadParameters;
                break;
        }

        hourglass_off();

        return err;
}
