/*
        RISC OS NFS file path munging utilities
*/

#ifndef __NFSPATHMUNGE_H
#define __NFSPATHMUNGE_H
#ifndef __NFSTYPES_H
#include "NFSTypes.h"
#endif

extern _kernel_oserror *riscos_name_to_nfsname( char **, char *, RISCOSAttributes * );


/*
        Input: [nfsname] [ftype]

        Output: [riscosname]

        convert an nfs filename to a riscos filename.
        [ndesc] is used to determine if it is a regular file, so a candidate for
        special extension -> filetype treatment.
 */
extern void move_nfsname_to_riscos_name( char *riscosname,  char *nfsname,  nfs_file_descriptor *ndesc );


/*
        Input: [nfsname] [ftype]

        Output: [riscosname]

        as move_nfsname_to_riscos_name, but allocates space for [riscosname].
 */
extern _kernel_oserror *nfsname_to_riscos_name( char **riscosname, char *nfsname, nfs_file_descriptor *ndesc );


extern _kernel_oserror *find_dir_for_leaf( char *, nfs_file_descriptor *, char **, char **, DirectoryPoint * );
extern _kernel_oserror *nfs_lookup_extended( nfs_file_descriptor *ndesc );
extern _kernel_oserror *find_object_in_directory( nfs_file_descriptor *, char * );
extern _kernel_oserror *find_leaf( char *, nfs_file_descriptor *, char **, char **, DirectoryPoint * );
extern _kernel_oserror *find_directory_leaf( char *, nfs_file_descriptor *, char **, char **, DirectoryPoint * );
extern _kernel_oserror *find_regular_leaf( char *, nfs_file_descriptor *, char **, char ** );
extern YesNoAnswer reject_nfs_file( char * );
extern _kernel_oserror *construct_full_path( char **, DirectoryPoint * );
extern int caseless_wildncmp( const char *, const char *, int );
extern int wildncmp( const char *, const char *, int );
extern int caseless_strncmp( const char *, const char *, int );
extern int caseless_strcmp( const char *, const char * );
#endif
