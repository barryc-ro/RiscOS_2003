/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.2  95/05/02  10:08:05  kwelton
 * Completely reworked to make it closer to the UNIX original, i.e. check
 * both read and write access in one call by OR'ing the appropriate mode
 * bits.  This call is still pretty naff, because RISC OS has no concept
 * of users, therefore when used on NFS filesystems this call has to
 * assume that it is the owner access bits that need to be checked rather
 * than the public ones.
 * 
 * Revision 1.1  95/04/20  09:49:54  kwelton
 * Initial revision
 * 
 */
#include "errno.h"
#include "kernel.h"
#include "swis.h"

#include "sys/fcntl.h"

#include "unixlib.h"

int access(char *path, int mode)
{
    _kernel_swi_regs r;

    /* clear global error indicator */
    errno = 0;

    r.r[0] = 17;
    r.r[1] = (int)path;
    r.r[4] = 0;
    (void)_kernel_swi(XOS_Bit | OS_File, &r, &r);

    /*
     * r0 = 0 means object not found
     */
    if( r.r[0] == 0 )
	errno = ENOENT;

    /*
     * check requested access bits: X_OK always returns success since
     * RISC OS has no concept of execute permissions; R_OK and W_OK
     * need to be tested if the object is not a directory.
     */
    if( errno == 0 && r.r[0] != 2 )
    {
	int attr = r.r[5];

	if( (mode & R_OK) )
	    if( !attr & (1 << 0) )
		errno = EACCES;

	if( (mode & W_OK) )
	    if( !attr & (1 << 1) )
		errno = EACCES;
    }

    /* all done */
    return((errno == 0) ? 0 : -1);
}

/* EOF access.c */
