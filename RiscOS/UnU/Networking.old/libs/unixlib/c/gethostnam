/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.1  95/04/20  09:50:07  kwelton
 * Initial revision
 * 
 */
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "unixlib.h"
#include "stubs.h"

static const char hostnamevar[] = "Inet$HostName";
static const char defaulthostname[] = "ARM_NoName";

/**********************************************************************/

char *getvarhostname(void)
{
    int retried = 0;
    _kernel_swi_regs r;
    _kernel_oserror *e;

    do
    {
	r.r[0] = (int)hostnamevar;
	r.r[1] = (int)_varnamebuf;
	r.r[2] = (int)VARBUFSIZE;
	r.r[3] = 0;
	r.r[4] = 0;
	if( (e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &r, &r)) == NULL )
	{
	    int nread = r.r[2];

	    _varnamebuf[nread] = '\0';

	    if (nread > 0)
		return(_varnamebuf);
	}

	if( !retried )
	{
	    r.r[0] = (int)hostnamevar;
	    r.r[1] = (int)defaulthostname;
	    r.r[2] = sizeof(defaulthostname);
	    r.r[3] = 0;
	    r.r[4] = 0; 
	    e = _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);
	}
    } while( !(retried++) && e == NULL );

    /*
     * failed - return nothing
     */
    return ((char *)0);
}

/**********************************************************************/

int gethostname(char *name, int max_namelen)
{
    char *n;

    if( (n = getvarhostname()) != 0 )
	(void)strncpy(name, n, max_namelen);
    else
	(void)strncpy(name, defaulthostname, max_namelen);

    return (0);
}

/**********************************************************************/

/* EOF gethostnam.c */
