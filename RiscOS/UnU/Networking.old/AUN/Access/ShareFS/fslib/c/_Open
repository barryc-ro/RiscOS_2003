/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.1  95/01/04  17:57:04  kwelton
 * Initial revision
 * 
 */

/* $Id$ */

#include "FS.h"

#if 0
# define DEBUG
#endif

#include "RO3ONLY.h"
#define BUFFER_SIZE 1024

_kernel_oserror *fsentry_open(FSEntry_Open_Parameter *parm)
{
    _kernel_oserror *err;
    FileEntry *fse = (FileEntry *)parm->open_definition.handle;
    WHICH how;
#ifdef DEBUG
    printf("Open(#%s %s %d)\n",
	   parm->open_definition.special_field ?
	   parm->open_definition.special_field : "NULL",
	   parm->open_definition.filename ?
	   parm->open_definition.filename : "NULL",
	   parm->open_definition.reason);
#endif

    switch (parm->open_definition.reason)
    {
      case FSEntry_Open_Reason_Update:
	how = OPENUP;
	break;
      case FSEntry_Open_Reason_OpenRead:
	how = OPENIN;
	break;
      case FSEntry_Open_Reason_CreateUpdate:
	how = CREATE;
	break;
      default:
	return ERR(BadParm);
    }

    err = FileEntry_Open(NULL, fixsf(parm->open_definition.special_field),
			 parm->open_definition.filename, how, &fse);
    if (err)
    {
	parm->open_result.handle = NULL;
	if (err->errnum != ERRNotFound)
	{
#ifdef DEBUG
	    printf("Error %p number %x string %s\n",
		   err, err->errnum, err->errmess);
#endif
	    return err;
	}
    }
    else
    {
	FileDesc d = FileEntry_Desc(fse);
	int i;
	parm->open_result.handle = (FileSystemHandle) fse;
	i = 0;
	if (d.attr & Attr_W && parm->open_definition.reason != FSEntry_Open_Reason_OpenRead)
	    i |= InformationWord_WritePermitted;
	if (d.attr & Attr_R)
	    i |= InformationWord_ReadPermitted;
	if (!d.buffered && !d.noosgbpb)
	    i |= InformationWord_UnbufferedOS_GBPBSupported;
	if (d.interactive)
	    i |= InformationWord_StreamIsInteractive;
	if (2 == d.type)
	    i |= InformationWord_ObjectIsDirectory;
	parm->open_result.information_word = i;
#ifdef DEBUG
	printf("Open returns handle %p attr %x infoword %x\n", fse, d.attr, i);
#endif
#if !BUFFEREDONLY
	if (!d.buffered)
	    parm->open_result.buffer_size = 0;
	else
#endif
	{
	    parm->open_result.buffer_size = BUFFER_SIZE;
	    parm->open_result.file_extent = d.length;
	    parm->open_result.allocated_space = FileEntry_Allocated(fse);
	}
    }
    return NULL;
}

/* EOF _Open.c */
