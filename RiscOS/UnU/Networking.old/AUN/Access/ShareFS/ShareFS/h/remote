/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.1  95/01/09  15:13:22  kwelton
 * Initial revision
 * 
 */

/* $Id$ */

/*
 * This file specifies the protocol used by remotefs/remotedaemon.
 * The msg swi protocol passes in a union Message and its size,
 * and an in/out data area, and returns a result or error block.
 */

#define SERVER_VERSION 2

/*
 * The comment after each op code specifies which portion of a
 * union Message is sent, and which part the reply consists of
 */

/*
 * A filespec passed to the server is a directory handle+path
 * pair. The path is a sequence of componants separated by dots, or
 * may be empty to represent the directory. The special handle zero
 * refers to an imaginary directory containing the exported points.  A
 * path containing any special chars is illegal.
 */

enum op
{ RFIND        /* path ->          FileDesc */
, ROPENIN      /* path -> handle + FileDesc */
, ROPENUP      /* path -> handle + FileDesc */
#define ROPENDIRSIZE 2048       /* read from start of directory if oldhandle still valid */
, ROPENDIR     /* pathint(oldhandle) -> handle + FileDesc + res [data] */
, RCREATE      /* path -> handle + FileDesc */
, RCREATEDIR   /* path -> handle + FileDesc */
, RDELETE      /* path -> FileDesc */
, RACCESS      /* pathint(attr) -> FileDesc */
, RFREESPACE   /* path -> freespace */
, RRENAME      /* pathint [data]-> ; data contains another path */
, RCLOSE       /* handle -> */
, RREAD        /* filedetails -> res [data] */
, RWRITE       /* filedetails [data] -> res */
, RREADDIR     /* filedetails -> res [data] */
, RENSURE      /* handleint -> length */
, RSETLENGTH   /* handleint -> length */
, RSETINFO     /* filedetails -> FileDesc */
, RGETSEQPTR   /* handle -> seqptr */
, RSETSEQPTR   /* handleint -> seqptr */
, RDEADHANDLES /* server broadcast: handletable */
, RZERO	       /* filedetails -> res */
, RVERSION     /* -> seqptr */
};

struct filespec
{ int dirhandle;
  char path[240];
};

/*
 * This is the structure of the message blocks used.
 * 1st word of message is reserved for use by the transport module
 * on the send, and the next word contains the operation code
 * The rest is operation dependent
 */

union Message
{ /************ Commands ***********/
  struct base
  { int err;
    enum op op;
  } base;
  struct handletable
  { int err;
    enum op op;
    int handles[240/4];
  } handletable;
  struct path
  { int err;
    enum op op;
    struct filespec spec;
  } path;
  struct pathint
  { int err;
    enum op op;
    int val;
    struct filespec spec;
  } pathint;
  struct handle
  { int err;
    enum op op;
    int handle;
  } handle;
  struct handleint
  { int err;
    enum op op;
    int handle;
    int val;
  } handleint;
  struct filedetails
  { int err;
    enum op op;
    int handle,offset,length;
  } filedetails;
/********** Reply ************/
  int err;
  struct desc
  { int err;
    FileDesc FileDesc;
  } desc;
  struct status
  { int err;
    struct FileDesc FileDesc;
    int handle;
  } status;
  struct statusres
  { int err;
    struct FileDesc FileDesc;
    int handle;
    int length;
    int newpos;
  } statusres;
  struct res
  { int err;
    int length;
    int newpos;
  } res;
  struct ptr
  { int err;
    int seqptr;
  } ptr;
  struct free
  { int err;
    struct freespace freespace;
  } free;
  struct bitmap
  { int err;
    int bits[1];
  } bitmap;
};

/* EOF remote.h */
