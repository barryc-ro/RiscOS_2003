/*	C.ENUMDIR

Purpose : Utility functions to enumerate the files in a directory.

Functions :  GetNextNFSDirEntry
	     GetNFSDirEntry
	     Get_NFS_Directory


History :
Date	Who    Comments
-----------------------------------------------------------------------------
28/8/92 ??     Initial version
12/1/95 CP     Removed functions start_through_directory and
	       step_to_next_file.  These have both been replaced with
	       Get_NFS_Directory, which fills in a NFS_Directory_T structure 	       with as many entries as can be transferred (set by
	       NFS_MAXDATA).  NO check for bad names yet.
	       Deleted read_this_file since functions using directories
	       have the concept of 'entries'
13/1/95	CP     Added include file Cache.h
5/2/95	CP     Restructured the ability to read directories so that the
	       information is cached.  Added functions OpenNFSDirectory and
	       GetNextNFSDirEntry.  Get_NFS_Directory changed to accept
	       discrete mount point, file handle and cookie input values
	       rather than a 'directory' structure. It is now called from
	       OpenNFSDirectory.
6/2/95  CP     Still a bug....need a routine to go to a random point in the
	       cache.  OpenNFSDirectory restructured and renamed to
	       GetNFSDirEntry.
16/2/95 CP     GetNFSDirEntry now goes to specified entry in directory.
	       Always freshens cache when starting a directory
	       (position requested == 0)

****************************************************************************/

#ifndef __NFS_H
#include "NFS.h"
#endif

#ifndef __NFSCACHE_H
#include "Cache.h"
#endif

#include <string.h>

static _kernel_oserror * Get_NFS_Directory(MountPoint *,
		  		    	   nfs_fh,
		  		    	   nfscookie,
		  		    	   entry **,
		  		    	   BOOL *);

static BOOL EOF_flagG;
static entry *peThisEntryG = NULL;
static entry *pePrevEntryG = NULL;
static clock_t TimeOutTimeG = 0;
static MountPoint MountG = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
static nfs_fh HandleG = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  /* 32 x 0 */
static unsigned int positionG = 0;

/********* GetNextNFSDirEntry  *********************************************

Purpose : Moves on to the next entry in the current directory (as opened by
	  GetNFSDirEntry(...), and returns its filename.  A check is made
	  to see if it is worthwhile freshening the directory information
	  beforehand.  A flag is filled in (if defined) if a freshen has
	  happened, allowing the caller to decide whether to use the data, or
	  re-open the directory.

Parameters : char *, pointer to the name
             BOOL * pointer to a 'freshened' flag.  No action if NULL.

Returns	:  standard riscos error pointer
	   fills in pointer to the name of the first entry, NULL otherwise
	   filles in status of Freshened

****************************************************************************/

_kernel_oserror * GetNextNFSDirEntry(char **FileName, BOOL *Freshened)
{
   _kernel_oserror *err;

#if DEBUGON
printf("GetNextNFSEntry\n");
#endif

   positionG++;  /* we _know_ that the pointer is going to be moved,
   		    so even if we hit the end of the list, the cache knows
   		    that it is no longer pointing in the right place ! */

  /* see if directory needs to be freshened */
  if(TimeOutTimeG < clock())
  {
    /* get directory from current position */
#if DEBUGON
printf("GetNextNFSDirEntry: freshening,calling Get_NFS_Directory with cookie %i%i%i%i...", peThisEntryG->cookie[0],peThisEntryG->cookie[1],peThisEntryG->cookie[2],peThisEntryG->cookie[3] );
#endif
   err = Get_NFS_Directory(&MountG, HandleG, peThisEntryG->cookie, &peThisEntryG, &EOF_flagG);
   if ( err )
   	return err;
#if DEBUGON
printf("OK\n");
#endif


    /* set freshened flag */
    if(Freshened != NULL)
    {
       *Freshened = TRUE;
       TimeOutTimeG = clock() + out_of_date_time;
    }
  }

  else
  {
    if(Freshened != NULL)  /* see if the caller wants to know ! */
       *Freshened = FALSE;  /* no timeout */

    pePrevEntryG = peThisEntryG;  /* need memory */
    peThisEntryG = peThisEntryG->nextentry; /* move on to next one */

    if(peThisEntryG == NULL) /* end of list; get next chunk */
    {
       if(!EOF_flagG)
       {
#if DEBUGON
printf("GetNextNFSDirEntry: End of chunk,calling Get_NFS_Directory...");
#endif
          err = Get_NFS_Directory(&MountG, HandleG, pePrevEntryG->cookie,
&peThisEntryG, &EOF_flagG);
	   if(err)
	      return err;
#if DEBUGON
printf("OK\n");
#endif

       }

       else
       { /* nextentry == NULL && EOF_flagG == TRUE
       	    ie. no nextentry, AND reached end of the directory */
          *FileName = NULL;
          return NULL;
       } /* endif(!EOF_flagG) */

    } /* endif (peThisEntryG != NULL) */

  }/* endif(TimeOutTimeG < clock()) */

  /* whatever has happened before, peThisEntry is now pointing to a valid
entry by now */

   /* now get rid of the awkward file names */
   while((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == Yes))
   {
     pePrevEntryG = peThisEntryG;
     peThisEntryG = peThisEntryG->nextentry;

     if(peThisEntryG == NULL)
     {
       if(!EOF_flagG)
       {
          /* reached end of directory segment, get another */
	  /* VERY UNLIKELY TO USE THIS CODE ! */

#if DEBUGON
printf("GetNextNFSDirEntry: End of chunk(2),calling Get_NFS_Directory...");
#endif
           err = Get_NFS_Directory(&MountG, HandleG, pePrevEntryG->cookie,
&peThisEntryG, &EOF_flagG);
	   if(err)
	      return err;
#if DEBUGON
printf("OK\n");
#endif
       }

       else
          break;  /* unlikely, but covered */
       /* endif(!EOF_flagG) */

     } /* endif (peThisEntryG == NULL) */

   }  /* endwhile (reject_nfs_file(peThisEntry->name) == Yes) */

   /* entry now has guaranteed valid name */

   if(peThisEntryG != NULL)
   {
      *FileName = peThisEntryG->name;
   }

   else
      *FileName = NULL; /* not a serious error, just no file ! */

   return NULL;


}  /* endfunction GetNextNFSDirEntry */


/********* GetNFSDirEntry  *********************************************

Purpose : Moves to the specified entry in the current directory , and returns
	  its filename.

	  The directory data is freshened if the existing data is too old
	  (NFS global timeout parameter), if a different direftory is opened
	  (!), or if the request is for the start of the directory
	  (position == 0).  The latter condition is necessary to ensure that
	  fresh interrogations of the same directory are up to date.

Parameters : Mount Point
	     Handle of directory to open
	     position to start at
	     pointer to the name pointer
             pointer to a 'freshened' flag.  No action if NULL.

Returns	:  standard riscos error pointer
	   fills in pointer to the name of the first entry, NULL otherwise
	   fills in status of Freshened

****************************************************************************/


_kernel_oserror * GetNFSDirEntry (MountPoint *Mount,
		  		  nfs_fh Handle,
		  		  int position,
		  		  char **FileName,
		  		  BOOL *Freshened)
{
  _kernel_oserror *err;

  /*------------------------------------------------------------------------
     if the requested directory is not the current one in buffer, or the
     requested position is before the current position of the iterator, then
     start from scratch (the iterator cannot go backwards)
   -----------------------------------------------------------------------*/

  if((position == 0) ||
     (position < positionG) ||
     (memcmp(&MountG, Mount, sizeof(MountPoint))) ||
     (memcmp(&HandleG, &Handle, sizeof(nfs_fh))) )
  {   /* new directory, or previous position, or start of directory */
#if DEBUGON
if(position == 0)
   printf("GetNFSDirEntry: start of directory requested\n");

else
{
   if ((position < positionG) && (memcmp(&MountG, Mount, sizeof(MountPoint)) || memcmp(&HandleG, &Handle, sizeof(nfs_fh))))
      printf("GetNFSDirEntry: new directory requested\n");

   else
      printf("GetNFSDirEntry: previous position requested\n");
}
#endif

      MountG = *Mount;
      HandleG = Handle;

      err = Get_NFS_Directory(&MountG, HandleG, NULL, &peThisEntryG, &EOF_flagG);
      if ( err )
      	return err;

      /* strip off any invalid names */
      while((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == Yes))
      {
   	pePrevEntryG = peThisEntryG;
   	peThisEntryG = peThisEntryG->nextentry;

        if(peThisEntryG == NULL)
        {
#if DEBUGON
   printf("GetNFSDirEntry: peThisEntry->nextentry == NULL - Get another lump of data\n");
#endif

          if(!EOF_flagG)
          {
             /* reached end of directory segment, get another */

   	  /* VERY UNLIKELY TO USE THIS CODE ! */

              err = Get_NFS_Directory(&MountG, HandleG, pePrevEntryG->cookie,
   &peThisEntryG, &EOF_flagG);
   	   if(err)
   	      return err;

          }

          else
             break;  /* unlikely, but covered */
          /* endif(!EOF_flagG) */

        } /* endif (peThisEntryG == NULL) */

      }  /* endwhile (reject_nfs_file(peThisEntry->name) == Yes) */


      positionG = 0;  /* start from beginning */

      TimeOutTimeG = clock() + out_of_date_time; /* update timeout */

  }  /* endif(!((MountG == Mount) && (HandleG == Handle)) || (position >
positionG)) */

  /*------------------------------------------------------------------------
     if the data has gone stale, then refresh the buffer from the current
     position onwards
   -----------------------------------------------------------------------*/
  if(TimeOutTimeG < clock())
  {
#if DEBUGON
printf("GetNFSDirEntry: stale data - reloading\n");
#endif


    if(Freshened != NULL)
       *Freshened = TRUE;

     /* get directory from current position */
    err = Get_NFS_Directory(&MountG, HandleG, peThisEntryG->cookie, &peThisEntryG, &EOF_flagG);
    if ( err )
    	return err;

    /* strip off any invalid names */
    while((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == Yes))
    {
      pePrevEntryG = peThisEntryG;
      peThisEntryG = peThisEntryG->nextentry;

      if(peThisEntryG == NULL)
      {
 #if DEBUGON
 printf("GetNFSDirEntry: peThisEntry->nextentry == NULL - Get another lump of data\n");
 #endif

        if(!EOF_flagG)
        {
           /* reached end of directory segment, get another */

 	  /* VERY UNLIKELY TO USE THIS CODE ! */

            err = Get_NFS_Directory(&MountG, HandleG, peThisEntryG->cookie,
 &peThisEntryG, &EOF_flagG);
 	   if(err)
 	      return err;

        }

        else
           break;  /* unlikely, but covered */
        /* endif(!EOF_flagG) */

      } /* endif (peThisEntryG == NULL) */

    }  /* endwhile (reject_nfs_file(peThisEntry->name) == Yes) */

    TimeOutTimeG = clock() + out_of_date_time; /* update timeout */

  }

  else
  {
     if(Freshened != NULL)
        *Freshened = FALSE;
  } /* endif(TimeOutTimeG < clock()) */




  /*------------------------------------------------------------------------
     move forward along linked list (ignoring invalid file names) until
     positionG == position
   -----------------------------------------------------------------------*/

   while(positionG < position)
   {
      /* move to next entry */
      pePrevEntryG = peThisEntryG;
      peThisEntryG = peThisEntryG->nextentry;

      if(peThisEntryG == NULL)
      {
 #if DEBUGON
 printf("GetNFSDirEntry: peThisEntry->nextentry == NULL - Get another lump of data\n");
 #endif

        if(!EOF_flagG)
        {
           /* reached end of directory segment, get another */


            err = Get_NFS_Directory(&MountG, HandleG, peThisEntryG->cookie,
 &peThisEntryG, &EOF_flagG);
 	   if(err)
 	      return err;

        }

        else
           break;  /* unlikely, but covered */
        /* endif(!EOF_flagG) */

      } /* endif (peThisEntryG == NULL) */

      if((peThisEntryG != NULL) && (reject_nfs_file(peThisEntryG->name) == No))
      {
        positionG++;  /* valid file, increment count */
      }

   } /* endwhile (positionG < position) */

  /*------------------------------------------------------------------------
      Fill in the appropriae values, and return.
   -----------------------------------------------------------------------*/

   if(peThisEntryG != NULL)
   {
      *FileName = peThisEntryG->name;
   }

   else
      *FileName = NULL; /* not a serious error, just no file ! */

   return NULL;

} /* endfunction GetNFSDirEntry */




/********* Get_NFS_Directory  ***********************************************

Purpose : Fills in the supplied NFS_Directory_T type with details of the
	  specified directory.

Parameters : MountPoint
	     fhHandle.  The pmpMountpoint and fhHandle fields
	     		must be set to the required Mount Point and directory
			handle respectively.
	     cookie	Cookie where to start (if NULL, then beginning)
	     entry **   Will be filled with the position of the 1st entry
	     BOOL *	EOF flag (TRUE => EOF )

Returns	: NULL if OK, error pointer otherwise.
	  Value of EOF flag set to value at end of transfer
	  (TRUE on EOF, FALSE otherwise).

****************************************************************************/


_kernel_oserror * Get_NFS_Directory(MountPoint *pmpMountPoint,
		  		    nfs_fh fhHandle,
		  		    nfscookie cookie,
		  		    entry **FirstEntry,
		  		    BOOL *EOF_flag)
{
  readdirargs args;
  readdirres *result;
  int count;
  unused_client *nfs_client;
  _kernel_oserror *err;

/* start of routine */

   args.dir = fhHandle;

   if(cookie == NULL)
   {
      for(count = 0; count < NFS_COOKIESIZE; count++)
         args.cookie[count] = 0;
   }

   else
   {
      for(count = 0; count < NFS_COOKIESIZE; count++)
         args.cookie[count] = cookie[count];
   }
    args.count = NFS_MAXDATA; /* no point messing about.  Drag as much as
      		   		   you can across ! */

   /* actually get a client and do the transfer... */
   err = get_nfs_client_for_mp(&nfs_client, pmpMountPoint);

   if(err)
      return err;  /* error ! */

   result = nfsproc_readdir_2(&args, nfs_client->client);

   err = rpcnfs_to_riscos_err(result, pmpMountPoint, nfs_client->client);

   release_client(nfs_client);

   if(err)
   {
      if(err == mb_nfserr_stale)
      	 cancel_all_caches_by_fhandle(&fhHandle);

      return err; /* error ! */
   }

   *FirstEntry = result->readdirres_u.reply.entries;


   *EOF_flag = result->readdirres_u.reply.eof;

   return NULL;


}   /* endfunction Get_NFS_Directory */



