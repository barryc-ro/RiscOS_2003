/* Title:   create.c
 * Purpose: create a Generic Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "<Toolbox$Common>.const.h"
#include "<Toolbox$Common>.macros.h"
#include "<Toolbox$Common>.services.h"
#include "<Toolbox$Common>.debug.h"
#include "<Toolbox$Common>.mem.h"
#include "<Toolbox$Common>.messages.h"

#include "<Toolbox$Common>.objects.toolbox.h"
#include "<Toolbox$Common>.objects.generic.h"

#include "object.h"
#include "task.h"

#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /* 
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

    return NULL;
}
