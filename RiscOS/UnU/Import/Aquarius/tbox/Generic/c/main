/* Title:   main.c
 * Purpose: main module of a Generic Object module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "<Toolbox$Common>.const.h"
#include "<Toolbox$Common>.macros.h"
#include "<Toolbox$Common>.services.h"
#include "<Toolbox$Common>.debug.h"
#include "<Toolbox$Common>.mem.h"
#include "<Toolbox$Common>.messages.h"

#include "<Toolbox$Common>.objects.toolbox.h"
#include "<Toolbox$Common>.objects.generic.h"

#include "object.h"
#include "create.h"
#include "delete.h"
#include "copy.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "main.h"

#define MAX_CLASS_SWI_METHODS 7
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) = 
       {
            create_object,
            delete_object,
            copy_object,
            show_object,
            hide_object,
            getstate_object,
            miscop_object
       };



/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */


static void Generic_finalise (void)
{
    /*
     * Function to clean up before module exit
     */

    _kernel_swi_regs regs;
    extern int       messages_file(void);
    extern int       res_file(void);

    /*
     * close our messages file
     */

    messages_file_close();

    
    /*
     * ... and deregister from ResourceFS
     */

    regs.r[0] = messages_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);

    regs.r[0] = res_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);


    /*
     * free up memory we may have left allocated
     */

    mem_free_all ();
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *Generic_init(char *cmd_tail, int podule_base, void *pw)
{
    char            *messages_filename;
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    extern int messages_file(void);
    extern int res_file(void);

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);


    DEBUG debug_set_var_name("Generic$Debug");

    /*
     * register our resources with ResourceFS
     */

    DEBUG debug_output ("init", "Registering messages file\n");

    regs.r[0] = messages_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;

    DEBUG debug_output ("init", "Registering resource file\n");

    regs.r[0] = res_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;


    /*
     * register our messages file with MessageTrans
     */

    if (getenv ("Generic$Path") == NULL)
        messages_filename = "Resources:Resources.Generic.Messages";
    else
        messages_filename = "Generic:Messages";

    if ((e = messages_file_open (messages_filename)) != NULL)
        return e;


    /* /* register here with the Toolbox as an Object Module */

    /*
     * make sure we clean up on exit
     */

    atexit (Generic_finalise);

    return NULL;
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void Generic_services(int service_number, _kernel_swi_regs *r, void *pw)
{             
    IGNORE(pw);

    switch (service_number)
    {

        case Service_WimpCloseDown:
            /* 
             * task dying - r2 holds task handle 
             */
        
            task_remove (r->r[2]);

            break;

        case Service_ToolboxTaskBorn:
            /* Toolbox task has just started R0  == wimp task handle */

            /*
             * create a new "task descriptor"
             */

            task_add (r->r[0]);

            break;

        default:
            break;
    }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *Generic_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;
    TaskDescriptor  *t;

    IGNORE(pw);

    switch (swi_no + Generic_SWIChunkBase)
    {
        case Generic_ClassSWI:
            if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
            {
                /* /* make an error here */
            }
            else
            {
                t = task_find (r->r[3]);

                if (t == NULL)
                {
                    /* /* make an error here */
                }

                e = (*class_swi_methods[r->r[0]])(r, t);
            }
            break;

        case Generic_PostFilter:
            e = events_postfilter (r);
            break;

        case Generic_PreFilter:
            e = events_prefilter (r);
            break;

        default:
            break;
    }

    return e;
}

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *Generic_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case 0:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
