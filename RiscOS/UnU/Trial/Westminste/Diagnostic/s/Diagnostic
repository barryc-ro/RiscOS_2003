; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : Diagnostic
;    Author	  : R.W.Buckley
;    Date         : Wed 21st June 1995
;    Description  : Display information to convince the user that something is happening, display
;		    an appropriate message if server boot fails and provide some degree of debug
;		    cabability.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Outline spec :
;	On module init.
;          If <STBReset$Type> == "PowerOn"
;		Call STBState_Off to turn the box off
;	   Else
;		Display a welcome message along with debug window if dongle present
;	        Display the mac address, using call to ATM module call if dongle present
;
;	On service_postinit,
;	   Find out my own module number (OS_Module 18) (can't do this on init cos I don't exist)
;	   Configure the current language to be my module number (OS_Byte 162 location 185)
;
;	Module start (entry)
;	   Set screen mode to configured mode
;	   If the debug window still exists, display a press any key message
;	   Display a nice message "Welcome to the diagnostics ..."
;	   Call STBState_Fatal
;	   Do nothing until Escape
;
;	Commands provided,
;	   DisplayDiagnostics - same display as entry
;          DisplayError,
;            Display a nice message "An error ..."
;            *IRReset
;	     Wait for Home key
;            OS_Reset
;	   DisplayStartup, shows the screen that is presented on startup
;
;	Extras,
;	   If ATM SWI fails to get Mac address, nothing is displayed - this would be useful for non ATM systems
;
;    Modification history:
;      21/09/95 RWB, Routine Screen_Tidy was freeing the wrong memory block. Fixed now.
;      21/09/95 RWB, Added initialisation screen, along with check for debug dongle.
;      18/10/95 RWB, Dyked out some stuff for Keith and Westminster (also separated sources)
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
                GET     Hdr:ListOpts
		OPT	OptNoList
                GET     Hdr:Macros				; System wide macro definitions
                GET     Hdr:System				; SWIs and hardware specific
		GET	Hdr:Machine.<Machine>			; For machine-specific flags
		$GetIO
		GET	Hdr:Debug
                GET     Hdr:ModHand				; Module handler reason codes
                GET     Hdr:Symbols				; Constants TRUE, FALSE, VFlag etc
                GET     Hdr:Proc                		; ENTRY and EXIT macros
		GET	Hdr:STBState				; SWIs for STBState module
		GET	Hdr:Services				; Service calls
		GET	Hdr:CMOS				; CMOS allocations
		GET	Hdr:Font				; Font constants
		GET	Hdr:ColourTran				; ColourTrans constants
		GET	Hdr:Podule				; Exported Podule manager constants
		GET	Hdr:Hourglass				; Hourglass module stuff
                LEADR   Module_LoadAddr

                GET     Version

		GBLL	Debug
Debug		SETL	False

; Description of how the workspace is to be used
                         	^ 0, wp
EASIBase 			# 4			; workspace used by CheckForDongle
Flags				# 4			; general flags
StackPointer			# 4			; pointer to claimed stack

workspace               	* :INDEX: @

flagDebugWindowPresent * 1 :SHL: 0
flagDonglePresent      * 1 :SHL: 1

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; standard module declarations

module          & start   -module				; => start code
                & init    -module                       	; => initalise routine
                & final   -module                       	; => finalise routine
                & service -module             			; => service trap

                & title   -module                         	; => title string
                & help    -module                         	; => help string
                & command_table -module				; => command table

                & 0						; => SWI base chunk
                & 0						; => code to handle swi calls
                & 0						; => table of supported SWIs
                & 0

title           = "Diagnostic", 0

help            = "Diagnostic", 9, "$VString ($Date) (Westminster) © Online Media", 0

                ALIGN

command_table   = "DisplayDiagnostics", 0
		ALIGN
		DCD	display_diagnostics -module
		DCD	0
		DCD	DisplayDiagnostics_Syntax -module
		DCD	DisplayDiagnostics_Help   -module

		= "DisplayError", 0
		ALIGN
		DCD	CommandDisplayError -module
		DCD	0
		DCD	DisplayError_Syntax -module
		DCD	DisplayError_Help   -module

		= "DisplayStartup", 0
		ALIGN
		DCD	CommandDisplayStartup -module
		DCD	0
		DCD	DisplayStart_Syntax -module
		DCD	DisplayStart_Help   -module

		&	0


DisplayDiagnostics_Help    = "*DisplayDiagnostics will show any useful information required for diagnostics.", 13
DisplayDiagnostics_Syntax  = "Syntax: *DisplayDiagnostics", 0

DisplayError_Help    = "*DisplayError will display a helpful message", 13
DisplayError_Syntax  = "Syntax: *DisplayError", 0

DisplayStart_Help    = "*DisplayStartup will reinvoke the initial startup screen", 13
DisplayStart_Syntax  = "Syntax: *DisplayStartup", 0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
 [ Debug

Host_Debug  	SETL 	False 			; Set to true to send output to the tube
HostDebugViaTML	SETL 	False			; Set to true to use TML to send debug stream to host
Debug_Module	SETL	False			; Set to true to use DebugItModule.
Debug_File      SETS	"$.Debug" ; Set to send debug stream to the specified file

 ]
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Text messages
;
no_service1	= "Set-top boot", 0			; first line of message
no_service2     = "sequence failed.", 0				; second line of message
report  	= "Mac : ", 0					; prefixed to Mac address

error_msg1	= "An error has occurred.", 0
error_msg2	= "Please press Home", 0
error_msg3	= "to restart.", 0

start_message1	= "Set-top booting", 0		; message to display on power on

press_any_key   = "Press any handset button to continue...", 13, 10, 0

IRReset		= "IRReset", 13

		GBLS	gpoweron
gpoweron	SETS	"PowerOn"
poweron  	= gpoweron					; to compare with <STBReset$Type>
resettype  	= "STBReset$Type",0				; env var

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; global flags and constants used by the module, font text and size moved further down.
;
XATM_ReadMacAddr * &47B0B + 1:SHL:17				; SWI number for ATM module, not declared elsewhere

colour_back	 * &00000000					; background colour - &BBGGRR00
colour_fore	 * &FFDD0000					; foreground colour

coord_block_size * 36						; size of corrdinate block used in font scan string

scan_string_flags * 2_1000000001100100000			; flags for use in font scan string

stack_size	 * 64						; size of user stack
	        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; This code handles the startup of the module.
;

init		ENTRY	"r7-r11"

; claim some workspace if necessary
                LDR     r2, [r12]				; r2 = &wp
                TEQ     r2, #0                          	; any workspace / warm start?
                BNE     %5

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace                  	; r3  = amount of workspace
                SWI     XOS_Module
                EXIT    VS                              	; return if didn't work

                STR     r2, [wp]				; wp = r2
5
                MOV     wp, r2                          	; wp -> workspace
		MOV	r0, #0
		STR	r0, Flags
		STR 	r0, EASIBase
		STR	r0, StackPointer

 [ False
; Check the environment variable STBResetType for PowerOn condition
		MOV	r0, #ModHandReason_Claim		; need workspace for reset type check
                MOV     r3, #:LEN:gpoweron          		; amount of space
                SWI     XOS_Module
                EXIT	VS                              	; return if didn't work

		ADRL	r0, resettype				; <STBReset$Type>
		MOV	r1, r2					; r1 -> buffer
		MOV	r2, #:LEN:gpoweron			; length
		MOV	r3, #0
		MOV	r4, #0					; string
		SWI	XOS_ReadVarVal
		BVS	%FT20

		CMP	r2, #:LEN:gpoweron			; check returned string is correct length
		BNE	%FT20

		ADRL	r0, poweron				; compare obtained string with "PowerOn"
		MOV	r5, r1					; r5 -> buffer
10
		LDRB	r3, [r0], #1
		LDRB	r4, [r5], #1
		CMP	r3, r4
		BNE	%FT20
		DECS	r2					; one less char to go
		BNE	%BT10					; loop 'til done
		SWI	XSTBState_Off

20
                MOV     r0, #ModHandReason_Free			; we are done, free buffer space
		MOV	r2, r1					; buffer pointer
                SWI     XOS_Module
 ]
		SWI	XSTBState_On				; stabilise the screen
		SWI	XHourglass_On				; set the green light flashing to frig boot condition

; Look for the joystick dongle and stuff result in flags
		BL	CheckForDongle
		LDR	r1, Flags
		TEQ	r0, #3
		ORREQ	r1, r1, #flagDonglePresent
		STR	r1, Flags

		EXITS


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Handle module close down.
;

final		ENTRY
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Handle service calls
;
; When a Service_PostInit call is received, look up our module number and store this as the current
; language.
;
service
                TEQ     r1, #Service_PostInit
                MOVNES  pc, lr

		ENTRY

                LDR     wp, [r12]                          	; wp -> workspace

		BL	DisplayStartup

		BL	ConfigureLanguage

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; entry point for module, enter here when being called as the configured language.
;
start		ROUT

; claim some space for the stack to be happy
		MOV	r0, #ModHandReason_Claim		; claim workspace
                MOV     r3, #stack_size          		; r3 - amount of space
                SWI     XOS_Module
                BVS	%10                              	; return if didn't work

		ADD	r13, r2, #stack_size			; store highest stack address in r13
		SUB	r13, r13, #4				; decrement by 1 to point at our space
		STR	r2, StackPointer			; stash stack pointer in workspace

		BL	display_diagnostics

; free stack area
 		LDR	r2, StackPointer			; buffer pointer
		MOV     r0, #ModHandReason_Free			; free space
		SWI     XOS_Module
10
		SWI	OS_Exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; display the fatal message and mac address
;
; can be called from command *DisplayDiagnostics or from module entry point above
;
display_diagnostics ENTRY "r0-r11"

                LDR     wp, [r12]                          	; wp -> workspace

; Check for debug dongle, if present, display a please wait message and wait for keypress
		LDR	r0, Flags
		TEQ	r0, #flagDonglePresent :OR: flagDebugWindowPresent
		BNE	%10

		BIC	r0, r0, #flagDebugWindowPresent		; clear this bit as window has been reset
		STR	r0, Flags

		ADRL	r0, press_any_key
		SWI	XOS_Write0
		SWI	XOS_ReadC
10
		BL	ScreenInit				; set screen mode etc
		BVS	%FT60

; plot first line
		MOV	r1, r9, LSR #2				; r1 = screen height / 4
		MOV	r2, #3					; r2 = 3
		MUL	r11, r1, r2				; r11 = r1 * 3
		ADRL	r1, no_service1				; text to be plotted
		BL	PlotCentred
		BVS	%20
; plot second line
		ADRL	r1, no_service2				; text to be plotted
		BL	PlotCentred				; r11 from last call
		BVS	%20
20
		BL	ScreenTidy				; free resources
60
		LDR	r0, Flags
		TST	r0, #flagDonglePresent
		BLNE	DisplayMacAddress
		BL 	LoseCursor				; now make sure the cursor is off screen

		SWI	XSTBState_Fatal				; done, show Fatal state

; loop round waiting for a key to be pressed
70
		SWI	XOS_ReadEscapeState			; check for ESCAPE
		BCC	%BT70					; loop until we get it

		MOV	r0, #&7E
		SWI	XOS_Byte				; acknowledge Escape

		BL	HomeCursor				; return the cursor to screen

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; *DisplayError entry
;
CommandDisplayError ENTRY "r7-r11"				; entry point for command DisplayError

                LDR     wp, [r12]                          	; wp -> workspace

		BL	ScreenInit				; set screen mode etc
		BVS	%FT30

; plot first line
		MOV	r1, r9, LSR #2				; r1 = screen height / 4
		MOV	r2, #3					; r2 = 3
		MUL	r11, r1, r2				; r11 = r1 * 3
		ADRL	r1, error_msg1				; text to be plotted
		BL	PlotCentred
		BVS	%20
; plot second line
		ADRL	r1, error_msg2				; text to be plotted
		MOV	r11, r9, LSR #1				; r11 = screen height / 2
		BL	PlotCentred
		BVS	%20
; plot third line
		ADRL	r1, error_msg3				; text to be plotted
		BL	PlotCentred				; r11 from last call
20
		BL	ScreenTidy				; free resources
30
		BL 	LoseCursor				; now make sure the cursor is off screen

		SWI	XSTBState_Fatal				; show Fatal state

		ADRL	r0, IRReset				; *IRReset
		SWI	XOS_CLI

; Look for Home, = 0, &83
40
		SWI	XOS_ReadC
		BCS	%FT50
		TEQ	r0, #0
		BNE	%BT40

		SWI	XOS_ReadC
		BCS	%FT50
		TEQ	r0, #&83
		BNE	%BT40

; Got a Home, reset
		SWI	XOS_Reset
50
		TEQ	r0, #&1B				; Escape?
		BNE	%FT60
		MOV	r0, #&7E
		SWI	XOS_Byte				; acknowledge Escape
60
		BL	HomeCursor				; return the cursor to screen

		SWI	OS_Exit

		LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Display a message to indicate the box is alive and attempting to boot. A check is made for a
; debug dongle. If this is present, a text window is provided on screen for any debug messages.
; If the dongle is not present, the text window is off screen.
;
CommandDisplayStartup ENTRY
                LDR     wp, [r12]                          	; wp -> workspace
		BL	DisplayStartup
		BL	HomeCursor
		EXIT

DisplayStartup	ENTRY "r0-r11"					; entry point for command DisplayStart

		BL	ScreenInit				; set screen mode etc
		BVS	%FT10

; plot first line
		MOV	r1, r9, LSR #2				; r1 = screen height / 4
		MOV	r2, #3					; r2 = 3
		MUL	r11, r1, r2				; r11 = r1 * 3
		ADRL	r1, start_message1			; text to be plotted
		BL	PlotCentred
		BL	ScreenTidy				; free resources
10
		LDR	r0, Flags
		TST	r0, #flagDonglePresent

		BLEQ 	LoseCursor				; now make sure the cursor is off screen
		EXIT	EQ

		BL	DebugWindow
		BL	DisplayMacAddress
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Set screen mode, find font etc
;
; In:	-
;
; Out:
;	R0 = Font handle
;	R8 = Coordinate block buffer
;	R9 = Screen height
;	R10= Screen width

ScreenInit	ENTRY
; clear the screen by changing mode
		MOV 	r0, #ReadCMOS				; read CMOS value
		MOV	r1, #WimpModeCMOS			; of configured mode
		SWI	XOS_Byte
		BVS	%FT50					; exit if error

		MOV	r0, #0					; change mode
		MOV	r1, r2					; to configured mode
		SWI	XOS_ScreenMode
		BVS	%FT50					; exit if error

; read screen size
		MOV	r0, #-1					; want to read the current mode
		MOV	r1, #11					; number of x pixels on screen - 1
		SWI	XOS_ReadModeVariable
		ADD	r10, r2, #1				; add 1 to value

		MOV	r1, #12					; number of y pixels on screen - 1
		SWI	XOS_ReadModeVariable
		ADD	r9, r2, #1				; add 1 to value

		MOV	r1, #4					; x-eig factor
		SWI	XOS_ReadModeVariable
		MOV	r8, r2

		MOV	r1, #5					; y-eig factor
		SWI	XOS_ReadModeVariable
		MOV	r7, r2

	 	MOV	r10, r10, LSL r8			; work out screen width
		MOV	r9,  r9,  LSL r7			; work out screen height

; allocate Coordinate block space
		MOV	r0, #ModHandReason_Claim		; claim workspace
                MOV     r3, #coord_block_size          		; r3 - amount of space
                SWI     XOS_Module
                BVS	%50                              	; return if didn't work
		MOV	r8, r2					; store pointer to buffer in r8

; now clear the coordinate block to all 0s
		MOV	r0, #0					; place a 0 in r0
10
		SUB	r3, r3, #1				; subtract 1
		STRB	r0, [r2, r3]				; copy the 0 into coord block
		TEQ	r3, #0					; are we at 0
		BNE	%10					; repeat if not zero

; find the font
		ADR	r1, font_name				; font name
		MOV	r2, #font_size				; size width
		MOV	r3, #font_size				; size height
		MOV	r4, #0
		MOV	r5, #0
		SWI	XFont_FindFont
		BVS	%40					; jump if error

; set the font colour
		MOV	r1, #colour_back			; backgroung colour
		LDR	r2, =colour_fore			; foreground colour
		MOV	r3, #14
		SWI	XColourTrans_SetFontColours		; ignore errors

		EXIT

; error: free coordinate block
40
                MOV     r0, #ModHandReason_Free			; free space
		MOV	r2, r8					; buffer pointer
                SWI     XOS_Module

; error
50
		SETV
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Text font and size.
;
font_name    	= "Trinity.Medium", 0				; font name
font_size 	 * 640						; 40pt * 16
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Free resources claimed by ScreenInit
;
; In:	-
;	R0 = Font handle
;	R8 = Coordinate block buffer
;
; Out:	-

ScreenTidy	ENTRY

; lose the font, R0 already contains the font handle
		SWI	XFont_LoseFont

; free coordinate block
                MOV     r0, #ModHandReason_Free			; free space
		MOV	r2, r8					; buffer pointer
                SWI     XOS_Module

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Plot a bit of text centred horizontally
;
; In:
;	R0 = Font handle
;	R1 = Pointer to text
;	R8 = Coordinate block buffer
;	R9 = Screen height
;	R10= Screen width
;	R11= Vertical plot position
;
; Out:
;	R11= Vertical plot position - (text height * 2)

PlotCentred	ENTRY	"r0-r8"

; find the font width and height
    		LDR	r2, =scan_string_flags			; flags
		MOV	r3, #-1
		MOV	r4, #-1
		MOV	r5, r8
		MOV	r8, r1					; save text address for later
		SWI	XFont_ScanString
		EXIT	VS					; jump if error

; convert to os units
		LDR	r1, [r5, #28]
		LDR	r2, [r5, #32]
		SWI	XFont_ConverttoOS
		EXIT	VS					; jump if error

; position the text
		SUB	r3, r10, r1				; r3 = screen width - text width
		MOV	r3, r3, LSR #1				; r3 = r3/2
		MOV	r4, r11
		SUB	r11, r11, r2, LSL #1			; stash position - text height * 2

; display the message
		MOV	r1, r8					; text to be plotted
		MOV	r2, #&310				; font paint flags
		SWI	XFont_Paint

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; ConfigureLanguage
;
ConfigureLanguage ENTRY "r0-r5"

		MOV	r0, #ModHandReason_LookupName
		ADRL	r1, title				; module name
		SWI	XOS_Module
		EXIT	VS

		ADD	r2, r1, #1				; r1 contained module number, need to +1
		MOV 	r0, #WriteCMOS				; write CMOS value
		MOV	r1, #LanguageCMOS			; to location for configured language
		SWI	XOS_Byte
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; LoseCursor - Position the text cursor well off screen
;
LoseCursor	ENTRY
		SWI 	XOS_WriteI + 5				; VDU 5, join cursors
		SWI 	XOS_WriteI + 31				; move cursor (well) offscreen
		SWI 	XOS_WriteI + 2000			; x (text coords)
		SWI 	XOS_WriteI + 2000			; y
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; HomeCursor
;
HomeCursor	ENTRY
		SWI 	XOS_WriteI + 4				; VDU 4, split cursors
		SWI 	XOS_WriteI + 30				; home cursor
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; DebugWindow
;
; Define a coloured text window on screen. Modify Flags variable

DebugWindow	ENTRY "r0"
		SWI 	XOS_WriteI + 28				; define text window
		SWI	XOS_WriteI + 10				; x1
		SWI	XOS_WriteI + 60				; y1
		SWI	XOS_WriteI + 85				; x2
		SWI	XOS_WriteI + 45				; y2
		SWI 	XOS_WriteI + 17				; change colour
		SWI	XOS_WriteI + 128 + 1			; background colour red
		SWI	XOS_WriteI + 12				; cls
		LDR	r0, Flags
		ORR	r0, r0, #flagDebugWindowPresent
		STR	r0, Flags
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; CheckForDongle
;
; in:	-
; out:	r0 = 0 => no soak test connector
;	r0 = 1 => soak test
;	r0 = 2 => bootstrap from parallel interface
;	r0 = 3 => enable debug messages

CheckForDongle Entry "r1-r3"

		LDR	lr, =IOMD_Base
		LDRB	r0, [lr, #IOMD_CLINES]
		AND	r0, r0, #2_01100000			; extract bits 5 and 6
		TEQ	r0, #0					; for digital joystick, bits 5 and 6 are both zero
		MOVNE	r0, #0					; if not, then return zero, ie nothing special
		EXIT	NE

		MOV	r0, #Podule_ReadInfo_EASILogical
		ADR	r1, EASIBase				; workspace to dump value
		MOV	r2, #4					; length of workspace
		MOV	r3, #0					; podule 0
		SWI	XPodule_ReadInfo

		MOVVS	r0, #0					; if VS then can't find joystick hardware, return zero
		EXIT	VS

		LDR	r0, EASIBase
		ADD	r0, r0, #&00C00000			; point at IR + joystick stuff
		LDR	r1, [r0, #4]				; read it once to latch it
		LDR	r1, [r0, #4]				; and again to get the latched value
		TST	r1, #&0F00				; bits 11..8 must be low (all directions down, stick 2)

		MOVNE	r1, #0
		EXIT	NE

		AND	r1, r1, #&000F				; Only interested in bottom byte
		ADD	r0, r1, #1				; Add 1 since 0 = no dongle

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; find the mac address and display it on bottom of screen
;
DisplayMacAddress ENTRY "r0-r3"

		MOV	r0, #ModHandReason_Claim		; claim memory
		MOV	r3, #6					; need 6 bytes
		SWI	XOS_Module
		EXIT	VS					; exit if error

		MOV	r1, r2					; r1 needs to contain pointer to claimed stuff
		SWI	XATM_ReadMacAddr
		BVS	%20

; position cursor
		Push	"r2"
		SWI 	XOS_WriteI + 5				; do a VDU 5, join cursors
		MOV	r0, #4					; move graphics cursor
		MOV	r1, #100
		MOV	r2, #100
		SWI 	XOS_Plot
		Pull	"r2"

		ADRL	r0, report				; write text
		SWI	XOS_Write0

		MOV	r3, #0
10
		LDRB	r1, [r2,r3]
		BL	Show_Byte
		ADD	r3, r3, #1
		TEQ	r3, #6
		MOVNE	r0, #":"
		SWINE	XOS_WriteC
		BNE	%10
20
                MOV     r0, #ModHandReason_Free			; free space
                SWI     XOS_Module

		SWI 	XOS_WriteI + 4				; do a VDU 4, join cursors (opposite of VDU5)
		SWI 	XOS_WriteI + 30				; home text cursor

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Following two routines taken unashamadly from the debug include file.
;

Show_Byte
        	Push    "r1, lr"
        	MOV     r1, r1, ROR #4
        	BL      Show_Nibble
        	MOV     r1, r1, ROR #32-4
        	BL      Show_Nibble
        	Pull    "r1, pc",,^

Show_Nibble
        	Push    "lr"
        	AND     r0, r1, #15
	        CMP     r0, #10
        	ADDCC   r0, r0, #"0"
	        ADDCS   r0, r0, #"A"-10
        	SWI	XOS_WriteC
        	Pull    "pc",,^

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 [ Debug
RegDump		ENTRY
		DREG	r0 , "0 :"
		DREG	r1 , "1 :"
		DREG	r2 , "2 :"
		DREG	r3 , "3 :"
		DREG	r4 , "4 :"
		DREG	r5 , "5 :"
		DREG	r6 , "6 :"
		DREG	r7 , "7 :"
		DREG	r8 , "8 :"
		DREG	r9 , "9 :"
		DREG	r10, "10:"
		DREG	r11, "11:"
		DREG	r12, "12:"
		EXIT

		InsertDebugRoutines
 ]
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
