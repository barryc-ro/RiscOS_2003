        GET     h.regdefs
        GET     h.swinos
        GET     h.macros
;
        PREAMBLE

;
; ---------------------------------------------------------------------------
;
font
            DCB "Trinity.Medium", 0
            ALIGN
point
            DCD 20
border
            DCD 0
fh
            DCD 0
fg            
            DCD &FFFFFF00
bg            
            DCD &40404000
tl
            DCD 200, 400            
bbox
            DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tbox
            DCD 0, 0, 0, 0
fflags            
            DCD &40020
            
banner
            DCD 0

timeout        
            DCD 0

idle        
            DCD 0

halt        
            DCD 0
        IMPORT redmap
        IMPORT blumap
        IMPORT grnmap

vduin
            DCD 148, -1
vduout
            DCD 0, 0            
        
;
; ---------------------------------------------------------------------------
;
; fx_halfbox - plot a half-intensity box
; in -  r0 -> top left of box
;       r1 = width of box (pixels)
;       r2 = height of box (pixels)

        STARTCODE  fx_halfbox
background
        STMFD   r13!, {r0-r12,lr}
        ADR     r3, bbox
        LDR     r5, [r3, #24]
        ADD     r2, r2, r5
        SWI     SWI_Font_ConverttoOS + XOS_Bit
        MOV     r6, r1                           ; min.x
        MOV     r7, r2                           ; min.y
        LDR     r4, [r3, #32]
        SUB     r2, r4, r5                       ; height
        LDR     r4, [r3, #28]
        LDR     r5, [r3, #20]
        SUB     r1, r4, r5                       ; width
        SWI     SWI_Font_ConverttoOS + XOS_Bit
        MOV     r4, r1
        MOV     r5, r2
        LDR     r1, border
        ADD     r4, r4, r1, LSL #1
        ADD     r5, r5, r1, LSL #1
        SUB     r6, r6, r1
        SUB     r7, r7, r1
        MVN     r0, #0
        MOV     r1, #4                           ; x_eig
        SWI     SWI_OS_ReadModeVariable + XOS_Bit
        MOV     r4, r4, ASR r2
;        MOV     r6, r6, ASR r2
        MOV     r1, #5                           ; y_eig
        SWI     SWI_OS_ReadModeVariable + XOS_Bit
        MOV     r5, r5, ASR r2
        MOV     r7, r7, ASR r2
        MOV     r1, #12
        SWI     SWI_OS_ReadModeVariable + XOS_Bit
        SUB     r7, r2, r7                       ; flip bl to tl
        SUB     r7, r7, r5
        MOV     r1, #6
        SWI     SWI_OS_ReadModeVariable + XOS_Bit
        MOV     r3, r2
        MLA     r6, r2, r7, r6                   ; Offset from screen start
        ADR     r0, vduin
        ADR     r1, vduout
        SWI     SWI_OS_ReadVduVariables + XOS_Bit
        LDR     r0, [r1]
        ADD     r0, r0, r6                       ; Pointer to box memory start
        ADD     r1, r4, #2                       
        ADD     r2, r5, #2
        LDR     r4, redmap
        LDR     r5, grnmap
        LDR     r6, blumap

paintbox
        SUB     r3, r3, r1, LSL #1
paintrow
        ADD     r7, r0, r1, LSL #1
        LDR     r9, [r0]
paintpixel
        AND     r10, r9, #31
        LDRB    r10, [r4, r10]
        AND     r11, r9, #31<<5
        LDRB    r11, [r5, r11, LSR #5]
        ORR     r10, r10, r11, LSL #5
        AND     r11, r9, #31<<10
        LDRB    r11, [r6, r11, LSR #10]
        ORR     r10, r10, r11, LSL #10
        LDR     r9, [r0, #2]
        STRB    r10, [r0], #1
        MOV     r10, r10, LSR #8
        STRB    r10, [r0], #1
        TEQ     r0, r7
        BNE     paintpixel
        ADD     r0, r0, r3
        SUBS    r2, r2, #1
        BNE     paintrow
        LDMFD   r13!, {r0-r12, pc}

        STARTCODE KeyEvent

        TEQ     a1, #11
        MOVNE   pc, lr
        STMFD   sp!, {a1-a4, lr}
        LDR     a1, idle
        STR     a1, timeout
        CMP     a3, #1
        CMPEQ   a2, #1
        STREQ   a2, halt

        LDMFD   sp!, {a1-a4, pc}

        STARTCODE SetTimes

        STR     a1, idle
        MOV     a1, #0
        STR     a1, timeout
        MOV     pc, lr
        
        STARTCODE ReadTime

        LDR     a1, timeout
        MOV     pc, lr

        STARTCODE ReadIdle

        LDR     a1, idle
        MOV     pc, lr

        STARTCODE ReadHalt

        LDR     a1, halt
        MOV     pc, lr

        STARTCODE SetHalt

        MOV     a1, #1
        STR     a1, halt
        MOV     pc, lr

        STARTCODE ClearHalt

        MOV     a1, #0
        STR     a1, halt
        MOV     pc, lr

        STARTCODE SubTime

        LDR     a2, timeout
        SUB     a2, a2, a1
        STR     a2, timeout
        MOV     pc, lr

        STARTCODE SetBanner

        STR     a1, banner
        MOV     pc, lr

        STARTCODE SetBorder

        STR     a1, border
        MOV     pc, lr

        STARTCODE SetPoint

        STR     a1, point
        MOV     pc, lr

bongg
        STMFD   sp!, {lr}
        MOV     a2, #&13
        LDR     a3, banner
        SWI     &400DF
        MOV     a1, #1
        STR     a1, halt
        LDMFD   sp!, {pc}

        STARTCODE display                ; a1 = height, a2 = string
        
        STMFD   sp!, {a3-v6, lr}
        MOV     v5, a1
        MOV     v6, a2
        ADR     a2, font
        LDR     a3, point
;        MOV     a3, #400
;        MOV     a4, #400
        MOV     a3, a3, LSL #4
        MOV     a4, a3
        MOV     v1, #0
        MOV     v2, #0
        SWI     SWI_Font_FindFont + XOS_Bit
        BLVS     bongg
        STR     a1, fh
        LDR     a2, bg
        LDR     a3, fg
        MOV     a4, #14
        SWI     SWI_ColourTrans_SetFontColours + XOS_Bit
        BLVS    bongg

        MOV     a1, #0
        ADR     v2, bbox
        STR     a1, [v2], #4
        STR     a1, [v2], #4
        STR     a1, [v2], #4
        STR     a1, [v2], #4
        STR     a1, [v2], #4
        LDR     a1, fh
        MOV     a2, v6
        LDR     a3, fflags
        MVN     a4, #&F0000000
        MVN     v1, #&F0000000
        ADR     v2, bbox
        SWI     SWI_Font_ScanString + XOS_Bit
        LDR     v3, [v2, #28]
        LDR     v4, [v2, #20]
        SUB     v3, v3, v4

        MVN     a1, #0
        MOV     a2, #11
        SWI     SWI_OS_ReadModeVariable
        ADD     a4, a3, #1
        MOV     a2, #4
        SWI     SWI_OS_ReadModeVariable
        MOV     a2, a4, LSL a3

        MOV     a3, v5
        SWI     SWI_Font_Converttopoints + XOS_Bit
        BLVS    bongg
        SUB     a2, a2, v3
        MOV     a2, a2, ASR #1
        BL      background  ; r1 = minx, r2 = miny, bbox = string bbox. All mpts.
        MOV     a4, a2
        MOV     v1, a3
        LDR     a1, fh
        MOV     a2, v6
        MOV     a3, #&22
        ADR     v2, bbox
        SWI     SWI_Font_Paint + XOS_Bit
        BLVS    bongg
        LDR     a1, fh
        SWI     SWI_Font_LoseFont + XOS_Bit
        BLVS     bongg
        LDMFD   sp!, {a3-v6, pc}
                
oscli
        LDR     a1, banner
        SWI     SWI_OS_CLI
        LDMFD   sp!, {a1-a3, pc}

        STARTCODE CallBack

        STMFD   sp!, {a1-a3, lr}
        MOV     a1, #10
        LDR     a2, banner
        SWI     SWI_OS_ReadUnsigned + XOS_Bit
        CMP     a3, #0
        BEQ     oscli
        LDRB    a1, [a2]
        CMP     a1, #32
        ADDEQ   a2, a2, #1
        MOV     a1, a3
        BL      display
        LDMFD   sp!, {a1-a3, pc}
        
        END
