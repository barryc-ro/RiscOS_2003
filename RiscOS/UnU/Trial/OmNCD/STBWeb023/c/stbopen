/* > stbopen.c

 * Handle the frontend_open_url function and some derivatives

 */

#include <stdio.h>
#include <string.h>

#include "alarm.h"
#include "wimp.h"

#include "interface.h"
#include "config.h"
#include "memwatch.h"
#include "util.h"

#include "stbview.h"
#include "stbhist.h"
#include "stbopen.h"
#include "stbutils.h"
#include "stbfe.h"

/* ------------------------------------------------------------------------------------------- */

extern int strcasecomp(const char *s1, const char *s2);
extern int strncasecomp(const char *s1, const char *s2, int n);

/* ------------------------------------------------------------------------------------------- */

static fe_view find_target(fe_view start, const char *target)
{
    fe_view v;
    for (v = start; v; v = v->next)
    {
        if (v->name && strcasecomp(v->name, target) == 0)
            break;

        if (v->children)
        {
            fe_view vv = find_target(v->children, target);
            if (vv)
            {
                v = vv;
                break;
            }
        }
    }
    return v;
}

/* ------------------------------------------------------------------------------------------- */

fe_view fe_find_window(fe_view start, wimp_w w)
{
    fe_view v;
    for (v = start; v; v = v->next)
    {
        if (v->w == w)
            break;

        if (v->children)
        {
            fe_view vv = fe_find_window(v->children, w);
            if (vv)
            {
                v = vv;
                break;
            }
        }
    }
    return v;
}

// find top of stack
fe_view fe_find_top(fe_view v)
{
    if (v) while (v->parent)
        v = v->parent;
    return v;
}

/* ------------------------------------------------------------------------------------------- */

/*
 * Check to see if new_url is the same as the urls of any view from v upwards
 */

static BOOL check_recursion(fe_view v, const char *new_url)
{
    while (v)
    {
        char *url;
        backend_doc_info(v->displaying, NULL, NULL, &url, NULL);
        if (strcasecomp(new_url, url) == 0)
            return TRUE;

        v = v->parent;
    }
    return FALSE;
}


/* ------------------------------------------------------------------------------------------- */

/*
 * frontend_open_url is called when the front or backends want to open a new page.
 * We discard any page currently being fetched.
 * At this point we should initialise the fetch status.

 * Targetting:

 * There is a hierarchy of views.
 * The top is the outermost frameset document. This encloses a number of nested documents,
 * any of which could be a new frameset document, etc. Recursion is not allowed and this level
 * should check this and ignore the repeated url.

 * special names are
   _blank: use a new window
   _self: use this frame (equivalent to windowname==NULL)
   _parent: use the next frame/document up
   _top: use the uppermost one of the hierarchy

 * parent in this call could point to any one of the views in the hierarchy. We need to ascend to
 * the top and then locate the correct view.

 */

os_error *frontend_open_url(char *url, fe_view parent, char *target, char *bfile, int flags)
{
    os_error *ep;
    char *referer = NULL;
    int oflags;

#if 1
fprintf(stderr, "frontend_open_url '%s' in window '%s'\n", url ? url : "<none>", target ? target : "<none>");
#endif

    if (target && parent)
    {
        if (strcasecomp(target, TARGET_SELF) == 0)
        {
            // use current window
        }
        else if (strcasecomp(target, TARGET_PARENT) == 0)
        {
            // up the stack one
            parent = parent->parent;
        }
        else if (strcasecomp(target, TARGET_BLANK) == 0)
        {
            // straight to the top
            parent = main_view;
        }
        else if (strcasecomp(target, TARGET_TOP) == 0)
        {
            parent = fe_find_top(parent);
        }
        else
        {
            parent = find_target(fe_find_top(parent), target);
        }
    }

    if (parent && check_recursion(parent->parent, url))
        return NULL;

#if 1
fprintf(stderr, "found view '%p'\n", parent);
#endif

    if (parent == NULL)
        parent = main_view;

    parent->dont_add_to_history = (flags & fe_open_url_NO_HISTORY) != 0;
    parent->pending_download_finished = FALSE;

    if (parent && parent->fetching)
    {
	backend_dispose_doc(parent->fetching);
	parent->fetching = NULL;
    }

    if (parent->displaying)
    {
	int f, ft;
	ep = backend_doc_info(parent->displaying, &f, &ft, &referer, NULL);
	if (ep)
	    referer = NULL;

	fprintf(stderr, "Moving on...\n");

	if (parent->hist_at)
	{
	    wimp_wstate state;
	    wimp_get_wind_state(parent->w, &state);
#if 0
	    fprintf(stderr, "history: %p '%s' write scroll pos %d\n", parent->hist_at, parent->hist_at->url, bb.y1);
#endif
	    parent->hist_at->scroll_pos = state.o.y + parent->margin.y1;
	}
    }

    if (referer)
    {
        char *frag = strrchr(url, '#');
        if (frag)
        {
            if (strncmp(referer, url, frag - url) == 0)
            {
                return backend_goto_fragment(parent->displaying, frag+1);
            }
        }
    }

    session_log(url, session_REQUESTED);

    // open the fetch status
    fe_status_open_fetch_only(parent);

    if (flags & fe_open_url_NO_CACHE)
        oflags = parent->flags | be_openurl_flag_NOCACHE;
    else
        oflags = parent->flags &~ be_openurl_flag_NOCACHE;

    if (strncmp(url, "stbwebinternal:", sizeof("stbwebinternal:")-1) == 0)
        oflags |= be_openurl_flag_BODY_COLOURS;

#if 0
    if (bfile)
    {
        char buf[256];
        strcpy(buf, "filer_run ");
        strcat(buf, bfile);
        wimp_starttask(buf);
    }
#endif

    ep = backend_open_url(parent, &parent->fetching, url, bfile, referer, oflags);
//    if (!ep) frontend_view_status(parent, sb_status_URL, url);

    return ep;
}

/* ------------------------------------------------------------------------------------------- */

// open a file given a RISC OS filename

os_error *fe_show_file(fe_view v, char *file, int no_history)
{
    char *url;
    os_error *ep;

    ep = fe_file_to_url(file, &url);
    if (ep)
        return ep;

    ep = frontend_open_url(url, v, TARGET_TOP, NULL, fe_open_url_NO_CACHE | (no_history ? fe_open_url_NO_HISTORY : 0));

    mm_free(url);

    return ep;
}

/* ------------------------------------------------------------------------------------------- */

int fe_reload_possible(fe_view v)
{
    return v && v->displaying && v->browser_mode == fe_browser_mode_WEB;
}

os_error *fe_reload(fe_view v)
{
    be_doc doc;
    os_error *ep = NULL;

    if (!fe_reload_possible(v))
        return NULL;

    doc = v->displaying;

    if (doc)
    {
        char *url;

	/* First, flush all the images. */
	ep = backend_doc_flush_image(doc, 0, be_openurl_flag_DEFER_IMAGES);
	if (ep)
	    return ep;

	/* We have to take a copy because if the file is from local disc
	 * the 'displaying' doc will be removed before
	 * the operation has completed
	 */
	if (!ep) ep = backend_doc_info(doc, NULL, NULL, &url, NULL);

        if (!ep)
        {
            url = strdup(url);
            ep = frontend_complain(frontend_open_url(url, v, TARGET_SELF, NULL, 1));
            mm_free(url);
        }
    }

    return ep;
}

/* ------------------------------------------------------------------------------------------- */

os_error *fe_new_view(fe_view parent, const wimp_box *extent, const fe_frame_info *ip, fe_view *vp)
{
    os_error *e;
    fe_view view = mm_calloc(1, sizeof(*view));
    wimp_box visible;

    view->magic = ANTWEB_VIEW_MAGIC;

    if (config_defer_images)
	view->flags |= be_openurl_flag_DEFER_IMAGES;
    if (config_display_antialias)
	view->flags |= be_openurl_flag_ANTIALIAS;
    if (config_display_body_colours)
	view->flags |= be_openurl_flag_BODY_COLOURS;

    view->margin = ip->margin;
    view->box = *extent;

    view->browser_mode = fe_browser_mode_WEB;

    visible = *extent;

    e = feutils_window_create(&visible, &view->margin, ip, &view->w); // modifies extent
    if (e)
    {
        mm_free(view);
        return e;
    }

#if 1
    fprintf(stderr, "create win %x from view %p\n", view->w, view);
#endif

    view->scrolling = ip->scrolling;

#if 0
    if (ip->scrolling == fe_scrolling_YES)
        view->x_scroll_bar = view->y_scroll_bar = TRUE;
#endif

    view->name = strdup(ip->name);
    view->parent = parent;

    // add to end of chain in parent
    // if this changes then frontend_frame_layout(refresh) may have to change
    if (parent)
    {
        view->prev = parent->children_last;
        view->next = NULL;

        if (parent->children_last)
            parent->children_last->next = view;
        else
            parent->children = view;

        parent->children_last = view;
    }

    if (vp)
        *vp = view;

    return NULL;
}

/* ------------------------------------------------------------------------------------------- */

void fe_dispose_view_children(fe_view v)
{
    fe_view vv = v->children;
    while (vv)
    {
        fe_view next = vv->next;
        fe_dispose_view(vv);
        vv = next;
    }
    v->children = v->children_last = NULL;
}

void fe_dispose_view(fe_view v)
{
    wimp_caretstr cs;
    BOOL had_caret;

    if (!v)
        return;

    wimp_get_caret_pos(&cs);
    had_caret = cs.w == v->w;

    if (v->displaying)
	backend_dispose_doc(v->displaying);

    if (v->fetching)
	backend_dispose_doc(v->fetching);

    fe_history_dispose(v);

    alarm_removeall(v);

    fe_dispose_view_children(v);

    if (v->w)
    {
        wimp_delete_wind(v->w);
#if 1
        fprintf(stderr, "delete win %x from view %p\n", v->w, v);
#endif
    }

    if (last_click_view == v)
        last_click_view = NULL;

    if (dragging_view == v)
        dragging_view = NULL;

    if (fe_map_view() == v)
        fe_map_mode(NULL, NULL);

    if (had_caret && v->parent)
        fe_get_wimp_caret(fe_find_top(v)->w);

    mm_free(v->return_page);

    v->magic = 0;
    mm_free(v);
}

/* ------------------------------------------------------------------------------------------- */

// eof stbopen.c
