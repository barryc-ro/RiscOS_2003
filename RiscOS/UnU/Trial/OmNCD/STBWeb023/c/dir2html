/* -*-c-*- */

/* dir2html.c */

/* Given a RISC OS directory make an HTML file for its contents */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "memwatch.h"

#include "os.h"
#include "swis.h"

#include "filetypes.h"
#include "util.h"
#include "url.h"
#include "makeerror.h"

static char *d2h_fmt_title = "Index of %s";
static char *d2h_fmt_footer = "Listing generated %s by ANT Fresco&#174;.\n";

static char *pads = "                        ";
#define NPADS 24

/* As yet no flags are defined */

typedef struct {
    int load;
    int exec;
    int len;
    int attr;
    int otype;
    char name[256];
} d2h_finfo;

os_error *dir2html(char *path, char *filename, int flags)
{
    os_error *ep = NULL;
    os_gbpbstr gps;
    FILE *fh;
    d2h_finfo info;
    char buffer[256];
    int plen;

    strcpy(buffer, path);
    plen = strlen(buffer);
    if (buffer[plen-1] != '.')
	buffer[plen++] = '.';
    buffer[plen] = 0;

    fprintf(stderr, "Reading directory %s into file %s\n", buffer, filename);

    fh = fopen(filename, "w");
    if (fh)
    {
	char lbuffer[256];
	char *newpath;
	char *url;

	gps.action = 10;
	gps.file_handle = (int) path;
	gps.data_addr = &info;
	gps.seq_point = 0;
	gps.buf_len = sizeof(info);
	gps.wild_fld = "*";

	sprintf(lbuffer, d2h_fmt_title, path);

	newpath = url_riscos_to_path(buffer);
	url = url_unparse("file", 0, newpath, 0, 0, 0);

	fprintf(fh, "<head><title>%s</title><base href=\"%s\"></head>\r\n", lbuffer, url);
	fprintf(fh, "<body><h1>%s</h1><p><pre>\r\n", lbuffer);
	fprintf(fh, "<img src=\"icontype:blank\"> Name                     Last modified     Size<hr>\r\n");
	fprintf(fh, "<img src=\"icontype:back\"> <a href=\"../\">../</a>                     Parent directory\r\n");

	mm_free(url);
	mm_free(newpath);

	fprintf(stderr, "Looping...\n");

	while (ep == NULL && gps.seq_point != -1)
	{
	    gps.number = 1;

	    fprintf(stderr, "Calling gbpb, action=%d, dir=%s, buffer=%p, n=%d, off=%d, len=%d, wild=%s\n", gps.action, (char*) gps.file_handle, gps.data_addr, gps.number, gps.seq_point, gps.buf_len, gps.wild_fld);
	    
	    ep = os_gbpb(&gps);
	    fprintf(stderr, " gbpb returned, number = %d, ep = %p\n", gps.number, ep);

	    if ((ep == NULL) && (gps.number != 0))
	    {
		char iconname[32];
		char sizeinfo[16];
		char dateinfo[20];
		char datetmp[8];
		int llen;
		os_regset r;

		fprintf(stderr, "Info on %s\n", info.name);

		strcpy(buffer + plen, info.name);

		newpath = url_riscos_to_path(buffer);
		url = url_unparse("file", 0, newpath, 0, 0, 0);

		if (info.otype == 2)
		{
		    strcpy(iconname, "directory");
		    strcpy(sizeinfo, "&lt;DIR&gt;");
		}
		else
		{
		    sprintf(iconname, ",%03x", file_type(buffer));
		    if (info.len > (2 << 20))
		    {
			sprintf(sizeinfo, "%4dM", info.len >> 20);
		    }
		    else if (info.len > (2 << 10))
		    {
			sprintf(sizeinfo, "%4dK", info.len >> 10);
		    }
		    else
		    {
			sprintf(sizeinfo, "%4d ", info.len);
		    }
		}

		*((int*)datetmp) = info.exec;
		datetmp[4] = info.load & 0xff;

		r.r[0] = (int) datetmp;
		r.r[1] = (int) dateinfo;
		r.r[2] = sizeof(dateinfo);
		r.r[3] = (int) "%DY-%M3-%CE%YR %24:%MI";

		os_swix(OS_ConvertDateAndTime, &r);

		llen = strlen(info.name);

		fprintf(fh, "<img src=\"icontype:%s\"> <a href=\"%s\">%s</a>%s%s  %s\r\n",
			iconname, url, info.name,
			pads + (llen < NPADS ? llen : NPADS-1), dateinfo, sizeinfo);

		mm_free(url);
		mm_free(newpath);
		fprintf(stderr, "Done processing\n");
	    }
	    fprintf(stderr, "While loop end\n");
	}

	fprintf(stderr, "Loop done\n");

	fprintf(fh, "<hr>");
	fprintf(fh, d2h_fmt_footer, "time/date");
	fprintf(fh, "</pre></body>\r\n");

	fclose(fh);

	set_file_type(filename, FILETYPE_HTML);

	fprintf(stderr, "All done\n");
    }
    else
    {
	ep = makeerror(ERR_CANT_GET_URL);
    }
    
    fprintf(stderr, "Dir2html finnished\n");

    return ep;
}
