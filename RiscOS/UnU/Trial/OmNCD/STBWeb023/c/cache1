/* > cache1.c

 * Cacheing functions when using cachefs.

 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "akbd.h"
#include "os.h"

#include "memwatch.h"
#include "makeerror.h"
#include "version.h"

#define ACCESS_INTERNAL
#include "access.h"

#include "config.h"

// -----------------------------------------------------------------------------------------------
// -- scrap functions

static char *scrapname = NULL;
static int scrap_cycle = 0;

static char *scrap_hdr;
static int scrap_hdr_len;

#define SCRAP_INFIX         "."PROGRAM_NAME"."
#define SCRAP_INFIX_SIZE    (sizeof(SCRAP_INFIX)-1)

// -----------------------------------------------------------------------------------------------

static os_error *scrapfile_init(void)
{
    char *s = getenv("Wimp$ScrapDir");

    // scrap header is stuck at the start of translated names
    scrap_hdr_len = strlen(s) + SCRAP_INFIX_SIZE;
    scrap_hdr = mm_malloc(scrap_hdr_len+1);

    strcpy(scrap_hdr, s);
    strcat(scrap_hdr, SCRAP_INFIX);

    // scrap name is use for temp files
    scrapname = mm_malloc(scrap_hdr_len+8+1);
    strcpy(scrapname, scrap_hdr);

    return NULL;
}

// get temporary file name

static char *scrapfile_name(void)
{
    sprintf(scrapname + scrap_hdr_len, "%08x", scrap_cycle);    // only use 8 chars or else change allocation above
    scrap_cycle++;
#if 0
    fprintf(stderr, "Temp file name is '%s'\n", scrapname);
#endif
    return scrapname;
}

// -----------------------------------------------------------------------------------------------

#define HEXCHAR(c)  ("0123456789ABCDEF"[c])

static void translate_char(int c, char **s_out_ptr)
{
    char *s_out = *s_out_ptr;

        switch (c)
        {
            case '!':               // this is our escape char
            case '"':
            case '#':
            case '$':
            case '%':
            case '&':
            case '*':
            case ':':
            case '<':
            case '@':
            case '\\':
            case '^':
            case ' ':
                *s_out++ = '!';
                *s_out++ = HEXCHAR(c>>4);
                *s_out++ = HEXCHAR(c&15);
                break;

            case '.':               // swap . and / for the hell of it
                *s_out++ = '/';
                break;

            case '/':
                *s_out++ = '.';
                break;

            case 0:
                *s_out++ = 0;
                break;

            default:                // write out others as normal
                if (c >= 'A' && c <= 'Z')
                {
                    *s_out++ = '!';
                    *s_out++ = HEXCHAR(c>>4);
                    *s_out++ = HEXCHAR(c&15);
                }
                else if (c > ' ')
                    *s_out++ = c;
                break;
        }

    *s_out_ptr = s_out;
}

typedef enum
{
    transtate_SCHEME,
    transtate_COLON,
    transtate_SLASH_ONE,
    transtate_NETLOC,
    transtate_PATH,
    transtate_ESCAPED1,
    transtate_ESCAPED2
} translation_state;

static char *translate_name(char *url_in)
{
    int len_in;
    char *file_out;
    char *s_in, *s_out, *last_dot;
    int c;
    translation_state state;

    // allocate space for output
    len_in = strlen(url_in);
    file_out = mm_malloc(scrap_hdr_len + len_in*3 + 1);  // worst case all escaped

    s_in = url_in;

    // start file name off with the scrap directory prefix
    strcpy(file_out, scrap_hdr);
    s_out = file_out + scrap_hdr_len;
//    last_dot = s_out;

    state = transtate_SCHEME;
    do
    {
        c = *s_in++;

        if (c == 0)
        {
            if (state != transtate_PATH)
                *s_out++ = '.';

            if (s_out[-1] == '.')
                *s_out++ = '!';     // ! alone is not used elsewhere so can denote an unnamed file

            *s_out++ = 0;
        }
        else switch (state)
        {
            case transtate_SCHEME:
                if (c == ':')
                {
                    state = transtate_COLON;
                    *s_out++ = '.';                     // first colon we want as a dot, any others are escaped
                }
                else
                {
                    translate_char(tolower(c), &s_out);
                }
                break;

            case transtate_COLON:
                if (c == '/')
                    state = transtate_SLASH_ONE;
                else
                {
                    translate_char(c, &s_out);
                    state = transtate_PATH;
                }
                break;

            case transtate_SLASH_ONE:
                if (c == '/')
                    state = transtate_NETLOC;
                else
                {
                    translate_char(c, &s_out);
                    state = transtate_PATH;
                }
                break;

            case transtate_NETLOC:
                translate_char(tolower(c), &s_out);

                if (c == '/')
                    state = transtate_PATH;
                break;

            case transtate_PATH:
                if (c == '%')
                {
                    *s_out++ = '!';
                    state = transtate_ESCAPED1;
                }
                else
                    translate_char(c, &s_out);
                break;

            case transtate_ESCAPED1:
                *s_out++ = tolower(c);
                state = transtate_ESCAPED2;
                break;

            case transtate_ESCAPED2:
                *s_out++ = tolower(c);
                state = transtate_PATH;
                break;
        }
/*
        if (s_out[-1] == '.')
        {
            last_dot = s_out-1;
        }
        else if (c && s_out - last_dot > 128)
        {
            *s_out++ = '!';
            *s_out++ = '.';
            last_dot = s_out-1;
        }
 */
    }
    while (c);

    file_out = mm_realloc(file_out, s_out - file_out);

    return file_out;
}

// -----------------------------------------------------------------------------------------------

// given a url find the filename (and mark it as used)
static char *cache_lookup(char *url)
{
    char *file = translate_name(url);
    return file;
}

static void cache_lookup_free_name(char *file)
{
    mm_free(file);
}

// given a url remove from the cache and delete (if ours)
static void cache_remove(char *url)
{
    url = url;
}

// delete unrecently used until below size limit
//static void cache_make_room(int size)

// create a new cache entry, removing anything if necessary
static void cache_insert(char *url, char *file, cache_flags flags)
{
    char *new_file;
    os_error *e;

    // don't do any caching for file URLs
    if (strncmp(url, "file:", 5) == 0)
        return;

    new_file = translate_name(url);

#if 0
    fprintf(stderr, "cache: insert '%s' currently '%s' as '%s' flags %x\n", url, file, new_file, flags);
#endif

    //r = rename(file, new_file);
    e = _swix(OS_FSControl, _INR(0,2), 0x19, file, new_file);

    if (e)
    {
#if 1
        fprintf(stderr, "cache: insert - rename returns '%s'\n", e->errmess);
#endif

        remove(new_file);

//        r = rename(file, new_file);
        e = _swix(OS_FSControl, _INR(0,2), 0x19, file, new_file);
#if 1
        fprintf(stderr, "cache: insert - rename returns '%s'\n", e ? e->errmess : "no error");
#endif
    }

    mm_free(new_file);
}

// dump out list for persistent use. This might have to be done
// on every access and so should be held in separate files for each
// directory.

// static void cache_dump(void)

// locate file and increment keep count
static void cache_keep(char *url)
{
    char *file = translate_name(url);

    // stamp file (ie any access to make it more recently used).
    _swix(OS_File, _INR(0,1), 9, file);

    mm_free(file);
}

// locate file and decrement keep count
static void cache_unkeep(char *url)
{
    url = url;
}

// locate file and clear OURS flag
// ie we don't take resposibility for deleting it (in which case why do we
// keep a reference to it at all?).
static void cache_not_ours(char *file)
{
    file = file;
}

static os_error *cache_init(int size)
{
    return scrapfile_init();
    size = size;
}

// wipe contents of cache directory

static void cache_tidyup(void)
{
#if 1
    fprintf(stderr, "cache: tidyup - wipe '%s'\n", scrapname);
#endif
    if (scrap_hdr && scrap_hdr_len && !config_cache_keep && !(akbd_pollsh() && akbd_pollctl()))
    {
        strcpy(scrap_hdr + scrap_hdr_len, "*");
        _swix(OS_FSControl, _INR(0,1)|_IN(3), 27, scrap_hdr, 1);    // wipe recurse
    }
}

static int cache_test(char *url)
{
    char *file = translate_name(url);
    int type = 0;

    _swix(OS_File, _INR(0,1)|_OUT(0), 0x11, file, &type);

    mm_free(file);
    return type & 1;
}

cache_functions cachefs_cache_functions =
{
    cache_insert,
    cache_remove,

    cache_keep,
    cache_unkeep,

    cache_not_ours,

    cache_lookup,
    cache_lookup_free_name,

    cache_init,
    cache_tidyup,

    scrapfile_name,

    cache_test
};

// -----------------------------------------------------------------------------------------------

// eof cache1.c
