/* -*-c-*- */

/* hotlist.c */

/* Deal with hotlists */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "config.h"
#include "os.h"
#include "makeerror.h"
#include "filetypes.h"
#include "swis.h"

#include "hotlist.h"
#include "version.h"

os_error *hotlist_add(char *url, char *title)
{
    FILE *fh;

    fh = fopen(config_hotlist_file, "a");
    if (!fh)
	return makeerror(ERR_CANT_OPEN_HOTLIST);

    fprintf(fh, "%s\n", url);
    fprintf(fh, "%s\n", title ? title : "");

    fclose(fh);

    return NULL;
}

os_error *hotlist_remove(char *url)
{
    char name_buffer[256];
    char url_line[1024];
    char ttl_line[1024];
    FILE *in = NULL, *out = NULL;
    int i;
    os_error *ep;
    os_filestr fs;
    os_regset r;

    r.r[0] = (int)config_hotlist_file;
    r.r[1] = (int)name_buffer;
    r.r[2] = sizeof(name_buffer);
    ep = os_swix(OS_GSTrans, &r);
    if (ep)
        return ep;

    i = strlen(name_buffer);
    name_buffer[i-1] = '~';

    in = fopen(config_hotlist_file, "r");
    if (in == NULL)
	return makeerror(ERR_CANT_OPEN_HOTLIST);

    out = fopen(name_buffer, "w");
    if (out == NULL)
    {
        fclose(in);
	return makeerror(ERR_CANT_OPEN_HOTLIST);
    }

    while (!feof(in))
    {
	if (fgets(url_line, sizeof(url_line), in) &&
	    fgets(ttl_line, sizeof(ttl_line), in))
	{
            if (strncmp(url_line, url, strlen(url)) != 0)
            {
		fputs(url_line, out);
		fputs(ttl_line, out);
	    }
	}
    }

    fclose(in);
    fclose(out);

    remove(config_hotlist_file);
    rename(name_buffer, config_hotlist_file);

    return NULL;
}

static void strip_white(char *s)
{
    char *ss = s + strlen(s);
    while (--ss >= s && isspace(*ss))
        *ss = 0;
}

void hotlist_write_list(FILE *fout)
{
    FILE *fh;

    fh = fopen(config_hotlist_file, "r");
    if (fh)
    {
        while (!feof(fh))
        {
            char url_line[1024];
            char ttl_line[1024];

    	    if (fgets(url_line, sizeof(url_line), fh) &&
	        fgets(ttl_line, sizeof(ttl_line), fh) &&
	        url_line[0])
	    {
                strip_white(url_line);
                strip_white(ttl_line);
                fprintf(fout, "<li><a href=\"%s\">%s</a>\n", url_line, ttl_line[0] ? ttl_line : url_line);
            }
        }

        fclose(fh);
    }
}

// eof stbhots.c
