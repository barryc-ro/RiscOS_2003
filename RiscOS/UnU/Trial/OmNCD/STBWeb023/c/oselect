/* -*-c-*- */

/* select.c */

/* Deal with the select list for forms */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "memwatch.h"

#include "wimp.h"
#include "font.h"
#include "bbc.h"

#include "antweb.h"
#include "interface.h"
#include "rid.h"
#include "webfonts.h"
#include "util.h"
#include "makeerror.h"
#include "consts.h"
#include "config.h"
#include "render.h"
#include "rcolours.h"

#include "object.h"

static void select_menu_callback(fe_menu mh, void *handle, int item, int right)
{
    rid_text_item_select *tis = (rid_text_item_select *) handle;
    int i;
    rid_option_item *oi;
    int tog, redraw;
    fe_menu_item *iis;

    tog = tis->select->flags & rid_sf_MULTIPLE;

    iis = (fe_menu_item*) tis->select->items;

    redraw = right;

    for(i = 0, oi = tis->select->options; oi; oi = oi->next, i++)
    {
	if (i == item)
	{
	    if (!tog)
	    {
		if ((oi->flags & rid_if_CHECKED) == 0)
		{
		    iis[i].flags |= fe_menu_flag_CHECKED;
		    oi->flags |= rid_if_CHECKED;
		    if (redraw)
		    {
			frontend_menu_update_item(mh, i);
		    }
		}
	    }
	    else
	    {
		iis[i].flags ^= fe_menu_flag_CHECKED;
		oi->flags ^= rid_if_CHECKED;
		if (redraw)
		{
		    frontend_menu_update_item(mh, i);
		}
	    }
	}
	else
	{
	    if (!tog)
	    {
		if ((oi->flags & rid_if_CHECKED))
		{
		    iis[i].flags ^= fe_menu_flag_CHECKED;
		    oi->flags ^= rid_if_CHECKED;
		    if (redraw)
		    {
			frontend_menu_update_item(mh, i);
		    }
		}
	    }
	}
    }

    antweb_update_item( (antweb_doc*)tis->select->doc, &(tis->base));
}

void oselect_size(rid_text_item *ti, rid_header *rh, antweb_doc *doc)
{
    rid_select_item *sel = ((rid_text_item_select *) ti)->select;
    rid_option_item *oi;
    int width, height;
    font_string fs;
    int checked = FALSE;
    int line_space;
    int i;

    sel->doc = doc;

    line_space = webfonts[WEBFONT_TTY].max_up + webfonts[WEBFONT_TTY].max_down;
    width = webfont_tty_width(6, 1); /* Length of '<none>' in chars */
    height = 0;

    if (font_setfont(webfonts[WEBFONT_TTY].handle) != 0)
	return;

    for(oi = sel->options; oi; oi = oi->next)
    {
	if (oi->text == NULL)
	    oi->text = strdup(""); /* OK, so it uses loads of memory, but it should not happen in the first place */

	/* Start at the end; while not before the start and on a space; work backwards */
	for(i = strlen(oi->text)-1; i>=0 && isspace(oi->text[i]); i--)
	    oi->text[i] = 0;

	if (oi->flags & rid_if_CHECKED)
	    checked = TRUE;

	fs.s = oi->text;
	fs.x = fs.y = fs.term = (1 << 30);
	fs.split = -1;

	if (font_strwidth(&fs) == NULL)
	{
	    if (width < (fs.x / MILIPOINTS_PER_OSUNIT))
		width = (fs.x / MILIPOINTS_PER_OSUNIT);
	}

	height ++;
    }

    if (!checked && sel->options)
	sel->options->flags |= rid_if_CHECKED;

    if (height)
    {
	sel->items = mm_calloc(sizeof(fe_menu_item), height);

	for(i=0, oi = sel->options; oi; i++, oi = oi->next)
	{
	    fe_menu_item *ii = ((fe_menu_item*)sel->items) + i;
	    ii->name = oi->text;
	    if (oi->flags & rid_if_CHECKED)
		ii->flags = fe_menu_flag_CHECKED;
	}
    }

    sel->menuh = frontend_menu_create(doc->parent, select_menu_callback, ti, height, sel->items, sel->size, width);
    sel->count = height;

    ti->width = width + 48 + 16;
    ti->max_up = webfonts[WEBFONT_TTY].max_up + 6;
    ti->max_down = webfonts[WEBFONT_TTY].max_down + 8;
}

void oselect_redraw(rid_text_item *ti, rid_header *rh, antweb_doc *doc, int hpos, int bline, object_font_state *fs, wimp_box *g, int ox, int oy)
{
    rid_select_item *sel = ((rid_text_item_select *) ti)->select;
    rid_option_item *oi;
    int checked = 0;
    char *str = NULL;
    font_string fstr;

    render_plinth(render_colour_INPUT_B, render_plinth_IN,
		  hpos, bline - ti->max_down,
		  ti->width - 52, (ti->max_up + ti->max_down), doc );

    for(oi = sel->options; oi; oi = oi->next)
    {
	if (oi->flags & rid_if_CHECKED)
	{
	    str = oi->text;
	    checked ++;
	}
    }

    if (checked == 0)
	str = "<None>";
    if (checked > 1)
	str = "<Many>";

    if (fs->lf != webfonts[WEBFONT_TTY].handle)
    {
	fs->lf = webfonts[WEBFONT_TTY].handle;
	font_setfont(fs->lf);
    }

    if (fs->lfc != render_colour_INPUT_F)
    {
	fs->lfc = render_colour_INPUT_F;
	render_set_font_colours(fs->lfc, render_colour_INPUT_B, doc);
    }

    fstr.s = str;
    fstr.x = fstr.y = fstr.term = (1 << 30);
    fstr.split = -1;

    font_strwidth(&fstr);

    font_paint(str, font_OSCOORDS + (config_display_blending ? 0x800 : 0),
	       hpos + ((ti->width - 68 - (fstr.x / MILIPOINTS_PER_OSUNIT)) >> 1) + 10, bline);

    render_plot_icon("gright", hpos + ti->width - 48, bline + ((ti->max_up - ti->max_down) >> 1) - 22);

    // SJM
    if (ti->flag & rid_flag_SELECTED)
    {
	render_set_colour(render_colour_HIGHLIGHT, doc);
	render_item_outline(ti, hpos, bline);
    }
}

void oselect_dispose(rid_text_item *ti, rid_header *rh, antweb_doc *doc)
{
    rid_select_item *sel = ((rid_text_item_select *) ti)->select;

    frontend_menu_dispose( sel->menuh );

    if (sel->items)
	mm_free(sel->items);
}

char *oselect_click(rid_text_item *ti, rid_header *rh, antweb_doc *doc, int x, int y, wimp_bbits bb)
{
    wimp_box box;
    backend_doc_item_bbox(doc, ti, &box);

    frontend_menu_raise(((rid_text_item_select *)ti)->select->menuh, box.x1, box.y1);

    return NULL;		/* Links should not be followed */
}

void oselect_astext(rid_text_item *ti, rid_header *rh, FILE *f)
{
    fputs("[Selection menu]", f);
}
