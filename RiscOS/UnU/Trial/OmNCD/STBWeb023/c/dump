/* -*-C-*- dump.c - internal object debugging dumper */

#include <string.h>
#include <ctype.h>
#include <assert.h>
#include <math.h>

#include "memwatch.h"

#include "wimp.h"
#include "consts.h"
#include "HTMLRISCOS.h"         /* Now includes bits that were local */
#include "HTMLPDTD.h"
#include "HTStream.h"
#include "SGML.h"

#include "rid.h"
#include "charsets.h"
#include "util.h"
#include "webfonts.h"
#include "url.h"

#include "filetypes.h"
#include "parsers.h"
#include "images.h"

#include "tables.h"

/*****************************************************************************/

/* copied from tables.c - keep in step */

static strtag strtag_stdunits[] =
{
        { "pt",         rid_stdunit_PT          },
        { "px",         rid_stdunit_PX          },
        { "pi",         rid_stdunit_PI          },
        { "in",         rid_stdunit_IN          },
        { "cm",         rid_stdunit_CM          },
        { "mm",         rid_stdunit_MM          },
        { "%",          rid_stdunit_PCENT       },
        { "*",          rid_stdunit_MULT        },
        { NULL,         rid_stdunit_UNKNOWN     }
};

static strtag strtag_valign[] =
{
        { "TOP",        rid_vt_TOP      },
        { "MIDDLE",     rid_vt_MIDDLE   },
        { "BOTTOM",     rid_vt_BOTTOM   },
        { "BASELINE",   rid_vt_BASELINE },
        { NULL,         rid_vt_UNKNOWN  }

};

static strtag strtag_halign[] =
{
        { "LEFT",       rid_ht_LEFT     },
        { "RIGHT",      rid_ht_RIGHT    },
        { "CENTER",     rid_ht_CENTER   },
        { "CENTRE",     rid_ht_CENTER   },
        { "JUSTIFY",    rid_ht_JUSTIFY  },
        { "CHAR",       rid_ht_CHAR     },
        { NULL,         rid_ht_UNKNOWN  }
};

static strtag strtag_dir[] =
{
        { "LRT",        rid_dt_LTR    },
        { "RTL",        rid_dt_RTL    },
        { NULL,         rid_dt_UNKNOWN}
};

static strtag strtag_frame[] =
{
        { "VOID",       rid_ft_VOID     },
        { "ABOVE",      rid_ft_ABOVE    },
        { "BELOW",      rid_ft_BELOW    },
        { "HSIDES",     rid_ft_HSIDES   },
        { "LHS",        rid_ft_LHS      },
        { "RHS",        rid_ft_RHS      },
        { "VSIDES",     rid_ft_VSIDES   },
        { "BOX",        rid_ft_BOX      },
        { "BORDER",     rid_ft_BORDER   },
        { NULL,         rid_ft_UNKNOWN  }

};


static strtag strtag_rules[] =
{
        { "NONE",       rid_rt_NONE     },
        { "GROUPS",     rid_rt_GROUPS   },
        { "ROWS",       rid_rt_ROWS     },
        { "COLS",       rid_rt_COLS     },
        { "ALL",        rid_rt_ALL      },
        { NULL,         rid_rt_UNKNOWN  }

};

static strtag strtag_calign[] =
{
        { "TOP",        rid_ct_TOP      },
        { "BOTTOM",     rid_ct_BOTTOM   },
        { "LEFT",       rid_ct_LEFT     },
        { "RIGHT",      rid_ct_RIGHT    },
        { NULL,         rid_ct_UNKNOWN  }

};


static strtag strtag_item_tag[] =
{
        { "PBREAK  ", rid_tag_PBREAK        },
        { "HLINE   ", rid_tag_HLINE },
        { "TEXT    ", rid_tag_TEXT  },
        { "BULLET  ", rid_tag_BULLET        },
        { "IMAGE   ", rid_tag_IMAGE },
        { "INPUT   ", rid_tag_INPUT },
        { "TEXTAREA", rid_tag_TEXTAREA      },
        { "SELECT  ", rid_tag_SELECT        },
        { "TABLE   ", rid_tag_TABLE },
        { NULL, 0 }
};

static strtag strtag_input_tag[] =
{
    { "TEXT", rid_it_TEXT },
    { "PASSWD", rid_it_PASSWD },
    { "CHECK", rid_it_CHECK },
    { "RADIO", rid_it_RADIO },
    { "SUBMIT", rid_it_SUBMIT },
    { "RESET", rid_it_RESET },
    { "IMAGE", rid_it_IMAGE },
    { "HIDDEN", rid_it_HIDDEN },
    { NULL, 0 }
};

static strtag strtag_form_method[] =
{
    { "GET", rid_fm_GET },
    { "POST", rid_fm_POST },
    { NULL, 0 }
};

/*****************************************************************************/

static char *str_from_tag(int tag, strtag *tags)
{
        while (tags->str)
        {
                if ( tags->tag == tag )
                        return tags->str;
                tags++;
        }

        return " ** BOGUS TAG ** ";
}

/*****************************************************************************/

static int indent = 0;
static int at_start = 0;
static char buf[1024];

static void enter(void)
{
        indent++;
}

static void leave(void)
{
        indent--;
}

static void newline(void)
{
        fprintf(stderr, "\n");
        at_start = 1;
}

static void print(char *format, ... )
{
	va_list(arg);
	va_start(arg, format);

        if (at_start)
        {
                int i;
                at_start = 0;
                for (i = 0; i < indent; i++)
                        fprintf(stderr, "|  ");
        }
	vfprintf(stderr, format, arg);
        va_end(arg);
        newline();
	fflush(stderr);
}

static void nonlprint(char *format, ... )
{
	va_list(arg);
	va_start(arg, format);

        if (at_start)
        {
                int i;
                at_start = 0;
                for (i = 0; i < indent; i++)
                        fprintf(stderr, "|  ");
        }
	vfprintf(stderr, format, arg);
        va_end(arg);
	fflush(stderr);
}

/*****************************************************************************/

#define FIELD(ptr, field, fmt)  print( #field " " fmt, (ptr)->field )
#define X_OR_NULL(x)            (x ? x : "NULL")

/*****************************************************************************/




extern void dump_span(int *base, int span)
{
  	int x;
 	print("Base %p, span %d", base, span);

 	for (x = 0; x < span; x++)
 		nonlprint("%4d ", base[x]);

	print("");
}









extern void dump_style(ROStyle style)
{
        ROStyle *ptr = &style;
return;
        print("ROStyle %08x", *(int*)ptr);
        enter();
                FIELD(ptr, wf_index, "%d");
                FIELD(ptr, flags, "%02x");
                FIELD(ptr, indent, "%d");
                FIELD(ptr, old_list_no, "%d");
        leave();
}

extern void dump_pos(rid_pos_item *pi)
{
        print("rid_pos_item %p", pi);
        if (pi == NULL)
        	return;
        enter();
                FIELD(pi, prev, "%p");
                FIELD(pi, next, "%p");
                FIELD(pi, st, "%p");
                FIELD(pi, top, "%d");
                FIELD(pi, left_margin, "%d");
                FIELD(pi, max_up, "%d");
                FIELD(pi, max_down, "%d");
                FIELD(pi, first, "%p");
        leave();
}

extern void dump_stdunits(rid_stdunits u)
{
  	/*print("rid_stdunits");*/
return;
  	enter();
  		print("type %s", str_from_tag(u.type, strtag_stdunits));
  		print("count %f", u.count);
 	leave();
}

extern void dump_item(rid_text_item *item)
{
        print("rid_text_item %p", item);
        if (item == NULL)
        	return;
        enter();
                FIELD(item, next, "%p");
                FIELD(item, line, "%p");
		/*FIELD(item, aref, "%p");*/
                FIELD(item, max_up, "%d");
                FIELD(item, max_down, "%d");
                FIELD(item, width, "%d");
                FIELD(item, pad, "%d");
                /*FIELD(item, flag, "%x");*/
                print("tag %s", str_from_tag(item->tag, strtag_item_tag));
                /*dump_style(item->st);*/
	        if (item->tag == rid_tag_TABLE)
        		dump_table( ((rid_text_item_table*)item)->table);
        leave();
}


extern void dump_aref(rid_aref_item *ptr)
{
        print("rid_aref_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                print("name %s", X_OR_NULL(ptr->name));
                print("href %s", X_OR_NULL(ptr->href));
                print("rel %s", X_OR_NULL(ptr->rel));
                FIELD(ptr, first, "%p");
        leave();
}





extern void dump_input(rid_input_item *ptr)
{
        print("rid_input_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                FIELD(ptr, parent, "%p");
                FIELD(ptr, display, "%p");
                print("tag %s", str_from_tag(ptr->tag, strtag_input_tag));
                FIELD(ptr, flags, "%08x");
                print("name %s", X_OR_NULL(ptr->name));
                print("value %s", X_OR_NULL(ptr->value));
                FIELD(ptr, xsize, "%d");
                FIELD(ptr, ysize, "%d");
                print("src %s", X_OR_NULL(ptr->src));
                FIELD(ptr, max_len, "%d");
                print("data ... ");
        leave();
}



extern void dump_option(rid_option_item *ptr)
{
        print("rid_option_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                print("text %s", X_OR_NULL(ptr->text));
                print("value %s", X_OR_NULL(ptr->value));
                FIELD(ptr, flags, "%08x");
        leave();
}



extern void dump_select( rid_select_item *ptr)
{
        print("rid_select_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                FIELD(ptr, parent, "%p");
                FIELD(ptr, ti, "%p");
                print("name %s", X_OR_NULL(ptr->name));
                FIELD(ptr, count, "%d");
                FIELD(ptr, size, "%d");
                FIELD(ptr, items, "%p");
                FIELD(ptr, menuh, "%p");
                FIELD(ptr, doc, "%p");
                FIELD(ptr, options, "%p");
                FIELD(ptr, last_option, "%p");
                FIELD(ptr, flags, "%08x");
        leave();
}


extern void dump_textarea_line( rid_textarea_line *ptr)
{
        print("rid_textarea_line %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                print("text %s", X_OR_NULL(ptr->text));
        leave();
}

extern void dump_textarea(rid_textarea_item *ptr)
{
        print("rid_textarea_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                FIELD(ptr, parent, "%p");
                FIELD(ptr, display, "%p");
                print("name %s", X_OR_NULL(ptr->name));
                FIELD(ptr, rows, "%d");
                FIELD(ptr, cols, "%d");
                FIELD(ptr, cx, "%d");
                FIELD(ptr, cy, "%d");
                FIELD(ptr, sx, "%d");
                FIELD(ptr, sy, "%d");
                FIELD(ptr, default_lines, "%d");
                FIELD(ptr, def_last_line, "%p");
                FIELD(ptr, lines, "%p");
                FIELD(ptr, last_line, "%p");
                FIELD(ptr, caret_line, "%p");
        leave();
}



extern void dump_form( rid_form_item *ptr)
{
        print("rid_form_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
                FIELD(ptr, prev, "%p");
                FIELD(ptr, next, "%p");
                FIELD(ptr, kids, "%p");
                FIELD(ptr, last_kid, "%p");
                FIELD(ptr, texts, "%p");
                FIELD(ptr, last_text, "%p");
                FIELD(ptr, selects, "%p");
                FIELD(ptr, last_select, "%p");
                FIELD(ptr, method, "%p");
/*                print("method %s", str_from_tag(ptr->method, strtag_input_method));*/
		FIELD(ptr, method, "%d");
                print("action %s", X_OR_NULL(ptr->action));
        leave();
}



extern void dump_caption(rid_table_caption *ptr)
{
 	print("rid_table_caption %p", ptr);
        if (ptr == NULL)
        	return;
 	enter();
 		FIELD(ptr, table, "%p");
 		print("calign %s", str_from_tag(ptr->calign, strtag_calign));
        	/*FIELD(ptr, id, "%p");*/
        	/*FIELD(ptr, class, "%p");*/
        	/*FIELD(ptr, props, "%p");*/
 		dump_stream(&ptr->stream);
	leave();
}

extern void dump_table(rid_table_item *ptr)
{
  	rid_table_cell *cell;
	int x,y;

        print("rid_table_item %p", ptr);
        if (ptr == NULL)
        	return;
        enter();
        	FIELD(ptr, parent, "%p");
        	FIELD(ptr, oldstream, "%p");
        	FIELD(ptr, flags, "%08x");
#if 0
        	FIELD(ptr, caption, "%p");
        	FIELD(ptr, props, "%p");
        	FIELD(ptr, id, "%p");
        	FIELD(ptr, class, "%p");
#endif
        	print("userborder");
        	dump_stdunits(ptr->userborder);
        	print("frame %s", str_from_tag(ptr->frame, strtag_frame));
        	print("rules %s", str_from_tag(ptr->rules, strtag_rules));
        	print("userwidth");
        	dump_stdunits(ptr->userwidth);
        	print("cellspacing");
        	dump_stdunits(ptr->usercellspacing);
        	FIELD(ptr, cellspacing, "%d");
        	print("cellpadding");
        	dump_stdunits(ptr->usercellpadding);
        	FIELD(ptr, cellpadding, "%d");
        	FIELD(ptr, header_rows, "%d");
        	FIELD(ptr, footer_rows, "%d");
        	print("num_groups %d %d", ptr->num_groups.x, ptr->num_groups.y);
        	FIELD(ptr, array, "%p");
        	FIELD(ptr, rowhdrs, "%p");
        	FIELD(ptr, colhdrs, "%p");
        	FIELD(ptr, rowgroups, "%p");
        	FIELD(ptr, colgroups, "%p");
        	FIELD(ptr, lborder, "%d");
        	FIELD(ptr, rborder, "%d");
        	FIELD(ptr, tborder, "%d");
        	FIELD(ptr, bborder, "%d");
        	print("cells %d %d", ptr->cells.x, ptr->cells.y);
        	print("size %d %d", ptr->size.x, ptr->size.y);
        	print("width_info");
/*        	FIELD(ptr, hwidths, "%p");*/
/*        	FIELD(ptr, vheights, "%p"); */
        	dump_width_info(ptr->width_info);
        	FIELD(ptr, state, "%d");
        	print("scaff %d %d", ptr->scaff.x, ptr->scaff.y);
                print("Column groups and headers");
                for (x = 0; x < ptr->num_groups.x; x++)
                        dump_colgroup(&ptr->colgroups[x]);
                for (x = 0; x < ptr->cells.x; x++)
                        dump_colhdr(&ptr->colhdrs[x]);

                print("Row groups and headers");
                for (y = 0; y < ptr->num_groups.y; y++)
                        dump_rowgroup(&ptr->rowgroups[y]);
                for (y = 0; y < ptr->cells.y; y++)
                        dump_rowhdr(&ptr->rowhdrs[y]);

                print("Text streams");
		dump_caption(ptr->caption);
		for (y = 0; y < ptr->cells.y; y++)
		{
			for (x = 0; x < ptr->cells.x; x++)
			{
			 	cell = * CELLFOR(ptr, x, y);
			 	if (cell == NULL)
			 	{
			 		print("Cell %d, %d: NULL", x, y);
			 	}
			 	else if (x == cell->cell.x && y == cell->cell.y)
			 	{
			 		print("Cell %d, %d: root item", x, y);
			 	 	dump_cell(cell);
			 	}
			 	else
			 	{
			 		print("Cell %d, %d: covered by cell %d,%d", x, y, cell->cell.x, cell->cell.y);
			 	}
			}
                        print("End of table row %d", y);
		}

        leave();
}




extern void dump_props(rid_table_props *ptr)
{
 	print("rid_table_props %p", ptr);
        if (ptr == NULL)
        	return;
return;		/* @@@@ */
 	enter();
 		print("valign %s", str_from_tag(ptr->valign, strtag_valign));
 		print("halign %s", str_from_tag(ptr->halign, strtag_halign));
 		print("dir %s", str_from_tag(ptr->dir, strtag_dir));
 		/*FIELD(ptr, ch, "%02x");*/
 		/*print("choff");*/
 		dump_stdunits(ptr->choff);
		/*FIELD(ptr, lang, "%p");*/
		/*FIELD(ptr, style, "%p");*/
	leave();
}

/*****************************************************************************/

extern void dump_width_info(rid_width_info info)
{
  	rid_width_info *ptr = &info;
  	/*print("width_info");*/
  	enter();
  		/*FIELD(ptr, minleft, "%d");*/
  		/*FIELD(ptr, minright, "%d");*/
  		FIELD(ptr, minwidth, "%d");
  		/*FIELD(ptr, maxleft, "%d");*/
  		/*FIELD(ptr, maxright, "%d");*/
  		FIELD(ptr, maxwidth, "%d");
	leave();
}


extern void dump_colgroup(rid_table_colgroup *ptr)
{
  	print("rid_table_colgroup %p", ptr);
        if (ptr == NULL)
        	return;
  	enter();
  		FIELD(ptr, props, "%p");
  		FIELD(ptr, first, "%d");
  		FIELD(ptr, span, "%d");
/* 		print("id %s", X_OR_NULL(ptr->id));
 		print("class %s", X_OR_NULL(ptr->class));
 		print("width");
 		dump_stdunits(ptr->width);
*/	leave();
}

extern void dump_rowgroup(rid_table_rowgroup *ptr)
{
  	print("rid_table_rowgroup %p", ptr);
        if (ptr == NULL)
        	return;
  	enter();
  		FIELD(ptr, props, "%p");
  		FIELD(ptr, span, "%d");
/* 		print("id %s", X_OR_NULL(ptr->id));
 		print("class %s", X_OR_NULL(ptr->class));
*/	leave();
}

extern void dump_colhdr(rid_table_colhdr *ptr)
{
	print("rid_table_colhdr %p", ptr);
        if (ptr == NULL)
        	return;
	enter();
		FIELD(ptr, colgroup, "%p");
/*		FIELD(ptr, props, "%p");
		print("width");
		dump_stdunits(ptr->width);
 		print("id %s", X_OR_NULL(ptr->id));
 		print("class %s", X_OR_NULL(ptr->class));
*/ 		print("width_info");
 		dump_width_info(ptr->width_info);
		FIELD(ptr, flags, "%08x");
		FIELD(ptr, offx, "%d");
		FIELD(ptr, sizex, "%d");
		FIELD(ptr, lborder, "%d");
		FIELD(ptr, rborder, "%d");
	leave();
}


extern void dump_rowhdr(rid_table_rowhdr *ptr)
{
 	print("rid_table_rowhdr %p", ptr);
        if (ptr == NULL)
        	return;
 	enter();
 		FIELD(ptr, rowgroup, "%p");
/* 		FIELD(ptr, props, "%p");
 		print("id %s", X_OR_NULL(ptr->id));
 		print("class %s", X_OR_NULL(ptr->class));
*/		FIELD(ptr, offy, "%d");
		FIELD(ptr, sizey, "%d");
		FIELD(ptr, tborder, "%d");
		FIELD(ptr, bborder, "%d");
  	leave();
}




extern void dump_cell(rid_table_cell *ptr)
{
  	print("rid_table_cell %p", ptr);
        if (ptr == NULL)
        	return;
  	enter();
  		FIELD(ptr, parent, "%p");
/*  		FIELD(ptr, props, "%p");
 		print("id %s", X_OR_NULL(ptr->id));
 		print("axes %s", X_OR_NULL(ptr->axes));
 		print("axis %s", X_OR_NULL(ptr->axis));
 		print("class %s", X_OR_NULL(ptr->class));
		FIELD(ptr, flags, "%08x");
*/		print("cell %d %d", ptr->cell.x, ptr->cell.y);
		print("span %d %d", ptr->span.x, ptr->span.y);
		print("size %d %d", ptr->size.x, ptr->size.y);
		dump_props(ptr->props);
  		dump_stream(&ptr->stream);
	leave();
}

extern void dump_stream(rid_text_stream *ptr)
{
  	rid_text_item *ti;
  	rid_pos_item *pi;
 	print("rid_text_stream %p", ptr);
        if (ptr == NULL)
        	return;
 	enter();
  		FIELD(ptr, pos_list, "%p");
  		/*FIELD(ptr, pos_last, "%p");*/
  		FIELD(ptr, text_list, "%p");
  		/*FIELD(ptr, text_last, "%p");*/
  		/*FIELD(ptr, parent, "%p");*/
  		/*FIELD(ptr, partype, "%d");*/
  		FIELD(ptr, fwidth, "%d");
  		FIELD(ptr, width, "%d");
  		FIELD(ptr, widest, "%d");
  		FIELD(ptr, height, "%d");
  		print("width_info");
  		dump_width_info(ptr->width_info);
		for (ti = ptr->text_list; ti != NULL; ti = ti->next)
			dump_item(ti);
  		FIELD(ptr, pos_list, "%p");
		for (pi = ptr->pos_list; pi != NULL; pi = pi->next)
			dump_pos(pi);
  	leave();

}


extern void dump_header(rid_header *ptr)
{
  	print("rid_header %p", ptr);
        if (ptr == NULL)
        	return;
  	enter();
  		FIELD(ptr, curstream, "%p");
  		FIELD(ptr, aref_list, "%p");
  		FIELD(ptr, aref_last, "%p");
  		FIELD(ptr, form_list, "%p");
  		FIELD(ptr, form_last, "%p");
  		FIELD(ptr, flags, "%08x");
  		print("title %s", X_OR_NULL(ptr->title));
  		print("base %s", X_OR_NULL(ptr->base));
  		dump_stream(&ptr->stream);
  	leave();
}




/* eof dump.c */
