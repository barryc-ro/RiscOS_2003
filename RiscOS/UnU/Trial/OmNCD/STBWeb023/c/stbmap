/* > stbmap.c

 * Handle the cursor key map mode

 */

#include <math.h>
#include <stddef.h>

#include "akbd.h"
#include "alarm.h"
#include "coords.h"
#include "wimp.h"

#include "interface.h"
#include "stbfe.h"
#include "stbutils.h"
#include "fevents.h"

// -----------------------------------------------------------------------------

static fe_view map_view = NULL;
static be_item map_item = NULL;

// -----------------------------------------------------------------------------

static void fe_map_update_position_to(int x, int y)
{
    wimp_box box;
    if (fe_item_screen_box(map_view, map_item, &box))
    {
        if (x < box.x0)
            x = box.x0;
        if (x > box.x1)
            x = box.x1;
        if (y < box.y0)
            y = box.y0;
        if (y > box.y1)
            y = box.y1;
    }
    fe_pointer_set_position(x, y);
}

// -----------------------------------------------------------------------------

#if 1

#define MAX_SPEED       64
#define REPEAT_DELAY    8
#define SINGLE_STEP     8
#define FACTOR          1.3
#define MULT            5

static int cont = 0;
static int t_last[8] = { 0 };

static int change_step_speed(void)
{
    int step;
    cont++;
    step = (int)(MULT*pow(FACTOR, cont));
    if (step > MAX_SPEED)
        step = MAX_SPEED;
    return step;
}

static int check_move(int *last_t)
{
    int t = alarm_timenow();
    int diff = t - *last_t;
    int dd;

    if (diff <= REPEAT_DELAY)
    {
        dd = change_step_speed();
    }
    else
    {
        cont = 0;
        dd = SINGLE_STEP;
    }

    *last_t = t;

    return dd;
}

void fe_map_event_handler(int event, fe_view v)
{
    int x = 0, y = 0;
    wimp_mousestr m;

    wimp_get_point_info(&m);
    switch (event)
    {
        case fevent_MAP_SELECT:
        {
            fe_view v = map_view;
            fe_map_mode(NULL, NULL);            // clears map_view variable
            fe_fake_click(v, m.x, m.y);
            break;
        }

        case fevent_MAP_STOP:
        case fevent_MAP_CANCEL:
            fe_map_mode(NULL, NULL);
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_LEFT:
            x = - check_move(&t_last[0]);
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_RIGHT:
            x =   check_move(&t_last[1]);
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_UP:
            y =   check_move(&t_last[2]);
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_DOWN:
            y = - check_move(&t_last[3]);
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_LEFT | fevent_MAP_MOVE_UP:
            x = - check_move(&t_last[4]);
            y = - x;
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_LEFT | fevent_MAP_MOVE_DOWN:
            x = - check_move(&t_last[5]);
            y =   x;
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_RIGHT | fevent_MAP_MOVE_UP:
            x =   check_move(&t_last[6]);
            y =   x;
            break;

        case fevent_MAP_MOVE | fevent_MAP_MOVE_RIGHT | fevent_MAP_MOVE_DOWN:
            x =   check_move(&t_last[7]);
            y = - x;
            break;
    }

    if (x || y)
        fe_map_update_position_to(m.x + x, m.y + y);
}

void fe_map_check_pointer_move(const wimp_mousestr *m)
{
    m = m;
}

#else

static int map_latch_x = 0;
static int map_latch_y = 0;
static int map_time_next = 0;


void fe_map_event_handler(int event, fe_view v)
{
    int x = 0, y = 0;
    wimp_mousestr m;

    wimp_get_point_info(&m);
    switch (event)
    {
        case fevent_MAP_SELECT:
            if (map_latch_x || map_latch_y)
            {
                map_latch_x = map_latch_y = 0;
            }
            else
            {
                fe_view v = map_view;
                fe_map_mode(NULL, NULL);
                fe_fake_click(v, m.x, m.y);
            }
            break;

        case fevent_MAP_STOP:
            if (map_latch_x || map_latch_y)
                map_latch_x = map_latch_y = 0;
            else
                fe_map_mode(NULL, NULL);
            break;

        case fevent_MAP_CANCEL:
            map_latch_x = map_latch_y = 0;
            fe_map_mode(NULL, NULL);
            break;

        default:
            if (event & fevent_MAP_MOVE_MASK)
            {
                if (event & fevent_MAP_MOVE_LEFT)
                    x = -1;
                if (event & fevent_MAP_MOVE_RIGHT)
                    x = +1;
                if (event & fevent_MAP_MOVE_UP)
                    y = +1;
                if (event & fevent_MAP_MOVE_DOWN)
                    y = -1;
            }
            break;
    }

    if (x || y)
    {
        map_latch_x = 4*x;
        map_latch_y = 4*y;
        fe_map_update_position_to(m.x + x*2, m.y + y*2);
    }
}

void fe_map_check_pointer_move(const wimp_mousestr *m)
{
    int timenow = alarm_timenow();
    if ((map_latch_x || map_latch_y) && timenow > map_time_next)
    {
        fe_map_update_position_to(m->x + map_latch_x*2, m->y + map_latch_y*2);
        map_time_next = timenow + 4;
    }
}

#endif

void fe_map_mode(fe_view v, be_item ti)
{
    map_view = v;
    map_item = ti;

    if (v)
        fe_set_pointer(1U<<31);
    else
        fe_set_pointer(0);
#if 1
fprintf(stderr, "stbmap: mode v %p item %p\n", v, ti);
#endif
}

fe_view fe_map_view(void)
{
    return map_view;
}

// -----------------------------------------------------------------------------

// eof stbmap.c
