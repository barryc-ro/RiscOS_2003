/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.flex
 * Purpose: provide memory allocation for interactive programs requiring
 *          large chunks of store.
 * History: IDJ: 06-Feb-92: prepared for source release
 *	    SJM: 10/93: cleanup to allow use of dynamic areas if they exist
 *		        removed flex_budge cos I'm never going to use it.
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "werr.h"
#include "flex.h"
#include "msgs.h"
#include "swis.h"

#undef flex_alloc
#undef flex_free
#undef flex_size
#undef flex_extend
#undef flex_midextend
#undef flex_budge
#undef flex_dont
#undef flex_init

/* ----------------------------------------------------------------------------------------- */

#define ALLOW_DYNAMIC_AREA 1

typedef BOOL (*mem_allocfn)(int nbytes);

enum			/* Dynamic area reason codes */
{
    DynamicArea_Create,
    DynamicArea_Remove,
    DynamicArea_ReturnInfo,
    DynamicArea_Enumerate,
    DynamicArea_Renumber,
    DynamicArea_ReturnApplSize
};

enum			/* user mode access rights */
{
    Access_UserReadWrite,
    Access_UserReadOnly,
    Access_UserNoAccess
};

enum
{
    Area_NotBufferable	= 0x10,
    Area_NotCacheable	= 0x20,
    Area_DoublyMapped	= 0x40,
    Area_NotDraggable	= 0x80
};

#define MoveMemoryErrors_Val	0x1C0
#define MoveMemoryErrors_Mask	0x003

typedef struct
{
    flex_ptr	anchor;		/* *anchor should point back to here. */
    int		size;		/* in bytes. Exact size of logical area. */
                        	/* then the actual store follows. */
} flex__rec;

#define roundup(n)	(0xfffffffc & (n + 3))
#define NEXT_REC(p)	((flex__rec *)(((char*)(p + 1)) + roundup(p->size)))
#define FLEX_REC(n)	((flex__rec *)((char *)flex__base + (n)))

/* ----------------------------------------------------------------------------------------- */

static int flex__initialised = 0;
static int pagesize_minus_1 = 0;                /* assumed to be a power of 2 */

static int flex__available;		/* bytes actually allocated to flex area */
static int flex__used;			/* bytes actually allocated in flex blocks */

static mem_allocfn flex__adjustsize = 0;	/* Function to change flex area size */

static void *flex__base = NULL;

#if ALLOW_DYNAMIC_AREA
static int da_number = 0;
static int da_size = 0;
#endif

/* ----------------------------------------------------------------------------------------- */

#define ROUND_UP_PAGES(a)	(((a) + pagesize_minus_1) &~ pagesize_minus_1)
#define FLEX_ERR		msgs_lookup("flex1:Flex memory error (%d)")

/* ----------------------------------------------------------------------------------------- */

/*	This implementation goes above the original value of GetEnv,
	to memory specifically requested from the Wimp. The heap is kept
	totally compacted all the time, with pages being given back to
	the Wimp whenever possible.
 */

static BOOL wimpslot_adjust(int nbytes)
{
    BOOL success = FALSE;
    _kernel_swi_regs r;
    _kernel_oserror  *err;
    int memlim, appspace, oldmemlim;

   /* read memory limit value */
    r.r[0] = 0;
    r.r[1] = 0;
    r.r[2] = 0;
    err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
    oldmemlim = memlim = r.r[1];

   /* read appspace value */
    r.r[0] = 14;  /* Application space */
    r.r[1] = 0;
    r.r[2] = 0;
    err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
    appspace = r.r[1];

   /* set memory limit before slot size change ... */
    if (appspace > memlim)
    {
        r.r[0] = 0;
        r.r[1] = appspace;
        r.r[2] = 0;
        err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
    }

   /* set wimpslot size */
    {
      	int base_slot = (int)flex__base - 0x8000;

	r.r[0] = base_slot + nbytes;
	r.r[1] = -1;
	err = _kernel_swi(Wimp_SlotSize, &r, &r);

	success = r.r[0] >= base_slot + nbytes;
    }

   /* .... and set memory limit back again */
    if (appspace > memlim)
    {
        r.r[0] = 0;
	r.r[1] = oldmemlim;
	r.r[2] = 0;
	err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
    }

    return success;
}

/* The underlying system asks us to move all flex store up (if n +ve) or
down by n bytes. If you succeed, put the store allocated in *a and return
the size. size >= roundup(n) on successful exit, and will be a multiple of
four. If you fail, return what we can.
If n is -ve, no result is required: success is assumed.
*/

int flexda_budge(int n, void **a)
{
#if 0
    fprintf(stderr, "pre budge: need %d, base %p, used %d, available %d\n", n, flex__base, flex__used, flex__available);
#endif

    if (n >= 0) /* all moving up */
    {
        int roundupn = roundup(n);
//        int roundupn = ROUND_UP_PAGES(n);
        int more = roundupn - (flex__available - flex__used);

      /* try to satisfy the request */
      if (more > 0)   /* ie we have to increase slot */
      {
         int prev = flex__available;

         /* in-line implementation (of flex__wimpslot)  */
         /*  to reduce stack requirements               */
         {
            _kernel_swi_regs r;
            _kernel_oserror  *err;
            int memlim, appspace, oldmemlim;

            /* read memory limit value */
            r.r[0] = 0;
            r.r[1] = 0;
            r.r[2] = 0;
            err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
            oldmemlim = memlim = r.r[1];

            /* read appspace value */
            r.r[0] = 14;  /* Application space */
            r.r[1] = 0;
            r.r[2] = 0;
            err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
            appspace = r.r[1];

            /* set memory limit before slot size change ... */
            if(appspace > memlim)
            {
               r.r[0] = 0;
               r.r[1] = appspace;
               r.r[2] = 0;
               err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
            }

            /* set wimpslot size */
            /*wimpt_noerr(wimp_slotsize(&slot, &dud, &dud));*/
            r.r[0] = ((int)flex__base - 0x8000) + flex__available + more;
            r.r[1] = -1;
            err =_kernel_swi(Wimp_SlotSize, &r, &r);

            flex__available = r.r[0] - ((int)flex__base - 0x8000);

            /* .... and set memory limit back again */
            if (appspace > memlim)
            {
               r.r[0] = 0;
               r.r[1] = oldmemlim;
               r.r[2] = 0;
               err = _kernel_swi(OS_ChangeEnvironment, &r, &r);
            }
         }

         /* if we couldn't satisfy it, still give back what we can, */
         /* _kernel_alloc may be able to use it!!!!!                */
         if (flex__available < prev + more)
             roundupn = flex__available - flex__used; /*all we got*/
      }

        {
            flex__rec *p = FLEX_REC(0);
            while (p < FLEX_REC(flex__used))
            {
                *(p->anchor) = ((char*) (p + 1)) + roundupn;

                p = NEXT_REC(p);
            }
        }

        memmove((char *)flex__base + roundupn, flex__base, flex__used);
        *a = flex__base;
        flex__base = (char *)flex__base + roundupn;
        flex__available -= roundupn;

#if 0
    fprintf(stderr, "post budge: base %p, used %d, available %d\n", flex__base, flex__used, flex__available);
#endif
        return roundupn;
   }
   else
   {
        /* all moving down */
        int roundupn = roundup(-n); /* a +ve value */

        {
            flex__rec *p = FLEX_REC(0);
            while (p < FLEX_REC(flex__used))
            {
                *(p->anchor) = ((char*) (p + 1)) + roundupn;

                p = NEXT_REC(p);
            }
        }

        memmove((char *)flex__base - roundupn, flex__base, flex__used);
        flex__base = (char *)flex__base + roundupn;
        flex__available -= roundupn;
   }

   return(0);
}

/* ----------------------------------------------------------------------------------------- */

static void flex__fail(int i)
{
    werr(0, FLEX_ERR, i);
}

static void flex__check(void)
{
    if (flex__initialised == 0)
	werr(TRUE, msgs_lookup("flex3:Flex not initialised"));

#if 0
   {
      flex__rec *p = FLEX_REC(0),
      			*top = FLEX_REC(flex__used);
      while (p < top)
      {
         if (*(p->anchor) != p + 1) flex__fail(7);

         p = NEXT_REC(p);
      }
   }
#endif
}

/* Tries to get at least n more bytes, raising flex__lim and
   returning TRUE if it can. */

static BOOL flex__ensure(int n)
{
    int limit = flex__used + n;
    if (limit <= flex__available)
	return TRUE;

    limit = ROUND_UP_PAGES(limit);
    if (!flex__adjustsize(limit))
    {
	flex__adjustsize(flex__available);
	return FALSE;
    }

    flex__available = limit;
    return TRUE;
}

/* Gives away memory, lowering flex__lim, if possible. */

static void flex__give(void)
{
    int limit = ROUND_UP_PAGES(flex__used);
    if (limit < flex__available)
    {
	flex__adjustsize(limit);
	flex__available = limit;
    }
}

/*
 * read area name at start of function as d_alloc well may
 * zero it if the flex dynamic area has to be resized
 */

BOOL flexda_alloc(flex_ptr anchor, int n)
{
    flex__rec *p;

    flex__check();

    if (n < 0 || !flex__ensure(sizeof(flex__rec) + roundup(n)))
    {
        *anchor = 0;
        return FALSE;
    }

    p = FLEX_REC(flex__used);
    flex__used += sizeof(flex__rec) + roundup(n);

    p->anchor = anchor;
    p->size = n;

    *anchor = p + 1; /* sizeof(flex__rec), that is */
    return TRUE;
}


/* Move all the anchors from p upwards. This is in anticipation
   of that block of the heap being shifted. */

static void flex__reanchor(flex__rec *p, int by)
{
    flex__rec *top = FLEX_REC(flex__used);

    while (p < top)
    {
	if (*(p->anchor) != p + 1)
	    flex__fail(6);

	*(p->anchor) = ((char*) (p + 1)) + by;

	p = NEXT_REC(p);
    }
}


void flexda_free(flex_ptr anchor)
{
    flex__rec *p, *next;
    int roundsize;

    // in case we've freed the DA before all its constituents
    if (flex__base == NULL)
        return;

    p = ((flex__rec*) *anchor) - 1;
    roundsize = roundup(p->size);
    next = (flex__rec*) (((char*) (p + 1)) + roundsize);

    flex__check();

    if (p->anchor != anchor)
    {
        flex__fail(0);
    }

    flex__reanchor(next, - (sizeof(flex__rec) + roundsize));

    memmove(p, next, (char *)FLEX_REC(flex__used) - (char *)next);

    flex__used -= sizeof(flex__rec) + roundsize;

    flex__give();

    *anchor = 0;
}


int flexda_size(flex_ptr anchor)
{
    flex__rec *p = ((flex__rec*) *anchor) - 1;
    flex__check();

    if (p->anchor != anchor)
    {
        flex__fail(4);
    }

    return(p->size);
}


int flexda_extend(flex_ptr anchor, int newsize)
{
    flex__rec *p = ((flex__rec*) *anchor) - 1;
    return flexda_midextend(anchor, p->size, newsize - p->size);
}


BOOL flexda_midextend(flex_ptr anchor, int at, int by)
{
    flex__rec *p;
    flex__rec *next;

    flex__check();

    p = ((flex__rec*) *anchor) - 1;

    if (p->anchor != anchor)
        flex__fail(1);

    if (at > p->size)
        flex__fail(2);

    if (by < 0 && (-by) > at)
        flex__fail(3);

    if (by == 0)
    {
        /* do nothing */
    }
    else if (by > 0)
    {
	/* extend */

	int growth = roundup(p->size + by) - roundup(p->size);
	/* Amount by which the block will actually grow. */

	if (!flex__ensure(growth))
	    return FALSE;

	next = NEXT_REC(p);

	/* The move has to happen in two parts because the moving
	of objects above is word-aligned, while the extension within
	the object may not be. */

	flex__reanchor(next, growth);

	memmove((char *)next + roundup(growth), next,
	    (char *)FLEX_REC(flex__used) - (char *)next);

	flex__used += growth;

	memmove(((char*) (p + 1)) + at + by, ((char*) (p + 1)) + at, p->size - at);

	p->size += by;
    }
    else
    {
        /* The block shrinks. */
        int shrinkage;

        next = NEXT_REC(p);

        by = -by;												/* a positive value now */
        shrinkage = roundup(p->size) - roundup(p->size - by);	/* a positive value */

        memmove(((char*) (p + 1)) + at - by, ((char*) (p + 1)) + at, p->size - at);

        p->size -= by;

        flex__reanchor(next, - shrinkage);

        memmove((char *)next - shrinkage, next, (char *)FLEX_REC(flex__used) - (char *)next);

        flex__used -= shrinkage;

        flex__give();
    }

    return TRUE;
}

#pragma -s1		/* stack checking off */

int flexda_dont_budge(int n, void **a)
{
    return 0;
    n = n;
    a = a;
}

#pragma -s0     /* stack checks on again */


#if ALLOW_DYNAMIC_AREA

static void free_flex(void)
{
    _swix(OS_DynamicArea, _INR(0,1), DynamicArea_Remove, da_number);
    da_number = 0;
    da_size = 0;
    flex__base = NULL;
}

static BOOL da_adjust(int nbytes)
{
    int bytes_moved;
    _kernel_oserror *e;

    e = _swix(OS_ChangeDynamicArea, _INR(0,1) | _OUT(1),
        da_number, nbytes - da_size, &bytes_moved);

    if (e)
    {
//        if ((e->errnum &~ MoveMemoryErrors_Mask) != MoveMemoryErrors_Val)
        fprintf(stderr, "da: %x %s, request %d bytes size %d\n", e->errnum, e->errmess, nbytes, da_size);

        return FALSE;
    }

    if (nbytes < da_size)
        da_size -= bytes_moved;
    else
	da_size += bytes_moved;

    return TRUE;
}

#endif

void flexda_init(const char *programname)
{
    if (flex__initialised == 0)
    {
        _kernel_oserror *e;

	_swix(OS_ReadMemMapInfo, _OUT(0), &pagesize_minus_1);
	pagesize_minus_1--;
#if 1
        fprintf(stderr, "da: pagesize-1 = %d\n", pagesize_minus_1);
#endif

#if ALLOW_DYNAMIC_AREA
        e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3),
	        DynamicArea_Create,
		-1,				/* number */
		0,
		-1,				/* logical address */
		Area_NotDraggable,		/* flags */
		-1,				/* max size */
		0,				/* -> area handler */
		0,				/* -> workspace */
		programname,
		&da_number,
		&flex__base);

        if (e) fprintf(stderr, "da: %x %s\n", e->errnum, e->errmess);

        if (!e)
        {
	    atexit(free_flex);
	    flex__adjustsize = da_adjust;
#if 1
            fprintf(stderr, "da: area %d base %p\n", da_number, flex__base);
#endif
	}
	else
#endif
	{
	    _swix(Wimp_SlotSize, _INR(0,1)|_OUT(0), -1, -1, &flex__base);

	    flex__base = (char *)0x8000 + (int)flex__base;
	    _kernel_register_slotextend(flexda_budge);

	    flex__adjustsize = wimpslot_adjust;
	}

	flex__available = 0;
	flex__used = 0;
	flex__initialised = 1;

	/* Check that we're in the Wimp environment. */
	{
	    void *a;
	    if (! flexda_alloc(&a, 1))
	        werr(TRUE, msgs_lookup("flex2:Not enough memory, or not within *desktop world."));

	    flexda_free(&a);
	}
    }
}

static int _no_budge_count = 0;

void flexmem_noshift(void)
{
#if ALLOW_DYNAMIC_AREA
    if (da_number)
        return;
#endif

    if (_no_budge_count == 0)
	_kernel_register_slotextend(flexda_dont_budge);

    _no_budge_count++;
}

/* Decrement the count of users that don't want the flex blocks to shift */
void flexmem_shift(void)
{
#if ALLOW_DYNAMIC_AREA
    if (da_number)
        return;
#endif

    if (_no_budge_count)
	_no_budge_count--;

    if (_no_budge_count == 0)
	_kernel_register_slotextend(flexda_budge);
}

/* eof flex_.c */
