/* -*-c-*- */

/* obreak.c */

/* Methods for break (PBREAK and HLINE) objects */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "wimp.h"
#include "bbc.h"

#include "antweb.h"
#include "interface.h"
#include "rid.h"
#include "consts.h"
#include "config.h"
#include "render.h"
#include "rcolours.h"
#include "dfsupport.h"

#include "object.h"
#include "version.h"

void obreak_size(rid_text_item *ti, rid_header *rh, antweb_doc *doc)
{
    ti->width = -1;
    ti->pad = 0;
    ti->max_up = PBREAK_HEIGHT;
    ti->max_down = 0;
}

void obreak_redraw(rid_text_item *ti, rid_header *rh, antweb_doc *doc, int hpos, int bline, object_font_state *fs, wimp_box *g, int ox, int oy)
{
    if (ti->tag == rid_tag_HLINE)
    {
#if ANTI_TWITTER
	render_set_colour(render_colour_LINE_D, doc);
#else
	render_set_colour(render_colour_LINE_L, doc);
#endif
	bbc_move(ox + 4, bline + (PBREAK_HEIGHT >> 1) - 2);
	bbc_drawby(0, frontend_dy);
	bbc_drawby(ti->line->st->fwidth - 10, 0);
	render_set_colour(render_colour_LINE_D, doc);
	bbc_drawby(0, -frontend_dy);
	bbc_drawby(12 - ti->line->st->fwidth, 0);
    }
}

#if 0
void obreak_dispose(rid_text_item *ti, rid_header *rh, antweb_doc *doc)
{
}

char *obreak_click(rid_text_item *ti, rid_header *rh, antweb_doc *doc, wimp_mousestr *m)
{
    return "";			/* Follow links, no fuss at all */
}
#endif

void obreak_astext(rid_text_item *ti, rid_header *rh, FILE *f)
{
    if (ti->tag == rid_tag_HLINE)
	fputs("----------------------------------------------------------------------", f);
}

void obreak_asdraw(rid_text_item *ti, antweb_doc *doc, int fh,
		  int x, int y, int *fileoff, wimp_box *bb)
{
    wimp_paletteword trans, fill;
    wimp_box tb;

    trans.word = ~0;

    x -= ti->line->left_margin;

    tb.x0 = x + 4;
    tb.y0 = y + (PBREAK_HEIGHT >> 1) - 4;
    tb.x1 = x + ti->line->st->fwidth - 8;
    tb.y1 = y + (PBREAK_HEIGHT >> 1) + 4;

    df_stretch_bb(bb, &tb);

    fill = (ti->tag == rid_tag_HLINE) ? render_get_colour(render_colour_PLAIN, doc) : trans;

    if (ti->tag == rid_tag_HLINE)
    {
	df_write_plinth(fh, &tb,
			render_get_colour(render_colour_LINE_L, doc),
			render_get_colour(render_colour_LINE_D, doc),
			fileoff);
    }
    else
    {
	df_write_filled_rect(fh, &tb, trans, trans, fileoff);
    }
}
