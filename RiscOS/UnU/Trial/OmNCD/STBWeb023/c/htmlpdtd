/*		Our Static DTD for HTML
**		-----------------------
**
**	 6 Nov 93	MD	Increased size of img_attr array to make space
**  				for terminator.
*/

/* Implements:
*/

#include "HTMLPDTD.h"

/* 	Entity Names
**	------------
**
**	This table must be matched exactly with ALL the translation tables
*/

static CONST char* entities[HTML_ENTITIES] = {
#if 0
  "AElig",	/* capital AE diphthong (ligature) */
  "Aacute",	/* capital A, acute accent */
  "Acirc",	/* capital A, circumflex accent */
  "Agrave",	/* capital A, grave accent */
  "Aring",	/* capital A, ring */
  "Atilde",	/* capital A, tilde */
  "Auml",	/* capital A, dieresis or umlaut mark */
  "Ccedil",	/* capital C, cedilla */
  "ETH",	/* capital Eth, Icelandic */
  "Eacute",	/* capital E, acute accent */
  "Ecirc",	/* capital E, circumflex accent */
  "Egrave",	/* capital E, grave accent */
  "Euml",	/* capital E, dieresis or umlaut mark */
  "Iacute",	/* capital I, acute accent */
  "Icirc",	/* capital I, circumflex accent */
  "Igrave",	/* capital I, grave accent */
  "Iuml",	/* capital I, dieresis or umlaut mark */
  "Ntilde",	/* capital N, tilde */
  "Oacute",	/* capital O, acute accent */
  "Ocirc",	/* capital O, circumflex accent */
  "Ograve",	/* capital O, grave accent */
  "Oslash",	/* capital O, slash */
  "Otilde",	/* capital O, tilde */
  "Ouml",	/* capital O, dieresis or umlaut mark */
  "THORN",	/* capital THORN, Icelandic */
  "Uacute",	/* capital U, acute accent */
  "Ucirc",	/* capital U, circumflex accent */
  "Ugrave",	/* capital U, grave accent */
  "Uuml",	/* capital U, dieresis or umlaut mark */
  "Yacute",	/* capital Y, acute accent */
  "aacute",	/* small a, acute accent */
  "acirc",	/* small a, circumflex accent */
  "aelig",	/* small ae diphthong (ligature) */
  "agrave",	/* small a, grave accent */
  "amp",	/* ampersand */
  "aring",	/* small a, ring */
  "atilde",	/* small a, tilde */
  "auml",	/* small a, dieresis or umlaut mark */
  "ccedil",	/* small c, cedilla */
  "copy",	/* copyright symbol, @@@@ Netscape extension */
  "eacute",	/* small e, acute accent */
  "ecirc",	/* small e, circumflex accent */
  "egrave",	/* small e, grave accent */
  "eth",	/* small eth, Icelandic */
  "euml",	/* small e, dieresis or umlaut mark */
  "gt",		/* greater than */
  "iacute",	/* small i, acute accent */
  "icirc",	/* small i, circumflex accent */
  "igrave",	/* small i, grave accent */
  "iuml",	/* small i, dieresis or umlaut mark */
  "lt",		/* less than */
  "nbsp",	/* non-break space */
  "ntilde",	/* small n, tilde */
  "oacute",	/* small o, acute accent */
  "ocirc",	/* small o, circumflex accent */
  "ograve",	/* small o, grave accent */
  "oslash",	/* small o, slash */
  "otilde",	/* small o, tilde */
  "ouml",	/* small o, dieresis or umlaut mark */
  "quot",	/* double quote sign  - June 1994 */
  "reg",	/* registered trade mark, @@@@ Netscape extension */
  "szlig",	/* small sharp s, German (sz ligature) */
  "thorn",	/* small thorn, Icelandic */
  "uacute",	/* small u, acute accent */
  "ucirc",	/* small u, circumflex accent */
  "ugrave",	/* small u, grave accent */
  "uuml",	/* small u, dieresis or umlaut mark */
  "yacute",	/* small y, acute accent */
  "yuml",	/* small y, dieresis or umlaut mark */
#else
  "AElig",      /* capital AE diphthong (ligature) */
  "Aacute",     /* capital A, acute accent */
  "Acirc",      /* capital A, circumflex accent */
  "Agrave",     /* capital A, grave accent */
  "Aring",      /* capital A, ring */
  "Atilde",     /* capital A, tilde */
  "Auml",       /* capital A, dieresis or umlaut mark */
  "Ccedil",     /* capital C, cedilla */
  "ETH",        /* capital Eth, Icelandic */
  "Eacute",     /* capital E, acute accent */
  "Ecirc",      /* capital E, circumflex accent */
  "Egrave",     /* capital E, grave accent */
  "Euml",       /* capital E, dieresis or umlaut mark */
  "Iacute",     /* capital I, acute accent */
  "Icirc",      /* capital I, circumflex accent */
  "Igrave",     /* capital I, grave accent */
  "Iuml",       /* capital I, dieresis or umlaut mark */
  "Ntilde",     /* capital N, tilde */
  "Oacute",     /* capital O, acute accent */
  "Ocirc",      /* capital O, circumflex accent */
  "Ograve",     /* capital O, grave accent */
  "Oslash",     /* capital O, slash */
  "Otilde",     /* capital O, tilde */
  "Ouml",       /* capital O, dieresis or umlaut mark */
  "THORN",      /* capital THORN, Icelandic */
  "Uacute",     /* capital U, acute accent */
  "Ucirc",      /* capital U, circumflex accent */
  "Ugrave",     /* capital U, grave accent */
  "Uuml",       /* capital U, dieresis or umlaut mark */
  "Yacute",     /* capital Y, acute accent */
  "aacute",     /* small a, acute accent */
  "acirc",      /* small a, circumflex accent */
  "acute",      /* acute accent */
  "aelig",      /* small ae diphthong (ligature) */
  "agrave",     /* small a, grave accent */
  "amp",       	/* ampersand */
  "aring",      /* small a, ring */
  "atilde",     /* small a, tilde */
  "auml",       /* small a, dieresis or umlaut mark */
  "brvbar",     /* broken (vertical) bar */
  "ccedil",     /* small c, cedilla */
  "cedil",      /* cedilla */
  "cent",       /* cent sign */
  "copy",       /* copyright sign */
  "curren",     /* general currency sign */
  "deg",        /* degree sign */
  "divide",     /* divide sign */
  "eacute",     /* small e, acute accent */
  "ecirc",      /* small e, circumflex accent */
  "egrave",     /* small e, grave accent */
  "eth",        /* small eth, Icelandic */
  "euml",       /* small e, dieresis or umlaut mark */
  "frac12",     /* fraction one-half */
  "frac14",     /* fraction one-quarter */
  "frac34",     /* fraction three-quarters */
  "gt",        	/* greater than */
  "iacute",     /* small i, acute accent */
  "icirc",      /* small i, circumflex accent */
  "iexcl",      /* inverted exclamation mark */
  "igrave",     /* small i, grave accent */
  "iquest",     /* inverted question mark */
  "iuml",       /* small i, dieresis or umlaut mark */
  "laquo",      /* angle quotation mark, left */
  "lt",        	/* greater than */
  "macr",       /* macron */
  "micro",      /* micro sign */
  "middot",     /* middle dot */
  "nbsp",       /* no-break space */
  "not",        /* not sign */
  "ntilde",     /* small n, tilde */
  "oacute",     /* small o, acute accent */
  "ocirc",      /* small o, circumflex accent */
  "ograve",     /* small o, grave accent */
  "ordf",       /* ordinal indicator, feminine */
  "ordm",       /* ordinal indicator, masculine */
  "oslash",     /* small o, slash */
  "otilde",     /* small o, tilde */
  "ouml",       /* small o, dieresis or umlaut mark */
  "para",       /* pilcrow (paragraph sign) */
  "plusmn",     /* plus-or-minus sign */
  "pound",      /* pound sterling sign */
  "quot",       /* double quote sign - June 94 */
  "raquo",      /* angle quotation mark, right */
  "reg",        /* registered sign */
  "sect",       /* section sign */
  "shy",        /* soft hyphen */
  "sup1",       /* superscript one */
  "sup2",       /* superscript two */
  "sup3",       /* superscript three */
  "szlig",      /* small sharp s, German (sz ligature) */
  "thorn",      /* small thorn, Icelandic */
  "times",      /* multiply sign */
  "uacute",     /* small u, acute accent */
  "ucirc",      /* small u, circumflex accent */
  "ugrave",     /* small u, grave accent */
  "uml",        /* umlaut (dieresis) */
  "uuml",       /* small u, dieresis or umlaut mark */
  "yacute",     /* small y, acute accent */
  "yen",        /* yen sign */
  "yuml",       /* small y, dieresis or umlaut mark */
#endif
};



/*		Attribute Lists
**		---------------
**
**	Lists must be in alphatbetical order by attribute name
**	The tag elements contain the number of attributes
*/
static attr no_attr[1] =
	{{ 0 }};

static attr a_attr[HTML_A_ATTRIBUTES+1] = {		/* Anchor attributes */
	{ "EFFECT" },
	{ "HREF"},
	{ "ID" },
	{ "METHODS" },
	{ "NAME" },			/* Should be ID */
	{ "PRINT" },
	{ "REL" },			/* Relationship */
	{ "REV" },			/* Reverse relationship */
	{ "SHAPE" },
	{ "TARGET"},
	{ "TITLE" },
	{ 0 }	/* Terminate list */
};

static attr area_attr[HTML_AREA_ATTRIBUTES+1] = {		/* AREA attributes */
	{ "ALT"},
	{ "COORDS"},
	{ "HREF"},
	{ "NOHREF"},
	{ "SHAPE"},
	{ "TARGET"},
	{ 0 }	/* Terminate list */
};

static attr base_attr[] = {		/* BASE attributes */
	{ "HREF"},
	{ "TARGET"},
	{ 0 }	/* Terminate list */
};

static attr body_attr[] = {		/* BODY attributes */
	{ "ALINK"},
	{ "BACKGROUND"},
	{ "BGCOLOR"},
	{ "LINK"},
	{ "TEXT"},
	{ "VLINK"},
	{ 0 }	/* Terminate list */
};


static attr changed_attr[] = {
	{ "ID" },
	{ "IDREF" },
	{ 0 }	/* terminate list */
};

static attr caption_attr[] = {
        { "ALIGN" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "STYLE" },
        { 0 }
};

static attr col_attr[] = {
        { "ALIGN" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "SPAN" },
        { "STYLE" },
        { "VALIGN" },
        { "WIDTH" },
        { 0 }
};

static attr colgroup_attr[] = {
        { "ALIGN" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "SPAN" },
        { "STYLE" },
        { "VALIGN" },
        { "WIDTH" },
        { 0 }
};

static attr fig_attr[] = {		/* Figures */
	{ "ALIGN" },
	{ "ID" },
	{ "INDEX" },
	{ "ISMAP" },				/* @@@ NO! */
	{ "LANG" },
	{ "SRC" },
	{ 0 }	/* terminate list */
};

static attr font_attr[] = {		/* For FONT and BASEFONT */
	{ "SIZE" },
	{ 0 }	/* terminate list */
};

static attr form_attr[] = {		/* General, for many things */
	{ "ACTION" },
	{ "ID" },
	{ "INDEX" },
	{ "LANG" },
	{ "METHOD" },
	{ "TARGET"},
	{ 0 }	/* terminate list */
};

static attr frame_attr[HTML_FRAME_ATTRIBUTES+1] = {		/* FRAME attributes */
	{ "MARGINHEIGHT"},
	{ "MARGINWIDTH"},
	{ "NAME"},
	{ "NORESIZE"},
	{ "SCROLLING"},
	{ "SRC"},
	{ 0 }	/* Terminate list */
};

static attr frameset_attr[HTML_FRAMESET_ATTRIBUTES+1] = {		/* FRAMESET attributes */
	{ "COLS"},
	{ "ROWS"},
	{ 0 }	/* Terminate list */
};

static attr gen_attr[] = {		/* General, for many things */
	{ "ID" },
	{ "INDEX" },
	{ "LANG" },
	{ 0 }	/* terminate list */
};

static attr htmlplus_attr[] = {		/* wrapper HTMLPLUS */
	{ "FORMS" },
	{ "VERSION" },
	{ 0 }				/* terminate list */
};

static attr id_attr[2] = {
	{ "ID" },
	{ 0 }				/* terminate list */
};

static attr image_attr[HTML_IMAGE_ATTRIBUTES+1] = {	/* Image attributes */
	{ "ALIGN" },
	{ "ISMAP"},			/* Use HTTP SpaceJump instead */
	{ "LANG" },
	{ "SEETHRU"},
	{ "SRC"},
	{ 0 }	/* Terminate list */
};

static attr img_attr[HTML_IMG_ATTRIBUTES+1] = {	/* IMG attributes */
	{ "ALIGN" },
	{ "ALT" },
	{ "BORDER" },
	{ "HEIGHT" },
	{ "HSPACE" },
	{ "ISMAP"},			/* Use HTTP SpaceJump instead */
	{ "SEETHRU"},
	{ "SRC"},
	{ "USEMAP"},
	{ "VSPACE"},
	{ "WIDTH" },
	{ 0 }	/* Terminate list */
};

static attr index_attr[] = {
	{ "PROMPT" },
	{ 0 }	/* Terminate list */
};

static attr input_attr[HTML_INPUT_ATTRIBUTES+1] = {
	{ "ALIGN" },
	{ "CHECKED" },
	{ "DISABLED" },
	{ "ERROR" },
	{ "MAXLEN" },
	{ "MIN" },
	{ "NAME" },
	{ "SIZE" },
	{ "SRC" },
	{ "TYPE" },
	{ "VALUE" },
	{ "0" }
};

static attr l_attr[] = {
	{ "ALIGN"},
	{ "ID" },
	{ "LANG" },
	{ "INDEX" },
	{ 0 }	/* Terminate list */
};

static attr li_attr[] = {
	{ "ID" },
	{ "LANG" },
	{ "INDEX" },
	{ "SRC"},
	{ "TYPE" },
	{ "VALUE" },
	{ 0 }	/* Terminate list */
};

static attr link_attr[HTML_LINK_ATTRIBUTES+1] = {	/* link attributes */
	{ "HREF"},
	{ "IDREF" },
	{ "METHODS" },
	{ "REL" },			/* Relationship */
	{ "REV" },			/* Reverse relationship */
	{ 0 }	/* Terminate list */
};

static attr list_attr[] = {
	{ "COMPACT"},
	{ "ID" },
	{ "INDEX" },
	{ "LANG" },
	{ "START" },
	{ "TYPE" },
	{ 0 }	/* Terminate list */
};

static attr glossary_attr[HTML_DL_ATTRIBUTES+1] = {
	{ "ID" },
	{ "COMPACT " },
	{ "INDEX" },
	{ 0 }	/* Terminate list */
};

static attr map_attr[HTML_MAP_ATTRIBUTES+1] = {
	{ "NAME" },
	{ 0 }	/* Terminate list */
};

static attr meta_attr[] = {
	{ "CONTENT" },
	{ "HTTP-EQUIV" },
	{ "NAME" },
	{ 0 }	/* Terminate list */
};

static attr nextid_attr[HTML_NEXTID_ATTRIBUTES+1] = {
	{ "N" },
	{ 0 }	/* Terminate list */
};

static attr note_attr[HTML_NOTE_ATTRIBUTES+1] = {	/* Footnotes etc etc */
	{ "ID" },
	{ "INDEX" },
	{ "LANG" },
	{ "ROLE" },
	{ 0 }	/* terminate list */
};

static attr option_attr[HTML_OPTION_ATTRIBUTES+1] = {
	{ "DISABLED" },
	{ "LANG" },
	{ "SELECTED" },
	{ "VALUE" },
	{ 0 }
};

#ifdef OLD_CODE
 static attr pre_attr[HTML_PRE_ATTRIBUTES+1] = {
	{ "WIDTH" },
	{ 0 }	/* Terminate list */
};
#endif

static attr render_attr[HTML_RENDER_ATTRIBUTES+1] = {
	{ "STYLE" },
	{ "TAG" },
	{ 0 }	/* Terminate list */
};

static attr select_attr[HTML_SELECT_ATTRIBUTES+1] = {
	{ "ERROR" },
	{ "LANG" },
	{ "MULTIPLE" },
	{ "NAME" },
	{ "SIZE" },
	{ 0 },
};

static attr script_attr[HTML_SCRIPT_ATTRIBUTES+1] = {
	{ "LANGUAGE" },
	{ 0 },
};

static attr tab_attr[HTML_TAB_ATTRIBUTES+1] = {
	{ "ALIGN" },
	{ "AT" },
	{ 0 }
};

static attr table_attr[] = {
        { "ALIGN" },
        { "BORDER" },
        { "CELLPADDING" },
        { "CELLSPACING" },
        { "CLASS" },
        { "COLS" },
        { "DIR" },
        { "FRAME" },
        { "ID" },
        { "LANG" },
        { "RULES" },
        { "STYLE" },
        { "WIDTH" },
        { 0 }
};

static attr tbody_attr[] = {
        { "ALIGN" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "STYLE" },
        { "VALIGN" },
        { 0 },
};

static attr td_attr[] = {
        { "ALIGN" },
        { "AXES" },
        { "AXIS" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "COLSPAN" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "NOWRAP" },
        { "ROWSPAN" },
        { "STYLE" },
        { "VALIGN" },
        { 0 }
};

static attr textarea_attr[HTML_TEXTAREA_ATTRIBUTES+1] = {
	{ "COLS" },
	{ "DISABLED" },
	{ "ERROR" },
	{ "LANG" },
	{ "NAME" },
	{ "ROWS" },
	{ 0 }
};

static attr tfoot_attr[] = {
        { "ALIGN" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "STYLE" },
        { "VALIGN" },
        { 0 }
};

static attr th_attr[] = {
        { "ALIGN" },
        { "AXES" },
        { "AXIS" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "COLSPAN" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "NOWRAP" },
        { "ROWSPAN" },
        { "STYLE" },
        { "VALIGN" },
        { 0 }
};

static attr thead_attr[] = {
        { "ALIGN" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "STYLE" },
        { "VALIGN" },
        { 0 }
};

static attr tr_attr[] = {
        { "ALIGN" },
        { "CHAR" },
        { "CHAROFF" },
        { "CLASS" },
        { "DIR" },
        { "ID" },
        { "LANG" },
        { "STYLE" },
        { "VALIGN" },
        { 0 }
};

static attr ul_attr[HTML_UL_ATTRIBUTES+1] = {
	{ "COMPACT" },
	{ "ID" },
	{ "INDEX" },
	{ "LANG" },
	{ "PLAIN" },
	{ "TYPE" },
	{ "WRAP" },
	{ 0 }
};


/*	Elements
**	--------
**
**	Must match definitions in HTMLPDTD.html!
**	Must be in alphabetical order.
**
**	HTML is included to allow HTML documents to be parsed as a subset.
**	TITLE is changed to type SGML_MIXED so it get parsed as well
**	Henrik 08/03-94
**
**    Name, 	Attributes, 		content
*/
static HTTag tags[HTMLP_ELEMENTS] = {
    { "A"	, 0,	HTML_A_ATTRIBUTES,	SGML_MIXED },
    { "ABBREV"  , 0,     HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "ABSTRACT" , 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "ACRONYM"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "ADDED"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "ADDRESS"	, 0,	0,			SGML_MIXED },
    { "AREA"	, 0,	HTML_AREA_ATTRIBUTES,	SGML_EMPTY },
    { "ARG"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "B"	, 0,	0,			SGML_MIXED },
    { "BASE"	, 0,	HTML_BASE_ATTRIBUTES,	SGML_MIXED },
    { "BASEFONT", 0,	HTML_FONT_ATTRIBUTES,	SGML_EMPTY },
    { "BIG"     , 0,	0,	                SGML_MIXED },
    { "BLOCKQUOTE", 0,	0,			SGML_MIXED },
    { "BODY"	, 0,	HTML_BODY_ATTRIBUTES,	SGML_MIXED },
    { "BOX"	, 0,	0,			SGML_MIXED },
    { "BR"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_EMPTY },
    { "BYLINE"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "CAPTION"	, 0,	HTML_CAPTION_ATTRIBUTES,SGML_MIXED },
    { "CENTER"	, 0,	0,			SGML_MIXED },
    { "CHANGED"	, 0,    HTML_CHANGED_ATTRIBUTES, SGML_MIXED },
    { "CITE"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "CMD"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "CODE"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "COL"     , 0,    HTML_COL_ATTRIBUTES,    SGML_EMPTY },
    { "COLGROUP", 0,	HTML_COLGROUP_ATTRIBUTES, SGML_EMPTY },
    { "COMMENT"	, 0,	0,			SGML_MIXED },
    { "DD"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_EMPTY },
    { "DFN"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "DIR"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "DL"	, 0,    HTML_DL_ATTRIBUTES,	SGML_MIXED },
    { "DT"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_EMPTY },
    { "EM"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "FIG" 	, 0,	HTML_FIG_ATTRIBUTES,	SGML_MIXED },
    { "FONT"	, 0,	HTML_FONT_ATTRIBUTES,	SGML_MIXED },
    { "FOOTNOTE" , 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "FORM" 	, 0,	HTML_FORM_ATTRIBUTES,	SGML_MIXED },
    { "FRAME" , 0,	HTML_FRAME_ATTRIBUTES,  SGML_EMPTY },
    { "FRAMESET" , 0,	HTML_FRAMESET_ATTRIBUTES, SGML_MIXED },
    { "H1"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "H2"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "H3"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "H4"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "H5"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "H6"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "H7"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "HEAD"	, 0,	0,			SGML_MIXED },
    { "HR"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_EMPTY },
    { "HTML"	, 0,	0,			SGML_MIXED },  /* */
    { "HTMLPLUS", 0,    HTML_HTMLPLUS_ATTRIBUTES, SGML_MIXED },
    { "I"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "IMAGE"	, 0,	HTML_IMAGE_ATTRIBUTES,	SGML_EMPTY },
    { "IMG"     , 0,	HTML_IMG_ATTRIBUTES,	SGML_EMPTY },
    { "INPUT"	, 0,	HTML_INPUT_ATTRIBUTES,	SGML_EMPTY },
    { "ISINDEX" , 0,	HTML_INDEX_ATTRIBUTES,	SGML_EMPTY },
    { "KBD"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "L"	, 0,	HTML_L_ATTRIBUTES,	SGML_MIXED },
    { "LI"	, 0,	HTML_LI_ATTRIBUTES,	SGML_EMPTY },
    { "LINK"	, 0,	HTML_LINK_ATTRIBUTES,	SGML_EMPTY },
    { "LISTING"	, 0,	0,			SGML_LITERAL },
    { "LIT"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "MAP"	, 0,	HTML_MAP_ATTRIBUTES,	SGML_MIXED },
    { "MARGIN"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "MATH"	, 0,	HTML_ID_ATTRIBUTE,	SGML_MIXED },
    { "MENU"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "META"	, 0,	HTML_META_ATTRIBUTES,	SGML_EMPTY },
    { "NEXTID"  , 0,	1,			SGML_EMPTY },
    { "NOFRAME" , 0,	0,                      SGML_MIXED },
    { "NOFRAMES", 0,	0,                      SGML_MIXED },
    { "NOTE"	, 0,	HTML_NOTE_ATTRIBUTES,	SGML_EMPTY },
    { "OL"	, 0,	HTML_LIST_ATTRIBUTES,	SGML_MIXED },
    { "OPTION"	, 0,	HTML_OPTION_ATTRIBUTES,	SGML_EMPTY },/*Mixed?*/
    { "OVER"	, 0,	0,			SGML_MIXED },
    { "P"	, 0,	HTML_L_ATTRIBUTES,	SGML_EMPTY },
    { "PERSON"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "PLAINTEXT",0,	0,			SGML_LITERAL },
    { "PRE"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "Q"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "QUOTE"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "RENDER"	, 0,	HTML_RENDER_ATTRIBUTES,	SGML_MIXED },
    { "REMOVED"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "S"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "SAMP"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "SCRIPT"	, 0,	HTML_SCRIPT_ATTRIBUTES,	SGML_MIXED },
    { "SELECT"	, 0,	HTML_SELECT_ATTRIBUTES,	SGML_MIXED },
    { "SMALL"   , 0,	0,	                SGML_MIXED },
    { "STRONG"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "SUB"	, 0,	0,	                SGML_MIXED },
    { "SUP"	, 0,	0,	                SGML_MIXED },
    { "TAB"	, 0,	HTML_TAB_ATTRIBUTES,	SGML_EMPTY },
    { "TABLE"	, 0,	HTML_TABLE_ATTRIBUTES,	SGML_MIXED },
    { "TBODY"	, 0,	HTML_TBODY_ATTRIBUTES,	SGML_EMPTY },
    { "TD"	, 0,	HTML_TD_ATTRIBUTES,	SGML_EMPTY },
    { "TEXTAREA", 0,    HTML_TEXTAREA_ATTRIBUTES,SGML_MIXED},
    { "TFOOT"	, 0,	HTML_TFOOT_ATTRIBUTES,	SGML_EMPTY },
    { "TH"	, 0,	HTML_TH_ATTRIBUTES,	SGML_EMPTY },
    { "THEAD"	, 0,	HTML_THEAD_ATTRIBUTES,	SGML_EMPTY },
    { "TITLE"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "TR"	, 0,	HTML_TD_ATTRIBUTES,	SGML_EMPTY },
    { "TT"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "U"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "UL"	, 0,	HTML_UL_ATTRIBUTES,	SGML_MIXED },
    { "VAR"	, 0,	HTML_GEN_ATTRIBUTES,	SGML_MIXED },
    { "XMP"	, 0,	0,			SGML_LITERAL }
};

#ifdef OLD_CODE
PUBLIC CONST SGML_dtd HTML_dtd = {
	tags,
	HTML_ELEMENTS,
	entities,
	sizeof(entities)/sizeof(char**)
};
#endif

PUBLIC SGML_dtd HTMLP_dtd = {
	0 /* tags */,
	HTMLP_ELEMENTS,
	0 /* entities */,
	sizeof(entities)/sizeof(char**)
};

void HTMLDTDTableFixup(void)
{
    HTTag *tp = tags;
    tp[HTML_A].attributes = a_attr;
    tp[HTML_ABBREV].attributes = gen_attr;
    tp[HTML_ABSTRACT].attributes = gen_attr;
    tp[HTML_ACRONYM].attributes = gen_attr;
    tp[HTML_ADDED].attributes = gen_attr;
    tp[HTML_ADDRESS].attributes = no_attr;
    tp[HTML_AREA].attributes = area_attr;
    tp[HTML_ARG].attributes = gen_attr;
    tp[HTML_B].attributes = no_attr;
    tp[HTML_BASE].attributes = base_attr;
    tp[HTML_BASEFONT].attributes = font_attr;
    tp[HTML_BLOCKQUOTE].attributes = no_attr;
    tp[HTML_BODY].attributes = body_attr;
    tp[HTML_BOX].attributes = no_attr;
    tp[HTML_BR].attributes = gen_attr;
    tp[HTML_BYLINE].attributes = gen_attr;
    tp[HTML_CAPTION].attributes = gen_attr;
    tp[HTML_CENTER].attributes = no_attr;
    tp[HTML_CHANGED].attributes = changed_attr;
    tp[HTML_CITE].attributes = gen_attr;
    tp[HTML_CMD].attributes = gen_attr;
    tp[HTML_CODE].attributes = gen_attr;
    tp[HTML_COL].attributes = col_attr;
    tp[HTML_COLGROUP].attributes = colgroup_attr;
    tp[HTML_COMMENT].attributes = no_attr;
    tp[HTML_DD].attributes = gen_attr;
    tp[HTML_DFN].attributes = gen_attr;
    tp[HTML_DIR].attributes = gen_attr;
    tp[HTML_DL].attributes = glossary_attr;
    tp[HTML_DT].attributes = gen_attr;
    tp[HTML_EM].attributes = gen_attr;
    tp[HTML_FIG].attributes = fig_attr;
    tp[HTML_FONT].attributes = font_attr;
    tp[HTML_FOOTNOTE].attributes = gen_attr;
    tp[HTML_FORM].attributes = form_attr;
    tp[HTML_FRAME].attributes = frame_attr;
    tp[HTML_FRAMESET].attributes = frameset_attr;
    tp[HTML_H1].attributes = gen_attr;
    tp[HTML_H2].attributes = gen_attr;
    tp[HTML_H3].attributes = gen_attr;
    tp[HTML_H4].attributes = gen_attr;
    tp[HTML_H5].attributes = gen_attr;
    tp[HTML_H6].attributes = gen_attr;
    tp[HTML_H7].attributes = gen_attr;
    tp[HTML_HEAD].attributes = no_attr;
    tp[HTML_HR].attributes = gen_attr;
    tp[HTML_HTML].attributes = no_attr;
    tp[HTML_HTMLPLUS].attributes = htmlplus_attr;
    tp[HTML_I].attributes = gen_attr;
    tp[HTML_IMAGE].attributes = image_attr;
    tp[HTML_IMG].attributes = img_attr;
    tp[HTML_INPUT].attributes = input_attr;
    tp[HTML_ISINDEX].attributes = index_attr;
    tp[HTML_KBD].attributes = gen_attr;
    tp[HTML_L].attributes = l_attr;
    tp[HTML_LI].attributes = li_attr;
    tp[HTML_LINK].attributes = link_attr;
    tp[HTML_LISTING].attributes = no_attr;
    tp[HTML_LIT].attributes = gen_attr;
    tp[HTML_MAP].attributes = map_attr;
    tp[HTML_MARGIN].attributes = gen_attr;
    tp[HTML_MATH].attributes = id_attr;
    tp[HTML_MENU].attributes = gen_attr;
    tp[HTML_META].attributes = meta_attr;
    tp[HTML_NEXTID].attributes = nextid_attr;
    tp[HTML_NOFRAME].attributes = no_attr;
    tp[HTML_NOFRAMES].attributes = no_attr;
    tp[HTML_NOTE].attributes = note_attr;
    tp[HTML_OL].attributes = list_attr;
    tp[HTML_OPTION].attributes = option_attr;
    tp[HTML_OVER].attributes = no_attr;
    tp[HTML_P].attributes = l_attr;
    tp[HTML_PERSON].attributes = gen_attr;
    tp[HTML_PLAINTEXT].attributes = no_attr;
    tp[HTML_PRE].attributes = gen_attr;
    tp[HTML_Q].attributes = gen_attr;
    tp[HTML_QUOTE].attributes = gen_attr;
    tp[HTML_RENDER].attributes = render_attr;
    tp[HTML_REMOVED].attributes = gen_attr;
    tp[HTML_S].attributes = gen_attr;
    tp[HTML_SAMP].attributes = gen_attr;
    tp[HTML_SCRIPT].attributes = script_attr;
    tp[HTML_SELECT].attributes = select_attr;
    tp[HTML_STRONG].attributes = gen_attr;
    tp[HTML_SUB].attributes = gen_attr;
    tp[HTML_SUP].attributes = gen_attr;
    tp[HTML_TAB].attributes = tab_attr;
    tp[HTML_TABLE].attributes = table_attr;
    tp[HTML_TBODY].attributes = tbody_attr;
    tp[HTML_TD].attributes = td_attr;
    tp[HTML_TEXTAREA].attributes = textarea_attr;
    tp[HTML_TFOOT].attributes = tfoot_attr;
    tp[HTML_TH].attributes = th_attr;
    tp[HTML_THEAD].attributes = thead_attr;
    tp[HTML_TITLE].attributes = gen_attr;
    tp[HTML_TR].attributes = td_attr;
    tp[HTML_TT].attributes = gen_attr;
    tp[HTML_U].attributes = gen_attr;
    tp[HTML_UL].attributes = ul_attr;
    tp[HTML_VAR].attributes = gen_attr;
    tp[HTML_XMP].attributes = no_attr;

    HTMLP_dtd.tags = tags;
    HTMLP_dtd.entity_names = entities;
}

/*	Utility Routine: useful for people building HTML objects */

/*	Start anchor element
**	--------------------
**
**	It is kinda convenient to have a particulr routine for
**	starting an anchor element, as everything else for HTML is
**	simple anyway.
*/
struct _HTStructured {
    HTStructuredClass * isa;
	/* ... */
};

PUBLIC void HTStartAnchor ARGS3(HTStructured *, obj,
		CONST char *,  name,
		CONST char *,  href)
{
    BOOL		present[HTML_A_ATTRIBUTES];
    CONST char*		value[HTML_A_ATTRIBUTES];

    {
    	int i;
    	for(i=0; i<HTML_A_ATTRIBUTES; i++)
	    present[i] = NO;
    }
    if (name) {
    	present[HTML_A_NAME] = YES;
	value[HTML_A_NAME] = name;
    }
    if (href) {
        present[HTML_A_HREF] = YES;
        value[HTML_A_HREF] = href;
    }

    (*obj->isa->start_element)(obj, HTML_A , present, value);

}

/*	Utility Routine: useful for people building HTML objects */

/*	Put image element
**	--------------------
**
**	Hopefully as usefull as HTStartAnchor. Henrik 23/03-94
*/
PUBLIC void HTMLPutImg ARGS4(HTStructured *, obj,
			     CONST char *, src,
			     CONST char *, alt,
			     CONST char *, align)
{
    BOOL		present[HTML_IMG_ATTRIBUTES];
    CONST char*		value[HTML_IMG_ATTRIBUTES];

    {
    	int i;
    	for(i=0; i<HTML_IMG_ATTRIBUTES; i++)
	    present[i] = NO;
    }
    if (src) {
    	present[HTML_IMG_SRC] = YES;
	value[HTML_IMG_SRC] = src;
    }
    if (alt) {
        present[HTML_IMG_ALT] = YES;
        value[HTML_IMG_ALT] = alt;
    }
    if (align) {
        present[HTML_IMG_ALIGN] = YES;
        value[HTML_IMG_ALIGN] = align;
    }
    (*obj->isa->start_element)(obj, HTML_IMG , present, value);
    /* (*obj->isa->end_element)(obj, HTML_IMG); */
}


PUBLIC void HTNextID ARGS2(HTStructured *, obj,
		CONST char *,	next_one)
{
    BOOL		present[HTML_NEXTID_ATTRIBUTES];
    CONST char*		value[HTML_NEXTID_ATTRIBUTES];
    {
    	int i;
    	for(i=0; i<HTML_NEXTID_ATTRIBUTES; i++)
	    present[i] = NO;
    }
    present[HTML_NEXTID_N] = YES;
    value[HTML_NEXTID_N] = next_one;

    (*obj->isa->start_element)(obj, HTML_NEXTID , present, value);

}



