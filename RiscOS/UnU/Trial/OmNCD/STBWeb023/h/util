/* -*-c-*- */

/* util.h */

/* FREE is a macro that does a safe free on a pointer */
/* The item remains a single (now compound) statement but care should be taken with dangling elses */
#define FREE(x)	if (x) mm_free(x)

/* definitely non-null string */
#define strsafe(s) ((s) ? (s) : "")

extern char *strdup(const char *s);
extern char *strndup(const char *s, int maxlen);

/* Copy a string without overrunning but make sure it is terminated */
void strncpysafe(char *s1, char *s2, int n);
/* Cat two strings safely, given the length of the desination buffer */
void strlencat(char *s1, char *s2, int len);

unsigned int string_hash(char *s);

int suffix_to_file_type(char *suffix);
int file_type(char *fname);
int set_file_type(char *fname, int ft);
extern int path_is_directory(char *path);

char *reduce_file_name(char *fname, char *temp, char *pathname);

void uuencode(char *in, char *out, int out_len);
void uudecode(char *bufcoded, unsigned char *bufplain, int outbufsize);

void *rma_alloc(size_t n);
void rma_free(void *p);

/* Increment the count of users that don't want the flex blocks to shift */
void flexmem_noshift(void);
/* Decrement the count of users that don't want the flex blocks to shift */
void flexmem_shift(void);

// wait for all mouse buttons to be released
extern void wait_for_release(int max);

extern void parse_http_header(char *header_data, const char *tags[], char *values[]);

extern char *skip_space(const char *s);


