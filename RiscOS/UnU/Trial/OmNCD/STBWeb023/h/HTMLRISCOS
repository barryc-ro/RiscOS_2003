/* -*-c-*- */

/* Generate my RISC OS internal format from an HTML stream */

#ifndef HTMLRISCOS_H
#define HTMLRISCOS_H

#include "HTUtils.h"
#include "HTMLPDTD.h"

#define DTD HTMLP_dtd

#include "HTStream.h"

#ifndef __rid_h
#include "rid.h"
#endif

/*****************************************************************************

These bits used to be private to htmlriscos.c - they have been moved
here as a result of creating a seperate tables.c file to keep the
size of htmlriscos.c sensible (3k+ lines is a cumbersome file).

*/

#ifndef PARSE_DEBUG
#define PARSE_DEBUG 0
#endif


#define CAREFUL 1
#define STRICT_SPACE 0

#define BUFFER_SIZE     1024    /* No item should be this big */
#define MAX_TITLE_LEN   128     /* The HTML spec says 80 is about right */

#define MAX_NESTING     20      /* In the HTML spec */

#define FORCE_BREAK     0x01    /* After commands that break the line */
#define STRIP_SPACE     0x02    /* After commands that swallow white space */
#define HARD_BREAK      0x04    /* After the end of a preformatted line of text */

#define STK_STATE_PRE   0x01    /* Use 'PRE' rules for space striping */
#define STK_STATE_LINES 0x02    /* Take text as lines rather than words */

#define V_OR_NULL(ent)          (present[(ent)] ? value[(ent)] : NULL)

typedef struct _stack_element {
    ROStyle     style, def_style;
    int         state;
    int         tag_number;
    int         list_no;
} stack_element;

struct _HTStream {
    const HTStreamClass *               isa;
    HTStream *                          target;
#if 0
    HTStreamClass                       targetClass;       /* COPY for speed */
#endif
};

struct _HTStructured {
    const HTStructuredClass *   isa;
    const SGML_dtd *            dtd;
    rid_header *                rh;
    char *			write_ptr;
    int				white_count;	/* How much white have we had? */
    int				strip_space;
    rid_aref_item *		aref;		/* The current anchor, or NULL if we don't have one */
    rid_form_item *		form;		/* The current form the we are in, or NULL */
    rid_table_item *            table;          /* The current table we are in, or NULL */
    char                        align_char;     /* For <BLAH ALIGN=CHAR> word splitting */

    stack_element 		stack[MAX_NESTING];
    stack_element 		*sp;		/* Style stack pointer */
#if 1
    rid_frame *                 frameset;
#else
    rid_frame *                 frameset_stack[MAX_NESTING];  /* current frameset stack */
    int                         frameset;
#endif
    int                         noframe;
    char *                      basetarget;         /* current base target or null */

    rid_map_item *              map;

    char			buf[BUFFER_SIZE]; /* Keep this last so that refs to struct items are small offsets */
};

typedef struct { char *str; int tag; } strtag;

/*****************************************************************************/

extern HTStructured * HTMLToRiscos PARAMS((HTStream * output));


/*****************************************************************************/

/* The major routines corresponding to top level tags */

extern unsigned char table_start_table(HTStructured *me,
                              const char *halign,
                              const char *border,
                              const char *cellpadding,
                              const char *cellspacing,
                              const char *class,
                              const char *cols,
                              const char *dir,
                              const char *frame,
                              const char *id,
                              const char *lang,
                              const char *rules,
                              const char *style,
                              const char *userwidth
                             );

extern void table_end_table(HTStructured *me);

extern unsigned char table_start_caption(HTStructured *me,
                                const char *calign,
                                const char *class,
                                const char *dir,
                                const char *id,
                                const char *lang,
                                const char *style
                               );

extern void table_start_col(HTStructured *me,
                            const char *halign,
                            const char *ch,
                            const char *choff,
                            const char *class,
                            const char *dir,
                            const char *id,
                            const char *lang,
                            const char *span,
                            const char *style,
                            const char *valign,
                            const char *width
                           );

extern void table_start_colgroup(HTStructured *me,
                               const char *halign,
                               const char *ch,
                               const char *choff,
                               const char *class,
                               const char *dir,
                               const char *id,
                               const char *lang,
                               const char *span,
                               const char *style,
                               const char *valign,
                               const char *width
                              );

extern void table_end_colgroup(HTStructured *me);

extern void table_start_rowgroup(HTStructured *me,
                                 int element_number,
                                 const char *halign,
                                 const char *ch,
                                 const char *choff,
                                 const char *class,
                                 const char *dir,
                                 const char *id,
                                 const char *lang,
                                 const char *style,
                                 const char *valign
                                );

extern void table_start_tr(HTStructured *me,
                           const char *halign,
                           const char *ch,
                           const char *choff,
                           const char *class,
                           const char *dir,
                           const char *id,
                           const char *lang,
                           const char *style,
                           const char *valign
                          );

extern unsigned char table_start_th_td(HTStructured *me,
                              int element_number,
                              const char *halign,
                              const char *axes,
                              const char *axis,
                              const char *ch,
                              const char *choff,
                              const char *class,
                              const char *colspan,
                              const char *dir,
                              const char *id,
                              const char *lang,
                              int nowrap,
                              const char *rowspan,
                              const char *style,
                              const char *valign
                             );

/*****************************************************************************/

extern void parse_frames(int yes);

#endif
