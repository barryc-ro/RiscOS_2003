
Frames
------

Introduction
------------

Frames are a way for a browser to divide its work area up into a number of
independantly scrollable regions. Each region displays a different HTML file
and is entirely separate from each other - no text flowing occurs between 
them.

The addition of two separate new features, window naming and targetting 
(whereby the browser can be instructed to load a new file in a given window)
completes the frame implementation allowing clicks in one frame to cause file
loading in another.

Implementation issues
---------------------

To decide how to implement frames we need to consider the impact on both
STBWeb and Fresco.

The design of frames very simply maps onto the concept of window panes.
The work area of the main window, that would normally display the file,
becomes merely a holder or size definition for the frame set. Each frame
could be a separate wimp window, if necessary with its own scroll bars,
in a fixed position within this window (as with the current tool and 
status bars in Fresco).

However this model will not necessarily be as good for STBWeb due to 
limitations of the wimp on TVs (ie wimp gadgets are not anti-twitterable).
Thus we can use wimp windows but we would have to provide our own scrolling
mechanisms.

Aside:
  Generally speaking we need to avoid wimp gadgets (window furniture and 
  menus) as they are non-anti-twitterable. So we could really do with some
  useful functions to mimic these generally.

Whether we mimic wimp windows or use the wimp directly we still have to
fix up stbweb to handle multiple views... all in all going back to wimp
windows would seem to be a useful idea - even if we do have to provide our
own scrollbars.

Internals
---------

Currently the frontend and backend have a structure per document which
is private to them with various functions to get information from them.

The frontend has an 'fe_view' (frontend_view internally)
The backend has a 'be_doc' (antweb_doc internally)

There is a simple one to one mapping of structure to HTML file.

With frames it gets more difficult. A be_doc may contain references to 
other HTML files (which may contain references to more again). We need to
decide whether to give each frame an fe_view of its own - with a distinction
between a parent fe_view and a frame fe_view - or to keep one fe_view for
the top level and have the backend sort out all the distinctions. Which one
is preferable may depend on whether we use wimp windows for the frames
or not.

Generally speaking it would seem cleaner to keep this mapping and extend 
both ends to realise that there maybe more windows involved.

Targetting
----------

The backend knows about targetting and will have to handle this.

We can extend frontend_open_url to include a window name parameter.

The backend will include this when opening a file. If null then the
parent view is used (and all the frames are deleted) - otherwise the
specific frame is used and the appropriate be_doc passed to 
backend_open_url.

The fe_view passed is that of the frame in which the click happened. This
may be the frame used (if target=_self) or the frontend may have to
navigate its frame tree and decide which view (and therefore doc) to
use to open the file in.

Other issues
------------

The back button
---------------

In NetScape this will take you back to the page before the frameset page.
You need a special menu to go back within the frame. 

In keyboard mode we can go back in the current frame, and if there is no
where to go then pass it back to the parent frameset.

In pointer mode we need to think about it...

Initial setup
-------------

When we get a frameset document...

Parsing is simple enough, see structures in rid.h.

Once the document is finished loading (antweb_doc_complete) we have to
do the layout, also whenever the document is resized (backend_reset_width).
There might be some shared functions with tables to help accomplish this.

When we have the set of boxes for thew windows we then need to tell the
frontend the new structure (see below) then we tell it to open each of
the new URLs, in a new fe_view and as children of the parent fe_view.
This function will call back to us through backend_open_url - from there
though it is just another file in another window.

Thought: it's certainly possible to have multiple windows with the same name
as we can be reopening the same frameset page in a new view. Therefore we
always need the fe_view of a frame somewhere in the stack.

Layout
------

In the frameset document we can use 'frontend_view_get_dimensions' to get the
dimensions of the current window. We can divide up the wa_width and wa_height
according to the frameset structures.

When the layout is complete we call a new function 'frontend_view_partition'

typedef struct
{
   char *name;
   struct
   {
     int x0,y0,x1,y1;
   } box;
} be_frame_info;

void frontend_view_partition(fe_view top, const be_frame_info *frames, int nframes, BOOL resize);

If frames is 0 then just delete any frame windows. If resize is true then we
should keep the current setup and just adjust the window on screen sizes (ie
this is from a call to backend_resize_width). Otherwise we should delete all
the old frames and setup the structure from scratch.

STBWeb
------

When view_partition is called it will construct a new setup of views
and initialise them.

The views will be recorded in an array (since we know the number of
frames initially anyway).

Fresco
------

When view_partition is called it will construct a new setup of views
open a new set of windows and initialise them.

Parsing
-------

OK so parsing isn't so simple...

Framesets can be arbitrarily nested so we need a cleverer way of 
expressing them.

We shall keep the frames in 1 linked list and the framesets in another list
reflecting the nesting of the original. Each frame has a pointer back to
the directly enclosing frameset.


