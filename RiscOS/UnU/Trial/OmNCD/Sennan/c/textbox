
/*---------------------------------------------------------------*/
/*    Filename    : c.NHTextBox                                  */
/*    Author      : I.Hoque                                      */
/*    Date        : 25/5/95                                      */
/*    Description : functions for the NHTextBox library to allow */
/*          Text boxes to be overlayed on Navigator screens.     */
/*                                                               */
/*    Modification history:                                      */
/*---------------------------------------------------------------*/

#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "ctutils.h"
#include "inlines.h"
#include "kernel.h"
#include "muldiv.h"
#include "nhwidget.h"
#include "swis.h"
#include "swicall.h"

static wimp_box cur;  

void trfm_box(wimp_box *r, int *m)
{
  wimp_box r1 = *r;
  
  r->min.x = muldiv(m[0], r1.min.x, 1 << 16)
           + muldiv(m[1], r1.min.y, 1 << 16) + m[4];
  r->min.y = muldiv(m[2], r1.min.x, 1 << 16)
           + muldiv(m[3], r1.min.y, 1 << 16) + m[5];
  r->max.x = muldiv(m[0], r1.max.x, 1 << 16)
           + muldiv(m[1], r1.max.y, 1 << 16) + m[4];
  r->max.y = muldiv(m[2], r1.max.x, 1 << 16)
           + muldiv(m[3], r1.max.y, 1 << 16) + m[5];
}

/*----------------------------------------------------------------------
    Name : keybd_inkey

    Description : Scan keyboard for a key within the given time.

    Parameters : return - keycode or -1 for none
----------------------------------------------------------------------*/

static int keybd_inkey(int t)
{
  int code, status;

  do
  {
    if (swi (OS_Byte, R0, 129, R1, t & 0xFF, R2, (t >> 8) & 0x7F,
             OUT, R1, &code, R2, &status, END) != NULL)
      return -1;
  } while (status == 0 && code == 0);

  if (status == 0)
  {
    return(code);
  }
  return(-1);
}

/*----------------------------------------------------------------------
    Name : ct_font_string_size

    Description : Returns the width and height in OS units is a string
    		  was painted.

    Parameters : s_text - text to be measured
    	       	 font_handle - previously returned from my_font_find
    	       	 i_width - width in OS units.
    	       	 i_height - height in OS units
----------------------------------------------------------------------*/

static ErrorPtr ct_font_string_size(char *s_text, int font_handle, int *i_width, int *i_height)
{
  int block[9];        /* Coordinate block */

  if (strlen(s_text))
  {
    memset(block, 0, 36);     /* Clear all bytes to 0 */
    block[4] = 32;            /* Set slit character to be space */

    ER(swi(Font_ScanString, R0, font_handle,
          R1, s_text, R2, 1<<5 | 1<<8 | 1<<9 | 1<<18, R3, -1, R4, -1,
          R5, block, END));

    ER(swi(Font_ConverttoOS, R1, block[7], R2, block[8],
           OUT, R1, i_width, R2, i_height, END));
  }
  else
  {
    *i_width  = 0;
    *i_height = 0;
  }
  return NULL;
}

/*----------------------------------------------------------------------
    Name : DisplayText

    Description : Function to place a Text on the screen.

    Parameters :  TextBox         - A pointer to the NHTextBoxDef
                                    control block.
                  CurrentPos      - Current Cursor Pos.

    Returns :    NULL on success or error pointer on failure
----------------------------------------------------------------------*/
int TextFont;

ErrorPtr DisplayText(NHTextBoxDef * TextBox, int StartPos)
{
  int i = 0, j = 0, FontHeight, FontLength, x, y;

/* Draw Background if requested */

  if (!TextBox->NoBackground)
  {
    ClearArea(TextBox->Xbl, TextBox->Ybl, TextBox->Xtr, TextBox->Ytr,
              TextBox->ColourBack);
    DrawHighLight(TextBox->Xbl, TextBox->Ybl, TextBox->Xtr, TextBox->Ytr,
                  TextBox->ColourBack, 5, NH_INDENT);
  }

  ER(ct_font_string_size("X", TextFont, &i, &FontHeight));

/* draw text in area */

  swi(ColourTrans_SetFontColours, R0, TextFont, R1, TextBox->ColourBack,
      R2, TextBox->ColourText, R3, 14, END);
  if (TextBox->Secret)
  {
    FontLength = (strlen((TextBox->TextData) + StartPos) * i * 7) / 10;
  }
  else
  {
    ER(ct_font_string_size((TextBox->TextData) + StartPos,
                         TextFont, &FontLength, &j));
  }
  y = TextBox->Ybl + (TextBox->Ytr - TextBox->Ybl - FontHeight) / 2;
  x = TextBox->Xbl + 20;
  if (!TextBox->Secret)
  {
    swi(Font_Paint, R0, TextFont, R1, (TextBox->TextData) + StartPos,
        R2, blend | 0x310, R3, x, R4, y, END);
  }
  else
  {
    for (j = 0; j < strlen((TextBox->TextData) + StartPos); j++)
    {
      swi(Font_Paint, R0, TextFont, R1, "*",
          R2, blend | 0x310, R3, x + (j * i * 7) / 10, R4, y, END);
    }
  }

/* draw cursor is required */

  if (!TextBox->NoCursor)
  {
    cur.min.x = x + FontLength + i / 3;
    cur.min.y = y;
    cur.max.x = x + FontLength + i;
    cur.max.y = y + FontHeight;
    ClearArea(cur.min.x, cur.min.y, cur.max.x, cur.max.y, TextBox->ColourText);
  }

#if FALSE
/* Run the antitwitter filter if requested */

  if (TextBox->AntiTwitter)
    AntiTwitterArea(TextBox->Xbl - 4, TextBox->Ybl - 4,
                    TextBox->Xtr - TextBox->Xbl + 8,
                    TextBox->Ytr - TextBox->Ybl + 8);
#endif
  return NULL;

}

/*----------------------------------------------------------------------
    Name : NHPutTextBox

    Description : Function to place a text box on a navigator screen
                  populated with data defined at run time.  The caller
                  must populate the NHTextBoxDef structure with the
                  appropriate definition and data to define the text
                  box and then call the function. It is the callers
                  responsibility to allocate memory for TextData.

                  The function will exit upon an appropriate key stroke
                  (select, back, home, help, etc.) and will modify the
                  following fields in the control block:

                  If a min and Max are specified which are different
                  than only an input lying within this range will be
                  accepted.

                  TextData        - and changes the user made.
                  LastKeyPress    - Code of the last key pressed by user
                                    causing function to return.

    Parameters :  TextBox         - A pointer to the NHTextBoxDef
                                    control block.
                  Min             - Minimum numeric value
                  Max             - Maximum acceptible numeric value
                                    if Min = Max then no checking is done

    Returns :    NULL on success or error pointer on failure
----------------------------------------------------------------------*/

ErrorPtr NHPutTextBox(NHTextBoxDef * TextBox, int *matrix, int Min, int Max)
{
  int KeyPress = 0;
  int LastChar = strlen(TextBox->TextData) - 1;
  int StartPos = 0;
  int MaxDispSize = TextBox->Xtr - TextBox->Xbl - 50;
  int TextFont, FontLength, FontHeight, Exit = 0, i;

/* display the list for the first time */

  if (matrix)
  {
    trfm_box((wimp_box *) TextBox, matrix);
    TextBox->SizeText = (TextBox->SizeText * matrix[0]) >> 16;
  }
  swi(Font_FindFont, R1, TextBox->FontText, R2, TextBox->SizeText * 16,
      R3, TextBox->SizeText * 16, R4, 0, R5, 0, OUT, R0, &TextFont, END);

  EG(DisplayText(TextBox, StartPos));

/* if no wait is required on display only */

  if (TextBox->DisplayOnly == 2)
    goto done;

  do
  {

    KeyPress = keybd_inkey(100);

    for (i = 0; TextBox->ExitKeys[i] && i < 10; i++)
      if (TextBox->ExitKeys[i] == KeyPress)
        Exit = 1;

/* user has pressed an exit key */

    if (Exit)
    {
      i = atoi(TextBox->TextData);
      if ((Min == Max) || ((i >= Min) && (i <= Max)))
      {
        ClickSound();
        ClearArea(cur.min.x, cur.min.y, cur.max.x, cur.max.y, TextBox->ColourBack);
        goto done;
      }
    }

    if ((KeyPress == 0x08 || KeyPress == 0x7F) && (!TextBox->DisplayOnly))
    {
    /* delete, etc... */
      LastChar--;
      if (LastChar >= -1)
      {
        if (LastChar + 1 <= StartPos)
        {
          do
          {
            StartPos--;
            ER(ct_font_string_size(TextBox->TextData + StartPos, TextFont,
                                   &FontLength, &FontHeight));
            FontLength += (FontHeight / 2);
          }
          while ((FontLength <= MaxDispSize) && (StartPos >= 0));
          StartPos++;
        }
        ClickSound();
        *(TextBox->TextData + LastChar + 1) = 0;
        EG(DisplayText(TextBox, StartPos));
      }
      else
      {
        LastChar++;
      }
    }

    if ((!TextBox->DisplayOnly) && isgraph(KeyPress))
    {
      if (LastChar < TextBox->MaxChar)
      {
        LastChar++;
        TextBox->TextData[LastChar] = KeyPress;
        TextBox->TextData[LastChar + 1] = '\0';
        if (TextBox->HScroll)
        {
          ER(ct_font_string_size(TextBox->TextData, TextFont,
                                 &FontLength, &FontHeight));
          FontLength += (FontHeight / 2);
          if (FontLength > MaxDispSize)
            StartPos++;
        }
        ClickSound();
        EG(DisplayText(TextBox, StartPos));
      }
    }

  }
  while (TRUE);

done:
  TextBox->LastKeyPress = KeyPress;

fail:
  font_losefont(TextFont);
  return err;

}
