/*----------------------------------------------------------------------*/
/*    Filename    : c.ctutils                                         */
/*    Author   : I. Hoque      */
/*    Date        : 17/5/1995                */
/*    Description : functions distributes to developers on Cambridge   */
/*                  iTV Trial for error reporting .        */
/*                            */
/*    Modification history:                     */
/*                */
/*----------------------------------------------------------------------*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "ctutils.h"
#include "defs.h"
#include "inlines.h"
#include "swicall.h"

/*----------------------------------------------------------------------
    Name : make_error

    Description : Set the global error pointer to a filled-in error block
    		  (which is static)

    Parameters : num              - error number (non zero is fatal)
   	 	 *mess            - message string.

    Returns :    error pointer.
----------------------------------------------------------------------*/

ErrorPtr make_error(int num, char *mess)
{
  static _kernel_oserror myerror;
  myerror.errnum = num;
  strcpy(myerror.errmess, mess);
  err = &myerror;
  return err;
}

void check_error(ErrorPtr err)
{
  char buf[266];

  fprintf(stderr, "ERROR: %s (code %d)\n", err->errmess, err->errnum);
  sprintf(buf, "%d  %s", err->errnum, err->errmess);
  if (err->errnum != 0)
  {
    exit(err->errnum);
  }
}

#if FALSE
/*----------------------------------------------------------------------
    Name : ClickSound

    Description : Make the click sound.

    Parameters :

    Returns : Error Pointer
----------------------------------------------------------------------*/

ErrorPtr ClickSound(void)
{
  oscli("DataLoad_AssignSlot 1 1");
  oscli("ChannelVoice 1 10");

  return (swi(Sound_Control, R0, 1, R1, -15, R2, 1, R3, 1, END));
}
#endif

/*----------------------------------------------------------------------
    Name : vdu_????

    Description : Graphics operations.

    Parameters :  x   -  X coordinate
                  y   -  Y coordinate

    Returns :
----------------------------------------------------------------------*/

ErrorPtr vdu_set_fore_col(int col)
{
  return (swi(ColourTrans_SetGCOL, R0, col, R3, 0, R4, 0, END));
}

ErrorPtr vdu_set_back_col(int col)
{
  return (swi(ColourTrans_SetGCOL, R0, col, R3, 192, R4, 0, END));
}

/*----------------------------------------------------------------------
    Name : ChangeColour

    Description : takes an integer BBGGRR00 and makes it lighter or
    		  darker.

    Parameters :  colour      -  colour integer
    	       	  factor      -  > 100 lighter, < 100 darker

    Returns :     colour integer
----------------------------------------------------------------------*/

unsigned int ChangeColour(unsigned int colour, int factor)
{
  unsigned int r = (colour >> 8) & 0xff;
  unsigned int g = (colour >> 16) & 0xff;
  unsigned int b = (colour >> 24) & 0xff;
  b = b * factor / 100;
  if (b > 255)
    b = 255;
  g = g * factor / 100;
  if (g > 255)
    g = 255;
  r = r * factor / 100;
  if (r > 255)
    r = 255;
  return (b << 24) | (g << 16) | (r << 8);
}

/*----------------------------------------------------------------------
    Name : DrawHighLight

    Description : draws a highlight box.

    Parameters :  Xbl,Ybl     -  bottom left in OS Coordinates
    	       	  Xtr,Ytr     -  top right in OS Coordinates
    	       	  colour      -  base colour to use
    	       	  thick       -  thickness of the box
    	       	  Style       -  NH_RAISED, NH_INDENT, NH_FLUSH (blank)

    Returns :     colour integer
----------------------------------------------------------------------*/

ErrorPtr DrawHighLight(int xbl, int ybl, int xtr, int ytr, unsigned int colour, int thick, int Style)
{
  int i;
  unsigned int light, lightish, dark, darkish;
  switch (Style)
  {
  case NH_FLUSH:
    light = colour;
    lightish = colour;
    dark = colour;
    darkish = colour;
    break;
  case NH_RAISED:
    light = ChangeColour(colour, 170);
    lightish = ChangeColour(colour, 130);
    dark = ChangeColour(colour, 40);
    darkish = ChangeColour(colour, 70);
    break;
  case NH_INDENT:
    dark = ChangeColour(colour, 170);
    darkish = ChangeColour(colour, 130);
    light = ChangeColour(colour, 40);
    lightish = ChangeColour(colour, 70);
    break;
  }
  for (i = 0; i < thick; i++)
  {
    if ((i == 0) || (i == thick - 1))
      ER(vdu_set_fore_col(lightish))
    else
      ER(vdu_set_fore_col(light));
    vdu_move(xbl + i, ybl + i);
    vdu_line(xbl + i, ytr - i);
    vdu_line(xtr - i, ytr - i);
    if ((i == 0) || (i == thick - 1))
      ER(vdu_set_fore_col(darkish))
    else
      ER(vdu_set_fore_col(dark));
    vdu_move(xtr - i, ytr - i);
    vdu_line(xtr - i, ybl + i);
    vdu_line(xbl + i, ybl + i);
  }

  return NULL;
}

/*----------------------------------------------------------------------
    Name : ClearArea

    Description : colours a blank rectangle din the given colour.

    Parameters :  Xbl,Ybl     -  bottom left in OS Coordinates
    	       	  Xtr,Ytr     -  top right in OS Coordinates
    	       	  col         -  base colour to use

    Returns :     Error Pointer
----------------------------------------------------------------------*/

ErrorPtr ClearArea(int xbl, int ybl, int xtr, int ytr, int col)
{
  ER(vdu_set_back_col(col));
  vdu_move(xbl, ybl);
  vdu_fill(xtr, ytr);
  return NULL;
}

