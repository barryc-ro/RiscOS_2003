/*
 * Navigator presenter - file routines
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "swicall.h"

/* char *file_addr = NULL, *overlay = NULL;
int   file_len  = 0,    over_len = 0; */

extern linklist_header stack;

extern int matrix[];

char *strdup(const char *src)
{
  int   len;
  char *dest;

  if (src == NULL)
    return NULL;

  len = strlen((char *) src) + 1;

  dest = Heap_Alloc(len, DYN_FIX);

  if (dest == NULL)
    return(NULL);

  memcpy(dest, src, len-1);

  /* make sure string is zero terminated */
  dest[len-1] = (char) 0;

  return dest;
}

ErrorPtr file_open (char *filename, int *retfd)
{
  ErrorPtr err;
  int fd = 0;

  /* This OS_Find call returns an error if the file is open for writing,
     but a fd of zero if the file is totally absent.  This is relied on.
   */

  err = swi(OS_Find, R0, 0x47, R1, filename, OUT, R0, &fd, END);
  if (err)
      *retfd = 0;
  else
      *retfd = fd;

  return err;
}


/*
   Check for existence of a file.  Return TRUE or FALSE.  If on first
   probe the file is absent, wait for a VERY short time and try again
   - once.  Unlike file_open, this does not check to see if the file is
   actually readable.
 */

BOOL file_exists (char *filename)
{
  int type;
    if (swi (OS_File, R0, 17, R1, filename, OUT, R0, &type, END) != NULL || type == 0)
        return FALSE;
    else
        return TRUE;
}


/* Close a file opened with file_open. */

ErrorPtr file_close (int fd)
{
    if (fd <= 0)                /* Don't permit closing of ALL files! */
        return NULL;
    else
        return(swi (OS_Find,  R0, 0,  R1, fd,  END));
}


/* Return the extent of the specified open file */

ErrorPtr file_length (int fd, int *length)
{
    return swi (OS_Args,  R0, 2,  R1, fd,  OUT,  R2, length,  END);
}

ErrorPtr render_drawfile(char *drawdata, int length, int *block, int offset)
{
  matrix[4] = ((block[1] - block[5]) << 8) - offset;
  matrix[5] = ((block[4] - block[6]) << 8);
  swi(DrawFile_Render, R0, (1 << 11), R1, drawdata, R2, length, R3, matrix,
      R4, &block[7], END);

  return NULL;
}

ErrorPtr render_page(char *pagepath)
{
  char buffer[256];
  int fd = 0;
  page_stack *page;

  for (page = (page_stack *) LinkList_FirstItem(&stack); page != NULL;
       page = (page_stack *) LinkList_NextItem((linklist_header *) page))
  {
    if (stricmp(pagepath, page->pagepath) == 0)
    {
      page_stack *dump = (page_stack *) LinkList_NextItem((linklist_header *) page);
      while (dump)
      {
        LinkList_Unlink(&stack, (linklist_header *) dump);
        Heap_Free(dump->pagepath, DYN_FIX);
        Heap_Free(dump->backdrop, dump->backpool);
        Heap_Free(dump->overlay,  dump->overpool);
        Heap_Free(dump, DYN_FIX);
        dump = (page_stack *) LinkList_NextItem((linklist_header *) page);
      }
      if (page->backdrop != NULL)
        return(NULL);
      else
        break;
    }
  }
  if (page == NULL)
  {
    page = Heap_Alloc(sizeof(page_stack), DYN_FIX);
    memset(page, '\0', sizeof(page_stack));
    page->pagepath = strdup(pagepath);
  }
  
  sprintf(buffer, "%s.Page1", pagepath);
  if (err = file_open(buffer, &fd), err == NULL && fd > 0)
  {
    file_length(fd, &page->back_len);
    page->backdrop = Heap_Alloc(page->back_len, DYN_VOL);
    page->backpool = DYN_VOL;

    err = swi(OS_GBPB, R0, 4, R1, fd, R2, page->backdrop,
                       R3, page->back_len, END);
    file_close(fd);
    fd = 0;
  }
  if (err)
  {
    if (LinkList_InList(&stack, (linklist_header *) page))
    {
      LinkList_Unlink(&stack, (linklist_header *) page);
      Heap_Free(page->pagepath, DYN_FIX);
      Heap_Free(page->backdrop, page->backpool);
      Heap_Free(page->overlay,  page->overpool);
      Heap_Free(page, DYN_FIX);
    }
    return(err);
  }
    
  sprintf(buffer, "%s.Overlay", pagepath);
  if (err = file_open(buffer, &fd), err == NULL && fd > 0)
  {
    file_length(fd, &page->over_len);
    page->overlay = Heap_Alloc(page->over_len, DYN_VOL);
    page->overpool = DYN_VOL;

    err = swi(OS_GBPB, R0, 4, R1, fd, R2, page->overlay,
                       R3, page->over_len, END);
    file_close(fd);
    fd = 0;
  }
  if (!LinkList_InList(&stack, (linklist_header *) page))
  {
    LinkList_AddToTail(&stack, (linklist_header *) page);
  }
  return(NULL);
}
