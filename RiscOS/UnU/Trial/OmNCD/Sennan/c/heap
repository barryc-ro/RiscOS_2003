#include <stdlib.h>
#include <string.h>

#include "Defs.h"
#include "inlines.h"
#include "swicall.h"

#define PAGE_SIZE 4096
#define HEAP_INC  (PAGE_SIZE - 1)

static char *heap_addr[2];
static int   heap_dyn[2];
static int   heap_count = 0;

static BOOL heap_init[2] = FALSE;

char *CreateDynamic(char *name, int *area, int minsize, int maxsize)
{
  char *pointer, *narea;
  
  *area = -1;

  do
  {
    swi (OS_DynamicArea, R0, 3, R1, *area, OUT, R1, area, END);
    if (*area != -1) 
      swi (OS_DynamicArea, R0, 2, R1, *area, OUT, R3, &pointer,
                           R8, &narea, END);
  } while (*area != -1 && strcmp(name, narea) != 0);

  if (*area == -1)
    swi(OS_DynamicArea, R0, 0, R1, -1, R2, minsize, R3, -1,
                    R4, 128, R5, maxsize, R6, 0, R7, 0, R8, name,
                    OUT, R1, area, R3, &pointer, END);
  return(pointer);
}

static void _Heap_Lose(void)
{
  if (heap_init[0])
  {
    swi(OS_DynamicArea, R0, 1, R1, heap_dyn[0], END);
    heap_init[0] = FALSE;
  }
  if (heap_init[1])
  {
    swi(OS_DynamicArea, R0, 1, R1, heap_dyn[1], END);
    heap_init[1] = FALSE;
  }
}  

ErrorPtr Heap_Create(char *title, int which)
{
  ErrorPtr err = NULL;
  
  if (!heap_init[which])
  {
    heap_addr[which] = CreateDynamic(title, &heap_dyn[which], 4 * 1024, -1);
    heap_init[which] = TRUE;
    atexit(_Heap_Lose);
    err = swi(OS_Heap, R0, 0, R1, heap_addr[which], R3, 4 * 1024, END);
  }                       
  return(err);
}

void Heap_Free(void *block, int which)
{
#if TRUE
  int heap_lose, heap_end;
#endif
  int heap_size;                     
  
  if (!heap_init[which])
    return;
  
  if (swi(OS_Heap, R0, 3, R1, heap_addr[which], R2, block, END) == NULL)
    heap_count--;

#if TRUE
  if (swi(OS_DynamicArea, R0, 2, R1, heap_dyn[which], OUT, R2, &heap_size, END) == NULL)
  {
    /* No error trap as we only want to shrink by as much as possible,
       not necessarily as much as we say. */                
    swi(OS_Heap, R0, 5, R1, heap_addr[which], R3, -(heap_size - PAGE_SIZE), END);
    
    /* Shhh!!! Don't tell anyone I'm looking at the heap end directly! */
    heap_end = ((int *) heap_addr[which])[3];
    heap_lose = heap_size - heap_end;
    if (heap_lose > HEAP_INC)
    {
      change_dynamic(heap_dyn[which], -heap_lose + HEAP_INC);
    }
  }
#endif                     
}

void *Heap_Alloc(int size, int which)
{
  BOOL retry = FALSE;
  int heap_free, heap_most, heap_size;
  char *heap_alloc = NULL;

  if (!heap_init[which])
    return(NULL);
  
  swi(OS_Heap, R0, 1, R1, heap_addr[which],
                  OUT, R2, &heap_most, R3, &heap_free, END);

  do
  {
    while (heap_most < size)
    {
      change_dynamic(heap_dyn[which], size - heap_most + HEAP_INC);
      swi(OS_DynamicArea, R0, 2, R1, heap_dyn[which],
               OUT, R2, &heap_size, END);
      swi(OS_Heap, R0, 5, R1, heap_addr[which],
               R3, size - heap_most + HEAP_INC, END);
      swi(OS_Heap, R0, 1, R1, heap_addr[which],
               OUT, R2, &heap_most, R3, &heap_free, END);
    }
    swi(OS_Heap, R0, 2, R1, heap_addr[which], R3, size,
                    OUT, R2, &heap_alloc, END);
  
    if (heap_alloc != NULL)
      heap_count++;
    else if (!retry)
      retry = TRUE;
    else
      break;
  } while (retry);                  

  return((void *) heap_alloc);

  return(NULL);
}
