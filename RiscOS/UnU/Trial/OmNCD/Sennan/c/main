#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "LinkList.h"
#include "muldiv.h"
#include "NCDLogon.h"
#include "NHWidget.h"
#include "objects.h"
#include "render.h"
#include "screen.h"
#include "swicall.h"
#include "wimp.h"

#define __VERSION__ "0.09 Compiled " __TIME__ " " __DATE__

static int this_task;

char *version = __VERSION__;

static int wimp_messages[] =
{
  4,       /* Message_DataLoadAck */
  5,
  0x400C1, /* Message_ModeChange */
  NULL
};

char cprefix[80];

ErrorPtr err;

BOOL tv = TRUE;

int matrix[6] = {1 << 16, 0, 0, 1 << 16, 0, 0};

unsigned int blend = 0;

linklist_header stack = {NULL, NULL};

int *windowdata = NULL;

/* textbox[0] is user name box on log-on screen
   textbox[1] is security code/password
   textbox[2] is template rename.
   Coordinates are in os units based on 1536 * 1152 screen
   (768 * 576 pixels) */
   
static NHTextBoxDef textbox[3] =
{
  {832, 352, 1280, 400, "Homerton.Medium", 16, 0x00550000, 0xFFFFFF00, 0, 0, 1, 0, 0, 0, 1, 30, NULL, 30, 0, 13, 27, 0, 0, 0, 0, 0, 0, 0, 0}, 
  {832, 176, 1280, 224, "Homerton.Medium", 16, 0x00004400, 0xFFFFFF00, 0, 0, 1, 1, 0, 0, 1, 30, NULL, 30, 0, 13, 27, 0, 0, 0, 0, 0, 0, 0, 0}, 
  {528, 416,  976, 464, "Homerton.Medium", 16, 0x00000000, 0xFFFFFF00, 0, 0, 1, 0, 0, 0, 1, 12, NULL, 12, 0, 13, 27, 0, 0, 0, 0, 0, 0, 0, 0} 
};

extern char /* *file_addr, *overlay, */ *DBoxdata;
extern int  /*  file_len,   over_len, */ DBoxlen;

extern int *mainwindowdata, mainwindowlen;

extern wimp_point screen_eig;

static BOOL CheckTV(void)
{
  int flags;
  
  ReadModeVar(-1, 0, &flags);
  if (flags & (1 << 8))
    tv = TRUE;
  else
    tv = FALSE;

  return(tv);
}

static void Hack_FontVersion(void)
{
  char *title;
  int base, high, posn = 3;
  
  swi(OS_Module, R0, 18, R1, "FontManager", OUT, R3, &base, END);
  title = (char *) (base + *((int *) (base + 20)));
  while (*title != 0x09)
    title++;
  while (isspace(*title))
    title++;
  high = 0;
  while (isdigit(*title))
  {
    high = (high * 16) | ((*title) - '0');
    title++;
  }
  high = high << 16;
  title++;
  while (isdigit(*title) && posn >= 0)
  {
    high |= (((*title) - '0') << (posn-- * 4));
    title++;
  }
  if (high > 0x00033400)
    blend = 1 << 11;
}

void dump_stack(BOOL move)
{
  page_stack *page = (page_stack *) LinkList_LastItem(&stack);

  for (page = (page_stack *) LinkList_PreviousItem((linklist_header *) page);
       page != NULL;
       page = (page_stack *) LinkList_PreviousItem((linklist_header *) page))
  {
    Heap_Free(page->backdrop, page->backpool);
    page->backdrop = NULL;
    Heap_Free(page->overlay, page->overpool);
    page->overlay = NULL;
  }
  if (move)
  {
    page = (page_stack *) LinkList_LastItem(&stack);
    if (page->backpool != DYN_FIX)
    {
      char *temp = Heap_Alloc(page->back_len, DYN_FIX);
      
      memcpy(temp, page->backdrop, page->back_len);
      Heap_Free(page->backdrop, DYN_VOL);
      page->backdrop = temp;
      page->backpool = DYN_FIX;
    }
    if (page->overlay && page->overpool != DYN_FIX)
    {
      char *temp = Heap_Alloc(page->over_len, DYN_FIX);
      
      memcpy(temp, page->overlay, page->over_len);
      Heap_Free(page->overlay, DYN_VOL);
      page->overlay  = temp;
      page->overpool = DYN_FIX;
    }
  }
}

static void run_something(char *what)
{
  message_block msg;

  dump_stack(TRUE);

  memset(&msg, '\0', sizeof(message_block));
  msg.header.size   = 256;
  msg.header.action = 5;  /* Message_DataOpen */
  msg.data.dataload.window   = 0;
  msg.data.dataload.filetype = filetype;
  strcpy(msg.data.dataload.filename, what);
  swi(Wimp_SendMessage, R0, 18, R1, &msg, R2, 0, END);
  kill_task();
}

static void NFSStop(void)
{
  OmegaLogoff(LOCAL_MOUNT);
  OmegaLogoff(FIXED_MOUNT);
}

static void WimpStop(void)
{
  wimp_deletewindow(0, windowdata);
  wimp_closedown(this_task, 0x4B534154);
}

static int Icon_BarIcon(void)
{
  int  icreate[10];
  int  icon;

  icreate[0] = -1;
  icreate[5] = 0x17003019;
  strcpy((char *) &icreate[6], "Sennan");

  icreate[1] = icreate[2] = 0;
  icreate[3] = icreate[4] = 68;

  swi(Wimp_CreateIcon, R0, 0x60000000, R1, icreate, END);
  return(icon);
}

static void WimpStart(void)
{
  swi(Wimp_Initialise, R0, 350, R1, 0x4B534154, R2, _APPNAME_,
      R3, wimp_messages, OUT, R1, &this_task, END);
  Icon_BarIcon();
  windowdata = Heap_Alloc(mainwindowlen, DYN_FIX);
  memcpy(windowdata, &mainwindowdata[10], mainwindowlen);
  if (getenv("Sennan$ShowBorder"))
    ((char *) windowdata)[36] = 7;
  windowdata[0] = wimp_createwindow(0, &windowdata[1]);
  wimp_openwindow(0, windowdata);
  atexit(WimpStop);
}

static void redraw_action(int *block)
{
  BOOL bMore;
  int offset;

  if (block[0])
  {
    page_stack *page = (page_stack *) LinkList_LastItem(&stack);
    
    swi(Wimp_RedrawWindow, R1, block, OUT, R0, &bMore, END);
    offset = muldiv(matrix[0], page->overleft, 1 << 16);

    while (bMore)
    {
      if (page->backdrop)
        render_drawfile(page->backdrop, page->back_len, block, 0);
      if (page->overlay)
      {
        render_drawfile(page->overlay,  page->over_len, block, offset);
        if (tv)
          screen_filter_area(block[7], block[8],
                             block[9] - block[7], block[10] - block[8]);
      }
      swi(Wimp_GetRectangle, R1, block, OUT, R0, &bMore, END);
    }
  }
}

static void logon(void)
{
  char user[40], pwd[40];
  NHTextBoxDef tb;
  page_stack *page;

  render_page(FIXED_ROOT);
  page = (page_stack *) LinkList_LastItem(&stack);
  swi(DrawFile_Render, R0, (1 << 11), R1, page->backdrop, R2, page->back_len,
      R3, matrix, R4, 0, END);
  if (tv)
    screen_filter_area(0, 0, 10000, 10000);
  do
  {
    user[0] = '\0';
    tb = textbox[0];
    tb.TextData = user;
    NHPutTextBox(&tb, matrix, 0, 0);
    pwd[0] = '\0';
    tb = textbox[1];
    tb.TextData = pwd;
    NHPutTextBox(&tb, matrix, 0, 0);
  }
  while (OmegaLogon(user, pwd, LOCAL_MOUNT));
  
  atexit(NFSStop);
  render_page(LOCAL_ROOT);
  screen_redraw(-1); 
}

static int paranoia = 0;

static void null_action(void)
{
  paranoia = 0;
  kill_task();
}

static void key_action(int c)
{
  switch(c)
  {
  case 'b':
  case 'B':
    {
      page_stack *page, *last = (page_stack *) LinkList_LastItem(&stack);
      
      page = (page_stack *) LinkList_PreviousItem((linklist_header *) last);
      if (page && page->header.previous)
      {
        render_page(page->pagepath);
        screen_redraw(windowdata[0]);
      } 
    }
    break;
       
  case 'q':
  case 'Q':
    if (paranoia == 'q')
    {
      OmegaLogoff(LOCAL_MOUNT);
      logon();
    }
    else
      paranoia = 'q';
    break;

  case 'h':
  case 'H':
    render_page(LOCAL_ROOT);
    screen_redraw(windowdata[0]); 
    break;

  case 't':
  case 'T':
    if (paranoia == 't')
      kill_task();
    else
      paranoia = 't';
    break;

  case 'x':
  case 'X':
    if (paranoia == 'x')
      exit(0);
    else
      paranoia = 'x';
    break;

  case 0x18D:
    {
      page_stack *page = (page_stack *) LinkList_LastItem(&stack);
      if (page->overleft < page->overmax)
      {
        page->overleft += page->overstep;
        screen_redraw(windowdata[0]);
      } 
    }
    break;

  case 0x18C:
    {
      page_stack *page = (page_stack *) LinkList_LastItem(&stack);
      if (page->overleft > 0)
      {
        page->overleft -= page->overstep;
        screen_redraw(windowdata[0]);
      } 
    }
    break;

  default:
    wimp_processkey(c);
    break;
  }
}

static ErrorPtr run_command (char *cmd, BOOL nextcmd, BOOL maxout)
{
  if (*cmd == 0)
    return(NULL);

  dump_stack(TRUE);
  
  wimp_starttask(cmd);
  return NULL;
}

/* Decode action and args, and perform the command that they correspond to.
   This only returns an error if the program cannot sensibly continue.
   This code is also responsible for checking for semicolons in the command
   and doing more than one thing if needed. */

void canonicalise_path(char *path)
{
  char buf [FILENAMELEN];

  if (swi(OS_FSControl, R0, 37, R1, path, R2, buf, R3, 0, R4, 0,
          R5, FILENAMELEN, END) == NULL)
    strcpy(path, buf);
}

static ErrorPtr do_command(drawfile_hotspot *spot, int cmd)
{
  char tail[200];
  int length = 0;
  BOOL extend;

  extend = (spot->string[cmd + length] != 255);

  while (extend)
  {
    Action action;

    cmd += length;
    
    action  = (Action) spot->string[cmd++];
    length  = spot->string[cmd++];
    extend = (spot->string[cmd + length] != 255);
    memcpy(tail, &spot->string[cmd], length);
    tail[length] = '\0';

    switch (action)
    {
    case Run:
      EG ( run_command (tail, extend, FALSE)); 
      break;

    case Back:
      {
        page_stack *page = (page_stack *) LinkList_LastItem(&stack);
        
        page = (page_stack *) LinkList_PreviousItem((linklist_header *) page);
        render_page(page->pagepath);
        screen_redraw(windowdata[0]); 
      } 
      break;

    case Branch:
      {
        char buffer[256];
        page_stack *page = (page_stack *) LinkList_LastItem(&stack);
        
        sprintf(buffer, "%s.%s", page->pagepath, tail);
        canonicalise_path(buffer);
        render_page(buffer);
        screen_redraw(windowdata[0]); 
      } 
      break;

    case Goto:
      scan_directory(tail); 
      break;

    case Home:
      render_page(LOCAL_ROOT);
      screen_redraw(windowdata[0]); 
      break;

    case Quit:
      OmegaLogoff(LOCAL_MOUNT);
      logon();
      break;
    }
  } 

  return(NULL);

fail:
  return(err);
}

static drawfile_page *command = NULL;

static BOOL scan_recurse(char *drawptr, int len, int *matrix, wimp_point *click)
{
  BOOL ret = FALSE;
  char *data = drawptr;
  char newname[20];
  drawfile_drop *drop;
  wimp_box *bbox;
  
  while (!ret && drawptr < data + len)
  {
    bbox = (wimp_box *) &drawptr[8];
    drop = (drawfile_drop *) drawptr;
    
    switch(((int *) drawptr)[0])
    {
    case 0x101:
    case 0x301:
      if (bbox->min.x < click->x
       && bbox->max.x > click->x
       && bbox->min.y < click->y
       && bbox->max.y > click->y)
      {
        do_command((drawfile_hotspot *) drawptr, 0);
        ret = TRUE;
        return(TRUE);
      }
      break;

    case 0x103:
    case 0x303:
      {
        command = (drawfile_page *) drawptr;
      }
      break;

    case 0x104:
    case 0x304:
      if (!drop->ishead
       && bbox->min.x < click->x
       && bbox->max.x > click->x
       && bbox->min.y < click->y
       && bbox->max.y > click->y)
      {
        char runit[300];
        
        newname[0] = '\0';
        if (!drop->isfile)
        {
          char source[FILENAMELEN];
          NHTextBoxDef tb;

          tb = textbox[2];
          tb.TextData = newname;

          while (strlen(newname) < 2 && tb.LastKeyPress != 27)
          {
            swi(DrawFile_Render, R0, (1 << 11), R1, DBoxdata, R2, DBoxlen,
                R3, matrix, R4, 0, END);
            NHPutTextBox(&tb, matrix, 0, 0);
          }
          if (tb.LastKeyPress == 27)
          {
            screen_redraw(windowdata[0]);
            ret = TRUE;
            return(TRUE);
          }
          sprintf(runit , LOCAL_ROOT ".%s.%s", performing, newname);
          if (drop->islocal)
            sprintf(source, LOCAL_ROOT ".%s.Templates.%s", performing, drop->text);
          else
            sprintf(source, FIXED_ROOT ".Templates.%s.%s", performing, drop->text);
          swi(OS_FSControl, R0, 26, R1, source, R2, runit, R3, 0x402, END);
          scan_directory(performing);
          screen_redraw(windowdata[0]);
        }
        if (command && command->log)
          sprintf(cprefix, "%.*s", command->log, command->logm);
        else
          cprefix[0] = '\0';
        sprintf(runit, LOCAL_ROOT ".%s.%s", performing, drop->isfile ? drop->text : newname);
        run_something(runit);
        ret = TRUE;
        return(TRUE);
      }
      break;

    case 6:
      ret = scan_recurse(drawptr + 36, ((int *) drawptr)[1] - 36, matrix, click);
      break;
    }
    drawptr += ((int *) drawptr)[1];
  }
  return(FALSE);
}
 
static void mouse_action(int *block)
{
  char *drawptr;
  page_stack *page = (page_stack *) LinkList_LastItem(&stack);
  wimp_point click;

  click.x = muldiv(block[0] << 8, 1 << 16, matrix[0]);
  click.y = muldiv(block[1] << 8, 1 << 16, matrix[3]);

  drawptr = page->backdrop + 40;
  command = NULL;
  if (!scan_recurse(drawptr, page->back_len - 40, matrix, &click) && page->overlay)
  {
    drawptr = page->overlay + 40;
    scan_recurse(drawptr, page->over_len - 40, matrix, &click);
  }
}

static void message_action(int action)
{
  switch(action)
  {
  case 0:
    exit(0);
    break;

  case 4:
  case 5:
    break;

  case 0x400C1:
    Screen_CacheModeInfo(matrix);
    break;
  }
}

int main (int argc, char **argv)
{
  int pollblock[64];
  int reason;

  Heap_Create(_APPNAME_" heap area", DYN_FIX);
  Heap_Create(_APPNAME_" volatiles", DYN_VOL);
  Hack_FontVersion();

  WimpStart();
  CheckTV();
  Screen_CacheModeInfo(matrix);
  swi(Wimp_SetCaretPosition, R0, windowdata[0], R1, -1, R2, 0, R3, 0,
                             R4, -1, R5, 0, END);

  logon();

  for (;;)
  {
    reason = wimp_pollidle(0x00003830, pollblock, monotonic_time() + 200);

    switch (reason)
    {
    case 0:
      null_action();
      break;

    case 1:
      redraw_action(pollblock);
      break;

    case 2:
      wimp_openwindow(0, pollblock);
      break;

    case 6:
      mouse_action(pollblock);
      break;

    case 8:
      key_action(pollblock[6]);
      break;

    case 17:
    case 18:
      message_action(pollblock[4]);
      break;

    case 19:
      {
        char runit[300];
  
        sprintf(runit, "%s %s", cprefix, (char *) &pollblock[11]);
        wimp_starttask(runit);
        kill_task();
      }
      break;
    }
  }
  exit(0);
}
