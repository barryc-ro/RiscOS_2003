#include "defs.h"
#include "inlines.h"
#include "swicall.h"
#include "wimp.h"

#include <string.h>

typedef struct
{
  int handle;
  int count;
} taskinfo;

static taskinfo task[64];

extern int *windowdata;

void kill_task(void)
{
  int block[64];
  int owner, search;
  message_block msg;

  for (search = 0; search < 64 && task[search].handle; search++)
  {
    task[search].count = 0;
  }
  block[0] = windowdata[0];
  swi(Wimp_GetWindowState, R1, block, END);
  block[7] = -2;
  wimp_openwindow(0, block);
  
  block[7] = windowdata[0];

  do
  {
    block[0] = block[7];
    swi(Wimp_GetWindowState, R1, block, END);
    if (block[7] != -1)
    {
      msg.header.size    = 20;
      msg.header.yourref =  0;
      swi(Wimp_SendMessage, R0, 19, R1, &msg, R2, block[7], OUT, R2, &owner, END);
      for (search = 0; search < 64 && task[search].handle; search++)
      {
        if (task[search].handle == owner)
          break;
      }
      task[search].handle = owner;
      task[search].count++;
    }
  } while (block[7] != -1);

  for (search = 0; search < 64 && task[search].handle; search++)
  {
    if (task[search].count == 0)
    {
      memset(&msg, '\0', sizeof(message_block));
      msg.header.size   = 20;
      msg.header.action = 0;  /* Message_Quit */
      swi(Wimp_SendMessage, R0, 17, R1, &msg, R2, task[search].handle, END);
      memmove(&task[search], &task[search + 1], (64 - (search + 1)) * sizeof(taskinfo));
      search--;
    }
  }
}
