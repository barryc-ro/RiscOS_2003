#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "Defs.h"
#include "heap.h"
#include "objects.h"
#include "render.h"
#include "screen.h"
#include "swicall.h"

#define FILETYPE_DRAW (0xAFF)

extern char /* *overlay, */ *Emptydata;
extern int /* over_len, */   Emptylen;

extern linklist_header stack;

char performing[40];

drawfile_drop refhead = {0x304, 40, 20 << 9, 510 << 9, 220 << 9, 550 << 9,
                         0xDDDDDD00, 2, 2, TRUE, TRUE, TRUE, 20 * 640, "*"};
drawfile_drop refitem = {0x304, 40, 20 << 9, 510 << 9, 220 << 9, 550 << 9,
                         0xDDDDDD00, 1, 2, FALSE, TRUE, TRUE, 16 * 640, "*"};

static wimp_box refbox = {{20 << 9, 510 << 9}, {220 << 9, 550 << 9}};

static struct
{
  char timestamp[8];
  unsigned int length;
  unsigned int attr;
  unsigned int type;
  unsigned int filetype;
  char name[FILENAMELEN];
}
dirinfo;

static int make_drop(char *object, char *text, drawfile_drop *ref)
{
  drawfile_drop *drop = (drawfile_drop *) object;
  
  memcpy(drop, ref, 40);
  drop->bbox = refbox;
  drop->bbox.min.y = drop->bbox.max.y - (((drop->size * 180) << 2) / 600);
  strcpy(drop->text, text);
  drop->obj_size = (36 + strlen(drop->text) + 4) & (~3);
  refbox.max.y -= (((drop->size * 180) << 2) / 600);

  if (refbox.max.y < (70 << 9))
  {
    refbox.min.x += 250 << 9;
    refbox.min.y  = 510 << 9;
    refbox.max.x += 250 << 9;
    refbox.max.y  = 550 << 9;
    if (refbox.min.x > (750 << 9))
    {
      page_stack *page = (page_stack *) LinkList_LastItem(&stack);
      page->overstep = 250 << 9;
      page->overmax = refbox.min.x - (750 << 9);
    }
  }

  return(drop->obj_size);
}

static char *do_scan(char *src, int filetype, char *object, drawfile_drop *ref)
{
  int item = 0, numread;

  while (item != -1)              /* Then do the file conversion */
  {
    err = swi(OS_GBPB, R0, 12, R1, src, R2, &dirinfo, R3, 1,
              R4, item, R5, sizeof(dirinfo), R6, 0,
              OUT, R3, &numread, R4, &item, END);
    if (err)
    {
      printf("%s\n", err->errmess);
      break;
    }
    if (numread == 1 && dirinfo.filetype == filetype)
    {
      object += make_drop(object, dirinfo.name, ref);
    }
  }
  return(object);
}

int filetype = 0xFFF;

ErrorPtr scan_directory(char *src)
{
  char newsrc[FILENAMELEN];
  char *object, *comma;
  int count, total = 3;
  page_stack *page;

  comma = strchr(src, ',');
  if (comma)
  {
    *comma = '\0';
    sscanf(&comma[1], "%X", &filetype);
  }
  strcpy(performing, src);

  sprintf(newsrc, LOCAL_ROOT ".%s", src);
  render_page(newsrc);
  page = (page_stack *) LinkList_LastItem(&stack);
  sprintf(newsrc, LOCAL_ROOT ".%s.*", src);
  swi(OS_FSControl, R0, 28, R1, newsrc, R3, 0, OUT, R3, &count, END);
  total += count;
  sprintf(newsrc, LOCAL_ROOT ".%s.Templates.*", src);
  swi(OS_FSControl, R0, 28, R1, newsrc, R3, 0, OUT, R3, &count, END);
  total += count;
  sprintf(newsrc, FIXED_ROOT ".Templates.%s.*", src);
  swi(OS_FSControl, R0, 28, R1, newsrc, R3, 0, OUT, R3, &count, END);
  total += count;
  if (page->overlay)
    Heap_Free(page->overlay, DYN_VOL);
  page->overlay = Heap_Alloc(Emptylen + total * 60, DYN_FIX);
  memmove(page->overlay, Emptydata, Emptylen);
  object = page->overlay + Emptylen;
  page->overleft = 0;
  page->overmax  = 0;
  page->overstep = 0;

  refbox.min.x =  20 << 9;
  refbox.min.y = 510 << 9;
  refbox.max.x = 220 << 9;
  refbox.max.y = 550 << 9;

  refitem.isfile  = TRUE;
  refitem.islocal = TRUE;
  object += make_drop(object, "Files", &refhead);
  sprintf(newsrc, LOCAL_ROOT ".%s", src);
  object = do_scan(newsrc, filetype, object, &refitem);
  object += make_drop(object, " ", &refhead);

  refitem.isfile = FALSE;
  object += make_drop(object, "Your Templates", &refhead);
  sprintf(newsrc, LOCAL_ROOT ".%s.Templates", src);
  object = do_scan(newsrc, filetype, object, &refitem);  
  object += make_drop(object, " ", &refhead);

  refitem.islocal = FALSE;
  object += make_drop(object, "Master Templates", &refhead);
  sprintf(newsrc, FIXED_ROOT ".Templates.%s", src);
  object = do_scan(newsrc, filetype, object, &refitem);
  object += make_drop(object, " ", &refhead);

  page->over_len = object - page->overlay;
  swi(Wimp_ForceRedraw, R0, -1, R1, 0, R2, 0, R3, screen_size.x, R4, screen_size.y, END); 
  return (NULL);
}
