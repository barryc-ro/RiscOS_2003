/**********************************************************************/
/*                                                                    */
/* File: Omega.Log-on.Source.c.logon    			      */
/*                                                                    */
/* Copyright (C) 1996 - Acorn Computers Ltd., Cambridge, England      */
/* 	     	      	      		      		 	      */
/* This file contains the routines to log an omega box user onto the  */
/* correct file server as the correct user.  	       	    	      */
/*     	     	    	     	       				      */
/**********************************************************************/
#include "internal.h"
#include <stdio.h>
#include <string.h> /* For strlen */
#include <stdlib.h>
#include <ctype.h>

/**********************************************************************/
/* A few local bits and bobs.                                         */
/**********************************************************************/
static char *remote_host[30];  /* The fileserver to connect to        */
static char *remote_path[40];  /* The path on the server to use       */
static char *remote_user[10];  /* The remote user name if different   */
char *__mount="NCDHome";
_kernel_swi_regs _omega_r;

/**********************************************************************/
/* _kernel_oserror *__omega_off(char mname)                           */
/**********************************************************************/
/* Log off a mount.                                                   */
/**********************************************************************/
_kernel_oserror *__omega_logoff(char *mname)
{
  _omega_r.r[0]=0;
  if (mname != NULL) {
    _omega_r.r[1]=(int)mname;
  }
  else {
    _omega_r.r[1]=(int)__mount;
  }
  return (_kernel_swi(NFS_DISMOUNT,&_omega_r,&_omega_r));
}

/**********************************************************************/
/* _kernel_oserror *__omega_find_mount(char *user);                   */
/**********************************************************************/
/* Given a user name, determin the host name and path to connect to   */
/**********************************************************************/
_kernel_oserror *__omega_find_mount(char *user)
{
  FILE *usersfile;
  char line[140];
/* Check if these are of a useful length */
  char username[10]; /* 10 char user name */
  char server[30];   /* 30 char server name */
  char path[40];     /* 40 char path */
  char realuser[10]; /* real user name for login */
  int  params=0;

/*
 * First off attempt to open the remote password file. For simplicity
 * I have assumed a location of /etc/passwd on the remote host because
 * thats where UNIX expects it. A better location may be needed.
 */
  if ((usersfile=fopen(userfile,"r"))==NULL) {
      return NULL;
  }

/* Reset the path for later test */
  *path='\0';

/* We now have a users file. Dig around inside it. */
  while (!feof(usersfile)) {

/*
 * Get a line and check for end of file all at once. When we hit the
 * end of file marker, fgets returns NULL.
 */
    if (!(fgets(line,sizeof(line),usersfile))) {
      return NULL;
    } /* EOF */

/* Check for comment lines. */
    if ((*line=='#') || (*line==';') || (*line=='|')) continue;

/* See if this is a meaningful line. */
    params=sscanf(line,"%s %s %s %s", username, server, path, realuser);

/* Check for a valid line (params == 3 or 4) */
    if ((params < 3) && (params > 4)) {
      *path='\0';
      continue;
    }

/* Check for a user match */
    if (!stricmp(user, username)) break; /* We have a match */

/* Otherwise look at the next line. */
  }

/* Otherwise store the user information */
  memcpy(remote_host,server,30);
  memcpy(remote_path,path,40);
  if (params==3) memcpy(remote_user,user,10);
  else memcpy(remote_user,realuser,10);

/* return cleanly. */
  return NULL;
}

/**********************************************************************/
/* _kernel_oserror *__omega_mount(char *user, char *passwd, char ...  */
/**********************************************************************/
/* Given a username, password and a pointer to a buffer of 256 bytes, */
/* create a mount called "Home" and pass the users home path back in  */
/* the path variable. (Must be under 256 bytes)                       */
/**********************************************************************/
_kernel_oserror *__omega_mount(char *user, char *passwd, char *mname)
{
  _kernel_oserror *e;

/* Log on to the remote host as this user */
  _omega_r.r[0]=(int)remote_host;
  _omega_r.r[1]=(int)remote_user;
  _omega_r.r[2]=(int)passwd;
  e=_kernel_swi(NFS_SETUSER,&_omega_r,&_omega_r);

  if (e) {
    return e;
  }

/* mount the home directory */
  _omega_r.r[0]=(int)remote_host;
  if (mname != NULL) {
    _omega_r.r[1]=(int)mname;
  }
  else {
    _omega_r.r[1]=(int)__mount;
  }
  _omega_r.r[2]=(int)remote_path;
  return(_kernel_swi(NFS_MOUNT,&_omega_r,&_omega_r));
}

/**********************************************************************/
/* char *stricmp(char *sting, char *index)                            */
/**********************************************************************/
/* Given two strings, look case insensitivly to establish if index is */
/* the same as string, case insensitivly.    		     	      */
/**********************************************************************/
int stricmp(char *string, char *index)
{
int d=0;

  while (1) {
    d = toupper(*string++) - toupper(*index++);
    if (d != 0) return d;
    if (*string == 0) return 0;     /* no need to check c2 */
    }
  return 0;
}

/**********************************************************************/
/* _kernel_oserror *OmegaLogon(char *user, char *passwd, char *mname) */
/**********************************************************************/
/* Attempts to log in the named user with the password provided under */
/* the mount name (mname) specified. 	      	       		      */
/**********************************************************************/
_kernel_oserror *OmegaLogon(char *user, char *passwd, char *mname)
{
_kernel_oserror *e;

/* Sanity check a few bits. */
#if 0
  if (!user || !*user || !path) {
    return NULL;
  }
#endif

/*
 * What we now need to do is find the host and path info associated
 * with this user name. We can do this via NFS to a mounts file
 * organised by username, host and path.
 */

  e=__omega_find_mount(user);
  if (e) return e;

/*
 * Having found the mount, we should now attempt to mount it using
 * the password we had before.
 */
  return __omega_mount(user, passwd, mname);
}

/**********************************************************************/
/* extern _kernel_oserror OmegaLogoff(char *path)                     */
/**********************************************************************/
/* Given a users mount name , dismount the users area.                */
/**********************************************************************/
_kernel_oserror *OmegaLogoff(char *mname)
{
  return(__omega_logoff(mname));
}
