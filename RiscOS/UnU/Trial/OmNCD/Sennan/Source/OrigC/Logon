/**********************************************************************/
/*                                                                    */
/* File: Omega.Log-on.Source.c.logon    			      */
/*                                                                    */
/* Copyright (C) 1996 - Acorn Computers Ltd., Cambridge, England      */
/* 	     	      	      		      		 	      */
/* This file contains the routines to log an omega box user onto the  */
/* correct file server as the correct user.  	       	    	      */
/*     	     	    	     	       				      */
/**********************************************************************/
#include "internal.h"
#include <stdio.h>
#include <stdlib.h>

/**********************************************************************/
/* These are the exported functions from this file                    */
/**********************************************************************/
_kernel_oserror *__omega_find_mount(char *user);
_kernel_oserror *__omega_mount(char *user, char *passwd, char *path);

/**********************************************************************/
/* These are the local bits and bobs.                                 */
/**********************************************************************/
static char *remote_host[30];  /* The fileserver to connect to       */
static char *remote_path[40];  /* The path on the server to use      */
static char *remote_user[10];  /* The remote user name if different  */

/**********************************************************************/
/* _kernel_oserror *__omega_find_mount(char *user);                   */
/**********************************************************************/
/* Given a user name, determin the host name and path to connect to   */
/**********************************************************************/
_kernel_oserror *__omega_find_mount(char *user)
{
  FILE *usersfile;
  char line[140];
/* Check if these are of a useful length */
  char username[10]; /* 10 char user name */
  char server[30];   /* 30 char server name */
  char path[40];     /* 40 char path */
  char realuser[10]; /* real user name for login */
  int  params=0;

/*
 * First off attempt to open the remote password file. For simplicity
 * I have assumed a location of /etc/passwd on the remote host because
 * thats where UNIX expects it. A better location may be needed.
 */
  if ((usersfile=fopen("NFS::AUN.$.etc.passwd","r"))==NULL) {
#ifdef ERRNO
/* we couldnt open the file for some reason. */
      errno=ErrorUserFile;
#endif
      return NULL;
  }

/* Reset the path for later test */
  *path='\0';

/* We now have a users file. Dig around inside it. */
  while (!feof(usersfile)) {

/*
 * Get a line and check for end of file all at once. When we hit the
 * end of file marker, fgets returns NULL.
 */
    if (!(fgets(line,sizeof(line),usersfile))) {
#ifdef ERRNO
      errno=UserNotFound;
#endif
      return NULL;
    } /* EOF */

/* Check for comment lines. */
    if ((*line=='#') || (*line==';') || (*line=='|')) continue;

/* See if this is a meaningful line. */
    params=sscanf(line,"%s %s %s %s", username, server, path, realuser);

/* Check for a valid line (params == 3 or 4) */
    if ((params < 3) && (params > 4)) {
      *path='\0';
      continue;
    }

/* Check for a user match */
    if (!stricmp(user, username)) break; /* We have a match */

/* Otherwise look at the next line. */
  }

/* Otherwise store the user information */
  memcpy(remote_host,server,30);
  memcpy(remote_path,path,40);
  if (params==3) memcpy(remote_user,user,10);
  else memcpy(remote_user,realuser,10);

/* return cleanly. */
#ifdef ERRNO
  errno=NoError;
  return (_kernel_oserror *)errno;
#else /* !ERRNO */
  return NULL;
#endif /* ERRNO */
}

/**********************************************************************/
/* _kernel_oserror *__omega_mount(char *user, char *passwd, char ...  */
/**********************************************************************/
/* Given a username, password and a pointer to a buffer of 256 bytes, */
/* create a mount called "Home" and pass the users home path back in  */
/* the path variable. (Must be under 256 bytes)                       */
/**********************************************************************/
_kernel_oserror *__omega_mount(char *user, char *passwd, char *path)
{
  _kernel_oserror *e;
  _kernel_swi_regs r;
  char *mount="NCDHome";

#ifndef VERBOSE
  printf("User:   %s\n",remote_user);
  printf("Passwd: %s\n",passwd);
  printf("Host:   %s\n",remote_host);
  printf("Path:   %s\n",remote_path);
#endif

/* Log on to the remote host as this user */
  r.r[0]=(int)remote_host;
  r.r[1]=(int)remote_user;
  r.r[2]=(int)passwd;
  e=_kernel_swi(NFS_SETUSER,&r,&r);

  if (e) {
#ifdef ERRNO
    errno=UserNotFound;
#endif
    return e;
  }

/* mount the home directory */
  r.r[0]=(int)remote_host;
  r.r[1]=(int)mount;
  r.r[2]=(int)remote_path;
#ifdef ERRNO
  e=_kernel_swi(NFS_MOUNT,&r,&r);
  if (e) {
    errno=ErrorMountHome;
  }

  return e;
#else
  return(_kernel_swi(NFS_MOUNT,&r,&r));
#endif /* ERRNO */
}
