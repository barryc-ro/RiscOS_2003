/**********************************************************************/
/*                                                                    */
/* File: Omega.Log-on.Source.c.veneers   			      */
/*                                                                    */
/* Copyright (C) 1996 - Acorn Computers Ltd., Cambridge, England      */
/* 	     	      	      		      		 	      */
/* This file contains the entry points into the logon routines for    */
/* the Omega device (Network Computing Device).	      	       	      */
/*     	     	    	     	       				      */
/**********************************************************************/

#include "internal.h"
#include <stdio.h>
#ifdef ERRNO
#include <errno.h>
#endif /* ERRNO */

/*
 * Always nice to predefine functions!
 */
_kernel_oserror *OmegaLogon(char *user, char *passwd, char *path);
_kernel_oserror *OmegaLogoff(char *path);

/**********************************************************************/
/* _kernel_oserror *OmegaLogon(char *user, char *passwd, char *path)  */
/**********************************************************************/
/* Attempts to log in the named user with the password provided and   */
/* returns the path to the users home directory in path. path is      */
/* assumed to be at least 256 bytes in size, although where in memory */
/* this is is not important.  	       	     	      	       	      */
/**********************************************************************/
_kernel_oserror *OmegaLogon(char *user, char *passwd, char *path)
{
_kernel_oserror *e;

/* Sanity check a few bits. */
#ifdef ERRNO
  errno=NoError;
#endif /* ERRNO */

  if (!user || !*user || !path) {
#ifdef ERRNO
    errno=BadParams;
#endif /* ERRNO */
    return NULL;
  }

/*
 * What we now need to do is find the host and path info associated
 * with this user name. We can do this via NFS to a mounts file
 * organised by username, host and path.
 */

  e=__omega_find_mount(user);
#ifdef ERRNO
  if (e) {
    errno=ErrorFindMount;
    return e;
  }
  else if (errno) {
    return NULL;
  }
#else /* ERRNO */
  if (e) return e;
#endif

/*
 * Having found the mount, we should now attempt to mount it using
 * the password we had before.
 */
#ifdef ERRNO
  e=__omega_mount(user, passwd, path);
  if (e) {
    errno=ErrorMountHome;
    return e;
  }

  errno=NoError;
  return (_kernel_oserror *)errno; /* This is NULL :) */
#else /* !ERRNO */
  printf("Passwd (veneers) %s",passwd);
  return __omega_mount(user, passwd, path);
#endif /* ERRNO */
}

/**********************************************************************/
/* extern _kernel_oserror OmegaLogoff(char *path)                     */
/**********************************************************************/
/* Given a path to a mount point, dismount the users area.            */
/**********************************************************************/
_kernel_oserror *OmegaLogoff(char *path)
{
#ifdef ERRNO
  _kernel_oserror *e;

  e=__omega_logoff(path);
  if (e) {
    errno=ErrorLogoff;
    return e;
  }

  errno=NoError;
  return (_kernel_oserror *)errno; /* see above */
#else /* !ERRNO */
  return(__omega_logoff(path));
#endif /* ERRNO */
}
