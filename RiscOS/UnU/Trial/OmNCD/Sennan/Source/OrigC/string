/**********************************************************************/
/*                                                                    */
/* File: Omega.Log-on.Source.c.string    			      */
/*                                                                    */
/* Copyright (C) 1996 - Acorn Computers Ltd., Cambridge, England      */
/* 	     	      	      		      		 	      */
/* This file contains the routines to log an omega box user onto the  */
/* correct file server as the correct user.  	       	    	      */
/*     	     	    	     	       				      */
/**********************************************************************/
#include <stdio.h>  /* For NULL */
#include <stdlib.h> /* For malloc */
#include <string.h> /* For strlen */
#include <ctype.h>  /* For toupper */

/**********************************************************************/
/* These are the functions we are exporting.                          */
/**********************************************************************/
int stricmp(char *string, char *index);
#ifdef FULLSTRING
char *strdup(char *s1);
char *strndup(char *s1, int size);
int strincmp(char *string, char *index, int size);
char *strnstr(char *string, char *index, int size);
char *strinstr(char *string, char *index, int size);
#endif /* FULLSTRING */

#ifdef FULLSTRING
/**********************************************************************/
/* char *strdup(char *s1)                                             */
/**********************************************************************/
/* strdup stand for "STRing DUPlicate". Go figure :) This returns a   */
/* copy of s1 on success or a NULL pointer on failure	  	      */
/**********************************************************************/
char *strdup(char *s1)
{
char *s2, *p;

  if (s1==NULL) return NULL;

  s2=(char *)calloc(strlen(s1)+1,sizeof(char));
  if (s2==NULL) return NULL;

  if (*s1==0) *s2=0;

  p=s2;
  while(*s1 != '\0') {
    *p=*s1;
    p++; s1++;
  }
  *p='\0';

  return s2;
}

/**********************************************************************/
/* char *strndup(char *s1, int size)                                  */
/**********************************************************************/
/* Same as strdup except that the amount of bytes to copy is known    */
/**********************************************************************/
char *strndup(char *s1, int size)
{
char *s2;

  if (s1==NULL) return NULL;

  s2=(char *)calloc(size+1,sizeof(char)); /* +1 to be safe? */
  if (s2==NULL) return NULL;

  memcpy(s2,s1,size);

  return s2;
}

/**********************************************************************/
/* char *strincmp(char *sting, char *index, int size)                 */
/**********************************************************************/
/* Given two strings, look case insensitivly to establish if the      */
/* first "size" chars in "string" are "index"	              	      */
/**********************************************************************/
int strincmp(char *string, char *index, int size)
{
int d=0;

  while (size-- > 0) {
    d = toupper(*string++) - toupper(*index++);
    if (d != 0) return d;
    if (*string == 0) return 0;     /* no need to check c2 */
    }
  return 0;
}

#endif /* FULLSTRING */

/**********************************************************************/
/* char *stricmp(char *sting, char *index)                            */
/**********************************************************************/
/* Given two strings, look case insensitivly to establish if index is */
/* the same as string, case insensitivly.    		     	      */
/**********************************************************************/
int stricmp(char *string, char *index)
{
int d=0;

  while (1) {
    d = toupper(*string++) - toupper(*index++);
    if (d != 0) return d;
    if (*string == 0) return 0;     /* no need to check c2 */
    }
  return 0;
}

#ifdef FULLSTRING
/**********************************************************************/
/* char *strnstr(char *sting, char *index, int size                   */
/**********************************************************************/
/* Given a pointer to a string, and the size of the string, look to   */
/* see if we can find the index sequence requested. 	    	      */
/**********************************************************************/
char *strnstr(char *string, char *index, int size)
{
int i;
int count=0;

  while(1) {
    for (i=0;; i++) {
      char ch = index[i];
      if (count+i > size) return 0;
      if (ch == 0) return (char *)string;
      if (string[i] != ch) break;
    }
    count++;
    if (count > size) return 0;
    if (*string++ == 0) return 0;
  }
}

/**********************************************************************/
/* char *strinstr(char *sting, char *index, int size                  */
/**********************************************************************/
/* Given a pointer to a string, and the size of the string, look to   */
/* see if we can find the index char requested.      	    	      */
/**********************************************************************/
char *strinstr(char *string, char *index, int size)
{
int i;
int count=0;

  while(1) {
    for (i=0;; i++) {
      char ch = index[i];
      if (count+i > size) return 0;
      if (ch == 0) return (char *)string;
      if (toupper(string[i]) != toupper(ch)) break;
    }
    count++;
    if (count > size) return 0;
    if (*string++ == 0) return 0;
  }
}

#endif /* FULLSTRING */

