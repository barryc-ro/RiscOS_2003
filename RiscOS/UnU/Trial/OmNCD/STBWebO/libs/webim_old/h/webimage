/* webimage.h
 * public function prototypes for webimage library.
 */


#ifndef _webimage_h
#define _webimage_h

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

/* Structure for information on sprite output */
typedef struct
{
  int	x;		/* X size of image, in pixels */
  int	y;		/* Y size of image, in pixels */
  int	depth;          /* Bits per pixel (1..24) */
  BOOL	palette;	/* TRUE if palette in output sprite */
  int	size;           /* Max size of output sprite inc. headers + palette */
  BOOL	interlaced;	/* TRUE if interlaced source image (or progressive JPEG) */
  BOOL	mask;		/* TRUE if mask in output sprite */
} image_rec;

/* User-supplied fn that gets up to 'buflen' bytes from source image stream.
 * The return code is the number of bytes actually read into the buffer. If no
 * bytes could be read due to a fatal error or End Of File, then -1 should be
 * returned, otherwise getsrc_func() will be repeatedly called until 'buflen'
 * bytes have been fetched.
 */
typedef int (*getsrc_func) (char *buf, int buflen, void *user_get);

/* User-supplied fn that puts 'buflen' bytes to destination image data stream */
typedef void (*putdst_func) (char *buf, int buflen, void *user_put);

/* User-supplied fn that seeks to 'pos' bytes from the destination stream start */
typedef void (*seekdst_func) (int pos, void *user_put);

/* User-supplied fn that passes 'image_rec' to the calling program.
 * Returns FALSE if calling program doesn't like this size of image, and wants to
 * abort.
 */
typedef int (*imagerec_func) (image_rec *irec, void *user_put);

/* User flags word, for control of output sprite.
 *   bit 0 = behaviour of interlaced GIFs, PNGs & progressive JPEGs (ignored otherwise)
 *         = 0, render line-by-line as normal
 *         = 1, render in 'block mode' where lines of 8,4,2, and 1 are displayed
 *              or render in multiple passes (Progressive-JPEG)
 *   bit 1 = sprite colour depth for JPEGs and PiNGs (ignored otherwise)
 *         = 0, always produce FS-dithered 8bpp sprites with fixed desktop palette
 *         = 1, always produce 16bpp sprites for RISC OS 3.50 or later
 *   bits 2..31, reserved, must be 0.
 */
#define webimage_BLOCKDETAIL	0x00000001
#define webimage_DEEPSPRITE	0x00000002


/*
 * CompuServe GIF to Sprite translation routines.
 * GIF images are LZW compressed, with between 1 and 8 bits of colour depth.
 * Output sprites are of an appropriate number of bits depth, with mask and
 * palette set as required.
 */

/* Run translation.
 * Inputs are user functions to read the source (GIF) image, and write the
 * output (Sprite).
 * The function 'seekdst' is optional, and should be NULL if the output data
 * stream cannot support non-sequential access (eg, a network TCP stream).
 * The function 'irec' passes an image_rec struct pointer when enough of the
 * source image has been processed to obtain that information.
 * The user handles 'user_get' and 'user_put' are passed to the user functions
 * (see above).
 * The bit 'webimage_BLOCKDETAIL' in the 'flags' word controls whether interlaced
 * images (with seekdst) are written out in progressively finer detail, ala
 * NetScape. This facility allows the user to paste the resulting sprite to
 * screen as an 'approximation' with vertical strips of pixels which are 8
 * pixels high, then 4, 2 and 1 as the interlaced scans progress. Set flag to 1
 * for progressive detail ON, and this will be ignored if seekdst() is supplied
 * as NULL.
 * On exit, an error string is returned, or NULL if there was no error.
 */
extern char *gif2sprite(getsrc_func getsrc, putdst_func putdst, seekdst_func seekdst,
			imagerec_func irec, void *user_get, void *user_put,
			int flags);


/*
 * UNIX .xbm to Sprite translation routines.
 * .xbm images are ASCII encoded monochrome images. The output sprite file
 * always has a mask & palette.
 */

/* Run translation.
 * Inputs are user functions to read the source (.xbm) image, and write the
 * output (Sprite).
 * The function 'seekdst' is optional, and should be NULL if the output data
 * stream cannot support non-sequential access (eg, a network TCP stream).
 * The function 'irec' passes an image_rec struct pointer when enough of the
 * source image has been processed to obtain that information.
 * The user handles 'user_get' and 'user_put' are passed to the user functions
 * (see above).
 * 'flags' are currently ignored, and should be set to 0.
 * On exit, an error string is returned, or NULL if there was no error.
 */
extern char *xbm2sprite(getsrc_func getsrc, putdst_func putdst, seekdst_func seekdst,
			imagerec_func irec, void *user_get, void *user_put,
			int flags);


/*
 * JPEG JFIF to Sprite translation routines.
 * JPEG images are lossy, with between 1 and 24 bits of colour depth.
 * The output sprites depend largely on the 'flags' word on entry.
 *
 * Based on Release 6B1 of the Independant JPEG Group's code,
 * (C) 1991-1995, Thomas G. Lane.
 */

/* Run translation.
 * Inputs are user functions to read the source (.jpg) image, and write the
 * output (Sprite).
 * The function 'seekdst' is optional, and should be NULL if the output data
 * stream cannot support non-sequential access (eg, a network TCP stream).
 * The function 'irec' passes an image_rec struct pointer when enough of the
 * source image has been processed to obtain that information.
 * The user handles 'user_get' and 'user_put' are passed to the user functions
 * (see above).
 * The 'flags' bit 'webimage_DEEPSPRITE' forces output of 16bpp images (8bpp true
 * palette for greyscale images), suitable for display under RISC OS 3.50 or later.
 * The bit 'webimage_BLOCKDETAIL' in the 'flags' word controls whether progressively
 * encoded images (with seekdst) are written out in progressively finer detail
 * or output in a single pass, as with normal JPEGs.
 * On exit, an error string is returned, or NULL if there was no error.
 */
extern char *jpg2sprite(getsrc_func getsrc, putdst_func putdst, seekdst_func seekdst,
			imagerec_func irec, void *user_get, void *user_put,
			int flags);


/*
 * PNG to Sprite translation routines.
 * PNG 'PiNG' images are lossless, with between 1 and 48 bits of colour depth,
 * or up to 16 bits of greyscale depth.
 * The output sprites depend largely on the 'flags' word on entry.
 *
 * Based on Release 0.8-beta of the PNG library (C) 1995 Guy Eric Schalnat, Group 42, Inc.
 * and release 0.95-beta of the zLib library (C) 1995 Jean-loup Gailly and Mark Adler.
 */

/* Run translation.
 * Inputs are user functions to read the source (.png) image, and write the
 * output (Sprite).
 * The function 'seekdst' is optional, and should be NULL if the output data
 * stream cannot support non-sequential access (eg, a network TCP stream).
 * The function 'irec' passes an image_rec struct pointer when enough of the
 * source image has been processed to obtain that information.
 * The user handles 'user_get' and 'user_put' are passed to the user functions
 * (see above).
 * The 'flags' bit 'webimage_DEEPSPRITE' forces output of 16bpp images (8bpp true
 * palette for greyscale images), suitable for display under RISC OS 3.50 or later.
 * The bit 'webimage_BLOCKDETAIL' in the 'flags' word controls whether interlaced
 * images (with seekdst) are written out in progressively finer detail, ala
 * NetScape. This facility allows the user to paste the resulting sprite to
 * screen as an 'approximation'. Set flag to 1 for progressive detail ON, and this
 * will be ignored if seekdst() is supplied as NULL.
 * On exit, an error string is returned, or NULL if there was no error.
 */
extern char *png2sprite(getsrc_func getsrc, putdst_func putdst, seekdst_func seekdst,
			imagerec_func irec, void *user_get, void *user_put,
			int flags);

#endif
