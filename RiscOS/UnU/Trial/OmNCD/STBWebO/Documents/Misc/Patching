
Browser patching scenarios
--------------------------

In the event that the browser needs to be upgraded without
requiring a new ROM, either to fix bugs or to implement new features,
the following methods are, or could be made, available.

1) Load new support module
2) Load new copy of browser
3) Patch the browser in the ROM
4) Load new resources
5) Load new image DLLs

--------------------------

1) Load new support module

There are several support modules used by the browser that can be independently 
replaced whilst running without affecting anything else. These are

 a) HTTP transport 
 b) FTP transport 
 c) Gopher transport 
 d) Resolver

The only affect of loading new versions of these is that any transactions underway
at the time will be aborted.

[ Currently the browser doesn't cope well with the transport being
removed whilst in use - but this can be fixed by tightening up the error
handling. ]


2) Load new copy of browser

By loading a new copy of the browser off the server then everything can
be replaced. Since the browser would be already running by this point then
a loader application would probably be needed to send a message to the 
browser to kill itself and then load the new copy.

[ The browser should save all its state before doing this ie cookies,
favourites, passwords and history. Currently all of these except for history
can be stored and re-read. However if this only happened at initial connect
time to the server then there wouldn't be any state worth keeping.]


3) Patch the browser in the ROM

This would involve using ROM patch technology to patch areas of the
browser code. Depending on what areas were patched this might also mean
restarting the browser as in (2) above.

Note that this is only really likely to be feasible for small fixes as
designing a ROM patch for a C application is much more complicated than
for an assembler module. 


4) Load new resources

Any of the sprites used by the browser can be replaced individually
whilst the browser is running. However the changes would only be 
noticed if the toolbar was toggled on and off unless the browser
noticed when sprites were changed - or if a screen redraw were forced
when the sprites were loaded.

The Resource file that defines the toolbar can be changed but the
browser would need to be restarted or extra code would be needed to 
allow it to be changed while running.


5) Load new image DLLs

In the NC browser the image codecs are linked in directly. In the original
browser (ANT Fresco) the codecs are stored as DLLs that are loaded when
needed. It should be possible to extend this scheme to use prelinked code
and load code off the server if it is newer.

Simon Middleton
Acorn Network Computing
25 July 1996

