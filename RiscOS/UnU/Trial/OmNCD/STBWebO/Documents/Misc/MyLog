
At last the definitive guide to what I have done on the common browser code.
Organised by file and subject rather than function by function.
I've probably missed something - I'll try and keep this up to date now.

===========================
Changes up to 28 March 1996
===========================

access.c
--------

Targetting:
  Added windowtarget field to access_d, allocated in http_fetch_alarm(),
  freed in free_item(). This isn't then used currently. It needs a target
  adding to frontend_visit() which will then have to possibly move the 
  document from the fe_view it thought it was downloading to to the one
  actually specified. Have no evidence that this feature is actually 
  used currently - and anyway it is useless to STBWeb.

Cookies:
  http_fetch_start() calls cookie_add_headers() to check whether any
  cookies need to be sent to this URL.

  http_fetch_alarm() parses the set-cookie headers.

  access_init() calls cookie_read_file().
  access_tidyup() calls cookie_write_file().
    Doing these here keeps the cookie code specific to this file.

Others:
  access_url() on a file: of an unknown type calls complete() immediately. This
  was #if it is now an if().
  
  frontend_url_punt() now passes the bfile back to the frontend.

  conditional includes on the module definitions as we have them arranged
  differently in the SrcFiler build tree.
  
?? Is my added header parsing in the right place 

backend.c
---------

doc_click:
  Due to window targetting, having doc_click handle everything directly
  wasn't working. So doc_click now does following
    If item object has a click functiom then call that.
    Else if item has an active aref pass it to antweb_handle_url().
    Else place the caret.
  And it is up to the object click function to call antweb_handle_url()
  or anteeb_place_caret() itself.

  antweb_handle_url() will goto fragment, call savedoc or frontend_open_url
  as appopropriate.

item_info:
  New function item_pos_info to allow us to decode client-side imagemaps.
  New flag be_item_info_USEMAP which ever function is used.

imagemap fetching:
  Sometimes imagemaps are stored in a spearate HTML file to where they
  are referenced. The strategy for dealing with this is as follows.
    - doc_complete calls imagemap_check_all_images() which scans the
      document and fetches the first external imagemap it find. 
    - When thatis downloaded and parsed (it talks directly to
      access_url) it does the next.
    - The current imagemap document handle being fetched is stored
      in 'fetching' in antweb_doc so that if the parent document is
      disposed of the fetching document is aborted.

view_status:
  Added extra information to frontend_view_status calls. See interface.h
  for details if extra parameters.

antweb_update_item_trim:
  This gives two etra feature over antweb_update_item().
   a) Can trim the box to update to avoid repainting borders that we know
      won't have changed.
   b) Has a flag wont_plot_all (defaults to TRUE). If we know the item 
      will fully plot the area to be updated then we can set this to FALSE.
      This allows the anti-twttering frontend to be more pleasant.

  It is used in doc_image_change: If the image doesn't have mask then it will
  replot all its area and can be updated smoothly by STBWeb.

targetting:
  All calls to frontend_open_url() now take an extra paramter of the window
  name at which they are targetted. This is either the target specified in
  the item in question, or if this is null the base target set in the 
  rid_header.

view_set_dimensions:
  To give the best use of screen space with frames the following strategy
  is adopted. A new frame or view is created with no scroll bars. If at
  any time frontend_view_set_dimensions() is called with a doc_width or
  doc_height greater than the work area size then a scroll bar is added.
  This can of course then mean that the other dimension will also need a
  scroll bar or (in the case of  the width) will need to be reformatted.
  So calls to frontend_view_set_dimensions() have been replaced with calls
  to be_set_dimensions(). This calls frontend_view_set_dimensions() and if
  non-zero is returned redoes the get_dim(), format(), set_dim() sequence.
  Luckily this process cannot repeat itself.

goto_fragment:
  If no fragment is specified then this does not now move to the top of
  the document.

doc_complete:
  To summarise the bits added here as there are a few:
    a) frames are layed out
    b) external imagemaps are downloaded
    c) the caret is only placed in a form item if config_mode_keyboard
    is not set.

refresh_document:
  Can refresh to a different document.

update_link:
  - Can be used to toggle the SELECTED state.
  - Uses trim to update the item plus its right hand side padding. This ensures
    that the link underlining in the spaces gets redrawn.

highlight_link:
  New flags to 
    a) only select one an item that is visible on screen (as given by
       frontend_view_bounds).
    b) include the original item passed in in the search.
  These give most of the functionality needed. Should extend it sometime to
  search vertically downwards also.

activate_link:
  If activating an input item then fake click on the far right rather than 
  the far left. This means that the caret gets placed at the end of the
  line in a text input box.

backend_place_caret:
  new function to give control over where the backend thinks the caret is.

config.c
--------

config_array:
  Changed the separate config items to a big structure. The structure contains
  offsets from the structure start, config_default_first now fixes up the 
  offsets to be real pointers.
  This was necessary to allow it to be ROMmed. 
  
config_init:
  Nasty hack to see if we have a new FontManager. 

config_read/write_file:
  Tries <Fresco$Config> before trying Fresco:Config.


cookie.c
--------

All new file to handle cookies. Interfaces to access.c transparently to the
user. 

HTMLPDTD.c
----------

tags[]:
  attribute pointers are now written in individually in HTMLDTDTableFixup().
  This is to allow ROMming.
  Lots of attributes added for frames and client-side imagemaps.
  
HTMLRISCOS.c
------------

INDENT_WIDTH
  Added INDENT_WIDTH #define in place of all the 8's around so I can change it.

targetting:
  Added target fields to aref, area, form. Also base target.

client-side imagemaps:
  New MAP and AREA tag decoding, HTStructured contains pointer to the current 
  map.
  
skip_space:
  new util function used aroud the place
  
frames:
  New FRAME, FRAMESET, NOFRAME, NOFRAMES tag decoding. HTStructured contains
  a stack of FRAMESETs. It also contains a count 'noframe' and there is a 
  global 'include_frames'. If 'include_frames' is TRUE then whilst
  'noframe' > 0 all input is discarded. The FRAMESET stacking is not
  currently safe from bad HTML and so should probably be cleaned up.

misc:
  strip_space is initialised to STRIP_SPACE in HTMLToRiscos. Ths stops the
  spurious new line that usually appeared at the top of documents.
  SCRIPT recognised so that anything within can be discarded. Some sites 
  don't put their scripts in comments - also measn that nasty COMMENT_HACK
  in sgml.c works better.

META_HTTPEQUIV:
  Rewrote to use parse_http_header and extended to record new URL as well as
  refresh time.

imagemap.c
----------
  New file to handle client-side imagemaps. Is called from backend.c 
  (doc_complete) to check for imagemaps to be loaded, backend_item_pos_info()
  to return info on pointer and oimage.c to handle clicks.

images.c
--------  

wide_table:
  wide_table flag in image structure. Set in image_render() and image_tile().
  Necessary for proper rendering in >8 bits on RISCOS 3.6+.
  image_init() checks SpriteExtend version to know whether to use wide tables
  or not.

scale to tag:
  If image sizes are given in HTML then we now scale to them (this can
  be #defined out). This is in image_render(). See also oimage.c for the
  sizing algorithm. image_render() prototype changed to pass in the sizes
  from the HTML.

layout.c
--------
  New file to handle laying out the frames. Called from backend.c 
  (doc_complete). Should be called from backend_reset_width() also.

licence.c
---------
  If STBWEB_ROM is set then a fixed licence number and string are used.
  This isn't verified or copied (as it's in ROM).

makeerror.c
-----------
  Added makeerrorf() for more flexible error reporting (uses varargs).

memwatch.c
----------
  Use frontend_ error handlers rather than wimp_reporterror().

obullet.c
---------
  BULLET_INDENT #define used for the width (it took ages to find this was
  where the main indent width came from!).
  BULLET_CHAR #define used for the bullet character so I could use the real
  bullet character rather than *.

oimage.c
--------

scale to tag:
  If image sizes are given in HTML then we now scale to them (this can
  be #defined out). See description of algorithm in oimage_size().
  
selection:
  If the image is selected then the border is drawn even if it is meant
  to be zero width. New fn render_item_outline used for border.
  
imagemaps:
  oimage_click() reworked to 
    a) handle a click on a client-side imagemap.
    b) active link highighting.
    c) call new fn antweb_handle_url or antweb_place_caret as 
       backend_doc_click() no longer does this for us.
  (c) was needed to allow targetting to work.
       
oinput.c
--------  

update optimisation:
  To start improving the redraw on the STB (where Wimp_UpdateWindow often
  can't be used due to anti-twitter filter destructively changing the screen)
  new function oinput_update_box created to trim the area of the
  object that actually changes. Only used in oinput_key currently.
  
redraws:
  extra parameters to image_render. Use of render_item_outline().

oselect.c
---------
  Use of render_item_outline() and render_colour_HIGHLIGHT.
  Added coordinates of top right of object to call to 
  frontend_menu_raise().

otextarea.c
-----------
  Changed antweb_update_item to _trim as in oinput.c to cut down flicker
  on STBWeb.
  Use of render_item_outline() and render_colour_HIGHLIGHT.

render.c
--------

render_colour_HIGHLIGHT:
  Added new colour type render_colour_HIGHLIGHT. This is used for cursor
  highlighting (ie SELECTED bit) but also maps to the active link colour
  (ALINK) used in some pages as this is more often visible than the VLINK
  colour previously used (and won't confuse matters if VLINK is ever
  implemented).

misc:
  Ignore render_plinth_RIM if ANTI_TWITTER.
  new function render_item_outline() for selection boxes.
  
rid.c
-----
  free and connect functions for frames and imagemaps, targets added to
  aref and form. new strings in rid_header freed.
  
SGML.c
------
  Added a patch to end_element() that I found on the W3 site which 
  significantly improves behaviour in the face of bad nesting.
  Added a really nasty hack to cope with <!-- > type comments. Seems to 
  work OK. If this lot isn't replaced then much more needs doing to extract
  JavaCode and also to copw with entities that aren't ';' terminated.

spr2sprt.c
----------
  Conditional include on webimage as we have it ina different place.

threads.c
---------
  In thread_start we call new assembler function sutil_get_relocation_offsets()
  to get the relocation offsets so that we can insert them at the bottom
  of the new stack chunk. This was about the last thing trscked down needed to
  allows us to ROM STBWeb.

util.c
------

flexmem_shift:
  noshift now records the previous slot extend function and registers a 
  local no_budge function (rather than the one from RiscOSLib).
  This is because the ROM Risc_OSLib is older than the release one and 
    a) starts off in budged state
    b) doesn't export the budge/nobudge functions.

wait_for_release:
  new function - waits for mouse release or defined period to elapse.

parse_http_header:
  new function - used in cookie.c and htmlriscos.c (HTTP-EQUIV) to parse
  a semi-colon list of NAME=VALUE pairs. Has a few wrinkles for coping
  with unvalues NAMED and unnamed VALUES.

skip_space:
  new function - skips spaces.
 
===========================
Changes up to 30 April 1996
===========================

access.c
--------

Exported cache_insert() and scrapfile_name() to backend so frontend
can use the cache.

backend.c
---------

backend_reset_width also calls be_set_dimensions()

added various new functions
  temp_file_name and temp_file_register call access functions exported above.
    used for temporary history and mailto files

  check_meta gets back the value of an HTML META item.
    used for embeddig commands to STBWeb

  select_item will select any single item.
  find_selected will find the first selected item in a page.
    These are used in the clipboard and hotlist support

Fixed item_pos_info() several times (the usemap feature of it)

Disabled link following when ctrl held down so selection can be done.

Two new fields added to tfronedn_view_dimensions so that we can lay out
frames ignoring any margin that had been specified.

config.c
--------

cookie enable flag

htmlriscos.c
------------

all META items are now stored in the rid_header so that they can be retrieved
by the new backend function.

layout.c
--------

Minor mods to add spacing between frames to improve nested frame files.

oimage.c
--------

ctrl will select image rather than follow link.

redraw will draw box if selected whether a link or not.

experimented with writing alt text - commented out for now.

render.c
--------

rener_link_colour() will return HIGHLIGHT for all items not just links.

rid.c
-----

free meta items

THE END - SO FAR
