A WIMP message protocol for servicing URLs of an unknown method.
================================================================

When an application wishes for a URL to be opened but does not know
how to, it should broadcast a WIMP message that event data of which is
in the following form:

union {
  char *ptr;
  int offset;
} string_value;

struct {
    wimp_msghdr hdr;
    union {
	char url[236];
	struct {
	    int tag;
	    string_value url;
	    int flags;
	    string_value body_file;
	    string_value target;
	} indirect;
    } data;
} event_data;

If the string representing the URL that needs to be opened is less than
236 bytes long and no body file or window target needs to be specified
then it may be sent in the array of bytes event_data.data.url.  

Otherwise the indirect form must be used. The tag value
event_data.data.indirect.tag should be set to zero. Each of the
'string_value' fields above can then take one of three values.

 = 0   
  	field has no value.

 < 236 
 	field is a byte offset from the start of the message data area
        (&event_data.data) to the start of a string in the message
        body) not neceesarily word-aligned.

 >= &01800000 
 	field is a pointer to a string in shared memory (RMA or
        dynamic area).

 other values reserved.

The flags are currently all reserved and should be set to zero.

The WIMP message wimp_MOPENURL, number 0x4AF80, should be broadcast
with the above data, with an event code of wimp_ESENDWANTACK.

When an application receives the about WIMP message it should first
determine where the URL is stored by testing the length of the string
in event_data.data.url.  If this is non-zero it should use the
immediate string otherwise it should use the indirected strings.  The
application should examine the string and determine whether it can
service the request.  If it can service the request it should
acknowledge the WIMP message before it next polls the WIMP manager.
If it can not service the request it should simply ignore the message.

In the indirected case the application should also check the size of the
message block to see which fields in the indirect block are valid. Older
applications will broadcast the indirect request with only the tag and
url fields. In this case the message will be 28 bytes long.

Note that for maximum compatibility with older receiving applications
the indirected URL field should always point into the RMA as otherwise
an older application will attempt to interpret the 'offset' form as a
direct pointer and read from zero page which may cause a data abort.

New applications should allow for the URL being in offset or direct
pointer form however for maximum flexibility.

If the requesting application receives a 'bounced' version of the WIMP
message it should try to start an application to open the URL.  It
does so by issuing a Wimp_StartTask SWI with the command
'URLOpen_<scheme> <URL>'.  If this raises an error the appliaction
should notify the user that the URL could not be followed.

If no 'bounce' is received then the application should assume that the
URL has been opened by some other application.

This message may be sent or handled by a number of applications.  A
WWW browser will send the message when the user tries to follow a link
with a method that is not supported internally to the browser.  The
browser may also respond to the message when the method is 'HTTP'.  An
email or news application should examin URLs and respond to those that
have a method of 'mailto' or 'news' (and maybe 'nntp').  This
application may also allow the user to menu over the body of a mail or
news item, try to pick out a fragment of text below the pointer that
looks like a URL, and broadcast a request made from this.  An FTP
client should detect requests with a method of 'FTP' and service them
accordingly.

Applications should, as well as accepting the WIMP message, provide a
startup option that allows a URL to be specified on the command line.
They should then set appropriate aliases to start the application when
a URL of a known scheme is found.  Thus a WWW browser should have in
its !Boot file a line such as:

	if "<Alias$URLOpen_HTTP>" = "" then Set Alias$URLOpen_HTTP Run <Obey$Dir> -URL %%*0

