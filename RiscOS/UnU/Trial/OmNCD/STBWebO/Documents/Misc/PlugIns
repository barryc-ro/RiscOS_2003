
Complications for plug ins.

OBJECT

An object can consist of
  Code
  Data
  Arbitrary number of parameters
    each property has a name, a value and a type. The value may be another
    object (ie fetched separately).

The code may be something newly downloaded (ie some Java bytecode) or it
may be a reference to a previously downloaded bit of code that it expects
to be still available.



SIZING

The suggested size of an object may be specified in the INSERT tag. If 
there isn't one or the plugin can't or doesn't want to scale to that
size then it may adjust the size. It should do this in the
PLUGIN_OPENED message by changing the coordinate fields. it is likely
that the browser may then follow this by sending a RESHAPE message 
after reformatting the page round this new size.

Java.applet class has a resize method - does this need to be supported
also or can we assume that the plugin won't want to resize the object
whilst active.


Plug in HTML use
================

Netscape:
---------

<EMBED SRC="url" WIDTH=ccc HEIGHT=yyy ...>
<NOEMBED> ... </NOEMBED>

Embed can supposedly take arbitrary extra parameters but that is actually
illegal in SGML and cannot be parsed by most parsers. We need this tag
for shockwave but in that case there is only one extra attribute defined
'palette' - at least that is macromedia say. I have however seen some
other tags in use.

NOEMBED is pretty useless as it doesn't tell you whether there is a
plug-in available or not - they've 'fixed' this in Netscape 3 with more
JavaScript. If everyone uses this then there will be no way to get to
use plug-ins without the JavaScript.

Sun:
----

<APPLET CODEBASE="url" CODE="url" ALT="text" NAME="name"
    WIDTH=xxx HEIGHT=yyy ALIGN=align VSPACE=xxx HSPACE=yyy >
  <PARAM NAME="name" VALUE="value">
  ...
</APPLET>

CODE is where the Java actually is and will be fetched and launched. 
CODEBASE is a parameter for the applet to tell it from where to load 
further resources - without this attribute the applet uses the URL
of the document (or document BASE url if defiend).

All APPLET attributes and PARAM's are available through Java methods
in the java.applet class.

W3C:
----

<INSERT ID="name" CLASSID="url" CODE="url" DATA="url" TYPE="mimetype"
    WIDTH=xxx HEIGHT=yyy ALIGN=align VSPACE=xxx HSPACE=yyy BORDER=nnn
    USEMAP="url" ISMAP>
  <PARAM NAME="name" VALUE="value">
  ...
</INSERT>

+ some others that all HTML3 elements have.

Similar to APPLET and EMBED but more general. All their functionality
can be provided via INSERT and a few PARAM's.

CLASSID, CODE, TYPE work together to decide what kind of object we are
inserting.

Within the INSERT tag can be held alternative HTML to be displayed if
we cannot display the object embedded. This is equivalent to Netscape's
NOEMBED tag (which is pretty hopeless really).

This spec is still in flux - it will be supported eventually by all parties,
I believe, but at present it is only used by Microsoft for embedding OLE
objects. Java embedding is done via APPLET, Shockwave and all other
Netscape plugins via EMBED.

Talk back from Java to browser
------------------------------

AppletContext

showDocument(url, target)
getApplet(name)
getImage(url)
getAudioClip(url)

AppletStub

appletResize(w, h)
getAppletContext()
getParameter(string)
getParameterInfo()
getCodeBase()
getDocumentBase()

message_OPEN_URL needs to be extended to cope with targets. Possibly a good
idea to do any other extending that needs doing at the same time.

Shockwave
---------

<EMBED SRC="url" WIDTH=xxx HEIGHT=yyy PALETTE=background|foreground>
<NOEMBED></NOEMBED>

getNetText uri
  Load something as text

preloadNetThing uri
  get into cache ready for playing later

gotoNetMovie uri
  Load and play new movie
  
gotoNetPage uri
  Does an OPEN URL?

netDone
netError
  Poll status

netTextResult

getLatestNetID

<SCRIPT LANGUAGE="LiveScript"> seems to be an old version of "JavaScript"

application/x-director
 .dxr .dcr .dir extensions

VRML
----

Replay/EIDOS/MPEG
-----------------

Audio
-----

message_OPEN_URL
----------------

Extra flags
 optional window target (string)
 fetch but don't display (bit)
 opaque browser handle (word)

Returns message
 message_OPEN_URL_FETCHING
  contains access handle
 message_OPEN_URL_FETCHED
  contains access handle
 message_OPEN_URL_CANCEL

Use tag of 0x00000100 to mark new format (as long as first byte is
zero then it won't break existing users of the protocol).

Handling JavaScript via messages
--------------------------------

Should be possible...

The browser needs to do a lot of work associating objects and event
handlers.

The Java interpreter shouldn't need as much work other than some method
of maintaining state...

Self-modifying script means that document parsing wild be paused until
the script engine has finished and has passed back some new HTML or an
ACK message of some sort. This needs to be fast and so should avoid using
temporary files if possible. This means use body of message if possible
and either
 a) use multiple messages (a la RAM xfer)
 b) use RMA and a pointer (a la OPEN URL message)

message_SCRIPT_DATA
  contains SCRIPT element data or file name containing script data

message_SCRIPT_RESULTS
  contains HTML to be inserted into stream, can be null
  
message_SCRIPT_EVENT
  contains event number and associated info

message_DOCUMENT_UPDATE
  some kind of instructions for changing the state of form elements
  (eg ticking boxes, changing text in TEXTAREAs, etc).

  We have a document handle, a name for the object (passed somehow to
  the script engine) and a state.

PLUG_IN messages
----------------

All messages require a parent handle field to quote in further messages.
Passed to the plug-in when it is opened and passed back in all messages
from the plug-in.

Plugin data can be generalised as a list of NAME=VALUE or NAME=filename
pairs. These should either be passed in the open message

Wimp events
-----------

Presumably with the new wimp all wimp events for the plug in window 
will be passed direct to the plug in.

However it might be desirable for the mouse or key clicks to be passed
on to the browser. This can be done by the plug-in using Wimp_SendMessage
and the browser's task handle. Will this cause problems if the browser
subsequently calls Wimp_ProcessKey on an unknown key press?

Also I could probably so with a method for passing the input focus to a
plug in and back again.

