
// -----------------------------------------------------------------------------------------

// In htmlpdtd.h

        HTML_FRAME
        HTML_FRAMESET
        HTML_NOFRAMES

#define HTML_FRAME_MARGINWIDTH  0
#define HTML_FRAME_MARGINHEIGHT 1
#define HTML_FRAME_NAME         2
#define HTML_FRAME_NORESIZE     3
#define HTML_FRAME_SCROLLING    4
#define HTML_FRAME_SRC          5
#define HTML_FRAME_ATTRIBUTES   6

#define HTML_FRAMESET_COLS      0
#define HTML_FRAMESET_ROWS      1
#define HTML_FRAMESET_ATTRIBUTES 2

// -----------------------------------------------------------------------------------------

// In htmlpdtd.c

static attr frame_attr[] = {		/* FRAME attributes */
	{ "MARGINWIDTH"},
	{ "MARGINHEIGHT"},
	{ "NAME"},
	{ "NORESIZE"},
	{ "SCROLLING"},
	{ "SRC"},
	{ 0 }	/* Terminate list */
};

static attr frameset_attr[] = {		/* FRAMESET attributes */
	{ "COLS"},
	{ "ROWS"},
	{ 0 }	/* Terminate list */
};

    { "FRAME" , 0,	HTML_FRAME_ATTRIBUTES, SGML_EMPTY },
    { "FRAMESET" , 0,	HTML_FRAMESET_ATTRIBUTES, SGML_MIXED },
    { "NOFRAMES" , 0,	0, SGML_EMPTY },


// Extend

// A,BASE,FORM (and AREA when we do it)
	{ "TARGET"},
#define HTML_A_TARGET
#define HTML_BASE_TARGET
#define HTML_FORM_TARGET

// -----------------------------------------------------------------------------------------

// In rid.h

typedef char rid_frame_scrolling;

#define rid_scrolling_AUTO      0
#define rid_scrolling_YES       1
#define rid_scrolling_NO        2

struct rid_frame_item
{
        rid_frame_item          *next;          // linked list
        char                    *src;           // url of frame contents
        char                    *name;
        int                     marginwidth;    // pixels
        int                     marginheight;   // pixels
        rid_frame_scrolling     scrolling;
        char                    noresize;       // boolean
};

struct rid_frameset_item
{
        rid_frameset_item       *next;
        rid_frame_item          *frame_list, *frame_last;        // linked list of frames

        rid_stdunits            *widths;        // only px,pc,mult allowed
        int                     ncols;
        rid_stdunits            *heights;       //   if null then one of 100% assumed
        int                     nrows;
};

// extend structures

// rid_header
    char *windowname;
    char *basetarget;
    rid_frameset_item *frameset_list, *frameset_last;

// aref_item
    char *target;

// form_item
    char *target;

// -----------------------------------------------------------------------------------------

// rid.c

void rid_free_frame(rid_frame_item *p)
{
    while (p)
    {
        rid_frame_item *next = p->next;

        if (p->name)
            free(p->name);
        if (p->src)
            free(p->src);

        mm_free(p);
        p = next;
    }
}

void rid_free_frameset(rid_frameset_item *p)
{
    while (p)
    {
        rid_frameset_item *next = p->next;

        if (p->widths)
            mm_free(p->widths);
        if (p->heights)
            mm_free(p->heights);

        // free enclosed frames
        rid_free_frame(p->frame_list);

        mm_free(p);
        p = next;
    }
}

// and add to rid_free

void rid_frameset_item_connect(rid_header *rh, rid_frameset_item *f)
{
    if (rh->frameset_list)
    {
	rh->frameset_last->next = f;
	rh->frameset_last = f;
    }
    else
    {
	rh->frameset_list = rh->frameset_last = f;
    }
}

void rid_frame_item_connect(rid_frameset_item *fs, rid_frame_item *f)
{
    if (fs->frame_list)
    {
	fs->frame_last->next = f;
	fs->frame_last = f;
    }
    else
    {
	fs->frame_list = fs->frame_last = f;
    }
}


// -----------------------------------------------------------------------------------------

// HTMLRISCOS.c

static void new_frameset_item(HTStructured *me, char *cols, char *rows)
{
    rid_frameset_item *frameset;

    frameset = mm_calloc(1, sizeof(*frameset));
    if (cols)
        parse_units(cols, &frameset->widths, &frameset->ncols);
    if (rows)
        parse_units(cols, &frameset->heights, &frameset->nrows);

    // link into the list of framesets
    rid_frameset_item_connect(me->rh, frameset);

    // record current frameset
    me->frameset = frameset;
}

static void new_frame_item(HTStructured *me, int mwidth, int mheight, char *name, BOOL noresize, char *scrolling, char *src)
{
    rid_frame_item *frame;

    if (!me->frameset)
        return;

    frame = mm_calloc(1, sizeof(*frame));
    frame->marginwidth = mwidth < 2 ? 2 : mwidth;
    frame->marginheight = mheight < 2 ? 2 : mheight;
    frame->name = strdup(name);
    frame->noresize = noresize;

    frame->scrolling = rid_scrolling_AUTO;
    if (scrolling)
    {
        if (strcasecomp(scrolling, "yes") == 0)
            frame->scrolling = rid_scrolling_YES;
        else if (strcasecomp(scrolling, "no") == 0)
            frame->scrolling = rid_scrolling_NO;
    }
    frame->src = strdup(src);

    // link into the list of frames
    rid_frame_item_connect(me->frameset, frame);
}

static void HTRISCOS_start_element (

    // if in noframes area of a frameset then ignore all input
    if (!me->noframes) switch (element_number)
    {

    case HTML_FRAMESET:
        new_frameset_item(me,
            present[HTML_FRAMESET_COLS] ? value[HTML_FRAMESET_COLS] : 0,
            present[HTML_FRAMESET_ROWS] ? value[HTML_FRAMESET_ROWS] : 0);
        break;

    case HTML_FRAME:
        new_frame_item(me,
            present[HTML_FRAME_MARGINWIDTH] ? 2*atoi(value[HTML_FRAME_MARGINWIDTH]) : 8,
            present[HTML_FRAME_MARGINHEIGHT] ? 2*atoi(value[HTML_FRAME_MARGINHEIGHT]) : 8,
            present[HTML_FRAME_NAME] ? value[HTML_FRAME_NAME] : 0,
            present[HTML_FRAME_NORESIZE] ? 1 : 0,
            present[HTML_FRAME_SCROLLING] ? value[HTML_FRAME_SCROLLING] : 0,
            present[HTML_FRAME_SRC] ? value[HTML_FRAME_SRC] : 0);
        break;

    case HTML_NOFRAMES:
        me->noframes = TRUE;
        break;


    case HTML_BASE:
        ...
	if (present[HTML_BASE_TARGET])
	{
	    me->rh->basetarget = strdup(value[HTML_BASE_TARGET]);
	}



static void HTRISCOS_end_element (HTStructured * me, int element_number)



    case HTML_NOFRAMES: // ambiguous what closes the noframes
    case HTML_FRAMESET:
        me->noframes = FALSE;
        break;



// -----------------------------------------------------------------------------------------
