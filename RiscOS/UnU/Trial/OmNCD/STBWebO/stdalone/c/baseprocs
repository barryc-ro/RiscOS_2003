/* (C) Copyright ANT Limited 1996. All rights reserved. */

/* stdalone.c.baseprocs: generated by attrgen.py */
/* Email borris@ant.co.uk for support */

#include "sgmlparser.h"

        extern void starta(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finisha(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startabbrev(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishabbrev(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startacronym(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishacronym(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startaddress(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishaddress(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startapplet(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishapplet(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startarea(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startb(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishb(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startbase(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startbasefont(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startbig(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishbig(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startblockquote(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishblockquote(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startbody(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishbody(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startbr(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startcaption(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcaption(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startcenter(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcenter(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startcentre(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcentre(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startcite(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcite(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startcode(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcode(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startcol(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startcolgroup(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcolgroup(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startcolgroupsection(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishcolgroupsection(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startdd(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishdd(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startdfn(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishdfn(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startdir(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishdir(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startdiv(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishdiv(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startdl(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishdl(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startdt(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishdt(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startem(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishem(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startfig(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishfig(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startfont(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishfont(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startfootnote(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishfootnote(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startform(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishform(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startframe(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startframeset(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishframeset(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth1(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh1(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth2(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh2(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth3(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh3(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth4(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh4(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth5(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh5(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth6(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh6(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starth7(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishh7(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starthead(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishhead(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starthr(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void starthtml(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishhtml(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starti(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishi(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startimg(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startinput(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startisindex(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startkbd(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishkbd(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startli(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishli(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startlink(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startlisting(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishlisting(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startmap(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishmap(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startmath(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishmath(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startmenu(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishmenu(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startmeta(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startnextid(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startnoframe(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishnoframe(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startnoframes(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishnoframes(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startnote(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishnote(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startol(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishol(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startoption(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishoption(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startp(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishp(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startperson(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishperson(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startplaintext(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishplaintext(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startpre(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishpre(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startq(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishq(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starts(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishs(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startsamp(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishsamp(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startscript(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishscript(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startselect(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishselect(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startsgml(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void startsmall(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishsmall(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startstrike(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishstrike(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startstrong(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishstrong(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startstyle(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishstyle(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startsub(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishsub(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startsup(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishsup(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttable(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtable(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttbody(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtbody(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttd(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtd(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttextarea(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtextarea(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttfoot(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtfoot(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startth(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishth(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startthead(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishthead(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttitle(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtitle(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttr(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtr(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void starttt(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishtt(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startu(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishu(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startul(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishul(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startvar(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishvar(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
        extern void startxmp(SGMLCTX *context, ELEMENT *element, VALUES *attributes)
         { generic_start(context, element, attributes); }
        extern void finishxmp(SGMLCTX *context, ELEMENT *element)
         { generic_finish(context, element); }
/* eof */
