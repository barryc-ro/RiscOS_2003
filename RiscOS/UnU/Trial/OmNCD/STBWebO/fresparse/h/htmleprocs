/* (C) Copyright ANT Limited 1996. All rights reserved. */

/* fresparse/htmleprocs.h: generated by attrgen.py */
/* Email borris@ant.co.uk for support */

#ifndef __fresparse_htmleprocs_h
#define __fresparse_htmleprocs_h

#include "sgmlparser.h"

extern ELEMENT elements[NUMBER_SGML_ELEMENTS]; 
        extern void starta(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finisha(SGMLCTX *context, ELEMENT *element);
        extern void startabbrev(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishabbrev(SGMLCTX *context, ELEMENT *element);
        extern void startacronym(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishacronym(SGMLCTX *context, ELEMENT *element);
        extern void startaddress(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishaddress(SGMLCTX *context, ELEMENT *element);
        extern void startapplet(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishapplet(SGMLCTX *context, ELEMENT *element);
        extern void startarea(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startb(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishb(SGMLCTX *context, ELEMENT *element);
        extern void startbase(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startbasefont(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startbig(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishbig(SGMLCTX *context, ELEMENT *element);
        extern void startblockquote(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishblockquote(SGMLCTX *context, ELEMENT *element);
        extern void startbody(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishbody(SGMLCTX *context, ELEMENT *element);
        extern void startbodytext(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startbr(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startcaption(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcaption(SGMLCTX *context, ELEMENT *element);
        extern void startcenter(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcenter(SGMLCTX *context, ELEMENT *element);
        extern void startcentre(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcentre(SGMLCTX *context, ELEMENT *element);
        extern void startcite(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcite(SGMLCTX *context, ELEMENT *element);
        extern void startcode(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcode(SGMLCTX *context, ELEMENT *element);
        extern void startcol(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startcolgroup(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcolgroup(SGMLCTX *context, ELEMENT *element);
        extern void startcolgroupsection(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishcolgroupsection(SGMLCTX *context, ELEMENT *element);
        extern void startdd(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishdd(SGMLCTX *context, ELEMENT *element);
        extern void startdfn(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishdfn(SGMLCTX *context, ELEMENT *element);
        extern void startdir(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishdir(SGMLCTX *context, ELEMENT *element);
        extern void startdiv(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishdiv(SGMLCTX *context, ELEMENT *element);
        extern void startdl(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishdl(SGMLCTX *context, ELEMENT *element);
        extern void startdt(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishdt(SGMLCTX *context, ELEMENT *element);
        extern void startem(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishem(SGMLCTX *context, ELEMENT *element);
        extern void startembed(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startfig(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishfig(SGMLCTX *context, ELEMENT *element);
        extern void startfont(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishfont(SGMLCTX *context, ELEMENT *element);
        extern void startfootnote(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishfootnote(SGMLCTX *context, ELEMENT *element);
        extern void startform(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishform(SGMLCTX *context, ELEMENT *element);
        extern void startframe(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startframeset(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishframeset(SGMLCTX *context, ELEMENT *element);
        extern void starth1(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh1(SGMLCTX *context, ELEMENT *element);
        extern void starth2(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh2(SGMLCTX *context, ELEMENT *element);
        extern void starth3(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh3(SGMLCTX *context, ELEMENT *element);
        extern void starth4(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh4(SGMLCTX *context, ELEMENT *element);
        extern void starth5(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh5(SGMLCTX *context, ELEMENT *element);
        extern void starth6(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh6(SGMLCTX *context, ELEMENT *element);
        extern void starth7(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishh7(SGMLCTX *context, ELEMENT *element);
        extern void starthead(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishhead(SGMLCTX *context, ELEMENT *element);
        extern void starthr(SGMLCTX *, ELEMENT *, VALUES *);
        extern void starthtml(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishhtml(SGMLCTX *context, ELEMENT *element);
        extern void starti(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishi(SGMLCTX *context, ELEMENT *element);
        extern void startimg(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startinput(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startisindex(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startkbd(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishkbd(SGMLCTX *context, ELEMENT *element);
        extern void startli(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishli(SGMLCTX *context, ELEMENT *element);
        extern void startlink(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startlisting(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishlisting(SGMLCTX *context, ELEMENT *element);
        extern void startmap(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishmap(SGMLCTX *context, ELEMENT *element);
        extern void startmath(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishmath(SGMLCTX *context, ELEMENT *element);
        extern void startmenu(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishmenu(SGMLCTX *context, ELEMENT *element);
        extern void startmeta(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startnextid(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startnobr(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishnobr(SGMLCTX *context, ELEMENT *element);
        extern void startnoembed(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishnoembed(SGMLCTX *context, ELEMENT *element);
        extern void startnoframe(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishnoframe(SGMLCTX *context, ELEMENT *element);
        extern void startnoframes(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishnoframes(SGMLCTX *context, ELEMENT *element);
        extern void startnote(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishnote(SGMLCTX *context, ELEMENT *element);
        extern void startobject(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishobject(SGMLCTX *context, ELEMENT *element);
        extern void startol(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishol(SGMLCTX *context, ELEMENT *element);
        extern void startoption(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishoption(SGMLCTX *context, ELEMENT *element);
        extern void startp(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishp(SGMLCTX *context, ELEMENT *element);
        extern void startparam(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startperson(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishperson(SGMLCTX *context, ELEMENT *element);
        extern void startplaintext(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishplaintext(SGMLCTX *context, ELEMENT *element);
        extern void startpre(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishpre(SGMLCTX *context, ELEMENT *element);
        extern void startq(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishq(SGMLCTX *context, ELEMENT *element);
        extern void starts(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishs(SGMLCTX *context, ELEMENT *element);
        extern void startsamp(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishsamp(SGMLCTX *context, ELEMENT *element);
        extern void startscript(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishscript(SGMLCTX *context, ELEMENT *element);
        extern void startselect(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishselect(SGMLCTX *context, ELEMENT *element);
        extern void startsgml(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startsmall(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishsmall(SGMLCTX *context, ELEMENT *element);
        extern void startstrike(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishstrike(SGMLCTX *context, ELEMENT *element);
        extern void startstrong(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishstrong(SGMLCTX *context, ELEMENT *element);
        extern void startstyle(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishstyle(SGMLCTX *context, ELEMENT *element);
        extern void startsub(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishsub(SGMLCTX *context, ELEMENT *element);
        extern void startsup(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishsup(SGMLCTX *context, ELEMENT *element);
        extern void starttable(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtable(SGMLCTX *context, ELEMENT *element);
        extern void starttbody(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtbody(SGMLCTX *context, ELEMENT *element);
        extern void starttd(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtd(SGMLCTX *context, ELEMENT *element);
        extern void starttextarea(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtextarea(SGMLCTX *context, ELEMENT *element);
        extern void starttfoot(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtfoot(SGMLCTX *context, ELEMENT *element);
        extern void startth(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishth(SGMLCTX *context, ELEMENT *element);
        extern void startthead(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishthead(SGMLCTX *context, ELEMENT *element);
        extern void starttitle(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtitle(SGMLCTX *context, ELEMENT *element);
        extern void starttr(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtr(SGMLCTX *context, ELEMENT *element);
        extern void starttt(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishtt(SGMLCTX *context, ELEMENT *element);
        extern void startu(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishu(SGMLCTX *context, ELEMENT *element);
        extern void startul(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishul(SGMLCTX *context, ELEMENT *element);
        extern void startvar(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishvar(SGMLCTX *context, ELEMENT *element);
        extern void startwbr(SGMLCTX *, ELEMENT *, VALUES *);
        extern void startxmp(SGMLCTX *, ELEMENT *, VALUES *);
        extern void finishxmp(SGMLCTX *context, ELEMENT *element);
extern void generic_start (SGMLCTX * context, ELEMENT * element, VALUES * attributes);
extern void generic_finish (SGMLCTX * context, ELEMENT * element);
#endif
/* eof */
