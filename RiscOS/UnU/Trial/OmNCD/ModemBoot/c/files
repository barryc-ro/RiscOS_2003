#include "kernel.h"
#include <stdio.h>

#define OS_GPBP 0x0c
FILE *fp;

/*
 * Given the full path to a directory, the base name for the files
 * in the resources tree, create a ModGen file
 */
static void read_directory(char *pathname, char *base, char *indent)
{
  _kernel_swi_regs r;
  char buffer[256];
  int *object_type;
  char *filename;
  char newpath[256]; /* Path cannot exceed this size */
  char newbase[256];
  char newindent[80];


  r.r[0]=12;
  r.r[1]=(int)pathname;
  r.r[2]=(int)buffer;
  r.r[3]=1;
  r.r[4]=0;
  r.r[5]=256;
  r.r[6]=0;

  while (r.r[4] != -1) {
    _kernel_swi(OS_GPBP,&r,&r);
    if (r.r[3]==0) break;

    object_type=(int *)&(buffer[16]);
    filename=(char *)&(buffer[24]);
    if (*object_type==1) {
      printf("Adding: %s%s from %s%s\n",(base+1),filename,pathname,filename);
      fprintf(fp,"%s.%s\t%s.%s\n",pathname,filename,(base+1),filename);
    }
    else if (*object_type==2) {
      sprintf(newpath,"%s.%s",pathname,filename);
      sprintf(newbase,"%s.%s",base,filename);
      sprintf(newindent,"%s..",indent);
      read_directory(newpath,newbase,newindent);
    }
  }
}

int main(int argc, char **argv)
{
  char *path="adfs::4.$";
  char *indent="";

  if (argc != 3) {
    printf("USAGE: %s <path> <resfile>\n",argv[0]);
    exit(0);
  }

  fp=fopen(argv[2],"w");
  if (fp==NULL) {
    printf("Cannot open output file %s",argv[2]);
    exit(0);
  }

  path=(char *)(argv[1]);
  printf("Scanning path: %s\n",path);
  read_directory(path,indent,indent);
  fclose(fp);
}
