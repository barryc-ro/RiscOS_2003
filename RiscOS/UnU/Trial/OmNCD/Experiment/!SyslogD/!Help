	Help for SyslogD version 0.02
	-----------------------------

1.0  Intro
==========

The syslogd module is a general replacement for the system logger (syslogd)
founder under most flavours of UNIX. It provides the ability for general
messages about the system to be passed to a central point for collection,
and ones of a specified priority or higher are logged. 

Typically applications that do this are system services such as telnetd,
bootpd, and inetd. It was the possibility of bootpd for RiscPC that caused
the development of this module.

2.0 How to use:
===============

2.1 The application
===================

Just double click on the application and the Syslogd module will be loaded.
You will only need to edit !Boot and/or !Run if you dont want the syslog
output file to be placed on a level with the !SyslogD application. 

If syslog$path is not set, the SyslogD module attempts to place the logfile
in one of two other places. In order these are:

	$.Public.syslog		
	<Wimp$Scrap>.syslog
	
These locations were chosen because traditionally all system logging is done
local to a machine. SyslogD can log over a network by setting the 
syslog$path to point at a shared disk of some form.

If none of the above can be written to or exist, SyslogD will display
a message a initialisation time, and then silently ingore all messages,
thus allowing applications to still believe it exists.

Because of the way syslogd works, you can change the loglevel BUT ONLY
via a SWI call. Under basic this looks like:

	SYS"SYSLOG_SetLevel",0,<newlevel>
	
where the level is in the range 0 to 7. Syslog defines 0 to be highest 
priority and 7 to be the lowest. Typical definitions of what each logging
level will give are:

	0	System is unusable errors
	1	Action must be taken now
	2	Critical errors have occured
	3	Error conditions
	4	A general warning
	5	Normal but significat event
	6	Informational message
	7	debug level messages.
	
By default syslogd logs at level 6, so all messages other than debug
messages are logged. The only other typical running level is 4, although
all others are supported of course.


2.2 The module from within your applications.
=============================================

First off, an application should never attempt to set the syslogd logging
level, unless of course it is an application to set the logging level for
the user!

In order for an application to set the logging level it should issue
the following SWI:

	SyslogD_Log 	(0x4cd80)
	
	On entry:
	
	R0 = 0		    Reserved
	R1 = error level    The syslogD error level (see list above)
	R2 = buffer	    The pointer to the buffer containing the 
			    message to add to the buffer.
			   
        On exit all registers are preserved.

