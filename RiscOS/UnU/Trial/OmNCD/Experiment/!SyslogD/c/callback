//
// TickerV event code. Basically we can write to the file in a call
// back situation but not before. This ensure safe operation of
// the logger under interupt conditions. Note: we need to be IRQ
// safe at this point too which is a pain... must add that in...
//

#include "swis.h"
#include "kernel.h"

//
// Local and global vars.
//
#define MAXTICK 10 // ensure reasonable time between checks.
#define TickerV 28  // TickerV event.
extern void *module_wsp;
static int calleveryset=0;
int tickcount=MAXTICK;

//
// Functions in this file:
//
void callback(void);
void stopcallback(void);
extern int callback_entry(char *pw);
int callback_handler(void);

//
// void callevery(void)
//
// Start TickerV handler
//
void callback(void)
{
  _kernel_swi_regs r;

  if (calleveryset) return;
  calleveryset=1;

  r.r[0] = (int)callback_entry;
  r.r[1] = (int)module_wsp;
  _kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r);
}

//
// void stopcallevery(void)
//
// Stop TickerV handler
//
void stopcallback(void)
{
  _kernel_swi_regs r;

  calleveryset=0;

  r.r[0] = (int)callback_entry;
  r.r[1] = (int)module_wsp;
  (void)_kernel_swi(XOS_Bit | OS_RemoveCallBack, &r, &r);
}

//
// int tick_handler(void)
//
// Do some checking up every 30 seconds or so.
//
int callback_handler(void)
{
  extern void syslog_write(void);

  syslog_write();
  return 1;
}
