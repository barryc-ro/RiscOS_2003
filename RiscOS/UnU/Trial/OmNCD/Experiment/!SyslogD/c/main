// Small main routines for SysLogD
//
// (C) Acorn Network Computing 1996, Acorn Computers Ltd.
//
// Written by: Paul Wain, 7th March 1996
//
#include "stdio.h"
#include "syslog.h"
#include "kernel.h"
#include "time.h"
#include "string.h"

#define KByte *1024
#define SYSLOG_BUFSIZE  10 KByte

static char syslog_mainbuffer[10240]; // 4K should be enough?
static char syslog_filename[256];          // Cant be any bigger
static char syslog_int_buf[80];            // Syslog cheats in logging info
static int  syslog_level=6;                // Maximum syslog level initially
#define SYSLOG_LOG 0
void *module_wsp;

extern void callback(void);
extern void stopcallback(void);

// Syslog_write writes back to file in a safe time.
//
void syslog_write(void)
{
  FILE *fp; // fp for syslog_filename

  //
  // If we dont have a log file or pending data, dont do anything.
  //
  if (syslog_filename[0] == '\0') {
    printf("No filename found\n");
    return;
  }

  if (syslog_mainbuffer[0]=='\0') return;

  fp=fopen((char *)syslog_filename,"a");
  if (fp != NULL) {
    fprintf(fp,syslog_mainbuffer);
    fclose(fp);
  }
  else {
    printf("Unable to open file: %s",syslog_filename);
  }

  //
  // Reset the buffer.
  //
  syslog_mainbuffer[0]='\0';

  //
  // Return control.
  //
  return;
}

// Syslog is the function we are here for.
//
// define this first so that initialisation and finalisation code
// can use it.
//
void syslog(int errorlevel, char *message)
{
  char *date; // date from ctime()
  char *temp; // used to crop date.
  char *buffer;
  time_t secs; // used to get time data

  printf("Doing syslog call!\n");
  //
  // If we dont have a log file, dont do anything.
  //
  if (syslog_filename[0] == '\0') return;

  //
  // Check the message level. Only log those BELOW or equal to the
  // current syslog_level. Check bottom 3 bits only
  //
  if ((errorlevel&7) >= (syslog_level&7)) return;

  //
  // Get the date now that we know we need it.
  //
  secs=time(NULL);
  date=ctime(&secs);
  temp=strrchr(date,'\n');
  if (temp) {
    // Always best to be safe!
    *temp='\0';
  }

  //
  // Write the message to the buffer!
  //
  // Find the end of the buffer and ensure enough space:
  //
  buffer=strchr((char *)syslog_mainbuffer,'\0');
  //
  // Sanity check.
  //
  if (!buffer) {
    return;
  }

  if ((int)(buffer-(char *)syslog_mainbuffer) > (SYSLOG_BUFSIZE - (1 KByte))) {
    return;
  }

  //
  // Do the write:
  //
  sprintf(buffer,"%s %s \n", date, message);

  //
  // Set a callback to write:
  //
  // callback();
  syslog_write();

  //
  // Return control.
  //
  return;
}
//
// Initialisation code.
//
// Find the syslog file location and store it.
//

_kernel_oserror *syslogd_init(char *cmd_fail, int podule_base, void *pw)
{
  FILE *fp;

  //
  // Store module workspace for callback handler
  //
  module_wsp=pw;

  //
  // Reset main memory pointer:
  //
  syslog_mainbuffer[0]='\0';

  //
  // Initialise path
  //
  syslog_filename[0]='\0';

  //
  // Look to see if we have a "Syslog:" path set. We can also create
  // the files at the same time!
  //
  if ((fp=fopen("Syslog:syslog","a")) != NULL) {
    // Done, jump to end of file!
    sprintf(syslog_filename,"Syslog:syslog");
    fclose(fp);
  }
  //
  // Else see if we can write to $.public.syslog
  //
  else if ((fp=fopen("$.Public.syslog","a")) != NULL) {
    // Done, jump to end of file!
    sprintf(syslog_filename,"$.Public.syslog");
    fclose(fp);
  }

  //
  // Now we are stuck. Maybe Scrap will work?
  //
  else if ((fp=fopen("<Wimp$ScrapDir>.syslog","a")) != NULL) {
    // Done. save file name for later!
    sprintf(syslog_filename,"<Wimp$ScrapDir>.syslog");
    fclose(fp);
  }
  //
  // Totally gone. Display an error and give up!
  //
  else {
    printf("Cant find a place to put the Syslog file. No output to file\n");
    printf("will occur. Please open a directory containing !Scrap and\n");
    printf("rerun SyslogD\n");
  }

  sprintf(syslog_int_buf,"syslogd: Syslog starting");
  syslog(SYSLOG_LOG,(char *)syslog_int_buf);

  return NULL;
}

//
// Finalisation code.
//
// Log that we are going down and remove any callbacks etc that we have
// outstanding.
//
_kernel_oserror *syslog_final(int fatal, int podule, void *pw)
{
  //
  // Log that we are going down.
  //
  // sprintf(syslog_int_buf,"syslogd: syslogd going do on module kill");
  // syslog(SYSLOG_LOG,(char *)syslog_int_buf);
  sprintf(syslog_int_buf,"syslogd: Syslog dying");
  syslog(SYSLOG_LOG,(char *)syslog_int_buf);
  syslog_write();

  //
  // Shut off all callbacks etc.
  //
  stopcallback();

  //
  // exit now
  //
  return NULL;
}

//
// The SWIBASE+0 code - syslog_dolog
//
void syslog_dolog(int flags, int level, char *message)
{
  flags=flags;
  syslog(level,message);
}

//
// The SWIBASE+1 code - syslog_set_loglevel
//
void syslog_setlev(int flags, int level)
{
  flags=flags;

  // Sanity check level first.
  //
  // Cant have a log level higher than (LOG_NFACILITES<<3)-1
  if (level >= (LOG_NFACILITIES<<3)) return;
  // Cant have a negative log level
  else if (level < 0) return;

  // Set syslog level
  syslog_level=level;
}

//
// The SWI handler
//
_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
  switch(swi_no) {
    case 0: syslog_dolog(r->r[0], r->r[1], (char *)r->r[2]); break;
    case 1: syslog_setlev(r->r[0], r->r[1]); break;
  }
  return NULL;
}
