/*	IFRCONFIG.C

Project : DEC Westminster trial
Module:

Purpose:


History:

Date      Who     Description of change
===========================================
24/10/95   CP     Changed bootp loop to do MAX_TRIES bootp, and reset if it
                  fails rather than retry 8 times, then go to desktop.

                  This is to get around a bug in bootp which means that
                  only one bootp request is sent, even though there may be
                  many requests to do it.

***************************************************************************/


#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <stdio.h>
#include <sys/errno.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>

extern int errno;

struct sockaddr_in ipaddr = { 0 };
#if 0
struct sockaddr_in netmask = { 0 };
#endif
struct sockaddr_in broadcast = { 0 };

#define MAX_TRIES 1

int ifrconfig(s, ifname)
int s;
char *ifname;
{
        struct  ifreq ifr;
        char *inet_ntoa();
        int tries = 0;

        _kernel_swi_regs r;

        while (1) {
            printf("Looking for a boot server .. tries = %d\n", tries);
            strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
            if (socketioctl(s, SIOCGWHOIAMRB, (caddr_t)&ifr) >= 0)
                break;
            if (left_alt_is_pressed() && right_alt_is_pressed())
                return (0);
            tries++;
            if (tries == MAX_TRIES) {
                printf("\nCannot find a boot server\n");

             /* reset box */
                _kernel_swi(OS_Reset, &r, &r);
            }
        }
        if (socketioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0) {
            printf("\nCannot read my net address\n");
            return (0);
        }
        ipaddr.sin_addr = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
        printf("My net address is %s\n", inet_ntoa(ipaddr.sin_addr));
#if 0
        strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
        printf("Looking for NetMask ..\n");
        (void) socketioctl(s, SIOCGWHOIAMM, (caddr_t)&ifr);
        strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
        strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
        if (socketioctl(s, SIOCGIFNETMASK, (caddr_t)&ifr) < 0) {
            printf("Cannot read NetMask\n");
            return (0);
        }
        netmask.sin_addr = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
        printf("NetMask is %x\n", ntohl(netmask.sin_addr.s_addr));
#endif
        return (1);
}



