/*
 * Navigator presenter - file routines
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "swicall.h"

char *file_addr = NULL;
int   file_len  = 0;

extern int matrix[];

ErrorPtr file_open (char *filename, int *retfd)
{
  ErrorPtr err;
  int fd = 0;

  /* This OS_Find call returns an error if the file is open for writing,
     but a fd of zero if the file is totally absent.  This is relied on.
   */

  err = swi(OS_Find, R0, 0x47, R1, filename, OUT, R0, &fd, END);
  if (err)
      *retfd = 0;
  else
      *retfd = fd;

  return err;
}


/*
   Check for existence of a file.  Return TRUE or FALSE.  If on first
   probe the file is absent, wait for a VERY short time and try again
   - once.  Unlike file_open, this does not check to see if the file is
   actually readable.
 */

BOOL file_exists (char *filename)
{
  int type;
    if (swi (OS_File, R0, 17, R1, filename, OUT, R0, &type, END) != NULL || type == 0)
        return FALSE;
    else
        return TRUE;
}


/* Close a file opened with file_open. */

ErrorPtr file_close (int fd)
{
    if (fd <= 0)                /* Don't permit closing of ALL files! */
        return NULL;
    else
        return(swi (OS_Find,  R0, 0,  R1, fd,  END));
}


/* Return the extent of the specified open file */

ErrorPtr file_length (int fd, int *length)
{
    return swi (OS_Args,  R0, 2,  R1, fd,  OUT,  R2, length,  END);
}

ErrorPtr render_drawfile(char *drawdata, int length, int *block)
{
  matrix[4] = (block[1] - block[5]) << 8;
  matrix[5] = (block[4] - block[6]) << 8;
  swi(DrawFile_Render, R0, (1 << 11), R1, drawdata, R2, length,
                       R3, matrix, R4, &block[7], END);

  return NULL;
}

ErrorPtr render_page(char *page)
{
  int fd = 0;

  if (file_addr)
  {
    Heap_Free(file_addr);
    file_addr = NULL;
  }
  if (err = file_open(page, &fd), err == NULL && fd > 0)
  {
    EX(file_length(fd, &file_len));
    file_addr = Heap_Alloc(file_len);

    EX(swi(OS_GBPB, R0, 4, R1, fd, R2, file_addr, R3, file_len, END));
    file_close(fd);
    fd = 0;

  }
  return(err);
}
