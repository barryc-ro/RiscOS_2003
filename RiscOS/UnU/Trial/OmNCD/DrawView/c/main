#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "muldiv.h"
#include "objects.h"
#include "render.h"
#include "screen.h"
#include "swicall.h"
#include "wimp.h"

#define __VERSION__ "0.03 Compiled " __TIME__ " " __DATE__

static int this_task;

char *version = __VERSION__;

static int wimp_messages[] =
{
  4,       /* Message_DataLoadAck */
  5,
  0x400C1, /* Message_ModeChange */
  NULL
};

char cprefix[80];

ErrorPtr err;

BOOL tv = TRUE;

int matrix[6] = {1 << 16, 0, 0, 1 << 16, 0, 0};

unsigned int blend = 0;

int *windowdata = NULL;

extern char *file_addr;
extern int   file_len;

extern int *mainwindowdata, mainwindowlen;

extern wimp_point screen_eig;

static BOOL CheckTV(void)
{
  int flags;
  
  ReadModeVar(-1, 0, &flags);
  if (flags & (1 << 8))
    tv = TRUE;
  else
    tv = FALSE;

  return(tv);
}

static char *Blib(char *filename)
{
  char *dot = strrchr(filename, '.');
  static char buffer[512];

  sprintf(buffer, "Pentire:Rapport.!PD.PostDoc %s > Null:$", filename);
  wimp_starttask(buffer);
  sprintf(buffer, "<PD$OutputDir>.draw.%s_1", &dot[1]);
  dot = strrchr(buffer, '.');
  dot[11] = '\0';
  return(buffer);
}

ErrorPtr make_error(int num, char *mess)
{
  static _kernel_oserror myerror;
  myerror.errnum = num;
  strcpy(myerror.errmess, mess);
  err = &myerror;
  return err;
}

void check_error(ErrorPtr err)
{
  char buf[266];

  fprintf(stderr, "ERROR: %s (code %d)\n", err->errmess, err->errnum);
  sprintf(buf, "%d  %s", err->errnum, err->errmess);
  if (err->errnum != 0)
  {
    exit(err->errnum);
  }
}

static void Hack_FontVersion(void)
{
  char *title;
  int base, high, posn = 3;
  
  swi(OS_Module, R0, 18, R1, "FontManager", OUT, R3, &base, END);
  title = (char *) (base + *((int *) (base + 20)));
  while (*title != 0x09)
    title++;
  while (isspace(*title))
    title++;
  high = 0;
  while (isdigit(*title))
  {
    high = (high * 16) | ((*title) - '0');
    title++;
  }
  high = high << 16;
  title++;
  while (isdigit(*title) && posn >= 0)
  {
    high |= (((*title) - '0') << (posn-- * 4));
    title++;
  }
  if (high > 0x00033400)
    blend = 1 << 11;
}

static void WimpStop(void)
{
/*   if (windowdata)
    wimp_deletewindow(0, windowdata); */
  wimp_closedown(this_task, 0x4B534154);
}

static void WimpStart(char *title)
{
  swi(Wimp_Initialise, R0, 350, R1, 0x4B534154, R2, _APPNAME_,
      R3, wimp_messages, OUT, R1, &this_task, END);
  atexit(WimpStop);
}

static void WindowStart(char *title)
{
  windowdata = Heap_Alloc(mainwindowlen);
  memcpy(windowdata, &mainwindowdata[10], mainwindowlen);
  if (CheckTV())
    ((char *) windowdata)[36] = 255;
  else
    ((char *) windowdata)[36] = 7;

  windowdata[19] = (int) title;
  windowdata[20] = -1;
  windowdata[21] = strlen(title);
  windowdata[0] = wimp_createwindow(0, &windowdata[1]);
  wimp_openwindow(0, windowdata);
}

static void redraw_action(int *block)
{
  BOOL bMore;

  if (block[0])
  {
    swi(Wimp_RedrawWindow, R1, block, OUT, R0, &bMore, END);

    while (bMore)
    {
      if (file_addr)
      {
        render_drawfile(file_addr, file_len, block);
        if (tv)
          screen_filter_area(block[7], block[8],
                             block[9] - block[7], block[10] - block[8]);
      }

      swi(Wimp_GetRectangle, R1, block, OUT, R0, &bMore, END);
    }
  }
}

static void null_action(void)
{
}

static void shiftwindow(int x, int y, BOOL shift)
{
  int block[10];

  block[0] = windowdata[0];
  wimp_getstate(0, block);
  block[5] += (shift ? ((block[3] - block[1]) * x) / 4 : x);
  block[6] += (shift ? ((block[4] - block[2]) * y) / 4 : y);
  wimp_openwindow(0, block);
}

static void key_action(int c)
{
  switch(c)
  {
  case  27:
    exit(0);
    break;

  case 0x18C:
  case 0x19C:
    shiftwindow(-4,  0, c > 0x190);
    break;

  case 0x18D:
  case 0x19D:
    shiftwindow( 4,  0, c > 0x190);
    break;

  case 0x18E:
  case 0x19E:
    shiftwindow( 0, -4, c > 0x190);
    break;

  case 0x18F:
  case 0x19F:
    shiftwindow( 0,  4, c > 0x190);
    break;

  default:
    wimp_processkey(c);
    break;
  }
}

static void message_action(int action)
{
  switch(action)
  {
  case 0:
    exit(0);
    break;

  case 4:
  case 5:
    break;

  case 0x400C1:
    Screen_CacheModeInfo(matrix);
    break;
  }
}

wimp_box outline = {{0, 0}, {0, 0}};

static void scan_recurse(char *drawptr, int len)
{
  char *data = drawptr;
  int object;
  wimp_box *bbox;
  
  while (drawptr < data + len)
  {
    object = ((int *) drawptr)[0];
    if (object != 0 && object != 0x100 && object != 0x101
        && object != 0x300 && object != 0x301)
    {
      bbox = (wimp_box *) &((int *) drawptr)[2];

      if (bbox->min.x < outline.min.x)
        outline.min.x = bbox->min.x;
      if (bbox->max.x > outline.max.x)
        outline.max.x = bbox->max.x;
      if (bbox->min.y < outline.min.y)
        outline.min.y = bbox->min.y;
      if (bbox->max.y > outline.max.y)
        outline.max.y = bbox->max.y;
    }
    if (((int *) drawptr)[0] == 6)
    {
      scan_recurse(drawptr + 36, ((int *) drawptr)[1] - 36);
    }
    drawptr += ((int *) drawptr)[1];
  }
}
 
int main(int argc, char **argv)
{
  char *filename = argv[1];
  int pollblock[64];
  int ftype, reason;

  if (argc < 2)
    exit(0);

  if (!file_exists(filename))    
    exit(0);

  WimpStart(filename);
  ftype = File_GetType(filename);
  if (ftype == 0xFF5) /* PostScript */
  {
    filename = Blib(filename);
    swi(OS_File, R0, 4, R1, filename, R5, 0x33, END);
  }
  else if (ftype != 0xAFF) /* Isn't Drawfile */
  {
    exit(0);
  }
  Heap_Create();
  Hack_FontVersion();

  EX(render_page(filename));
  scan_recurse(file_addr + 40, file_len - 40);

  WindowStart(filename);
  Screen_CacheModeInfo(matrix);

  swi(Wimp_SetCaretPosition, R0, windowdata[0], R1, -1, R2, 0, R3, 0, R4, -1, R5, 0, END);

  for (;;)
  {
    reason = wimp_pollidle(0x00003830, pollblock, monotonic_time() + 200);

    switch (reason)
    {
    case 0:
      null_action();
      break;

    case 1:
      redraw_action(pollblock);
      break;

    case 2:
      wimp_openwindow(0, pollblock);
      break;

    case 3:
      exit(0);
      break;

    case 6:
      swi(Wimp_SetCaretPosition, R0, windowdata[0], R1, -1, R2, 0, R3, 0,
          R4, -1, R5, 0, END);
      break;

    case 8:
      key_action(pollblock[6]);
      break;

    case 17:
    case 18:
      message_action(pollblock[4]);
      break;
    }
  }
  exit(0);
}
