%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.0
%%For: (Kevin) (VBS Ltd.)
%%Title: (Indian Simple\251)
%%CreationDate: (12/7/90) (8:40 AM)
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%+ Helvetica-Bold
%%+ Times-Bold
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 0
%%+ procset Adobe_IllustratorA_AI3 1.0 0
%%BoundingBox: 57 153 536 698
%AI3_ColorUsage: Color
%AI3_TemplateBox: 316 368 316 368
%AI3_TileBox: 24 26 576 756
%AI3_DocumentPreview: Macintosh_ColorPic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.0 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 46 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
%	[ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% 	[ ... number value stream ... /_Helvetica-Bold/Helvetica-Bold 
%	direction fontScript defaultEncoding TZ
/TZ		
{
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	findfont dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			Encoding StandardEncoding eq 1 _useNativeEncoding eq and
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
W B
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	2 dict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	Te currentpoint newpath moveto
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 0
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_IllustratorA_AI3_vars 46 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /i0 /i0 /i0 /i0] def 
/_renderEnd [null null null null /e1 /r1 /a1 /clip] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Helvetica-Bold
%%IncludeFont: Times-Bold
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding
%AI3_BeginEncoding: _Times-Bold Times-Bold
[/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding
%%EndSetup
0 A
u
0 O
0.4 0.03 0.3 0 k
0 i 0 J 0 j 4.034 w 10 M []0 d
%AI3_Note:
0 D
515.776 174.25 m
515.776 678.636 L
77.297 678.636 L
77.297 174.25 L
515.776 174.25 L
f
296.536 426.442 m
F
U
u
0 R
0 0.2 1 0 K
515.776 174.25 m
515.776 659.805 L
77.297 659.805 L
77.297 174.25 L
515.776 174.25 L
s
296.536 417.028 m
S
U
u
0 O
0.05 0.2 0.5 0 k
125.718 519.922 m
125.718 471.501 l
166.069 471.501 l
166.069 412.32 l
124.373 412.32 l
124.373 460.741 l
77.297 460.741 l
77.297 519.922 l
125.718 519.922 l
f
U
u
125.718 401.56 m
125.718 353.138 l
166.069 353.138 l
166.069 293.958 l
124.373 293.958 l
124.373 342.378 l
77.297 342.378 l
77.297 401.56 l
125.718 401.56 l
f
U
125.718 283.197 m
125.718 234.776 l
173.13 234.776 l
172.794 175.595 l
124.373 175.595 l
124.373 224.016 l
77.297 224.016 l
77.297 283.197 l
125.718 283.197 l
f
u
271.654 175.595 m
271.654 224.016 L
222.56 224.016 L
222.56 175.595 L
271.654 175.595 L
f
247.107 199.805 m
F
U
u
368.496 175.595 m
368.496 224.016 L
319.402 224.016 L
319.402 175.595 L
368.496 175.595 L
f
343.949 199.805 m
F
U
u
465.337 175.595 m
465.337 224.016 L
416.244 224.016 L
416.244 175.595 L
465.337 175.595 L
f
440.791 199.805 m
F
U
u
482.823 224.688 m
482.823 283.87 L
515.776 283.87 L
515.776 224.688 L
482.823 224.688 L
f
499.299 254.279 m
F
U
u
482.823 342.378 m
482.823 401.56 L
515.776 401.56 L
515.776 342.378 L
482.823 342.378 L
f
499.299 371.969 m
F
U
u
482.823 460.741 m
482.823 519.922 L
515.776 519.922 L
515.776 460.741 L
482.823 460.741 L
f
499.299 490.332 m
F
U
u
0 0.2 1 0 k
408.174 195.77 m
408.174 186.355 l
424.314 186.355 l
424.314 195.77 l
443.144 195.77 l
443.144 186.355 l
459.285 186.355 l
459.285 195.77 l
478.115 195.77 l
478.115 186.355 l
494.255 186.355 l
494.255 196.443 l
515.776 196.443 l
515.776 174.25 l
389.344 174.25 l
389.344 195.77 l
408.174 195.77 l
f
U
u
97.472 645.01 m
88.057 645.01 l
88.057 626.852 l
81.332 626.852 l
81.332 604.659 l
77.297 604.659 l
77.297 659.805 l
97.472 659.805 l
97.472 645.01 l
f
U
0.01 0.08 0.5 0 k
486.522 257.641 m
486.522 540.77 L
155.645 540.77 L
155.645 257.641 L
486.522 257.641 L
f
u
0.8 0 0.5 0 k
485.513 224.688 m
485.513 258.314 L
154.636 258.314 L
154.636 224.688 L
485.513 224.688 L
f
320.074 241.501 m
F
U
0 g
13.449 w
181.413 553.512 m
F
0.9 0.2 0 0 k
4.034 w
155.645 425.769 m
155.645 540.77 L
486.522 540.77 L
486.522 425.769 L
155.645 425.769 L
f
0.4 0 0.05 0 k
320.074 483.942 m
F
0.1 0.9 0.05 0 k
0 R
0.05 0.1 1 0 K
1.344 w
399.768 496.384 m
401.893 502.432 406.549 501.207 v
411.207 499.98 407.285 501.451 y
408.019 500.717 409.491 504.392 v
410.96 508.07 415.864 518.855 415.864 519.591 c
416.599 522.287 418.071 524.494 v
419.541 526.698 418.805 526.455 422.726 526.455 c
426.648 526.455 433.73 525.975 y
425.323 522.276 l
430.816 520.08 l
423.306 517.232 l
429.589 514.934 l
421.96 513.197 l
428.608 510.767 l
420.951 508.153 l
427.629 506.109 l
419.27 503.446 l
426.648 501.451 l
422.483 499.736 l
433.022 502.188 l
431.307 491.646 l
421.012 494.588 l
421.257 492.382 l
417.253 494.03 l
420.277 490.665 l
416.917 490.332 l
420.031 487.723 l
415.571 487.641 l
418.598 485.288 l
414.563 485.288 l
417.253 482.597 l
412.882 482.261 l
414.899 480.244 l
404.201 480.575 403.466 483.27 v
402.731 485.966 406.549 491.156 406.304 494.588 c
407.039 495.078 406.304 496.305 v
405.568 497.529 399.768 496.384 y
b
0.7 0.7 0.05 0 k
334.648 422.346 m
456.091 422.408 l
428.235 443.669 l
420.092 436.18 l
408.891 453.3 l
394.051 445.946 l
369.639 471.172 l
334.648 422.346 l
f
0 0.6 0.3 0 k
351.944 452.391 m
289.884 342.745 l
283.154 325.062 l
283.154 325.945 279.051 289.922 y
330.834 269.074 l
342.898 302.957 l
364.035 301.623 l
372.611 314.439 370.088 317.09 v
367.563 319.743 366.461 322.409 y
373.191 329.484 l
368.142 334.788 l
374.033 340.093 l
369.826 350.704 l
380.765 352.473 l
383.29 355.125 l
370.667 392.264 l
360.57 396.686 l
368.142 406.411 l
351.944 452.391 l
f
u
0.1 0.8 0.8 0 k
348.928 387.98 m
352.317 389.936 359.328 394.766 y
356.302 385.121 l
348.928 387.98 l
f
U
360.57 396.686 m
363.25 406.401 l
339.532 384.305 l
360.57 396.686 l
f
374.033 340.093 m
368.899 342.648 l
351.258 337.938 l
368.142 334.788 l
374.033 340.093 l
f
373.191 329.484 m
357.601 325.7 l
366.461 322.409 l
373.191 329.484 l
f
369.826 350.704 m
360.828 350.718 l
362.443 356.366 l
378.583 353.138 l
369.826 350.704 l
f
0 0.8 0.8 0 k
360.022 357.981 m
366.075 363.226 l
358.004 359.998 l
360.022 357.981 l
f
0.1 0.8 0.8 0 k
292.501 326.911 m
306.759 305.524 l
364.035 301.623 l
292.501 326.911 l
f
u
0 0.5 0.3 0 k
4.034 w
362.649 303.209 m
303.14 319.478 293.847 326.238 v
286.449 331.618 294.755 354.514 299.899 335.653 c
303.935 320.858 334.059 312.034 347.647 311.443 c
359.322 310.935 366.217 300.353 362.649 303.209 c
f
U
0 0.35 0.25 0 k
5.38 w
312.924 366.184 m
338.48 359.459 l
352.603 370.219 l
339.825 345.336 l
312.924 366.184 l
f
u
0 0.1 1 0 k
0 R
0.05 0.3 1 0 K
4.034 w
349.759 475.299 m
365.203 475.299 377.725 487.894 377.725 503.435 c
377.725 518.973 365.203 531.57 349.759 531.57 c
334.314 531.57 321.792 518.973 321.792 503.435 c
321.792 487.894 334.314 475.299 349.759 475.299 c
b
U
0.3 0.3 0.05 0 k
218.524 536.063 m
323.437 471.501 l
253.496 347.086 l
253.496 258.314 l
160.689 258.314 l
164.724 533.372 l
218.524 536.063 l
f
0.05 1 1 0 k
253.496 514.542 m
205.075 519.25 l
233.32 489.659 l
182.209 489.659 l
214.49 463.431 l
175.484 457.379 l
208.438 433.168 l
169.432 427.115 l
197.677 408.285 l
168.759 394.835 l
195.659 376.004 l
166.069 361.209 l
190.952 345.069 l
164.724 326.911 l
192.969 313.46 l
166.069 296.647 l
193.642 285.214 l
170.104 258.314 l
154.636 258.314 l
154.636 541.443 l
210.455 541.443 l
253.496 514.542 l
f
1 g
244.753 332.291 m
244.753 258.314 l
284.431 258.314 l
284.431 331.618 l
244.753 332.291 l
f
u
0 R
0 0.6 0.5 0 K
244.753 332.291 m
244.753 258.314 l
B
U
u
0 0.8 1 0 K
284.431 332.291 m
284.431 258.314 l
B
U
u
0.2 0.5 0.05 0 K
276.361 332.291 m
276.361 258.314 l
B
U
u
0.5 0.1 0.6 0 K
267.618 332.627 m
267.618 258.651 l
B
U
u
0.4 0.05 0.5 0 K
259.549 332.291 m
259.549 258.314 l
B
U
u
0.4 0.4 0.05 0 K
252.15 332.291 m
252.15 258.314 l
B
U
0.026 w
255.513 348.431 m
283.982 332.318 L
352.276 452.979 L
324.997 471.194 L
255.513 348.431 L
f
0 To
1.344 0 0 1.344 176.829 233.431 0 Tp
TP
0 Tr
/_Times-Bold 14 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
14 0 Tl
0 Tc
0 Tw
(L A U G H I N G   D O G   L I M E \r) Tx 
TO
0 R
0 0.3 1 0 K
2.689 w
253.496 514.542 m
205.075 519.25 l
233.32 489.659 l
182.209 489.659 l
214.49 463.431 l
175.484 457.379 l
208.438 433.168 l
169.432 427.115 l
197.677 408.285 l
168.759 394.835 l
195.659 376.004 l
166.069 361.209 l
190.952 345.069 l
164.724 326.911 l
192.969 313.46 l
166.069 296.647 l
193.642 285.214 l
170.104 258.314 l
S
u
u
u
0 O
0.5 0 0.9 0 k
0 0.1 1 0 K
1.344 w
384.683 306.325 m
404.876 315.697 l
406.266 328.342 414.131 331.746 v
413.67 322.992 l
421.074 334.665 425.701 332.231 v
420.149 317.641 423.389 316.184 v
426.629 314.725 471.521 318.128 y
457.637 309.861 l
474.761 287.489 470.132 279.223 v
458.1 291.867 l
456.71 274.359 l
446.99 292.353 l
424.314 289.922 l
415.985 272.9 l
413.67 290.408 l
403.949 277.763 l
407.189 296.73 l
387.642 295.968 l
402.461 304.995 l
384.683 306.325 l
b
U
U
u
0 0.1 1 0 k
409.217 306.734 m
410.858 306.734 412.19 308.134 412.19 309.861 c
412.19 311.588 410.858 312.987 409.217 312.987 c
407.571 312.987 406.24 311.588 406.24 309.861 c
406.24 308.134 407.571 306.734 409.217 306.734 c
f
409.217 309.861 m
F
U
U
u
0 R
0 0.3 1 0 K
4.034 w
486.522 224.016 m
486.522 540.77 L
155.645 540.77 L
155.645 224.016 L
486.522 224.016 L
s
U
u
0 O
0.8 0 0.5 0 k
0.8 0 0.5 0 K
515.776 659.805 m
515.776 678.636 L
77.297 678.636 L
77.297 659.805 L
515.776 659.805 L
b
296.536 669.22 m
B
U
0 To
1.344 0 0 1.344 150.999 663.84 0 Tp
TP
0 Tr
1 g
0.026 w
/_Times-Bold 9.999 Tf
(N  A  T  U  R  A  L    S  P  R  I  N  G    W  A  T  E  R\r) Tx 
TO
u
0 R
0 0.1 1 0 K
4.034 w
515.776 174.25 m
515.776 174.25 L
515.776 174.25 L
515.776 174.25 L
515.776 174.25 L
s
515.776 174.25 m
S
U
u
0 0.3 1 0 K
1.344 w
225.25 509.162 m
248.116 484.952 l
S
U
u
241.39 501.092 m
264.256 476.881 l
S
U
u
257.53 493.022 m
280.396 468.811 l
S
U
u
203.73 482.261 m
226.595 462.086 l
S
U
u
219.87 476.881 m
242.736 456.706 l
S
U
u
236.01 471.501 m
258.876 451.326 l
S
U
u
191.625 452.671 m
221.215 432.495 l
S
U
u
184.899 424.425 m
209.11 408.285 l
S
U
u
183.554 393.489 m
205.075 377.35 l
S
U
179.519 359.864 m
201.039 346.413 l
S
u
207.765 449.98 m
237.356 429.805 l
S
U
u
176.829 327.583 m
201.039 314.132 l
S
U
179.519 296.647 m
203.73 285.887 l
S
u
197.005 424.425 m
221.215 408.285 l
S
U
u
194.314 393.489 m
215.835 377.35 l
S
U
191.625 359.864 m
213.145 346.413 l
S
u
188.934 327.583 m
213.145 314.132 l
S
U
u
191.625 523.957 m
214.49 499.746 l
S
U
u
170.776 492.349 m
193.642 472.173 l
S
U
167.413 455.36 m
192.297 437.875 l
S
u
162.033 425.77 m
186.245 409.63 l
S
U
u
160.689 393.489 m
182.209 377.35 l
S
U
0 O
0 0.7 0.05 0 k
0.5 0.05 0.3 0 K
433.921 351.847 m
428.87 353.616 428.66 349.857 v
428.45 346.1 431.815 339.688 436.232 341.458 c
440.297 343.086 451.38 331.29 y
453.905 339.688 l
463.581 331.51 l
466.105 330.626 465.265 334.163 v
464.423 337.699 460.215 344.773 y
469.051 336.816 470.523 339.688 v
471.996 342.561 470.103 351.847 466.316 353.835 c
462.53 355.826 467.367 365.552 458.954 372.627 c
449.708 380.398 460.966 357.174 y
443.763 381.895 445.447 373.718 v
447.128 365.537 455.166 353.616 455.376 353.835 c
455.586 354.057 434.551 370.636 434.761 352.068 c
B
u
0 0.1 1 0 k
461.302 347.633 m
462.78 347.633 463.977 348.893 463.977 350.449 c
463.977 352.002 462.78 353.261 461.302 353.261 c
459.822 353.261 458.623 352.002 458.623 350.449 c
458.623 348.893 459.822 347.633 461.302 347.633 c
f
461.302 350.449 m
F
U
0.1 0.8 0.8 0 k
355.382 393.489 m
356.302 385.121 l
359.328 395.774 l
355.382 393.489 l
f
0 0.9 1 0 k
465.499 412.656 m
465.492 433.492 l
482.911 427.126 476.851 460.548 V
476.881 460.711 L
472.147 466.679 469.686 460.312 v
467.226 453.948 471.958 442.01 465.331 443.801 C
464.96 479.865 l
460.605 488.817 456.252 479.665 y
456.252 450.022 l
449.625 448.231 454.357 460.168 451.896 466.533 c
449.436 472.9 444.702 466.932 Y
444.732 466.769 L
438.672 433.347 456.091 439.713 y
456.091 412.656 l
465.499 412.656 L
f
0.05 0.7 1 0 k
0.806 w
284 293 m
335.784 288.292 387.567 258.03 v
284 258.03 l
284 293 l
f
u
0 R
0 0.3 1 0 K
4.034 w
486.522 257.641 m
486.522 540.77 L
155.645 540.77 L
155.645 257.641 L
486.522 257.641 L
s
U
0 O
0 0.3 1 0 k
0.026 w
244.081 353.138 m
254.758 347.096 L
324.997 471.194 L
314.321 477.238 L
244.081 353.138 L
f
285.091 413.145 m
F
1 0.3 0.5 0 k
319.798 461.926 m
347.041 443.729 L
352.276 452.979 L
325.033 471.175 L
319.798 461.926 L
f
0.1 0.3 0.2 0 k
310.011 444.634 m
337.253 426.437 L
342.488 435.687 L
315.246 453.882 L
310.011 444.634 L
f
1 0.3 0.5 0 k
300.241 427.372 m
327.483 409.177 L
332.718 418.425 L
305.475 436.622 L
300.241 427.372 L
f
0.1 0.3 0.2 0 k
290.463 410.097 m
317.705 391.9 L
322.94 401.149 L
295.697 419.345 L
290.463 410.097 L
f
1 0.3 0.5 0 k
280.684 392.82 m
307.926 374.623 L
313.161 383.872 L
285.919 402.068 L
280.684 392.82 L
f
0.1 0.3 0.2 0 k
270.905 375.543 m
298.148 357.347 L
303.382 366.596 L
276.14 384.792 L
270.905 375.543 L
f
u
1 0.2 0 0 k
0 R
0 0.3 1 0 K
1.344 w
264.88 318.088 m
279.338 318.088 291.061 329.566 291.061 343.724 c
291.061 357.88 279.338 369.357 264.88 369.357 c
250.419 369.357 238.7 357.88 238.7 343.724 c
238.7 329.566 250.419 318.088 264.88 318.088 c
b
U
u
0.6 0.7 0.05 0 k
277.301 352.801 m
268.587 350.622 l
253.879 352.801 l
259.327 350.078 l
252.245 348.444 l
259.871 347.355 l
253.879 344.086 l
262.05 344.632 l
252.245 339.184 l
259.327 331.013 l
265.863 341.363 l
265.863 334.281 l
268.587 339.184 l
268.587 332.103 l
271.854 337.005 l
271.854 329.923 l
273.489 344.086 l
277.301 352.801 l
b
U
0 To
1.344 0 0 1.344 155.308 210.566 0 Tp
TP
0 Tr
0 1 1 0 k
4.034 w
/_Helvetica-Bold 7.998 Tf
11.998 0 Tl
(10 FL. OZ. \(296ML\)\r) Tx 
TO
0 0.9 1 0 k
0.612 w
169.731 648.62 m
175.157 648.62 L
175.157 650.343 L
153.968 650.343 L
153.968 648.62 L
158.447 648.62 L
158.447 608.31 L
153.968 608.31 L
153.968 606.587 L
175.157 606.587 L
175.157 608.31 L
169.731 608.31 L
169.731 648.62 L
f
184.753 645.132 m
184.753 610.333 L
184.701 607.965 181.66 608.31 179.206 608.31 C
179.206 606.587 L
193.418 606.587 L
193.418 608.31 L
191.101 608.331 187.483 607.986 187.475 610.333 C
187.475 644.485 L
215.899 605.381 L
217.277 605.381 L
217.277 645.864 L
217.362 648.878 220.722 648.577 223.133 648.62 C
223.133 650.343 L
209.18 650.343 L
209.18 648.533 L
211.506 648.491 215.209 648.749 215.209 645.777 C
215.209 624.158 L
196.777 650.343 L
179.206 650.343 L
179.206 648.62 L
182.229 648.62 L
183.65 648.577 184.778 648.405 184.753 645.132 C
f
294.797 648.62 m
300.223 648.62 L
300.223 650.343 L
279.034 650.343 L
279.034 648.62 L
283.513 648.62 L
283.513 608.31 L
279.034 608.31 L
279.034 606.587 L
300.223 606.587 L
300.223 608.31 L
294.797 608.31 L
294.797 648.62 L
f
249.491 608.31 m
244.064 608.31 L
244.064 648.62 L
249.491 648.62 L
252.979 648.62 260.516 648.146 260.516 639.878 c
260.516 620.842 l
260.516 616.708 261.678 608.31 249.491 608.31 C
250 606.587 L
257.334 606.543 264.737 608.397 269.215 614.855 c
274.24 622.104 275.301 632.385 270.335 639.834 c
263.444 650.17 257.151 650.343 250.318 650.343 C
228.302 650.343 L
228.302 648.62 L
232.78 648.62 L
232.78 608.31 L
228.302 608.31 L
228.302 606.587 L
250.107 606.587 L
249.491 608.31 L
f
330.915 608.307 m
325.632 608.31 L
325.632 606.587 L
346.994 606.587 L
346.994 608.31 L
342.773 608.31 l
325.977 651.204 l
323.652 651.204 L
307.975 610.333 L
306.795 608.065 304.702 608.31 302.893 608.31 C
302.893 606.587 L
316.416 606.587 L
316.416 608.31 L
312.769 608.31 309.713 607.764 310.946 611.367 C
313.703 618.559 L
327.011 618.646 l
330.915 608.307 l
F
0.4 0.03 0.3 0 k
320.361 636.475 m
326.304 620.642 L
314.462 620.626 L
320.361 636.475 L
f
0 0.9 1 0 k
354.246 645.097 m
354.246 610.299 L
354.194 607.931 351.369 608.482 348.699 608.275 C
348.699 606.552 L
362.911 606.552 L
362.911 608.275 L
360.594 608.297 356.976 607.952 356.968 610.299 C
356.968 644.451 L
385.392 605.346 L
386.77 605.346 L
386.77 645.829 L
386.856 648.844 390.216 648.543 392.627 648.586 C
392.627 650.308 L
378.674 650.308 L
378.674 648.499 L
380.999 648.456 384.703 648.715 384.703 645.743 C
384.703 624.123 L
366.27 650.308 L
348.699 650.308 L
348.699 648.586 L
351.722 648.586 L
353.144 648.543 354.272 648.37 354.246 645.097 C
f
180.239 592.977 m
182.478 592.977 l
182.478 581.436 l
180.153 581.436 l
179.895 584.45 176.274 591.644 168.783 591.858 c
165.769 591.944 160.428 589.963 159.998 585.743 c
159.567 581.522 164.391 580.23 168.697 579.369 c
173.004 578.507 179.119 577.043 181.445 574.459 c
183.771 571.875 185.407 569.636 185.321 564.037 c
185.235 558.438 183.771 554.734 179.809 551.203 c
175.846 547.672 166.199 546.551 161.032 551.203 c
157.5 548.705 l
155.364 548.705 l
155.364 561.367 l
157.586 561.367 l
159.05 556.63 162.582 549.997 170.162 549.997 c
177.741 549.997 180.842 555.251 180.756 558.438 c
180.67 561.625 179.809 563.692 171.626 565.76 c
163.443 567.827 161.264 568.992 158.206 571.875 c
155.191 574.717 153.968 583.503 157.328 587.895 c
160.687 592.288 164.995 593.846 168.611 593.959 c
173.004 594.097 177.052 591.599 177.913 591.083 c
180.239 592.977 l
f
298.88 591.255 m
304.306 591.255 L
304.306 592.977 L
283.117 592.977 L
283.117 591.255 L
287.596 591.255 L
287.596 550.944 L
283.117 550.944 L
283.117 549.222 L
304.306 549.222 L
304.306 550.944 L
298.88 550.944 L
298.88 591.255 L
f
251.472 573.812 m
251.472 590.997 L
254.831 590.954 257.932 591.001 258.922 590.829 c
260.975 590.472 262.855 590.643 262.97 585.807 C
262.97 578.852 L
262.883 575.154 260.374 574.151 258.922 573.899 c
257.932 573.727 254.858 573.792 251.5 573.75 C
251.5 571.875 L
256.402 572.368 258.965 570.152 v
261.032 568.365 261.032 565.243 261.119 560.678 c
261.205 556.113 262.583 551.806 264.564 550.342 c
266.545 548.877 273.005 546.121 279.551 550.255 c
279.637 551.375 l
278 551.117 273.694 550.255 273.608 553.528 c
273.522 556.802 273.608 563.003 272.144 565.329 c
271.303 566.664 269.64 570.768 259.654 572.237 C
264.715 572.844 269.384 573.92 272.144 576.526 c
277.164 581.268 274.286 587.241 271.541 589.791 c
267.194 593.827 258.838 592.943 256.554 592.977 C
235.365 592.977 L
235.02 592.977 L
235.02 591.255 L
240.188 591.255 L
240.188 550.944 L
235.106 550.944 L
235.106 549.222 L
256.898 549.222 L
256.898 550.944 L
251.472 550.944 L
251.472 573.812 L
f
207.371 571.812 m
207.371 591.126 L
210.73 591.083 213.831 590.932 214.822 590.76 c
216.521 590.464 218.98 590.237 219.085 585.807 C
219.085 576.698 L
218.997 573.001 216.273 571.999 214.822 571.746 c
213.831 571.573 210.734 571.401 207.375 571.358 C
207.371 569.636 L
209.955 569.549 213.056 569.636 v
214.394 569.673 223.69 569.455 228.043 574.114 c
234.392 580.91 231.058 586.173 227.441 589.532 c
223.094 593.568 214.737 592.943 212.453 592.977 C
191.264 592.977 L
191.264 591.255 L
195.743 591.255 L
195.743 550.944 L
191.264 550.944 L
191.264 549.222 L
213.185 549.222 L
213.185 550.944 L
207.371 550.944 L
207.371 571.812 L
f
315.457 587.767 m
315.457 552.969 L
315.405 550.6 312.365 550.944 309.91 550.944 C
309.91 549.222 L
324.122 549.222 L
324.122 550.944 L
321.805 550.966 318.187 550.622 318.179 552.969 C
318.179 587.121 L
346.603 548.016 L
347.981 548.016 L
347.981 588.499 L
348.067 591.514 351.427 591.212 353.838 591.255 C
353.838 592.977 L
339.885 592.977 L
339.885 591.169 L
342.21 591.126 345.914 591.384 345.914 588.412 C
345.914 566.793 L
327.481 592.977 L
309.91 592.977 L
309.91 591.255 L
312.933 591.255 L
314.355 591.212 315.483 591.039 315.457 587.767 C
f
429.559 592.977 m
431.798 592.977 l
431.798 581.436 l
429.473 581.436 l
429.215 584.45 425.594 591.644 418.103 591.858 c
415.089 591.944 409.748 589.963 409.318 585.743 c
408.887 581.522 413.71 580.23 418.017 579.369 c
422.324 578.507 428.439 577.043 430.765 574.459 c
433.091 571.875 434.727 569.636 434.641 564.037 c
434.555 558.438 433.091 554.734 429.128 551.203 c
425.166 547.672 415.519 546.551 410.351 551.203 c
406.82 548.705 l
404.684 548.705 l
404.684 561.367 l
406.906 561.367 l
408.37 556.63 411.902 549.997 419.481 549.997 c
427.061 549.997 430.162 555.251 430.076 558.438 c
429.99 561.625 429.128 563.692 420.946 565.76 c
412.763 567.827 410.584 568.992 407.526 571.875 c
404.511 574.717 403.288 583.503 406.648 587.895 c
410.007 592.288 414.314 593.846 417.931 593.959 c
422.324 594.097 426.372 591.599 427.233 591.083 c
429.559 592.977 l
f
395.605 556.371 m
395.605 563.864 L
399.74 563.864 L
399.74 565.587 L
378.206 565.587 L
378.206 563.864 L
384.063 563.864 L
384.063 553.528 l
381.479 549.48 378.76 549.412 374.847 550.169 c
369.507 551.203 369.507 558.697 369.421 563.133 c
369.421 579.963 l
369.421 595.456 386.044 596.251 391.23 580.178 C
393.624 580.178 l
393.624 593.064 l
390.954 593.064 l
388.887 590.48 l
387.164 591.686 384.39 593.839 378.844 593.839 C
372.47 593.839 365.947 591.909 359.515 582.263 c
354.549 574.814 355.609 564.394 360.635 557.146 c
365.752 549.766 372.845 547.975 379.67 548.016 C
387.164 548.016 392.246 551.289 395.605 556.371 c
f
0 To
1.074 0 0 1.074 297 163 0 Tp
TP
-141.1629 0 Td
0 Tr
0 g
1 w
/_Helvetica 7.447 Tf
1 Ta
8.38 0 Tl
(Copyright\251 1987 Adobe Systems Incorporated. Adobe Illustrator 88 is a trademark ) Tx 
(of \r) Tx 
60.2668 -8.38 Td
(Adobe Systems Incorporated. All rights reserved.\r) Tx 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
