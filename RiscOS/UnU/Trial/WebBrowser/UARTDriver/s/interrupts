; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : interrupts
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : June 1995
;    Description  : This code should handle all irq interrupts.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_irq
;
; This code handles the interrupts from the UART, this routine basically handles all the
; communication with this chip, RX and TX of characters.

handle_irq	ENTRY	"r11"

                LDR     r11, UARTBaseAddress                  		; r11 -> UART base
irq_poll_loop
                LDRB    r1, UART_interrupt_ident			; r1 = interrupt identity register
                AND     r1, r1, #IIR_IRQBits				; mask off the IRQ bits (00001111)
                TST     r1, #IIR_no_interrupt                     	; if no more interrupt causes
                BNE     irq_exit					; leave the poll loop

                TEQ     r1, #IIR_line_status
                BEQ     handle_line_status
                TEQ     r1, #IIR_RX_full
                BEQ     handle_rx_full
                TEQ     r1, #IIR_TX_empty
                BEQ     handle_tx_empty

; if none of the above, it must be...

handle_modem_status
                LDRB    r1, UART_modem_status				; r1 = contents of modem status register
                LDR     lr, UARTDeviceFlags
                BIC     r2, lr, #(1:SHL:SF_DCDHigh):OR:(1:SHL:SF_DSRHigh):OR:(1:SHL:SF_Ringing):OR:(1:SHL:SF_CTSHigh)

                TST     r1, #MSR_CTS_active				; OR in state of CTS
                ORREQ   r2, r2, #1:SHL:SF_CTSHigh

                TST     r1, #MSR_DSR_active				; OR in state of DSR
                ORREQ   r2, r2, #1:SHL:SF_DSRHigh

                TST     r1, #MSR_RI_active				; OR in state of RI
                ORRNE   r2, r2, #1:SHL:SF_Ringing

                TST     r1, #MSR_DCD_active				; OW in state of DCD
                ORREQ   r2, r2, #1:SHL:SF_DCDHigh

                STR     r2, UARTDeviceFlags

; if DCD just went high and we're not ignoring it, then generate a serial error event

                TST     r2, #1:SHL:SF_DCDHigh				; if DCD not high now
                BEQ     DCD_OK						; then skip
                TST     lr, #1:SHL:SF_DCDHigh				; else if DCD was high already
                TSTEQ   lr, #1:SHL:SF_DCDIgnore				; or we're ignoring DCD
                BNE     DCD_OK						; then skip

                MOV     r1, #0						; indicate none of PE,OV or FE
                BL      give_error
DCD_OK

; now update TXI etc since CTS or DSR may have gone low

                BL      update_DTRRTSTXI
                B       irq_poll_loop					; go back to test other interrupts

; handle line status interrupt

handle_line_status
                LDRB    r0, UART_line_status				; r0 = line status register
                BL      process_line_status_error
                B       irq_poll_loop					; go back to test other interrupts

; handle receive interrupt (even in FIFO mode we must go round poll loop for each char in case of errors)

handle_rx_full
                LDRB    r0, UART_data_word				; get byte received into r2

                LDR     r2, UARTDeviceFlags				; r2 = UART device flags
                TST     r2, #1:SHL:SF_DCDIgnore				; if not ignoring DCD
                ORREQ   lr, r2, #1:SHL:SF_DCDHigh			;     and DCD is high then
                TEQEQ   lr, r2
                BEQ     %FT20                                   	;   deal with error

                TST     r2, #1:SHL:SF_XONXOFFOn                 	; if not doing xon/xoff
                BEQ     %FT10                                   	; then skip

                TEQ     r0, #XOFFChar                           	; if it's the XOFF character
                ORREQ   r2, r2, #(1:SHL:SF_HeXOFFedMe)          	; then set bit
                STREQ   r2, UARTDeviceFlags				; stash the UART device flags away
                BEQ     irq_poll_loop                          		; and go back to main poll loop

                TEQ     r0, #XONChar                            	; if it's the XON character then
                BEQ     %FT30                                   	;   deal with it
10
                TST     r2, #(1:SHL:SF_RXIgnore)			; is input supressed currently?
                BNE     irq_poll_loop					; if so, then throw character away

                LDR     r1, InputBufferHandle				; get buffer handle to insert into
                CMP     r1, #-1						; if there is a buffer (handle <> -1)
                BEQ     irq_poll_loop

                TEQP    pc, #SVC_mode + I_bit                   	; go into SVC mode no IRQs for SWI
                NOP
                Push    "r9,lr"                                 	; save SVC_lr
                MOV     r9, #INSV
		CLRV
                SWI     XOS_CallAVector                         	; C=0 => r2=char, C=1 => buffer empty
                Pull    "r9,lr"                                 	; restore SVC_lr

                MOV     r0, #SVC_mode :EOR: IRQ_mode
                TEQP    r0, pc                                  ; go back to IRQ mode, preserving C (IRQ_lr unchanged)

                B       irq_poll_loop
20
                MOV     r1, #0                                  	; indicate no other errors besides DCD
		MOV	r2, r0						; copy char
                BL      give_error
                B       irq_poll_loop
30
                BIC     r2, r2, #(1:SHL:SF_HeXOFFedMe)          	; got XON so clear bit
                STR     r2, UARTDeviceFlags				; stash the UART device flags

                LDRB    lr, UART_interrupt_enable			; lr = interrupt enable register
                ORR     lr, lr, #IER_transmit_empty                    	; and enable transmit IRQ
                STRB    lr, UART_interrupt_enable			; store back in interrupt enable register

                B       irq_poll_loop

; handle transmit interrupt (in FIFO mode we can send FIFO_Size bytes)

handle_tx_empty
                LDR     r3, UARTDeviceFlags				; r0 = UART device flags
                TST     r3, #1:SHL:SF_UseFIFOs                  	; if FIFOs are disabled then
                MOVEQ   r0, #0                                  	;   can only send one byte
                MOVNE   r0, #1                         			; else assume sending 2 with FIFO enabled
                TSTNE   r3, #1:SHL:SF_FillTXFIFO                	; if we want to fill whole FIFO then
                MOVNE   r0, #FIFO_size-1                        	;   FIFO_size-1 bytes left to send
                STRB    r0, UARTTxByteCount				; store count value
                BL      irq_tx_byte                            		; send one byte now in response to interrupt

                B       irq_poll_loop

irq_tx_byte
                TST     r3, #1:SHL:SF_StoppingBreak             	; if trying to stop break then
                BNE     %FT80                                   	;   go disable TXI

                TST     r3, #1:SHL:SF_BreakOn                   	; if sending break then
                BNE     %FT60                                   	;   go do it

                MOV     r0, r3                                  	; don't corrupt r3
                TST     r0, #1:SHL:SF_CTSIgnore                 	; if ignoring CTS
                BICNE   r0, r0, #1:SHL:SF_CTSHigh               	;   then pretend its low
                TST     r0, #1:SHL:SF_DSRIgnore                 	; if ignoring DSR
                BICNE   r0, r0, #1:SHL:SF_DSRHigh               	;   then pretend its low
                TST     r0, #(1:SHL:SF_CTSHigh):OR:(1:SHL:SF_DSRHigh) 	; if CTS or DSR high and not ignored,
                BNE     %FT80                                         	;   then just disable TXI

                LDRB    r2, UARTXONXOFFChar                   		; if we have to send an XON or an XOFF
                TEQ     r2, #0
                MOVNE   r1, #0
                STRNEB  r1, UARTXONXOFFChar                   		; then zero the byte to send
                BNE     %FT50                                   	; and go send the byte

                TST     r3, #(1:SHL:SF_HeXOFFedMe)              	; if we are XOFFed
                TSTEQ	r3, #(1:SHL:SF_TXDormant)              		; or no chars to send
                BNE     %FT80                                   	; then disable TXI
40
                LDR     r1, OutputBufferHandle
                CMP     r1, #-1                                 	; if no output buffer then
                BEQ     %FT70                                   	;   sleep and disable TXI

                TEQP    pc, #SVC_mode + I_bit                   	; go into SVC mode no IRQs for SWI
                NOP
                Push    "r9,lr"                                 	; save SVC_lr
                MOV     r9, #REMV
		CLRV
                SWI     XOS_CallAVector                         	; C=0 => r2=char, C=1 => buffer empty
                Pull    "r9,lr"                                 	; restore SVC_lr
                MOV     r0, #SVC_mode :EOR: IRQ_mode
                TEQP    r0, pc                                  ; go back to IRQ mode, preserving C (IRQ_lr unchanged)
                BCS     %FT70                                   	; if buffer empty then sleep and disable TXI

                TST     r3, #1:SHL:SF_XONXOFFOn                 	; if not using XON/XOFF then
                BEQ     %FT50                                   	;   send the byte

                TEQ     r2, #XOFFChar                           	; else if XOFF char
                ORREQ   r3, r3, #1:SHL:SF_UserXOFFedHim         	;   then set user bit
                TEQ     r2, #XONChar                            	; else if XON char
                BICEQ   r3, r3, #1:SHL:SF_UserXOFFedHim         	;   then clear user bit
                STR     r3, UARTDeviceFlags                   	;   and store modified serial device flags
                BNE     %FT50                                   	;   and skip if not an XON character.....

                TST     r3, #1:SHL:SF_IXOFFedHim                	; if we're trying to XOFF him
                BNE     %BT40                                   	; don't send XON, go and look for another byte
50
                STRB    r2, UART_data_word                       	; send the byte
                MOV     pc, lr
60
                LDRB    r1, UART_line_control				; send break
                ORR     r1, r1, #LCR_break_enable
                STRB    r1, UART_line_control
                MOV     r2, #0
                B       %BT50
70
                ORR     r3, r3, #1:SHL:SF_TXDormant             	; go to sleep
                STR     r3, UARTDeviceFlags
80
                LDRB    r1, UART_interrupt_enable                	; disable Tx interrupt and exit
                BIC     r1, r1, #IER_transmit_empty
                STRB    r1, UART_interrupt_enable

                MOV     r1, #0                                  	; don't send any more bytes
                STRB    r1, UARTTxByteCount

                MOV     pc, lr

; no more interrupt causes at present so see if we have any more bytes to stuff in the FIFO (if there is one)
; this is done here so that filling any FIFO takes a lower priority than servicing other interrupts

irq_exit
                LDRB    r1, UARTTxByteCount
                SUBS    r1, r1, #1
                EXITS   CC                                      	; exit when no more bytes to be sent

                STRB    r1, UARTTxByteCount                     	; otherwise, update count
                LDR     r3, UARTDeviceFlags                     	; and send another byte
                BL      irq_tx_byte
                B       irq_poll_loop                          		; then check for more interrupts

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END

