; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;    Filename     : main
;    Author	  : R.W.Buckley
;    Company	  : Online Media
;    Date         : May 1995
;    Description  : Handle usual module stuff, initialisation, finalisation, service calls and top
;		    level hardware initialisation.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; Description of how the workspace is to be used
                         	^ 0, wp
ExpansionCardBaseAddress 	# 4			; set by hardware detect routine
EASISpaceBaseAddress		# 4			; set by hardware detect routine
UARTBaseAddress			# 4			; set by hardware detect routine
InterruptAddress		# 4			; set by hardware detect routine

UARTDeviceFlags       		# 4             	; UART flags
UARTThreshold         		# 4             	; threshold value being used
DeviceHandle			# 4			; Device handle as returned form DeviceFS

Flags                    	# 1			; general flags
UARTBaud			# 1			; baud rate (8bit) for RX and tx
UARTXONXOFFChar       		# 1             	; serial XON/XOFF character (8bit)
UARTTxByteCount       		# 1             	; used by TX IRQ routine to count bytes left to send

InputStreamHandle             	# 4             	; DeviceFS handle used for input stream
OutputStreamHandle            	# 4             	; DeviceFS handle used for output stream

InputBufferHandle       	# 4             	; buffer handle used for input stream  (-1 if none)
OutputBufferHandle      	# 4             	; buffer handle used for output stream (-1 if none)

MessagesWorkspace        	# 16            	; workspace needed for messages routines

workspace               	* :INDEX: @

; Define global flags etc used by the module

; Bit definitions for Flags
flag_UARTPresent		* 1:SHL:0		; set => hardware is present
flag_HaveMessages        	* 1:SHL:1       	; set => have messages
flag_FIFOsSupported		* 1:SHL:2		; set => FIFOs are supported
flag_FIFOsEnabled          	* 1:SHL:3       	; set => FIFOs are enabled
flag_OwnIRQ             	* 1:SHL:4       	; set => IRQ owned for device
flag_UpCallVector		* 1:SHL:5		; set => registered with UpCall vector
flag_SerialVector		* 1:SHL:6		; set => when serialV claimed

UART_baud_rate_max		* 18 + 1		; the maximum baud rate index supported + 1

osbyte_insert_buffer		* 138			; insert character info given buffer
osbyte_remove_buffer		* 145			; remove character from given buffer

input_buffer_size		* 1024			; input buffer size
output_buffer_size		* 1024			; output buffer size
buffer_threshold		* 20			; threshold value used when setting up buffers


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standard module declarations

module          & 0
                & init    -module                       	; => initalise routine
                & final   -module                       	; => finalise routine
                & service -module                       	; => service trap

                & title -module                         	; => title string
                & help  -module                         	; => help string
                & 0

                & &83900					; => SWI base chunk
                & 0						; => code to handle swi calls
                & 0						; => table of supported SWIs
                & 0

title           = "UARTDeviceDriver", 0

help            = "UARTDeviceDriver", 9, "$VString ($Date) © Online Media (Surfer demo)", 0

swi_table       = "UART", 0
                = "SerialOp", 0					; compatable with OS_SerialOps
		= "GetBufferHandles", 0				; return buffer handles
                = 0

                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
 [ debug

Host_Debug  	SETL 	False 			; Set to true to send output to the tube
HostDebugViaTML	SETL 	False			; Set to true to use TML to send debug stream to host
Debug_Module	SETL	False			; Set to true to use DebugItModule.
Debug_File      SETS	"$.Debug" ; Set to send debug stream to the specified file

 ]
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DeviceFS declarations

device_name     = "Serial", 0

                ALIGN

device_block    & device_name - device_block
                & DeviceFlag_BufferedDevice + DeviceFlag_DefinePathVariable
                & 0                                     ; default RX buffer flags
                & 256                                   ; default RX buffer size
                & 0                                     ; default TX buffer flags
                & 192                                   ; default TX buffer size
                & 0                                     ; reserved field (must be zero)

                & 0                                     ; end of table

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; ResourceFS declarations

              [ international
                ! 0, "   messages internationalised"
resource_file   = "Resources:$.Resources.UART.Messages", 0
              ]
                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Error declarations
                MakeErrorBlock UART_BadBaud
                MakeErrorBlock UART_BadSWI
		MakeErrorBlock UART_NotPresent

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.
;
init            ENTRY	"r7-r11"

                LDR     r2, [r12]			; r2 = &wp
                TEQ     r2, #0                          ; any workspace / warm start?
                BNE     %10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace                  ; r3  = amount of workspace

                SWI     XOS_Module
                EXIT    VS                              ; return if didn't work

                STR     r2, [wp]			; wp = r2
10
                MOV     wp, r2                          ; wp -> workspace

 [ standalonemessages
                ADRL    r0, resource_file_block
                SWI     XResourceFS_RegisterFiles   	; ignore errors (starts on Service_ResourceFSStarting)
 ]
                MOV     r0, #0
		STR	r0, ExpansionCardBaseAddress	; reset flags and rest of workspace stuff
		STR	r0, EASISpaceBaseAddress
		STR	r0, UARTBaseAddress
		STR	r0, InterruptAddress
		STR	r0, UARTDeviceFlags
		STR	r0, UARTThreshold
		STR	r0, DeviceHandle
                STR     r0, Flags
		STR	r0, UARTBaud
		STR	r0, InputStreamHandle
		STR	r0, OutputStreamHandle
		STR	r0, UARTXONXOFFChar
		STR	r0, UARTTxByteCount

                MOV     r0, #-1
                STR     r0, InputBufferHandle
                STR     r0, OutputBufferHandle

		BL 	hardware_detect			; call routine to perform hardware detection
		LDR	r0, Flags			; see if hardware is present
		TST	r0, #flag_UARTPresent
		EXITS	EQ				; exit if not present

		BL	register_device			; UART present so register device with DeviceFS
		BL	get_vectors			; claim the requied vectors
		BL	initialise_uart			; do some initialisation

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;

final           ENTRY	"r7-r11"

                LDR     wp, [r12]                        	; wp -> workspace

		LDR	r0, Flags				; check that we have some hardware present
		TST	r0, #flag_UARTPresent
		BEQ	%10					; no hardware, drop further down

		BL	free_vectors				; release required vectors

                LDR     r0, DeviceHandle                	; am I registered with DeviceFS?
                TEQ     r0, #0
                BEQ     %10                           		; no, then jump

                SWI     XDeviceFS_Deregister            	; close all streams, ignore errors
                MOV     r0, #0
                STR     r0, DeviceHandle                	; zero the device handle
10
		BL	hardware_remove				; release any owned IRQs

              [ international
                BL      close_messages                   	; close any messages files
              ]

 [ standalonemessages
                ADRL    R0, resource_file_block
                SWI     XResourceFS_DeregisterFiles
 ]
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service calls received by the module.
;
; Quickly test to see if they are of interest to use and pass on.

service         ROUT
                TEQ     r1, #Service_DeviceFSStarting
                TEQNE   r1, #Service_DeviceFSDying
 [ standalonemessages
                TEQNE   r1, #Service_ResourceFSStarting
 ]
                MOVNES  pc, lr

                LDR     wp, [r12]				; sort the workspace pointer out

                TEQ     r1, #Service_DeviceFSStarting		; dealing with DeviceFS starting
                BEQ     register_device                  	; attempt to register the device

                TEQ     r1, #Service_DeviceFSDying		; dealing with DeviceFS exiting
                STREQ   r0, DeviceHandle			; r0 = 0 from service call

 [ standalonemessages
                TEQ     r1, #Service_ResourceFSStarting		; dealing with ResourceFS starting
                BNE     %FT30					; no so continue
                Push    "r0-r3,lr"
                ADRL    r0, resource_file_block
                MOV     lr, pc
                MOV     pc, r2
                Pull    "r0-r3,pc",,^				; and exit
30
 ]
                MOVS  	pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; get_vectors
;
get_vectors	ENTRY	"r0-r3"

		LDR	r3, Flags				; load Flags into r3
		TST	r3, #flag_SerialVector
		BNE	%10					; exit if already owned

		MOV	r0, #SerialV
		ADDR	r1, handle_serialv
		MOV	r2, wp
		SWI	XOS_Claim

		ORRVC	r3, r3, #flag_SerialVector
		STR	r3, Flags
10
		TST	r3, #flag_UpCallVector			; check to see if we have the vector already
		EXITS	NE					; exit if already owned

		MOV	r0, #UpCallV				; copy vector number into r0
		ADDR	r1, handle_upcall			; routine to call
                MOV     r2, wp                  		; r2 -> workspace
                SWI     XOS_Claim

		ORRVC	r3, r3, #flag_UpCallVector		; show that we have claimed the vector
                STR     r3, Flags				; and store result back in Flags

                STRVS   r0, [sp]                		; if error store into stack frame
                PullEnv
                BICVCS  pc, lr, #V_bit
                ORRS    pc, lr, #V_bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; free_vectors
;
free_vectors	ENTRY	"r0-r3"

		LDR	r3, Flags				; load Flags into r3
		TST	r3, #flag_UpCallVector			; check to see if we have the vector already
		BEQ	%10					; exit if not owned

		MOV	r0, #UpCallV				; copy vector number into r0
		ADDR	r1, handle_upcall			; routine to call
                MOV     r2, wp                  		; r2 -> workspace
                SWI     XOS_Release

		BICVC	r3, r3, #flag_UpCallVector		; show that we have released the vector
                STR    	r3, Flags				; and store result back in Flags
10
		TST	r3, #flag_UpCallVector			; check to see if we have the vector already
		EXITS	EQ

		MOV	r0, #SerialV				; copy vector number into r0
		ADDR	r1, handle_serialv			; routine to call
                MOV     r2, wp                  		; r2 -> workspace
                SWI     XOS_Release

		BICVC	r3, r3, #flag_SerialVector		; show that we have released the vector
                STR    	r3, Flags				; and store result back in Flags

                PullEnv
                BICS  	pc, lr, #V_bit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; register device
;
register_device ENTRY "r0-r7"
                MOV     r0, #ParentFlag_FullDuplex      	; device is full duplex
                ADRL    r1, device_block                 	; device information block
                ADDR    r2, handle_device_call                	; -> code to call for device
                MOV     r3, #0
                MOV     r4, wp                          	; -> workspace for the device
                MOV     r5, #0                          	;    special fields are allowed
                MOV     r6, #1					; maximum number of RX devices
                MOV     r7, #1                          	; maximum number of TX devices
                SWI     XDeviceFS_Register
                STRVS   r0, [sp]
                EXITS   VS                              	; return if it did not work
                STR     r0, DeviceHandle                	; stash the device handle in workspace
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; register device
;
initialise_uart ENTRY "r0-r2"

		MOV     r0, #0					; set r0 to 0
  		LDR     r1, Flags				; copy Flags into r1
                TST     r1, #flag_FIFOsSupported 		; if we can use FIFOs then
                MOVNE   r0, #1:SHL:SF_UseFIFOs			; set flag in device flags
		STR     r0, UARTDeviceFlags			; but just store 0 from above if we can't

                MOV   	r1, #buffer_threshold                 	; use a default value
                STR     r1, UARTThreshold             		; and store it away in workspace

		BL	hardware_reset				; reset the UART

                MOV     r0, #ReadCMOS				; OS_Byte to read cmos ram
                MOV     r1, #PSITCMOS				; address of printer information
                SWI     XOS_Byte				; baud rate is bits 2-4
                MOVVC   r2, r2, LSR #2                  	; if succeeded, shift bits down
                ANDVC   r2, r2, #2_111                  	; extract relevant bits (0 => 75, ... ,7 => 19200)
                ADDVC   r2, r2, #1                      	; 1 => 75, ... ,8 => 19200
                MOVVS   r2, #0                          	; use 9600 if error

                MOV     r1, r2                          	; copy r2 into r1 for call to set baud rates
                BL 	swi_set_baud				; change the baud rates in UART

                MOV     r0, #ReadCMOS				; OS_Byte to read cmos ram
                MOV     r1, #DBTBCMOS				; address of misc. flags
                SWI     XOS_Byte				; serial data format word is bits 5-7
                MOVVC   r2, r2, LSR #5                  	; if succeeded, shift bits down
                ANDVC   r2, r2, #2_111                  	; r2 => serial data format
                MOVVS   r2, #4                          	; default to 8n2 if error

                ADR     r1, data_format_table			; point to table below
                LDRB    r1, [r1, r2]                    	; convert from configured value to usable value

                BL      swi_data_format	  	                ; inform format changes, same as SerialOp 1

		EXITS

data_format_table
                = (1:SHL:0)+ (1:SHL:4)+ (1:SHL:2)+ (1:SHL:3) ; 0 - 11101
                = (1:SHL:0)+ (0:SHL:4)+ (1:SHL:2)+ (1:SHL:3) ; 1 - 01101
                = (1:SHL:0)+ (1:SHL:4)+ (0:SHL:2)+ (1:SHL:3) ; 2 - 11001
                = (1:SHL:0)+ (0:SHL:4)+ (0:SHL:2)+ (1:SHL:3) ; 3 - 01001
                = (0:SHL:0)+ (0:SHL:4)+ (1:SHL:2)+ (0:SHL:3) ; 4 - 00100
                = (0:SHL:0)+ (0:SHL:4)+ (0:SHL:2)+ (0:SHL:3) ; 5 - 00000
                = (0:SHL:0)+ (1:SHL:4)+ (0:SHL:2)+ (1:SHL:3) ; 6 - 11000
                = (0:SHL:0)+ (0:SHL:4)+ (0:SHL:2)+ (1:SHL:3) ; 7 - 01000

                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generalised internationalisation routines, these ensure that messages files
; are correctly opened and then return the relevant data.
;
              [ international


; Attempt to open the messages file.

open_messages   ENTRY   "r0-r3"
                LDR     r3, Flags
                TST     r3, #flag_HaveMessages			; do we have an open messages block?
                EXITS   NE                                   	; yes, so don't bother again

                ADR     r0, MessagesWorkspace
                ADRL    r1, resource_file                       ; -> path to be opened
                MOV     r2, #0                                  ; allocate some wacky space in RMA
                SWI     XMessageTrans_OpenFile
                LDRVC   r3, Flags
                ORRVC   r3, r3, #flag_HaveMessages
                STRVC   r3, Flags                               ; assuming it worked mark as having messages
                EXITS                                           ; always return VC, cos don't want to corrupt r0
                                                                ; (will hold a real error pointer)

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Attempt to close the messages file.

close_messages  ENTRY   "r0"
                LDR     r0, Flags
                TST     r0, #flag_HaveMessages                  ; do we have any messages?
                EXITS   EQ                                      ; and return if not!

                ADR     r0, MessagesWorkspace
                SWI     XMessageTrans_CloseFile                 ; yes, so close the file
                LDRVC   r0, Flags
                BICVC   r0, r0, #flag_HaveMessages
                STRVC   r0, Flags                               ; mark as we don't have them
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generate an error based on the error token given.  Does not assume that
; the messages file is open.  Will attempt to open it, then look it up.
; if make_error_with_name is called, the module name is substituted in r4

make_error_with_name ENTRY
		ADRL	r4, title
		B	make_error_entry

make_error      ENTRY
                MOV     r4, #0
make_error_entry
                LDR     r1, Flags
                TST     r1, #flag_HaveMessages                   ; has the messages file been closed?
                BLEQ    open_messages

                LDR     r1, Flags
                TST     r1, #flag_HaveMessages
                PullEnv EQ
                ORREQS  pc, lr, #VFlag                          ; if still not open then return with V set

                ADR     r1, MessagesWorkspace                   ; -> message control block
                MOV     r2, #0
                MOV     r3, #0
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0                                  ; no substitution + use internal buffers
                SWI     XMessageTrans_ErrorLookup
                BL      close_messages                          ; attempt to close the doofer

                EXIT                                            ; return, r0 -> block, V set

              ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This bit of appartently harmless code will bind a messages file into the code in the case of
; a standalong module. The macro ResourceFile will create the stuff and the label resource_file is
; used to point to the block required by ResourceFS
 [ standalonemessages
resource_file_block
		ResourceFile Resources.<Locale>.Messages, Resources.UART.Messages
                DCD     0
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
