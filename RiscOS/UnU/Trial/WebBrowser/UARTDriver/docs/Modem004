
                     SOFTWARE FUNCTIONAL SPECIFICATION
                     =================================

                     Modem driver for RiscOS Roadster
                     --------------------------------

                             Issue:     0.04 ***LIVE***
                            Author:     R.W.Buckley
                              Date:     6th July 1995
                    Drawing Number:     xxxx,xxx/FS

                        Last Issue:     0.03
_______________________________________________________________________________


1.  History.

    Version    Date     Notes
     0.01    18-04-95   Initial draft
     0.02    20-04-95   Slight amendendments after review by Pete W.
     0.03    20-04-95   Added issues regarding interrupt status polarity 
     			support from the kernel.
     0.04    06-07-95   Altered spec in line with software development 
     			progress.


2.  Outstanding Issues.

    Testing with Viewcall/Oracle software.
    Integration with Roadster ROM build.
    

3.  Product Overview.

3.1 Roadster.

    The Roadster project is the STB development for the Viewcall interactive 
    home shopping contract. The Roadster hardware is initially to be a Falcon 
    based main board depopulated of components not required by Viewcall 
    e.g. MPEG circuitry.
    
    Development is being undertaken jointly between Online Media and Viewcall.
    Viewcall have sub-contracted the application software development to the 
    Cambridge based software company Origin. A modem card is being developed 
    for Online Media by CME. Operating System development and further hardware 
    work is being undertaken by Online Media.
    
    Roadster will use standard telephone cables as the network medium to 
    communicate between the STB and server. This requires a modem to be fitted 
    to the STB in place of the ATM card used in normal Falcon type STBs. 
    For prototype and development systems, a U.S. Robotics Sportster modem has 
    has been connected to the serial port of an STB. This gives the hardware 
    configuration shown below.
    
    .-------------------------------------------------.
    |.---------------------.          .--------------.|            .--------.
    || App - serial - UART-|--serial--|-UART - Modem |--telephone--| Server |
    ||       driver        |   line   '--------------'|  network   '--------'
    |'---------------------'                          |
    '-------------------------------------------------'

3.2 Modem card.

    A modem card dedicated to the STB is being developed by a sub-contractor. 
    This aims to be a cost effective solution and will provide a modem 
    functional block to include into future STBs as required. For approval 
    purposes, it is important to have the modem contained on a dedicated PCB. 
    Thus allowing changes to the main board to be made without having to 
    resubmit the modem for approvals. This will give a hardware configuration
    as shown below.
    
       .-----------------------.
       |              .-------.|            .--------.
       | App - modem -| Modem |--telephone--| Server |
       |       driver '-------'|   line     '--------'
       '-----------------------'

    The proposed modem card will interface to the STB main board via the 
    expansion card interface (podule bus). For cost reasons the modem card will
    not comply with the Acorn expansion card specification (hence podule 
    manager functionality). 
    
    A modem device driver is therefore required to provide operating system 
    support for this new device.
    
    
4.  Overview of RiscOS device drivers.

4.1 DeviceFS.

    DeviceFS provides a standardised interface to device drivers within RiscOS.
    
    Devices can be seen as objects within the device filing system. The command
    'Filer_OpenDir devices:$' issued from the command line will display a filer
    window with objects representing each of the devices supported. 
    
    Streams to/from devices can be created by issuing filing system commands.
    The input/output rights of the device are reflected in the access rights of
    the device object. 
    
    A device driver is a set of routines that handle the input or output of
    data. A device driver will have an interface with a set of reason codes as 
    documented in the PRMs.
    
    Software buffering of data to/from the device can be requested, this is 
    handled by DeviceFS transparent to the device driver. All buffers are
    maintained by the buffer manager.
    
    
4.2 Device drivers.

    DeviceFS does not know how to communicate with the hardware. A device 
    driver provides these facilities and its entry point is declared to
    DeviceFS.
    
    DeviceFS will call a device driver through its registered entry point with
    a reason code. The following reason codes are used.
    
       0  initialise     - a stream is being opened
       1  finalise       - a stream is being closed
       2  wake up for TX - data is ready to be transmitted
       3  wake up for RX - ignored
       4  sleep RX       - ignored
       5  enumDir        - ignored
       6  buffer for TX  - buffer about to be created, allows modification
       7  buffer for RX  - buffer about to be created, allows modification
       8  halt           - above buffer threshold, attempt to stop receiving
       9  resume         - below buffer threshold, resume receiving data
       10 end of data    - ignored
       11 stream created - stream has finally been generated allow device setup
    
    
4.3 Serial device drivers.

    As the modem card will appear as a 450/550 UART interface, the new driver 
    will share some common points with the existing serial device drivers. In
    addition, the device driver SWI interface should be maintained.
    
    Support for serial communications under RiscOS is provided by two modules 
    in conjunction with DeviceFS. The functionality is split to assist writers 
    of new serial device drivers. 
    
    The SerialDeviceDriver module registers a device handler with DeviceFS. Any
    OS calls are directed though DeviceFS to this routine where hardware 
    specific calls are made.
    
    The SerialSupport module is used to provide backwards compatibility. This 
    module claims operating system vectors SerialV, ByteV, UpCallV and installs
    handlers for each. Any serial device SWIs, ie OS_SerialOp and OS_Byte 
    (&CB and &CC) are intercepted by this module, validated and a call made to
    the SerialDeviceDriver through DeviceFS with a reason code stored in R0.
        
    It seems rather long winded but this is what happens when a OS_SerialOp 
    send byte call is made,
    
      1. SerialOp reason code is translated into serial control reason code
      2. registers are pushed onto stack and pointer to the stack recorded
      3. call made to device driver using DeviceFS_CallDevice
      4. device handler translates reason code and calls its own routine
      5. if stream doesn't exist, create it and call InsV to insert character
         in buffer maintained by buffer manager
      6. buffer manager calls device driver to flush buffer.
      
    When new serial hardware requires a device driver, the only piece of code 
    that needs adding is the device handler function that is registered with 
    DeviceFS by the SerialDeviceDriver module. This new code can also be 
    largely based on existing code. 
    
    A second serial port is worth mentioning at this point. The peripheral 
    controller device used in the RiscPC and in Falcon contains two serial 
    ports. The interrupt for the second port however, is not connected to 
    anything so cannot be utilised. In addition the RiscOS serial driver will 
    only support one serial port.
    
    The SMC 37C665IR peripheral controller device contains two serial ports 
    with the second port also being capable of supporting the IrDA infrared 
    protocol used for wireless communications of palm-top computers for 
    example. As a software model, the IR port would look and behave identically
    to a serial port. If this device was to be used for wireless comms, a 
    significant amount of work would have to be undertaken to utilise the 
    second serial port.


4.4 UART generalisation.

|   A view was expressed that the device driver should be designed to be as
|   general as possible. Since the modem card will look like a 450/550 UART
|   the device driver should be able to drive any 450/550 UART rather than
|   just the modem card.
|   
|   To assist software development and test, a UART development board will
|   be designed and built which looks identical to the the modem card from
|   a software view but allows the connection of a serial lead to another
|   terminal for bi-directional communications to be tested.


5.  UART driver.

5.1 Software model.

    The modem driver will appear as another device managed by DeviceFS named
    UART. Operations such as character input/output will be performed in the 
    same manner as with the SerialDeviceDriver module.
    
    Some of the code in the SerialSupport module is provided for backwards 
    compatibility this will be omitted from the modem driver. Items to be
    omitted are listed below.
       - 6850 emulation
       - OS_Bytes &CB and &CC
    
    The modem driver will be contained within a single module 
    UARTDeviceDriver rather than the two modules required for the internal
    serial port. This will have the following interfaces :
       - DeviceFS interface as documented above (4.2)
       - SWI interface with register input/outputs identical to SerialOps
       - Buffer interface allowing direct insertion/removal of characters/
         blocks of data to/from the relevant input/output buffers
    

5.2 Hardware model

    The kernel performs some hardware auto-detection. This is used to determine
    what hardware should be driven. The kernel will set a variable 
    IO_SystemType which is read using the SWI OS_ReadSysInfo (3).
    
    In the case of the modem card, the modem device driver will perform the 
    hardware detection and register the device with DeviceFS if present.
    
    The method used for communicating with the card depends on the level of
    podule compliance. There are a number of scenarios of which case (b) is 
    intended for the Roadster project and case (c) if Acorn want to take the
    modem card and use it as a product.

    (a) Not expansion bus compliant.

        Modem card will be at a fixed address so initially check its presence.
        If present, claim device vector 13 (expansion bus) and use for own 
        means.

    (b) Partially compliant with expansion bus.

|       The UART interrupt is memory mapped by a PAL on the expansion card. A
|       handler can therefore be registered with device vector 13 (expansion 
|       bus) using OS_ClaimDeviceVector. 
|       	   
|       The address of the UART status/control registers will be at a fixed
|       address within EASI space. The software will have to assume that the 
|       modem card is going to be in a particular expansion card slot. 

    
    (c) Fully compliant with expansion bus.

|       This case will allow the modem card to be located in any expansion bus
|       slot and work fully with any other expansion cards. With the device
|       driver in an EPROM on the expansion card, on module initialisation
|       the EASI space base address is passed in a register. This can be used
|       to work out subsequent hardware addresses.
   

6.  User Interface

|   The user interface to this module is via DeviceFS only. This allow streams
|   to be opened to/from the device by copying files to an alias UART$Path.
    

7.  Programmer Interface

|   SWIs will be provided to duplicate the functionality of the OS_SerialOp
|   calls but will have a different name, UART_SerialOp. The following reason
|   codes are provided by OS_SerialOp therefore should be supported, along 
|   with their associated register input/outputs.

         0 - read/write serial status
         1 - read/write data format
         2 - send break
         3 - send byte
         4 - read byte
         5 - read/write receive baud rates
         6 - read/write transmit baud rates
         8 - set handshake extent
         9 - enumerate baud rates 

|   The serial input/output buffers within RiscOS are allocated the handles
|   1 and 2. This allows programs to directly insert data into the buffers
|   speeding up data transfer. The UART device driver will have its buffers
|   allocated "on the fly" therefore can take any value. A means of exporting
|   these buffer handles will be provided by a SWI : UART_GetBufferHandle
|   with r0 returning the input buffer handle and r1 returning the output
|   buffer handle.


8.  Standards

    Module to be assembled using aasm version 4.00.
    Writing of a Hugo Fiennes block driver interface for the UARTDeviceDriver
    to allow connection of communication applications.
    

9.  Data Interchange

    There are no data interchange formats defined by this project.


10. Data Formats

    There are no data data formats defined by this project.
    

11. External Dependencies

    Falcon hardware.
    Roadster modem card hardware.
|   UART development card.


12. Acceptance Test

    Must function on Roadster hardware with modem card present under the
    default software configuration.
    
    Must behave predictably if the modem card is not present, this should cover
    the following issues.
    
       - device will not be registered with DeviceFS
       - device vector will not be claimed
       - software vectors will not be claimed
       - input/output buffers will not be created
       - suitable error messages will be returned from SWI calls

|   The UART_SerialOp SWIs should give exactly the same results as OS_SerialOp
|   SWIs in particular same register inputs/outputs and all registers preserved
|   that are reserved by the OS_SerialOps.
    

13. Development Test Strategy

    Test of bi-directional communications using the UART development board,
    a serial lead and a RiscPC. The SQA serial test software has been looked
    at with a program STDEcho ported to use the UART_SerialOp SWIs.
    
    The SWI basher scripting system !PHTester should be used to compare SWI
    results between OS_SerialOps and UART_SerialOps.
    
    Use some standard communications software e.g. KA9Q to test the modem
    functionality in terms of dialups etc. This would require the block driver
    interface to be written.


14. Product organisation

    The modem card will look like a normal UART from a software model and 
    application interface point of view. For example, the modem circuitry on 
    the card could be changed to a normal serial port and the software would 
    know no difference. 
    
    The following names will be used.

|   Module    - Single module, UARTDeviceDriver to be included in operating 
|   	        system ROM build.
    
|   Resources - Messages file to be located Resources:$.Resources.UART.

|   SWI chunk base allocated by Acorn is &83900.

15. Future Enhancements

|   Development of modem card to be fully podule compliant therefore driver
|   software could be shipped on board the podule.

