/*----------------------------------------------------------------------*/
/*    Filename    : c.cli	                                       	*/
/*    Author	  : K.Ruttle and modified by R.W.Buckley		*/
/*    Date        : 1995						*/
/*    Description : Command line interface functions			*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

/* ansi include files */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* os specific include files */
#include "kernel.h"

/* network protocol include files */
#include "sys/types.h"	      /* General types and stuff */
#include "netinet/in.h"	      /* Constants and structures defined by the internet system, */

/* user include files */
#include "global.h"	      /* Global defines for session activity */
#include "swi.h"	      /* Function prototypes */

/* global variables */
extern unsigned int sessionid, userid;

extern struct ssn_hbt session_hbt;

/* global variables */
extern _kernel_oserror *err;
extern _kernel_swi_regs reg;

unsigned long my_address;

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
void cli_stats(int argc, char **argv)
{
  struct ssn_hbt *h = &session_hbt;

  if (h->h_time > 0)
  {
    printf("SessionStats: Destination Host = %s, Interval = %d secs, UDP Port = %d\n",
               (char*)inet_ntoa(h->h_adr.sin_addr.s_addr), h->h_time / 100, h->h_port);
  }
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
void cli_setheartbeat(int argc, char **argv)
{
  session_hbt.h_port = atoi(argv[0]);
  session_hbt.h_time = atoi(argv[1]) * 100;
  session_hbt.h_message.data.interval = session_hbt.h_time / 100;
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
void cli_logon(int argc, char **argv)
{
  char pin[12];
  int error;

  strcpy(pin, argv[0]);
  reg.r[1] = (int)pin;
  error = swi_logon(&reg);
  printf("SessionLogon: ");
  if (error == 0)
  {
    printf("User ID = %d, Session ID = %d\n", userid, sessionid);
  }
  else
  {
    printf("Error = %d\n", error);
  }
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
void cli_logoff(int argc, char **argv)
{
  int error;

  error = swi_logoff(&reg);
  if (error != 0) printf("SessionLogoff: Error = %d\n", error);
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
void cli_event(int argc, char **argv)
{
  int error;

  reg.r[1] = atoi(argv[0]);       /* arg type */
  reg.r[2] = atoi(argv[1]);	    /* arg qualifier */
  reg.r[3] = (int)argv[2];	    /* argp - null terminaled string */
  reg.r[4] = strlen(argv[2]);	    /* argsize - length of string */

  error = swi_report_event(&reg);
  if (error != 0) printf("SessionEvent: Error = %d\n", error);
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
void cli_showdata(int argc, char **argv)
{
  printf("SessionShowData: Session ID = %d, User ID = %d\n", sessionid, userid);
  printf("IP address : %s\n",(char*)inet_ntoa(my_address));
}
