/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "Ssn.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

logonres *
sessionproc_logon_1(argp, clnt)
        logonargs *argp;
        CLIENT *clnt;
{
        static logonres clnt_res;

        memset((char *)&clnt_res, 0, sizeof (clnt_res));
        if (clnt_call(clnt, SESSIONPROC_LOGON,
                (xdrproc_t) xdr_logonargs, (caddr_t) argp,
                (xdrproc_t) xdr_logonres, (caddr_t) &clnt_res,
                TIMEOUT) != RPC_SUCCESS) {
                return (NULL);
        }
        return (&clnt_res);
}

void *
sessionproc_logoff_1(argp, clnt)
        a_auth_data *argp;
        CLIENT *clnt;
{
        static char clnt_res;

        memset((char *)&clnt_res, 0, sizeof (clnt_res));
        if (clnt_call(clnt, SESSIONPROC_LOGOFF,
                (xdrproc_t) xdr_a_auth_data, (caddr_t) argp,
                (xdrproc_t) xdr_void, (caddr_t) &clnt_res,
                TIMEOUT) != RPC_SUCCESS) {
                return (NULL);
        }
        return ((void *)&clnt_res);
}

sdatares *
sessionproc_readsdata_1(argp, clnt)
        a_auth_data *argp;
        CLIENT *clnt;
{
        static sdatares clnt_res;

        memset((char *)&clnt_res, 0, sizeof (clnt_res));
        if (clnt_call(clnt, SESSIONPROC_READSDATA,
                (xdrproc_t) xdr_a_auth_data, (caddr_t) argp,
                (xdrproc_t) xdr_sdatares, (caddr_t) &clnt_res,
                TIMEOUT) != RPC_SUCCESS) {
                return (NULL);
        }
        return (&clnt_res);
}

void *
sessionproc_writesdata_1(argp, clnt)
        sdataargs *argp;
        CLIENT *clnt;
{
        static char clnt_res;

        memset((char *)&clnt_res, 0, sizeof (clnt_res));
        if (clnt_call(clnt, SESSIONPROC_WRITESDATA,
                (xdrproc_t) xdr_sdataargs, (caddr_t) argp,
                (xdrproc_t) xdr_void, (caddr_t) &clnt_res,
                TIMEOUT) != RPC_SUCCESS) {
                return (NULL);
        }
        return ((void *)&clnt_res);
}
