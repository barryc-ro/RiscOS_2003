/*----------------------------------------------------------------------*/
/*    Filename    : c.main	                                       	*/
/*    Author	  : K.Ruttle and modified by R.W.Buckley		*/
/*    Date        : 1995						*/
/*    Description : 							*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*    14/09/95 RWB, Added swi Session_UserProfile			*/
/*    14/09/95 RWB, Modified the error passing part of the swi          */
/*    	       	    dispatcher.			       	   		*/
/*    18/09/95 RWB, Removed Internet event handler			*/
/*    20/09/95 RWB, Improved CLI handler to handle quotes in strings	*/
/*    		   							*/
/*----------------------------------------------------------------------*/

/* standard ansi include files */
#include <stdio.h>
#include <ctype.h>

/* os specific include files */
#include "errno.h"
#include "kernel.h"
#include "swis.h"

/* network protocol include files */
#include "sys/types.h"        /* RPC additions to "sys/types.h" */
#include "sys/uio.h"
#include "sys/socket.h"       /* Definitions related to sockets: types, address families, options. */
#include "sys/ioctl.h"
#include "arpa/inet.h"        /* Address conversion routines */
#include "netinet/in.h"	      /* Constants and structures defined by the internet system, */
#include "net/if.h" 	      /* Structures defining a network interface, providing a packet transport mechanism */
#include "netdb.h" 	      /* Structures returned by network data base library. */

/* user include files */
#include "Om_HBT.h"           /* Online Media Session Heartbeat Protocol (Om_HBT) */
#include "global.h"	      /* Global defines for session activity */
#include "swi.h"	      /* Function prototypes for swi interface functions */
#include "cli.h"	      /* Function prototypes for cli interface functions */

/* local constant declarations */

/* function prototypes */
extern int event_entry();         /* Veneer to event handler provided by cmhg */
extern int tick_entry();	  /* Veneer to interrupt handler provided by cmhg */
extern int callback_entry();	  /* Veneer to callback handler provided by cmhg */

/* global variables */
_kernel_oserror *err;
_kernel_swi_regs reg;
volatile int callback_flag = 0;

struct ssn_hbt session_hbt = { 0 };

struct client
{
        void (*cli_call)();      /* cli handler */
};

struct client cli_function_call[7] =
{
    cli_stats,
    cli_setheartbeat,
    cli_logon,
    cli_logoff,
    cli_event,
    cli_showdata,
    0,
};

struct swi_call {
    int (*swi_call)();      /* swi handler */
};

#define MAXSWI 8

struct swi_call swi_function_call[MAXSWI] = {
    swi_logon,
    swi_logoff,
    swi_report_event,
    swi_read_session_data,
    swi_write_session_data,
    swi_exec_sql,
    swi_user_profile,
    0,
};

void *workspace_pointer = 0;

extern unsigned int sessionid;
extern unsigned int userid;
extern unsigned long my_address;  /* My IP address in long int form */
char control_server[32];   	  /* IP address of control server in form nn.nn.nn.nn */
char management_element[32];   	  /* Name of management element as found in hosts file */

/*----------------------------------------------------------------------
    Name : callback_handler

    Description : Callback registered by set_callback. This actually
    		  sends a heartbeat.
    		  AMJ modified to revesrse  byte ordering in message
----------------------------------------------------------------------*/
int callback_handler(int *r)
{
  struct ssn_hbt *h = &session_hbt;
  struct ssn_hbt session_hbt_rev;
  struct ssn_hbt *h_rev = &session_hbt_rev;

  if (callback_flag == 1)
  {
    callback_flag = 0;
    h->h_message.data.count++;
    h->h_message.data.sessionid = sessionid;
    h->h_message.data.userid = userid;

    memcpy(h_rev, h, sizeof(struct ssn_hbt));
    h_rev->h_message.data.count = htonl(h->h_message.data.count);
    h_rev->h_message.data.sessionid = htonl(h->h_message.data.sessionid);
    h_rev->h_message.data.userid = htonl(h->h_message.data.userid);

    sendto(h_rev->h_sock, (char *)&h_rev->h_message, sizeof(struct hbt_message), 0,
    	     (struct sockaddr *)&h_rev->h_adr, sizeof(h_rev->h_adr));

    h->h_timer = h->h_time;
  }
  return 1;
}


/*----------------------------------------------------------------------
    Name : tick_handler

    Description : Called every centisecond by tickerv, decrement h_timer
    		  and if this is down to zero, send a heartbeat via a
    		  callback as not really time critical.
----------------------------------------------------------------------*/
int tick_handler(int *r, void *pw)
{
    struct ssn_hbt *h = &session_hbt;

    if (h->h_timer > 0 && --h->h_timer == 0)
    {
      if (callback_flag == 0)
      {
        callback_flag = 1;                       /* Set callback_flag to stop queueing */
        reg.r[0] = (int)callback_entry;		 /* Callback veneer created by cmhg */
        reg.r[1] = (int)workspace_pointer;
        err = _kernel_swi(OS_AddCallBack, &reg, &reg);
        if (err != NULL) callback_flag = 0;
      }
    }
    return (1);
}

/*----------------------------------------------------------------------
    Name : claim_tickerv

    Description : claim ticker vector for centisecond interrupt
----------------------------------------------------------------------*/
_kernel_oserror *claim_tickerv()
{
    reg.r[0] = TickerV;
    reg.r[1] = (int)tick_entry;
    reg.r[2] = (int)workspace_pointer;
    ERROR_RETURN(_kernel_swi(OS_Claim, &reg, &reg));
    return NULL;
}

/*----------------------------------------------------------------------
    Name : release_tickerv

    Description : release previously claimed ticker vector
----------------------------------------------------------------------*/
_kernel_oserror *release_tickerv()
{
    reg.r[0] = TickerV;
    reg.r[1] = (int)tick_entry;
    reg.r[2] = (int)workspace_pointer;
    return _kernel_swi(OS_Release, &reg, &reg);
}

/*----------------------------------------------------------------------
    Name : read_if_addr

    Description : Get the STB IP address by enumerating all interfaces
    		  and checking them out. This is a generic routine as
    		  the STB will only have one IP adddress.
----------------------------------------------------------------------*/
void read_if_addr(u_long *addr)
{
    char   buf[512];
    struct ifconf ifc;
    struct ifreq ifreq, *ifr;
    struct sockaddr_in *sin;
    int    s, n;

    *addr = 0; /* Return a NULL pointer if we don't succeed */

    if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0) return;    /* Create a socket to act as a conduit for information */

    ifc.ifc_buf = buf;           /* Give it a buffer to store records */
    ifc.ifc_len = sizeof (buf);  /* Let the size be known */

    /* Get interface configuration list.  */
    /* This returns a list containing one ifreq structure for every interface currently used by the system. */

    if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0) goto out;

    ifr = ifc.ifc_req;

    /* Loop through each ifreq structure */
    for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++)
    {
        ifreq = *ifr;
        /* Get the interface flags */
        if (socketioctl(s, SIOCGIFFLAGS, (char *)&ifreq) < 0) continue;

        /* Check for a loopback net */
       	if (ifreq.ifr_flags & IFF_LOOPBACK) continue;

        /* Check for valid broadcast address and interface is up */
        if ((ifreq.ifr_flags & (IFF_BROADCAST|IFF_UP)) != (IFF_BROADCAST|IFF_UP)) continue;

	/* Get the interface address of this one */
        if (socketioctl(s, SIOCGIFADDR, (char *)&ifreq) >= 0)
        {
            sin = (struct sockaddr_in *)&ifreq.ifr_addr;    /* Look at the correct bit */
            *addr = sin->sin_addr.s_addr;                   /* return the 32bit IP address */
            break;  					    /* Finished here  */
        }
    }
out:
    socketclose(s);  /* Do what it says */
    return;
}

/*----------------------------------------------------------------------
    Name : get_boot_name_and_path

    Description : Open the file $.Files.Names and search for my IP
    		  address. Pull out the name and mount path text fields.
----------------------------------------------------------------------*/
int get_boot_name_and_path(u_long address, char *name, char *path)
{
    FILE *fp;
    char line[250];                          /* Line of text read from file */
    char addr[50];     			     /* IP address as a text field */

    if ((fp = fopen("<InetDBase$Path>Names", "r")) == NULL) return 0;

    while(fgets(line, sizeof(line), fp) != NULL)
    {
      if (sscanf(line, "%s %s %s", addr, name, path) == 3 && address == inet_addr(addr))
      {
        strcat(path, ".");
        fclose (fp);
        return (1);
      }
    }
    fclose (fp);
    return (0);
}


/*----------------------------------------------------------------------
    Name : do_getsock

    Description : Create and initialise a new socket. Set it up to listen
    		  in on the specified port number for any datagrams.
----------------------------------------------------------------------*/
int do_getsock(int port, int input_socket)
{
    struct sockaddr_in addr;
    int sock;
    int on = 1;

    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) return (-1);    /* Create a socket */

    /* Set the non-blocking IO flag for this socket, allow receipt of async IO signal events */
    if (socketioctl(sock, FIONBIO, &on) < 0 || socketioctl(sock, FIOASYNC, &on) < 0)
    {
        socketclose (sock);       /* Error, close socket and exit */
        return (-1);
    }

    /* Permit the sending of broadcast messages */
    if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &on, sizeof (on)) < 0)
    {
        socketclose(sock);        /* Error, close socket and exit */
        return (-1);
    }

    /* For an input socket, listen on specified port for stuff from any address */
    if (input_socket)
    {
        addr.sin_family      = AF_INET;                                 /* Set to Internet address family */
        addr.sin_addr.s_addr = htonl(INADDR_ANY);			/* Any address */
        addr.sin_port        = htons((u_short)port);                    /* Port number */
        if (bind(sock, (struct sockaddr *)&addr, sizeof (addr)) < 0)	/* Bind the bugger */
        {
            socketclose(sock);    /* Error, close socket and exit */
            return (-1);
        }
    }
    return (sock);
}

/*----------------------------------------------------------------------
    Name : start_session_heartbeat

    Description : Create a socket and fill in the session heartbeat
    		  structure with address info.
----------------------------------------------------------------------*/
void start_session_heartbeat()
{
    struct hostent *management_element_host;
    struct ssn_hbt *h = &session_hbt;
    u_long s_addr;

    if ((management_element_host = gethostbyname(management_element)) != NULL)
    {
      memcpy(&s_addr,management_element_host->h_addr,4);
      if (s_addr == -1 || h->h_port == 0) return;  /* Get out if stuff not right */

      h->h_sock = do_getsock(h->h_port, 1);        /* Create and initialise a socket */
      if (h->h_sock < 0) return;	      		 /* Not done, get out ! */

      /* Fill in the session heartbeat structure */
      h->h_adr.sin_family = AF_INET;               /* Set to Internet address family */
      h->h_adr.sin_port = htons(h->h_port);        /* Local port number */
      h->h_adr.sin_addr.s_addr = s_addr;		 /* Control server address */
      h->h_timer = 1;	       			 /* Initialise timer counter to a low value */
    }
}

/*----------------------------------------------------------------------
    Name : stop_session_heartbeat

    Description : Remove outstanding callbacks, close any open sockets
    		  and nullify timers.
----------------------------------------------------------------------*/
void stop_session_heartbeat()
{
    struct ssn_hbt *h = &session_hbt;

    if (callback_flag == 1)  /* We have an outstanding callback, need to remove it */
    {
      reg.r[0] = (int)callback_entry;		 /* Callback veneer created by cmhg */
      reg.r[1] = (int)workspace_pointer;
      _kernel_swi(OS_RemoveCallBack, &reg, &reg); /* Ignore errors */
      callback_flag = 0;
    }

    if (h->h_sock >= 0) socketclose(h->h_sock);
    h->h_sock = -1;
    h->h_timer = 0;
}

/*----------------------------------------------------------------------
    Name : finalise

    Description : Handle module finalisation.
----------------------------------------------------------------------*/
void finalise(void)
{
    struct ssn_hbt *h = &session_hbt;
    if (h->h_sock >= 0) socketclose(h->h_sock);

    release_tickerv(tick_entry);
    stop_session_heartbeat();
}

/*----------------------------------------------------------------------
    Name : initialise

    Description : Executed to initialise the module.
----------------------------------------------------------------------*/
_kernel_oserror *initialise(char *cmd_tail, int pbase, void *pw)
{
    char name[50], path[100];

    workspace_pointer = pw;    /* Take a copy of the modules workspace pointer */

    session_hbt.h_sock = -1;
    session_hbt.h_message.version = OM_HBT_V_NUMBER;
    session_hbt.h_message.type = OM_HBT_T_INDICATE;
    session_hbt.h_message.id = OM_HBT_I_HEARTBEAT;
    session_hbt.h_message.retries = 0;

    atexit(finalise);                      /* Register module finalisation code */

    err = claim_tickerv();             /* Claim TickerV */
    if (err == NULL)
    {
      _kernel_getenv("Inet$BootServer", control_server, sizeof(control_server));
      _kernel_getenv("ManagementElement$Name", management_element, sizeof(management_element));
      read_if_addr(&my_address);
      if (my_address != 0 && get_boot_name_and_path(my_address, name, path) != 0)
      {
        _kernel_setenv("STBBoot$Path", path);
        _kernel_setenv("STBBoot$Name", name);
      }
      return NULL;              /* Exit success */
    }
    return (err);
}

/*----------------------------------------------------------------------
    Name : swi_handler

    Description : Handle all in-coming swis
----------------------------------------------------------------------*/
_kernel_oserror *swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
  static _kernel_oserror err;
  struct swi_call *call_function = &swi_function_call[swinum];

  err.errnum = (*(call_function->swi_call))(r);
  if (err.errnum != 0)
  {
    strcpy(err.errmess,"Error occurred");
    return &err;
  }
  return NULL;
}

/*----------------------------------------------------------------------
    Name : cli_handler

    Description : Handle commands
----------------------------------------------------------------------*/
_kernel_oserror *cli_handler(char *arg_string, int arg_count, int cmd_no, void *pw)
{
  struct client *call_function;
  int margc;
  char *margv[10];
  char *cp;
  int fQuotes;

  margc = 0;                                           /* my arg count = 0 */
  cp = arg_string;				       /* point to argument string */
  while (*cp && arg_count-- > 0)		       /* still pointing to chars and not reached end of arg count */
  {
    fQuotes = 0;                                       /* have not encountered any quotes yet */
    while (isspace(*cp)) cp++;                         /* remove any spaces in front */
    if (*cp == '\0' || iscntrl(*cp)) break;	       /* if we have a null or ctrl char, exit */
    if (*cp == '"')    	       	     		       /* have we encountered a quote */
    {
      fQuotes = 1;				       /* record the fact */
      cp++;                                            /* and point to character after quote */
    }

    margv[margc++] = cp;                               /* store pointer in myarg array and increment counter */

    while (*cp != '\0' && *cp != '"' && !iscntrl(*cp) && (fQuotes || !isspace(*cp))) cp++; /* move to end of string */

    if (*cp == '\0' || iscntrl(*cp)) break;            /* if we have a null or ctrl char, exit */
    *cp++ = '\0';   	 	       		       /* add a null terminator */
  }
  *cp++ = '\0';   	 	       		       /* add a null terminator for last argument */

  margv[margc] = 0;

  call_function = &cli_function_call[cmd_no];
  (void)(*(call_function->cli_call))(margc, margv);

  return NULL;
}

