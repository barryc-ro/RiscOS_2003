/*----------------------------------------------------------------------*/
/*    Filename    : c.swi	                                       	*/
/*    Author	  : K.Ruttle and modified by R.W.Buckley and A.M. Jones	*/
/*    Date        : 1995						*/
/*    Description : 							*/
/*    Modification history:    	    		       			*/
/*      ??/08/95 AMJ, Added clnt_control calls to increase UDP timeout. */
/*  		      This should be removed when correct sequence      */
/* 		      numbering is implemented.	  	  	        */
/*      14/09/95 RWB, Added the swi Session_UserProfile			*/
/*      15/09/95 RWB, Modified ExecSQL SWI to perform range checking    */
/* 		      and return the total number of bytes in SQL.	*/
/*      18/09/95 RWB, Tidied up some of the error reporting from swis   */
/*    		   							*/
/*----------------------------------------------------------------------*/

/* os specific include files */
#include "kernel.h"
#include "swis.h"

/* network protocol include files */
#include <rpc/rpc.h>

/* user include files */
#include "ssn.h"
#include "Sql.h"
#include "Event.h"

/* global variables */
extern struct ssn_hbt session_hbt;
extern char control_server[32];  	  /* IP address of control server in form nn.nn.nn.nn */
extern char management_element[32];   	  /* Name of management element as found in hosts file */

unsigned int  sessionid;
unsigned int  userid;
unsigned long my_address;

CLIENT *cl_evt = 0;
CLIENT *cl_sql = 0;
CLIENT *cl_acc = 0;

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
int swi_logon(_kernel_swi_regs *r)
{
  logonargs largs;
  logonres *res;
  struct timeval time_out, retry_tout;

  if (cl_acc == NULL)
  {
    if ((cl_acc = clnt_create(management_element, SESSION_PROGRAM, SESSION_VERSION, "udp")) == NULL)
    {
      return (-1);
    }
    time_out.tv_sec = 60;
    time_out.tv_usec = 0;
    retry_tout.tv_sec = 20;
    retry_tout.tv_usec = 0;
    clnt_control(cl_acc, CLSET_TIMEOUT, (char *)&time_out);         /* AMJ */
    clnt_control(cl_acc, CLSET_RETRY_TIMEOUT, (char *)&retry_tout); /* AMJ */
  }

  largs.logon_pin = (char *)r->r[1];
  largs.logon_adr = htonl(my_address);
  res = sessionproc_logon_1(&largs, cl_acc);

  if (res->errno == NULL)
  {
    sessionid = res->logonres_u.logond.session_id;
    userid = res->logonres_u.logond.user_id;
    start_session_heartbeat();
  }
  else
  {
    sessionid = 0;
    userid = 0;
  }

  return (res->errno);
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
int swi_logoff(_kernel_swi_regs *r)
{
  a_auth_data largs;

  stop_session_heartbeat();
  if (cl_acc == NULL)
  {
    if ((cl_acc = clnt_create(management_element, SESSION_PROGRAM, SESSION_VERSION, "udp")) != NULL)
    {
      return (-1);
    }
  }

  largs.session_id = sessionid;
  largs.user_id = userid;
  sessionproc_logoff_1(&largs, cl_acc);
  sessionid = 0;
  userid = 0;

  return (0);
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
int swi_report_event(_kernel_swi_regs *r)
{
  eventargs eargs;

  if (cl_evt == NULL)
  {
    if ((cl_evt = clnt_create(management_element, EVENT_PROGRAM, EVENT_VERSION, "udp")) == NULL)
    {
      return (-1);
    }
  }

  eargs.authdata.session_id = sessionid;
  eargs.authdata.user_id = userid;
  eargs.type = r->r[1];
  eargs.qualifier = r->r[2];
  eargs.args.eventdata_val = (char *)r->r[3];
  eargs.args.eventdata_len = r->r[4]+1;

  eventproc_report_1(&eargs, cl_evt);

  return (0);
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
int swi_read_session_data(_kernel_swi_regs *r)
{
  a_auth_data auth;
  sdatares *res;
  int *u_id    = (int *)r->r[1];
  int *s_id    = (int *)r->r[2];
  char *dirp   = (char *)r->r[3];
  char *datap  = (char *)r->r[4];

  if (u_id) *u_id = userid;

  if (s_id) *s_id = sessionid;

  if (!datap)
  {
    return (-1);
  }

  if (cl_acc == NULL)
  {
    if ((cl_acc = clnt_create(management_element, SESSION_PROGRAM, SESSION_VERSION, "udp")) == NULL)
    {
      return (-1);
    }
  }

  auth.session_id = sessionid;
  auth.user_id = userid;
  res = sessionproc_writesdata_1(&auth, cl_acc);

  if ((res->errno == 0) && dirp) memcpy(dirp, res->sdatares_u.sdata.ssndata_val, MAXSSNDATA);

  return (0);
}

/*----------------------------------------------------------------------
    Name :

    Description :
----------------------------------------------------------------------*/
int swi_write_session_data(_kernel_swi_regs *r)
{
  sdataargs sargs;
  char *datap  = (char *)r->r[1];

  if (!datap)
  {
    return (-1);
  }

  if (cl_acc == NULL)
  {
    if ((cl_acc = clnt_create(management_element, SESSION_PROGRAM, SESSION_VERSION, "udp")) == NULL)
    {
      return (-1);
    }
  }

  sargs.authdata.session_id = sessionid;
  sargs.authdata.user_id = userid;
  sargs.sdata.ssndata_val = datap;
  sargs.sdata.ssndata_len = MAXSSNDATA;
  sessionproc_writesdata_1(&sargs, cl_acc);

  return (0);
}

/*----------------------------------------------------------------------
    Name : swi_exec_sql

    Description : Execute the SQL database query. Perform range checking
    		  on result copy.
----------------------------------------------------------------------*/
int swi_exec_sql(_kernel_swi_regs *r)
{
  char *sql_statement = (char *)r->r[1];
  char *result_block = (char *)r->r[2];
  int  iBlockSize = r->r[3]; 	                // Size of result block size
  sqlargs sqld;
  sqlres *res;

  if (cl_sql == NULL)
  {
    if ((cl_sql = clnt_create(management_element, SQL_PROGRAM, SQL_VERSION, "udp")) == NULL)
    {
      return (-1);
    }
  }
  sqld.authdata.session_id = sessionid;
  sqld.authdata.user_id = userid;
  sqld.statement.sqldata_val = sql_statement;
  sqld.statement.sqldata_len = strlen(sql_statement);
  res = sqlproc_exec_1(&sqld, cl_sql);

  if (res->errno == 0)
  {
    char *rp = res->sqlres_u.results.sqldata_val;
    int rl = res->sqlres_u.results.sqldata_len;
    r->r[4] = rl;                                       // Return what it could have copied
    if (rl > iBlockSize)
    {
      rl = iBlockSize;                                  // Only copy iBlockSize bytes
    }
    memcpy(result_block, rp, rl);
    r->r[3] = rl;
  }

  return (0);
}

/*----------------------------------------------------------------------
    Name : swi_user_profile

    Description : export the parameters userid and sessionid to the
    		  caller.
----------------------------------------------------------------------*/
int swi_user_profile(_kernel_swi_regs *r)
{
  r->r[0] = userid;
  r->r[1] = sessionid;
  return 0;
}
