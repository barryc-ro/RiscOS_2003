; ------------------------------------------------------------------------------
; Title; CDSupport
; Author; David De Vorchik
; History;
;	 4-Sep-95 0.12 diz Some errors added
;	 4-Sep-95      diz CDSupport_Standby added (restructured slightly)
;	 4-Sep-95      diz Support for standby mode UpCalls
;	 4-Sep-95 0.11 diz New SWI chunk from Acorn
;	 1-Sep-95 0.10 diz Simplified the CDSupport_Enable interface
;	 1-Sep-95 0.03 diz UpCall handler checks fs number on media searches
;	 1-Sep-95      diz Added CDSupport_MediaSearched
;	28-Aug-95 0.00 diz Created
; ------------------------------------------------------------------------------

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System
        GET     hdr:ModHand
        GET     hdr:Services
	GET	hdr:FSNumbers
	GET	hdr:HighFSI
	GET	hdr:UpCall
        GET     hdr:Proc
	GET	hdr:NDRDebug
	GET	hdr:DDVMacros
	GET	hdr:NewErrors
	GET	hdr:STBState

	GET	hdr:CDSupport

	GET	Version


; Compilation flags

	GBLL hostvdu
	GBLL debug
	GBLL debugxx

hostvdu	SETL false			; not using the Host podule

debug	SETL false
debugxx	SETL true


; Workspace
		^ 0, WP

enabled   	# 4			; count for number of clients, when >0 then enabled
media_searched	# 4			; flag to indicate if media has been searched for
poll_word	# 4			; poll word, goes non-zero when standby mode requested

ws_size		* :INDEX: @


; ------------------------------------------------------------------------------
; Module header
; ------------------------------------------------------------------------------

	LEADR	Module_LoadAddr

module_start
	& 0				; no start point
	& init - module_start
	& final - module_start
	& service - module_start

	& title - module_start
	& help - module_start
	& 0				; commands

	& &4b680
	& swi_despatch - module_start
	& swi_names - module_start
	& 0

title	= "CDSupport", 0
help	= "CDSupport", 9, "$VString ($Date)"
      [ debug
	= " Development version"
      ]
	= 0
	ALIGN

swi_names
	= "CDSupport", 0
	= "Enable", 0
	= "Disable", 0
	= "MediaSearched", 0
	= "Standby", 0
	= 0
	ALIGN

      [ debug
	InsertNDRDebugRoutines
      ]


; ------------------------------------------------------------------------------
; Init / Die / Service handlers, ensure that our workspace is always in a sensible
; state and that the system is cleaned up.
; ------------------------------------------------------------------------------

init	ENTRY	"R1-R2"

	LDR	R2, [WP]
	TEQ	R2, #0			; private word == 0, do we have workspace?
	BNE	%FT10

	MOV	R0, #ModHandReason_Claim
	LDR	R3, =ws_size
	SWI	XOS_Module		; attempt to claim some space
	EXIT	VS			;   returning if that failed

	STR	R2, [ WP ]		; mark workspace in private word
10
	MOV	WP, R2

	MOV	R0, #0			; clear our workspace to a default state
	STR	R0, enabled
	STR	R0, media_searched
	STR	R0, poll_word

	EXITS

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

final	ENTRY	"R1-R3"

	LDR	WP, [WP]
	TEQ	WP, #0			; any workspace claimed?
	EXITS	EQ			;   no so no work to be done

	LDR	R0, enabled
	TEQ	R0, #0			; if enabled == 0 then no clients, and we don't own vectors
	BEQ	%FT10

	MOV 	R0, #UpCallV
	ADR	R1, upcall_handler
	MOV	R2, WP
	SWI	XOS_Release       	; release our UpCall handler
	EXIT	VS			;   return any errors if this fails (it shouldn't)

	MOV	R0, #0			; no longer enabled iof that worked
	STR	R0, enabled
10
	EXITS

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

service	ROUT

	TEQ	R1, #Service_Reset
	MOVNES	PC, LR			; filter the service calls first time

	ENTRY	"R0"

	LDR	WP, [WP]
	TEQ	WP, #0			; do we currently have any workspace claimed
	MOVNE	R0, #0			;   if so reset it to a default state
	STRNE	R0, enabled
	STRNE	R0, media_searched
	STRNE	R0, poll_word

	EXITS


; ------------------------------------------------------------------------------
; Handle SWI despatch
; ------------------------------------------------------------------------------

swi_despatch ROUT

	LDR	WP, [WP]		; pick up our private word
	TEQP	PC, #SVC_mode		;   and ensure that IRQ's still enabled

	CMP	R11, #(%FT10-%FT00)/4	; is the SWI number valid?
	ADDCC	PC, PC, R11, LSL #2	;   if so then dispatch
	B	%FT10
00
	B	Support_Enable
	B	Support_Disable
	B	Support_MediaSearched
	B	Support_Standby
10
	ADR	R0, ErrorBlock_NaffSWI
	ORRS	PC, LR, #V_bit

	MakeErrorBlock NaffSWI


; ------------------------------------------------------------------------------
; CDSupport_Enable implementation
; ----------------
; in:	-
; out:	R0 -> Poll Word
;
; Enable the UpCall monitors, if the number of clients == 0 then we attempt
; to install the UpCall vector handler.  Otherwise we just return the
; pointer to the poll-word stored in the RMA.
; ------------------------------------------------------------------------------

Support_Enable ENTRY "R1-R3"

	LDR	R3, enabled
	CMP	R3, #0			; if the module is enabled then don't bother ( enabled > 0 )
	BGT	%FT10

	Debug	xx, "Installing the UpCall handler"

	MOV	R0, #UpCallV
	ADR	R1, upcall_handler
	MOV	R2, WP
	SWI	XOS_Claim		; attempt to claim the vector
	EXIT	VS			;   and if it fails then return the error
10
	ADD	R3, R3, #1              ; increase enabled counter
	STR	R3, enabled

	ADR	R0, poll_word		; -> poll word for the client

	EXITS

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; The UpCall handler, this is where the real work is done!
;
; a) Catch media searches - fault
; b) Standby mode, stop it.

upcall_handler ENTRY "R1"

	TEQ	R0, #UpCall_MediaNotKnown
	TEQNE	R0, #UpCall_MediaNotPresent
	TEQEQ	R1, #fsnumber_CDFS		; nb: ordering of tests
	TEQNE	R0, #UpCall_Standby
	EXITS	NE

	Debug	xx, "UpCall reason code", R0

	MOV	R1, #-1

	TEQ	R0, #UpCall_MediaNotKnown
	TEQNE	R0, #UpCall_MediaNotPresent
	STREQ	R1, media_searched		; mark as a media search occurred
	MOVEQ	R0, #-1

	TEQ	R0, #UpCall_Standby
	STREQ	R1, poll_word			; mark the poll-word for dekstop tasks
	MOVEQ	R0, #0				;   and claim to stop entering standby mode

	EXITS


; ------------------------------------------------------------------------------
; CDSupport_Disable implementation
; -----------------
; in:	-
; out:	-
;
; Disable the CDSupport module, when the enabled count == 0 then we can
; unlink the UpCall vector handlers.  If the client passes R0 as non-zero
; then we must attempt to kill ourselves anyway.
; ------------------------------------------------------------------------------

Support_Disable ENTRY "R0-R2"

	LDR	R3, enabled
	CMP	R3, #1			; is the module enabled?
	BGT	%FT20
	EXITS	LT

	Debug	xx, "Removing UpCall handler"

	MOV	R0, #UpCallV
	ADR	R1, upcall_handler
	MOV	R2, WP
	SWI	XOS_Release		; release the UpCall handlers
	STRVS	R0, [SP]		;   but, if it fails then return
	EXIT	VS
20
	SUBS	R3, R3, #1		; decrease the number of clients
	MOVMI	R3, #0			;  catch any possible underflow
	STR	R3, enabled

	EXITS


; ------------------------------------------------------------------------------
; CDSupport_MediaSearched implementation
; -----------------------
; in:	-
; out:	R0 = 0 => media has not been searched
;	     1 => media has been searched
;
; Return the state of the media search flags within the Player.  Note that
; on issuing this call the flag is reset back to false.
; ------------------------------------------------------------------------------

Support_MediaSearched ENTRY "R1"

	LDR	R0, media_searched	; pick up the state flag
	MOV	R1, #0			;   and then reset back to no-search
	STR	R1, media_searched

	EXITS


; ------------------------------------------------------------------------------
; CDSupport_Standby implementation
; -----------------
; in:	R0 = reason code
;	   	= 0 => clear poll-word
;		= 1 => enter standby
; out:	-
;
; When the poll-word goes non-zero this indicates that that the box was about
; to enter into standby mode.  The module will claim this UpCall to give
; the world around it a chance to tidy up and clear any resident tasks.
;
; Ideally there will be only one task watching the poll-word.  When the Window
; Manager informs this task of the non-zero poll word it should ask for it
; to be cleared therefore allowing further messaging to occur.
;
; After the tasks have been tidied the task that cleared the poll-word should
; issue an 'enter standby' call, which will remove the UpCall handlers and then
; enter standby.
; ------------------------------------------------------------------------------

Support_Standby ENTRY "R1"

	TEQ	R0, #STANDBY_CLEARPOLLWORD
	MOVEQ	LR, #0			; clear poll-word to zero, allows other tasks a look in
	STREQ	LR, poll_word
	EXITS	EQ

	TEQ	R0, #STANDBY_ENTER
	EXITS	NE

	LDR	R0, enabled
	TEQ	R0, #0			; are there currently any clients?
	BEQ	%FT10			;   if not then vector not claimed, so don't try and release it

	Debug	xx, "Entering standby clients = ", R0

	MOV	R0, #UpCallV
	ADR	R1, upcall_handler
	MOV	R2, WP
	SWI	XOS_Release        	; release the UpCall handler
	EXIT	VS			;   if that fails then return to client

	MOV	R0, #0
	STR	R0, enabled		; mark as no longer enabled
10
	SWI	XSTBState_Standby	; dump into standby mode - should not return!
	EXIT				;   return if any possible errors


	END
