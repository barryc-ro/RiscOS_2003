/* Title; window.c
 * Author; David De Vorchik
 * History;
 *  	25-Aug-95 diz Created
 */

/*
 *  Error handling added by crose@omi.co.uk.
 *
 */

#undef GLOBALS__

#include "common.h"
#include "swicall.h"
#include "wimp.h"
#include "string.h"
#include "display.h"
#include "window.h"


/*------------------------------------------------------------------------------
 * Create a window by fleshing out a WindowRec, this is a very simple window
 * so we have adopted a very simple co-ordinate system whereby it maps directly
 * onto the screen.
 *
 * The Window is sized to cover the entire screen and has a transparent background
 * to avoid any nasty redraw problems.
 *------------------------------------------------------------------------------*/

int CreateFullScreenWindow( void )
{
    int hWindow = NULL;
    int iScrWidth, iScrHeight;
    int iEigX, iEigY;
    WindowRec winrec;
    _kernel_oserror *err = NULL;

    #ifdef FN_TRACE
      puts("CreateFullScreenWindow()");
    #endif

    /* Read the screen characteristics */
    if ((err = swi( OS_ReadModeVariable, R0, -1, R1, 11, OUT, R2, &iScrWidth, END ))
         != NULL)
         ErrorHandler(__FILE__,__LINE__,"CreateFullScreenWindow()",err->errnum,
         err->errmess,WARNING);

    if ((err = swi( OS_ReadModeVariable, R0, -1, R1, 12, OUT, R2, &iScrHeight, END ))
         != NULL)
         ErrorHandler(__FILE__,__LINE__,"CreateFullScreenWindow()",err->errnum,
         err->errmess,WARNING);

    if ((err = swi( OS_ReadModeVariable, R0, -1, R1, 4, OUT, R2, &iEigX, END ))
         != NULL)
         ErrorHandler(__FILE__,__LINE__,"CreateFullScreenWindow()",err->errnum,
         err->errmess,WARNING);

    if ((err = swi( OS_ReadModeVariable, R0, -1, R1, 5, OUT, R2, &iEigY, END )) != NULL)
         ErrorHandler(__FILE__,__LINE__,"CreateFullScreenWindow()",err->errnum,
         err->errmess,WARNING);

    /* Clear out the structure and fill out with some information */
    memset( &winrec, 0, sizeof(winrec) );

    winrec.visarea.maxx = iScrWidth << iEigX;
    winrec.visarea.maxy = iScrHeight << iEigY;
    winrec.behind = -1;	    	    	    /* Open window at top of stack */
    winrec.flags = WF_NEWSTYLE;     	    /* Has no special characteristics */

    winrec.colours.titleFG = 7;
    winrec.colours.titleBG = 2;
    winrec.colours.workFG = 7;
    winrec.colours.workBG = 0xff;
    winrec.colours.scrollFG = 1;
    winrec.colours.scrollBG = 3;
    winrec.colours.focusBG = 12;
    winrec.colours.reserved = 0;

    winrec.workarea.maxx = winrec.visarea.maxx;
    winrec.workarea.maxy = winrec.visarea.maxy;

    winrec.spritearea = (void *) 1; 	    	    /* No private sprite pool */

    /* Attempt to create the Window, if works we will have a sensible handle */
    if (( err = swi( Wimp_CreateWindow, R1, &winrec.visarea, OUT, R0, &hWindow, END ))
          != NULL)
          ErrorHandler(__FILE__,__LINE__,"CreateFullScreenWindow()",err->errnum,
          err->errmess,WARNING);
    else
    	  goto exit_gracefully;

exit_gracefully:

    return hWindow;
}


/*------------------------------------------------------------------------------
 * Destroy a window.  This acts as a simple wrapper around the DestroyWindow
 * SWI within the Window Manager, provides a simple sanity check!
 *------------------------------------------------------------------------------*/

void DestroyWindow( int hWindow )
{
 _kernel_oserror *err = NULL;

    #ifdef FN_TRACE
      puts("DestroyWindow()");
    #endif

    if ( hWindow != NULL )
    {
        if ((err = swi( Wimp_DeleteWindow, R1, &hWindow, END )) != NULL)
             ErrorHandler(__FILE__,__LINE__,"DestroyWindow()",err->errnum,
             err->errmess,WARNING);
    }
}


/*------------------------------------------------------------------------------
 * Make a Window visible or not, given a handle and a Boolean show or hide
 * the window as required.  When the window is shown we do not attempt to resize
 * it in anyway, nor scroll it!
 *
 * We just ensure that it is placed at the top of the Window stack.
 *
 * Ignores the request if hWindow == NULL!
 *------------------------------------------------------------------------------*/

void ShowWindow( int hWindow, int bShow )
{
 _kernel_oserror *err = NULL;

    WindowStateRec staterec;

    #ifdef FN_TRACE
      puts("ShowWindow()");
    #endif

    if ( hWindow )
    {
        staterec.handle = hWindow;

    	if ( bShow )
    	{
            if ( !swi( Wimp_GetWindowState, R1, &staterec, END ) )
            {
                staterec.behind = -1;	    	    	/* Open at top of the stack */
                swi( Wimp_OpenWindow, R1, &staterec, END );
            }
    	}
    	else
    	{
            if ((err = swi( Wimp_CloseWindow, R1, &hWindow, END )) != NULL)
                 ErrorHandler(__FILE__,__LINE__,"ShowWindow()",err->errnum,
                 err->errmess,WARNING);
    	}
    }
}



/*------------------------------------------------------------------------------
 * Redraw into a Window.  When we get a redraw event we must process it, esp.
 * as our window has not been flagged as auto-redraw.  This is quite easy for
 * us as we know we have a simple co-ordinate system.
 *------------------------------------------------------------------------------*/

void RedrawWindow( int hWindow )
{
    WindowRedrawRec redrawrec;
    int bMore;

    #ifdef FN_TRACE
      puts("RedrawWindow()");
    #endif

    if ( hWindow )
    {
        redrawrec.handle = hWindow;

        if ( !swi( Wimp_RedrawWindow, R1, &redrawrec, OUT, R0, &bMore, END ) )
        {
            if ( bMore )
            {

/*prepare sprites */

    	    	while ( bMore )
    	    	{

            	if ( swi( Wimp_GetRectangle, R1, &redrawrec, OUT, R0, &bMore, END ) )
            	    goto exit_gracefully;
            	}
            }
        }
    }

exit_gracefully:

    return;
}
