#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "swicall.h"
#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "message.h"
#include "screen.h"
#include "utils.h"

#define FONTNAME "Corpus.Medium"
#define FONTWIDTH  (18)
#define FONTHEIGHT (18)
#define LINEMAX 20

#define FG (0xFFFFFF00)
#define BG (0x77777700)

typedef struct
{
  char *text;                          /* First char of this segment */
  int length;                          /* Length of this segment */
  int width;                           /* Width of this segment in
                                          millipoints */
}
LineRec, *LinePtr;

static LineRec lines[LINEMAX];
static int numlines;

static struct
{
  int xs, ys, xl, yl, splitchar;
}
coordblock =
{
  0, 0, 0, 0, 32
};

extern char copyright[];
extern char *PCDlocation;

/* Determine how to format a string into a given rectangle.  Caller must
   initialise numlines to zero, or else to a different number if the
   lines[] array is already primed. This routine updates numlines to the
   number of entries actually used in the output array. Width is the width
   of the area in millipoints. */

static ErrorPtr split_message(char *str, int width, int handle)
{
  int segwidth;
  char *seg = str, *splitpoint;

  while (numlines < LINEMAX)
  {
    if (*seg == 0)
      break;
    ER(swi(Font_ScanString, R0, handle, R1, seg,
           R2, (1 << 5) | (1 << 8) | (1 << 9),
           R3, width, R4, 0, R5, &coordblock,
           OUT, R1, &splitpoint, R3, &segwidth, END));
/* splitpoint should now point to a space, or the end of the string */
    lines[numlines].text = strndup(seg, splitpoint - seg);
    lines[numlines].length = splitpoint - seg;
    lines[numlines].width = segwidth;
    seg = *splitpoint ? splitpoint + 1 : splitpoint;
    numlines++;
  }

  return(NULL);
}

/* x0, x1, y0, y1 are the coordinates of the area into which we want to format
   the text.  They are in OS Units. */

static ErrorPtr message_paint(int frame, int x0, int y0, int x1, int y1)
{
  int handle, i, y, spacing;

  ER(swi(Font_Converttopoints, R1, x0, R2, y0, OUT, R1, &x0, R2, &y0, END));
  ER(swi(Font_Converttopoints, R1, x1, R2, y1, OUT, R1, &x1, R2, &y1, END));

  ER(swi(Font_FindFont, R1, FONTNAME, R2, FONTWIDTH * 16, R3, FONTHEIGHT * 16,
         R4, 0, R5, 0, OUT, R0, &handle, END));

  {
    char buffer[256], image[40];
    FILE *rights;
    int count;
  
    EX(swi(PhotoCD_GetPacName, R0, -2, R1, buffer, R2, 255,
           R3, PCDlocation, R4, copyright, OUT, R2, &count, END));
    buffer[count] = '\0';
  
    numlines = 0;
    sprintf(image, "Info on picture %d", frame + 1);
    EG(split_message(image, x1 - x0, handle));
    EG(split_message("  ", x1 - x0, handle));
    sprintf(image, "Image #%d", frame + 1);
    if (rights = fopen(buffer, "r"), rights != NULL)
    {
      do
      {
        fgets(buffer, 80, rights);
        Rip(buffer);
      } while (!feof(rights) && strnicmp(buffer, image, strlen(image)) != 0);
      if (!feof(rights))
      {
        do
        {
          EG(split_message(buffer, x1 - x0, handle));
          fgets(buffer, 80, rights);
          Rip(buffer);
        } while (strlen(buffer) > 2);
      }
      fclose(rights);
    }
  }

  EG(swi(Font_ReadInfo, R0, handle, OUT, R4, &spacing, END));
  EG(swi(Font_Converttopoints, R2, spacing, OUT, R2, &spacing, END));

/* Determine the Y coordinate of the top line */
  y = y0 + (y1 - y0) / 2 + numlines * spacing / 2 - spacing;
  if (y > y1 - spacing)
    y = y1 - spacing;

/* Set the font colours */
  EG(swi(ColourTrans_SetFontColours, R0, handle, R1, BG, R2, FG, R3, 14, END));

/* Actually display the segments */
  for (i = 0; i < numlines; i++)
  {
    EG(swi(Font_Paint, R0, handle, R1, lines[i].text,
           R2, (1 << 7) | (1 << 8) | (1 << 9),
           R3, x0, R4, y, R7, lines[i].length, END));
    Heap_Free(lines[i].text);
    y -= spacing;
  }

fail:
  font_losefont(handle);
  return(err);
}

ErrorPtr message_display(int frame)
{
  int xmarg = x_screen_size / 20;
  int ymarg = y_screen_size / 20;
  
  screen_halfbox(FALSE, xmarg, ymarg, x_screen_size - xmarg,
                 y_screen_size - ymarg);
  err = message_paint(frame, xmarg * 2, ymarg * 2, x_screen_size - xmarg * 2,
                      y_screen_size - ymarg * 2);
  /* screen_filter_area(shadow, xmarg, ymarg, x_screen_size - xmarg,
                        y_screen_size - ymarg); */
  return(err);
}
