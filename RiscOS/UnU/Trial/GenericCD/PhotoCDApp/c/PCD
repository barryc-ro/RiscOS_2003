#include "Defs.h"
#include "Heap.h"
#include "inlines.h"
#include "jerror.h"
#include "jinclude.h"
#include "jpeglib.h"
#include "local.h"
#include "screen.h"
#include "swicall.h"
#include "utils.h"

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern int jpeg_size;

extern int PCDcount;

extern int middle;

extern image *filmroll;

extern char *PCDlocation, *readahead;

extern Bool full;

char copyright[32];


/* Expanded data destination object for stdio output */

typedef struct
{
  struct jpeg_destination_mgr pub; /* public fields */

  char *spa;
  size_t size;
} my_destination_mgr;

typedef my_destination_mgr * my_dest_ptr;

int jpeg_size;

/*
 * Initialize destination --- called by jpeg_start_compress
 * before any data is actually written.
 */

METHODDEF void init_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  dest->pub.next_output_byte = (JOCTET *) (dest->spa + 4);
  dest->pub.free_in_buffer   = dest->size - 4;
}


/*
 * Empty the output buffer --- called whenever buffer fills up.
 */

METHODDEF boolean
empty_output_buffer (j_compress_ptr cinfo)
{
  return(TRUE);
}


/*
 * Terminate destination --- called by jpeg_finish_compress
 * after all data has been written.  Usually needs to flush buffer.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF void term_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  jpeg_size = dest->size - dest->pub.free_in_buffer + 4;

  return;
}


/*
 * Prepare for output to a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing compression.
 */

GLOBAL void jpeg_sprite_dest (j_compress_ptr cinfo, char *spa, int size)
{
  my_dest_ptr dest;

  /* The destination object is made permanent so that multiple JPEG images
     * can be written to the same file without re-executing jpeg_stdio_dest.
     * This makes it dangerous to use this manager and a different destination
     * manager serially with the same JPEG object, because their private object
     * sizes may be different.  Caveat programmer.
     */
  if (cinfo->dest == NULL)
  {      /* first time for this JPEG object? */
    cinfo->dest = (struct jpeg_destination_mgr *) (*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_PERMANENT, SIZEOF(my_destination_mgr));
  }

  dest = (my_dest_ptr) cinfo->dest;
  dest->pub.init_destination    = init_destination;
  dest->pub.empty_output_buffer = empty_output_buffer;
  dest->pub.term_destination    = term_destination;
  dest->spa  = spa;
  dest->size = size;
}

struct my_error_mgr
{
  struct jpeg_error_mgr pub;    /* "public" fields */
  jmp_buf setjmp_buffer;        /* for return to caller */
};

typedef struct my_error_mgr *my_error_ptr;

static void my_error_exit (j_common_ptr cinfo)
{
  /* cinfo->err really points to a my_error_mgr struct, so coerce pointer */
  my_error_ptr myerr = (my_error_ptr) cinfo->err;

  /* Always display the message. */
  /* We could postpone this until after returning, if we chose. */
  (*cinfo->err->output_message) (cinfo);

  /* Return control to the setjmp point */
  longjmp(myerr->setjmp_buffer, 1);
}

static void MakeJPEG(char *map, int height, int width, int frame)
{
  int loop;
  struct jpeg_compress_struct cinfo;
  struct my_error_mgr jerr;
  JSAMPROW row_pointer[192];        /* pointer to JSAMPLE row[s] */
  int row_stride = width * 3;        /* row width in image buffer */

  for (loop = 0; loop < height; loop++)
  {
    row_pointer[loop] = (JSAMPROW) (map + loop * row_stride);
  }

  cinfo.err = jpeg_std_error(&jerr.pub);
  jerr.pub.error_exit = my_error_exit;
  if (setjmp(jerr.setjmp_buffer))
  {
    jpeg_destroy_compress(&cinfo);
    full = TRUE;
    return;
  }
  jpeg_create_compress(&cinfo);

  jpeg_sprite_dest(&cinfo, readahead, 128 * 192 * 3);

  cinfo.image_width      = width;
  cinfo.image_height     = height;
  cinfo.input_components = 3;        /* # of color components per pixel */
  cinfo.in_color_space   = JCS_RGB;  /* colorspace of input image */

  jpeg_set_defaults(&cinfo);

  jpeg_set_quality(&cinfo, 60, TRUE);

  jpeg_start_compress(&cinfo, TRUE);

  jpeg_write_scanlines(&cinfo, row_pointer, height);

  jpeg_finish_compress(&cinfo);

  jpeg_destroy_compress(&cinfo);

  filmroll[frame].data = pool_alloc(jpeg_size - 4);
  if (filmroll[frame].data)
  {
    filmroll[frame].datasize = jpeg_size - 4;
    memcpy(filmroll[frame].data, readahead + 4, jpeg_size - 4);
  }
  else
  {
    full = TRUE;
  }
}

void Slurp(int nail)
{
  char buffer[256], *map;
  int PCD_handle, count, rot;
  int PCDB[10];

  int now;

  EX(swi(PhotoCD_GetPacName, R0, 0, R1, buffer, R2, 255, R3, PCDlocation,
         OUT, R2, &count, END));
  buffer[count] = '\0';
  PCD_handle = photocd_open(0, buffer, 0);

  if (nail >= 0 && nail < PCDcount)
  {
    PCDB[0] = PCDB[1] = PCDB[2] = PCDB[3] = 0;
    PCDB[4] = 0;      /* flags           */
    PCDB[5] = 2;      /* colour format   */
    PCDB[6] = 1;      /* plane offset    */
    PCDB[7] = 3;      /* column offset   */
    PCDB[8] = 0;      /* palette entries */
    PCDB[9] = 0;
  
    EX(swi(PhotoCD_GetRotation, R0, PCD_handle, R1, nail + 1,
                                         OUT, R2, &rot, END));
    if (map = pool_alloc(128 * 192 * 3), map == NULL)
      exit(1);
    memset(map, '\0', 128 * 192 * 3);
    now = monotonic_time();                                         
    swi(PhotoCD_GetBlock, R0, PCD_handle, R1, nail + 1,
             R2, PCDB, R3, map, R4, 1, R5, rot, R6, 0,
             R7, readahead, R8, 200 * 256 * 2, END);
    MakeJPEG(map, (rot == 90 || rot == 270) ? 192 : 128,
                  (rot == 90 || rot == 270) ? 128 : 192, nail);
    if (map)
      Heap_Free(map);
    if (filmroll[nail].data)
      filmroll[nail].filled = TRUE;
    else
      full = TRUE;
    filmroll[nail].rotation = rot;
    filmroll[nail].orient   = (rot == 90 || rot == 270);
  }
  photocd_close(PCD_handle, 0);
}

/* zoom, orient, scale, item */
static int zooms[3][2][2][6] =
{
  {
    {
      {1 << 16, 0 << 16, 0 << 16, 1 << 16,   0 << 9,   0 << 9},
      {1 << 14, 0 << 14, 0 << 14, 1 << 14, 528 << 9, 400 << 9}
    },
    {
      {0 << 16, 3 << 14, 3 << 14, 0 << 16,   0 << 9,   0 << 9}, 
      {0 << 14, 1 << 14, 1 << 14, 0 << 14, 560 << 9, 368 << 9}
    }
  },
  {
    {
      {1 << 16, 0 << 16, 0 << 16, 1 << 16,   0 << 9,   0 << 9},
      {1 << 14, 0 << 14, 0 << 14, 1 << 14, 528 << 9, 400 << 9}
    },
    {
      {0 << 16, 1 << 16, 1 << 16, 0 << 16,   0 << 9,   0 << 9}, 
      {0 << 14, 1 << 14, 1 << 14, 0 << 14, 560 << 9, 368 << 9}
    }
  },
  {
    {
      {1 << 17, 0 << 17, 0 << 17, 1 << 17,   0 << 9,   0 << 9},
      {1 << 14, 0 << 14, 0 << 14, 1 << 14, 528 << 9, 400 << 9}
    },
    {
      {0 << 17, 1 << 17, 1 << 17, 0 << 17,   0 << 9,   0 << 9},
      {0 << 14, 1 << 14, 1 << 14, 0 << 14, 560 << 9, 368 << 9}
    }
  }
};

#define STRIP 24

#define ScaleZ(u) (768 * (u) / stride)

void SlurpBase(int image, int zoom, int *block)
{
  char buffer[356], *map;
  char *spr, *picmap;
  int PCD_handle, count;
  int PCDB[10];

  int now;

  swi(OS_RestoreCursors, END);
  hourglass_on();

  if (!filmroll[image].filled)
    Slurp(image);

  if (map = pool_alloc(768 * STRIP * 4 + 100), map == NULL)
    exit(1);                                         
  ((int *) map)[0] = 768 * STRIP * 4 + 200;
  ((int *) map)[2] = 16;
  EG(swi(OS_SpriteOp, R0, 512 +  9, R1, map, END));
  EG(swi(OS_SpriteOp, R0, 256 + 15, R1, map, R2, "screen", R3, 0,
         R4, 768, R5, STRIP,
         R6, 1 | (90 << 1) | (90 << 14) | ((5 + 1) << 27), END));

  EG(swi(OS_SpriteOp, R0, 256 + 24, R1, map, R2, "screen", OUT, R2, &spr, END));
  picmap = spr + ((int *) spr)[8];

  EX(swi(PhotoCD_GetPacName, R0, image + 1, R1, buffer, R2, 255,
         R3, PCDlocation, OUT, R2, &count, END));
  buffer[count] = '\0';

  if (image >= 0 && image < PCDcount)
  {
    int mata[6], matb[6], src[4], zm, stride;

    zm = 3;
#ifdef ZOOMABLE    
    if (block)
    {
      stride = block[2] - block[0];
      while (stride < 768 / 2 && zm < 6)
      {
        zm++;
        stride *= 2;
/*         block[3] *= 2; */
      }
    }
    else
#endif    
    {
      stride = 768;
    }
    src[0] = 0;
    src[1] = 0;
    src[2] = stride;
    src[3] = STRIP;

    memcpy(mata, zooms[zoom][filmroll[image].orient][0], 6 * sizeof(int));
    mata[0] = ScaleZ(mata[0]);
    mata[1] = ScaleZ(ntsc(mata[1]));
    mata[2] = ScaleZ(mata[2]);
    mata[3] = ScaleZ(ntsc(mata[3]));

    memcpy(matb, zooms[zoom][filmroll[image].orient][1], 6 * sizeof(int));
    matb[0] = ScaleZ(matb[0]);
    matb[1] = ScaleZ(ntsc(matb[1]));
    matb[2] = ScaleZ(matb[2]);
    matb[3] = ScaleZ(ntsc(matb[3]));
    
    PCD_handle = photocd_open(image + 1, buffer, 0);

    if (block)
    {
      PCDB[0] = block[0];
    }
    else
    {
      PCDB[0] = 0;
    }
    PCDB[2] = PCDB[0] + stride;
    PCDB[4] = 0;      /* flags           */
    PCDB[5] = 2;      /* colour format   */
    PCDB[6] = 1;      /* plane offset    */
    PCDB[7] = 4;      /* column offset   */
    PCDB[8] = 0;      /* palette entries */
    PCDB[9] = 0;

    screen_redirect(TRUE);
    wimp_setcolour(128 + 5);
    EG(swi(OS_WriteI + 16, END));
    wimp_setcolour(128 + 7);
    now = monotonic_time();
    for (count = 0; count < (ScaleZ(512) + STRIP - 1) / STRIP; count++)
    {
      if (filmroll[image].orient)
      {
        if (zoom)
          mata[4] = (128 + ScaleZ(STRIP * count)) << 9;
        else
          mata[4] = (192 + ScaleZ(STRIP * 3 * count) / 4) << 9;
        matb[4] = (560 + ScaleZ(STRIP * count) / 4) << 9;
      }
      else
      {
        mata[5] = ntsc((520 - ScaleZ(STRIP * count)) << 9);
        matb[5] = (528 - ScaleZ(STRIP * count) / 4) << 9;
      }

      PCDB[1] = (block ? (576 - block[3]) : 0) + STRIP * count;
      PCDB[3] = (block ? (576 - block[3]) : 0) + STRIP * count + STRIP;

      if (swi(PhotoCD_GetBlock, R0, PCD_handle, R1, 0,
             R2, PCDB, R3, picmap, R4, zm, R5, (filmroll[image].rotation == 180
                                || filmroll[image].rotation == 270) ? 180 : 0,
             R6, 768 * 4, R7, readahead,
             R8, (count == 0) ? 200 * 256 * 2 : -1, END))
        continue;
        
      if (filmroll[image].orient)
      {
        EG(swi(OS_SpriteOp, R0, 256 + 33, R1, map, R2, "screen", END));
        src[3] = PCDB[3] - STRIP * count;
      }
      else
      {
        src[1] = STRIP - (PCDB[3] - STRIP * count);
      }

      screen_redirect(TRUE);
      EG(swi(OS_SpriteOp, R0, 256 + 56, R1, map, R2, "screen", R3, 2,
             R4, src, R5, 0, R6, mata, R7, 0, END));
      screen_redirect(FALSE);
      EG(swi(OS_SpriteOp, R0, 256 + 56, R1, map, R2, "screen", R3, 2,
             R4, src, R5, 0, R6, matb, R7, 0, END));
    }
    if (map)
      Heap_Free(map);           
    screen_redirect(FALSE);
    fprintf(stderr, "Zoom %d\n", zm);
    photocd_readimageinfo(PCD_handle, buffer);
    if (buffer[324])
      strcpy(copyright, &buffer[325]);
    else
      strcpy(copyright, "None");
    photocd_close(PCD_handle, 0);
  }
  hourglass_off();
  swi(OS_RemoveCursors, END);
  return;

fail:
  if (map)
    Heap_Free(map);
  if (PCD_handle)
    photocd_close(PCD_handle, 0);
  hourglass_smash();
  screen_redirect(FALSE);
}
