#include <stdlib.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include "swicall.h"
#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "screen.h"
#include "keys.h"

extern BOOL developing, full;

extern int middle, PCDcount;

extern image *filmroll;

/* Set the global error pointer to a static filled-in error block */

ErrorPtr make_error (int num, char *mess)
{
    static _kernel_oserror myerror;
    myerror.errnum = num;
    strcpy (myerror.errmess, mess);
    err = &myerror;
    return err;
}

void *pool_alloc(int size)
{
  void *temp;
  int base, count = 0;

  while (temp = Heap_Alloc(size), temp == NULL && count < (PCDcount / 2 - 3))
  {
    full = TRUE;
    base = (middle + count + PCDcount / 2) % PCDcount;
    if (filmroll[base].data)
    {
      Heap_Free(filmroll[base].data);
      filmroll[base].data = NULL;
    }
    filmroll[base].filled = FALSE;

    base = (middle - count + PCDcount / 2) % PCDcount;
    if (filmroll[base].data)
    {
      Heap_Free(filmroll[base].data);
      filmroll[base].data = NULL;
    }
    filmroll[base].filled = FALSE;
    count++;
  }
  if (temp == NULL)
  {
    make_error(0, "Can't free thumbnail memory");
    exit(1);
  }
  return(temp);
}

char *strndup (const char *str, size_t len)
{
  char *p = pool_alloc(len + 1);

  strncpy(p, str, len);
  p[len] = '\0';
    
  return(p);
}

char *Rip(char *text)
{
  char *cp;
  
  while (cp = strchr(text, '\n'), cp)
    *cp = '\0';
  while (cp = strchr(text, '\r'), cp)
    *cp = '\0';

  return(text);
}

int strnicmp(char *s1, char *s2, size_t n)
{
  char ch1 = 0, 
       ch2 = 0;

  for(;;)
  {
    if ((n == 0) || ((*s1 == 0) && (*s2 == 0)))
      return 0; /* s1 and s2 are equal */
      
    ch1 = toupper(*s1);
    ch2 = toupper(*s2);

    if (ch1 != ch2)
      return (int) (ch1 - ch2);
    s1++;
    s2++;
    n--;
  }
}

/* If the error is fatal, exit (with a message if developing).  If not,
   ignore it. Also, this unredirects and unfades if necessary.
 */

void check_error (ErrorPtr err)
{
  static char buf [266];    /* big enough for longest allowable error message
                               + error number. And permanent! */
  if (developing)
    fprintf (stderr, "ERROR: %s (code %d)\n", err->errmess, err->errnum);
  sprintf (buf, "%d  %s", err->errnum, err->errmess);
  if (err->errnum != 0)
  {
    screen_normalise ();
    exit (0);
  }
}

/* Integer Min function (didn't want a macro) */

int min (int a, int b)
{
    return(a < b ? a : b);
}
