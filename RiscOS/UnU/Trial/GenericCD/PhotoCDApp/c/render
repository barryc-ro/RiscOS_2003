#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#include "defs.h"
#include "inlines.h"
#include "local.h"
#include "PCD.h"
#include "render.h"
#include "screen.h"
#include "spots.h"
#include "swicall.h"
#include "utils.h"

static int spot;

extern int   file_dyn,   spot_dyn;
extern char *file_addr;
extern int renderstarttime, jpegdecodetime;
extern char *picblk;
extern int linelen;

extern int PCDcount;
extern char *PCDlocation;

static struct
{
  int xs, ys, xl, yl, splitchar;
}
coordblock =
{
  0, 0, 0, 0, 32
};

extern image *filmroll;

extern char *drawbasedata, *edgebasedata;
extern int   drawbaselen,   edgebaselen;

extern char *edgearea;

int fh1;

ErrorPtr setup(char *font, int pt, int fgcol, int bgcol)
{
  ER(swi(Font_FindFont, R1, font, R2, pt*16, R3, pt*16, R4, 0, R5, 0,
         OUT, R0, &fh1, END));
  font_setfont(fh1);
  ER(swi(ColourTrans_SetFontColours, R0, fh1, R1, bgcol, R2, fgcol,
         R3, 14, END));
  return(NULL);
}

static ErrorPtr paint_number(int nail, Bool edge, int posn)
{
  char buffer[40];
  int x, y, len, bbox[12];

  sprintf(buffer, "%02d", nail + 1);
  
  memset(bbox, '\0', 12 * sizeof(int));
  bbox[4] = -1;
  ER(setup("homerton.bold", 16, 0x00000000, 0xBBBBBB00));

  ER(swi(Font_ScanString, R0, fh1, R1, buffer, R2, 0x40020, R3, 0x7fffffff, R4, 0x7fffffff, R5, bbox, END));
  len = (bbox[7] - bbox[5]) / 2;

  if (edge)
  {
    ER(swi(Font_Converttopoints, R1, (posn + 96) * 2,
           R2, ntsc(468), OUT, R1, &x, R2, &y, END));
  }
  else
  {
    ER(swi(Font_Converttopoints, R1, (-16 + 200 * posn) * 2,
           R2, ntsc(212), OUT, R1, &x, R2, &y, END));
  }
  ER(swi(Font_Paint, R0, fh1, R1, buffer, R2, 0, R3, x - len, R4, y, END));

  if (edge)
  {
    ER(swi(Font_Converttopoints, R1, (posn + 96) * 2,
           R2, ntsc(20), OUT, R1, &x, R2, &y, END));
  }
  else
  {
    ER(swi(Font_Converttopoints, R1, (-16 + 200 * posn) * 2,
           R2, ntsc(660), OUT, R1, &x, R2, &y, END));
  }
  ER(swi(Font_Paint, R0, fh1, R1, buffer, R2, 0, R3, x - len, R4, y, END));

  font_losefont(fh1);
  return(NULL);
}

/*
   Render a DrawFile to the shadow screen at the bottom left, and 1:1 scaling.
  
   The drawfile is passed in as a block of memory and length.  The caller is
   responsible for freeing it.
  
   It is assumed that the drawfile was created with the proper scale factors.
   Could calculate scale factors instead (note: would have to apply these
   to the spot info too.
  
   Return an error if we failed for some reason.  In this case the spot data
   will still be valid for the current page.
  
   If this returns an error, the global spot data will be UNCHANGED.  Callers
   rely on this.
 */

ErrorPtr render_page(int middle, Bool clear)
{
  int matrix[6], txf[6];
  char tmpspotdata[512];
  int loop, nail;

  matrix[0] = 1 * (1 << 16);
  matrix[3] = ntsc(1 << 16);
  matrix[1] = matrix[2] = matrix[4] = matrix[5] = 0;

  memcpy(txf, matrix, 6 * sizeof(int));
  
  hourglass_on();
  EG(screen_redirect(TRUE));

  if (clear)
  {
    EG(swi(OS_WriteI + 16, END));
  }

  memset(tmpspotdata, '\0', 512);
/* EG removed from next line */
  swi(DrawFile_Render, R0, 0, R1, drawbasedata, R2, drawbaselen, R3, matrix,
      R4, 0, END);
  
  for (loop = 0; loop < 5; loop++)
  {
    nail = (loop - 2 + middle + PCDcount) % PCDcount;
    if (!filmroll[nail].filled)
    {
      Slurp(nail);
    }
    txf[4] = ((filmroll[nail].orient ? -80 : -112) + 200 * loop) << 9;
    txf[5] = ntsc(((filmroll[nail].orient ? 128 : 160)) << 9);
    jpeg_plottransformed(filmroll[nail].data, 0, txf, filmroll[nail].datasize);
    paint_number(nail, FALSE, loop);
  }

  {
    char buffer[48], string[60];
    int s, w, x, y;

    photocd_readinfofile(PCDlocation, &buffer[2], 0);

    ER(setup("homerton.bold", 28, 0xEEEEEE00, 0x00000000));
    sprintf(string, "PhotoCD volume %10s", &buffer[12]);
    string[27] = '\0';
    ER(swi(Font_Converttopoints, R1, x_screen_size,
           R2, ntsc(500 * 2), OUT, R1, &x, R2, &y, END));
    ER(swi(Font_ScanString, R0, fh1, R1, string,
           R2, (1 << 5) | (1 << 8) | (1 << 9),
           R3, x, R4, 0, R5, &coordblock,
           OUT, R1, &s, R3, &w, END));
    ER(swi(Font_Paint, R0, fh1, R1, string, R2, 0, R3, (x - w) / 2, R4, y, END));
    font_losefont(fh1);

    ER(setup("homerton.bold", 16, 0xEEEEEE00, 0x00000000));
    sprintf(string, "Disc created  %s", Rip(ctime((time_t *) &buffer[24])));
    ER(swi(Font_Converttopoints, R1, x_screen_size,
           R2, ntsc(440 * 2), OUT, R1, &x, R2, &y, END));
    ER(swi(Font_ScanString, R0, fh1, R1, string,
           R2, (1 << 5) | (1 << 8) | (1 << 9),
           R3, x, R4, 0, R5, &coordblock,
           OUT, R1, &s, R3, &w, END));
    ER(swi(Font_Paint, R0, fh1, R1, string, R2, 0, R3, (x - w) / 2, R4, y, END));

    sprintf(string, "Last modified %s", Rip(ctime((time_t *) &buffer[28])));
    ER(swi(Font_Converttopoints, R1, x_screen_size,
           R2, ntsc(410 * 2), OUT, R1, &x, R2, &y, END));
    ER(swi(Font_ScanString, R0, fh1, R1, string,
           R2, (1 << 5) | (1 << 8) | (1 << 9),
           R3, x, R4, 0, R5, &coordblock,
           OUT, R1, &s, R3, &w, END));
    ER(swi(Font_Paint, R0, fh1, R1, string, R2, 0, R3, (x - w) / 2, R4, y, END));

    sprintf(string, "This disc holds %d pictures",
            buffer[32] + (buffer[33] << 8));
    ER(swi(Font_Converttopoints, R1, x_screen_size,
           R2, ntsc(380 * 2), OUT, R1, &x, R2, &y, END));
    ER(swi(Font_ScanString, R0, fh1, R1, string,
           R2, (1 << 5) | (1 << 8) | (1 << 9),
           R3, x, R4, 0, R5, &coordblock,
           OUT, R1, &s, R3, &w, END));
    ER(swi(Font_Paint, R0, fh1, R1, string, R2, 0, R3, (x - w) / 2, R4, y, END));
    font_losefont(fh1);
  }
  if (!developing && getenv("PhotoCD$NoFilter") == NULL)
    screen_filter_area(TRUE, 0, 0, 10000, 10000);
  EG(screen_redirect(FALSE));

  spot = monotonic_time();

  spots_convert(drawbasedata, drawbaselen, matrix);
  hourglass_off();

  return(NULL);

fail:
  hourglass_smash();
  screen_redirect(FALSE);
  return(err);
}

static ErrorPtr FillEdge(int nail, int y)
{
  int matrix[6];

  matrix[0] = 1 << 16;
  matrix[3] = ntsc(1 << 16);
  matrix[1] = matrix[2] = matrix[5] = 0;

  if (!filmroll[nail].filled)
    Slurp(nail);

  if (filmroll[nail].orient)
  {
    matrix[4] =  y + 32 << 9;
    matrix[5] = ((32 + 2 * screentype) * ntsc(1 << 16)) >> 7;
    /* Awooooga. Serious bodging ^ here! */
  }
  else
  {
    matrix[4] =  y << 9;
    matrix[5] = (64 * ntsc(1 << 16)) >> 7;
  }
  jpeg_plottransformed(filmroll[nail].data, 0, matrix,
         filmroll[nail].datasize);
  paint_number(nail, TRUE, y);

  return(NULL);
}

static void edge_filter_area (void)
{
  char *spr;

  swi(OS_SpriteOp, R0, 256 + 24, R1, edgearea, R2, "side",
      OUT, R2, &spr, END);
  /* filter_area(spr + ((int *) spr)[8], 200, 256, 400); */

  swi(STBFilter_FilterArea, R0, spr + ((int *) spr)[8],
      R1, 400, R2, 200, R3, ntsc(256), R4, 0,
      R5, 0, R6, 200, R7, ntsc(256), END);
}

ErrorPtr render_edges(int middle, Bool right)
{
  int matrix[6];

  matrix[0] = 1 << 16;
  matrix[3] = ntsc(1 << 16);
  matrix[1] = matrix[2] = matrix[5] = 0;

  EG(screen_edge_redirect(TRUE));

  if (right)
  {
    if (!filmroll[(middle - 3 + PCDcount) % PCDcount].filled)
      Slurp((middle - 3 + PCDcount) % PCDcount);
    if (!filmroll[(middle - 2 + PCDcount) % PCDcount].filled)
      Slurp((middle - 2 + PCDcount) % PCDcount);
    matrix[4] = -112 << 9;
    EG(swi(OS_WriteI + 16, END));
    swi(DrawFile_Render, R0, 0, R1, edgebasedata, R2, edgebaselen, R3, matrix,
        R4, 0, END);
  
    EG(FillEdge((middle - 3 + PCDcount) % PCDcount, -112));
    EG(FillEdge((middle - 2 + PCDcount) % PCDcount,   88));
  }
  else
  {
    if (!filmroll[(middle + 3 + PCDcount) % PCDcount].filled)
      Slurp((middle + 3 + PCDcount) % PCDcount);
    if (!filmroll[(middle + 2 + PCDcount) % PCDcount].filled)
      Slurp((middle + 2 + PCDcount) % PCDcount);
    matrix[4] = -80 << 9;
    EG(swi(OS_WriteI + 16, END));
    swi(DrawFile_Render, R0, 0, R1, edgebasedata, R2, edgebaselen, R3, matrix,
        R4, 0, END);
  
    EG(FillEdge((middle + 2 + PCDcount) % PCDcount, -80));
    EG(FillEdge((middle + 3 + PCDcount) % PCDcount, 120));
  }
  if (!developing && getenv("PhotoCD$NoFilter") == NULL)
    edge_filter_area();

  EG(screen_edge_redirect(FALSE));
  return(NULL);

fail:
  screen_edge_redirect(FALSE);
  return(err);
}
