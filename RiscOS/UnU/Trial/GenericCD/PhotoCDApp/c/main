#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "defs.h"
#include "heap.h"
#include "inlines.h"
#include "keys.h"
#include "local.h"
#include "message.h"
#include "PCD.h"
#include "render.h"
#include "screen.h"
#include "scroll.h"
#include "spots.h"
#include "swicall.h"
#include "utils.h"
#include "vdu.h"
#include "wimpstuff.h"

#define __VERSION__ "0.08 Compiled " __TIME__ " " __DATE__

#define INKEY_DELAY (5)

#define KEY_TIME 150
#define PIC_TIME 300

/* Globals */

ErrorPtr err;
int x_screen_size, y_screen_size;        /* Screen size in OSUNITS */

extern char *spot_addr, *shadarea;
extern int shad_dyn;

/* Direct numbers */
char dirfrm[12] = "Show: ";
int dirlen = 0;

extern int fh1;

extern char copyright[];

int hang_time = PIC_TIME;

image *filmroll;

int middle   = 0;
int PCDcount = 0;

Bool full = FALSE;

char *PCDlocation;

Status view_status = status_NAIL;
Status last_status = status_NAIL;

Bool developing  = FALSE; /* Include development checks (PhotoCD$Developing) */
ScreenType screentype;  /* Whether this is an NTSC or PAL screen */

static int now, start;

static int wimp_messages[] =
{
  TASK_HANDLE,
  TASK_DIE,
  NULL
};

static int this_task;
static int *windowdata;

extern int *mainwindowdata, mainwindowlen;

static void send_message(int action)
{
  int message[6];

  message[0] = 24;
  message[3] =  0;
  message[4] = action;
  wimp_sendmessage(17, message, 0);
}

static void WimpStop(void)
{
  send_message(TASK_DEAD);
  wimp_deletewindow(0, windowdata);
  wimp_closedown(this_task, 0x4B534154);
}

static void WimpStart(void)
{
  swi(Wimp_Initialise, R0, 350, R1, 0x4B534154, R2, "PhotoCD",
      R3, wimp_messages, OUT, R1, &this_task, END);
  windowdata = pool_alloc(mainwindowlen);
  memcpy(windowdata, mainwindowdata, mainwindowlen);
  windowdata[0] = wimp_createwindow(0, &windowdata[1]);
  wimp_openwindow(0, windowdata);
  atexit(WimpStop);
  send_message(TASK_ACTIVE);
}

static void Film_Init(void)
{
  char buffer[256];
  int PCD_handle;
  
  PCDlocation = getenv("PhotoCD$Location"); 
  EX(swi(PhotoCD_GetPacName, R0, 0, R1, buffer, R2, 255, R3, PCDlocation, OUT, R2, &PCDcount, END));
  buffer[PCDcount] = '\0';
  EX(swi(PhotoCD_Open, R0, 0, R1, buffer, R2, 0, OUT, R0, &PCD_handle, END));
  EX(swi(PhotoCD_GetCount, R0, PCD_handle, OUT, R2, &PCDcount, END));
  EX(swi(PhotoCD_Close, R0, PCD_handle, R1, 0, END));

  filmroll = calloc(PCDcount, sizeof(image));

  Slurp(PCDcount - 2);
  Slurp(PCDcount - 1);
  Slurp(0);
  Slurp(1);
  Slurp(2);
}

static void message_action(int action)
{
  switch(action)
  {
  case 0:
    exit(0);
    break;

  case TASK_HANDLE:
    break;

  case TASK_DIE:
    exit(0);
    break;
  }
}

static void redraw_action(int *block)
{
  Bool bMore;
/*   int src[4], dest[8]; */

  if (block[0])
  {
    EX(swi(Wimp_RedrawWindow, R1, block, OUT, R0, &bMore, END));

    while (bMore)
    {
/*       src[0] = block[7] / 2;
      src[1] = block[8] / 2;
      src[2] = block[9] / 2;
      src[3] = block[10] / 2;
      dest[0] = dest[6] = block[7]  << 8;
      dest[1] = dest[3] = block[8]  << 8;
      dest[2] = dest[4] = block[9]  << 8;
      dest[5] = dest[7] = block[10] << 8;
      EX(swi(OS_SpriteOp, R0, 256 + 56, R1, shadarea, R2, "shadow", R3, 3,
          R4, src, R5, 0, R6, dest, R7, 0, END));  */
      EX(swi(Wimp_GetRectangle, R1, block, OUT, R0, &bMore, END));
    }
  }
}

int BigPic(int frame)
{
  if (view_status == status_NAIL)
    screen_remove_ghost();  
  middle = (frame + PCDcount) % PCDcount;
  SlurpBase(middle, 0, NULL);
  screen_switch();  
  start = monotonic_time();

  return(middle);
}

static void null_action(void)
{
  if (dirlen != 0)
  {
    int temp = atoi(dirfrm + 6);

    if (temp > 0 && temp <= PCDcount)
    {
      if (view_status == status_NAIL)
      {
        screen_remove_ghost();  
        middle = temp - 1;
        render_page(middle, TRUE);
        EX(screen_switch());
        EX(screen_start_ghost(TRUE));
      }
      else
      {
        BigPic(temp - 1);
        view_status = status_BASE;
      }
    }
    else
    {
      screen_switch();
      if (view_status == status_NAIL)
        EX(screen_start_ghost(TRUE));
    }
    dirlen = 0;
    hang_time = PIC_TIME;
    os_byte(15, 1, 0); /* Flush the keyboard */
  }
  else if (view_status == status_PLAY)
  {
    BigPic(middle + 1);
  }
  else if (!full && now - start > 300)
  {
    Bool loaded = FALSE;
    int loop, nail;

    for (loop = 0; loop < PCDcount / 2 + 1 && !loaded; loop++)
    {
      nail = ((middle + loop) % PCDcount);
      
      if (!filmroll[nail].filled)
      {
        Slurp(nail);
        loaded = TRUE;
      }
      nail = ((middle - loop + PCDcount) % PCDcount);
      
      if (!filmroll[nail].filled)
      {
        Slurp(nail);
        loaded = TRUE;
      }
    }
  }
}

#ifdef ZOOMABLE

static void zoombox(int *block)
{
  if (block[0] < 0)
  {
    block[2] -= block[0];
    block[0] = 0; 
  }
  if (block[1] < 0)
  {
    block[3] -= block[1];
    block[1] = 0; 
  }
  if (block[2] > 768)
  {
    block[0] -= (block[2] - 768);
    block[2] = 768; 
  }
  if (block[3] > 576)
  {
    block[1] -= (block[3] - 576);
    block[3] = 576;
  }
  swi(ColourTrans_SetGCOL, R0, 0xAAAAAA00, END);
  vdu_move(block[0] << 1, ntsc(block[1] << 1));
  vdu_elin(block[2] << 1, ntsc(block[1] << 1));
  vdu_elin(block[2] << 1, ntsc(block[3] << 1));
  vdu_elin(block[0] << 1, ntsc(block[3] << 1));
  vdu_elin(block[0] << 1, ntsc(block[1] << 1));

  swi(ColourTrans_SetGCOL, R0, 0x55555500, END);
  vdu_move((block[0] << 1) + 2, ntsc(block[1] << 1) + 2);
  vdu_elin((block[2] << 1) - 2, ntsc(block[1] << 1) + 2);
  vdu_elin((block[2] << 1) - 2, ntsc(block[3] << 1) - 2);
  vdu_elin((block[0] << 1) + 2, ntsc(block[3] << 1) - 2);
  vdu_elin((block[0] << 1) + 2, ntsc(block[1] << 1) + 2);
}
#endif

ErrorPtr key_action(int code)
{
#ifdef ZOOMABLE
  static int block[4];

  if (view_status == status_ZOOM)
  {
    switch (code & 0xFF)
    {
    case KEY_BACK:
      zoombox(block);
      view_status = status_BASE;
      break;
    case KEY_SELECT:
      zoombox(block);
      SlurpBase(middle, 1, block);
      screen_switch();  
      start = monotonic_time();
      zoombox(block);
      break;
    case KEY_FFWD:
      if (block[2] - block[0] < 768 && block[1] > 0 && block[2] < 768)
      {
        zoombox(block);
        block[1] -= 3;
        block[2] += 4;
        zoombox(block);
      }
      break;
    case KEY_REWIND:
      if (block[2] - block[0] > 100 && block[1] < 576 && block[2] > 0)
      {
        zoombox(block);
        block[1] += 3;
        block[2] -= 4;
        zoombox(block);
      }
      break;
    case KEY_NN:
      zoombox(block);
      block[1] += 4;
      block[3] += 4;
      zoombox(block);
      break;
    case KEY_SS:
      zoombox(block);
      block[1] -= 4;
      block[3] -= 4;
      zoombox(block);
      break;
    case KEY_WW:
      zoombox(block);
      block[0] -= 4;
      block[2] -= 4;
      zoombox(block);
      break;
    case KEY_EE:
      zoombox(block);
      block[0] += 4;
      block[2] += 4;
      zoombox(block);
      break;
    case KEY_NW:
      zoombox(block);
      block[0] -= 4;
      block[1] += 4;
      block[2] -= 4;
      block[3] += 4;
      zoombox(block);
      break;
    case KEY_NE:
      zoombox(block);
      block[0] += 4;
      block[1] += 4;
      block[2] += 4;
      block[3] += 4;
      zoombox(block);
      break;
    case KEY_SW:
      zoombox(block);
      block[0] -= 4;
      block[1] -= 4;
      block[2] -= 4;
      block[3] -= 4;
      zoombox(block);
      break;
    case KEY_SE:
      zoombox(block);
      block[0] += 4;
      block[1] -= 4;
      block[2] += 4;
      block[3] -= 4;
      zoombox(block);
      break;
    case KEY_BLUE:
      exit(0);
      break;
    }
    start = monotonic_time();
  }
  else
#endif  
  {
    switch (code & 0xFF)
    {
    case KEY_SELECT:
      if (view_status == status_NAIL)
      {
        BigPic(middle);
        view_status = status_BASE;
      }
      else if (view_status == status_BASE)
      {
#ifdef ZOOMABLE    
        if (filmroll[middle].orient)
        {
          block[0] = 96 + (0         * 3) / 4;
          block[1] = ntsc(32) + (ntsc(0)   * 3) / 4;
          block[2] = 96 + (768       * 3) / 4;
          block[3] = ntsc(32) + (ntsc(576) * 3) / 4;
        }
        else
        {
          block[0] = 0;
          block[1] = ntsc(0);
          block[2] = 768;
          block[3] = ntsc(576);
        }
        zoombox(block);
        view_status = status_ZOOM;
#else
        render_page(middle, TRUE);
        EX(screen_switch());
        EX(screen_start_ghost(TRUE));
        view_status = status_NAIL;
#endif
      }
      break;
    case KEY_PLAY:
      if (view_status != status_PLAY)
      {
        BigPic((view_status == status_BASE) ? (middle + 1) : middle);
        view_status = status_PLAY;
      }
      break;
    case KEY_PAUSE:
      if (view_status == status_PLAY)
      {
        view_status = status_BASE;
        last_status = status_PLAY;
      }
      else if (view_status == status_BASE && last_status == status_PLAY)
      {
        view_status = status_PLAY;
        last_status = status_BASE;
      }
      break;
    case KEY_STOP:
      if (view_status == status_PLAY)
      {
        render_page(middle, TRUE);
        EX(screen_switch());
        EX(screen_start_ghost(TRUE));
        view_status = status_NAIL;
      }
      break;
    case KEY_BACK:  
      if (view_status == status_BASE)
      {
        render_page(middle, TRUE);
        EX(screen_switch());
        EX(screen_start_ghost(TRUE));
        view_status = status_NAIL;
      }
      break;
    case KEY_LEFT:  
    case KEY_PREV:  
      if (view_status == status_NAIL)
      {
        scroll(TRUE);
        middle = (middle - 1 + PCDcount) % PCDcount;
        start = monotonic_time();
        if (!filmroll[(middle + PCDcount - 3) % PCDcount].filled)
          Slurp((middle + PCDcount - 3) % PCDcount);
      }
      else
      {
        BigPic(middle - 1);
      }
      os_byte(15, 1, 0); /* Flush the keyboard */
      break;
    case KEY_RIGHT:
    case KEY_NEXT:
      if (view_status == status_NAIL)
      {
        scroll(FALSE);
        middle = (middle + 1) % PCDcount;
        start = monotonic_time();
        if (!filmroll[(middle + 3) % PCDcount].filled)
          Slurp((middle + 3) % PCDcount);
      }
      else
      {
        BigPic(middle + 1);
      }
      os_byte(15, 1, 0); /* Flush the keyboard */
      break;
    case KEY_REWIND:  
      if (view_status == status_NAIL)
      {
        screen_remove_ghost();  
        middle = (middle - 4) % PCDcount;
        render_page(middle, TRUE);
        EX(screen_switch());
        EX(screen_start_ghost(TRUE));
        start = monotonic_time();
      }
      os_byte(15, 1, 0); /* Flush the keyboard */
      break;
    case KEY_FFWD:
      if (view_status == status_NAIL)
      {
        screen_remove_ghost();  
        middle = (middle + 4) % PCDcount;
        render_page(middle, TRUE);
        EX(screen_switch());
        EX(screen_start_ghost(TRUE));
        start = monotonic_time();
      }
      os_byte(15, 1, 0); /* Flush the keyboard */
      break;
  
    case KEY_STATUS:
      if (view_status == status_BASE)
      {
        message_display(middle);
        view_status = status_INFO;
      }
      else if (view_status == status_INFO)
      {
        screen_switch();
        view_status = status_BASE;
      }
      break;
  
    case 'X':
    case 'x':
    case KEY_BLUE:
      exit(0);
      break;
      
    default:
      if (code >= KEY_0 && code <= KEY_9)
      {
        int x, y;
        
        dirfrm[6 + dirlen++] = code;
        dirfrm[6 + dirlen] = '\0';
  
        ER(setup("homerton.bold", 32, 0xCCCCCC00, 0x00000000));
  
        ER(swi(Font_Converttopoints, R1, 500 * 2,
               R2, 48 * 2, OUT, R1, &x, R2, &y, END));
        ER(swi(Font_Paint, R0, fh1, R1, dirfrm, R2, 0, R3, x, R4, y, END));
        font_losefont(fh1);
        
        if (dirlen == 2)
        {
          int temp = atoi(dirfrm + 6);
  
          if (temp > 0 && temp <= PCDcount)
          {
            if (view_status == status_NAIL)
            {
              screen_remove_ghost();  
              middle = temp - 1;
              render_page(middle, TRUE);
              EX(screen_switch());
              EX(screen_start_ghost(TRUE));
            }
            else
            {
              BigPic(temp - 1);
              view_status = status_BASE;
            }
          }
          else
          {
            EX(screen_switch());
            if (view_status == status_NAIL)
              EX(screen_start_ghost(TRUE));
          }
          dirlen = 0;
          hang_time = PIC_TIME;
          os_byte(15, 1, 0); /* Flush the keyboard */
        }
        else
        {
          hang_time = KEY_TIME;
        }
        start = monotonic_time();
      }
      else
      {
        swi(Wimp_ProcessKey, R0, code, END);
      }
      break;
    }
  }
  return(err);
}

int main (int argc, char **argv)
{
  int pollblock[64];
  int reason;
  
  if (getenv("PhotoCD$Developing") != NULL)
    developing = (toupper(*getenv("PhotoCD$Developing")) == 'Y'); 

  PCDlocation = getenv("PhotoCD$Location"); 

  oscli("Set PhotoCD$Version "__VERSION__);

  /* Begin with the assumption that this is a PAL screen, unless we can
     determine otherwise from <PhotoCD$ScreenType> or the MPEG control module
       */
  EX(swi(OS_ScreenMode, R0, 1, OUT, R1, &reason, END));
  screentype = ((ScreenType) (reason == 55)) /* screen_check_screen_type () */;

  Heap_Create();
  EX(screen_init(TRUE));
  atexit(screen_normalise);
  hourglass_on();
  Film_Init();

  render_page(middle, TRUE);
  WimpStart();
  screen_changemode(TRUE);
  EX(screen_switch());
  EX(screen_start_ghost(TRUE));

  Slurp(PCDcount - 3);
  Slurp(3);
  hourglass_off();
  start = monotonic_time();

  for (;;)
  {
    reason = wimp_pollidle(0x000C3870, pollblock, (full ? now : start) + hang_time);

    switch (reason)
    {
    case 0:
      null_action();
      break;

    case 1:
      redraw_action(pollblock);
      break;

    case 8:
      key_action(pollblock[6]);
      break;

    case 17:
      message_action(pollblock[4]);
      break;
    }
    now = monotonic_time();
  }
  exit (0);
}
