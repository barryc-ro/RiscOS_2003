#include <string.h>

#include "defs.h"
#include "kernel.h"
#include "muldiv.h"
#include "swicall.h"

extern int   spot_dyn;
extern char *spot_addr;

static int pmaster[] = {0x103, 56, 0, 0, 0, 0, 0,
                        0xEAB84000, 0xEAB84000, 60, 0x65646166, 0};

typedef struct
{
  int x, y;
} dwimp_point;

typedef dwimp_point dwimp_coord;


typedef struct
{
  dwimp_point min;
  dwimp_point max;
} dwimp_rect;

typedef dwimp_rect dwimp_box;

static void trfm_box(dwimp_box *r, int *m)
{
  dwimp_box r1 = *r;
  
  r->min.x = muldiv(m[0], r1.min.x, 1 << 16)
           + muldiv(m[1], r1.min.y, 1 << 16) + m[4];
  r->min.y = muldiv(m[2], r1.min.x, 1 << 16)
           + muldiv(m[3], r1.min.y, 1 << 16) + m[5];
  r->max.x = muldiv(m[0], r1.max.x, 1 << 16)
           + muldiv(m[1], r1.max.y, 1 << 16) + m[4];
  r->max.y = muldiv(m[2], r1.max.x, 1 << 16)
           + muldiv(m[3], r1.max.y, 1 << 16) + m[5];
}

void spots_convert(char *data, int len, int *matrix)
{
  char *drawptr;
  int next = 0;

  memcpy(spot_addr, pmaster, pmaster[1]); 

  drawptr = data + 40;

  while (drawptr < data + len)
  {
    if (((int *) drawptr)[0] == 0x103)
    {
      memcpy(spot_addr, drawptr, ((int *) drawptr)[1]);
      break;
    }
    drawptr += ((int *) drawptr)[1];
  }
  drawptr = data + 40;
  next = ((int *) spot_addr)[1];

  while (drawptr < data + len)
  {
    if (((int *) drawptr)[0] == 0x101)
    {
      memcpy(&spot_addr[next], drawptr, ((int *) drawptr)[1]);
      if (matrix)
        trfm_box((dwimp_box *) &spot_addr[next + 8], matrix);
      next += ((int *) drawptr)[1];
    }
    drawptr += ((int *) drawptr)[1];
  }
  *((int *) &spot_addr[next]) = -1;
}
