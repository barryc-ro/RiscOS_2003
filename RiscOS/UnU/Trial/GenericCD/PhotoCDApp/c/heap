#include <stdlib.h>
#include <string.h>

#include "Defs.h"
#include "swicall.h"
#include "utils.h"

#define PAGE_SIZE 4096
#define HEAP_INC  (PAGE_SIZE - 1)

static char *heap_addr;
static int   heap_dyn;
static int   heap_size  = PAGE_SIZE;
static int   heap_count = 0;

static BOOL heap_init = FALSE;

char *CreateDynamic(char *name, int *area, int minsize, int maxsize)
{
  char *pointer, *narea;
  
  *area = -1;

  do
  {
    swi (OS_DynamicArea, R0, 3, R1, *area, OUT, R1, area, END);
    if (*area != -1) 
      swi (OS_DynamicArea, R0, 2, R1, *area, OUT, R3, &pointer,
                           R8, &narea, END);
  } while (*area != -1 && strcmp(name, narea) != 0);

  if (*area == -1)
    EX(swi(OS_DynamicArea, R0, 0, R1, -1, R2, minsize, R3, -1,
                    R4, 128, R5, maxsize, R6, 0, R7, 0, R8, name,
                    OUT, R1, area, R3, &pointer, END));
  return(pointer);
}

static void _Heap_Lose(void)
{
  swi(OS_DynamicArea, R0, 1, R1, heap_dyn, END);
}  

 ErrorPtr Heap_Create(void)
{
  if (!heap_init)
  {
    heap_addr = CreateDynamic("PhotoCD heap area", &heap_dyn, 1 * 1024 * 1024, -1);
    heap_init = TRUE;
    atexit(_Heap_Lose);
    EX(swi(OS_Heap, R0, 0, R1, heap_addr, R3, 1 * 1024 * 1024, END));
  }                       
  return(err);
}

void Heap_Free(void *block)
{
#if FALSE
  int heap_lose, heap_end;
#endif                     
  
  if (!heap_init)
    return;
  
  if (swi(OS_Heap, R0, 3, R1, heap_addr, R2, block, END) == NULL)
    heap_count--;

#if FALSE
  if (swi(OS_DynamicArea, R0, 2, R1, heap_dyn, OUT, R2, &heap_size, END) == NULL)
  {
    /* No error trap as we only want to shrink by as much as possible,
       not necessarily as much as we say. */                
    swi(OS_Heap, R0, 5, R1, heap_addr, R3, -(heap_size - PAGE_SIZE), END);
    
    /* Shhh!!! Don't tell anyone I'm looking at the heap end directly! */
    heap_end = ((int *) heap_addr)[3];
    heap_lose = heap_size - heap_end;
    if (heap_lose > HEAP_INC)
    {
      swi(OS_ChangeDynamicArea, R0, heap_dyn, R1, -heap_lose + HEAP_INC, END);
    }
  }
#endif                     
}

void *Heap_Alloc(int size)
{
  int heap_free, heap_most;
  char *heap_alloc = NULL;

  if (!heap_init)
    return(NULL);
  
  EG(swi(OS_Heap, R0, 1, R1, heap_addr,
                  OUT, R2, &heap_most, R3, &heap_free, END));

  while (heap_most < size)
  {
    EG(swi(OS_ChangeDynamicArea, R0, heap_dyn,
           R1, size - heap_most + HEAP_INC, END));
    EG(swi(OS_DynamicArea, R0, 2, R1, heap_dyn,
             OUT, R2, &heap_size, END));
    EG(swi(OS_Heap, R0, 5, R1, heap_addr,
             R3, size - heap_most + HEAP_INC, END));
    EG(swi(OS_Heap, R0, 1, R1, heap_addr,
             OUT, R2, &heap_most, R3, &heap_free, END));
  }
  swi(OS_Heap, R0, 2, R1, heap_addr, R3, size,
                  OUT, R2, &heap_alloc, END);
  if (heap_alloc != NULL)
    heap_count++;                  

  return((void *) heap_alloc);

fail:
  return(NULL);
}
