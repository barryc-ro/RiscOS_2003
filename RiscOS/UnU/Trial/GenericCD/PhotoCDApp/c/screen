#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#include "copy.h"
#include "defs.h"
#include "filter.h"
#include "fx.h"
#include "heap.h"
#include "inlines.h"
#include "objects.h"
#include "render.h"
#include "spots.h"
#include "swicall.h"
#include "utils.h"
#include "vdu.h"

#define MODENUM_PAL 50
#define MODENUM_NTSC 55
#define MODECHANGE_DELAY (5)

#define TMPSIZE ((300*200*2) + 1024)            /* The limit on size of selectable areas */
#define TMPNAME "tmpxxx"

#define LIGHT    0xeab84000
#define DARK     0x310c0c00
#define LIGHTISH 0xaa992000

char *shadarea = NULL;                   /* Space for the shadow screen */
static char *shadow = NULL;              /* The shadow sprite data */
char *picblk = NULL;                     /* The shadow sprite image start */

char *edgearea = NULL;                   /* The wipe bar sprite area */

static char *savearea = NULL;            /* For SwitchOutputToSprite */

int    file_dyn,  spot_dyn, shad_dyn;
char *file_addr, *spot_addr;

char *readahead;

drawfile_page *cpage;

extern int renderstarttime, jpegdecodetime, blankandplottime;

/*
 * The modespec for producing a Mode50/55-sized mode on an AKF85.
 * Assumes that you have the following entries in your modefile:-
 *
 * # 768 x 576 (75Hz) PAL
 * startmode
 * mode_name:768 x 576
 * x_res:768
 * y_res:576
 * pixel_rate:49500
 * h_timings:80,92,58,768,58,0
 * #    VESA:80,160,0,800,0,16
 * v_timings:3,21,12,576,12,1
 * sync_pol:0
 * endmode
 *
 * # 768 x 480 (75Hz) NTSC
 * startmode
 * mode_name:768 x 480
 * x_res:768
 * y_res:480
 * pixel_rate:49500
 * h_timings:80,92,58,768,58,0
 * #    VESA:80,160,0,800,0,16
 * v_timings:3,21,60,480,60,1
 * sync_pol:0
 * endmode
 */

static int modespec_pal [] = {
  1, 768, 576, 4, -1, -1};
static int modespec_ntsc [] = {
  1, 768, 480, 4, -1, -1};
static int *modespec = NULL;
static int modenum;
static unsigned int usemode;

char *scstart;                                  /* Address of screen start */
int linelen;
int dlinelen;
int xres, yres;                                 /* Screen size in PIXELS */
static int xeig, yeig;
static Bool usefastcopy;                        /* Is the mode suitable? */

static Bool ghost_showing = FALSE;              /* If this is true, the ghost is visible */

#define THICKNESS (12)                          /* Thickness of ghost border */
static unsigned int light = LIGHT, lightish = LIGHTISH, dark = DARK;

drawfile_hotspot *ghostpos;

/*
 * Select the correct mode.  If developing then assume
 * a proper monitor, not a TV.
 */

ErrorPtr screen_changemode (Bool really)
{
  int curmode;

  int vdublk[64];
  if (developing)
  {
    usemode = (unsigned int) modespec;
  }
  else
  {
    int lo, hi;
    usemode = (unsigned int) modenum;

    /* Read base address of OS_Byte variables */
    swi (OS_Byte, R0,0xA6, R1,0, R2,0xFF, OUT, R1,&lo, R2,&hi, END);
  }
  if (really)
  {
    /* Check current mode, and only change it if needed */

    ER(swi(OS_ScreenMode, R0, 1, OUT, R1, &curmode, END));
    if (! (!developing && curmode == usemode ||
        developing && curmode >= 256 && memcmp ((void *) curmode,
               (void *) modespec, sizeof(modespec_pal /*sic*/)) == 0) )
    {
      os_removecursors();
      os_screenmode(0, usemode);
      ER(swi(ColourTrans_SetGCOL, R0, 0x000000, R3, 1 << 7, R4, 0, END));
      vdu_cls();
      os_removecursors();
    }
  }

  vdublk[0] = 148;
  vdublk[1] = -1;
  os_readvduvariables(vdublk, vdublk);
  scstart = (char *) vdublk[0];

  return(NULL);
}

/*
 * Initialise screen code.  Return error if we cannot allocate, etc, and the caller should exit.
 */

ErrorPtr screen_init (Bool really)
{
  int lbpp, hdpi, vdpi;
  int shadoff, savesize;

  switch (screentype)
  {
  case PAL:
    modenum  = MODENUM_PAL;
    modespec = modespec_pal;
    break;
  case NTSC:
    modenum  = MODENUM_NTSC;
    modespec = modespec_ntsc;
    break;
  }

  /* Change mode, if needed */
  ER(screen_changemode(FALSE));

  if (really)
  {
    swi(OS_RemoveCursors, END);
  }

  /* Assume these won't fail (...?) */
  swi(OS_ReadModeVariable, R0, usemode, R1,  9, OUT, R2, &lbpp, END);
  swi(OS_ReadModeVariable, R0, usemode, R1, 11, OUT, R2, &xres, END); 
  swi(OS_ReadModeVariable, R0, usemode, R1, 12, OUT, R2, &yres, END); 
  swi(OS_ReadModeVariable, R0, usemode, R1,  4, OUT, R2, &xeig, END);
  swi(OS_ReadModeVariable, R0, usemode, R1,  5, OUT, R2, &yeig, END);
  xres++;
  yres++;

  x_screen_size = xres << xeig;
  y_screen_size = yres << yeig;

  linelen = xres * ((1 << lbpp) / 8);
  swi(OS_ReadModeVariable, R0, usemode, R1, 6, OUT, R2, &dlinelen, END);

  spot_addr = CreateDynamic("STB Hotspots", &spot_dyn, 4 * 1024, 4 * 1024);

  cpage = (drawfile_page *) spot_addr;                         

  /* Allocate sprite areas */

  shadarea = Heap_Alloc(768 * ntsc(576) * 2 + 100);
  edgearea = Heap_Alloc(200 * 256 * 2 + 100);
  if (shadarea == NULL)
    goto nomem;

  /* Set up the shadow buffer */

  ((int *) shadarea) [0] = 768 * ntsc(576) * 2 + 100;
  ((int *) shadarea) [2] = 16;
  EG(swi(OS_SpriteOp, R0, 512 + 9, R1, shadarea, END));
  hdpi = 180 / (1 << xeig);
  vdpi = 180 / (1 << yeig);
  EG(swi(OS_SpriteOp, R0, 256 + 15, R1, shadarea, R2, "shadow", R3, 0,
         R4, xres, R5, yres,
         R6, 1 | (hdpi << 1) | (vdpi << 14) | ((lbpp + 1) << 27), END));
  EG(swi(OS_SpriteOp, R0, 512 + 8, R1, shadarea, OUT, R4, &shadoff, END));
  shadow = shadarea + shadoff;
  picblk = shadow + ((int *) shadow)[8];

  /* Set up the edge sprites */

  ((int *) edgearea) [0] = 200 * 256 * 2 + 100;
  ((int *) edgearea) [2] = 16;
  EG(swi(OS_SpriteOp, R0, 512 +  9, R1, edgearea, END));
  EG(swi(OS_SpriteOp, R0, 256 + 15, R1, edgearea, R2, "side", R3, 0,
         R4, 200, R5, ntsc(256),
         R6, 1 | (hdpi << 1) | (vdpi << 14) | ((lbpp + 1) << 27), END));

  /* Allocate the save area for switching output to sprite */

  EG(swi(OS_SpriteOp, R0, 512 + 62, R1, shadarea, R2, shadow,
         OUT, R3, &savesize, END));
  savearea = Heap_Alloc(savesize);
  if (savearea == NULL)
    goto nomem;
  ((int *) savearea)[0] = 0;

  swi(OS_SpriteOp, R0, 256 + 24, R1, edgearea, R2, "side",
      OUT, R2, &readahead, END);
  readahead = readahead + ((int *) readahead)[8];

  /* The fast assembler copy routine assumes certain things about
     the screen mode */
  usefastcopy = (((int) scstart | (int) picblk | linelen | dlinelen) & 3)
                 == 0 && (xres & 0xF) == 0;

  srand (monotonic_time());

  return NULL;

nomem:
  make_error (1, "NoMem");
fail:
  Heap_Free(shadarea);
  Heap_Free(savearea);
  return err;
}


/*
 * Direct output to the shadow screen (if parameter is TRUE) or the
 * real screen (if parameter is FALSE).
 */

ErrorPtr screen_redirect (Bool toshadow)
{
  static char *oldscb, *oldsptr, *oldsa;
  static Bool redirected = FALSE;

  if (toshadow)
  {
    if (redirected == FALSE)
    {
      ER(swi(OS_SpriteOp, R0, 512 + 60, R1, shadarea, R2, shadow, R3, savearea,
             OUT, R1, &oldscb, R2, &oldsptr, R3, &oldsa, END));
      redirected = TRUE;
    }
  }
  else
  {
    if (redirected == TRUE)
    {
      ER(swi(OS_SpriteOp, R0, 256 + 60, R1, oldscb, R2, oldsptr, R3, oldsa, END));
      redirected = FALSE;
      ((int *) savearea)[0] = 0;
    }
  }
  return NULL;
}

ErrorPtr screen_edge_redirect (Bool toshadow)
{
  static char *oldscb, *oldsptr, *oldsa;
  static Bool redirected = FALSE;

  if (toshadow)
  {
    if (redirected == FALSE)
    {
      ER(swi(OS_SpriteOp, R0, 256 + 60, R1, edgearea,
             R2, "side", R3, savearea,
             OUT, R1, &oldscb, R2, &oldsptr, R3, &oldsa, END));
      redirected = TRUE;
    }
  }
  else
  {
    if (redirected == TRUE)
    {
      ER(swi(OS_SpriteOp, R0, 256 + 60, R1, oldscb, R2, oldsptr, R3, oldsa, END) );
      redirected = FALSE;
      ((int *) savearea)[0] = 0;
    }
  }
  return NULL;
}


/*
 * Save a rectangle of the screen by remembering its coordinates.  Assumes that the
 * shadow buffer will not get corrupted.
 */

static int saved_x0, saved_y0, saved_x1, saved_y1;


static ErrorPtr save_rect (int x0, int y0, int x1, int y1)
{
  saved_x0 = x0 - (THICKNESS << 8);
  saved_y0 = y0 - (THICKNESS << 8);
  saved_x1 = x1 + (THICKNESS << 8);
  saved_y1 = y1 + (THICKNESS << 8);
  return NULL;
}


/* Restore the above saved rectangle by copying it out of the shadow buffer. */

static ErrorPtr restore_rect ()
{
  vdu_window (saved_x0 >> 8, saved_y0 >> 8, saved_x1 >> 8, saved_y1 >> 8);
  vdu_move (0, 0);
  ER(swi(OS_SpriteOp, R0, 512 + 28, R1, shadarea, R2, shadow, R5, 0, END));
  vdu_window (0, 0, x_screen_size - 2, y_screen_size - 2);
  return NULL;
}

/*
 * col is of the form 0xBBGGRR00.  This is the colour
 * to be used for the lightest part of the ghost.  The
 * 'lightish' and 'dark' values are computed from this.
 */

#define SCALE1(n) (((n) * 80) / 100)
#define SCALE2(n) (((n) * 60) / 100)

static void set_ghost_colour (unsigned int col)
{
  unsigned int r = (col >>  8) & 0xff;
  unsigned int g = (col >> 16) & 0xff;
  unsigned int b = (col >> 24) & 0xff;

  light    = col;
  lightish = (SCALE1(b) << 24) | (SCALE1(g) << 16) | (SCALE1(r) << 8);
  dark     = (SCALE2(b) << 24) | (SCALE2(g) << 16) | (SCALE2(r) << 8);
}



/*
 * Set the ghost to the default colours
 */

static void set_ghost_colour_defaults ()
{
  set_ghost_colour (LIGHT);
}


/*
 * Remove the ghost, if it is there
 */

ErrorPtr screen_remove_ghost ()
{
  if (ghost_showing)
  {
    ghost_showing = FALSE;
    ER ( restore_rect () );
  }
  return NULL;
}


/*
 * Draw the ghost highlighting in either its pushed in or normal state.
 * The colours must have been set up already.
 */

static ErrorPtr draw_ghost (drawfile_hotspot *sp, Bool pushed)
{
  drawfile_page *thispage = (drawfile_page *) spot_addr;

  int off;
/*   int d2 = pushed ? 2 : 0; */
  int d4 = pushed ? 4 : 0;
  int x0, y0, x1, y1;

  x0 = sp->bbox.x0 >> 8;
  y0 = sp->bbox.y0 >> 8;
  x1 = sp->bbox.x1 >> 8;
  y1 = sp->bbox.y1 >> 8;

  if (pushed)
  {
    if (sp->scol)
      set_ghost_colour(sp->scolv);
    else if (sp->hcol)
      set_ghost_colour(sp->hcolv);
    else if (thispage->scol)
      set_ghost_colour(thispage->scolv);
    else if (thispage->hcol)
      set_ghost_colour(thispage->hcolv);
    else
      set_ghost_colour_defaults();
  }
  else if (sp->nosel)
  {
    return(NULL);
  }
  else
  {
    if (sp->hcol)
      set_ghost_colour(sp->hcolv);
    else if (thispage->hcol)
      set_ghost_colour(thispage->hcolv);
    else
      set_ghost_colour_defaults();
  }

  for (off = 2; off <=12; off += 2)
  {
    setcolour(off == 2 || off == 8 ? lightish : light);
    vdu_move (x0 - off + d4, y0 - off - d4);
    vdu_line (x0 - off + d4, y1 + off - d4);
    vdu_line (x1 + off + d4, y1 + off - d4);
    if (off != 2 && off != 8)
      setcolour(dark);
    vdu_line (x1 + off + d4, y0 - off - d4);
    vdu_line (x0 - off + d4, y0 - off - d4);
  }
  /* ER ( swi (ColourTrans_SetGCOL,  R0, 0,  END) );
  if (pushed)
  {
    for (off = 6; off <= 8; off += 2)
    {
      vdu_move (x0 - off     , y0 - off + d2);
      vdu_line (x0 - off     , y1 + off - d2);
      vdu_move (x0 - off + d2, y1 + off     );
      vdu_line (x1 + off - d2, y1 + off     );
    }
  }
  for (off = 10; off <= 12; off += 2)
  {
    vdu_move (x0 - off     , y0 - off + d2);
    vdu_line (x0 - off     , y1 + off - d2);
    vdu_move (x0 - off + d2, y1 + off     );
    vdu_line (x1 + off - d2, y1 + off     );
    vdu_move (x0 - off + d2, y0 - off     );
    vdu_line (x1 + off - d2, y0 - off     );
    vdu_move (x1 + off     , y0 - off + d2);
    vdu_line (x1 + off     , y1 + off - d2);
  } */
  return NULL;
}


/*
 * Plot the ghost selection at a particular spot number.  If it is already showing, then remove it first.
 * Attempts to place the ghost on a nonexistent or invalid spot are ignored.
 */


static ErrorPtr plot_ghost (drawfile_hotspot *where)
{
  drawfile_page *thispage = (drawfile_page *) spot_addr;

  if (ghost_showing && ghostpos == where)
    return NULL;
  if (where == NULL || where->nosel)
    return(NULL);

  if (ghost_showing)
    ER ( screen_remove_ghost () );

  /* Save the bit of screen behind the ghost */
  ER(save_rect(where->bbox.x0, where->bbox.y0, where->bbox.x1, where->bbox.y1));

  /* Plot the ghost */

  if (where->hcol)
    set_ghost_colour (where->hcolv);
  else if (thispage->hcol)
    set_ghost_colour (thispage->hcolv);
  else
    set_ghost_colour_defaults ();

  ER ( draw_ghost (where, FALSE) );

  ghost_showing = TRUE;
  ghostpos = where;
  return NULL;
}


/*
 * Set the ghost selection to its initial position (ie. on the default spot).
 * If 'newpage' is TRUE, then the default spot is the page's default.
 * If 'newpage' is FALSE, then the default spot is the last known ghost
 * position for this page.
 * If there is no default spot, then there are no spots, so no ghost.
 * If the spots data contains a colour for the ghost, then use that, otherwise use
 * the default colours.
 */

ErrorPtr screen_start_ghost (Bool newpage)
{
  drawfile_page *thispage = (drawfile_page *) spot_addr;
  char *spotptr = &spot_addr[thispage->size];
  drawfile_hotspot *where = (drawfile_hotspot *) spotptr;

  if (where->object == -1)
    return(NULL);
  ghost_showing = FALSE;

  if (newpage || ghostpos == NULL || ghostpos->object != 0x101)
  {
    while (where = (drawfile_hotspot *) spotptr,
           where->object != -1 && !(where->visible && where->def))
      spotptr += where->size;
  
    if (where->object == -1)
    {
      spotptr = &spot_addr[thispage->size];
      
      while (where = (drawfile_hotspot *) spotptr,
           where->object != -1 && !(where->visible && !where->nosel))
        spotptr += where->size;
    }
    if (where->object == -1)
      where = (drawfile_hotspot *) &spot_addr[thispage->size];
  }
  else
  {
    where = ghostpos;
  }
  if (where == NULL || where->object == -1 || !where->visible || where->nosel)
    return(NULL);
  return(plot_ghost(where));
}

/* Copy the contents of the shadow screen into the real screen memory */

static ErrorPtr screen_copy ()
{
  return(swi(OS_SpriteOp, R0, 512 + 34, R1, shadarea, R2, shadow, R3, 0,
             R4, 0, R5, 0, END));
}

/* Fade out, copy shadow to main screen, fade back in */

ErrorPtr screen_switch (void)
{
  swi (OS_Byte,  R0, 19, END);
  if (usefastcopy)
    copy_screen_fast (picblk, scstart, linelen, dlinelen, yres, xres >> 4);
  else
    screen_copy();

  return(NULL);
}


/*
 * To be called at exit, on fatal error, etc.
 */

void screen_normalise ()
{
  os_byte(4, 0, 0);
  swi (OS_RestoreCursors,  END);
  hourglass_smash();
  screen_redirect (FALSE);
  swi (OS_DynamicArea, R0, 1, R1, spot_dyn, END);
}


/* Filter an area of the screen or background sprite.  Coordinates are
   in pixels. */

void screen_filter_area (Bool shadow, int x0, int y0, int width, int height)
{
  swi(STBFilter_FilterArea, R0, shadow ? picblk : scstart,
                            R1, shadow ? linelen : dlinelen,
                            R2, xres, R3, yres,
                            R4, x0, R5, y0,
                            R6, width, R7, height, END);
}

/* Plot a half-intensity box of the specified size (OS Units) to the screen
   or shadow screen. */

void screen_halfbox (Bool shadow, int x0, int y0, int x1, int y1)
{
  char *scr = shadow ? picblk : scstart;
  int len = shadow ? linelen : dlinelen;
  x0 >>= xeig;
  y0 >>= yeig;
  x1 >>= xeig;
  y1 >>= yeig;

  fx_halfbox (scr + len * (yres - y1) + x0 * 2, x1 - x0, y1 - y0, len);
}
