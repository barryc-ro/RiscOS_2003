        GET     h.regdefs
        GET     h.swinos
        GET     h.macros
;
        PREAMBLE

        STARTCODE  shift_block_right

        STMFD   r13!, {r1-r12, lr}
        MOV     r2, r2, LSR #1
        MOV     r2, r2, LSL #1
        MOV     r5, #(200 * 2)
        MUL     r4, r5, r2
        STMFD   r13!, {r4}               ; edge reset          #24
        MOV     r7, #(768)               ; frig: 2 bpp cancels half height
        MUL     r6, r2, r7
        ADD     r0, r0, r6
        STMFD   r13!, {r0}               ; even field start    #20
        ADD     r1, r1, r6
        STMFD   r13!, {r1}               ; odd  field start    #16
        ADD     r3, r3, r4
        STMFD   r13!, {r3}               ; even edge start     #12
        SUB     r3, r3, r5
        STMFD   r13!, {r3}               ; odd edge start      #8
        STMFD   r13!, {r2}               ; height              #4
        MOV     r2, r2, LSR #1
        STMFD   r13!, {r2}               ; half height         #0

        LDR     r0, [r13, #20]
        LDR     r3, [r13, #0]            ; rows in field
firstrowr
        SUB     r1, r0, #16              ; shift by 8 pixels first time
        MOV     r2, #(768 / (2 * 4) - 1) ; hops per row

firstcolr
        LDMDB   r1!, {r9-r12}
        STMDB   r0!, {r9-r12}
        SUBS    r2, r2, #1
        BNE     firstcolr

        LDR     r1, [r13, #8]            ; move in from the edge
        LDMDB   r1, {r9-r12}
        STMDB   r0!, {r9-r12}
        SUB     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #8]
        SUBS    r3, r3, #1
        BNE     firstrowr

        LDR     r5, [r13, #24]           ; reset edge pointer to next col
        ADD     r1, r1, r5
        SUB     r1, r1, #16
        STR     r1, [r13, #8]

; main shift here...
        MOV     r4, #12                  ; need to move 192 pixels, 16 at a time

morenextr
;        MOV     r0, #19
;        SWI     SWI_OS_Byte
        LDR     r0, [r13, #16]
        LDR     r3, [r13, #0]            ; rows in field
nextrowre        
        SUB     r1, r0, #32              ; shift by 16 pixels
        MOV     r2, #(768 / (2 * 8) - 1) ; hops per row

nextcolre
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolre
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolre
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolre
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolre
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BNE     nextcolre
endcolre
        LDR     r1, [r13, #12]
        LDMDB   r1, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUB     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #12]
        SUBS    r3, r3, #1
        BNE     nextrowre

        LDR     r5, [r13, #24]
        ADD     r1, r1, r5
        SUB     r1, r1, #32
        STR     r1, [r13, #12]

;        MOV     r0, #19
;        SWI     SWI_OS_Byte
        LDR     r0, [r13, #20]
        LDR     r3, [r13, #0]            ; rows in field
nextrowro        
        SUB     r1, r0, #32              ; shift by 16 pixels
        MOV     r2, #(768 / (2 * 8) - 1) ; hops per row

nextcolro
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolro
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolro
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolro
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolro
        LDMDB   r1!, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BNE     nextcolro
endcolro
        LDR     r1, [r13, #8]
        LDMDB   r1, {r5-r12}
        STMDB   r0!, {r5-r12}
        SUB     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #8]
        SUBS    r3, r3, #1
        BNE     nextrowro
        LDR     r5, [r13, #24]
        ADD     r1, r1, r5
        SUB     r1, r1, #32
        STR     r1, [r13, #8]
        SUBS    r4, r4, #1
        BNE     morenextr

        LDR     r0, [r13, #16]
        LDR     r3, [r13, #0]            ; rows in field
lastrowr        
        SUB     r1, r0, #16              ; shift by 8 pixels last time
        MOV     r2, #(768 / (2 * 4) - 1) ; hops per row

lastcolr
        LDMDB   r1!, {r9-r12}
        STMDB   r0!, {r9-r12}
        SUBS    r2, r2, #1
        BNE     lastcolr
        LDR     r1, [r13, #12]
        LDMDB   r1, {r9-r12}
        STMDB   r0!, {r9-r12}
        SUB     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #12]
        SUBS    r3, r3, #1
        BNE     lastrowr

        LDMFD   r13!, {r4-r10}            ; Dump spare stuff off stack
        LDMFD   r13!, {r1-r12, pc}

; ********* Shift Left *************

        STARTCODE  shift_block_left

        STMFD   r13!, {r1-r12, lr}
        MOV     r2, r2, LSR #1
        MOV     r2, r2, LSL #1
        MOV     r5, #(200 * 2)
        MUL     r4, r5, r2
;        ADD     r4, r4, r5
        STMFD   r13!, {r4}               ; edge reset          #24
        STMFD   r13!, {r0}               ; even field start    #20
        STMFD   r13!, {r1}               ; odd  field start    #16
        STMFD   r13!, {r3}               ; even edge start     #12
        ADD     r3, r3, #(200 * 2)
        STMFD   r13!, {r3}               ; odd edge start      #8
        STMFD   r13!, {r2}               ; height              #4
        MOV     r2, r2, LSR #1
        STMFD   r13!, {r2}               ; half height         #0
;        MOV     r0, #19
;        SWI     SWI_OS_Byte

        LDR     r0, [r13, #20]
        LDR     r3, [r13, #0]            ; rows in field
firstrowl
        ADD     r1, r0, #16              ; shift by 8 pixels first time
        MOV     r2, #(768 / (2 * 4) - 1) ; hops per row

firstcoll
        LDMIA   r1!, {r9-r12}
        STMIA   r0!, {r9-r12}
        SUBS    r2, r2, #1
        BNE     firstcoll
        LDR     r1, [r13, #12]
        LDMIA   r1, {r9-r12}
        STMIA   r0!, {r9-r12}
        ADD     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #12]
        SUBS    r3, r3, #1
        BNE     firstrowl
        LDR     r5, [r13, #24]
        SUB     r1, r1, r5
        ADD     r1, r1, #16
        STR     r1, [r13, #12]

; main shift here...
        MOV     r4, #12

morenextl
;        MOV     r0, #19
;        SWI     SWI_OS_Byte
        LDR     r0, [r13, #16]
        LDR     r3, [r13, #0]            ; rows in field
nextrowle        
        ADD     r1, r0, #32              ; shift by 16 pixels
        MOV     r2, #(768 / (2 * 8) - 1) ; hops per row

nextcolle
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolle
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolle
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolle
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcolle
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BNE     nextcolle
endcolle
        LDR     r1, [r13, #8]
        LDMIA   r1, {r5-r12}
        STMIA   r0!, {r5-r12}
        ADD     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #8]
        SUBS    r3, r3, #1
        BNE     nextrowle

        LDR     r5, [r13, #24]
        SUB     r1, r1, r5
        ADD     r1, r1, #32
        STR     r1, [r13, #8]

;        MOV     r0, #19
;        SWI     SWI_OS_Byte
        LDR     r0, [r13, #20]
        LDR     r3, [r13, #0]            ; rows in field
nextrowlo        
        ADD     r1, r0, #32              ; shift by 16 pixels
        MOV     r2, #(768 / (2 * 8) - 1) ; hops per row

nextcollo
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcollo
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcollo
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcollo
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BEQ     endcollo
        LDMIA   r1!, {r5-r12}
        STMIA   r0!, {r5-r12}
        SUBS    r2, r2, #1
        BNE     nextcollo
endcollo
        LDR     r1, [r13, #12]
        LDMIA   r1, {r5-r12}
        STMIA   r0!, {r5-r12}
        ADD     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #12]
        SUBS    r3, r3, #1
        BNE     nextrowlo
        LDR     r5, [r13, #24]
        SUB     r1, r1, r5
        ADD     r1, r1, #32
        STR     r1, [r13, #12]
        SUBS    r4, r4, #1
        BNE     morenextl

        LDR     r0, [r13, #16]
        LDR     r3, [r13, #0]            ; rows in field
lastrowl        
        ADD     r1, r0, #16              ; shift by 8 pixels last time
        MOV     r2, #(768 / (2 * 4) - 1) ; hops per row

lastcoll
        LDMIA   r1!, {r9-r12}
        STMIA   r0!, {r9-r12}
        SUBS    r2, r2, #1
        BNE     lastcoll
        LDR     r1, [r13, #8]
        LDMIA   r1, {r9-r12}
        STMIA   r0!, {r9-r12}
        ADD     r1, r1, #(200 * 2 * 2)
        STR     r1, [r13, #8]
        SUBS    r3, r3, #1
        BNE     lastrowl

        LDMFD   r13!, {r4-r10}            ; Dump spare stuff off stack
        LDMFD   r13!, {r1-r12, pc}

        END
                