; Screen blitting routine

r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
r10             RN      10
r11             RN      11
r12             RN      12
r13             RN      13
r14             RN      14
r15             RN      15
sp              RN      13

        AREA    |C$$code|, CODE, READONLY

; in:
;  r0 -> start of sprite data (word aligned)
;  r1 -> start of screen data (word aligned)
;  r2 = row stride for sprite data (bytes, word multiple)
;  r3 = row stride for screen data (bytes, word multiple)
;  stack[0] = number of lines
;  stack[1] = number of 8 word chunks per line (i.e. pixels / 16 for 16bpp)
; out:
;  r0 -> start of src line after those copied
;  r1 -> start of dest line after those copied
;  All other regs preserved
;
; Working registers:-
;  r4 = number of lines
;  r5 = chunk countdown for this line
;  r6 = pointer to current place in sprite data
;  r7 = pointer to current place in screen data
;  r2, r3, r8, r9. r10, r11, r12, r14: eight words of pixel data

        EXPORT  copy_screen_fast

copy_screen_fast
        STMFD   r13!, {r2-r12,r14}
        LDR     r4, [sp, #12*4]                 ; number of lines
rowloop
        LDR     r5, [sp, #13*4]                 ; chunk countdown for this line
        MOV     r6, r0                          ; start of source line
        MOV     r7, r1                          ; start of dest line
chunkloop
        LDMIA   r6!, {r2,r3,r8-r12,r14}         ; transfer 8 words
        STMIA   r7!, {r2,r3,r8-r12,r14}
        SUBS    r5, r5, #1                      ; finished row?
        BNE     chunkloop

        LDMFD   r13, {r2,r3}
        ADD     r0, r0, r2                      ; address next line
        ADD     r1, r1, r3

        SUBS    r4, r4, #1                      ; finished raster?
        BNE     rowloop

        LDMFD   r13!, {r2-r12,r15}

; Copy one line of data, directly
;
; in -  r0 -> src line
;	r1 -> dest line
;	r2 = length of line (bytes) (must be a multiple of 8 words)
; out - All registers preserved

	EXPORT	copy_line_fast

copy_line_fast
        STMFD   r13!, {r0-r2,r6-r12,r14}
chunkloop2
        LDMIA   r0!, {r6-r12,r14}         	; transfer 8 words
        STMIA   r1!, {r6-r12,r14}
        SUBS    r2, r2, #8*4              	; finished row?
        BNE     chunkloop2

        LDMFD   r13!, {r0-r2,r6-r12,r15}

; Copy a line of 16bpp pixels from one block to another, using a
; 32-byte translation table to look up each of the R,G,B values
;
; in -  r0 -> src line
;       r1 -> dest line
;       r2 = length of line (bytes)
;       r3 -> translation table
; out - All registers preserved

	EXPORT	copy_line_trans

copy_line_trans
        STMFD   r13!, {r0-r12, r14}
        LDMIA   r0!, {r4-r7}
transloop
        AND     r8, r4, #31
        LDRB    r8, [r3, r8]
        AND     r14, r4, #31<<5
        LDRB    r14, [r3, r14, LSR #5]
        ORR     r8, r8, r14, LSL #5
        AND     r14, r4, #31<<10
        LDRB    r14, [r3, r14, LSR #10]
        ORR     r8, r8, r14, LSL #10
        AND     r14, r4, #31<<16
        LDRB    r14, [r3, r14, LSR #16]
        ORR     r8, r8, r14, LSL #16
        AND     r14, r4, #31<<21
        LDRB    r14, [r3, r14, LSR #21]
        ORR     r8, r8, r14, LSL #21
        AND     r14, r4, #31<<26
        LDRB    r14, [r3, r14, LSR #26]
        ORR     r8, r8, r14, LSL #26

        AND     r9, r5, #31
        LDRB    r9, [r3, r9]
        AND     r14, r5, #31<<5
        LDRB    r14, [r3, r14, LSR #5]
        ORR     r9, r9, r14, LSL #5
        AND     r14, r5, #31<<10
        LDRB    r14, [r3, r14, LSR #10]
        ORR     r9, r9, r14, LSL #10
        AND     r14, r5, #31<<16
        LDRB    r14, [r3, r14, LSR #16]
        ORR     r9, r9, r14, LSL #16
        AND     r14, r5, #31<<21
        LDRB    r14, [r3, r14, LSR #21]
        ORR     r9, r9, r14, LSL #21
        AND     r14, r5, #31<<26
        LDRB    r14, [r3, r14, LSR #26]
        ORR     r9, r9, r14, LSL #26

        AND     r10, r6, #31
        LDRB    r10, [r3, r10]
        AND     r14, r6, #31<<5
        LDRB    r14, [r3, r14, LSR #5]
        ORR     r10, r10, r14, LSL #5
        AND     r14, r6, #31<<10
        LDRB    r14, [r3, r14, LSR #10]
        ORR     r10, r10, r14, LSL #10
        AND     r14, r6, #31<<16
        LDRB    r14, [r3, r14, LSR #16]
        ORR     r10, r10, r14, LSL #16
        AND     r14, r6, #31<<21
        LDRB    r14, [r3, r14, LSR #21]
        ORR     r10, r10, r14, LSL #21
        AND     r14, r6, #31<<26
        LDRB    r14, [r3, r14, LSR #26]
        ORR     r10, r10, r14, LSL #26

        AND     r11, r7, #31
        LDRB    r11, [r3, r11]
        AND     r14, r7, #31<<5
        LDRB    r14, [r3, r14, LSR #5]
        ORR     r11, r11, r14, LSL #5
        AND     r14, r7, #31<<10
        LDRB    r14, [r3, r14, LSR #10]
        ORR     r11, r11, r14, LSL #10
        AND     r14, r7, #31<<16
        LDRB    r14, [r3, r14, LSR #16]
        ORR     r11, r11, r14, LSL #16
        AND     r14, r7, #31<<21
        LDRB    r14, [r3, r14, LSR #21]
        ORR     r11, r11, r14, LSL #21
        AND     r14, r7, #31<<26
        LDRB    r14, [r3, r14, LSR #26]
        ORR     r11, r11, r14, LSL #26

        SUBS    r2, r2, #16
        LDMNEIA r0!, {r4-r7}
        STMIA   r1!, {r8-r11}
        BNE     transloop
        LDMFD   r13!, {r0-r12, pc}

        END
