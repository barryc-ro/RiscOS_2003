/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !AudioCD.c.ButtonOps                                                        */
/*  DESCRIPTION:  Routines for dealing with button presses on the cd player.           */
/*  AUTHOR:  crose@omi.co.uk                                                           */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__

/*-------------------------------------------------------------------------------------*/
/*                         Inclusion of !AudioCD header files.                         */
/*-------------------------------------------------------------------------------------*/

#include "ButtonOps.h"
#include "Common.h"
#include "DriveOps.h"
#include "Display.h"

#ifdef DEVELOPMENT__
  #include "Memory.h"
#endif

/*-------------------------------------------------------------------------------------*/
/*                        Inclusion of standard C header files.                        */
/*-------------------------------------------------------------------------------------*/

#include "time.h"

#if defined (DEVELOPMENT__) || defined(MEMORY_TRACE__) ||defined (FN_TRACE__)
    #include "stdio.h"
#endif

#include "swicall.h"

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Play()                                                                  */
/*  BEHAVIOUR:  Begins playing whatever the current track is and updates the screen    */
/*              display buttons accordingly.  Apart from some minor button activity as */
/*              some form of response to the user, the play request is ignored if the  */
/*              current track number is invalid.                                       */
/*  REQUIRES:   - 'first_track', which is the first track number on the cd.            */
/*              - 'last_track', which is the last track number on the cd.              */
/*              - 'paused', which indicates whether or not the cd player is in a       */
/*                 paused state of play.                                               */
/*              - 'paused_on_track_n', which holds the number of the track which was   */
/*                 playing when the pause button was last pressed (allowing for the    */
/*                 possibility of the user changing tracks whilst the paused button is */
/*                 down).                                                              */
/*              - 'help_state', which is ON__ or OFF__.  If the help screen is         */
/*                 currently on display we don't want to overwrite it with button      */
/*                 updates.  If help_state is OFF__ it is ok to update the on screen   */
/*                 button displays.                                                    */
/*              - 'play_type', which must be PLAY_TO_END_OF_CD__ or                    */
/*                 PLAY_TO_END_OF_TRACK__ as defined in common.h.                      */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Play(int first_track,int last_track,int *paused,int paused_on_track_n,
       int  help_state,int play_type)
{
 time_t start_time;              /* Used to ensure that the play button stays down for */
                                 /* a reasonable amount of time in the event of a      */
                                 /* rejection (current track not valid) as there       */
                                 /* should be some form of response to the user, even  */
                                 /* if the play request cannot be carried out.         */
 extern int playing;
 extern char *cd_blk;
 extern int current_track;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
     puts("Play()");
   #endif

   start_time = time(NULL);         /* Start the clock.                                */

   PlotButton("play1",help_state);  /* Light up the play button.                       */
   PlotButton("pause0",help_state); /* Ensure that the remaining buttons are now       */
   PlotButton("stop0",help_state);  /* compatible with being in a state of play.       */
   PlotButton("eject0",help_state);
   PlotButton("back0",help_state);
   PlotButton("forward0",help_state);

   do {                                        /* Ensure that in the event of a play   */
   } while ((time(NULL) - start_time) < 1);    /* failure (below), the play button has */
                                               /* been displayed for at least a sec.   */

   if (current_track < first_track || current_track > last_track)
   {
       ErrorHandler(__FILE__,__LINE__,"Play()",0,
                    "Attempt at playing invalid track number.",WARNING__);
       Stop(&(*paused),first_track,last_track,paused_on_track_n,help_state,play_type);
       PlotButton("play0",help_state);
       playing = FALSE__;
   }
   else
   {
      if (*paused)
          Unpause(&(*paused),paused_on_track_n,first_track,last_track,help_state,
                  play_type);

      if ((play_type != PLAY_TO_END_OF_CD__) && (play_type != PLAY_TO_END_OF_TRACK__))
      {
           ErrorHandler(__FILE__,__LINE__,"Play()",0,
           "Play to end of track or cd?  Not specified.  Assuming play to end of cd.",
           WARNING__);
           play_type = PLAY_TO_END_OF_CD__;
      }

      if ((err = swi(CD_PlayTrack,R0,current_track,R1,play_type,R7,cd_blk,
           END)) != NULL)
            ErrorHandler(__FILE__,__LINE__,"Play()",err->errnum,err->errmess,FATAL__);

      playing = TRUE__;
   }
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Stop()                                                                  */
/*  BEHAVIOUR: Stops play, and cancels pause if in a paused state.  The user will      */
/*             always receive some form of feedback when Stop() is called.             */
/*  REQUIRES:   - 'paused', which indicates whether or not the cd player is in a       */
/*                 paused state of play.                                               */
/*              - 'first_track', which is the first track number on the cd.            */
/*              - 'last_track', which is the last track number on the cd.              */
/*              - 'paused_on_track_n', which holds the number of the track which was   */
/*                 playing when the pause button was last pressed (allowing for the    */
/*                 possibility of the user changing tracks while the paused button is  */
/*                 down).                                                              */
/*              - 'help_state', which is ON__ or OFF__.  (If the help screen is        */
/*                 currently on display we don't want to overwrite it with button      */
/*                 updates).                                                           */
/*              - 'play_type', which must be PLAY_TO_END_OF_CD__ or                    */
/*                 PLAY_TO_END_OF_TRACK__ as defined in common.h.                      */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void Stop(int *paused,int first_track,int last_track,int paused_on_track_n,
  int help_state,int play_type)
{
 time_t start_time;            /* Used to ensure that the stop button stays on for a   */
                               /* reasonable amount of time before going off.          */
                               /* Otherwise, the button press shown on screen may be   */
                               /* too quick for the user to see.                       */
 extern int playing;
 extern int current_track;
 extern char *cd_blk;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
      puts("Stop()");
   #endif


   start_time = time(NULL);    /* Start the clock.                                     */

   PlotButton("stop1",help_state);        /* Turn on the stop button.                  */

   if (playing)
   {
       /* Turn off the play button and stop play.                                      */

       PlotButton("play0",help_state);
       if ((err = swi (CD_StopDisc,R7,cd_blk,END)) != NULL)
            ErrorHandler(__FILE__,__LINE__,"Stop()",err->errnum,err->errmess,FATAL__);
       playing = FALSE__;
   }

   if (paused)
       Unpause(&(*paused),paused_on_track_n,first_track,last_track,help_state,
                  play_type);

   DisplayText(current_track,0,help_state,FALSE__);

   do {                                        /* Ensure that the stop button has been */
   } while ( (time(NULL) - start_time) < 2);   /* illuminated for at least two secs.   */


   PlotButton("stop0",help_state);  /* Release the stop button now that everything has */
                                    /* stopped.                                        */

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Unpause()                                                               */
/*  BEHAVIOUR: Turns off the on-screen pause button.  If the cd player was in a state  */
/*             of play immediately prior to the pause, play resumes at the point at    */
/*             which it left off, or it resumes at the start of the track if the user  */
/*             changed tracks whilst the pause button was on.                          */
/*  REQUIRES:   - 'paused', which indicates whether or not the cd player is in a       */
/*                 paused state of play.                                               */
/*              - 'paused_on_track_n', which holds the number of the track which was   */
/*                 playing when the pause button was last pressed (allowing for the    */
/*                 possibility of the user changing tracks while the paused button is  */
/*                 down).                                                              */
/*              - 'first_track', which is the first track number on the cd.            */
/*              - 'last_track', which is the last track number on the cd.              */
/*              - 'help_state', which is ON__ or OFF__.  (If the help screen is        */
/*                 currently on display we don't want to overwrite it with button      */
/*                 updates).                                                           */
/*              - 'play_type', which must be PLAY_TO_END_OF_CD__ or                    */
/*                 PLAY_TO_END_OF_TRACK__ as defined in common.h.                      */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Unpause(int *paused,int paused_on_track_n,int first_track,int last_track,
       int help_state,int play_type)
{
 extern int playing;
 extern int current_track;
 extern char *cd_blk;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
      puts("Unpause()");
   #endif

   PlotButton("pause0",help_state);

   if ((*paused == TRUE__) && (playing == TRUE__) && (paused_on_track_n == current_track))
   {
       if ((err = swi (CD_AudioPause,R0,0,R7,cd_blk,END)) != NULL)
            ErrorHandler(__FILE__,__LINE__,"Unpause()",err->errnum,err->errmess,FATAL__);

       PlotButton("play1",help_state);
   }
   else if ((*paused == TRUE__) && (playing == TRUE__) && (paused_on_track_n != current_track))
        {
            /*
               Start playing at the start of whatever the current track is.   There has
               been a track change whilst pause was on.
            */

               *paused = FALSE__;
               Play(first_track,last_track,&(*paused),paused_on_track_n,help_state,
                    play_type);
               PlotButton("play1",help_state);
        }

   *paused = FALSE__;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Pause()                                                                 */
/*  BEHAVIOUR: Pauses play.  Regardless of whether or not the player is actually in a  */
/*             state of play, the pause button remains on until either the pause       */
/*             button is pressed again or the play button is pressed, or the eject or  */
/*             stop buttons are pressed.                                               */
/*  REQUIRES:  - 'paused', which indicates whether or not the cd player is in a        */
/*                paused state of play.                                                */
/*             - 'paused_on_track_n', which holds the number of the track which was    */
/*                playing when the pause button was last pressed (allowing for the     */
/*                possibility of the user changing tracks while the paused button is   */
/*                down).                                                               */
/*             - 'help_state', which is ON__ or OFF__.  (If the help screen is         */
/*                currently on display we don't want to overwrite it with button       */
/*                updates).                                                            */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Pause(int *paused,int *paused_on_track_n,int help_state)
{
 extern int playing;
 extern int current_track;
 extern char *cd_blk;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
      puts("Pause()");
   #endif

   PlotButton("pause1",help_state);

   if ((!(*paused)) && playing)
         if ((err = swi (CD_AudioPause,R0,1,R7,cd_blk,END)) != NULL)
              ErrorHandler(__FILE__,__LINE__,"Pause()",err->errnum,err->errmess,FATAL__);

   *paused_on_track_n = current_track;

   *paused = TRUE__;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Forward()                                                               */
/*  BEHAVIOUR: Moves to the next track if the current track is not the last track on   */
/*             the cd.  Displays the forward button press for at least a second (if    */
/*             there is a next track to move to).  If this function is called whilst   */
/*             in a paused state, the above applies but the paused state remains.      */
/*             Any other button press will cancel the pause.                           */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Forward(int total_tracks,int paused,int help_state)
{
 time_t start_time;
 extern int playing;
 extern int current_track;
 extern char *cd_blk;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
      puts("Forward()");
   #endif

   start_time = time(NULL);

   if (current_track < total_tracks)
   {
       PlotButton("forward1",help_state);
       current_track++;

       if (playing && (!paused))
           if ((err = swi (CD_PlayTrack,R0,current_track,R1,PLAY_TO_END_OF_CD__,R7,
                cd_blk,END)) != NULL)
                 ErrorHandler(__FILE__,__LINE__,"Forward()",err->errnum,err->errmess,
                 FATAL__);

       GoToTrackN(current_track,total_tracks,paused,help_state);

       do {
       }while ( (time(NULL) - start_time) < 1 );

       PlotButton("forward0",help_state);
   }
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Back()                                                                  */
/*  BEHAVIOUR: Moves to the previous track if the current track is not the first track */
/*             on the cd.  Displays the back button press for at least a second (if    */
/*             there is a previous track to move to).  If this function is called      */
/*             whilst in a paused state, the above applies but the paused state        */
/*             remains.  (Any other button press will cancel the pause).               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Back(int first_track,int total_tracks,int paused,int help_state)
{
 time_t start_time;
 extern int playing;
 extern int current_track;
 extern char *cd_blk;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
      puts("Back()");
   #endif

   start_time = time(NULL);

   if (current_track > first_track)
   {
       PlotButton("back1",help_state);
       current_track--;

       if (playing && (!paused))
           if ((err = swi (CD_PlayTrack,R0,current_track,R1,PLAY_TO_END_OF_CD__,R7,
                cd_blk,END)) != NULL)
                  ErrorHandler(__FILE__,__LINE__,"Back()",err->errnum,err->errmess,
                  FATAL__);

       GoToTrackN(current_track,total_tracks,paused,help_state);

       do {
       }while ( (time(NULL) - start_time) < 1 );

       PlotButton("back0",help_state);
   }
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Eject()                                                                 */
/*  BEHAVIOUR: Ejects the cd from the drive.  Ensures that the eject button is         */
/*             displayed for at least a second.                                        */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Eject(int *paused,int first_track,int last_track,
                  int paused_on_track_n,int help_state,int play_type)
{
 time_t start_time;
 extern int playing;
 extern char *cd_blk;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
      puts("Eject()");
   #endif

   if (playing)
       Stop(&(*paused),first_track,last_track,paused_on_track_n,help_state,play_type);

   start_time = time(NULL);

   PlotButton("eject1",help_state);

   if ((err = swi (CD_OpenDrawer,R7,cd_blk,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"Eject()",err->errnum,err->errmess,FATAL__);

   do {
   } while ( (time(NULL) - start_time) < 1 );

   PlotButton("eject0",help_state);

   Finish();

}


