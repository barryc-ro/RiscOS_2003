/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !AudioCD.c.Display                                                          */
/*  DESCRIPTION:                                                                       */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__

/*-------------------------------------------------------------------------------------*/
/*                       Inclusion of !AudioCD header files.                           */
/*-------------------------------------------------------------------------------------*/

#include "Display.h"
#include "Common.h"
#include "DriveOps.h"
#include "Main.h"
#include "ButtonOps.h"

/*-------------------------------------------------------------------------------------*/
/*                        Inclusion of standard C header files.                        */
/*-------------------------------------------------------------------------------------*/

#if defined(DEVELOPMENT__) || defined(MEMORY_TRACE__) || defined(FN_TRACE__)
   #include "stdlib.h"
#endif

#include "stdio.h"
#include "string.h"
#include "time.h"

/*-------------------------------------------------------------------------------------*/
/*   Inclusion of SWI interface header.  Allows constructs of the type                 */
/*   err = swi(Wimp_Initialise,R0,310,R1,0x4B534154,R2,NULL,R3,msg_list,OUT,R1,        */
/*   &cd_task_handle,END);                                                             */
/*-------------------------------------------------------------------------------------*/

#include "swicall.h"

/*-------------------------------------------------------------------------------------*/
/*                          Internal Function Prototypes.                              */
/*-------------------------------------------------------------------------------------*/
static void TrackChangeCheck(int current_time_pos,int total_tracks,int *count);


/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:   DisplayText()                                                          */
/*  BEHAVIOUR:  Used to update the on-screen cd player counter display.                */
/*  REQUIRES:   - 'left', which should be the track number to display.                 */
/*              - 'right', which should be the elapsed time from the start of the      */
/*                 current track.                                                      */
/*              - 'help_state', which is ON or OFF depending upon whether the help     */
/*                 information screen display is currently visible.                    */
/*              This function does not check to see if the values passed into it are   */
/*              valid.  (That is done elsewhere).                                      */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void DisplayText(int left,int right,int help_state,int force_update)
{
 char *left_str = NULL;
 char *right_str = NULL;
 int handle;
 int mm,ss;
 int xeig,yeig;
 _kernel_oserror *err = NULL;
 extern int current_left;
 extern int current_right;
 extern int track_text_area_x1;
 extern int track_text_area_y1;
 extern int time_text_area_x1;
 extern int time_text_area_y1;
 extern char *counter_display_shadowsprite;
 int oldscb,oldsptr,oldsa;

   #ifdef FN_TRACE__
     puts("DisplayText()");
   #endif

   if (help_state == ON__)
   {
       current_left = left;
       current_right = right;
       return;
   }

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,4,OUT,R2,&xeig,END))!=NULL)
        goto fatal_error_exit;

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,5,OUT,R2,&yeig,END))!=NULL)
        goto fatal_error_exit;

   if ((left_str = malloc(10)) == NULL)
        goto insufficient_memory_exit;

   if ((right_str = malloc(10)) == NULL)
        goto insufficient_memory_exit;

   sprintf(left_str,"%d",left);

   if (strlen(left_str) > 10)
       goto array_bounds_exit;

   mm = right/60;
   ss = right % 60;
   sprintf(right_str,"%02d : %02d",mm,ss);

   if (strlen(right_str) > 10)
       goto array_bounds_exit;

   if ((err = swi (ColourTrans_SetGCOL,R0,0,END)) != NULL)
        goto fatal_error_exit;

   if ((left != current_left) || (force_update == TRUE__))
   {
       if ((err = swi(OS_SpriteOp,R0,512+60,R1,counter_display_shadowsprite,R2,
            (int)counter_display_shadowsprite+16,R3,0,OUT,R1,&oldscb,R2,&oldsptr,
            R3,&oldsa,END)) != NULL)
             goto fatal_error_exit;


       if ((err = swi (Font_FindFont,R1,"Homerton.Bold.Oblique",R2,25*16,R3,25*16,
            R4,0,R5,0,OUT,R0,&handle,END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi(Font_SetFont,R0,handle,END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi(ColourTrans_SetFontColours,R0,handle,R1,0,R2,0x0C89FF00,
            R3,14,END)) != NULL)
             goto fatal_error_exit;

       /* Ensure that characters are printed at the current text cursor position using */
       /* the current text foreground and background colours.                          */
       if ((err = swi(OS_WriteC,R0,4,END))!=NULL)
            goto fatal_error_exit;

       /* R0 4 :- move to absolute coordinates given in R1 and R2 (PRM p.1-607).       */
       if ((err = swi(OS_Plot,R0,4,R1,1<<xeig,R2,0<<yeig,END))!=NULL)
            goto fatal_error_exit;

       /* R0 7 :- plot absolute using current background colour.                       */
       if ((err = swi(OS_Plot,R0,7,R1,100<<xeig,R2,28<<yeig,END))!=NULL)
            goto fatal_error_exit;

       if ((err = swi(Font_Paint,R0,handle,R1,left_str,R2,786,R3,1<<xeig,R4,1<<yeig,
            END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi(Font_LoseFont,R0,handle,END)) != NULL)
            goto fatal_error_exit;

       if ((err = swi(OS_SpriteOp,R0,512+60,R1,oldscb,R2,oldsptr,R3,oldsa,END)) != NULL)
            goto fatal_error_exit;

       if ((err = swi(OS_Plot,R0,4,R1,track_text_area_x1<<xeig,R2,track_text_area_y1
            <<yeig,END))!=NULL)
             goto fatal_error_exit;

       if ((err = swi(OS_SpriteOp,R0,512+28,R1,counter_display_shadowsprite,R2,
            counter_display_shadowsprite+16,R5,0,END)) != NULL)
             goto fatal_error_exit;

       current_left = left;

   }

   if ((right != current_right) || (force_update == TRUE__))
   {

       if ((err = swi(OS_SpriteOp,R0,512+60,R1,counter_display_shadowsprite,R2,
            (int)counter_display_shadowsprite+16,R3,0,OUT,R1,&oldscb,R2,&oldsptr,
            R3,&oldsa,END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi (Font_FindFont,R1,"Homerton.Bold.Oblique",R2,25*16,R3,25*16,
            R4,0,R5,0,OUT,R0,&handle,END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi(Font_SetFont,R0,handle,END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi(ColourTrans_SetFontColours,R0,handle,R1,0,R2,0x0C89FF00,
            R3,14,END)) != NULL)
             goto fatal_error_exit;

       /* Ensure that characters are printed at the current text cursor position using */
       /* the current text foreground and background colours.                          */

       if ((err = swi(OS_WriteC,R0,4,END))!=NULL)
            goto fatal_error_exit;

       /* Set up rub out box coordinates.                                              */

       if ((err = swi(OS_Plot,R0,4,R1,1<<xeig,R2,1<<yeig,END))!=NULL)
            goto fatal_error_exit;

       if ((err = swi(OS_Plot,R0,7,R1,100<<xeig,R2,26<<yeig,END))!=NULL)
            goto fatal_error_exit;

       /* Enable flicker free drawing to be done while the VDU is not being written    */
       /* to, i.e. drawing will be done while the electron beam is on it's way back to */
       /* the top of the screen.                                                       */

       if ((err = swi(OS_Byte,R0,14,END)) != NULL)
            ErrorHandler(__FILE__,__LINE__,"DisplayText()",err->errnum,err->errmess,
            WARNING__);

       if ((err = swi(Font_Paint,R0,handle,R1,right_str,R2,786,R3,1<<xeig,R4,1<<yeig,
            END)) != NULL)
             goto fatal_error_exit;

       if ((err = swi(Font_LoseFont,R0,handle,END)) != NULL)
            goto fatal_error_exit;

       if ((err = swi(OS_SpriteOp,R0,512+60,R1,oldscb,R2,oldsptr,R3,oldsa,END)) != NULL)
            goto fatal_error_exit;

       if ((err = swi(OS_Plot,R0,4,R1,time_text_area_x1<<xeig,R2,time_text_area_y1<<yeig,
            END))!=NULL)
             goto fatal_error_exit;

       if ((err = swi(OS_SpriteOp,R0,512+28,R1,counter_display_shadowsprite,R2,
            counter_display_shadowsprite+16,R5,0,END)) != NULL)
             goto fatal_error_exit;

       current_right = right;

   }

   free(left_str);
   free(right_str);
   return;

   array_bounds_exit:
     if (left_str != NULL)  free(left_str);
     if (right_str != NULL) free(right_str);
     ErrorHandler(__FILE__,__LINE__,"DisplayText()",0,"Insufficient Memory.",FATAL__);
     return;  /* Redundant but included for clarity. */

   insufficient_memory_exit:
     if (left_str != NULL)  free(left_str);
     if (right_str != NULL) free(right_str);
     ErrorHandler(__FILE__,__LINE__,"DisplayText()",0,"Insufficient Memory.",FATAL__);
     return;  /* Redundant but included for clarity. */

   fatal_error_exit:
     if (left_str != NULL)  free(left_str);
     if (right_str != NULL) free(right_str);
     ErrorHandler(__FILE__,__LINE__,"DisplayText()",err->errnum,err->errmess,FATAL__);
     return;  /* Redundant but included for clarity. */

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  PlotButton()                                                            */
/*  BEHAVIOUR:                                                                         */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void PlotButton(char *name,int help_state)
{
 int *scale;
 int original_width;
 int original_height;
 int x1,x2;
 int xeig,yeig;
 int scrstart;
 int vdublk[2];
 int linelen;
 int xres,yres;
 int twitter_width;
 int twitter_height;
 _kernel_oserror *err = NULL;
 extern int eject_x1;
 extern int eject_x2;
 extern int stop_x1;
 extern int stop_x2;
 extern int pause_x1;
 extern int pause_x2;
 extern int back_x1;
 extern int back_x2;
 extern int play_x1;
 extern int play_x2;
 extern int forward_x1;
 extern int forward_x2;
 extern int button_high_y;
 extern int button_low_y;
 extern char *buttons_sprarea;
 #define STBFilter_FilterArea 0x84000

   #ifdef FN_TRACE__
     puts("PlotButton()");
   #endif

   if (help_state == ON__)
       return;

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,4,OUT,R2,&xeig,END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,
        FATAL__);

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,5,OUT,R2,&yeig,END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,
        FATAL__);

     if ((strcmp(name,"eject0") == NULL) || (strcmp(name,"eject1") == NULL))
     {
          x1 = eject_x1;
          x2 = eject_x2;
     }
     else
     if ((strcmp(name,"stop0") == NULL) || (strcmp(name, "stop1") == NULL))
     {
          x1 = stop_x1;
          x2 = stop_x2;
     }
     else
     if ((strcmp(name,"pause0") == NULL) || (strcmp(name,"pause1") == NULL))
     {
          x1 = pause_x1;
          x2 = pause_x2;
     }
     else
     if ((strcmp(name,"back0") == NULL) || (strcmp(name,"back1") == NULL))
     {
          x1 = back_x1;
          x2 = back_x2;
     }
     else
     if ((strcmp(name,"play0") == NULL) || (strcmp(name,"play1") == NULL))
     {
          x1 = play_x1;
          x2 = play_x2;
     }
     else
     if ((strcmp(name,"forward0") == NULL) || (strcmp(name,"forward1") == NULL))
     {
          x1 = forward_x1;
          x2 = forward_x2;
     }

     if ((err = swi (OS_SpriteOp,R0,256+40,R1,buttons_sprarea,R2,name,OUT,
          R3,&original_width,R4,&original_height,END))!=NULL)
           ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);

     if ((scale = malloc(16)) == NULL)
          ErrorHandler(__FILE__,__LINE__,"PlotButton()",0,"Insufficient Memory.",FATAL__);

     *scale = x2 - x1;
     *(scale + 1) = (button_high_y - button_low_y);
     *(scale + 2) = original_width;
     *(scale + 3) = original_height;

     /* Anti-twitter preparation.                                                      */
     vdublk[0] = 148;
     vdublk[1] = -1;
     if ((err = swi(OS_ReadVduVariables,R0,vdublk,R1,vdublk,END)) != NULL)
          ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);
     scrstart = vdublk[0];

     if ((err = swi(OS_ReadModeVariable,R0,-1,R1,6,OUT,R2,&linelen,END)) != NULL)
          ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);

     if ((err = swi(OS_ReadModeVariable,R0,-1,R1,11,OUT,R2,&xres,END)) != NULL)
          ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);

     if ((err = swi(OS_ReadModeVariable,R0,-1,R1,12,OUT,R2,&yres,END)) != NULL)
          ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);

     xres++;  yres++;

     twitter_width = x2 - x1;
     if ((twitter_width % 2) != 0)
          twitter_width--;

     twitter_height = button_high_y - button_low_y + 1 + 5;

     if ((err = swi (OS_SpriteOp,R0,256+52,R1,buttons_sprarea,R2,name,R3,
          x1<<xeig,R4,button_low_y<<yeig,R5,8,R6,scale,R7,0,END)) != NULL)
           ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);

     #ifdef OLD_TWITTER
     if ((err = swi(STBFilter_FilterArea,R0,scrstart,R1,linelen,R2,xres,R3,yres,R4,x1,
          R5,button_low_y - 5,R6,twitter_width,R7,twitter_height,END)) != NULL)
            ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);
     #endif

     #ifdef NEW_TWITTER
     if ((err = swi(STBFilter_FilterArea,
                    R0,scrstart+(yres-1-((button_low_y-5)+twitter_height))*linelen+x1*2,
                    R1,scrstart+(yres-1-((button_low_y-5)+twitter_height))*linelen+x1*2,
                    R4,linelen,R5,twitter_width,R6,4,END)) != NULL)
           ErrorHandler(__FILE__,__LINE__,"PlotButton()",err->errnum,err->errmess,FATAL__);
     #endif

     free(scale);

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:   Counter()                                                              */
/*  BEHAVIOUR: */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Counter(int total_tracks,int *paused,int *count,int total_secs,
                    int paused_on_track_n,int first_track,int last_track,int help_state,
                    int play_type)
{
 int current_time_pos;
 int seconds;
 extern int *start_times;
 extern int *end_times;
 extern int current_track;

   #ifdef FN_TRACE__
     puts("Counter()");
   #endif

  /* The user could be changing tracks while the paused button is on, therefore        */
  /* changing the value of current track without actually seeking to that track        */
  /* position on the cd since play hasn't started yet.  Without the if not paused, the */
  /* current track  would keep getting reset back to the current position of the head. */

   if (!(*paused))
   {
       current_time_pos = GetHeadAddress(RED_BOOK_ADDRESSING__);
       TrackChangeCheck(current_time_pos,total_tracks,&(*count));

       seconds = (SECONDS__(current_time_pos)) - (SECONDS__(start_times[current_track]))
                  - 2;

       if ((seconds > *count) && (seconds < (end_times[current_track] -
            start_times[current_track])))
       {
              DisplayText(current_track,seconds,help_state,FALSE__);
       }
   }

   /* If reached the end of the cd, display the stop button for a second or so and     */
   /* reset the counter display to zero minutes and zero seconds.  The not paused      */
   /* condition is necessary because without it, *whenever* the user pauses pause, it  */
   /* results in this code being executed as if the end of the cd has been reached.    */
   /* This seems to be as a result of the head doing things I don't understand whilst  */
   /* in a paused state.                                                               */

   if ((SECONDS__(current_time_pos) >= total_secs) && (!(*paused)))
       Stop(&(*paused),first_track,last_track,paused_on_track_n,help_state,play_type);

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:   TrackChangeCheck()                                                     */
/*  BEHAVIOUR: */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void TrackChangeCheck(int current_time_pos,int total_tracks,int *count)
{
 extern int *end_times;
 extern int current_track;

   #ifdef FN_TRACE__
     puts("TrackChangeCheck()");
   #endif

   if (current_time_pos >= end_times[current_track])
   {
       if (current_track < total_tracks)
       {
           current_track++;
           *count = -1;
       }
   }
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:   ReadDigitSequence()                                                    */
/*  BEHAVIOUR: */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern int ReadDigitSequence(char key,char empty,int first_track,int last_track,
                             int paused,int paused_on_track_n,int playing,
                             int total_tracks,int help_state,int play_type)
{
 int digit1,digit2,result;
 char result_str[20];
 char buffer[20];
 time_t start_time;
 extern int current_track;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
     puts("ReadDigitSequence()");
   #endif

   if (key != '1' && key != '2' && key != '3' && key != '4' && key != '5' &&
            key != '6' && key != '7' && key != '8' && key != '9' && key != '0')
   {
       result = -1;
   }
   else
   {
         digit1 = atoi(&key);

         /* Some immediate response is needed for the user.    */
         DisplayText(digit1,0,help_state,FALSE__);

         if ((err = swi(OS_Byte,R0,15,R1,1,END)) != NULL)
             ErrorHandler(__FILE__,__LINE__,"ReadDigitSequence()",err->errnum,
             err->errmess,WARNING__);

        start_time = time(NULL);
        key = empty;

        /* Give the user 2 seconds to enter a second digit.                            */

        while (((time(NULL) - start_time) < 2)  && (key == empty))
                 key = Poll(empty);

        if (key == '1' || key == '2' || key == '3' || key == '4' || key == '5' ||
            key == '6' || key == '7' || key == '8' || key == '9' || key == '0')
        {
            digit2 = atoi(&key);
        }
        else
        {
            digit2 = -1;
        }

        if ((digit1 < 10) && (digit1 >= 0))
             sprintf(result_str,"%d",digit1);

        if ((digit2 < 10) && (digit2 >= 0))
        {
             sprintf(buffer,"%d",digit2);
             strcat(result_str,buffer);
        }

        result = atoi(result_str);

        if ((result > total_tracks) || (result <= 0))
        {
             DisplayText(result,0,help_state,FALSE__);
             result = -1;
        }

   }

   if (result == -1)
   {
       if (playing == TRUE__)
       {
           Play(first_track,last_track,&paused,paused_on_track_n,help_state,play_type);
       }
       else
       {
         /* Give user time to see the invalid track number display.                   */
            start_time = time(NULL);
            while ((time(NULL) - start_time) < 3);
            DisplayText(current_track,0,help_state,FALSE__);
       }
   }
   else
   {
       DisplayText(result,0,help_state,FALSE__);
   }

   return result;
}


