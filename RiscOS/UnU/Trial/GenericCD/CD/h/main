/*=====================================================================================*/
/*                                                                                     */
/*  FILE: !cd.h.main                                                                   */
/*  DESCRIPTION:  Acts as a central controlling mechanism continuously monitoring the  */
/*                state of the cd drive.  Launches the appropriate cd application if a */
/*                known cd type is detected in the drive, and initiates closure of     */
/*                that application upon detecting that the disc has been ejected.      */
/*  AUTHOR: crose@omi.co.uk                                                            */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#include "common.h"
#include "stdlib.h"  /* Contains NULL definition.                                      */

#define TRAY_IN 1
#define TRAY_OUT 2

/*-------------------------------------------------------------------------------------*/
/*                                 Function Prototypes.                                */
/*-------------------------------------------------------------------------------------*/

                            /* -- EXTERNAL FUNCTIONS -- */


extern void RejectCD(int reason);

/*
   !cd is unable to identify the type of cd present in the drive, or the cd has been
   found to be faulty.  Eject it so that !cd doesn't keep on detecting that an unknown
   or faulty cd is present and continuously tries to deal with it.  Ejecting the cd and
   updating 'wait_for_ack' will result in the return of the splash screen.  'wait_for_ack'
   indicates that we don't have to wait for the new task to send an I am alive or an I am
   dying message, seeing as it didn't start up in the first place.   If the cd drive is
   locked, it will get unlocked.  Appropriate feedback is given to the user as to
   why the cd was ejected.
*/

extern void Eject(void);

/*
    Ejects the cd from the drive.  An eject() request overides the possibility of the
    drive being locked.
*/


