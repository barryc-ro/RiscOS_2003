/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !cd.c.init                                                                  */
/*  DESCRIPTION:  Low level initialisation routines used by Initialise() in main.c     */
/*  AUTHOR:  crose@omi.co.uk                                                           */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#include "common.h"    /* !cd common header file.                                      */
#include "init.h"
#include "stdio.h"     /* Standard C library header file.                              */
#include "signal.h"
#include "swicall.h"   /* Allows constructs of the type err = swi(Wimp_Initialise,R0,  */
                       /* 310,R1,0x4B534154,R2,NULL,R3,msg_list,OUT,R1,&cd_task_handle,*/
                       /* END);                                                        */

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Signals()                                                               */
/*  BEHAVIOUR: !cd should trap *all* errors.  Executing this function as part of the   */
/*              initialisation sequence means that when certain errors occur which     */
/*              would not normally be trapped by !cd, !cd's SignalCatcher() function   */
/*              in main.c will get a look in and be able to handle them instead.       */
/*              These types of errors include division by zero, bad memory access, and */
/*              so on.  This functionality was tested by deliberately incorporating    */
/*              "int a = 3/0;" into display.c.  !cd was successful in catching the     */
/*              error via use of this code.  Refer PRM p.4-302 and Horspool's C        */
/*              programming book p. 173 for further info.                              */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Signals(void)
{
 int i;
 int signal_list[] = { SIGABRT, SIGFPE,
                       SIGILL,  SIGINT,
                       SIGSEGV, SIGTERM,
                       SIGSTAK, SIGUSR1,
                       SIGUSR2, SIGOSERROR};

   #ifdef FN_TRACE
     puts("Signals()");
   #endif

   for (i = 0; i < 10; signal(signal_list[i],SignalCatcher),i++);
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  InitCDFSDriverSWIS()                                                    */
/*  BEHAVIOUR: Sets up a CDFS control block, necessary for being able to access the cd */
/*             drive using any of the CDFS Driver SWI's.  The block is created as a    */
/*             dynamic memory area.  This allows any task launched by !cd access to    */
/*             the CDFS Driver SWI's using the same block of memory.                   */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void InitCDFSDriverSWIS(void)
{
 char command[30];     /* A system variable is created to hold the area id of the      */
                       /* dynamic memory area mentioned above.  Other tasks then have  */
                       /* access to the CDFS block via this system variable.           */
                       /* 'command' holds the string for creating and setting this     */
                       /* system variable.                                             */
 int driveno;          /* 'driveno' holds the cd drive's physical drive number,        */
                       /* necessary for setting up the CDFS control block mentioned    */
                       /* above.                                                       */
 _kernel_oserror *err; /* Error handling pointer for SWI calls.                        */
 extern int cd_blk_id; /* Holds the area number for the dynamic memory area above.     */
 extern char *cd_blk;  /* Points to the base of the dynamic memory area above.  Used   */
                       /* throughout !cd to access the cd drive using the CDFS SWI's.  */

   #ifdef FN_TRACE
     puts("InitCDFSDriverSWIS()");
   #endif

   /* Allocate memory for the CDFS control block. */

   if ((err = swi(OS_DynamicArea,R0,0,R1,-1,R2,5*4,R3,-1,R4,0,R5,5*4,R6,0,R7,0,R8,
        "cd_blk",OUT,R1,&cd_blk_id,R3,&cd_blk,END)) != NULL)
           ErrorHandler(__FILE__,__LINE__,"InitCDFSDriverSWIS()",err->errnum,err->errmess,
           FATAL);

   /* Convert the cd drive's logical number to a physical drive number.  R0 assumes    */
   /* that the logical number will always be zero.                                     */

   if ((err = swi(CDFS_ConvertDriveToDevice,R0,0,OUT,R1,&driveno,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"InitCDFSDriverSWIS()",err->errnum,err->errmess,
        FATAL);

   /* Copy the returned physical drive number into the CDFS control block.  Certain    */
   /* bits of the control block must be initialised to zero.  Both are achieved by     */
   /* the following.   Note that there is some documentation which wrongly states that */
   /* word 0, i.e. *cd_blk, should be (driveno AND 8).  It should instead be (driveno  */
   /* AND 7).                                                                          */

   *cd_blk = driveno && 7;
   *(cd_blk + 4) = (driveno && 0x18) >> 3;
   *(cd_blk + 8) = (driveno && 0xE0) >> 5;
   *(cd_blk + 12) = (driveno && 0xFF00) >> 8;
   *(cd_blk + 16) = (driveno && 0xFFFF0000) >> 16;

   /* Create and fill in the system variable mentioned above.                          */

   sprintf(command,"SetEval cdblk_area_id %d",cd_blk_id);
   if ((err = swi(OS_CLI,R0,command,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"InitCDFSDriverSWIS()",err->errnum,err->errmess,
        FATAL);

   return;

}

/*-------------------------------------------------------------------------------------*/
