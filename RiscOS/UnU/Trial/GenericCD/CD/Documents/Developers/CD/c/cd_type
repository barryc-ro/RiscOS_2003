/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !cd.c.cd_type                                                               */
/*  DESCRIPTION:  Low level routines used by DetectCdType() in the main part of !cd,   */
/*                to determine what type of cd is loaded (and therefore which          */
/*                application to launch).                                              */
/*  AUTHOR:  crose@omi.co.uk                                                           */
/*                                                                                     */
/*=====================================================================================*/

#include "cd_type.h"

/*-------------------------------------------------------------------------------------*/
/*                         Inclusion of !cd header files.                              */
/*-------------------------------------------------------------------------------------*/

#include "common.h"

/*-------------------------------------------------------------------------------------*/
/*                    Inclusion of standard C library headers.                         */
/*-------------------------------------------------------------------------------------*/

#include "stdio.h"
#include "string.h"
#include "ctype.h"
#if defined(DEVELOPMENT) || defined(FN_TRACE)
    #include "stdlib.h"
#endif

/*-------------------------------------------------------------------------------------*/
/*   Inclusion of SWI interface header.  Allows constructs of the type                 */
/*   err = swi(Wimp_Initialise,R0,310,R1,0x4B534154,R2,NULL,R3,msg_list,OUT,R1,        */
/*   &cd_task_handle,END);                                                             */
/*-------------------------------------------------------------------------------------*/

                           #include "swicall.h"

/*-------------------------------------------------------------------------------------*/
/*                            INTERNAL FUNCTION PROTOTYPES                             */
/*-------------------------------------------------------------------------------------*/

                        static int OverviewPacExists(void);
                        static int InfoFileExists(void);
                        static int AudioData(int track);
                        static int CanReadFirstTrackNumber(void);
                        static int GetNumbrOfFiles(void);
                        static int MPEGFile(char *p);

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  IsItPhotoCd()                                                           */
/*  BEHAVIOUR: Tries to determine whether or not the currently loaded cd is a photo    */
/*             cd.  The cd is said to be a photo cd if either an overview pac is       */
/*             found, or a photo cd info file is found to exist.                       */
/*  RETURNS:   TRUE if an overview pac or photo cd info file is found on the cd,       */
/*             FALSE if it is not, and FAULTY_CD if CDFS returns a "Compact disc is    */
/*             faulty" error message at any stage.                                     */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern int IsItPhotoCd(void)
{
 int photo_cd = FALSE;
 int overview_exists = FALSE;
 int info_exists = FALSE;

   #ifdef FN_TRACE
     puts("IsItPhotoCd()");
   #endif

   overview_exists = OverviewPacExists();
   if (overview_exists == FAULTY_CD)
   {
       photo_cd = FAULTY_CD;
   }
   else if (overview_exists == TRUE)
        {
            photo_cd = TRUE;
        }
        else
        {
            {
               info_exists = InfoFileExists();
               if (info_exists == FAULTY_CD)
               {
                   photo_cd = FAULTY_CD;
               }
               else if (info_exists == TRUE)
                    {
                        photo_cd = TRUE;
                    }
                    else
                    {
                        photo_cd = FALSE;
                    }
            }
        }

   return photo_cd;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  IsItAudioCd()                                                           */
/*  BEHAVIOUR: Tries to determine whether or not the currently loaded cd is an audio   */
/*             cd.  The cd is said to be an audio cd if the first track on the disc is */
/*             is made up of audio data.                                               */
/*  RETURNS:   TRUE if the first track is found to be audio data, FALSE if it is not,  */
/*             and FAULTY_CD if CDFS has returned a "Compact disc is faulty" error     */
/*             message at a lower level.                                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern int IsItAudioCd(void)
{
 int audio_cd = FALSE;
 int first_track;
 int audio_data;

   #ifdef FN_TRACE
     puts("IsItAudioCd()");
   #endif

   first_track = CanReadFirstTrackNumber();
   if (first_track == FAULTY_CD)
   {
       audio_cd = FAULTY_CD;
   }
   else if (first_track != -1)
        {
            audio_data = AudioData(first_track);
            if (audio_data == FAULTY_CD)
            {
                audio_cd = FAULTY_CD;
            }
            else if (audio_data != FALSE)
                 {
                     audio_cd = TRUE;
                 }
        }

   return audio_cd;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION: IsItVideoCd()                                                            */
/*  BEHAVIOUR: Attempts to determine whether or not the loaded cd is a video cd.       */
/*             (MPEG audio only cd's may also be picked up by this.  Haven't yet       */
/*              investigated this possibility).                                        */
/*  RETURNS:   TRUE if it is a video cd, FALSE if it is not, and FAULTY_CD if CDFS     */
/*             returns a "Compact disc is faulty" error message.                       */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern int IsItVideoCd(void)
{
 int video_cd = FALSE;
 FILE *fptr = NULL;
 char m_wildcard[30] = "CDFS:$.MPEGAV.MUSIC*/DAT";
 char a_wildcard[30] = "CDFS:$.MPEGAV.AVSEQ*/DAT";
 _kernel_oserror *err = NULL;
 int cd_file_count = 0;
 char *fnames = NULL;
 char *index = NULL;
 int i;
 #define MAX_LEN 50

   #ifdef FN_TRACE
     puts("NTSC_VideoCd()");
   #endif

   if ((err = swi(OS_CLI,R0,"CDFS:Cat cdfs:$ { > null: }",END))
        != NULL)
   {
        if (err->errnum == COMPACT_DISC_IS_FAULTY)
            video_cd = FAULTY_CD;
        ErrorHandler(__FILE__,__LINE__,"IsItVideoCd",err->errnum,err->errmess,WARNING);
   }
   else if (((fptr = fopen(m_wildcard,"r")) != NULL) ||
            ((fptr = fopen(a_wildcard,"r")) != NULL))
        {
             fclose(fptr);
             video_cd = TRUE;
        }
        else {
               if ((cd_file_count = GetNumbrOfFiles()) == 0)
               {
                    ErrorHandler(__FILE__,__LINE__,"IsItVideoCd()",0,"No files found.",
                    WARNING);
                    return FALSE;
               }

               if ((fnames = calloc(cd_file_count,MAX_LEN)) == NULL)
               {
                    ErrorHandler(__FILE__,__LINE__,"IsItVideoCd()",0,
                    "Insufficient Memory",WARNING);
                    return FALSE;
               }

               if ((err = swi(OS_GBPB,R0,9,R1,"CDFS:$",R2,fnames,R3,cd_file_count,R4,0,R5,
                    cd_file_count * MAX_LEN,R6,0,END)) != NULL)
               {
                    free(fnames);
                    ErrorHandler(__FILE__,__LINE__,"IsItVideoCd()",err->errnum,
                    err->errmess,WARNING);
                    return FALSE;
               }

               #ifdef DEVELOPMENT
                 printf("\nIsItVideoCd() :- ");
                 for (i = 0; i < cd_file_count * MAX_LEN; putchar(fnames[i]),i++);
               #endif

               i = 0;
               index = fnames;
               while ((i < cd_file_count) && (video_cd == FALSE))
               {
                       if (MPEGFile(index))
                           video_cd = TRUE;
                       else
                           index = index + (strlen(index)+1);
                       i++;
               }
               free(fnames);
        }

   return video_cd;

 #undef MAX_LEN
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION: GetNumbrOfFiles()                                                        */
/*  RETURNS:  - 'file_cnt', which is the number of files found on the currently loaded */
/*               cd.                                                                   */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int GetNumbrOfFiles(void)
{
 _kernel_oserror *err = NULL;
 int file_cnt = 0;

   #ifdef FN_TRACE
     puts("GetNumbrOfFiles()");
   #endif

   if ((err = swi(OS_FSControl,R0,28,R1,"CDFS:$.*",R3,0,OUT,R3,&file_cnt,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"GetNumbrOfFiles()",err->errnum,err->errmess,
        WARNING);
   }

   #ifdef DEVELOPMENT
     printf("GetNumbrOfFiles():- file count: %d\n",file_cnt);
   #endif

   return file_cnt;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION: MPEGFile()                                                               */
/*  BEHAVIOUR: Tries to determine whether or not the specified file is an MPEG file.   */
/*             Looking for MPEG start codes in each file passed to this function could */
/*             slow !cd down a lot and would require extra memory usage.  Hence        */
/*             the specified file is said to be an MPEG file if the following          */
/*             conditions are all met.  At the time of writing (10-10-95), 16          */
/*             different cd's have been examined, most of them NTSC which contain      */
/*             arbitrary filenames, one was a photo cd.  When the white/green book     */
/*             video specs arrive and / or when a video cd is rejected because it is   */
/*             unrecognised, these set of conditions may need to change.  A cd is      */
/*             classed as a video cd if:                                               */
/*               (a) the length of any of it's files in the root directory is >= 400M  */
/*                   and ...                                                           */
/*               (b) the same file has a name which ends in "/RTF", and ...            */
/*               (c) the same file has a name which includes numeric/s.                */
/*  REQUIRES:  -'p', which is the name of the file to check out.                       */
/*  RETURNS:   -'MPEG', which is TRUE if the specified file is thought to be an MPEG   */
/*               audio or video file, FALSE otherwise.                                 */
/*  NOTES:     Doesn't look for specific filenames "CDFS:$.MPEGAV.MUSICwildcard/DAT"   */
/*             and "CDFS:$.MPEGAV.AVSEQwildcard/DAT".  This is done at a higher level  */
/*             (see IsItVideoCd().  This function is more geared towards NTSC video    */
/*             cd's, which have arbitrary filenames.                                   */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int MPEGFile(char *p)
{
 #define BIG 400000000 /* bytes (i.e. about 400M) */
 int handle = 0;
 int MPEG = FALSE;
 int len = 0;
 int i;
 char *fname = NULL;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE
     puts("MPEGFile()");
   #endif

   if ((fname = calloc(strlen(p)+strlen("CDFS:$.")+1,sizeof(char))) == NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"MPEGFile()",0,"Insufficient Memory.",WARNING);
        return FALSE;
   }

   sprintf(fname,"CDFS:$.%s",p);

   if ((err = swi(OS_Find,R0,0x41,R1,fname,OUT,R0,&handle,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,WARNING);
        free(fname);
        return FALSE;
   }

   if (handle == 0)
   {
       ErrorHandler(__FILE__,__LINE__,"MPEGFile()",0,"File handle returned as zero.",
       WARNING);
       #ifdef DEVELOPMENT
         printf("\nTried to read file %s.\n",fname);
       #endif
       free(fname);
       return FALSE;
   }

   if ((err = swi(OS_File,R0,17,R1,fname,OUT,R4,&len,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,WARNING);
        if ((err = swi(OS_Find,R0,0,R1,handle,END)) != NULL)
             ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,
             WARNING);
        free(fname);
        return FALSE;
   }

   if ((len >= BIG) && (strcmp(fname+strlen(fname)-strlen("/RTF"),"/RTF") == NULL))
   {
        i = 0;
        while ((MPEG == FALSE) && (i < strlen(fname)))
        {
                if (isdigit(fname[i]))
                {
                    MPEG = TRUE;
                    #ifdef DEVELOPMENT
                      printf("NTSC_VideoCd(): MPEG file detected - %s\n",fname);
                    #endif
                }
                i++;
        }
   }

   if ((err = swi(OS_Find,R0,0,R1,handle,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,
        WARNING);

   free(fname);
   return MPEG;

 #undef BIG
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  IsItRunCd()                                                             */
/*  BEHAVIOUR: Tries to determine whether or not the currently loaded cd is a RunCD.   */
/*             Such a cd contains it's own applications and is launched by executing   */
/*             it's RunCD file.  RunCD's always have a "!RunCD" or RunCD wildcard  run */
/*             file in their root directories.                                         */
/*  RETURNS:   TRUE if the cd's RunCD file could be opened with read access (only),    */
/*             FALSE otherwise.                                                        */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern int IsItRunCd(void)
{
 int run_cd = FALSE;
 FILE *fptr = NULL;
 char wildcard[20] = "CDFS:$.RunCD/*";

   #ifdef FN_TRACE
     puts("IsItRunCd()");
   #endif

   if ((fptr = fopen("CDFS:$.!RunCD","r")) != NULL)
   {
        fclose(fptr);
        run_cd = TRUE;
   }
   else if ((fptr = fopen(wildcard,"r")) != NULL)
        {
             fclose(fptr);
             run_cd = TRUE;
        }

   return run_cd;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  OverviewPacExists()                                                     */
/*  BEHAVIOUR: Used by IsItPhotoCd() as one of the checks to see if the loaded cd is a */
/*             photo cd.  Uses one of the Kodak Photo CD SWI calls to get the name of  */
/*             the overview pac.  If this results in error, the  overview pac is said  */
/*             not to exist.  If the attempt to get the name of the overview pac was   */
/*             successful a further attempt to open the overview pac is made before    */
/*             being certain that it exists.                                           */
/*  RETURNS:   TRUE if the overview pac exists, FALSE if it does not, and FAULTY_CD if */
/*             CDFS returns a "Compact disc is faulty" error message.                  */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

static int OverviewPacExists(void)
{
 char *cd_wksp = NULL;  /* cd workspace.  On return from PhotoCD_GetPacName, cd_wksp   */
                        /* contains the name of the overview pac.                      */
 int len;               /* Value returned from PhotoCD_GetPacName, indicating the      */
                        /* length of the pac name string.                              */
 int handle;            /* Overview pac file handle.                                   */
 _kernel_oserror *err;  /* SWI error handling pointer.                                 */
 int overview_pac_exists = FALSE;   /* Gets set to TRUE if found.                      */
 #define PhotoCD_GetPacName 0x46F42 /* SWI number for PhotoCD_GetPacName.              */
 #define OVERVIEW_PAC 0             /* Used for PhotoCD_GetPacName SWI to identify the */
                                    /* pac type.                                       */

   #ifdef FN_TRACE
     puts("OverviewPacExists()");
   #endif

   if ((cd_wksp = malloc(256))==NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"OverviewPacExists()",0,
                     "Insufficient Memory: Unable to check for photo cd's.",WARNING);
        overview_pac_exists = FALSE;
   }
   else
   {
      /* NB: PhotoCD_GetPacName below actually works and does not return an error with */
      /* audio cd's (or at least with one audio cd in particular).  Instead, a pac     */
      /* name of "" was read, i.e. nothing, with 'len' being 31!  Hence relying solely */
      /* on being able to read a pac name in order to determine whether or not the cd  */
      /* is a photo cd, is most definitely not a good idea.  Further checks are        */
      /* necessary, as carried out below.                                              */

      if ((err = swi(PhotoCD_GetPacName,R0,OVERVIEW_PAC,R1,cd_wksp,R2,256,R3,0,OUT,R2,
           &len,END)) != NULL)
      {
           if (err->errnum == COMPACT_DISC_IS_FAULTY)
               overview_pac_exists = FAULTY_CD;
           else
               overview_pac_exists = FALSE;
           ErrorHandler(__FILE__,__LINE__,"OverviewPacExists()",err->errnum,err->errmess,
           WARNING);
      }
      else
      {
           *(cd_wksp+len) = '\0';

           if (len == 0)
               overview_pac_exists = FALSE;
           else if ((err = swi(OS_Find,R0,0x43,R1,cd_wksp,OUT,R0,&handle,END))!=NULL)
                {
                     ErrorHandler(__FILE__,__LINE__,"OverviewPacExists()",err->errnum,
                       err->errmess,WARNING);

                     overview_pac_exists = FALSE;
                }
                else if (handle == 0)
                     {
                         overview_pac_exists = FALSE;
                     }
                     else if ((err = swi(OS_Find,R0,0,R1,handle,END))!=NULL)
                               ErrorHandler(__FILE__,__LINE__,"OverviewPacExists()",
                                  err->errnum,err->errmess,WARNING);

                          else
                               overview_pac_exists = TRUE;

      }
   }

   if (cd_wksp != NULL)
       free(cd_wksp);

   return overview_pac_exists;

   #undef OVERVIEW_PAC
}
/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  InfoFileExists()                                                        */
/*  BEHAVIOUR: Used by IsItPhotoCd() as one of the checks to see if the loaded cd is a */
/*             photo cd.  Uses one of the Kodak Photo CD SWI calls to get the name of  */
/*             the info file.  If this results in error, the  info file is said not to */
/*             exist.  If the attempt to get the name of the  info file was successful */
/*             a further attempt to open the info file is made before being certain    */
/*             that it exists.                                                         */
/*  RETURNS:   TRUE if the info file exists, FALSE if it does not, FAULTY_CD if CDFS   */
/*             returns a "Compact disc is faulty" error message.                       */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int InfoFileExists(void)
{
 char *cd_wksp = NULL;  /* cd workspace.  On return from PhotoCD_GetPacName, cd_wksp   */
                        /* contains the name of the info file.                         */
 int len;               /* Value returned from PhotoCD_GetPacName, indicating the      */
                        /* length of the pac name string.                              */
 int handle;            /* Info file handle.                                           */

 int info_file_exists = FALSE;  /* Default value.  Gets overwritten with TRUE if the   */
                                /* info file is found to exist.                        */
 _kernel_oserror *err;  /* Error handling pointer for SWI calls.                       */
 #define INFO_FILE -1   /* Used when calling SWI PhotoCD_GetPacName.                   */

   #ifdef FN_TRACE
     puts("InfoFileExists()");
   #endif

   if ((cd_wksp = malloc(256))==NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"InfoFileExists()",0,
                     "Insufficient Memory: Unable to check for photo cd's.",WARNING);
        info_file_exists = FALSE;
   }
   else
   {
      /* NB: PhotoCD_GetPacName below actually works and does not return an error with */
      /* audio cd's (or at least with one audio cd in particular).  Instead, a pac     */
      /* name of "" was read, i.e. nothing, with 'len' being 31!  Hence relying solely */
      /* on being able to read a pac name in order to determine whether or not the cd  */
      /* is a photo cd, is most definitely not a good idea.  Further checks are        */
      /* necessary, as carried out below.                                              */

      if ((err = swi(PhotoCD_GetPacName,R0,INFO_FILE,R1,cd_wksp,R2,256,R3,0,OUT,R2,&len,
           END)) != NULL)
      {
           if (err->errnum == COMPACT_DISC_IS_FAULTY)
               info_file_exists = FAULTY_CD;
           else
               info_file_exists = FALSE;

           ErrorHandler(__FILE__,__LINE__,"InfoFileExists()",err->errnum,err->errmess,
           WARNING);
      }
      else
      {
           *(cd_wksp+len) = '\0';

           if (len == 0)
               info_file_exists = FALSE;
           else if ((err = swi(OS_Find,R0,0x43,R1,cd_wksp,OUT,R0,&handle,END))!=NULL)
                {
                     ErrorHandler(__FILE__,__LINE__,"InfoFileExists()",err->errnum,
                                   err->errmess,WARNING);
                     info_file_exists = FALSE;
                }
                else if (handle == 0)
                     {
                         info_file_exists = FALSE;
                     }
                     else if ((err = swi(OS_Find,R0,0,R1,handle,END))!=NULL)
                               ErrorHandler(__FILE__,__LINE__,"InfoFileExists()",
                               err->errnum,err->errmess,WARNING);
                          else
                               info_file_exists = TRUE;

      }
   }

   if (cd_wksp != NULL)
       free(cd_wksp);

   return info_file_exists;

   #undef INFO_FILE

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  AudioData()                                                             */
/*  BEHAVIOUR: Determines whether or not the specified track contains audio data.      */
/*  REQUIRES:  - 'track', which is the track to investigate (normally the first track, */
/*                which is not necessarily 1).                                         */
/*  PREREQUISITES: 'track' must be a valid track number.  Valid track numbers are      */
/*                  those which lie in the range 1 - 99 inclusive.                     */
/*                 'cd_blk' must have been set (see init.c).  'cd_blk' is a CDFS       */
/*                  control block necessary for accessing the cd drive using any of    */
/*                  the CDFS Driver SWI's.                                             */
/*  RETURNS:  TRUE if the specified track contains audio data, FALSE if it does not,   */
/*            FAULTY_CD if CDFS returns a "Compact disc is faulty" error message.      */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

static int AudioData(int track)
{
 char *cd_wksp = NULL;  /* cd workspace.  As a result of calling CD_EnquireTrack, byte */
                        /* 4 (counting from 0) has audio control bits specifying the   */
                        /* type of information the track holds.  If bit 0 of byte 4 is */
                        /* 0, then it is audio information.                            */
 int audio = FALSE;     /* Gets set to TRUE if audio data is found.                    */
 _kernel_oserror *err;  /* SWI error handling pointer.                                 */
 extern char *cd_blk;   /* CDFS control block, necessary for accessing the cd drive    */
                        /* using the CDFS SWI calls.                                   */

   #ifdef FN_TRACE
     puts("AudioData()");
   #endif

   if ((cd_wksp = malloc(256)) == NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"AudioData()",0,
                     "Insufficient Memory to check if data is audio.",WARNING);
        audio = FALSE;
   }
   else
   {
        if ((err = swi(CD_EnquireTrack,R0,track,R1,cd_wksp,R7,cd_blk,END))!=NULL)
        {
             if (err->errnum == COMPACT_DISC_IS_FAULTY)
                 audio = FAULTY_CD;

             ErrorHandler(__FILE__,__LINE__,"AudioData()",err->errnum,err->errmess,
             WARNING);
        }
        else
             if (( (*(cd_wksp+4) && 1)) == 0)
                 audio = TRUE;
             else
                 audio = FALSE;

        free(cd_wksp);
   }

   return audio;
}
/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  CanReadFirstTrackNumber()                                               */
/*  BEHAVIOUR: Attempts to determine what the first track number is on the cd.  If the */
/*             first track number is found to lie in the range 1 to 99 inclusive, it   */
/*             is valid.  Note that the first track number will not necessarily be 1.  */
/*  PREREQUISITES:  'cd_blk' must have been set (see init.c).  'cd_blk' is a CDFS      */
/*             control block necessary for accessing the cd drive using any of the     */
/*             the CDFS Driver SWI's.                                                  */
/*  RETURNS:   The number of the first track, or if the first track could not be found */
/*             or was found to lie outside the range 1 to 99, returns -1 to indicate   */
/*             failure.   Returns FAULTY_CD if CDFS returned a "Compact disc is        */
/*             faulty" error message.                                                  */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

static int CanReadFirstTrackNumber(void)
{
 char *cd_wksp = NULL;   /* cd workspace.  With R0 being 0 in CD_EnquireTrack, the 1st */
                         /* byte of cd_wksp on return from the call contains the first */
                         /* track on the cd.                                           */
 int first_track = -1;   /* -1 Indicates failure in finding the first track.  This     */
                         /* value will be altered when and if the first track can be   */
                         /* found, or if the cd is found to be faulty.                 */
 _kernel_oserror *err;   /* Error handling pointer for SWI calls.                      */
 extern char *cd_blk;    /* CDFS control block, necessary for accessing the cd drive   */
                         /* using the CDFS SWI calls.                                  */

   #ifdef FN_TRACE
     puts("CanReadFirstTrackNumber()");
   #endif

   if ((cd_wksp = malloc(256)) == NULL)
        ErrorHandler(__FILE__,__LINE__,"CanReadFirstTrackNumber()",0,
                     "Insufficient Memory to check if disc type is audio.",WARNING);
   else
   {
        if ((err = swi(CD_EnquireTrack,R0,0,R1,cd_wksp,R7,cd_blk,END)) != NULL)
        {
             first_track = -1;
             if (err->errnum == COMPACT_DISC_IS_FAULTY)
                 first_track = FAULTY_CD;
        }
        else if ((*cd_wksp >= 1) || (*cd_wksp <= 99))
                  first_track = *cd_wksp;

        free(cd_wksp);
   }

   return first_track;
}
/*=====================================================================================*/
