/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !cd.c.messages                                                              */
/*  DESCRIPTION:  Message handling routines.                                           */
/*  AUTHOR:  crose@omi.co.uk                                                           */
/*                                                                                     */
/*=====================================================================================*/

#include "messages.h"

/*-------------------------------------------------------------------------------------*/
/*   Inclusion of standard C library header files.                                     */
/*-------------------------------------------------------------------------------------*/

#include "stdlib.h"
#include "stdio.h"
#include "string.h"

/*-------------------------------------------------------------------------------------*/
/*                          Inclusion of !cd header files.                             */
/*-------------------------------------------------------------------------------------*/

#include "common.h"
#include "display.h"

/*-------------------------------------------------------------------------------------*/
/*   Inclusion of SWI interface header.  Allows constructs of the type                 */
/*   err = swi(Wimp_Initialise,R0,310,R1,0x4B534154,R2,NULL,R3,msg_list,OUT,R1,        */
/*   &cd_task_handle,END);                                                             */
/*-------------------------------------------------------------------------------------*/

#include "swicall.h"

/*-------------------------------------------------------------------------------------*/
/*    Inclusion of David DeVorchik's window code used to display the splash screen.    */
/*-------------------------------------------------------------------------------------*/

#include "window.h"


/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  SendMessage()                                                           */
/*  BEHAVIOUR: Sends a message, with or without data to the specified destination.     */
/*  REQUIRES:  'action', which is R1+16 as mentioned on p.3-197 of the PRM, and which  */
/*              is TASK_HANDLE or TASK_DIE as described in the messages header file.   */
/*              'action' should be passed in as msg_list[xxx_INDEX], where xxx is      */
/*              TASK_HANDLE, or TASK_DIE.                                              */
/*          *  'destination', which has the value BROADCAST if the message is to be    */
/*              sent to all tasks (including the sender).  Alternatively,              */
/*              'destination' is the task handle of the destination task.              */
/*          *  'data', which is a pointer to a string of message data (refer PRM p.    */
/*              3-197. R1+20 in the message block).   If there is no message data,     */
/*              'data' should be NULL.  Message data is only expected when !cd         */
/*              broadcasts its task handle.                                            */
/*  PREREQUISITES:  Any message data must be less than 236 characters in total.  As    */
/*                  !cd's only requirement for use of the message data field is in     */
/*              broadcasting its task handle, use of a message data field which is     */
/*              anywhere near this limit of 236 should be completely unecessary.       */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void SendMessage(int action,int destination,char *data)
{
 int *mess_blk = NULL;        /* Message block.  Format described in PRM, p. 3-197.    */
 int mess_blk_size = 0;       /* Size of message block depends upon presence of        */
                              /* data, in this case whether or not !cd's task handle   */
                              /* is being sent.  All other messages types  have no     */
                              /* actual data.                                          */
 char *p = NULL;              /* Points to the data portion of the message block, if   */
                              /* there is any data.                                    */
 _kernel_oserror *err = NULL;  /* SWI error handling pointer.                          */

   #ifdef FN_TRACE
     puts("SendMessage()");
   #endif

   if (data == NULL)
       mess_blk_size = 20;
   else
       mess_blk_size = 20 + strlen(data) + 1;  /* Allow 1 for terminating null         */
                                               /* character.                           */
   if ((mess_blk_size % 4) != 0)
        mess_blk_size = (mess_blk_size/4)*4 + 4;

   if ((mess_blk = malloc(mess_blk_size)) == NULL)
        ErrorHandler(__FILE__,__LINE__,"SendMessage()",0,"Insufficient Memory.",FATAL);

   *mess_blk = mess_blk_size;  /* message block length. */
   *(mess_blk + 3) = ORIGINAL_MESSAGE;
   *(mess_blk + 4) = action;

   if (data != NULL)
   {
       p = (char *)(mess_blk + 5);
       sprintf(p,"%s",data);
   }

   if ((err = swi(Wimp_SendMessage,R0,USER_MESSAGE,R1,mess_blk,R2,destination,END))
        != NULL)
   {
         ErrorHandler(__FILE__,__LINE__,"SendMessage()",err->errnum,err->errmess,FATAL);
   }

   free(mess_blk);
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  ReadMessage()                                                           */
/*  BEHAVIOUR: Called when the main part of !cd detects the arrival of a user message. */
/*             Expected user messages are as described in the messages header file,    */
/*             namely TASK_ACTIVE or TASK_DEAD.  ReadMessage() updates certain         */
/*             variables according to the type of message received.                    */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void ReadMessage(void)
{
 extern int other_task;         /* ACTIVE indicates that a cd task other than !cd is   */
                                /* now active.  NOT_ACTIVE indicates that !cd is now   */
                                /* running alone.                                      */
 extern int splash_screen;      /* Refers to whether or not the PleaseInsertCd screen  */
                                /* is currently hidden or displayed.                   */
 extern int wait_for_ack;       /* !cd was expecting a message from the other task.    */
                                /* Gets set to FALSE as a result of receiving the      */
                                /* message.                                            */
 extern int *poll_blk;          /* Contains the received message block (refer PRM      */
                                /* p. 3-197).                                          */
 int *mess_code = NULL;         /* Message action portion of the message block (refer  */
                                /* PRM p. 3-197, and messages header file).            */
 _kernel_oserror *err = NULL;   /* SWI error handling pointer.                         */
 extern int hBackgroundWindow;  /* Used for displaying / hiding the splash screen.     */
 extern int waiting_to_issue_cdsupport_standby;  /* Used in association with the       */
                                 /* introduction of David DeVorchik's UpCallV          */
                                 /* (CDSupport) code.                                  */
 extern void Eject(void);       /* Defined in main.c                                   */


   #ifdef FN_TRACE
     puts("ReadMessage()");
   #endif

   mess_code = (int *)(poll_blk + 4);

   if (*mess_code == msg_list[TASK_ACTIVE_INDEX])
   {
    /* The cd task which !cd launched is now active and running.                       */

       other_task = ACTIVE;
       splash_screen = HIDDEN;
       wait_for_ack = FALSE;
       ShowWindow( hBackgroundWindow, FALSE );  /* Hide splash screen.                 */
   }
   else if (*mess_code == msg_list[TASK_DEAD_INDEX] )
        {
          /* The other task is about to die.                                           */

          /* Show splash screen.                                                       */
             ShowWindow( hBackgroundWindow, TRUE );

          /* Claim back the keyboard input focus.                                      */
             if ((err = swi(Wimp_SetCaretPosition,R0,hBackgroundWindow,R1,-1,R2,0,R3,0,
                  R4,0,R5,0,END)) != NULL)
                    ErrorHandler(__FILE__,__LINE__,"ReadMessage()",0,
                    "Failed to reclaim keyboard input focus",WARNING);

             if (waiting_to_issue_cdsupport_standby)
             {
                 if ((err = swi(CDSupport_Standby,R0,1,END)) != NULL)
                 {
                      ErrorHandler(__FILE__,__LINE__,"ReadMessage()",err->errnum,
                                    err->errmess,WARNING);
                 }
                 waiting_to_issue_cdsupport_standby = FALSE;
             }
             other_task = NOT_ACTIVE;
             wait_for_ack = FALSE;
             Eject();
        }
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION: BroadcastPlingCDTaskHandle()                                             */
/*  BEHAVIOUR: Broadcasts !cd task handle to all tasks (including itself, which we're  */
/*             not really interested in and therefore don't act upon).                 */
/*  PREREQUISITES:  'cd_task_handle' must have been set as a result of calling Wimp_   */
/*                   Initialise().                                                     */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void BroadcastPlingCDTaskHandle(void)
{
 char cd_task_handle_str[100]; /* Task handle in string format.  Gets broadcast to     */
                               /* the other task enabling that task to talk directly   */
                               /* to !cd.  This avoids the other task having to        */
                               /* broadcast to everything including itself.            */
 extern int cd_task_handle;

   #ifdef FN_TRACE
     puts("BroadcastPlingCDTaskHandle()");
   #endif

   sprintf(cd_task_handle_str,"%d",cd_task_handle);
   SendMessage(msg_list[TASK_HANDLE_INDEX],BROADCAST,cd_task_handle_str);

}
/*=====================================================================================*/

