

;---------------------------------------------------------------------
;       Macro to generate an error block
;---------------------------------------------------------------------

        MACRO
$name   Error   $num,$str
$name   &       $num
$name.mess  =   "$str",0
        ALIGN
        MEND




;---------------------------------------------------------------------
;       Macro to insert a RO3 ResourceFS: header and file
;---------------------------------------------------------------------


        MACRO
$label  ResourceFile    $source_filename, $resourcefs_filename

02
$label  DCD     %ft01 - %bt02
        DCD     :FLOAD:"$source_filename"
        DCD     :FEXEC:"$source_filename"
        DCD     :FSIZE:"$source_filename"
        DCD     :FATTR:"$source_filename"
        DCB     "$resourcefs_filename", 0
        ALIGN
        DCD     :FSIZE:"$source_filename" + 4
        BIN     "$source_filename"
        ALIGN
01
        MEND



;---------------------------------------------------------------------
;       Macro to align the space in ^ type definitions
;---------------------------------------------------------------------


        MACRO
$label  AlignSpace $value, $offset
 [ "$value" = ""
$label  #       3 :AND: ($offset-:INDEX: @)
 |
$label  #       (($value)-1) :AND: ($offset-:INDEX: @)
 ]
        MEND




;---------------------------------------------------------------------
;       Macro to print a register (requires 24 bytes on stack)
;---------------------------------------------------------------------


        MACRO
        disp_reg        $reg, $mess, $base
        ASSERT  "$reg" /= ""

        STMFD   sp!, {r0-r2, lr}

        [       "$reg" /= "r0"
        MOV     r0, $reg
        ]

        [       "$mess" /= ""
        SWI     OS_WriteS
        =       4,"$mess ($reg) = ",0
        |
        SWI     OS_WriteS
        =       4,"$reg = ",0
        ]
        ALIGN

        SUB     sp, sp, #36             ; temp space for buffer

        MOV     r1, sp
        MOV     r2, #36
        [       "$base" = "I"                 ; signed
                SWI     XOS_ConvertInteger4
        |
                [       "$base" = "U"         ; unsigned
                        SWI     XOS_ConvertCardinal4
                |
                        [       "$base" = "B"
                                SWI     XOS_ConvertBinary4    ; binary
                        |
                                SWI     XOS_ConvertHex8       ; hex
                        ] ; B
                ] ; U
        ] ; I

        SWI     XOS_Write0

        ADD     sp, sp, #36

        SWI     OS_WriteS
        ;DCB     " \n\r\x05",0
        DCB     " \n\r",0
        ALIGN
        ;debug_check_esc
        LDMFD   sp!, {r0-r2, lr}
        MEND




;---------------------------------------------------------------------
;       Macro to get a key press and die if it was escape
;---------------------------------------------------------------------

        MACRO
        debug_key

        STMFD   sp!, {r0}                               ; Save R0
        SWI     4                                       ; OS_ReadC
        TEQ     r0, #27                                 ; check for escape
        BNE     %ft99                                   ; Not escape so skip exit
        ADRL    r0, %ft98                               ; Get address of error
        SWI     &2B                                     ; OS_GenerateError (does NOT return)

98
        &       27                                      ; Error number
        =       "You escaped, you sod!  I wasn't finished yet!",0         ; Error message

99
        LDMFD   sp!, {r0}                               ; Restore R0
        MEND




;---------------------------------------------------------------------
;       Macro to automatically generate an ADR or ADRL
;---------------------------------------------------------------------


        MACRO
$label  addr    $reg, $object, $cc
        LCLA    value
value   SETA    .-$object+8
        Immediate &$value
 [ immediate
$label  ADR$cc  $reg, $object
 |
$label  ADR$cc.L $reg, $object
 ]
        MEND




;---------------------------------------------------------------------
;       Macro to set flag if operand can be used as an immediate value
;---------------------------------------------------------------------


        GBLL    immediate

        MACRO
        Immediate $var
immediate SETL  {FALSE}
        LCLA    count
        LCLA    varcopy
varcopy SETA    $var
        WHILE   count <= 30
 [ ((varcopy:SHL:count) + (varcopy:SHR:(32-count))) :AND: (:NOT: &FF) = 0
immediate SETL  {TRUE}
        MEXIT
 ]
count   SETA    count + 2
        WEND
        MEND




;---------------------------------------------------------------------


        END
