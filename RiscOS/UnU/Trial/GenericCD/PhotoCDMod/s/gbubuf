;==========================================
;
;  s.gbubuf
;
;  GetBlock user-supplied forward reading
;  buffer routines
;
;  Photo CD support module
;
;  © 1993 Acorn Computers Ltd
;
;  Developed in association with 4Mation
;  Author: Paul LeBeau
;
;==========================================

        [       Switch_ReadAheadBufferEnabled



;-----------------------------------------------------------------------------------



gbubuf_setup

; Set up the user-supplied read-ahead buffer and
; associated data.
;
; On Entry
;    R2 = file pointer value
;
; On Exit
;    R1-R3 preserved

        STMFD   sp!, {r1-r3, lr}

        ; check whether user-supplied read-ahead buffer is being used
        LDR     r1, gb_ubufsize
        TEQ     r1, #0
        LDMEQFD sp!, {r1-r3, pc}^                       ; nope


        LDR     r1, gb_ubufusedagain                    ; is buffer being reused? (ie ubuf size passed in was = -1)
        TEQ     r1, #0
        BEQ     gbubs_storefileptr                      ; no - set up file ptr and return


        ; check that we are reading the same file!
        ; (people shouldn't really pass r8 = -1 if using a
        ; different file, but just in case they do...)
        LDR     r1, gb_pcdhandle                        ; this file's pcdhandle
        LDR     r3, gb_ubufpcdhandle                    ; pcdhandle of data in ubuf
        CMP     r1, r3
        STRNE   r1, gb_ubufpcdhandle                    ; they're different, disregard current contents
        BNE     gbubs_resetbuffer                       ; and reset the buffer for data from this file


        ; buffer is being reused, make gb_ubufptr point to the right data

        LDR     r1, gb_ubuffileptr_end                  ; ( = file ptr after last buffer-full was read)
        CMP     r2, r1                                  ; is file-ptr-wanted off end of buffer?
        BGE     gbubs_resetbuffer                       ; yes - arrange for buffer to be reloaded

        LDR     r1, gb_ubuffileptr_start                ; file ptr of first byte in buffer
        CMP     r2, r1                                  ; is file-ptr-wanted earlier than what is in buffer?
        BLT     gbubs_resetbuffer                       ; yes - arrange for buffer to be reloaded

        ; all is ok, file-ptr-wanted is within buffer
        SUB     r3, r2,r1                               ; fileptr offset inside buffer
        LDR     r1, gb_ubufstart
        ADD     r1, r1,r3
        STR     r1, gb_ubufptr                          ; store and return
        B       gbubs_return

gbubs_resetbuffer
        LDR     r3, gb_ubufend                          ; set read ptr to endptr
        STR     r3, gb_ubufptr

gbubs_storefileptr
        STR     r2, gb_ubuffileptr_end


gbubs_return
        LDMFD   sp!, {r1-r3, pc}^



;-----------------------------------------------------------------------------------



gbubuf_gbpb

; Equivalent to OS_GBPB but using our buffer
;
; On Entry
;    R0 = 4      (read block from current file pointer)
;    R1 = file handle
;    R2 = dest memory address
;    R3 = number of bytes to read
;
; On Exit
;    R0,R1 preserved
;    R2 = address of byte after last one transferred to buffer
;    R3 = number of bytes not transferred
;    R4 = initial file pointer + number of bytes transferred
;         (NB: won't be anything sensible if buffer is in use)
;    C set if not all transferred


        STMFD   sp!, {r0-r1,r5-r7, lr}

        ; check whether user-supplied read-ahead buffer is being used
        LDR     r4, gb_ubufsize
        TEQ     r4, #0
        BNE     gbubg_fakegbpb                          ; yes, fake a GBPB call using the ubuf

        SWI     XOS_GBPB                                ; else - call the real OS call
gbubg_returnerr
        LDMFD   sp!, {r0-r1,r5-r7, pc}


gbubg_fakegbpb
        ; read the bytes requested out of the buffer

        ; check for pathological case
        CMP     r3, #0
        BLE     gbubg_return

        ; first, check that there is enough
        LDR     r4, gb_ubufptr
        LDR     r5, gb_ubufend
        SUB     r5, r5,r4                               ; bytes remaining in buffer

        CMP     r3, r5                                  ; enough left in buffer?
        BLE     gbubg_retbytes

        ; not enough bytes in buffer.. read some more

        ; modify the file ptr to take into account the bytes
        ; remaining in the buffer (we will re-read those)
        LDR     r4, gb_ubuffileptr_end
        SUB     r4, r4,r5

        STR     r4, gb_ubuffileptr_start                ; record this address

        MOV     r6, r2                                  ; preserve input parameters
        MOV     r7, r3

        MOV     r0, #3                                  ; (read data from file ptr in R4)
        LDR     r2, gb_ubufstart
        LDR     r3, gb_ubufsize
        SWI     XOS_GBPB                                ; read a buffers-worth of data
        BVS     gbubg_returnerr

        STR     r2, gb_ubufend
        STR     r4, gb_ubuffileptr_end
        LDR     r4, gb_ubufstart
        STR     r4, gb_ubufptr

        SUB     r5, r2,r4                               ; bytes remaining in buffer

        MOV     r2, r6                                  ; retrieve input parameters
        MOV     r3, r7
        ; fall through to read bytes out of (newly-filled) buffer


gbubg_retbytes
        ; copy bytes out of the read-ahead buffer
        ; r2 = dest addr
        ; r3 = num bytes
        ; r4 = ubufptr
        ; r5 = bytes left in ubuf

        ; first, calculate the return value for r3
        SUBS    r5, r3,r5                               ; bytes that will not get transferred
        MOVLT   r5, #0
        MOVGT   r3, r5


        EOR     r6, r4,r2                               ; are both dest (r2) and src (r4) pointers
        TST     r6, #3                                  ;    word aligned?

        BEQ     gbubg_copyloop4                         ; yes - do a word-by-word copy


        ; use real simple byte-by-byte loop
gbubg_copyloop1
        LDRB    r1, [r4],#1
        STRB    r1, [r2],#1
        SUBS    r3, r3,#1
        BGT     gbubg_copyloop1
        B       gbubg_finish


        ; do a word-by-word copy
gbubg_copyloop4
        LDR     r1, [r4],#4
        STR     r1, [r2],#4
        SUBS    r3, r3,#4
        BGT     gbubg_copyloop4
        ; just in case r3 was not a multiple of 4 (it most likely was), we will
        ; adjust r4 with the final value of r3 (eg -2, say) to correct it.
        ADD     r4, r4,r3


gbubg_finish
        STR     r4, gb_ubufptr                          ; record state of ptr at end of transfer

        MOV     r3, r5                                  ; return r3 = 'bytes not transferred'

gbubg_return
        LDMFD   sp!, {r0-r1,r5-r7, pc}



;-----------------------------------------------------------------------------------


        ]       ; Switch_ReadAheadBufferEnabled

        END
