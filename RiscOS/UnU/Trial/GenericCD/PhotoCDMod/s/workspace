;==========================================
;
;  s.workspace
;
;  Workspace definitions for s.PhotoCD
;
;  © 1993 Acorn Computers Ltd
;
;  Developed in association with 4Mation
;  Author: Paul LeBeau
;
;==========================================





;-----------------------------------------------------------------------------------
; PhotoCD huffman code table entry
;-----------------------------------------------------------------------------------


                    ^   0
;-------------------------------------------------------
hct_code            #   4               ; huffman code bits (stored in least sig bits)
hct_len             #   4               ; huffman code length
hct_val             #   4               ; residual value corresponding to this code
;-------------------------------------------------------
sizeof_hctentry     #   0








;-----------------------------------------------------------------------------------
; PhotoCD module private workspace layout
;-----------------------------------------------------------------------------------


                        ^       0, r12
workspace_start         #       0
;-------------------------------------------------------


msgs_opened             #       4                      ; Flag: MessageTrans messages file open?
msgs_block              #       16                     ; 4 word block reguired by MessageTrans_OpenFile

pcd_firstpcdblock       #       4                      ; pointer to first block in pcd linked-list



; storage for vars used in image reading (SWI PhotoCD_GetBlock)

gb_pcdhandle            #       4                      ; PhotoCD handle
gb_pbdb                 #       4                      ; PhotoCD Bitmap Data Block pointer
gb_resstep              #       4                      ; resolution step
gb_stride               #       4                      ; row stride

        [       Switch_ReadAheadBufferEnabled
gb_ubufstart            #       4                      ; user-supplied buffer address
gb_ubufsize             #       4                      ; user-supplied buffer size
gb_ubufusedagain        #       4                      ; non-zero if buffer is being re-used from
                                                       ; the last call (ie GetBlock r8 = -1)
gb_ubufpcdhandle        #       4                      ; pcd handle of file that data in buffer came from
gb_ubuffileptr_start    #       4                      ; file pointer of first byte in ubuf
gb_ubuffileptr_end      #       4                      ; current file pointer
gb_ubufptr              #       4                      ; current read ptr within buffer
gb_ubufend              #       4                      ; amount of valid data in buffer
        ]

gb_fileptr              #       4
gb_twidth               #       4                      ; actual physical image width/height
gb_theight              #       4                      ;    (ie as would be output if untransformed)
gb_iwidth               #       4                      ; physical image width and height
gb_iheight              #       4                      ;   (ie as stored in file.  Same as above except
                                                       ;    for Base64 images)
gb_owidth               #       4                      ; output width and height
gb_oheight              #       4                      ;    (as will actually be output (ie transformed))
gb_colinc               #       4                      ; increments for next row/column
gb_rowinc               #       4                      ;    in transformed image
gb_y0                   #       4                      ; subsection coords transformed
gb_y1                   #       4                      ;    to physical pixel terms
gb_x0                   #       4
gb_x1                   #       4
gb_bufY1                #       4                      ; pointers to image data buffers
gb_bufY2                #       4
gb_bufC1                #       4
gb_bufC2                #       4
gb_buf2Y1               #       4
gb_buf2Y2               #       4
gb_buf2C1               #       4
gb_buf2C2               #       4

gb_yp1                  #       4                      ; offset within line buffers of first x pixel
gb_yp2                  #       4
gb_c1p                  #       4
gb_c2p                  #       4
gb_c12p                 #       4
gb_c22p                 #       4
gb_yp2curr              #       4

;gb_linebeingdone        #       4                      ; current line being done
gb_skipfirstline        #       4                      ; if first row is an odd row, we skip the first even one
gb_lastline             #       4                      ; row number of last even row in image
gb_lastpixel            #       4                      ; pixel number of last possible pixel in row
gb_numpixels            #       4                      ; number of pixels to do in each row

;the following are alternative x0 and y0 - for the cases when we need
;substitutes (eg at the high resolutions)
gb_firstline            #       4                      ; first line no to do
gb_firstpixel           #       4                      ; pixel number of first pixel in row (may be different
                                                       ;    from x0)

; vars used for the huffman encoded resolutions

gb_dohuffman            #       4                      ; flag indicating whether residuals
                                                       ; are to be applied or not

gb_bufY1i               #       4                      ; pointers to image data buffers
gb_bufY2i               #       4                      ; (see code for how these differ
gb_bufC1i               #       4                      ; from the euivalent vars that don't
gb_bufC2i               #       4                      ; have the 'i' suffix)
gb_buf2Y1i              #       4
gb_buf2Y2i              #       4
gb_buf2C1i              #       4
gb_buf2C2i              #       4

gb_addr_lineoutbuf      #       4                      ; address of buffer: gb_lineoutbuf

gb_addr_intlinebuffer   #       4                      ; address of buffer: gb_int_linebuffer
gb_addr_tempbufC1       #       4                      ; address of buffer: gb_tempbufC1
gb_addr_tempbufC2       #       4                      ; address of buffer: gb_tempbufC2

gb_addr_lineoutbufsave  #       4                      ; a temporary storage space for this pointer
gb_addr_4Basebuf        #       4                      ; buffer used to temporarily hold contain 4Base
                                                       ;   data when doing 16Base images
gb_addr_lineoutbuftmp2  #       4                      ; two extra buffers required for generation of
gb_addr_lineoutbuftmp3  #       4                      ;   16Base images
gb_reallinestodo        #       4                      ; how many real 16Base lines to do (different
                                                       ;   from normal count as that may be doing one
                                                       ;   extra line for interpolation purposes.

; code table vars for 4Base image
gb_Y4codetablesize      #       4                      ; no of entries in Y4 code table
gb_addr_Y4codetable     #       4                      ; address of buffer for Y4 code table

; code table vars for 16Base image
gb_Ycodetablesize       #       4                      ; no of entries in Y code table
gb_C1codetablesize      #       4                      ; no of entries in C1 code table
gb_C2codetablesize      #       4                      ; no of entries in C2 code table
gb_addr_Ycodetable      #       4                      ; address of buffer for Y code table
gb_addr_C1codetable     #       4                      ; address of buffer for C1 code table
gb_addr_C2codetable     #       4                      ; address of buffer for C2 code table


; bitbuffer etc vars for Y component residuals for 4Base image
gbh_huffptrY4           #       4                      ; current file pointer for huffman data
gbh_bitbufferY4         #       4                      ; bit buffer containg huffman data
gbh_bitptrY4            #       4                      ; bit ptr offset within gbh_bitbuffer
gbh_sectbufptrY4        #       4                      ; buffer containg a sectors worth of huffman data
gbh_sectbufcountY4      #       4                      ; bytes remaining in sector buffer

; bitbuffer etc vars for Y component residuals for 16Base image
gbh_huffptrY            #       4
gbh_bitbufferY          #       4
gbh_bitptrY             #       4
gbh_sectbufptrY         #       4
gbh_sectbufcountY       #       4

; bitbuffer etc vars for C1 components residuals for 16Base image
gbh_huffptrC1           #       4
gbh_bitbufferC1         #       4
gbh_bitptrC1            #       4
gbh_sectbufptrC1        #       4
gbh_sectbufcountC1      #       4

; bitbuffer etc vars for C2 components residuals for 16Base image
gbh_huffptrC2           #       4
gbh_bitbufferC2         #       4
gbh_bitptrC2            #       4
gbh_sectbufptrC2        #       4
gbh_sectbufcountC2      #       4


; vars used for the palette output routines

gbp_addr_ictable        #       4                      ; address of inverse colur table buffer
gbp_last_numpal         #       4                      ; number of entries in last calculated ict
gbp_last_palCRC         #       4                      ; crc for last palette passed
        ; these last two vars are for checking for repeated passing
        ; of the same palette (to avoid unnecessary recalcs of the ict).
gbp_addr_errdiffbuf     #       4                      ; address of buffer for holding errors from
                                                       ;    previous line (when doing err diff)
gbp_direction           #       4                      ; direction of error diffusion (ie diff is
                                                       ;    done back and forth serpentine fashion)
gbp_outend              #       4                      ; holds row end temporarily

; temp vars for ict generation routines
gbict_dbufloc           #       4                      ; address of distance buffer
gbict_bdist             #       4                      ; current blue distance
gbict_bxx               #       4                      ; current blue distance increment
gbict_gdist             #       4                      ; current green distance
gbict_gxx               #       4                      ; current green distance increment



        AlignSpace  64    ; some padding, if necessary,  to allow first buffer
                          ; to be accessed via an immediate constant offset



; general purpose buffer
; used for reading image details and also as an intermediate
; sector buffer when reading huffman values

sizeof_sectorbuffers    *       (4 * CDSectorSize)

gb_Y4huff_sectbufend    *       (1 * CDSectorSize)
gb_Yhuff_sectbufend     *       (2 * CDSectorSize)
gb_C1huff_sectbufend    *       (3 * CDSectorSize)
gb_C2huff_sectbufend    *       (4 * CDSectorSize)

cd_sectorbuffers        #       sizeof_sectorbuffers


sizeof_linebuffer  *  (x_16Base * 6)
sizeof_lineoutbuf  *  (x_16Base * 3)

; buffer for last stage before final interpolation or huffman applied
; generally contains two lines of Y+Y+C/2+C/2 data
gb_linebuffer           #       sizeof_linebuffer      ; approx 18K

; raw output buffer contains pure YCC for a single line
; from here the triplets are converted as necessary and
; written out to user's buffer
gb_lineoutbuf           #       sizeof_lineoutbuf      ; approx 9K



; a few extra buffers required when reading the high
; resolution images

sizeof_intlinebuffer  *  (x_Base * 6)
sizeof_tempbufC       *  x_Base
sizeof_huffcodetable  *  (256 * sizeof_hctentry)

gb_int_linebuffer       #       sizeof_intlinebuffer   ; intermediate line buffer - approx 4.5K
gb_tempbufC1            #       sizeof_tempbufC
gb_tempbufC2            #       sizeof_tempbufC

; huffman code decoding tables for 4Base
gb_Y4codetable          #       sizeof_huffcodetable

; huffman code decoding tables for 16Base
gb_Ycodetable           #       sizeof_huffcodetable
gb_C1codetable          #       sizeof_huffcodetable
gb_C2codetable          #       sizeof_huffcodetable



;-------------------------------------------------------
workspace_end           #       0
sizeof_workspace        *       workspace_end - workspace_start


 GBLA wsize
wsize SETA sizeof_workspace
 ! 0, "(workspace size = $wsize)"



 [ ( ((:INDEX:workspace_end) - (:INDEX:cd_sectorbuffers)) < (16*16*16*4))
 ! 1, "Total buffer sizes are not big enough for the 16K req'd for ICT scratch space"
 ]



;-----------------------------------------------------------------------------------
; PhotoCD pcd open-file-information-block data structure
;-----------------------------------------------------------------------------------

; everything based on words for simplicity


                    ^   0
;-------------------------------------------------------
pcd_magic           #   4               ; block identifier (= "PRL!")
pcd_next            #   4               ; pointer to next info block

pcd_filehandle      #   4               ; RISC-OS file handle
pcd_filesize        #   4               ; size of image file

pcd_pacno           #   4               ; Pac number (0=overview)
;-------------------------------------------------------
sizeof_pcdcommon    #   0



; Following, are two parallel definitions for the rest of the structure
; One is for Overview Pacs only, the other is for Image Pacs


; ... for Overview Pacs

                    ^   sizeof_pcdcommon
;-------------------------------------------------------
pcd_numimages       #   4               ; number of images in overview pac
pcd_attributes      #   opa_MaxThumbnails   ; flag byte for each thumbnail

        AlignSpace
;-------------------------------------------------------
sizeof_pcdovwpac    #   0


; ... for Image Pacs

                    ^   sizeof_pcdcommon
;-------------------------------------------------------
pcd_imgno           #   4               ; 'image no' as stored in the Pac
pcd_rotation        #   4               ; default transform
pcd_maxstep         #   4               ; maximum resolution step
pcd_ipeclaimed      #   4               ; IPE claimed/present

pcd_pos4base        #   4               ; file ptr of start of 4Base
pcd_pos16base       #   4               ; file ptr of start of 16Base
pcd_posipe          #   4               ; file ptr of start of IPE
pcd_huffid4         #   4               ; huffman table ID for 4Base

;-------------------------------------------------------
sizeof_pcdimgpac    #   0





;-----------------------------------------------------------------------------------
; PhotoCD Bitmap Data Block
;-----------------------------------------------------------------------------------


                    ^   0
;-------------------------------------------------------
        [ Switch_RiscOsStyleCoords
bdb_left            #   4               ; X position of bottom left of image
bdb_bottom          #   4               ; Y position of bottom left of image
bdb_right           #   4               ; X position of top right of image
bdb_top             #   4               ; Y position of top right of image
        |
bdb_left            #   4               ; X position of top left of image
bdb_top             #   4               ; Y position of top left of image
bdb_right           #   4               ; X position of bottom right of image
bdb_bottom          #   4               ; Y position of bottom right of image
        ]

bdb_flags           #   4               ; miscellaneous flags

bdb_colourformat    #   4               ; Colour format
bdb_planeoffset     #   4               ; Plane offset
bdb_columnoffset    #   4               ; Column offset

bdb_paletteentries  #   4               ; number of palette entries
bdb_palettetable    #   4               ; ptr to palette table
;-------------------------------------------------------
sizeof_bdb          #   0





        END
