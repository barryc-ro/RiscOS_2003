#ifndef flex_H
#define flex_H

/*flex.h - provide memory allocation for interactive programs*/

typedef struct flex_rec *flex_ptr;

/* ----------------------------- flex_alloc -------------------------------
 * Description:   Allocates n bytes of store, obtained from the Wimp
 *
 * Parameters:    flex_ptr anchor -- to be used to access allocated store
 *                int n -- number of bytes to be allocated
 *
 * Returns:       0 == failure, 1 == success
 *
 * Other Info:    You should pass the & of a pointer variable as the first
 *                parameter. The allocated store MUST then be accessed
 *                indirectly, through this, ie. (*anchor)[0] ..(*anchor)[n]
 *                This is important since  the allocated store may later be
 *                moved (it's a shifting heap!!). If there's not enough
 *                store returns zero leaving anchor unchanged.
 */

int flex_alloc (flex_ptr anchor, int n);

/* ------------------------------ flex_free -------------------------------
 * Description:   Frees the previously allocated store
 *
 * Parameters:    flex_ptr anchor -- pointer to allocated store
 *
 * Returns:       void
 *
 * Other Info:    *anchor will be set to 0
 */

void flex_free (flex_ptr anchor);

/* ------------------------------- flex_size ------------------------------
 * Description:   Informs caller of the number of bytes allocated
 *
 * Parameters:    flex_ptr -- pointer to allocated store
 *
 * Returns:       number of allocated bytes
 *
 * Other Info:    None
 */

int flex_size (flex_ptr);

/* --------------------------- flex_extend --------------------------------
 * Description:   Extend ot truncate the store area to have a new size
 *
 * Parameters:    flex_ptr -- pointer to allocated store
 *                int newsize -- new size of store
 * Returns:       0 == failure, 1 == success
 *
 * Other Info:    None
 */

int flex_extend (flex_ptr, int newsize);

/* --------------------------- flex_midextend -----------------------------
 * Description:   Extend or truncate store, at any point
 *
 * Parameters:    flex_ptr -- pointer to allocated store
 *                int at -- location within the allocated store
 *                int by -- extent
 *
 * Returns:       0 == failure, 1 == success
 *
 * Other Info:    If by is +ve, then store is extended, and locations above
 *                "at" are copied up by "by"
 *                If by is -ve, then store is reduced, and any bytes beyond
 *                "at" are copied down to "at"+"by"
 */

int flex_midextend (flex_ptr, int at, int by);

/* ---------------------------- flex_init ---------------------------------
 * Description:   Initialise store allocation module
 *
 * Parameters:    void
 *
 * Returns:       void
 *
 * Other Info:    Must be called before any other functions in this module
 */

void flex_init (void);

#endif
