/*menus.c - useful functions for doing things to menus*/

/*From CLib*/
#include <stddef.h>
#include <string.h>

/*From OSlib*/
#include "help.h"
#include "macros.h"
#include "os.h"
#include "wimp.h"

/*From Support*/
#include "application.h"
#include "callback.h"
#include "riscos.h"
#include "trace.h"
#include "menus.h"

static wimp_menu *Menu;
static menus_selection_fn *Selection_Fn;
static menus_help_fn *Menu_Help_Fn;
static menus_closed_fn *Closed_Fn;
static void *H;

static os_error *Selection (void *s, void *d, bool *unclaimed)

{  os_error *error = NULL;
   wimp_selection *selection = &((wimp_block *) d)->selection;
   wimp_pointer pointer;
   bool reopen;

   NOT_USED (s)
   NOT_USED (unclaimed)

   tracef ("Selection\n");
   if ((error = xwimp_get_pointer_info (&pointer)) != NULL)
      goto finish;
   reopen = (pointer.buttons & wimp_CLICK_ADJUST) != NONE;

   if (Selection_Fn != NULL && (error = (*Selection_Fn) (selection,
         reopen, H)) != NULL)
      goto finish;

   if (reopen)
   {  if ((error = xwimp_create_menu (Menu, SKIP, SKIP)) != NULL)
         goto finish;
   }
   else
   {  if (Closed_Fn != NULL && (error = (*Closed_Fn) (H)) != NULL)
         goto finish;
   }

finish:
   return error;
}

static os_error *Menu_Help (void *s, void *d, bool *unclaimed)

{  os_error *error = NULL;
   wimp_message *message = &((wimp_block *) d)->message;
   help_message_request *request =
         (help_message_request *) &message->data;
   wimp_selection selection;

   NOT_USED (s)

   tracef ("Menu_Help\n");
   if ((error = xwimp_get_menu_state (wimp_GIVEN_WINDOW_AND_ICON,
         &selection, request->w, request->i)) != NULL)
      goto finish;

   if (selection.items [0] != -1)
   {  /*The given window is part of the menu tree.*/
      if (Menu_Help_Fn != NULL && (error = (*Menu_Help_Fn) (&selection,
            message->sender, message->my_ref, request, H)) != NULL)
         goto finish;

      *unclaimed = FALSE;
      /*Don't let the rest of the application see this!*/
   }

finish:
   return error;
}

static os_error *Closed (void *s, void *d, bool *unclaimed)

{  os_error *error = NULL;

   NOT_USED (s)
   NOT_USED (d)
   NOT_USED (unclaimed)

   tracef ("Closed\n");
   if (Closed_Fn != NULL && (error = (*Closed_Fn) (H)) != NULL)
      goto finish;

finish:
   return error;
}

os_error *menus_open (wimp_menu *menu, os_coord *pos, void *h,
      menus_selection_fn *selection_fn, menus_help_fn *help_fn,
      menus_closed_fn *closed_fn)

   /*Opens the menu and registers its callback. If |menu| is NULL,
      initialise for subsequent use.*/

{  os_error *error = NULL;
   callback_l app_l = application_list; /*cache*/

   tracef ("menus_open\n");
   if (menu == NULL)
   {  if
      (  (error = callback_register (app_l, &Selection, SKIP, 1,
               wimp_MENU_SELECTION)) != NULL ||
         (error = callback_register (app_l, &Menu_Help, SKIP, 2,
               wimp_USER_MESSAGE_RECORDED, message_HELP_REQUEST)) !=
               NULL ||
         (error = callback_register (app_l, &Closed, SKIP, 2,
               wimp_USER_MESSAGE, message_MENUS_DELETED)) != NULL
      )
         goto finish;
   }
   else
   {  /*Register the event handler for this menu.*/
      Menu         = menu;
      Selection_Fn = selection_fn;
      Menu_Help_Fn = help_fn;
      Closed_Fn    = closed_fn;
      H            = h;

      if ((error = xwimp_create_menu (Menu, pos->x, pos->y)) != NULL)
         goto finish;
   }

finish:
   return error;
}

os_error *menus_set_width (wimp_menu *menu)

{  int width, entry;
   os_error *error = NULL;

   width = strlen ((menu->entries [0].menu_flags &
         wimp_MENU_TITLE_INDIRECTED) == NONE? menu->title_data AS
         text: menu->title_data AS indirected_text.text);

   entry = 0;
   do
      (void) MAXAB (width, strlen ((menu->entries [entry].icon_flags &
         wimp_ICON_INDIRECTED) == NONE? menu->entries [entry].data AS
         text: menu->entries [entry].data AS indirected_text.text));
   while ((menu->entries [entry++].menu_flags & wimp_MENU_LAST) ==
        NONE);

   menu->width = width*wimp_CHAR_XSIZE;

/*finish:*/
   return error;
}
