#include "colourtrans.h"
#include "draw.h"
#include "os.h"
#include "osspriteop.h"
#include "wimp.h"

#include "x.h"
#include "spritefile.h"
#include "trfm.h"

x_STATIC_ERROR (Bad_Mode, 1, "Bad mode")

void spritefile_render (bits flags, osspriteop_header const *sprite,
      int size, os_trfm const *trfm, os_box const *clip)

{  osspriteop_trans_tab *table;
   bool narrow_entries = (flags & spritefile_NARROW_ENTRIES) != NONE;
   os_PALETTE (20) palette;
   int log2_bpp;

   if ((sprite->image - sizeof (osspriteop_header))/sizeof (os_colour_pair)
         == 0)
   {  if ((os_read_mode_variable (sprite->mode, os_MODEVAR_LOG2_BPP,
            &log2_bpp) & _C) != NONE)
         x_THROW (Bad_Mode);

      if (log2_bpp < 3)
         wimp_read_true_palette ((os_palette *) &palette);

      switch (log2_bpp)
      {  case 0:
            palette.entries [1] = palette.entries [7];
         break;

         case 1:
            palette.entries [1] = palette.entries [2];
            palette.entries [2] = palette.entries [4];
            palette.entries [3] = palette.entries [7];
         break;
      }

      colourtrans_generate_table
      (  sprite->mode,
         log2_bpp < 3?
               (os_palette *) &palette:
               colourtrans_CURRENT_PALETTE,
         colourtrans_CURRENT_MODE,
         colourtrans_CURRENT_PALETTE,
         table = x_alloc
         (  colourtrans_generate_table
            (  sprite->mode,
               log2_bpp < 3?
                     (os_palette *) &palette:
                     colourtrans_CURRENT_PALETTE,
               colourtrans_CURRENT_MODE,
               colourtrans_CURRENT_PALETTE,
               NULL,
               colourtrans_GIVEN_SPRITE |
                     (narrow_entries? NONE: colourtrans_RETURN_WIDE_ENTRIES),
               SKIP,
               SKIP
            )
         ),
         colourtrans_GIVEN_SPRITE |
               (narrow_entries? NONE: colourtrans_RETURN_WIDE_ENTRIES),
         SKIP,
         SKIP
      );
   }
   else
      colourtrans_generate_table_for_sprite
      (  osspriteop_UNSPECIFIED,
         (osspriteop_id) sprite,
         colourtrans_CURRENT_MODE,
         colourtrans_CURRENT_PALETTE,
         table = x_alloc
         (  colourtrans_generate_table_for_sprite
            (  osspriteop_UNSPECIFIED,
               (osspriteop_id) sprite,
               colourtrans_CURRENT_MODE,
               colourtrans_CURRENT_PALETTE,
               NULL,
               colourtrans_GIVEN_SPRITE |
                     (narrow_entries? NONE: colourtrans_RETURN_WIDE_ENTRIES),
               SKIP,
               SKIP
            )
         ),
         colourtrans_GIVEN_SPRITE |
               (narrow_entries? NONE: colourtrans_RETURN_WIDE_ENTRIES),
         SKIP,
         SKIP
      );

   osspriteop_put_sprite_trfm (osspriteop_PTR, osspriteop_UNSPECIFIED,
         (osspriteop_id) sprite, NONE, NULL,
         os_ACTION_USE_MASK |
              (narrow_entries? NONE: osspriteop_GIVEN_WIDE_ENTRIES),
         trfm, table);

   x_free (table);
}

void spritefile_bbox (bits flags, osspriteop_header const *sprite,
      int size, os_trfm const *trfm, os_box *bbox)

{  os_box box;
   os_mode mode;
   int width, height, xeig, yeig;

   /*Get bbox of sprite into box.*/
   osspriteop_read_sprite_size (osspriteop_PTR, osspriteop_UNSPECIFIED,
         (osspriteop_id) sprite, &width, &height, NULL, &mode);

   if ((os_read_mode_variable (mode, os_MODEVAR_XEIG_FACTOR, &xeig) &
         _C) != NONE || (os_read_mode_variable (mode,
         os_MODEVAR_YEIG_FACTOR, &yeig) & _C) != NONE)
      x_THROW (Bad_Mode);

   box.x0 = box.y0 = 0;
   box.x1 = (width << xeig)*draw_OS_UNIT;
   box.y1 = (height << yeig)*draw_OS_UNIT;

   trfm_box (bbox, trfm, &box);
}

void spritefile_declare_fonts (bits flags,
      osspriteop_header const *sprite, int size)

{  NOT_USED (flags)
   NOT_USED (sprite)
   NOT_USED (size)
}
