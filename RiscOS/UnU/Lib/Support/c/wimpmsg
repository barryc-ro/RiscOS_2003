/* Title:   wimpmsg.c
 * Purpose: functions for wimp message handling
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "os.h"

#include "wimpmsg.h"
#include "m.h"
#include "x.h"

x_STATIC_ERROR (No_Memory, os_GLOBAL_NO_MEM, "NoMem")

static event_message_handler_item *Handlers = 0;   /* the list of all wimp message handlers */

/* ----------------------------------- dispatching a wimp message ----------------------------------- */
void wimpmsg_dispatch (wimp_block *poll_block, toolbox_block *id_block)

{  event_message_handler_item *h;

  id_block = id_block;

   tracef ("wimpmsg_dispatch\n");
   for (h = Handlers; h != NULL; h = h->next)
      if (h->handler != NULL && (h->msg_no == -1 ||
            h->msg_no == poll_block->message.action))
         if (h->handler (&poll_block->message, h->handle))
            return;
}

void wimpmsg_register_message_handler (int msg_no,
      event_message_handler *handler, void *handle)

{  event_message_handler_item *h, *new_h;

   for (h = Handlers; h != NULL; h = h->next)
      if (h->handler == handler && h->handle == handle &&
            h->msg_no == msg_no)
         return;

   if ((new_h = m_ALLOC (sizeof *new_h)) == NULL)
        messagetrans_error_lookup (No_Memory, NULL, NULL, 0, NULL, NULL,
              NULL, NULL);

   new_h->msg_no     = msg_no;
   new_h->handler    = handler;
   new_h->handle     = handle;
   new_h->next       = Handlers;
   Handlers = new_h;
}

void wimpmsg_deregister_message_handler (int msg_no,
     event_message_handler *handler, void *handle)

{  event_message_handler_item **h;

   /*search for exact match of handler, list and handle*/
   for (h = &Handlers; *h != NULL; h = &(*h)->next)
      if ((*h)->handler == handler && (*h)->handle == handle &&
            (*h)->msg_no == msg_no)
      {  event_message_handler_item *hh = *h;

         *h = hh->next;
         m_FREE (hh, sizeof *hh);
      }
}
