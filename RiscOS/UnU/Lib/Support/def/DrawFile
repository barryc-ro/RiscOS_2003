//The DrawFile module

TITLE DrawFile;

NEEDS OS, OSSpriteOp, Draw, Font, Wimp, JPEG;

CONST
   //Errors
   Error_DrawFileNotDraw   = .Bits: 0x20C00,
   Error_DrawFileVersion   = .Bits: 0x20C01,
   Error_DrawFileFontTab   = .Bits: 0x20C02,
   Error_DrawFileBadFontNo = .Bits: 0x20C03,
   Error_DrawFileBadMode   = .Bits: 0x20C04,
   Error_DrawFileBadFile   = .Bits: 0x20C05,
   Error_DrawFileBadGroup  = .Bits: 0x20C06,
   Error_DrawFileBadTag    = .Bits: 0x20C07,
   Error_DrawFileSyntax    = .Bits: 0x20C08,
   Error_DrawFileFontNo    = .Bits: 0x20C09,
   Error_DrawFileAreaVer   = .Bits: 0x20C0A,
   Error_DrawFileNoAreaVer = .Bits: 0x20C0B;

//Object types
CONST
   DrawFile_TypeFontTable       = .Int:  0,
   DrawFile_TypeText            = .Int:  1,
   DrawFile_TypePath            = .Int:  2,
   DrawFile_TypeSprite          = .Int:  5,
   DrawFile_TypeGroup           = .Int:  6,
   DrawFile_TypeTagged          = .Int:  7,
   DrawFile_TypeTextArea        = .Int:  9,
   DrawFile_TypeTextColumn      = .Int: 10,
   DrawFile_TypeOptions         = .Int: 11,
   DrawFile_TypeTrfmText        = .Int: 12,
   DrawFile_TypeTrfmSprite      = .Int: 13,
   DrawFile_TypeJPEG            = .Int: 16;

//Values for DrawFile_PathStyle bits
CONST
   //shift by DrawFile_PathJoinShift
   DrawFile_PathMitred   = .Bits: 0,
   DrawFile_PathRound    = .Bits: 1,
   DrawFile_PathBevelled = .Bits: 2,

   //shift by DrawFile_Path{Start,End}Shift
   DrawFile_PathButt     = .Bits: 0,
   DrawFile_PathRound    = .Bits: 1,
   DrawFile_PathSquare   = .Bits: 2,
   DrawFile_PathTriangle = .Bits: 3,

   DrawFile_PathJoinShift      = .Int: 0, //shift
   DrawFile_PathJoin           = .Bits: 0b11, //mask
   DrawFile_PathEndShift       = .Int: 2, //shift
   DrawFile_PathEnd            = .Bits: 0b1100, //mask
   DrawFile_PathStartShift     = .Int: 4, //shift
   DrawFile_PathStart          = .Bits: 0b110000, //mask
   DrawFile_PathWindingEvenOdd = .Bits: 0b1000000,
   DrawFile_PathDashed         = .Bits: 0b10000000,
   DrawFile_PathCapWidthShift  = .Int: 16, //shift
   DrawFile_PathCapWidth       = .Bits: 0b111111110000000000000000, //mask
   DrawFile_PathCapLengthShift = .Int: 24, //shift
   DrawFile_PathCapLength      = .Bits: 0b11111111000000000000000000000000; //mask

CONST
   DrawFile_TextKern        = .Bits: 0b1,
   DrawFile_TextRightToLeft = .Bits: 0b10,
   DrawFile_TextUnderline   = .Bits: 0b100;

//Flags values for DrawFile_Render
CONST
   DrawFile_RenderBBoxes        = .Bits: 0b1,
   DrawFile_RenderSuppress      = .Bits: 0b10,
   DrawFile_RenderGivenFlatness = .Bits: 0b100;

//Flags values for DrawFile_DeclareFonts
CONST
   DrawFile_NoDownload = .Bits: 0b1;

//Types for the contents of a Draw file
//Some auxiliary definitions to start with
TYPE
   DrawFile_FontDef = .Struct (.Byte: font_index, .Char: font_name ...),
   DrawFile_TextStyle = .Struct (.Byte: font_index, [3] .Byte: reserved),
   DrawFile_PathStyle = .Struct (.Byte: flags, .Byte: reserved,
         .Byte: cap_width, .Byte: cap_length);

TYPE
   DrawFile_FontTable = //type 0
         .Struct (DrawFile_FontDef: font_def ...),

   DrawFile_Text = //type 1
      .Struct
      (  OS_Box: bbox,
         OS_Colour: fill,
         OS_Colour: bg_hint,
         DrawFile_TextStyle: style,
         .Int: xsize,
         .Int: ysize,
         OS_Coord: base,
         .Char: text ...
      ),

   DrawFile_Path = //type 2
      .Struct
      (  OS_Box: bbox,
         OS_Colour: fill,
         OS_Colour: outline,
         .Int: width,
         DrawFile_PathStyle: style,
         Draw_Path: path
      ),

   DrawFile_PathWithPattern = //type 2 again
      .Struct
      (  OS_Box: bbox,
         OS_Colour: fill,
         OS_Colour: outline,
         .Int: width,
         DrawFile_PathStyle: style,
         Draw_DashPattern: pattern,
         Draw_Path: path  //not very useful
      ),

   DrawFile_Sprite = //type 3
      .Struct
      (  OS_Box: bbox,
         OSSpriteOp_Header: header,
         .Byte: data ...
      ),

   DrawFile_Group = //type 6
      .Struct
      (  OS_Box: bbox,
         [12] .Char: name,
         //DrawFile_Object: objects, //... CAN'T coz it's cyclic
         .Int: objects ... //do this instead
      ),

   DrawFile_Tagged = //type 7
      .Struct
      (  OS_Box: bbox,
         .Int: tag,
         //DrawFile_Object: object, //... CAN'T coz it's cyclic TOO
         .Int: object ... //need this anyway
      ),

   DrawFile_TextColumn = //type 8, but not really
      .Struct
      (  OS_Box: box
      ),

   DrawFile_TextColumnList =
      .Struct
      (  .Struct
         (  .Int: type,
            .Int: size,
            DrawFile_TextColumn: data
         ): columns ...
      ),

   DrawFile_AreaText =
      .Struct
      (  .Int: type, //always 0
         [2] .Int: reserved,
         OS_Colour: fill,
         OS_Colour: bg_hint,
         .Char: text ...
      ),

   DrawFile_TextArea = //type 9
      .Struct
      (  OS_Box: bbox,
         DrawFile_TextColumnList: header,
         DrawFile_AreaText: area_text
      ),

   //text column - header only type 10

   DrawFile_Options = //type 11
      .Struct
      (  OS_Box: bbox,
         .Int: paper_size,
         .Bits: paper_options,
         Float: grid_spacing,
         .Int: grid_division,
         .Bool: isometric,
         .Bool: auto_adjust,
         .Bool: show,
         .Bool: lock,
         .Bool: cm,
         .Int: zoom_mul,
         .Int: zoom_div,
         .Bool: zoom_lock,
         .Bool: toolbox,
         .Bits: entry_mode,
         .Int: undo_size
      ),

   DrawFile_TrfmText = //type 12
      .Struct
      (  OS_Box: bbox,
         OS_Trfm: trfm,
         .Bits: flags,
         OS_Colour: fill,
         OS_Colour: bg_hint,
         DrawFile_TextStyle: style,
         .Int: xsize,
         .Int: ysize,
         OS_Coord: base,
         .Char: text ...
      ),

   DrawFile_TrfmSprite = //type 13
      .Struct
      (  OS_Box: bbox,
         OS_Trfm: trfm,
         OSSpriteOp_Header: header,
         .Byte: data ...
      ),

   DrawFile_JPEG = //type 16
      .Struct
      (  OS_Box: bbox,
         .Int: width,
         .Int: height,
         .Int: xdpi,
         .Int: ydpi,
         OS_Trfm: trfm,
         .Int: len,
         JPEG_Image: image
      );

TYPE
   DrawFile_Object =
      .Struct
      (  .Int: type,
         .Int: size,
         .Union
         (  DrawFile_FontTable:       font_table,
            DrawFile_Text:            text,
            DrawFile_Path:            path,
            DrawFile_PathWithPattern: path_with_pattern,
            DrawFile_Sprite:          sprite,
            DrawFile_Group:           group,
            DrawFile_Tagged:          tagged,
            DrawFile_TextColumn:      text_column,
            DrawFile_TextArea:        text_area,
            DrawFile_Options:         options,
            DrawFile_TrfmText:        trfm_text,
            DrawFile_TrfmSprite:      trfm_sprite,
            DrawFile_JPEG:            jpeg
         ): data
      );

TYPE
   DrawFile_Diagram =
      .Struct
      (  [4] .Char: tag, //'Draw'
         .Int: major_version,
         .Int: minor_version,
         [12] .Char: source,
         OS_Box: bbox,
         DrawFile_Object: objects ...
      );

SWI
   DrawFile_Render =
   (  NUMBER 0x45540*,
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> DrawFile_Diagram: diagram,
         R2 = .Int: size,
         R3 -> OS_Trfm: trfm,
         R4 -> OS_Box: clip,
         R5 = .Int: flatness
      )
   );

//   Renders the |size| bytes of |diagram| using the given transformation
//|trfm|. A rectangle |clip| may be assed in; this allows DrawFile_Render to
//clip objects that will not be visible without plotting them. |Flags| must
//be nought.

//   This SWI may also be used to print |diagram|, by enclosing it in
//appropriate PDriver calls. Service_DrawObjectRender is called for unrecognised
//objects.

SWI
   DrawFile_BBox =
   (  NUMBER 0x45541*,
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> DrawFile_Diagram: diagram,
         R2 = .Int: size,
         R3 -> OS_Trfm: trfm,
         R4 = .Ref OS_Box: bbox
      )
   );

//   Returns a bbox for the |size| bytes of |diagram| in |buffer|, in O S
//units. This box bounds the diagram after it has been transformed by the trans-
//formation.

SWI
   DrawFile_DeclareFonts =
   (  NUMBER 0x45542*,
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> DrawFile_Diagram: diagram,
         R2 = .Int: size
      )
   );

//   Declares the fonts used in a draw file. May be used after PDriver_SelectJob
//if the printer supports it. It does not terminate the list of fonts declared:
//pdriver_declare_font (0, NULL NONE); must be done when all fonts have been
//declared.

//For Service_DrawObjectRender
TYPE
   DrawFile_RenderState =
      .Struct
      (  .Ref DrawFile_Object: object,
         .Ref DrawFile_Diagram: diagram,
         .Ref DrawFile_Object: font_table,
         .Bits: flags, //as passed to DrawFile_Render
         .Ref OS_Trfm: trfm,
         .Ref OS_Box: clip,
         .Int: flatness,
         .Ref OS_Error: error
      );

//Called when an unknown object is to be rendered
SWI
   Service_DrawObjectRender =
   (  NUMBER 0x30,
      ENTRY
      (  R0 = .Int: type,
         R1 # 0x45540 "Render unknown Draw object in Draw file",
         R2 -> DrawFile_RenderState: state
      ),
      EXIT
      (  R1! = .Bool: unclaimed
   )  );
//Should be claimed if the object type is recognised. If an error is
//encountered during rendering, an OS_Error pointer may be put in the
//DrawFile_RenderState structure, but this should only be done if the pointer
//currently there is 0. The DrawFile module will attempt to render all
//objects, but only return the first error found.

//For Service_DrawObjectDeclareFonts
TYPE
   DrawFile_DeclareFontsState =
      .Struct
      (  .Ref DrawFile_Object: object,
         .Ref DrawFile_Diagram: diagram,
         .Ref DrawFile_Object: font_table,
         .Bits: flags,
         .Ref OS_Error: error
      );

//Called when an unknown object's fonts are to be declared
SWI
   Service_DrawObjectDeclareFonts =
   (  NUMBER 0x30,
      ENTRY
      (  R0 = .Int: type,
         R1 # 0x45541 "Declare fonts for unknown Draw object in Draw file",
         R2 -> DrawFile_DeclareFontsState: state
      ),
      EXIT
      (  R1! = .Bool: unclaimed
   )  )
//   Declares all the fonts used by the file. Must be followed by a call to
//PDriver_DeclareFont to terminate the font list. Should be claimed if the
//object type is recognised.
