/*application.c - useful functions for windowing applications*/

/*From CLib*/
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*From OSLib*/
#include "os.h"
#include "wimp.h"
#include "wimpreadsysinfo.h"

/*From Support*/
#include "application.h"
#include "task.h"
#include "trace.h"

bool application_polling_idle; /*set if Wimp_PollIdle is required*/

int application_timeout; /*WIMP timeout, to be passed to Wimp_PollIdle*/

bool application_quit; /*flag to be set when application() is to return*/

int *application_pollword; /*address to be set to a pollword, if required*/

callback_l application_list;

task_r application_task;

static wimp_block Block;
/*------------------------------------------------------------------------*/
os_error *application_initialise (char *programme,
      wimp_message_list *messages)

   /*Call Wimp_Initialise and create the block for |application_task|.*/

{  os_error *error = NULL, *e;
   int version;
   wimp_t task;
   bool done_initialise = FALSE, done_new = FALSE;

   tracef ("application_initialise\n");

   /*Required to start up as a new task.*/
   if ((e = xwimpreadsysinfo_version (&version)) != NULL)
   {  if (e->errnum == error_WIMP_BAD_SYS_INFO)
         version = wimp_VERSION_RO2;
      else
      {  error = e;
         goto finish;
   }  }

   tracef ("Wimp version %d\n" _ version);
   if (version >= wimp_VERSION_RO35)
      version = wimp_VERSION_RO35;
   else if (version >= wimp_VERSION_RO3)
      version = wimp_VERSION_RO3;
   else if (version >= wimp_VERSION_RO30)
      version = wimp_VERSION_RO30;

   if ((error = xwimp_initialise (version, programme, messages,
         NULL, &task)) != NULL)
      goto finish;
   done_initialise = TRUE;

   if ((error = task_new (programme, task, &application_task)) != NULL)
      goto finish;
   done_new = TRUE;

   application_list = task_list (application_task);

finish:
   if (error != NULL)
   {  if (done_new)
         task_delete (application_task);

      if (done_initialise)
      {  os_error *error1 = xwimp_close_down (0);
         if (error == NULL) error = error1;
   }  }

   if (error != NULL)
      tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);
   return error;
}
/*------------------------------------------------------------------------*/
os_error *application_terminate (void)

   /* Call Wimp_CloseDown and delete |application_task|.*/

{  os_error *error = NULL, *error1;

   tracef ("application_terminate\n");

   error1 = xwimp_close_down ((wimp_t) 0);
   if (error == NULL) error = error1;

   error1 = task_delete (application_task);
   if (error == NULL) error = error1;

/*finish:*/
   if (error != NULL)
      tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);
   return error;
}
/*------------------------------------------------------------------------*/
void application (void)

   /*Sits in a loop, processing |application_task|. Error processing note:
      wimp_{poll,poll_idle} report any error they see (rather than returning
      it), with the exception of argument checking errors: so it is
      appropriate to abort the loop and report the error if this happens. The
      callbacks made can also return their own error, and we just report
      these unless in a redraw event.*/

{  int event;
   os_error *error = NULL, *error1;

   tracef ("application\n");

   do
   {  if (!application_polling_idle)
      {  if ((error = xwimp_poll (task_mask (application_task), &Block,
               application_pollword, &event)) != NULL)
            goto finish;
      }
      else
      {  if ((error = xwimp_poll_idle (task_mask (application_task), &Block,
               application_timeout, application_pollword, &event)) != NULL)
            goto finish;
      }

      error1 = task_callback (application_task, NULL, event, &Block, NULL);
      if (event != wimp_REDRAW_WINDOW_REQUEST)
         task_report_error (application_task, error1);
   }
   while (!application_quit);

finish:
   task_report_error (application_task, error);
}
/*------------------------------------------------------------------------*/
bits application_claim (int event)

{  tracef ("application_claim\n");

   return task_claim (application_task, event);
}
/*------------------------------------------------------------------------*/
bits application_release (int event)

{  tracef ("application_release\n");

   return task_release (application_task, event);
}
/*------------------------------------------------------------------------*/
os_error *application_report_error (os_error *error)

{  tracef ("application_report_error\n");

   return task_report_error (application_task, error);
}
