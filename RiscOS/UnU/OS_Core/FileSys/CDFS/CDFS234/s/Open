; Open

; PROCS:

; NumberOfNextFreeFileHandle
; INFO                              ; RISC OS 2 only
; AnotherDriveHasBeenAdded
; DisplayHeader                     ; RISC OS 2 only
; CheckDiscName
; ValidatePathName
; ShuffleStringUp       ( used by 'Directory' )
; ConvertBufferSizeToReal
; ConvertRealBufferToSize

;**************************************************************************
NumberOfNextFreeFileHandle ; Returns R0 = number of free handle, 0 if fail
;**************************************************************************

 STASH "R1, R3,R14"

 LDR R1, =:INDEX:OpenFileList       ; R1 -> start of list
 ADD R1, R1, R12                    ;

 MOV R3, #MAXNUMBEROFOPENFILES

search_for_space                    ; look through list

 LDR R14, [ R1 ], #4

 SUBS R3, R3, #1
 TEQNE R14, #0
 BNE search_for_space

 TEQ R14, #0
 RSBEQ R0, R3, #MAXNUMBEROFOPENFILES
 MOVNE R0, #0                       ; If not found then R0 = 0

 GRABS "R1, R3,PC"

 LTORG


 [ RISC_OS = 2
;***************************************************************************
INFO ROUT ; R0 -> pathname, R1 -> details, R2 -> buffer for info
      ; RETURNS R2 -> end of buffer
; only processes one object !!!!!!!!

;***************************************************************************

 STASH "R0 - R1, R3 - R7, R14"

 ; Format for buffer - filename, WR, filetype, time, date, size

 MOV R7, #HARDSPACE

 MOV R6, R2                    ; R6 -> nice place for next details

 ADD R2, R1, #OBJECTNAMEOFFSET ; R1 -> start of entry

 LDRB R3, [ R2 ], #1           ; No entry there !
 STRB R3, [ R6 ], #1
 TEQ R3, #0                    ;
 SUBEQ R2, R6, #1
 GRABS "R0 - R1, R3 - R7, PC", EQ       ;

that_ex_feeling                ; File name
 LDRB R3, [ R2 ], #1           ;
 STRB R3, [ R6 ], #1           ;
 TEQ R3, #0                    ;
 BNE that_ex_feeling           ;


 SUB R2, R2, R1                          ;  R2 = number of spaces to do
 SUBS R2, R2, #OBJECTNAMEOFFSET + MAXLENGTHOFNAME + 2
                                         ; Pad name with spaces
 SUB R6, R6, #1                          ;
                                         ;
more_spaces                              ;
 STRLTB R7, [ R6 ], #1                   ;
 ADDLTS R2, R2, #1                       ;
 BLT more_spaces

 LDRB R3, [ R1, #OBJECTTYPEOFFSET ]      ; attributes ALL FILES ARE LOCKED !
                                         ; READABLE, owner & public
 TEQ R3, #DIRECTORY                      ; directory
 MOVNE R4, #"L"                          ;
 MOVEQ R4, #"D"                          ;
 STRB R4, [ R6 ], #1                     ;
 MOVNE R4, #"R"                          ; file
 MOVEQ R4, #"L"                          ;
 STRB R4, [ R6 ], #1                     ;
 STRB R7, [ R6 ], #1                     ;
                                         ;
11
 TST R6, #3                              ; Pad with spaces for alignment
 STRNEB R7, [ R6 ], #1                   ;
 BNE %BT11


 LDR R3, [ R1, #LOADADDRESSOFFSET ]      ; R2 = file type
 MOV R2, R3, ASR #8                      ;
 LDR R3, =&FFF                           ;
 AND R2, R2, R3                          ;

 LDRB R3, [ R1, #OBJECTTYPEOFFSET ]      ; could be a directory
 TEQ R3, #DIRECTORY                      ;

 MOVNE R0, #18                           ; reason code to convert file type
                                         ;
 SWINE XOS_FSControl                     ; R2 & R3 = file type string

; ADREQL R4, NAMEDIRECTORY                ; 'Director'
 addr R4, NAMEDIRECTORY, EQ
 LDMEQIA R4, { R2, R3 }                  ;

 STMIA R6!, { R2, R3 }

 MOVEQ R2, #"y"                          ; 'y' of Directory
 MOVNE R2, #HARDSPACE                    ;
 STRB R2, [ R6 ], #1                     ;
 STRB R7, [ R6 ], #1                     ;


; FROM -10 TO -3 STEP 1

 MOV R5, #-10
12
 LDRB R2, [ R6, R5 ]
 TEQ R2, #&20
 STREQB R7, [ R6, R5 ]
 ADD R5, R5, #1
 CMP R5, #-3
 BLE %BT12

 MOV R5, R1

 ADD R0, R1, #TIMEDATEOFFSET           ; TIME
 MOV R1, R6                            ;
 MOV R2, #30                           ;
; ADRL R3, NULL                         ;
 addr R3, NULL
                                       ;
 SWI XOS_ConvertDateAndTime            ; ConvertStandardDateAndTime !!!!
 BVS Error

 STRB R7, [ R1 ], #1                   ; Seperate date from length

 LDR R0, [ R5, #LENGTHOFFSET ]         ; SIZE
 MOV R2, #13                           ; R0 = size, R1->buffer,R2=buffer size
                                       ;
 SWI XOS_ConvertFixedFileSize          ;
 BVS Error


 MOV R5, #3
15
 LDRB  R3, [ R0 ], #1
 TEQ R3, #32
 STREQB R7, [ R0, #-1 ]
 SUBS R5, R5, #1
 BNE %BT15
                                       ;
; STRB R7, [ R0 ]                       ;

14
 TST R1, #3
 STRNEB R7, [ R1 ], #1
 BNE %BT14

 MOV R4, #0
 STRB R4, [ R1, #-1 ]!

 MOV R2, R1

 GRABS "R0 - R1, R3 - R7, PC"

 ]



;***************************************************************************
AnotherDriveHasBeenAdded ROUT ; R0 = drive number requested

; If an error, then V set, R0 -> error message

;***************************************************************************

 STASH "R0 - R9, R14"

; R5 = drive number requested
; R6 = device id
; R7 -> sparecontrolblock_offset

 LDRB R6, numberofdrives           ; already know the drive number
 CMP R0, R6                        ;
 GRABS "R0 - R9, PC", LT           ;

;*******************
; Only allow the configured number of drives to be selected
;*******************

 LDR R6, maxnumberofdrives                   ; Error if not configged enough
 TEQ R6, #0
; BEQ %FT32

 SUBNES R6, R6, #1
 ; If 0 drives configged then make an exception

 RSBHSS R14, R0, R6                          ;
 GRAB "R0 - R9, R14", LT

 [ RISC_OS=2
 addr R0, BadDrive, LT                      ; Send error back to caller of
 ORRLTS PC, R14, #Overflow_Flag              ; this proc.
 |
 BLT         baddrive

 ]

32

;*******************

; R3 = device id
; R4 = card number
; R5 = LUN
; R6 = drive number requested
; R7 -> control block

 MOV R3, #0
 MOV R4, #0

;----------------------------
; Logical unit number support
;----------------------------

 [ Version >= 218

          MOV        r5, #0
 ]

;----------------------------

 MOV R6, R0


 ADD R7, R12, #:INDEX:sparecontrolblock


; 1. Find a drive that has been turned on

look_for_device


;**************
; CheckIDKnown                    ;
;**************

; R0 = composite id
; R1 -> list
; R2 -> end of list

 ORR R0, R3, R4, LSL #3

;----------------------------
; Added for version 2.18
;----------------------------

          ORR        r0, r0, r5, LSL #5

;----------------------------

 LDR R1, =:INDEX:ListOfDrivesAttached  ; R1 -> first entry
 ADD R1, R1, R12                       ;

 LDRB R2, numberofdrives               ; R2 -> last entry
 ADD R2, R1, R2                        ;

04

 LDRB R14, [ R1 ], #1

 CMP R1, R2
 BGT %FT05                       ; Reached end of list - so NOT FOUND

 TEQ R14, R0

 BNE %BT04

;***************
; Next device
;***************
01                       ; Found the drive - so don't bother to check

;---------------------------------
; Support for Logical Unit Numbers
;---------------------------------

 [ Version >= 218


   [ Version >= 220

; The new way - faster because it searches for devices with LUN 0 first
          ADD        r3, r3, #1                ; Next device id
          ANDS       r3, r3, #2_111

          ADDEQ      r5, r5, #1                ; New LUN
          ANDS       r5, r5, #2_111

          TEQEQ      r3, #0
          ADDEQ      r4, r4, #1                ; Next card
          TEQEQ      r4, #4                    ; Last card reached ?

   |

          ADD        r5, r5, #1                ; New LUN
          ANDS       r5, r5, #2_111

          ADDEQ      r3, r3, #1                ; Next device id
          ANDS       r3, r3, #2_111

          TEQEQ      r5, #0
          ADDEQ      r4, r4, #1                ; Next card
          TEQEQ      r4, #4                    ; Last card reached ?

    ]
 |

 ; The old way

 ADD R3, R3, #1                  ; Next device id
 ANDS R3, R3, #2_111             ; Next card
 ADDEQ R4, R4, #1                ; Screw the LUN
 TEQEQ R4, #4                    ; Last card reached ?

 ]

;---------------------------------

 BNE look_for_device

 GRAB "R0 - R9, R14"

 Debug "AnotherDriveHasBeenAdded returning error",NL

 [ RISC_OS=2
 addr R0, BadDrive               ; Could not find the drive - so error to
 ORRS PC, R14, #Overflow_Flag    ; caller
 |

baddrive
            STASH      "r1-r2, r14"
            addr       r0, baddrive_tag
            ADR        r1, message_block
            MOV        r2, #0
            SWI        XMessageTrans_ErrorLookup
            GRAB       "r1-r2, r14"
            ORRS       pc, r14, #Overflow_Flag
 ]



;**************
; CheckDevice                     ; Is device a CDROM drive ?
;**************
05

; Make sparecontrolblock = device id

; STASH R6

 MOV R8, #0


;----------------------------------
; Preserve the Logical Unit Numbers
;----------------------------------

 [ Version < 218

 MOV R5, #0

 ]

;----------------------------

 STMIA R7, { R3 - R5, R8 }
 STR R8, [ R7, #16 ]

; GRAB R6

; Request info from drive

 ; Make sure 'Z' set ( ADDS ... )


;-----------------------------------
; Not a good idea to forget the LUN
;-----------------------------------

 [ Version < 218

 MOV R5, #DEVICERETRYCOUNT         ; retry count = 0 ( and 'Z' = 1 )

 ]

;-----------------------------------

06

; 2. Add drive number to list

 SWI      XCD_Identify
 BVS      %BT01

 CMP      r2, #-1
 BEQ      %BT01

 MOV      r9, r2


; R9 = drive type


 LDRB R0, numberofdrives

 LDR R14, =:INDEX:ListOfDrivesAttached
 ADD R14, R12, R14

 ORR R2, R3, R4, LSL #3

;---------------------------------
; Support for logical unit numbers
;---------------------------------

 [ Version >= 218

            ORR        r2, r2, r5, LSL #5

 ]

;---------------------------------

 STRB R2, [ R14, R0 ]

 LDR R14, =:INDEX:DriveTypes
 ADD R14, R14, R12
 STRB R9, [ R14, R0 ]

 ADD R0, R0, #1
 STRB R0, numberofdrives

;************
; Set SCSIControl          ; set the error response of the drive
;************              ;

 MOV R0, #1
 SWI XCD_Control           ; R0 = error level, R7 -> control block


 LDRB R0, numberofdrives   ; Another drive been attached ?
                           ;
 CMP R0, R6                ;
                           ;

 BLE look_for_device

 GRABS "R0 - R9, PC"



 [ RISC_OS = 2
;***************************************************************************
DisplayHeader ROUT ; R0 -> pathname, R1 = drive number, R2 -> disc buffer
; These are NOT necessarily the CSD settings, can be anything
;***************************************************************************

; R9 -> disc buffer
; R10 = drive number
; R11 = HARDSPACE

 STASH "R0 - R11, R14"


 MOV R9, R2
 MOV R10, R1
 MOV R11, #HARDSPACE

;**************
; Display title string
;**************

                                 ; R1 -> start of current entry
 ADD R2, R12, #:INDEX:TempArea   ; R2 -> buffer for printing later

 MOV R8, R2

;****************
; Find the last leaf in the full pathname
;****************

 MOV R3, R0

; R3->path
; R7 should -> leaf

 MOV R7, R3
02

 LDRB R5, [ R3 ], #1
 TEQ R5, #"."
 MOVEQ R7, R3
 TEQ R5, #0
 BNE %BT02

03
 LDRB R5, [ R7 ], #1
 TEQ R5, #0
 STRNEB R5, [ R2 ], #1
 BNE %BT03

;**********************
; Space between path and disc name
;**********************

; R7 -> last characters displayed

 ADD R7, R8, #MAXLENGTHOFNAME + 8

04
 STRB R11, [ R2 ], #1
 CMP R2, R7

 BLE %BT04

20
 TST R2, #3
 STRNEB R11, [ R2 ], #1
 BNE %BT20

;**********************
; Put 'Disc' in header
;**********************

 LDR R14, DISCstring
 STR R14, [ R2 ], #4

 STRB R11, [ R2 ], #1      ; HARDSPACE

;**********************
; Put in disc name, R4 = drive number
;**********************

 MOV R0, R4
 MOV R1, R2
 MOV R2, R9
 BL GetDiscName              ; R0 = drive number, R1 -> put disc name
 MOV R0, R1
 BL CutSpace                 ; R0 -> name

 MOV R2, R0
26
 LDRB R14, [ R2 ], #1
 CMP R14, #32
 BGT %BT26

 STRB R11, [ R2, #-1 ]
 STRB R11, [ R2 ]
 STRB R11, [ R2 ], #1
21
 TST R2, #3
 STRNEB R11, [ R2 ], #1
 BNE %BT21

 MOV R5, #":"
 STRB R5, [ R2 ], #1

 MOV R0, R4                  ; Drive number of directory display
 MOV R1, R2                  ;
 MOV R2, #6                  ;
 SWI XOS_ConvertCardinal1    ;

 MOV R2, R1



 TST R2, #3                  ; Align to a word
 STRNEB R11, [ R2 ], #1       ;
22
 TST R2, #3                  ;
 STRNEB R11, [ R2 ], #1       ;
 BNE %BT22

 ADR R3, OptionMessage
 LDR R14, =HARDSPACE+(HARDSPACE:SHL:8)+(HARDSPACE:SHL:16)+(SPACE:SHL:24)
 LDMIA R3, { R1, R4, R5, R7 }     ; Option 00 (Off)
 STMIA R2!, { R1, R4, R5, R7, R14 }    ;

23
 TST R2, #3
 STRNEB R11, [ R2 ], #1
 BNE %BT23

;********************************** Urd. .... it through the grapevine

 LDR R14, UrdMessage
 STR R14, [ R2 ], #4

 STRB R11, [ R2 ], #1

;**************
; Has urd been set for this drive ?
; R3 -> start of urd buffer for this drive
;**************

 LDRB R14, numberofdrives      ; R3 -> start of urd buffer
 LDR R3, pointertolibandurd    ;
 MOV R4, #LIBLENGTH            ;
 MLA R3, R14, R4, R3           ;

 [ URDLENGTH <> LIBLENGTH
 MOV R4, #URDLENGTH            ;
 ]
; LDRB R14, CurrentDriveNumber  ; R3 -> correct urd buffer
 MLA R3, R10, R4, R3           ;

 LDRB R14, [ R3 ]
 TEQ R14, #0

 addr R3, Unset, EQ

;****************
; Find the last leaf in the URD
;****************

; R3 -> path
; R7 should -> leaf

 MOV R7, R3

01
 LDRB R5, [ R3 ], #1
 TEQ R5, #"."
 MOVEQ R7, R3
 TEQ R5, #0
 BNE %BT01
 
;********************
; Put end leaf into buffer R7 -> end URD leaf, R2 -> buffer
;********************

; MOV R8, R2               ; R8 = start of R2 transfer
 ADD R8, R2, #MAXLENGTHOFNAME + 2

end_URD

 LDRB R5, [ R7 ], #1
 STRB R5, [ R2 ], #1
 TEQ R5, #0

 BNE end_URD

;************************
; Seperate URD path from URD drive with spaces
;************************

 STRB R11, [ R2, #-1 ]
 STRB R11, [ R2 ]

space_URD_path

 STRB R11, [ R2 ], #1

 CMP R2, R8

 BLE space_URD_path

 LDRB R5, [ R3 ]
 TEQ R5, #0
 BEQ urd_not_set

;************************
; Put URD drive number into display
;************************

 MOV R0, #":"
 STRB R0, [ R2 ], #1

 MOV R0, R10

 MOV R1, R2                  ; Display current drive number
 MOV R2, #4                  ;
 SWI XOS_ConvertCardinal1    ;

 MOV R2, R1

 STRB R11, [ R2 ], #1

;*************

urd_not_set

24
 TST R2, #3
 STRNEB R11, [ R2 ], #1
 BNE %BT24

;********************************** Dir. .... dir dir durrrr

 LDR R14, DirMessage
 STR R14, [ R2 ], #4

 STRB R11, [ R2 ], #1

 LDR R3, =:INDEX:CSD_path
 ADD R3, R3, R12

;****************
; Find the last leaf in the CSD
;****************

 ADD R8, R2, #MAXLENGTHOFNAME + 2               ; R8 = start of R2 transfer

; R3->path
; R7 should -> leaf

 MOV R7, R3
05

 LDRB R5, [ R3 ], #1
 TEQ R5, #"."
 MOVEQ R7, R3
 TEQ R5, #0
 BNE %BT05

06
 LDRB R5, [ R7 ], #1
 TEQ R5, #0
 STRNEB R5, [ R2 ], #1
 BNE %BT06


;************************
; Seperate CSD path from CSD drive with spaces
;************************

08

 STRB R11, [ R2 ], #1

 CMP R2, R8

 BLE %BT08

;************************
; Put CSD drive number into display
;************************

 MOV R0, #":"
 STRB R0, [ R2 ], #1

 LDRB R0, CurrentDriveNumber

 MOV R1, R2                  ; Display current drive number
 MOV R2, #4                  ;
 SWI XOS_ConvertCardinal1    ;

 MOV R2, R1

;**********************
; Put spaces between CSDDrive and lib name
;**********************

 STRB R11, [ R2 ], #1
 MOV R4, #SPACE
 STRB R4, [ R2 ], #1

25
 TST R2, #3
 STRNEB R4, [ R2 ], #1
 BNE %BT25

;***********************
; Display library directory
;***********************

 LDR R5, LibMessage
 STR R5, [ R2 ], #4

 STRB R11, [ R2 ], #1

;**************
; Has lib been set for this drive ?
;**************

 LDR R3, pointertolibandurd
 MOV R14, #LIBLENGTH
 MLA R3, R14, R10, R3

 LDRB R14, [ R3 ]

 TEQ R14, #0                ;
                            ;
; ADREQL R3, Unset           ; [ no ]
 addr R3, Unset, EQ

;****************
; Find the last leaf in the LIB
;****************


 ADD R8, R2, #MAXLENGTHOFNAME + 2

 MOV R7, R3
08

 LDRB R5, [ R3 ], #1
 TEQ R5, #"."
 MOVEQ R7, R3
 TEQ R5, #0
 BNE %BT08

07
 LDRB R5, [ R7 ], #1
 TEQ R5, #0
 STRNEB R5, [ R2 ], #1
 BNE %BT07


;***********************
; Put in library drive number
;***********************

09

 STRB R11, [ R2 ], #1

 CMP R2, R8

 BLE %BT09

 LDRB R5, [ R3 ]
 TEQ R5, #0
 BEQ lib_not_set

;************************
; Put LIB drive number into display
;************************

 MOV R0, #":"
 STRB R0, [ R2 ], #1

 MOV R0, R10

 MOV R1, R2                  ; Display library drive number
 MOV R2, #4                  ;
 SWI XOS_ConvertCardinal1    ;

lib_not_set

 ADD R0, R12, #:INDEX:TempArea

 SWI XOS_PrettyPrint

 SWI XOS_NewLine
 SWI XOS_NewLine

 GRAB "R0 - R11, PC"

DISCstring = "Disc"
DirMessage = "Dir."
LibMessage = "Lib."
UrdMessage = "Urd."
OptionMessage = "Option 00 (Off)", HARDSPACE
 ALIGN

 ]

;***************************************************************************
CheckDiscName ROUT; R0 -> name, RETURNS R1 = TRUE/FALSE
;***************************************************************************

; ISO Spec allows the following characters in a disc name:

;               A - Z             0 - 9        _

; This routine converts CR to a null

 STASH "R0, R2"

01

 LDRB R1, [ R0 ], #1

 UpperCase R1, R2            ; Convert to uppercase

 TEQ R1, #&0D                ; Convert CR to null
 TEQNE R1, #SPACE            ; Convert SPACE to null
 MOVEQ R1, #0                ;
 CMP R1, #32
 MOVLE R1, #0

 STRB R1, [ R0, #-1 ]        ; Converted to uppercase, and terminated

; TEQ R1, #0                  ; Either null terminated or CR terminated
 GRAB "R0, R2", LE           ; last entry
 MOVLE R1, #TRUE             ;
 MOVLES PC, R14              ;

 CMP R1, #"A"                ; characters 'A - Z'
 RSBHSS R2, R1, #"Z"         ;
 BHS %BT01                   ;

 CMP R1, #"0"                ; characters '0 - 9'
 RSBHSS R2, R1, #"9"         ;
 BHS %BT01                   ;

 CMP R1, #"_"                ; character 'underline'
 BEQ %BT01                   ;

 GRAB "R0, R2"
 MOV R1, #FALSE
 MOVS PC, R14

;***************************************************************************
ValidatePathName ROUT      ; R0 -> path name
; corrupts 'TempArea'
;***************************************************************************

; This checks a pathname, also converts CR at end to null

; Checks made:
;             1. Path entry is no longer than 'MAXLENGTHOFNAME'
;             2. Number of path entries <= MAXNUMBEROFPATHENTRIES
;             3. Characters in path are ISO valid


 STASH "R0 - R4"

;*******************
; First check the disc name if present ( copy to another area )
;*******************

 LDRB R4, [ R0 ]
 CMP R4, #":"
 BNE %FT02 ;no_disc_name

 ADD R4, R12, #:INDEX:TempArea

 MOV R3, R0

; R3 -> start of path name
; R4 -> TempArea
; R2 = temp


01 ;copy_for_discname_check

 LDRB R2, [ R3, #1 ]!
 STRB R2, [ R4 ], #1
 TEQ R2, #"."
 TEQNE R2, #0

 BNE %BT01 ;copy_for_discname_check

 TEQ R2, #"."

 MOVEQ R2, #0
 STREQB R2, [ R4, #-1 ]

 SUBEQ R3, R3, #1             ; R3 -> start of path name

 BL CheckDiscName             ; R0 -> disc name, RETURNS R1 = TRUE/FALSE

 TEQ R1, #FALSE
 [ RISC_OS=2
 addr R0, BadName, EQ
 BEQ Error
 |
          MOVEQ      r0, #ERROR_BADNAME
          BEQ        Error
 ]

 MOV R0, R3                   ; Point R0 at past disc name

;*************
02 ;no_disc_name
;*************

; characters checked for: A - Z  a - z  0 - 9  _ ! $ & ^ * # %

; R0 -> disc name
; R1 = temp
; R4 = number of dots counted

 MOV R4, #0

03 ;validate_path

 LDRB R1, [ R0 ], #1                 ;

 TEQ R1, #"."                        ; Make sure only 8 paths used
 ADDEQ R4, R4, #1                    ;
 TEQEQ R4, #MAXNUMBEROFPATHS         ;
 [ RISC_OS=2
 addr R0, BadName, EQ
 BEQ   Error
 |
          MOVEQ      r0, #ERROR_BADNAME
          BEQ        Error
 ]


 TEQ R1, #"."
 BEQ %BT03 ;validate_path

 TEQ R1, #"$"
 TEQNE R1, #"%"
 TEQNE R1, #"&"
 TEQNE R1, #"^"
 TEQNE R1, #"/"
 TEQNE R1, #WILDANY
 TEQNE R1, #"@"
 TEQNE R1, #"!"
 TEQNE R1, #WILDCHAR
 TEQNE R1, #REPLACEMENTFORDOT
 BEQ %BT03 ;validate_path

 CMP R1, #"a"                ; characters 'a - z' converted to upper case
 RSBHSS R2, R1, #"z"         ;
 BHS %BT03 ;validate_path     ;

 CMP R1, #"A"                ; characters 'A - Z'
 RSBHSS R2, R1, #"Z"         ;
 BHS %BT03 ;validate_path     ;

 CMP R1, #"0"                ; characters '0 - 9'
 RSBHSS R2, R1, #"9"         ;
 BHS %BT03 ;validate_path     ;

 CMP R1, #"_"                ; character 'underline'
 BEQ %BT03 ;validate_path     ;

 TEQ R1, #13                         ; Convert CR or LF into null
 TEQNE R1, #0                        ;
 TEQNE R1, #SPACE                    ;

 [ RISC_OS=2
 addr R0, BadName, NE
 BNE Error
 |
        MOVNE     r0, #ERROR_BADNAME
        BNE       Error
 ]

 MOV R1, #0
 STRB R1, [ R0, #-1 ]

 GRAB "R0 - R4"

 BICS PC, R14, #Overflow_Flag

;***************************************************************************
ConvertBufferSizeToReal ROUT ; R0 = CMOS number, RETURNS R1 = size in K
;    FLAGS CORRUPTED
;***************************************************************************

 STASH "R0, R14"

;**************
; Convert number into a Kbytes value
;**************

 TEQ R0, #0

 MOVEQ R1, #0

 MOVNE R1, #1
 ADDNE R0, R0, #2
 MOVNE R1, R1, ASL R0

 GRAB "R0, PC"

; BICS PC, R14, #Overflow_Flag

;***************************************************************************
ConvertRealBufferToSize ROUT    ; R0 = number of K, RETURNS R1 = bit setting
;***************************************************************************

 STASH "R0, R2"

;**************
; Calculate the actual number to go in the CMOSRAM byte
; This is done by taking the top bit set in R0 ( from bits 9 to 0 )
; K    to  number
; 0    to    0
; 8    to    1
; 16   to    2
; 32   to    3
; 64   to    4
; 128  to    5
; 256  to    6
; 512  to    7
;**************

 MVN R0, R0, ASL #22

 MOV R2, #7

01                               ; Top bit set or done enough bits ?
                                 ;
 MOVS R0, R0, ASL #1             ;
                                 ;
 SUBCSS R2, R2, #1               ;
                                 ;
 BCS %BT01                       ; [ no ]


 CMP R2, #0                      ; R2 = number to go in CMOS RAM
                                 ;
 MOVLT R1, #0                    ;
                                 ;
 MOVGE R1, R2

 GRAB "R0, R2"

 BICS PC, R14, #Overflow_Flag


;***************************************************************************
;***************************************************************************
;***************************************************************************
;***************************************************************************

 LTORG

 END
