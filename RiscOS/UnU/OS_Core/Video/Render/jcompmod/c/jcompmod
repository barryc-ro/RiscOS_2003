/*
 * jcompmod.c
 *
 *  compression from raster to JPEG file
 */

//#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"
#include "trace.h"

#define CompressJPEG_Start            0x49a00
#define CompressJPEG_WriteLine        0x49a01
#define CompressJPEG_Finish           0x49a02

/*
 * Include file for users of JPEG library.
 * You will need to have included system headers that define at least
 * the typedefs FILE and size_t before you can include jpeglib.h.
 * (stdio.h is sufficient on ANSI-conforming systems.)
 * You may also wish to include "jerror.h".
 */

#include "jpeglib.h"

/*
 * <setjmp.h> is used for the optional error recovery mechanism shown in
 * the second part of the example.
 */

#include <setjmp.h>

typedef struct jpeg_var_struct {
        int   width;
        int   height;
        int   quality;
        int   components;
        int   horizontal_dpi;
        int   vertical_dpi;
      } jpeg_var_type;

struct my_error_mgr {
  struct jpeg_error_mgr pub;	/* "public" fields */

  jmp_buf setjmp_buffer;	/* for return to caller */
};

typedef struct my_error_mgr * my_error_ptr;

//static FILE  *TraceFile;
/*
 * Here's the routine that will replace the standard error_exit method:
 */

METHODDEF void
my_error_exit (j_common_ptr cinfo)
{
  /* cinfo->err really points to a my_error_mgr struct, so coerce pointer */
  my_error_ptr myerr = (my_error_ptr) cinfo->err;

tracef("my_error exit called....\n");
  /* Always display the message. */
  /* We could postpone this until after returning, if we chose. */
/* don't output_mesage from module!
    (*cinfo->err->output_message) (cinfo);  */

  /* Return control to the setjmp point */
  longjmp(myerr->setjmp_buffer, 1);
}

/******************** JPEG COMPRESSION SAMPLE INTERFACE *******************/

/* This half of the example shows how to feed data into the JPEG compressor.
 * We present a minimal version that does not worry about refinements such
 * as error recovery (the JPEG code will just exit() if it gets an error).
 */


/*
 * IMAGE DATA FORMATS:
 *
 * The standard input image format is a rectangular array of pixels, with
 * each pixel having the same number of "component" values (color channels).
 * Each pixel row is an array of JSAMPLEs (which typically are unsigned chars).
 * If you are working with color data, then the color values for each pixel
 * must be adjacent in the row; for example, R,G,B,R,G,B,R,G,B,... for 24-bit
 * RGB color.
 *
 * For this example, we'll assume that this data structure matches the way
 * our application has stored the image in memory, so we can just pass a
 * pointer to our image buffer.  In particular, let's say that the image is
 * RGB color and is described by:
 */

/*
 * Sample routine for JPEG compression.  We assume that the target file name
 * and a compression quality factor are passed in.
 */

struct jpeg_compress_struct *start_compression(unsigned char *buffer, long buf_size,
                                                jpeg_var_type *vars, unsigned char *workspace,
                                                long workspace_size, struct my_error_mgr *jerr)
{
  /* This struct contains the JPEG compression parameters and pointers to
   * working space (which is allocated as needed by the JPEG library).
   * It is possible to have several such structures, representing multiple
   * compression/decompression processes, in existence at once.  We refer
   * to any one struct (and its associated working data) as a "JPEG object".
   */
  static struct jpeg_compress_struct cinfo;
  /* This struct represents a JPEG error handler.  It is declared separately
   * because applications often want to supply a specialized error handler
   * (see the second half of this file for an example).  But here we just
   * take the easy way out and use the standard error handler, which will
   * print a message on stderr and call exit() if compression fails.
   */
  /* More stuff */

tracef("start compression called\nbuf_size = %d\n" _ buf_size);
//  cinfo = (struct jpeg_compress_struct *)malloc(sizeof(struct jpeg_compress_struct));
//  if (cinfo == NULL)
//    return(0);
//  jerr = (my_error_ptr)malloc(sizeof(struct my_error_mgr));
//  if (jerr == NULL)
//  {
//    free(cinfo);
//    return(0);
//  }
  /* Step 1: allocate and initialize JPEG compression object */

  /* We have to set up the error handler first, in case the initialization
   * step fails.  (Unlikely, but it could happen if you are out of memory.)
   * This routine fills in the contents of struct jerr, and returns jerr's
   * address which we place into the link field in cinfo.
   */
//   vars->quality = 75;  /*temp easure...*/
tracef("vars are: width = %d, height = %d\n" _ vars->width _ vars->height);
tracef("          quality = %d, components = %d\n" _ vars->quality _ vars->components);
tracef("          h_dpi = %d, v_dpi = %d\n" _ vars->horizontal_dpi _ vars->vertical_dpi);
  cinfo.err = jpeg_std_error(&(jerr->pub));
  jerr->pub.error_exit = my_error_exit;
tracef("std_error returned ok\n");
  /* Now we can initialize the JPEG compression object. */
  cinfo.workspace = workspace;
  cinfo.memory_used = 0;
  cinfo.workspace_size = workspace_size;
tracef("cinfo = %x\n" _ &cinfo);
tracef("workspace = %x, used = %d, size = %d\n" _ cinfo.workspace _ cinfo.memory_used _ cinfo.workspace_size);
  jpeg_create_compress(&cinfo);
tracef("creat_compress returned ok\n");
  /* Step 2: specify data destination (eg, a file) */
  /* Note: steps 2 and 3 can be done in either order. */

  /* Here we use the library-supplied code to send compressed data to a
   * stdio stream.  You can also write your own code to do something else.
   * VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
   * requires it in order to write binary files.
   */
  jpeg_mem_dest(&cinfo, buffer, buf_size);
tracef("mem_dest returned ok\n");

  /* Step 3: set parameters for compression */

  /* First we supply a description of the input image.
   * Four fields of the cinfo struct must be filled in:
   */
  cinfo.image_width = vars->width; 	/* image width and height, in pixels */
  cinfo.image_height = vars->height;
  cinfo.input_components = vars->components;		/* # of color components per pixel */
  if (vars->components == 1)
    cinfo.in_color_space = JCS_GRAYSCALE; 	/* colorspace of input image */
  else
    cinfo.in_color_space = JCS_RGB; 	/* colorspace of input image */
  /* Now use the library's routine to set default compression parameters.
   * (You must set at least cinfo.in_color_space before calling this,
   * since the defaults depend on the source color space.)
   */
tracef("cinfo vars set up ok\n");
  jpeg_set_defaults(&cinfo);
tracef("set defaults returned ok\n");
  if (vars->horizontal_dpi != 0)
  {
    cinfo.X_density = vars->horizontal_dpi;
    cinfo.Y_density = vars->vertical_dpi;
    cinfo.density_unit = 1;
  }
  else
  {
    cinfo.X_density = 1;
    cinfo.Y_density = 1;
    cinfo.density_unit = 0;
  }
  /* Now you can set any non-default parameters you wish to.
   * Here we just illustrate the use of quality (quantization table) scaling:
   */
  jpeg_set_quality(&cinfo, vars->quality, TRUE /* limit to baseline-JPEG values */);
tracef("set quality returned ok\n");

/*  cinfo->dct_method = JDCT_IFAST;*/
  /* Step 4: Start compressor */

  /* TRUE ensures that we will write a complete interchange-JPEG file.
   * Pass TRUE unless you are very sure of what you're doing.
   */
  jpeg_start_compress(&cinfo, TRUE);
tracef("start compress returned ok\n");
  return(&cinfo);
}

GLOBAL int
finish_compression(struct jpeg_compress_struct *cinfo)
{
  long         size;
  mem_dest_ptr dest;

  dest = (mem_dest_ptr) cinfo->dest;
  /* Step 6: Finish compression */
  jpeg_finish_compress(cinfo);

  size = dest->buffer_size - dest->pub.free_in_buffer;
  /* Step 7: release JPEG compression object */

  /* This is an important step since it will release a good deal of memory. */
  jpeg_destroy_compress((j_compress_ptr)cinfo);
  free(cinfo->err);
  free(cinfo);
  return((int)size);
}


/*
 * SOME FINE POINTS:
 *
 * In the above loop, we ignored the return value of jpeg_write_scanlines,
 * which is the number of scanlines actually written.  We could get away
 * with this because we were only relying on the value of cinfo.next_scanline,
 * which will be incremented correctly.  If you maintain additional loop
 * variables then you should be careful to increment them properly.
 * Actually, for output to a stdio stream you needn't worry, because
 * then jpeg_write_scanlines will write all the lines passed (or else exit
 * with a fatal error).  Partial writes can only occur if you use a data
 * destination module that can demand suspension of the compressor.
 * (If you don't know what that's for, you don't need it.)
 *
 * If the compressor requires full-image buffers (for entropy-coding
 * optimization or a noninterleaved JPEG file), it will create temporary
 * files for anything that doesn't fit within the maximum-memory setting.
 * (Note that temp files are NOT needed if you use the default parameters.)
 * On some systems you may need to set up a signal handler to ensure that
 * temporary files are deleted if the program is interrupted.  See libjpeg.doc.
 *
 * Scanlines MUST be supplied in top-to-bottom order if you want your JPEG
 * files to be compatible with everyone else's.  If you cannot readily read
 * your data in that order, you'll need an intermediate array to hold the
 * image.  See rdtarga.c or rdbmp.c for examples of handling bottom-to-top
 * source data using the JPEG code's internal virtual-array mechanisms.
 */

_kernel_oserror *main_initialise (char *tail, int podule_base,
      void *workspace)
{
  _kernel_oserror *error = NULL;
//  static FILE *TraceFile;
  trace_initialise("tracetype");

//  TraceFile = fopen("$.foo","w");
  return(error);
}

_kernel_oserror *main_terminate(boolean fatal, int instance, void *workspace)
{
  _kernel_oserror *error = NULL;
  trace_terminate();
//  fclose(TraceFile);
  return(error);
}

_kernel_oserror *main_swi(int swi, _kernel_swi_regs *regs, void *workspace)
{
  _kernel_oserror             *error = NULL;
  static struct my_error_mgr  jerr;

  switch (swi)
  {
    case CompressJPEG_Start & 0x3F:
    {
      struct jpeg_compress_struct  *cinfo;

      if (setjmp(jerr.setjmp_buffer))
      {
        _kernel_oserror errorblock = {1, "NoMem"};
        /* If we get here, the JPEG code has signaled an error.
         * We need to clean up the JPEG object, close the input file, and return.
        */
        if (cinfo != NULL) jpeg_destroy_compress(cinfo);
        tracef("I've longjmped, returning...\n");
        error = _swix(MessageTrans_ErrorLookup, _IN(0) | _IN(1) | _IN(2) |
                       _IN(4) | _IN(5) | _IN(6) | _IN(7), &errorblock, 0, 0, 0, 0, 0, 0);
        return(error);
      }
      else
      {
        cinfo = start_compression((unsigned char *)regs->r[0], regs->r[1],
                                (jpeg_var_type *)regs->r[2], (unsigned char *)regs->r[3],
                                regs->r[4], &jerr);
        tracef("cinfo = %x\n" _ cinfo);
        regs->r[0] = (int)cinfo;
      }
      tracef("returning from start_compression\n");
    }
    break;

    case CompressJPEG_WriteLine & 0x3F:
    {
      int   lines;
      struct jpeg_compress_struct  *cinfo = (struct jpeg_compress_struct *)regs->r[0];

      if (setjmp(jerr.setjmp_buffer))
      {
        _kernel_oserror errorblock = {1, "NoMem"};
        /* If we get here, the JPEG code has signaled an error.
         * We need to clean up the JPEG object, close the input file, and return.
        */
        tracef("error returned to CompressJPEG_WriteLine\n");
        jpeg_destroy_compress(cinfo);
        tracef("I've longjmped, returning...\n");
        error = _swix(MessageTrans_ErrorLookup, _IN(0) | _IN(1) | _IN(2) |
                       _IN(4) | _IN(5) | _IN(6) | _IN(7), &errorblock, 0, 0, 0, 0, 0, 0);
        return(error);
      }
      else
      {
        tracef("writeline compression called, calling jpeg_write_scanlines\n");
        lines = jpeg_write_scanlines((struct jpeg_compress_struct *)regs->r[0],
                           (JSAMPROW *)&(regs->r[1]), 1);
        tracef("writeline compression returned. lines = %d\n" _ lines);
      }
    tracef("writeline compression finished\n");
    }
    break;

    case CompressJPEG_Finish & 0x3F:
    {
      int  bytes_used;

tracef("finish compression called\n");
      bytes_used = finish_compression((struct jpeg_compress_struct *)regs->r[0]);
      regs->r[0] = bytes_used;
    }
    break;

    default:
/*      error = riscos_error_lookup (error_NO_SUCH_SWI, "BadSwi",
               "ColourPicker");*/
    break;
  }
//tracef("returning from swi handler\n");
  return(NULL);
}
