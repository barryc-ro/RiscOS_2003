/*
 * jmemnoal.c
 *
 * Copyright (C) 1992-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * All alocation is done by calling process.
 * Note that the max_memory_to_use option is ignored by this implementation.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif

//#include "jmemmgr.h"

/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL void *
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
//printf("cinfo = %x, confo->workspace = %x\n", cinfo, cinfo->workspace);
  if (cinfo->workspace == 0)
  {
//printf("mallocing %d bytes\n", sizeofobject);
    return (void *) malloc(sizeofobject);
  }else{
//printf("workspace = %x, total allocation = %d\n", cinfo->workspace,  cinfo->memory_used);
//printf("sml giving %d bytes of buffer, at location %x\n", sizeofobject, (cinfo->workspace + cinfo->memory_used));
    cinfo->memory_used += sizeofobject;
    if (cinfo->memory_used > cinfo->workspace_size) ERREXIT(cinfo, JERR_BUFFER_SIZE);
    return ((void *) (cinfo->workspace + cinfo->memory_used - sizeofobject));
  }
}

GLOBAL void
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  if (cinfo->workspace == 0)
    free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL void FAR *
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  if (cinfo->workspace == 0)
  {
//printf("mallocing %d bytes\n", sizeofobject);
    return (void *) malloc(sizeofobject);
  }else{
//printf("workspace = %x, total allocation = %d\n", cinfo->workspace,  cinfo->memory_used);
//printf("large giving %d bytes of buffer, at location %x\n", sizeofobject, (cinfo->workspace + cinfo->memory_used));
    cinfo->memory_used += sizeofobject;
    if (cinfo->memory_used > cinfo->workspace_size) ERREXIT(cinfo, JERR_BUFFER_SIZE);
    return ((void *) (cinfo->workspace + cinfo->memory_used - sizeofobject));
  }
}

GLOBAL void
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  if (cinfo->workspace == 0)
    free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL long
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}


/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */


GLOBAL void
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL long
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL void
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
