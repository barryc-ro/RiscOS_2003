; > s.ScrRotate

;******************************************************************************
;
; Module header
;
Module_BaseAddr
        DCD     0
        DCD     Init     - Module_BaseAddr
        DCD     Die      - Module_BaseAddr
        DCD     Service  - Module_BaseAddr
        DCD     Title    - Module_BaseAddr
        DCD     Help     - Module_BaseAddr
        DCD     CmdTab   - Module_BaseAddr
        DCD     0                               ; SWIbase
        DCD     0                               ; SWIhandler
        DCD     0                               ; SWInames
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     0

;******************************************************************************

Title   DCB     "ScreenRotate",0
Help    DCB     "ScreenRotate",9,"$VString ($Date)",0
        ALIGN

;
; Module Command Table
;
CmdTab
        Command Screen_Landscape,0,0,0          ;no parameters
        Command Screen_Portrait ,0,0,0          ;no parameters
        DCD     0                               ;and end of CmdTab

;
; Help text
;
Screen_Landscape_Help
        DCB     "At the next mode change, the screen will return to Landscape mode."
        DCB     0

Screen_Landscape_Syntax
        DCB     "Syntax: *Screen_Landscape"
        DCB     0

Screen_Portrait_Help
        DCB     "At the next mode change, the screen will be rotated through 90 degrees."
        DCB     0

Screen_Portrait_Syntax
        DCB     "Syntax: *Screen_Portrait"
        DCB     0

        ALIGN

;******************************************************************************
;
; Init - Module initialisation code
;
; May corrupt R0-R6,R12,R14, must preserve R7-R11,R13
;
Init
        ENTRY
        LDR     R2, [R12]
        TEQS    R2, #0                          ;already got work space if entered
        BNE     %FT10                           ;as part of RMTidy

;private word is zero, so claim some workspace
        MOV     R0, #ModHandReason_Claim
        MOV     R3, #MemNeeded
        SWI     XOS_Module
        EXIT    VS                              ;quit if error

        STR     R2, [R12]                       ;got workspace ok, so store in private word
10
        MOV     R12, R2

        MOV     R0, #0
        STR     R0, SpriteArea
        STR     R0, SpritePointer
        STR     R0, ContextArea
        STRB    R0, PortraitRequested
        STRB    R0, OutputToSprite
        STRB    R0, EventVFlag
        STRB    R0, VSyncCBPending
        STRB    R0, VSyncDelayCounter
        STRB    R0, MouseVFlag
        STRB    R0, WordVFlag
        STRB    R0, ModeChangeThreaded

        EXIT

;******************************************************************************
;
; Die
;
Die
        ENTRY
        LDR     R12, [R12]                      ;get workspace pointer

        BL      LandscapeMode
        CLRV

        EXIT

;******************************************************************************
;
; Service - Module service code
;
; Entry
;   R1  = service number
;   R12 = pointer to private word
;
; Exit
;    R1 = 0 => service claimed
;    All other registers preserved unless returning values
;
Service
        TEQ     R1, #Service_ModeChanging
        TEQNE   R1, #Service_ModeChange
        MOVNES  PC, LR

        LDR     R12, [R12]

        ENTRY   "R0-R3,R4-R6"

        TEQ     R1, #Service_ModeChange
        BEQ     %FT50
       ;TEQ     R1, #Service_ModeChanging
       ;BEQ     %FT30
       ;EXITS

;
; Process Service_ModeChanging
;
30
 [ 1=0
        MOV     R3, #0                          ;Indicate output not redirected
        STRB    R3, OutputToSprite              ;Ensure sprite area freed,
 ]
        BL      LandscapeMode                   ; and unlink from vectors etc
        EXITS

;
; Process Service_ModeChange
;
50
        LDRB    R0, ModeChangeThreaded          ;Is this a service call that we sent around once
        TEQ     R0, #0                          ; portrait mode was established?
        EXITS   NE                              ;NE, yes, so nothing to do

;
; The mode change has already occurred, so the vdu drivers are now writing
; to the screen. If we were in Portrait mode before the mode change, we must
; unlink from various vectors then dispose of the SpriteArea and ContextArea. 
;
 [ 1=0
        MOV     R3, #0                          ;Indicate output not redirected
        STRB    R3, OutputToSprite              ;Ensure sprite area freed,
        BL      LandscapeMode                   ; and unlink from vectors etc
 ]
;
; If the user wants Portrait mode, try switching to it.
; If this fails, we tidy up leaving the screen in landscape mode.
;
        LDRB    R0, PortraitRequested
        TEQ     R0, #0                          ;Does the user want Portrait mode?
        EXITS   EQ                              ;EQ, no, so nothing more to do

        BL      PortraitMode                    ;Try for Portrait mode
        EXITS   VS

        MOV     R0, #1
        STRB    R0, ModeChangeThreaded

        LDMIA   R13, {R0-R3}                    ;restore corrupted R0..R3
        SWI     XOS_ServiceCall

        MOV     R0, #0
        STRB    R0, ModeChangeThreaded

        EXITS

;******************************************************************************
;
; Star command handler for '*Screen_Landscape'
;
; Entry:
;    R0 -> command tail
;    R1 = parameter count
;    R12 -> private word
;
; May corrupt R1-R6, must preserve R7-R11,R13
;
Screen_Landscape_Code
        ENTRY
        LDR     R12, [R12]
        MOV     R0, #0                          ;Indicate 'Landscape mode required'
        STRB    R0, PortraitRequested           ; this will be actioned at the next mode change
        EXITS

;******************************************************************************
;
; Star command handler for '*Screen_Portrait'
;
; Entry:
;    R0 -> command tail
;    R1 = parameter count
;    R12 -> private word
;
; May corrupt R1-R6, must preserve R7-R11,R13
;
Screen_Portrait_Code
        ENTRY
        LDR     R12, [R12]
        MOV     R0, #1                          ;Indicate 'Portrait mode'
        STRB    R0, PortraitRequested           ; this will be actioned at the next mode change
        EXITS

;******************************************************************************
;
; PortraitMode - Flip screen to portrait mode
;
PortraitMode
        ENTRY   "R0-R6"

        BL      ReadModeDetails
        BLVC    CreateSpriteArea                ;Create a sprite area for the Portrait mode
        BLVC    CreateSprite                    ;
        BLVC    CreateContextArea
        BLVC    RestoreVDUOutputToSprite        ;corrupts R0..R3
        BLVC    ClaimEventV
        BLVC    ClaimMouseV
        BLVC    ClaimWordV
        EXIT    VC                              ;If the above was successful, we get a flipped screen on the next VSync!

        BL      LandscapeMode                   ;An error occured, so restore LandscapeMode

        EXIT

;******************************************************************************
;
; LandscapeMode - Restore screen to normal mode
;
LandscapeMode
        ENTRY   "R0-R6"
        BL      ReleaseWordV
        BL      ReleaseMouseV
        BL      ReleaseEventV
        BL      RestoreVDUOutputToScreen        ;corrupts R0..R5
        BL      DestroyContextArea
        BL      DestroySprite
        BL      DestroySpriteArea
        EXIT

;******************************************************************************
;
; ReadModeDetails
;
ReadModeDetails
        ENTRY   "R0, R1"
        ADR     R0, VduVariablesList
        ADR     R1, CurrentModeVariables
        SWI     XOS_ReadVduVariables
        EXIT    VS

        LDR     R0, PortR_WindowHeight
        ADD     R0, R0, #1
        STR     R0, PortR_WindowHeight

        LDR     R0, PortR_WindowWidth
        ADD     R0, R0, #1
        STR     R0, PortR_WindowWidth

        LDR     R1, PortR_XEigFactor
        MOV     R0, R0, LSL R1                  ;Cvt to OSUnits
        STR     R0, PortR_WindowWidth_OSUnits
        MOV     R0, R0, LSL #8
        STR     R0, RotationMatrix_5            ;Typically &0003C000