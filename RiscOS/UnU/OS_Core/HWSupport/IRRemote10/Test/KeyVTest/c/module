/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#define KeyV	0x13
extern int module_keyv_entry(_kernel_swi_regs *r, void *pw);
FILE *out;


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *module_initialise( char *cmd_tail, int podule_base, void *pw )
{
//  out = fopen("pipe:out", "w");
  _swix(OS_Claim, _INR(0,2), KeyV, module_keyv_entry, pw );

  return NULL;  
}


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module finalisation entry point.
 */
_kernel_oserror *module_finalise( char *cmd_tail, int podule_base, void *pw )
{
  _swix(OS_Release, _INR(0,2), KeyV, module_keyv_entry, pw);
  fclose(out);

  return NULL;
}



/*------------------------------------------------------------------------------
 * module_keyv_handler
 *
 *      Module keyv handler
 */
int module_keyv_handler(_kernel_swi_regs *r, void *pw)
{
  switch (r->r[0])
  {
  case 0:
    printf("Keyboard present, type %d\n", r->r[1]);
    break;
    
  case 1:
    printf("KeyUp %02x\n", r->r[1]);
    break;
    
  case 2:
    printf("KeyDn %02x\n", r->r[1]);
    break;
    
  case 3:
    printf("LEDs now %x\n", r->r[1]);
    break;
  
  case 4:
    printf("Enable!\n");
    break;
  
  default:
    printf("Bogus reason code %x, sub-reason %x\n", r->r[0], r->r[1]);
  }
  return 1;
}


