/*
 * keytables.c	- Keyboard and handset scancode -> keycode conversion
 */

/*
 * 		Copyright 1996 Acorn Network Computing
 *
 * This material is the confidential trade secret and proprietary
 * information of Acorn Network Computing. It may not be reproduced,
 * used, sold, or transferred to any third party without the prior
 * written consent of Acorn Network Computing. All rights reserved.
 *
 */


#include "swis.h"

#include "ir.h"
#include "module.h"
#include "keytables.h"

#define NUMTABLES	1		/* Number of handset tables */
#define HANDSETCODES	64		/* Max number of scancodes returned */
#define KEYBOARDCODES	0x68		/* Max number of scancodes returned */

/* Special table entries */
#define NK		0xFF		/* Does not map to a buffer code */
#define PWR		0xFE		/* The power key */
#define FNLK		0xFD		/* FnLock (actually labelled NumLock) */

/*
 * lookup tables for handset scancodes
 */
static unsigned char handset_table[NUMTABLES][3][HANDSETCODES] =
{
  /* Table 0 */
  {
    /* No modifiers */
    {
      0x0D, 0xC2, 0x9E, 0x9F,		/* Sel   Open  PgDn  PgUp  */
      0x8D, 0xC8, ':',  '@',		/* Right Print :     @     */
      PWR,  0xC3, 0xC7, 0x8E,		/* Power Stop  Home  Down  */
      0x8C, 0x8F, '/',  '.',		/* Left  Up    /     .     */
      0x0D, 0xC5, 0xC4, 0xBE,		/* Sel   Forw  Back  LnDn  */
      0xBF, 0xC1, 0xC6, 0xC0,		/* LnUp  Menu  Tool  Help  */
      NK,   'y',  't',  'o',		/* Ctrl  y     t     o     */
      'j',  'e',  '0',  '5',		/* j     e     0     5     */
      8,    'x',  's',  'n',		/* Del   x     s     n     */
      'i',  'd',  '9',  '4',		/* i     d     9     4     */
      'z',  'w',  'r',  'm',		/* z     w     r     m     */
      'h',  'c',  '8',  '3',		/* h     c     8     3     */
      ' ',  'v',  'q',  'l',		/* Space v     q     l     */
      'g',  'b',  '7',  '2',		/* g     b     7     2     */
      NK,   'u',  'p',  'k',		/* Shift u     p     k     */
      'f',  'a',  '6',  '1'		/* f     a     6     1     */
    },

    /* +Shift */
    {
      0x0A, 0xD2, 0x8E, 0x8F,		/* Sel   Open  PgDn  PgUp  */
      0x9D, 0xD8, ',',  '*',		/* Right Print :     @     */
      PWR,  0xD3, 0xD7, 0x9E,		/* Power Stop  Home  Down  */
      0x9C, 0x9F, '_',  '=',		/* Left  Up    /     .     */
      0x0A, 0xD5, 0xD4, 0xAE,		/* Sel   Forw  Back  LnDn  */
      0xAF, 0xD1, 0xD6, 0xD0,		/* LnUp  Menu  Tool  Help  */
      NK,   'Y',  'T',  'O',		/* Ctrl  y     t     o     */
      'J',  'E',  ')',  '%',		/* j     e     0     5     */
      0x7F, 'X',  'S',  'N',		/* Del   x     s     n     */
      'I',  'D',  '(',  '$',		/* i     d     9     4     */
      'Z',  'W',  'R',  'M',		/* z     w     r     m     */
      'H',  'C',  '?',  '£',		/* h     c     8     3     */
      ' ',  'V',  'Q',  'L',		/* Space v     q     l     */
      'G',  'B',  '&',  '"',		/* g     b     7     2     */
      NK,   'U',  'P',  'K',		/* Shift u     p     k     */
      'F',  'A',  '^',  '!'		/* f     a     6     1     */
    },

    /* +Ctrl */
    {
      NK,   0xE2, 0xBE, 0xBF,		/* Sel   Open  PgDn  PgUp  */
      0xAD, 0xE8, '>',  '<',		/* Right Print :     @     */
      PWR,  0xE3, 0xE7, 0xAE,		/* Power Stop  Home  Down  */
      0xAC, 0xAF, ';',  '+',		/* Left  Up    /     .     */
      0x0A, 0xE5, 0xE4, 0x9E,		/* Sel   Forw  Back  LnDn  */
      0x9F, 0xE1, 0xE6, 0xE0,		/* LnUp  Menu  Tool  Help  */
      NK,   0x19, 0x14, 0x0f,		/* Ctrl  y     t     o     */
      0x0A, 0x05, ']',  '\'',		/* j     e     0     5     */
      0x7F, 0x18, 0x13, 0x0E,		/* Del   x     s     n     */
      0x09, 0x04, '[',  '~', 		/* i     d     9     4     */
      0x1A, 0x17, 0x12, 0x0D,		/* z     w     r     m     */
      0x08, 0x03, '}',  '\\', 		/* h     c     8     3     */
      0x20, 0x16, 0x11, 0x0C,		/* Space v     q     l     */
      0x07, 0x02, '{',  '#', 		/* g     b     7     2     */
      NK,   0x15, 0x10, 0x0B,		/* Shift u     p     k     */
      0x06, 0x01, '-',  0x1B		/* f     a     6     1     */
    }
  }
};


#ifdef KEYBOARD
/*
 * lookup tables for keyboard scancodes
 * (worked out from Sejin UK kbd model SWK-8695WT)
 */
static unsigned char keyboard_table[2][KEYBOARDCODES] =
{
  /* No modifiers */
  {
NK,	NK,	NK,	NK,	/*  0:					*/
NK,	NK,	NK,	NK,	/*  4:			Fn		*/
NK,	NK,	NK,	NK,	/*  8:			AltGr		*/
0x34,	NK,	NK,	NK,	/*  C:	Del			AltL	*/
0x52,	0x3C,	0x27,	0x4e,	/* 10:	B	A	Q	Z	*/
0x03,	0x02,	0x11,	0x10,	/* 14:	F3	F2	1	`¬	*/
0x26,	0x3D,	0x28,	0x4F,	/* 18:	Tab	S	W	X	*/
0x00,	0x01,	0x12,	0x5D,	/* 1C:	Esc	F1	2"	Caps	*/
0x64,	0x3E,	0x29,	0x50,	/* 20:	Right	D	E	C	*/
0x05,	0x04,	0x13,	NK,	/* 24:	F5	F4	3£		*/
0x5F,	0x3F,	0x2A,	0x51,	/* 28:	Space	F	R	V	*/
0x15,	0x40,	0x14,	0x2B,	/* 2C:	5%	G	4$	T	*/
0x46,	0x42,	0x2D,	0x54,	/* 30:	'@	J	U	M	*/
0x16,	0x41,	0x17,	0x2C,	/* 34:	6^	H	7&	Y	*/
NK,	NK,	NK,	NK,	/* 38:	Shift			Shift	*/
NK,	NK,	NK,	NK,	/* 3C:					*/
0x1B,	0x43,	0x2e,	0x55,	/* 40:	-_	K	I	,<	*/
0x06,	0x07,	0x18,	0x0B,	/* 44:	F6	F7	8*	F11	*/
0x31,	0x44,	0x2F,	0x56,	/* 48:	[{	L	O	.>	*/
0x08,	0x09,	0x19,	0x0A,	/* 4C:	F8	F9	9(	F10	*/
0x47,	0x45,	0x30,	0x57,	/* 50:	Return	;:	P	/?	*/
0x1C,	0x33,	0x1A,	0x0C,	/* 54:	=+	#~	0)	F12	*/
0x1F,	0x36,	0x32,	0x4D,	/* 58:	Ins	PgDn	]}	\|	*/
0x1E,	0x59,	0x63,	0x0D,	/* 5C:	BkSp	Up	Down	Print	*/
0x62,	0x35,	0x0F,	0x53,	/* 60:	Left	End	Break	N	*/
0x20,	0x21,	0x71,	0x0E	/* 64:	Home	PgUp	Menu	Scroll	*/
				/* 68:		Win			*/
				/* 6C:					*/
				/* 70:					*/
				/* 74:		Ctrl			*/
				/* 78:					*/
				/* 7C:					*/
  },

  /* +Fn */
  {
NK,	NK,	NK,	NK,	/*  0:					*/
NK,	NK,	NK,	NK,	/*  4:					*/
NK,	NK,	NK,	NK,	/*  8:					*/
NK,	NK,	NK,	NK,	/*  C:					*/
NK,	NK,	NK,	NK,	/* 10:					*/
NK,	NK,	NK,	NK,	/* 14:					*/
NK,	NK,	NK,	NK,	/* 18:					*/
NK,	NK,	NK,	NK,	/* 1C:					*/
NK,	NK,	NK,	NK,	/* 20:					*/
NK,	NK,	NK,	NK,	/* 24:					*/
NK,	NK,	NK,	NK,	/* 28:					*/
NK,	NK,	NK,	NK,	/* 2C:					*/
NK,	0x5A,	0x48,	0x65,	/* 30:		1	4	0	*/
NK,	NK,	0x37,	NK,	/* 34:			7		*/
NK,	NK,	NK,	NK,	/* 38:					*/
NK,	NK,	NK,	NK,	/* 3C:					*/
NK,	0x5B,	0x49,	NK,	/* 40:		2	5		*/
NK,	NK,	0x38,	NK,	/* 44:			8		*/
NK,	0x5C,	0x4A,	0x56,	/* 48:		3	6	.	*/
NK,	NK,	0x39,	FNLK,	/* 4C:			9	FnLock	*/
0x67,	0x4B,	0x3A,	0x23,	/* 50:	Enter	+	-	/	*/
NK,	NK,	0x24,	NK,	/* 54:			*		*/
NK,	NK,	NK,	NK,	/* 58:					*/
NK,	NK,	NK,	NK,	/* 5C:	(ScrL)				*/
NK,	NK,	NK,	NK,	/* 60:					*/
NK,	NK,	NK,	NK,	/* 64:					*/
  }
};
#endif


/*
 * Convert an IR handset scan code to a keyboard buffer code (see PRM 1-892).
 * Returns -1 if the supplied table, code & mods does not map to a key.
 * Handles Standby keypress internally.
 */
int handset_lookup(int code, int mods, int tableno)
{
  int modifier, buffer_code;

  if ((tableno >= NUMTABLES) || (code >= HANDSETCODES))
    return -1;

  /* The handset tables only have entries for Shift or Control modifiers */
  switch (mods)
  {
  case 0:
    modifier = 0;
    break;

  case KEY_MOD_SHIFT:
    modifier = 1;
    break;

  case KEY_MOD_CTRL:
    modifier = 2;
    break;

  default:
    return -1;
  }

  buffer_code = (unsigned int) handset_table[tableno][modifier][code];

  if (buffer_code == NK)
    return -1;
  else if (buffer_code == PWR)
  {
    int state;

    /* Toggle standby state */
    _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
    _swix((state & Standby_InStandby) ? Standby_Online : Standby_Standby,
          _IN(0), 0);
    return -1;
  }
  else
    return buffer_code;
}


#ifdef KEYBOARD
/*
 * Convert an IR keyboard scan code to a low-level key number (see PRM 1-156).
 * Returns -1 if the supplied code & mods does not map to a key.
 * Handles Standby keypress internally (if present on keyboard).
 */
int keyboard_lookup(int code, int mods, state_t *device_state)
{
  int key_no;

  if (code >= KEYBOARDCODES)
    return -1;

  if ((mods == KEY_MOD_FN) ||
      (((mods & ~KEY_MOD_FN) == 0) && (device_state->keyboard.fnlock)))
    key_no = keyboard_table[1][code];
  else
    key_no = keyboard_table[0][code];

  if (key_no == NK)
    return -1;
  else if (key_no == FNLK)
  {
    /* Toggle FnLock status */
    device_state->keyboard.fnlock = 1 - device_state->keyboard.fnlock;
    return -1;
  }
  else
    return key_no;
}
#endif
