/*
 * keytables.c - Keyboard and handset scancode -> keycode conversion
 */

#include "swis.h"

#include "ir.h"
#include "module.h"
#include "keytables.h"

#define NUMTABLES	1		/* Number of handset tables */
#define MAXCODES	64		/* Max number of scancodes returned */

/* Special table entries */
#define NKEY		0xFF		/* Does not map to a buffer code */
#define PWR		0xFE		/* The power key */

/*
 * lookup tables for handset scancodes
 */
static unsigned char handset_table[NUMTABLES][3][MAXCODES] =
{
  /* Table 0 */
  {
    /* No modifiers */
    {
      0x0D, 0xC2, 0x9E, 0x9F,		/* Sel   Open  PgDn  PgUp  */
      0x8D, 0x80, ':',  '@',		/* Right Print :     @     */
      PWR,  0xC3, 0xC7, 0x8E,		/* Power Stop  Home  Down  */
      0x8C, 0x8F, '/',  '.',		/* Left  Up    /     .     */
      0x0D, 0xC5, 0xC4, 0xBE,		/* Sel   Forw  Back  LnDn  */
      0xBF, 0xC1, 0xC6, 0xC0,		/* LnUp  Menu  Tool  Help  */
      NKEY, 'y',  't',  'o',		/* Ctrl  y     t     o     */
      'j',  'e',  '0',  '5',		/* j     e     0     5     */
      8,    'x',  's',  'n',		/* Del   x     s     n     */
      'i',  'd',  '9',  '4',		/* i     d     9     4     */
      'z',  'w',  'r',  'm',		/* z     w     r     m     */
      'h',  'c',  '8',  '3',		/* h     c     8     3     */
      ' ',  'v',  'q',  'l',		/* Space v     q     l     */
      'g',  'b',  '7',  '2',		/* g     b     7     2     */
      NKEY, 'u',  'p',  'k',		/* Shift u     p     k     */
      'f',  'a',  '6',  '1'		/* f     a     6     1     */
    },

    /* +Shift */
    {
      0x0A, 0xD2, 0x8E, 0x8F,		/* Sel   Open  PgDn  PgUp  */
      0x9D, 0x90, ',',  '*',		/* Right Print :     @     */
      PWR,  0xD3, 0xD7, 0x9E,		/* Power Stop  Home  Down  */
      0x9C, 0x9F, '_',  '=',		/* Left  Up    /     .     */
      0x0A, 0xD5, 0xD4, 0xAE,		/* Sel   Forw  Back  LnDn  */
      0xAF, 0xD1, 0xD6, 0xD0,		/* LnUp  Menu  Tool  Help  */
      NKEY, 'Y',  'T',  'O',		/* Ctrl  y     t     o     */
      'J',  'E',  ')',  '%',		/* j     e     0     5     */
      0x7F, 'X',  'S',  'N',		/* Del   x     s     n     */
      'I',  'D',  '(',  '$',		/* i     d     9     4     */
      'Z',  'W',  'R',  'M',		/* z     w     r     m     */
      'H',  'C',  '?',  '£',		/* h     c     8     3     */
      ' ',  'V',  'Q',  'L',		/* Space v     q     l     */
      'G',  'B',  '&',  '"',		/* g     b     7     2     */
      NKEY, 'U',  'P',  'K',		/* Shift u     p     k     */
      'F',  'A',  '^',  '!'		/* f     a     6     1     */
    },

    /* +Ctrl */
    {
      NKEY, 0xE2, 0xBE, 0xBF,		/* Sel   Open  PgDn  PgUp  */
      0xAD, 0xA0, '>',  '<',		/* Right Print :     @     */
      PWR,  0xE3, 0xE7, 0xAE,		/* Power Stop  Home  Down  */
      0xAC, 0xAF, ';',  '+',		/* Left  Up    /     .     */
      0x0A, 0xE5, 0xE4, 0x9E,		/* Sel   Forw  Back  LnDn  */
      0x9F, 0xE1, 0xE6, 0xE0,		/* LnUp  Menu  Tool  Help  */
      NKEY, 0x19, 0x14, 0x0f,		/* Ctrl  y     t     o     */
      0x0A, 0x05, ']',  '\'',		/* j     e     0     5     */
      0x7F, 0x18, 0x13, 0x0E,		/* Del   x     s     n     */
      0x09, 0x04, '[',  '~', 		/* i     d     9     4     */
      0x1A, 0x17, 0x12, 0x0D,		/* z     w     r     m     */
      0x08, 0x03, '}',  '\\', 		/* h     c     8     3     */
      0x20, 0x16, 0x11, 0x0C,		/* Space v     q     l     */
      0x07, 0x02, '{',  '#', 		/* g     b     7     2     */
      NKEY, 0x15, 0x10, 0x0B,		/* Shift u     p     k     */
      0x06, 0x01, '-',  0x1B		/* f     a     6     1     */
    }
  }
};


/*
 * Convert an IR handset scan code to a keyboard buffer code (see PRM 1-892).
 * Returns -1 if the supplied table, code & mods does not map to a key.
 * Handles Standby keypress internally.
 */
int handset_lookup(int tableno, int code, int mods)
{
  int modifier, buffer_code;

  if ((tableno >= NUMTABLES) || (code >= MAXCODES))
    return -1;

  /* The handset tables only have entries for Shift or Control modifiers */
  switch (mods)
  {
  case 0:
    modifier = 0;
    break;

  case KEY_MOD_SHIFT:
    modifier = 1;
    break;

  case KEY_MOD_CTRL:
    modifier = 2;
    break;

  default:
    return -1;
  }

  buffer_code = (unsigned int) handset_table[tableno][modifier][code];

  if (buffer_code == NKEY)
    return -1;
  else if (buffer_code == PWR)
  {
    int state;

    /* Toggle standby state */
    _swix(Standby_State, _IN(0)|_OUT(0), 0, &state);
    _swix((state & Standby_InStandby) ? Standby_Online : Standby_Standby,
          _IN(0), 0);
    return -1;
  }
  else
    return buffer_code;
}


#ifdef KEYBOARD
/*
 * Convert an IR keyboard scan code to a low-level key number (see PRM 1-156).
 * Returns -1 if the supplied code & mods does not map to a key.
 * Handles Standby keypress internally.
 */
int keyboard_lookup(int code, int mods)
{
  /* XXX incomplete */
  return -1;
}
#endif
