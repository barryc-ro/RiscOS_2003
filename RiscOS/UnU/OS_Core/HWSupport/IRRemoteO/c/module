/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "ir.h"

/*
 * Globals
 */
#ifndef DEBUG
static _kernel_oserror *TinyError;	/* For tinystubs */
#endif

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
  _kernel_oserror *err = ir_initialise( pw );
  
#ifndef DEBUG
  /* Try to use TinyStubs if possible. */
  if ( !err ) TinyError = _swix( TinySupport_Share, _IN(0), pw );
#endif

  return err;  
}


/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module finalisation entry point.
 */
_kernel_oserror *
module_finalise( char *cmd_tail, int podule_base, void *pw )
{
  ir_finalise( pw );

#ifndef DEBUG
  if ( TinyError == NULL ) _swix( TinySupport_Die, 0 );
#endif

  return NULL;
}


/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
  if ( service_no == Service_ShutDownComplete )
    Flags |= STANDBY;
#ifdef SCALE
  else if ( service_no == Service_ModeChange )
    ir_modechange();
#endif
}


/*------------------------------------------------------------------------------
 * module_upcall_handler
 *
 *      Module upcall handler
 */
int module_upcall_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED( pw );

  if (((r->r[0] == UpCall_DeviceRxDataPresent) ||
       (r->r[0] == UpCall_DeviceThresAbove)) &&
       (r->r[1] == in_handle))
  {
#ifdef DEBUG
    if (r->r[0] == UpCall_DeviceThresAbove) printf("Threshhold!\n");
#endif
    ir_DeviceRxDataPresent();
  }
  else if (r->r[0] == UpCall_File)	/* Handle having our streams closed */
  {
    if (r->r[1] == in_handle)		/* Fatal condition! */
      Disable();			/* Panic! */
    if (r->r[1] == out_handle)
      out_handle = -1;			/* Can recover from this later */
  }
  else if (r->r[0] == UpCall_Online)
    Flags &= ~STANDBY;

  return 1;
}


#ifdef KEYBOARD
/*------------------------------------------------------------------------------
 * module_keyup_handler
 *
 *      Module keyup handler
 */
int module_keyup_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED( pw );

  ir_keyb(Key_KeyUp, last_code, last_mods);
  last_code = -1;

  return 1;  
}


/*------------------------------------------------------------------------------
 * module_keyv_handler
 *
 *      Module KeyV handler
 */
int module_keyv_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED( pw );

  /* Enable / flush drivers */
  if ((r->r[0] == Key_Enable) && (last_code != -1))
  {
    /* Cancel pending keyup callback & forget which key(s) are down */
    _swix(OS_RemoveTickerEvent, _INR(0,1), module_keyup_entry, pw);
    last_code = -1;
  }

  return 1;  
}
#endif


/*------------------------------------------------------------------------------
 * module_cli_handler
 *
 *      Module CLI handler
 */
_kernel_oserror * module_cli_handler(char *arg_string, int arg_count,
                                     int cmd_no, void *pw)
{
  int family;
  char buffer[8], *c;

  /* Only one command, = configure irfamily */
  
  if ((int) arg_string == 0)		/* Configure with no args */
    _swix(OS_Write0, _IN(0), "IRFamily   <1-15> | Any\r\n");
    
  else if ((int) arg_string == 1)	/* Status */
  {
    _swix(OS_Write0, _IN(0), "IRFamily   ");
    family = ir_getfamily();
    if (family != 0)
    {
      _swix(OS_ConvertCardinal1, _INR(0,2)|_OUT(1),
            family, &buffer, 4, &c);
       *(c++) = '\r'; *(c++) = '\n'; *c = '\0'	;	/* Add CRLF */
      _swix(OS_Write0, _IN(0), buffer);
    }
    else
      _swix(OS_Write0, _IN(0), "Any\r\n");
  }
  else					/* Configure with args */
  {
    _kernel_oserror *err = _swix(OS_ReadUnsigned, _INR(0,2)|_OUT(2),
                                 10|(1<<29), arg_string, 15, &family);
    if (err)
    {
      int i;
      
      for (i=0; i<3; i++)
        arg_string[i] = tolower(arg_string[i]);
        
      if (!strncmp(arg_string, "any", 3))
        ir_setfamily(0);
      else
        return (err);
    }
    else
      ir_setfamily(family);
  }    
  return NULL;  
}
