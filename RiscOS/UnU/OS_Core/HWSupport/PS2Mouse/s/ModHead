; > Sources.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               ; Helptable
        DCD     0                               ; SWIbase
        DCD     0                               ; SWIhandler
        DCD     0                               ; SWInames
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     0

;---------------------------------------------------------------------------
Title   DCB     "PS2Mouse",0
Helpstr DCB     "PS2Mouse",9,"$VString ($Date)",0
                ALIGN

;---------------------------------------------------------------------------
;       Module initialisation point.
;
Init
        ENTRY

        LDR     r2, [r12]                       ; Have we already got a workspace?
        CMP     r2, #0
        BNE     %FT01

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module                      ; Claim workspace.
        EXIT    VS

        STR     r2, [r12]                       ; Store workspace pointer.
01
        MOV     r12, r2

 [ TMLDebug
        InsertTMLInitialisation 2               ;my EasiStork uses podule slot 2
 ]
       ;DLINE   "PS2 mouse module initialisation"

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_RegisterFiles
 ]

        MOV     r0, #0                          ; Initialise workspace.
 [ international
        STR     r0, message_file_open
 ]

        BL      StartUp

        BLVS    ShutDown
        EXIT

;---------------------------------------------------------------------------
;       Start up code.
;
StartUp
        ENTRY   "r1,r2"

        Debug   mod,"SM_StartUp"

        MOV     r0, #PointerV           ; Claim PointerV during lifetime.
        ADR     r1, PointerRequest
        MOV     r2, r12
        SWI     XOS_Claim

        MOVVC   r0, #0                  ; Get current pointer type.
        SWIVC   XOS_Pointer
        MOVVC   r1, r0
        BLVC    PointerSelected         ; Enable if one of ours.

        EXIT

;---------------------------------------------------------------------------
;       Service handler.
;
Service
        LDR     r12, [r12]

        TEQ     r1, #Service_Reset
        BEQ     StartUp

 [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        MOVNES  pc, lr

        ENTRY   "r0-r3"
        ADR     r0, resourcefsfiles
        MOV     lr, pc
        MOV     pc, r2
        EXITS
 |
        MOVS    pc, lr
 ]

;---------------------------------------------------------------------------
;       Killing the module.
;
Die
        ENTRY

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "pc",EQ,^

        BL      ShutDown

        EXITS

;---------------------------------------------------------------------------
;       Tidy up before dying.
;       out:  preserves all registers and flags.
;
ShutDown
        ENTRY   "r0-r2"

        Debug   mod,"SM_ShutDown"

        BL      Disable                         ; Disable if we are enabled.

        MOV     r0, #PointerV
        ADR     r1, PointerRequest
        MOV     r2, r12
        SWI     XOS_Release

 [ international
        LDR     r0, message_file_open           ; Close the message file if it's open.
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
 ]

 [ standalone
        ADR     r0, resourcefsfiles
        SWI     XResourceFS_DeregisterFiles
 ]

        EXITS                                   ; Ignore errors, preserve flags.

        END
