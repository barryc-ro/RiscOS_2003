; > Sources.Key

;-----------------------------------------------------------------------------
;       Table for converting PC-AT codes to key numbers.
;
KeyTable
        DCB     &FF, &09, &FF, &05, &03, &01, &02, &0C  ; 00-07
        DCB     &FF, &0A, &08, &06, &04, &26, &10, &FF  ; 08-0F
        DCB     &FF, &5E, &4C, &FF, &3B, &27, &11, &FF  ; 10-17
        DCB     &FF, &FF, &4E, &3D, &3C, &28, &12, &FF  ; 18-1F
        DCB     &FF, &50, &4F, &3E, &29, &14, &13, &FF  ; 20-27
        DCB     &FF, &5F, &51, &3F, &2B, &2A, &15, &FF  ; 28-2F
        DCB     &FF, &53, &52, &41, &40, &2C, &16, &FF  ; 30-37
        DCB     &FF, &FF, &54, &42, &2D, &17, &18, &FF  ; 38-3F
        DCB     &FF, &55, &43, &2E, &2F, &1A, &19, &FF  ; 40-47
        DCB     &FF, &56, &57, &44, &45, &30, &1B, &FF  ; 48-4F
        DCB     &FF, &FF, &46, &FF, &31, &1C, &FF, &FF  ; 50-57
        DCB     &5D, &58, &47, &32, &FF, &33, &FF, &FF  ; 58-5F
        DCB     &FF, &4D, &FF, &FF, &FF, &FF, &1E, &FF  ; 60-67
        DCB     &FF, &5A, &FF, &48, &37, &FF, &FF, &FF  ; 68-6F
        DCB     &65, &66, &5B, &49, &4A, &38, &00, &22  ; 70-77
        DCB     &0B, &4B, &5C, &3A, &24, &39, &0E, &FF  ; 78-7F
        DCB     &FF, &FF, &FF, &07, &0D, &FF, &FF, &FF  ; 80-87

SpecialTable
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 00-07
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 08-0F
        DCB     &FF, &60, &FF, &FF, &61, &FF, &FF, &FF  ; 10-17
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 18-1F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 20-27
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 28-2F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 30-37
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 38-3F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 40-47
        DCB     &FF, &FF, &23, &FF, &FF, &FF, &FF, &FF  ; 48-4F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 50-57
        DCB     &FF, &FF, &67, &FF, &FF, &FF, &FF, &FF  ; 58-5F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 60-67
        DCB     &FF, &35, &FF, &62, &20, &FF, &FF, &FF  ; 68-6F
        DCB     &1F, &34, &63, &FF, &64, &59, &FF, &0F  ; 70-77
        DCB     &FF, &FF, &36, &FF, &0D, &21, &0F, &FF  ; 78-7F
        DCB     &FF, &FF, &FF, &FF, &FF, &FF, &FF, &FF  ; 80-87

;-----------------------------------------------------------------------------
; KeyInit
;
;       Initialise the keyboard.
;
KeyInit
        ENTRY   "r0"

        Debug   key,"KeyInit"

 [ KillAutoRepeat
        BL      ClearKbd
 ]

        MOV     r0, #state_RESET :OR: state_WANTBAT     ; Enter reset state.
        STRB    r0, KBState

        ADR     r0, TxBuffer                    ; Clear TxBuffer.
        STR     r0, TxInsert
        STR     r0, TxPtr

        MOV     r0, #resend_count
        STRB    r0, ResendCount

        IRQOff  lr

        KbdEnable r0,lr

        IOMDBase lr                             ; Make sure we can transmit.
        LDRB    lr, [lr, #IOCSERRX]

        MOV     r0, #command_RESET              ; Send reset command.
        BL      SendByte
        RxOffTxOn r0,lr

        EXITS

 [ KillAutoRepeat
;-----------------------------------------------------------------------------
; ClearKbd
;
;       Clear the key flag table.
;
ClearKbd
        ENTRY   "r0"
        MOV     r0, #0
        ADR     lr, KeyFlags
        STR     r0, [lr], #4
        STR     r0, [lr], #4
        STR     r0, [lr], #4
        STR     r0, [lr], #4
        EXIT
 ]

;-----------------------------------------------------------------------------
; SetLEDs
;
;       Set LED state.
;
SetLEDs
        ENTRY   "r0"

        Debug   key,"Setting LED states"

        IRQOff  lr

        MOV     r0, #command_SETLEDS
        BL      SendByte
        LDRB    r0, LEDState
        BL      SendByte
        BL      StartTX

        EXITS

;-----------------------------------------------------------------------------
; SendByte
;
;       In:     r0 = byte to send
;               interrupts should be off
;
;       Insert the given byte into TxBuffer.
;
SendByte
        ENTRY

        Debug   key,"SendByte",r0

        LDR     lr, TxInsert                    ; Get position to insert.
        STRB    r0, [lr], #1                    ; Store the byte, increment pointer.
        ADR     r0, TxBufferEnd
        TEQ     r0, lr                          ; If reached the end then
        ADREQ   lr, TxBuffer                    ;   wrap to the start.
        STR     lr, TxInsert                    ; Update the pointer.

        EXIT

;-----------------------------------------------------------------------------
; PrependByte
;
;       In:     r0 = byte to send (or -1 to send byte already there)
;               interrupts should be off
;
;       Insert the given byte into TxBuffer before next byte to be sent.
;
PrependByte
        ENTRY   "r1"

        Debug   key,"PrependByte",r0

        LDR     r1, TxPtr
        ADR     lr, TxBuffer
        TEQ     r1, lr                          ; If at the start then
        ADREQ   r1, TxBufferEnd                 ;   wrap to the end.
        SUB     r1, r1, #1
        STR     r1, TxPtr
        CMP     r0, #-1                         ; If we have a byte to insert then do it.
        STRNEB  r0, [r1]

        EXIT

;-----------------------------------------------------------------------------
; StartTX
;
;       In:     interrupts should be disabled
;
;       Start to send a command to the keyboard.
;
StartTX         ROUT
        ENTRY   "r0"

        Debug   key,"Sending command"

        LDR     r0, TxPtr
        LDR     lr, TxInsert
        TEQ     r0, lr                          ; If nothing to send then
        EXIT    EQ                              ;   do nothing.

        LDRB    r0, KBState
        TST     r0, #state_WANTACK :OR: state_WANTBAT   ; Only enable TX irq if we're not waiting to hear from keyboard
        RxOffTxOn r0,lr,EQ                              ;   (RX irq will do it for us).
        EXIT

;-----------------------------------------------------------------------------
; TXIRQHandler
;       In:     r0-r3,r11 corruptible
;
;       Send a byte to the keyboard.
;
TXIRQHandler
        RxOnTxOff r0,r1

        LDR     r0, TxPtr
        LDR     r1, TxInsert
        TEQ     r0, r1                          ; If no bytes to send then we shouldn't be here but check anyway.
        MOVEQS  pc, lr

        LDRB    r1, [r0], #1                    ; Get byte to send, increment pointer.
        ADR     r2, TxBufferEnd
        TEQ     r0, r2                          ; If reached the end then
        ADREQ   r0, TxBuffer                    ;   wrap to the start.
        STR     r0, TxPtr                       ; Update pointer.

        LDRB    r3, KBState
        ORR     r3, r3, #state_WANTACK          ; Flag that we want to hear from keyboard before we can send again.
        STRB    r3, KBState

        IOMDBase r11
 [ IO_Type <> "IOMD"
10
        LDRB    r0, [r11, #IOMD_KBDCR]          ; Wait for TXE.
        TST     r0, #IOMD_KBDCR_TxE
        BEQ     %BT10
 ]
 [ false
        MOV     r0, #&03240000
        LDRB    r0, [r0]
 ]
 [ IO_Type = "IOMD"
        STRB    r1, [r11, #IOCSERTX]            ; Send the byte.
 |
        MOV     r2, r1, LSL #16
        STR     r2, [r11, #IOCSERTX]
 ]

        DebugTab r2,r3,#&01,r1

        MOVS    pc, lr

;-----------------------------------------------------------------------------
; RXIRQHandler
;       In:     r0-r3,r11 corruptible
;
;       Service keyboard receive interrupts.
;
RXIRQHandler    ROUT
        ENTRY   "r9"

        IOMDBase r11
        LDRB    r1, [r11, #IOMD_KBDCR]          ; Get status so we can check parity.
        LDRB    r0, [r11, #IOCSERRX]            ; Get byte that was sent.

        DebugTab r2,r3,#&00,r0

        LDRB    r3, KBState                     ; Get current state.
        BIC     r3, r3, #state_WANTACK          ; Heard from keyboard so no longer want an ACK.

        EOR     lr, r0, r0, LSR #4              ; Build parity in bit 0.
        EOR     lr, lr, lr, LSR #2
        EOR     lr, lr, lr, LSR #1
        EOR     lr, lr, r1, LSR #2              ; Combine with received parity.
        TST     lr, #1
        BEQ     parityerror                     ; Should be odd parity.

        TEQ     r0, #keybd_RESEND               ; If RESEND then
        BEQ     resend                          ;   resend last byte.

        TEQ     r0, #keybd_BAT                  ; If BAT complete code then
        BEQ     gotBAT                          ;   handle it.

        TEQ     r0, #keybd_ACK                  ; If ACK then
        BEQ     RXIRQExitState                  ;   we can send the next byte.

        TEQ     r0, #keybd_ERROR                ; If ERROR then
        BEQ     RXIRQExitState                  ;   deal with it.

        TST     r3, #state_RESET                ; If we are in a reset state then
        BNE     RXIRQExitState                  ;   can't process key events.

        TEQ     r0, #keybd_KEYUP                ; If this is a key up then
        ORREQ   r3, r3, #state_KEYUP            ;   mark next code as key up.
        BEQ     RXIRQExitState

        TST     r3, #state_BREAK                ; If break flagged then
        BICNE   r3, r3, #state_BREAK            ;   come out of break
        ORRNE   r3, r3, #state_SPECIAL          ;   into special code sequence
        BNE     RXIRQExitState                  ;   and ignore byte &14 in break sequence.

        TEQ     r0, #keybd_SPECIAL              ; If this is a special key then
        ORREQ   r3, r3, #state_SPECIAL          ;   mark code as special.
        BEQ     RXIRQExitState

        TEQ     r0, #keybd_BREAK                ; If break key start code then
        ORREQ   r3, r3, #state_BREAK            ;   mark as break key.
        BEQ     RXIRQExitState

        CMP     r0, #&88                        ; If outside table then
        MOVCS   r3, #0                          ;   reset state
        BCS     RXIRQExitState                  ;   and throw away code.

        TST     r3, #state_SPECIAL              ; If in special code sequence then
        ADRNE   r2, SpecialTable                ;   use special code table
        BICNE   r3, r3, #state_SPECIAL          ;   and clear special code flag
 [ debugint
        ADREQL  r2, KeyTable
 |
        ADREQ   r2, KeyTable                    ; else use normal key table.
 ]

        LDRB    r1, [r2, r0]                    ; Get the internal key code.
        TEQ     r1, #&FF                        ; If key does not translate then
        MOVEQ   r3, #0                          ;   reset state
        BEQ     RXIRQExitState                  ;   and throw away code.

 [ KillAutoRepeat
        ADR     r9, KeyFlags
        MOV     r2, r1, LSR #5
        LDR     r0, [r9, r2, LSL #2]!           ; Load appropriate key flags word.
        MOV     r2, #&80000000
 ]

        TST     r3, #state_KEYUP                ; If key has gone up then
        BICNE   r3, r3, #state_KEYUP            ;   clear flag for next byte,
 [ KillAutoRepeat
        BICNE   r0, r0, r2, ROR r1              ;   clear key flag
        STRNE   r0, [r9]
        MOVNE   r0, #1                          ;   and signal key up to KEYV
        BNE     %FT05

        TST     r0, r2, ROR r1                  ; If already down then
        BNE     RXIRQExitState                  ;   throw away code
        ORR     r0, r0, r2, ROR r1              ; else set flag
        STR     r0, [r9]
        MOV     r0, #2                          ;   and signal key down to KEYV.
05
 |
        MOVNE   r0, #1                          ;   and signal up to KEYV
        MOVEQ   r0, #2                          ; else signal down to KEYV.
 ]

        STRB    r3, KBState                     ; Store new state as it may get changed by KEYV call.

        MOV     r9, #KEYV                       ; Call KEYV.
        SVCMode r11                             ; Go into SVC mode for SWI.
        NOP
        Push    "lr"                            ; Save r14_svc.
        SWI     XOS_CallAVector
        Pull    "lr"                            ; Restore r14_svc.
        SetPSR  r11                             ; Go back to IRQ mode.
        NOP

        LDRB    r3, KBState
        B       RXIRQExit

parityerror
        LDRB    r0, ResendCount                 ; Limit the number of times we ask to resend one byte.
        SUBS    r0, r0, #1
        MOVCC   r0, #resend_count
        STRB    r0, ResendCount
        MOVCS   r0, #command_RESEND             ; Ask keyboard to resend.
        BCS     prependTX
clearTX
        LDR     r0, TxInsert                    ; Got severe problems receiving so stop sending and clear TX buffer.
        STR     r0, TxPtr
        B       RXIRQExitState

resend
        LDRB    r0, ResendCount                 ; Limit the number of times we resend one byte.
        SUBS    r0, r0, #1
        MOVCC   r0, #resend_count
        STRB    r0, ResendCount
        BCC     clearTX                         ; Got severe problems sending so clear TX buffer.
        MOV     r0, #-1
prependTX
        BL      PrependByte
        B       RXIRQExitState

gotBAT
        TST     r3, #state_RESET                ; If already in reset state then
        BICNE   r3, r3, #state_WANTBAT          ;   no longer want BAT
        MOVEQ   r3, #state_RESET                ;   else keyboard plugged in so go into reset (and clear all other flags).
        STRB    r3, KBState                     ; Store state as KEYV call may change it.

        SVCMode r11
        MOV     r0, #0                          ; Notify keyboard present (may call our enable entry).
        MOV     r1, #2
        MOV     r9, #KEYV
        Push    "lr"
        SWI     XOS_CallAVector
        Pull    "lr"
        SetPSR  r11

        MOV     r0, #command_SETRATE            ; Queue up set rate/delay command (repeat as slow as possible).
        BL      SendByte
        MOV     r0, #&7F
        BL      SendByte

        LDRB    r3, KBState
        B       RXIRQExit

error
        MOV     r3, #0                          ; Keyboard buffer overrun, not much we can do but reset state.

RXIRQExitState
        STRB    r3, KBState
RXIRQExit
        LDR     r0, TxPtr
        LDR     r1, TxInsert
        TEQ     r0, r1
        EXITS   EQ
        TST     r3, #state_WANTACK
        RxOffTxOn r0,r1,EQ
        EXITS


        END
