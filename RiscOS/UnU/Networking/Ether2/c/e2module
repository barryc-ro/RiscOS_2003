/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 */
#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"
#include "xcb.h"

#include "sys/dcistructs.h"
#include "sys/errno.h"
#include "sys/mbuf.h"

#include "netinet/if_ether.h"

#include "e2module.h"

/*
 * a really cheesy test for broadcast addresses - relies
 * on character buffers being word aligned.
 */
#define IS_BROADCAST(x)	(*(u_int *)(x) == 0xffffffff && \
			 *(u_short *)((x) + 4) == 0xffff)

/*
 * XXX
 *
 * cannot find an unambiguous definition for multicast addresses,
 * the best we have is a statement that "all multicast addresses
 * have an MSB of 1" without any clarification whether `B' means
 * bit or byte.  This test *assumes* that it stands for bit.
 */
#define IS_MULTICAST(x)	((*(u_char *)(x) & 0x80) && \
			 (*(u_char *)(x)) != 0xff)

struct swient
{
    static int (*swi_call)();			/* swi handler */
};

extern unsigned char *en_addresses();
extern int en_start();
extern int en_transmit(), en_getmtu();
extern int en_version();
extern int encnt;
static int en_setmtu(), en_filter(), en_inquire();
extern int callb_entry();

struct swient en_ent[] =
{
    en_version,
    en_inquire,
    en_getmtu,
    en_setmtu,
    en_transmit,
    en_filter
};

void *module_wsp = 0;

struct
{
    int	 e_num;
    char e_mess[16];
} _en_errblk = { 0 };

extern _kernel_oserror *en_error();
extern int encnt;

extern void callback(int (*f)(), void *pw);
extern void set_receive_level(int unit, int addrlevel);

/*
 * arrays of filtering information, sorted per unit,
 * a separate array for each filter level.
 */
FilterSingleRef ieeefilter[XCB_MAX_ETHERNET_CARDS];
FilterSingleRef e2monitor[XCB_MAX_ETHERNET_CARDS];
FilterSingleRef e2sink[XCB_MAX_ETHERNET_CARDS];
FilterChainRef e2specific[XCB_MAX_ETHERNET_CARDS];

/*
 * function pointer used to select the most efficient
 * address filtering function for current hardware
 * address level
 */
int (*address_filter)(u_int level, u_char *pack_hdr, u_char *mac_addr);

/*
 * array of Driver information Blocks, one per unit
 */
DibRef dibs[XCB_MAX_ETHERNET_CARDS];

static int managerstarted = 0;
static int finalising = 0;

/**********************************************************************/

/* TRACE TRACE TRACE */
#if 0
__rt_stkovf_split_small(void)
{
    Printf("\021\01INTERNET: STACK IS BLOWN SMALL\021\07\n");
}

__rt_stkovf_split_big(void)
{
    Printf("\021\01INTERNET: STACK IS BLOWN BIG\021\07\n");
}

int blow_stack(stack_blown)
{
    int i = stack_blown;
    char stack[256];

    if( i > 8192 )
	return(i);

    stack[255] = blow_stack(i + 256);
    return(0);
}

#endif /* 0/1 */

/**********************************************************************/

static _kernel_oserror *en_error(int error)
{
    if (error)
    {
	_en_errblk.e_num = error;
	strcpy(_en_errblk.e_mess, "En module error");
	return ((_kernel_oserror *)&_en_errblk);
    }
    else
	return ((_kernel_oserror *)0);
}

/**********************************************************************/

/*
 * check_addrlevel - check that address level for a filter SWI
 * is valid. returns 1 if valid, else 0.
 */
static int check_addrlevel(u_int level)
{
#ifdef OldCode
    static u_char valid[] =
    {
	ADDRLVL_SPECIFIC, ADDRLVL_NORMAL,
	ADDRLVL_MULTICAST, ADDRLVL_PROMISCUOUS
    };
    int i;

    for( i = 0; i < sizeof(valid) / sizeof(valid[0]); ++i )
	if( valid[i] == level )
	    return(1);

    return(0);
#else
    /*
     * now that all address levels are supported,
     * we can do this much more efficiently
     */
    if( (int)level < ADDRLVL_SPECIFIC || (int)level > ADDRLVL_PROMISCUOUS )
	return(0);
    else
	return(1);
#endif
}

/**********************************************************************/

/*
 * af_reject - filtering function used to reject *all* received packets
 */
int af_reject(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    return(1);
}

/**********************************************************************/

/*
 * af_specific - filtering function used when only specifically
 * addressed packets are enabled in hardware.
 */
int af_specific(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    /*
     * the hardware does *all* the filtering for us
     */
    return(0);
}

/**********************************************************************/

/*
 * af_normal - filtering function used when hardware packet
 * filtering accepts specific and broadcast packets.  returns
 * 1 if packet should be filtered, else 0
 */
int af_normal(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    if( level == ADDRLVL_SPECIFIC && IS_BROADCAST(pack_hdr) )
	return(1);
    else
	return(0);
}

/**********************************************************************/

/*
 * af_multicast - filtering function used when hardware packet
 * filtering accepts specific, broadcast, and multicast
 * packets.  returns 1 if packet should be filtered, else 0
 */
int af_multicast(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    switch( level )
    {
      case ADDRLVL_SPECIFIC:
	if( IS_BROADCAST(pack_hdr) )
	    /* filter it out */
	    return(1);

	/* fall through case */

      case ADDRLVL_NORMAL:
	if( IS_MULTICAST(pack_hdr) )
	    /* don't want it */
	    return(1);

	/* fall through case */

      case ADDRLVL_MULTICAST:
      default:
	/* protocol wants this packet */
	return(0);

	/*NOTREACHED*/
	break;
    }
}

/**********************************************************************/

/*
 * af_promiscuous - filtering function used when hardware packet
 * filtering accepts all packets.  returns 1 if packet should be
 * filtered, else 0
 */
int af_promiscuous(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    int isbroadcast = IS_BROADCAST(pack_hdr);
    int ismulticast = IS_MULTICAST(pack_hdr);

    switch( level )
    {
      case ADDRLVL_SPECIFIC:
	if( isbroadcast )
	    /* filter it out */
	    return(1);

	/* fall through case */

      case ADDRLVL_NORMAL:
	if( ismulticast )
	    /* don't want it */
	    return(1);

	/* fall through case */

      case ADDRLVL_MULTICAST:
	/*
	 * reject all packets that aren't broadcast or
	 * multicast, and which don't match the MAC address
	 */
	if( !isbroadcast && !ismulticast )
	{
	    int i;

	    for( i = 0; i < 6; ++i )
		if( pack_hdr[i] != mac_addr[i] )
		    return(1);
	}

	/* fall through case */

      case ADDRLVL_PROMISCUOUS:
      default:
	/* protocol wants this packet */
	return(0);

	/*NOTREACHED*/
	break;
    }
}

/**********************************************************************/

/*
 * TRACE
 */
typedef int (*AddressFilter)(u_int level, u_char *pack_hdr, u_char *mac_addr);

/*
 * update_addrlevel - find most general address level for all
 * active filters on a given unit, and ask for hardware to
 * be set to that level.
 */
static void update_addrlevel(int unit)
{
    static AddressFilter filters[] =
    {
	af_reject,
	af_specific,
	af_normal,
	af_multicast,
	af_promiscuous
    };

    int level = -1;
    FilterChainRef fc;
    AddressFilter *filtersp = filters + 1;

    if( ieeefilter[unit] != NULL )
	level = MAX(level, (int)ieeefilter[unit]->fs_addrlevel);

    if( e2monitor[unit] != NULL )
	level = MAX(level, (int)e2monitor[unit]->fs_addrlevel);

    if( e2sink[unit] != NULL )
	level = MAX(level, (int)e2sink[unit]->fs_addrlevel);

    for( fc = e2specific[unit]; fc; fc = fc->fc_next )
	level = MAX(level, (int)fc->fc_addrlevel);

    set_receive_level(unit, level);

    /*
     * set appropriate filtering function
     */
    address_filter = filtersp[level];
}

/**********************************************************************/

/*
 * undo_chainfilter - stop filtering on a filter level that
 * chains multiple frame types if the recipient protocol module
 * has a private word pointer that matches the one given
 */
static void undo_chainfilter(u_int pwp, FilterChainRef *level)
{
    FilterChainRef *fcprev = level;
    FilterChainRef fc = *level;

    while( fc )
    {
	if( fc->fc_pwptr == pwp )
	{
	    /*
	     * unchain this entry, and free it
	     */
	    *fcprev = fc->fc_next;
	    (void)free(fc);

	    /*
	     * previous entry is the same,
	     * advance the current pointer
	     */
	    fc = *fcprev;
	}
	else
	{
	    /*
	     * move both pointers down the list
	     */
	    fc = fc->fc_next;
	    fcprev = (FilterChainRef *)(*fcprev);
	}
    }
}

/**********************************************************************/

/*
 * undo_singlefilter - stop filtering on a filter level that does
 * not chain multiple frame types if the recipient protocol module
 * has a private word pointer that matches the one given
 */
static void undo_singlefilter(u_int pwp, FilterSingleRef *level)
{
    FilterSingleRef fs = *level;

    if( fs && fs->fs_pwptr == pwp )
    {
	(void)free(fs);
	*level = NULL;
    }
}

/**********************************************************************/

/*
 * filtersoff - disable filtering for the module
 * with the given private word pointer.
 */
static void filtersoff(u_int pwp)
{
    int unit;

    /*
     * loop over all active units looking for the module
     */
    for( unit = 0; unit < encnt; ++unit )
    {
	/*
	 * start with the chained filter level
	 */
	undo_chainfilter(pwp, &e2specific[unit]);

	/*
	 * now the unique filter levels
	 */
	undo_singlefilter(pwp, e2sink + unit);
	undo_singlefilter(pwp, e2monitor + unit);
	undo_singlefilter(pwp, ieeefilter + unit);

	/*
	 * check whether receiver can be disabled
	 */
	update_addrlevel(unit);
    }
}

/**********************************************************************/

/*
 * do_chainfilter - handle a claim or release on a
 * filter level that chains multiple frame types.
 */
static int do_chainfilter(_kernel_swi_regs *r,
			 FilterChainRef *level,
			 FilterSingleRef *antagonist)
{
    FilterChainRef fc, *fcprev;
    int unit = r->r[1];

    /*
     * search down the FilterChain, looking for this frametype
     */
    for( fcprev = level, fc = *level;
	fc && fc->fc_type != GET_FRAMETYPE(r->r[2]);
	fc = fc->fc_next, fcprev = (FilterChainRef *)*fcprev )
	/* do nothing */
	;

#ifdef DEBUG
    Printf("do_chainfilter(%x, %x): level = %x, fc = %x\n",
	   r->r[0], r->r[2], level, fc);
#endif

    /*
     * is this a claim or a release
     */
    if( r->r[0] & FILTER_RELEASE )
    {
	if( !fc )
	    /*
	     * trying to free a non-existent claim
	     */
	    return(EINVAL);

	if( fc->fc_handler != (void (*)())r->r[6] || fc->fc_pwptr != r->r[5] )
	    /*
	     * trying to release somebody else's claim
	     */
	    return(EPERM);

#ifdef DEBUG
	Printf("releasing claim on frame type %x (fcprev = %x)\n",
	       GET_FRAMETYPE(r->r[2]), *fcprev);
#endif

	/*
	 * OK, this is a legitimate free, do it
	 */
	*fcprev = fc->fc_next;
	(void)free(fc);

	/*
	 * check whether receiver can be disabled
	 */
	update_addrlevel(unit);
    }
    else
    {
	int error;

	/*
	 * claiming
	 */
	if( fc || *antagonist )
	    /*
	     * this frame type is already claimed in some fashion
	     */
	    return(EAGAIN);

	if( (fc = (FilterChainRef)malloc(sizeof(*fc))) == NULL )
	    /*
	     * cannot claim memory for this structure
	     */
	    return(ENOMEM);

	/*
	 * check that we can bring the card up live
	 */
	if( (error = enioctl(unit, 1, 1)) != 0 )
	{
	    (void)free(fc);
	    return(error);
	}

	/*
	 * chain this structure onto the
	 * list, and fill out the fields
	 */
	fc->fc_next = *fcprev;
	*fcprev = fc;

	fc->fc_type = GET_FRAMETYPE(r->r[2]);
	fc->fc_addrlevel = r->r[3];
	fc->fc_errlevel = r->r[4];
	fc->fc_handler = (void (*)())r->r[6];
	fc->fc_pwptr = r->r[5];

	/*
	 * set receive level for this unit to the
	 * loosest address filtering necessary.
	 */
	update_addrlevel(unit);
    }

    /* all done */
    return(0);
}

/**********************************************************************/

/*
 * do_singlefilter - handle a claim or release on a filter level
 * that does not chain multiple frame types.
 */
static int do_singlefilter(_kernel_swi_regs *r,
			   FilterSingleRef *level,
			   FilterSingleRef *antagonist)
{
    FilterSingleRef fs = *level;
    int unit = r->r[1];

    /*
     * check whether claiming or releasing
     */
    if( (r->r[0] & FILTER_RELEASE) )
    {
	if( !fs )
	    /*
	     * trying to free a non-existent claim
	     */
	    return(EINVAL);

	if( fs->fs_handler != (void (*)())r->r[6] || fs->fs_pwptr != r->r[5] )
	    /*
	     * trying to release somebody else's claim
	     */
	    return(EPERM);

	/*
	 * everything checks out, do the free
	 */
	(void)free(fs);
	*level = NULL;

	/*
	 * check whether receiver can be disabled
	 */
	update_addrlevel(unit);
    }
    else
    {
	int error;

	/*
	 * it's a claim - most values have been range checked, but
	 * take a look at frame type (which *must* be zero)
	 */
	if( GET_FRAMETYPE(r->r[2]) != 0 )
	    return(EINVAL);

	if( fs || *antagonist )
	    /*
	     * this frame level is already claimed in some fashion
	     */
	    return(EAGAIN);

	if( (fs = (FilterSingleRef)malloc(sizeof(*fs))) == NULL )
	    /*
	     * cannot claim memory for this structure
	     */
	    return(ENOMEM);

	/*
	 * check that we can bring the card up live
	 */
	if( (error = enioctl(unit, 1, 1)) != 0 )
	{
	    (void)free(fs);
	    return(error);
	}

	/*
	 * everything checks out OK, initialise the structure
	 */
	*level = fs;
	fs->fs_addrlevel = r->r[3];
	fs->fs_errlevel = r->r[4];
	fs->fs_handler = (void (*)())r->r[6];
	fs->fs_pwptr = r->r[5];

	/*
	 * set receive level for this unit to the
	 * loosest address filtering necessary.
	 */
	update_addrlevel(unit);
    }

    /* all OK */
    return(0);
}

/**********************************************************************/

static int en_filter(_kernel_swi_regs *r)
{
    int error = 0;
    u_int unit = r->r[1];
    void *dummy = NULL;

    /*
     * range checking
     */
    if( r->r[0] >= FILTER_1STRESERVED ||
       r->r[1] >= encnt ||
       !check_addrlevel(r->r[3]) ||
       !check_errlevel(r->r[4]) )
	return(EINVAL);

    switch( GET_FRAMELEVEL( r->r[2]) )
    {
      case FRMLVL_E2SPECIFIC:
	error = do_chainfilter(r, e2specific + unit, e2monitor + unit);
	break;

      case FRMLVL_E2SINK:
	error = do_singlefilter(r, e2sink + unit, e2monitor + unit);
	break;

      case FRMLVL_E2MONITOR:
	if( e2specific[unit] != NULL )
	    /*
	     * already have some specific frames claimed,
	     * therefore monitor is invalid
	     */
	    error = EAGAIN;
	else
	    error = do_singlefilter(r, e2monitor + unit, e2sink + unit);

	break;

      case FRMLVL_IEEE:
	error = do_singlefilter(r, ieeefilter + unit,
				(FilterSingleRef *)(&dummy));
	break;

      default:
	error = EINVAL;
	break;
    }

    /* that's all */
    return(error);
}

/**********************************************************************/

static int en_inquire(_kernel_swi_regs *r)
{
    if( r->r[0] )
	return(EINVAL);

    r->r[2] = INQ_MULTICAST | INQ_PROMISCUOUS |
	INQ_HWADDRVALID | INQ_SOFTHWADDR;

    return(0);
}

/**********************************************************************/

static int en_version(_kernel_swi_regs *r)
{
    if( r->r[0] )
	return(EINVAL);

    r->r[1] = DCIVERSION;
    return (0);
}

/**********************************************************************/

static int en_getmtu(_kernel_swi_regs *r)
{
    if( r->r[0] )
	return(EINVAL);

    r->r[2] = ETHERMTU;
    return(0);
}

/**********************************************************************/

static int en_setmtu(_kernel_swi_regs *r)
{
    return(EINVAL);
}

/**********************************************************************/

static void callback(int (*f)(), void *pw)
{
        _kernel_swi_regs r;

        r.r[0] = (int)f;
        r.r[1] = (int)pw;

        (void)_kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r);
}

/**********************************************************************/

/*
 * callb_handler - handler for callback primed by initialisation
 * routine: send round DCIDriverStatus service call for all units
 */
int callb_handler(void)
{
    int i;
    int s = splimp();

    for( i = 0; i < encnt; ++i )
    {
	_kernel_swi_regs r;

	r.r[0] = (int)dibs[i];
	r.r[1] = Service_DCIDriverStatus;
	r.r[2] = 0;
	r.r[3] = DCIVERSION;

	(void)_kernel_swi(XOS_Bit | OS_ServiceCall, &r, &r);
    }
    splx(s);

    /*
     * finished - return a non-zero value so
     * the cmhg veneers take the correct exit
     */
    return(1);
}

/**********************************************************************/

/*
 * Module Initialisation code.
 */
_kernel_oserror *en_initialise(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror *e;
    int unit;
    DibRef dib;
    char location_string[] = "Expansion Slot %d\n";

    module_wsp = pw;

    en_init();

    if (encnt == 0)
	return((_kernel_oserror *)0);

    /*
     * Initialize Driver Information Blocks
     */
    for( unit = 0; unit < encnt; unit++ )
    {
	if( (dib = (DibRef)malloc(sizeof(*dib))) == NULL )
	    return(en_error(ENOMEM));

	dibs[unit] = dib;

	dib->dib_swibase = EN_SWI_BASE;
	dib->dib_name = (unsigned char *)"en";
	dib->dib_unit = unit;
	dib->dib_address = en_addresses(unit);
	dib->dib_module = (unsigned char *)"Ether2";
	if( (dib->dib_location =
	     (unsigned char *)malloc(sizeof(location_string))) == NULL )
	{
	    (void)free(dib);
	    return(en_error(ENOMEM));
	}
	else
	{
	    int i;
	    extern int slotmap[];

	    /*
	     * need to map backwards from unit to physical slot
	     */
	    for( i = 0; i < XCB_SLOTS; ++i )
		if( slotmap[i] == unit )
		    break;

	    if( i < XCB_SLOTS )
	    {
		sprintf((char *)dib->dib_location, location_string, i);
		dib->dib_slot.sl_slotid = i;
	    }
	    else
	    {
		sprintf((char *)dib->dib_location, "** UNKNOWN SLOT **");
		dib->dib_slot.sl_slotid = -1;
	    }
	}

	/*
	 * do not bring the card up live yet - set an internal flag
	 * to force a power-on self-test when the card is actually
	 * brought up via the filter SWI.
	 */
	en_forcepost(unit);
    }

    /*
     * set intial address filter
     */
    address_filter = af_reject;

    /*
     * check whether the mbuf manager module is loaded yet
     */
    if( !managerstarted && mb_present() )
    {
	/*
	 * mbuf manager is loaded - initialise entry points
	 */
	if( (e = mb_entryinit()) != NULL )
	    return(e);

	/*
	 * OK - set a callback to issue Service_DCIDriverStatus
	 */
	callback(callb_entry, pw);

	managerstarted = 1;
    }

    return ((_kernel_oserror *)0);
}

/**********************************************************************/

/*
 * Module Finalization code
 */
_kernel_oserror *en_quit(void)
{
    _kernel_swi_regs r;
    int i;

    finalising = 1;

    for( i = 0; i < encnt; ++i )
    {
	r.r[0] = (int)dibs[i];
	r.r[1] = Service_DCIDriverStatus;
	r.r[2] = 1;
	r.r[3] = DCIVERSION;

	(void) _kernel_swi(XOS_Bit | OS_ServiceCall, &r, &r);
    }

    en_final();

    /*
     * finish session with mbuf manager, ignore any
     * errors (they don't mean much, since session
     * *may* still be closed, despite any errors
     * returned)
     */
    (void)mb_closesession();

    return(NULL);
}

/**********************************************************************/

/*
 * handle_managerstatus - deal with a MbufManagerStatus service call
 */
static void handle_managerstatus(_kernel_swi_regs *r)
{
    switch( r->r[0] )
    {
      case MbufManagerStatus_Started:
	if( !managerstarted )
	{
	    /*
	     * mbuf manager has appeared - initialise entry points
	     */
	    if( mb_entryinit() == NULL )
	    {
		/*
		 * mbuf system initialised, set a callback
		 * to announce our presence
		 */
		managerstarted = 1;
		callback(callb_entry, module_wsp);
	    }
	}

	break;

      case MbufManagerStatus_Stopping:
	/*
	 * should only ever see this message if we are
	 * finalising our own module, otherwise something
	 * has gone terribly wrong (the mbuf manager should
	 * only stop when all its clients have closed their
	 * sessions)
	 */
	if( !finalising )
	    panic("Mbuf manager has stopped");

	break;

      case MbufManagerStatus_Scavenge:
	/* do nothing */
	break;

      default:
	break;
    }
}

/**********************************************************************/

/* Module Service Call handler */
void en_sc_handler(int sn, _kernel_swi_regs *r)
{
    int i;

    /*
     * ignore nearly all calls until the
     * mbuf manager has been initialised
     */
    if( !managerstarted )
    {
	if( sn == Service_MbufManagerStatus)
	    /* best not to ignore this one */
	    handle_managerstatus(r);
    }
    else
    {
	switch( sn )
	{
	  case Service_EnumerateNetworkDrivers:
	    for( i = 0; i < encnt; ++i )
	    {
		ChDibRef chd;

		if( (chd = (ChDibRef)malloc(sizeof(*chd))) == NULL )
		    /*
		     * failed to claim memory - return as
		     * much information as possible
		     */
		    break;

		chd->chd_dib = dibs[i];
		chd->chd_next = (ChDibRef)r->r[0];
		r->r[0] = (int)chd;
	    }

	    break;

	  case Service_DCIProtocolStatus:
	    if( r->r[3] == DCIVERSION )
	    {
#if 0
		/* TRACE */
		Printf("\021\02en: Protocol '%s' is %sing\021\07\n",
		       r->r[4], r->r[2] ? "dy" : "start");
#endif
		/*
		 * only interested in termination calls
		 */
		if( r->r[2] == 1 )
		    filtersoff(r->r[0]);
	    }
#if 0
	    /* TRACE */
	    else
		Printf("\021\01en: DCIProtocolDying with "
		       "version %d.%02d\021\07\n",
		       r->r[3] / 100, r->r[3] % 100);
#endif

	    break;

	  default:
	    break;
	}
    }
}

/**********************************************************************/

/*
 * Module SWI handler
 */
_kernel_oserror *en_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error, oldstate;

    /*
     * XXX
     *
     * we *assume* that, since service calls are not active
     * until the mbuf manager has been started, nobody can
     * find out our swibase, and therefore cannot raise any
     * SWIS.  if this is not true (i.e. someone looks up our
     * particular SWI number, then they deserve all the trouble
     * which they are probably likely to receive.
     */
    if( swinum >= (sizeof(en_ent) / sizeof(en_ent[0])) )
	return(en_error(ENOTTY));

    if( encnt == 0 )
	return(en_error(ENXIO));

#ifdef DEBUG
    Printf("SWI %x...", swinum & 63);
#endif
    callp = &en_ent[swinum];
    oldstate = ensure_irqs_on();
    error = (*(callp->swi_call))(r);
    restore_irqs(oldstate);

#ifdef DEBUG
    Printf("error %d\n", error);
#endif

    return(en_error(error));
}

/***************************************************