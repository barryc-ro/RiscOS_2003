/*	C.CACHE

Purpose : Utility routines for file extension mapping.

History :
Date	Who    Comments
-----------------------------------------------------------------------------
??       ??     INITIAL VERSION
6/3/95   CP     extensions_read() : Stopped routine from returning an error
	 	if extensions file not found.
****************************************************************************/

#ifndef __NFSNFS_h
#include "NFS.h"
#endif

/*
        Special feature Yes on to_extensions means don't add suffix if already there
        Special feature Yes on from_extensions means leave suffix
*/
typedef struct extension
{
        int filetype;
        int special_feature;
        char *extension;
        int extension_len;
}       extension;

typedef struct extensions_map
{
        int to_extensions;      /* to riscos client */
        int from_extensions;    /* from riscos client */
        extension extension[1];
}       extensions_map;

#define From_Extensions_Line "From extensions:\n"
#define To_Extensions_Line "To extensions:\n"
#define Extensions_File "<InetDBase$Path>extensions"
static extensions_map *all_extensions = NULL;

_kernel_oserror *filetype_ston
(
        int *filetype,
        char *string
)
{
        _kernel_oserror *err;
        _kernel_swi_regs r;

        r.r[0] = 31;    /* Convert a filetype string to a number */
        r.r[1] = (int)string;

        err = _kernel_swi( XOS_Bit | OS_FSControl, &r, &r  );

        if ( !err )
        {
                *filetype = r.r[2];
        }

        return err;
}

_kernel_oserror *extensions_read
(
        void
)
{
        _kernel_oserror *err = NULL;
        FILE *infile;
        int reading_second_half = No;
        int to_extensions = 0;
        int from_extensions = 0;
        int to_extensions_text = 0;
        int from_extensions_text = 0;
        int entry_rover = 0;
        char *texts_rover = NULL;
        char line[ 300 ];
        char filetype_s[ 9 ];
        int filetype_n;
        char extension[ 51 ];
        char special_feature[ 51 ];
        int fields_read;

        infile = fopen( Extensions_File, "r" );


/************** CP 6/3/95
Don't need to report an error if Extensions file not there.  Just return.
***************/
        if ( infile == NULL )
        {
                return NULL;
        }

        /*
                Assess how much space we'll need
        */
        while ( !err && fgets( line, sizeof( line ), infile ) )
        {
                if ( caseless_strcmp( line, From_Extensions_Line ) == 0 )
                        continue;

                if ( caseless_strcmp( line, To_Extensions_Line ) == 0 )
                {
                        reading_second_half = Yes;
                        continue;
                }


                fields_read = sscanf( line, "%8s %50s %50s", filetype_s, extension, special_feature );
                if ( ( fields_read == 2 || fields_read == 3 ) &&
                        !filetype_ston( &filetype_n, filetype_s ) )
                {
                        (*(reading_second_half?&to_extensions:&from_extensions))++;
                        *(reading_second_half?&to_extensions_text:&from_extensions_text) += strlen( extension ) + 1;
                }
                else if ( caseless_strcmp( line, To_Extensions_Line ) == 0 )
                {
                        reading_second_half = Yes;
                }
        }

        if ( (all_extensions = (extensions_map *)malloc( sizeof( *all_extensions ) + sizeof( all_extensions->extension[0] ) * ( from_extensions + to_extensions - 1 ) + from_extensions_text + to_extensions_text )) == NULL )
        {
                err = &mb_malloc_failed;
        }

        if ( !err )
        {
                rewind( infile );
                entry_rover = 0;
                texts_rover = (char *)&all_extensions->extension[ from_extensions + to_extensions ];
                all_extensions->from_extensions = from_extensions;
                all_extensions->to_extensions = to_extensions;
        }

        while ( !err && fgets( line, sizeof( line ), infile ) )
        {
                if ( caseless_strcmp( line, From_Extensions_Line ) == 0 ||
                        caseless_strcmp( line, To_Extensions_Line ) == 0 )
                {
                        continue;
                }

                fields_read = sscanf( line, "%8s %50s %50s", filetype_s, extension, special_feature );
                if ( ( fields_read == 2 || fields_read == 3 ) &&
                        !filetype_ston( &filetype_n, filetype_s ) )
                {
                        all_extensions->extension[ entry_rover ].filetype = filetype_n;
                        all_extensions->extension[ entry_rover ].extension = texts_rover;
                        all_extensions->extension[ entry_rover ].special_feature = fields_read == 3;
                        all_extensions->extension[ entry_rover ].extension_len = strlen( extension );
                        strcpy( texts_rover, extension );
                        texts_rover += all_extensions->extension[ entry_rover ].extension_len + 1;
                        entry_rover++;
                }
        }

        if ( !err && !feof( infile ))
        {
                err = _kernel_last_oserror();
        }

        fclose( infile );

        return err;
}

_kernel_oserror *extensions_dispose
(
        void
)
{
        if ( all_extensions )
        {
                free( all_extensions );
                all_extensions = NULL;
        }

        return NULL;
}

/*
        *filetype set to -1 if no extension found.
*/
void extensions_check_nfs_name_for_extension
(
        char *nfs_name,
        int *filetype,
        int *chars_to_leave
)
{
        int extno;
        int filenamelen = strlen( nfs_name );
        extension *check_extension;

        *filetype = -1;

        if ( all_extensions )
        {
                for ( extno = 0; extno < all_extensions->to_extensions; extno++ )
                {
                        check_extension = &all_extensions->extension[ extno + all_extensions->from_extensions ];
                        if ( filenamelen >= check_extension->extension_len &&
                                caseless_strcmp( &nfs_name[ filenamelen - check_extension->extension_len ],
                                                check_extension->extension ) == 0 )
                        {
                                *filetype = check_extension->filetype;
                                if ( check_extension->special_feature )
                                {
                                        *chars_to_leave = filenamelen;
                                }
                                else
                                {
                                        *chars_to_leave = filenamelen - check_extension->extension_len;
                                }

                                return;
                        }
                }
        }
}

static void dirseparator_rton_strcpy( char *dest, char *source )
{
        while( *source )
        {
                if ( *source == FileChar_NFSDirectorySeparator )
                {
                        *dest = FileChar_DirectorySeparator;
                }
                else
                {
                        *dest = *source;
                }
                source++;
                dest++;
        }

        *dest = '\0';
}

/*
        *resultane_name set to NULL if type has no corresponding extension
*/
_kernel_oserror *extensions_extend_nfs_name_with_file_type
(
        char **resultant_name,
        char *unextended_name,
        int filetype
)
{
        _kernel_oserror *err = NULL;
        int extno;
        extension *check_extension;
        int filename_len = strlen( unextended_name );

        *resultant_name = NULL;

        if ( all_extensions )
        {
                for ( extno = 0; extno < all_extensions->from_extensions; extno++ )
                {
                        check_extension = &all_extensions->extension[ extno ];
                        if ( check_extension->filetype == filetype )
                        {
                                if ( check_extension->special_feature &&
                                        filename_len >= check_extension->extension_len &&
                                        caseless_strcmp( &unextended_name[ filename_len - check_extension->extension_len ], check_extension->extension )==0 )
                                {
                                        *resultant_name = malloc( filename_len + 1 );
                                        if ( *resultant_name )
                                        {
                                                dirseparator_rton_strcpy( *resultant_name, unextended_name );
                                        }
                                        else
                                        {
                                                err = &mb_malloc_failed;
                                        }
                                }
                                else
                                {
                                        *resultant_name = malloc( filename_len + check_extension->extension_len + 1 );
                                        if ( *resultant_name )
                                        {
                                                dirseparator_rton_strcpy( *resultant_name, unextended_name );
                                                strcat( *resultant_name, check_extension->extension );
                                        }
                                        else
                                        {
                                                err = &mb_malloc_failed;
                                        }
                                }

                                return err;
                        }
                }
        }

        return NULL;
}
