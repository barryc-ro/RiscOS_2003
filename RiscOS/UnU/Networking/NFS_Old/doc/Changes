STBNFS version 1.03
-------------------
Changed module title string to NFSSTB.

Re-enabled case-insensitivity code.  Porting current applications to be case
sensitive is proving to be difficult, since many problems lie in absolute
files.  Therefore, for now the NFS will be case-tolerant (with the network
traffic overhead incurred by incorrect names).  However, all future
applications for the trial should assume case-sensitivity.

STBNFS version 1.02
-------------------
If the extensions file cannot be opened for any reason, STBNFS no longer
reports an error.  It copes with the situation. (see extensions.c).


STBNFS version 1.01
-------------------
'Oops, file no longer exists but I don't care' Bug fixed.

A check is now made in nfsrw_readmany(...) (well, schedule(...), actually) to
check if NFS return value is valid (ie. NFS_OK).  Previously, only a check on
the RPC return value was being made.  The RPC could be successful, but not
the NFS call...


STBNFS version 1.00 
-------------------
Overview of changes from v2.11 NFS code

Removed case tolerance code.

If you don't get a filename exactly right, it isn't recognised any more. 
This is because the searching for a 'nearly matching' name does not use the
cache, and requires complete searches of the directory across NFS every time
it is used (even in a pathname !).  This does not affect desktop operation,
since it uses NFS-supplied (ie case-correct) filenames.  It may cause errors
with CLI commands, though.

Using the correct case gives an enormous improvement in network traffic
because of this (a factor of 10 improvement...).  This is also true for 
v2.11.

Changed the way that directory listing requests are handled. 

If the request from FileSwitch wants to start from the beginning of a
directory, then the directory data is reloaded across the network.  If the
request is for entries beyond the beginning of a directory (for example,
subsequent _Func 15 calls), then an attempt is made to use the data already
resident in the RPC buffer.  This gives a 10% (roughly) further improvement
in network traffic when navigating directory structures.

Increased size of cache

The cache now has 50 entries, and has pushed the cache hit rate up from
around 70% to nearer 75% in average use.

For systems with large numbers of entries on directory branches (ie. > 50),
it would be advantageous to extend this further.  There may be a case to make
this user-defineable ?  (GUI front end for fine-tuning perhaps ?).

CP
22/2/95

NFS version 2.23
----------------
Overview of changes from v2.22 code

Added the ability to boot from NFS as the configured filesystem, for Om 
set-top box use.

The effective sequence of operations is

    mount -host <Inet$BootServer> nfsboot <Inet$MountPath>
    run nfs::nfsboot.$.!NFSBoot

If Inet$BootServer is not set then the boot sequence is aborted.
If Inet$MountPath is not set then the default"/nfsboot" is tried.

KSR
23/2/95
