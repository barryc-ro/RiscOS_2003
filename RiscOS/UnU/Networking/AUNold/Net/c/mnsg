#ifdef OldCode
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <stdio.h>
#include <sys/errno.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>

#include "module.h"
#else

/*#include <stdio.h>*/
/*#include <ctype.h>*/

#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/uio.h"
#include "sys/socket.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "netinet/in.h"
#include "net/if.h"
/*#include "sys/errno.h"*/

#include "module.h"
#endif

extern int mns_final(), mns_event_entry(), tick_entry();
extern _kernel_oserror *call_econet();
extern _kernel_oserror *do_econet();
extern int *swi_code, *swi_data;

void *module_wsp = 0;

struct mns mns = { 0 };
int connected_econet = 0;
int econet_transport_type = 0;
int routed_changes = 0;
int startup_timer = 0;
int econet_not_present = 0;
int restarting = 0;
u_long eco_bcast = 0;
int *routedsock = 0;  /* for routed */
int *timerp = 0;
int not_routing = 0;

extern char *message_strs[];
extern struct eblk error_blocks[];

struct {
    int  e_nbr;
    char e_string[36];
} ebuf = { 0 };

char textbuf[64] = { 0 };

char msg_fd_eco[16] = { 0 };
char msg_fd_mns[16] = { 0 };

struct client {
        int (*cli_call)();      /* cli handler */
};

int mns_addmap();
int mns_showmap(), mns_showroutes(), mns_showif(), mns_ping();
int routed_traceoff(), routed_traceon(), routed_notrouting();

struct client mns_cli_call[9] = {
    mns_addmap,
    mns_showmap,
    mns_showroutes,
    mns_showif,
    mns_ping,
    routed_traceoff,
    routed_traceon,
    routed_notrouting,
    0,
};

struct swient {
        int (*swi_call)();      /* swi handler */
};

extern int CreateReceive(), ExamineReceive(), ReadReceive();
extern int AbandonReceive(), WaitForReception(), EnumerateReceive();
extern int StartTransmit(), PollTransmit(), AbandonTransmit();
extern int DoTransmit(), ReadLocalStationAndNet();
extern int ConvertStatusToString(), ConvertStatusToError();
extern int ReadProtection(), SetProtection(), ReadStationNumber();
extern int PrintBanner(), ReadTransportType(), ReleasePort(), AllocatePort();
extern int DeAllocatePort(), ClaimPort(), StartImmediate();
extern int DoImmediate(), AbandonAndReadReceive(), Version(), NetworkState();
extern int PacketSize(), ReadTransportName(), InetRxDirect(), EnumerateMap();
extern int EnumerateTransmit(), HardwareAddresses();

#define MAXSWI 34

struct swient mns_ent[MAXSWI] = {
    CreateReceive,  ExamineReceive, ReadReceive,
    AbandonReceive, WaitForReception, EnumerateReceive,
    StartTransmit, PollTransmit, AbandonTransmit,
    DoTransmit, ReadLocalStationAndNet,
    ConvertStatusToString, ConvertStatusToError,
    ReadProtection, SetProtection, ReadStationNumber,
    PrintBanner, ReadTransportType, ReleasePort, AllocatePort,
    DeAllocatePort, ClaimPort, StartImmediate,
    DoImmediate, AbandonAndReadReceive, Version, NetworkState,
    PacketSize, ReadTransportName, InetRxDirect, EnumerateMap,
    EnumerateTransmit, HardwareAddresses,
    0,
};

extern _kernel_oserror *mns_error(), *init_msgs(), *mns_evenable();
extern _kernel_oserror *calleverytick(), *init_econet(), *mns_claimv();
extern u_long htonl(), inet_makeaddr();
extern char *inet_ntoa(), *mns_str(), *strchr();

/*ARGS_USED*/
_kernel_oserror *
mns_init(cmd_tail, pbase, pw)
char *cmd_tail;
int pbase;
void *pw;
{
    _kernel_oserror *e = 0;

    module_wsp = pw;
    e = mns_claimv();
    if (e)
        return (e);
    e = mns_evenable();
    if (e)
        goto out;
    e = calleverytick(tick_entry);
    if (e)
        goto out;
    e = init_msgs(MSG_FILE, msg_fd_eco);
    if (e)
        goto out;
    e = init_msgs(MSG_FILE1, msg_fd_mns);
    if (e)
        goto out;
    e = init_econet();
    if (e)
        econet_not_present = 1;
    do_mns_init(1);
    routedsock = &(mns.mns_routedsock);
    timerp = &(mns.mns_timer);
    atexit(mns_final);
    restarting = 1;
    setcallback();
    return ((_kernel_oserror *)0);
out:
    mns_final();
    return (e);
}

notify_users()
{
    _kernel_swi_regs r;

    r.r[1] = Service_ReAllocatePorts;
    (void) _kernel_swi(XOS_Bit | OS_ServiceCall, &r, &r);
}

do_mns_init(booting)
int booting;
{
    _kernel_swi_regs r;
    int no_econet_clock = 0;
    int rxd, txd, atp, routed;

    rxd = booting ? -1 : mns.mns_rxdsock;
    txd = booting ? -1 : mns.mns_txdsock;
    atp = booting ? -1 : mns.mns_atpsock;
    routed = booting ? -1 : mns.mns_routedsock;
    memset((char *)&mns, 0, sizeof(mns));
    mns.mns_rxdsock    = rxd;
    mns.mns_txdsock    = txd;
    mns.mns_atpsock    = atp;
    mns.mns_routedsock = routed;
    mns.mns_txhandle = MNS_HANDLE_BASE;
    mns.mns_rxhandle = MNS_HANDLE_BASE;
    mns.mns_nextport = 1;
    if (!booting)
        return;
    (void) read_device_info(mns.mns_device, mns.mns_module,
                            &connected_econet, &no_econet_clock,
                            &mns.mns_segsize);
    if (connected_econet != -1)
        mns.mns_states[connected_econet] |= ECONET_IS_CONNECTED;
    r.r[0] = 0; r.r[1] = 2;
    econet_transport_type = call_econet(Econet_ReadTransportType, &r) ? 2 : r.r[2];
}

_kernel_oserror *
mns_claimv()
{
    _kernel_swi_regs r;

    r.r[0] = EventV;
    r.r[1] = (int)mns_event_entry;
    r.r[2] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_Claim, &r, &r));
}

_kernel_oserror *
mns_evenable()
{
    _kernel_swi_regs r;

    r.r[0] = Event_Enable;
    r.r[1] = Internet_Event;
    return (_kernel_swi(XOS_Bit | OS_Byte, &r, &r));
}

mns_releasev()
{
    _kernel_swi_regs r;

    r.r[0] = Event_Disable;
    r.r[1] = Internet_Event;
    (void) _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    r.r[0] = EventV;
    r.r[1] = (int)mns_event_entry;
    r.r[2] = (int)module_wsp;
    (void) _kernel_swi(XOS_Bit | OS_Release, &r, &r);
}

_kernel_oserror *
mns_swi_handler(swinum, r, pw)
int swinum;
_kernel_swi_regs *r;
void *pw;
{
    struct swient *callp;
    _kernel_oserror *e = 0;
    int oldstate;

    if (swinum < 0 || swinum >= MAXSWI)
        return (mns_error(Err_BadSWI));
    callp = &mns_ent[swinum];
    oldstate = ensure_irqs_off();
    e = (_kernel_oserror *)(*(callp->swi_call))(r);
    restore_irqs(oldstate);
    return (e);
}

/*ARGSUSED*/
_kernel_oserror *
mns_cli_handler(arg_string, arg_count, cmd_no, pw)
char *arg_string;
int arg_count, cmd_no;
void *pw;
{
    struct client *callp;
    int margc;
    char *margv[10];
    char *cp;
    char **argp = margv;

    margc = 0;
    cp = arg_string;
    while (*cp && arg_count-- > 0) {
        while (isspace(*cp))
            cp++;
        if (*cp == '\0')
            break;
        *argp++ = cp;
        margc++;
        while (*cp != '\0' && !isspace(*cp))
            cp++;
        if (*cp == '\0')
            break;
        *cp++ = '\0';
    }
    *argp++ = 0;
    callp = &mns_cli_call[cmd_no];
    (void)(*(callp->cli_call))(margc, margv);
    return ((_kernel_oserror *)0);
}

mns_addmap(argc, argv)
int argc;
char **argv;
{
    struct atp_block ablock;
    u_long inet_addr();

    if (strcmp (argv[0], "0") == 0) {
        read_ifs(1, 0);
        setbmap();
        if (mns.mns_ifcnt > 0 && init_sockets() != -1) {
            mns.mns_flags = (MNS_GATEWAY|MNS_MAPISSET|MNS_SOCKET);
            if (mns.mns_routedsock != -1)
                startup_routed();
        }
    }
    else if (strcmp (argv[0], "1") == 0 && !(mns.mns_flags & MNS_MAPISSET)) {
        memset(ablock.atpb_sitename, 0, 16);
        memset(ablock.atpb_netname, 0, 16);
        ablock.atpb_ipadr = inet_addr(argv[1]);
        ablock.atpb_net = (u_char)atoi(argv[2]);
        ablock.atpb_station = 0;
        ablock.atpb_sitename[0] = 0;
        ablock.atpb_netname[0] = 0;
        argc -= 2;
        if (argc > 0 && strlen(argv[3]) < ITEM_NAMELEN) {
            if (strcmp(argv[3], "ThisSite") != 0)
                strcpy(ablock.atpb_sitename, argv[3]);
            argc--;
        }
        if (argc > 0 && strlen(argv[4]) < ITEM_NAMELEN)
            strcpy(ablock.atpb_netname, argv[4]);
        (void) atp_add_newitem(&ablock);
    }
}

/*ARGSUSED*/
mns_showif(argc, argv)
int argc;
char **argv;
{
    int all = 0;

    if (mns_warnings())
        return;
    if (argc > 0)
        all = 1;
    read_ifs(0, 1);
    mns_info(all);
}

mns_ping(argc, argv)
int argc;
char **argv;
{
    _kernel_swi_regs r;
    int station, net;
    char b[6];

    r.r[1] = (int)(argv[0]);
    if (!ReadStationNumber(&r)) {
        station = r.r[2];
        net     = r.r[3] == -1 ? 0 : r.r[3];
        r.r[0]  = 8;   /* MachinePeek */
        r.r[1]  = 0;
        r.r[2]  = station;
        r.r[3]  = net;
        r.r[4]  = (int)b;
        r.r[5]  = sizeof(b);
        r.r[6]  = 2;
        r.r[7]  = 100;
        printf("%s\n", (DoImmediate(&r) == 0 && r.r[0] == Status_Transmitted) ?
                       mns_str(Str_TxOk) : mns_str(Str_NotAcc));
        return;
    }
    printf("%s\n", mns_str(Str_GtwSta));
}

mns_showmap(argc, argv)
int argc;
char **argv;
{
    struct address_q *q;
    u_char net = 0;
    char abuf[32];
    int n;

    if (argc)
        net = (u_char)atoi(argv[0]);
    for (q = mns.mns_mapq; q; q = q->q_next) {
        if (net && net != q->q_net)
            continue;
        sprintf(abuf, "%s", inet_ntoa(q->q_ip));
        if (n = strlen(abuf))
            abuf[n-1] = 'x';
        printf("%-8d%-16s%-16s%s\n", q->q_net, q->q_netname, abuf, q->q_sitename);
        if (net)
            break;
    }
}


/*ARGSUSED*/
routed_traceoff(argc, argv)
int argc;
char **argv;
{
    traceoff(1);
    return (0);
}

routed_traceon(argc, argv)
int argc;
char **argv;
{
    traceon (argc > 0 ? *argv : 0);
    return (0);
}

/*ARGSUSED*/
routed_notrouting(argc, argv)
int argc;
char **argv;
{
    not_routing = 1;
    return (0);
}

_kernel_oserror *
mns_error(error)
int error;
{
    _kernel_swi_regs r;
    _kernel_oserror *e;

    if (!error)
        return ((_kernel_oserror *)0);
    ebuf.e_nbr = error_blocks[error].err_nbr;
    strcpy(ebuf.e_string, error_blocks[error].err_token);
    memset ((char *)&r, 0, sizeof(r));
    r.r[0] = (int)&ebuf;
    r.r[1] = (error == Err_Fatal) ? (int)msg_fd_mns : (int)msg_fd_eco;
    e = _kernel_swi(XOS_Bit | MessageTrans_ErrorLookup, &r, &r);
    return (e ? e : (_kernel_oserror *)&ebuf);
}

char *
mns_str(strnbr)
int strnbr;
{
    _kernel_swi_regs r;
    _kernel_oserror *e;

    memset ((char *)&r, 0, sizeof(r));
    memset (textbuf, 0, sizeof(textbuf));
    r.r[0] = (int)msg_fd_mns;
    r.r[1] = (int)message_strs[strnbr];
    r.r[2] = (int)textbuf;
    r.r[3] = sizeof(textbuf);
    e = _kernel_swi(XOS_Bit | MessageTrans_Lookup, &r, &r);
    return (e ? message_strs[strnbr] : textbuf);
}

generate_event(rx, handle, status, port)
int rx, handle, status, port;
{
    _kernel_swi_regs r;

    r.r[0] = rx ? Event_Econet_Rx : Event_Econet_Tx;
    r.r[1] = handle;
    r.r[2] = status;
    r.r[3] = port;
    (void) _kernel_swi(XOS_Bit | OS_GenerateEvent, &r, &r);
}

extern int callb_entry();
volatile int callbackflag = 0;

setcallback()
{
    if (callbackflag == 0) {
        callbackflag = 1;
        if (callback(callb_entry) != 0)
            callbackflag = 0;
    }
}

generate_event_on_callback(tx)
struct txcb *tx;
{
    tx->tx_callb = 1;
    setcallback();
}

retransmit_on_callback(tx)
struct txcb *tx;
{
    tx->tx_callb = 2;
    setcallback();
}

int callback(func)
void (* func)();
{
    _kernel_swi_regs r;

    r.r[0] = (int)func;
    r.r[1] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r) != 0 ? -1 : 0);
}

int callb_handler(r)
int *r;
{
    struct txcb *tx;
    int cval;
    int oldstate;

    if (callbackflag == 0)
        return (1);
    callbackflag = 0;
    if (restarting) {
        restarting = 0;
        notify_users();
    }
    for (;;) {
        oldstate = ensure_irqs_off();
        for (tx = mns.mns_txlist; tx; tx = tx->tx_next) {
            if ((cval = tx->tx_callb) != 0) {
                tx->tx_callb = 0;
                break;
            }
        }
        restore_irqs(oldstate);
        if (tx == (struct txcb *)0)
            break;
        switch (cval) {
            case 1:
                if (tx->tx_status != Status_Free)
                    generate_event(0, tx->tx_handle, tx->tx_status, tx->tx_port);
                break;

            case 2:
                retry_tx(tx);
                break;

            default:
                break;
        }
    }
    return (1);
}

_kernel_oserror *
calleverytick(fun)
int (*fun)();
{
    _kernel_oserror *e;
    _kernel_swi_regs r;

    r.r[0] = TickerV;
    r.r[1] = (int)fun;
    r.r[2] = (int)module_wsp;
    e = _kernel_swi(XOS_Bit | OS_Claim, &r, &r);
    if (e)
        return (e);
    return ((_kernel_oserror *)0);
}

removetickerevent(fun)
int (*fun)();
{
    _kernel_swi_regs r;

    r.r[0] = TickerV;
    r.r[1] = (int)fun;
    r.r[2] = (int)module_wsp;
    (void) _kernel_swi(XOS_Bit | OS_Release, &r, &r);
}

tick_handler(r, pw)
int *r;
void *pw;
{
    if (mns.mns_timer > 0 && --(mns.mns_timer) == 0)
        rt_bcast();
    if (startup_timer > 0 && --startup_timer == 0)
        do_ripcmd_req();
    check_rxcbs();
    check_txcbs();
    return (1);
}

int
do_getsock(port, inputsocket, direct)
int port, inputsocket, direct;
{
    struct sockaddr_in addr;
    int sock, arg, on = 1;

    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        return (-1);
    arg = direct ? Econet_InetRxDirect : 1;
    if (socketioctl(sock, FIONBIO, &on) < 0 || socketioctl(sock, direct ? FIORXDIR : FIOASYNC, &arg) < 0) {
        socketclose (sock);
        return (-1);
    }
    if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &on, sizeof (on)) < 0 ||
        setsockopt(sock, SOL_SOCKET, SO_NOCHKSUM, &on, sizeof (on)) < 0) {
        socketclose(sock);
        return (-1);
    }
    if (inputsocket) {
        addr.sin_family = AF_INET;
        addr.sin_addr.s_addr = htonl(INADDR_ANY);
        addr.sin_port = htons((u_short)port);
        if (bind(sock, (struct sockaddr *)&addr, sizeof (addr)) < 0) {
            socketclose(sock);
            return (-1);
        }
    }
    return (sock);
}

mns_final()
{
    traceoff(1);
    mns_releasev();
    release_msgs(msg_fd_eco);
    release_msgs(msg_fd_mns);
    free_sockets();
    removetickerevent(tick_entry);
}

/*ARGSUSED*/
void mns_sc_handler(sn,r)
int sn;
_kernel_swi_regs *r;
{
    switch (sn) {
        case Service_MessageFileClosed:
            if (r->r[0] == (int)msg_fd_eco)
                (void) init_msgs(MSG_FILE, msg_fd_eco);
            else if (r->r[0] == (int)msg_fd_mns)
                (void) init_msgs(MSG_FILE1, msg_fd_mns);
            return;

        case Service_ProtocolDying:
            if (r->r[2] == InternetID)
                break;
            return;

        case Service_Reset:
            if (!reset_is_soft())
                return;
            break;

        case Service_EconetDying:
            break;

        default:
            return;
    }
    do_mns_init(0);
    econet_not_present = 1;
    connected_econet = -1;
    return;
}

int reset_is_soft()
{
    _kernel_swi_regs r;

    r.r[0] = 253;
    r.r[1] = 0;
    r.r[2] = 255;
    return ((_kernel_swi(XOS_Bit | OS_Byte, &r, &r) != 0 || r.r[1] == 0) ? 1 : 0);
}

mns_event_handler(r, pw)
int *r;
void *pw;
{
    if (r[0] == Internet_Event && r[1] == SocketIO) {
        if (r[2] == mns.mns_atpsock || r[2] == mns.mns_routedsock) {
            process_input(r[2]);
            return (0);
        }
    }
    return (1);
}

read_ifs(gateway, print)
int gateway, print;
{
    int s, n, eco, no_econet_clock;
    char buf[512], name[24];
    struct ifconf ifc;
    struct ifreq ifreq, *ifr;
    struct sockaddr_in *sin;
    u_long addr;
    int icnt, first = 1;

    if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        return;
    ifc.ifc_len = sizeof (buf);
    ifc.ifc_buf = buf;
    if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0) {
        socketclose(s);
        return;
    }
    if (print && mns.mns_econetipadr == 0 && connected_econet != -1) {
        (void) read_eco_info(&connected_econet, &no_econet_clock);
        printf("%-18s", mns_str(Str_NtvEco));
        printf("%d.%d", connected_econet, mns.mns_stationnumber);
        if (no_econet_clock)
            printf(" (%s)", mns_str(Str_Noclck));
        printf("\n\n");
    }
    for (n = 0; n < 4; n++)
        mns.mns_ifaddrs[n] = 0;
    icnt = 0;
    mns.mns_ifcnt = 0;
    mns.mns_econetipadr = 0;
    eco_bcast = 0;
    ifr = ifc.ifc_req;
    for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++) {
        ifreq = *ifr;
        if (socketioctl(s, SIOCGIFFLAGS, (char *)&ifreq) < 0 || ifreq.ifr_flags & IFF_LOOPBACK)
            continue;
        if (print) {
            if (!first)
                printf("\n");
            printf("%-18s", mns_str(Str_IfType));
        }
        eco = strcmp(ifreq.ifr_name, "ec0") == 0 ? 1 : 0;
        if (print) {
            strcpy(name, ifreq.ifr_name);
            name[strlen(name) - 1] = 0;
            namtomodule(name);
            printf("%s ", name);
        }
        if ((ifreq.ifr_flags & (IFF_BROADCAST|IFF_UP)) != (IFF_BROADCAST|IFF_UP)) {
            if (print)
                printf("(%s)\n", mns_str(Str_Down));
            goto next;
        }
        if (print)
            printf("\n");
        if (socketioctl(s, SIOCGIFADDR, (char *)&ifreq) < 0)
            goto next;
        sin = (struct sockaddr_in *)&ifreq.ifr_addr;
        addr = ntohl(sin->sin_addr.s_addr);
        if (mns.mns_stationnumber == 0)
            mns.mns_stationnumber = (addr & 0xff);
        if (print) {
            printf("%-18s%ld.%ld\n",  mns_str(Str_StaNum), (addr & 0xff00) >> 8, addr & 0xff);
            printf("%-18s%s\n", mns_str(Str_FullAd), inet_ntoa(sin->sin_addr));
        }
        if (eco || !mns.mns_netnumber)
            mns.mns_netnumber = (addr & 0xff00) >> 8;
        if (eco) {
            mns.mns_econetipadr = (addr & ~0xffff);
            mns.mns_econetnumber = connected_econet;
        }
        if (socketioctl(s, SIOCGIFBRDADDR, (char *)&ifreq) < 0)
            goto next;
        sin = (struct sockaddr_in *)&ifreq.ifr_addr;

        if (eco)
            eco_bcast = sin->sin_addr.s_addr;
        else
            mns.mns_ifaddrs[icnt++] = sin->sin_addr.s_addr;
        mns.mns_ifcnt++;
        if (gateway)
            (void) socketioctl(s, SIOCGWHOIAMMNS, (char *)&ifreq);
        if (icnt == 4 && eco_bcast)
            break;
next:
        first = 0;
    }
    socketclose(s);
    return;
}


int
process_input(sock)
int sock;
{
    fd_set ibits;
    int nfd, r;
    struct timeval tv;

    FD_ZERO(&ibits);
    nfd = sock + 1;
    FD_SET(sock, &ibits);
    tv.tv_sec = 0;
    tv.tv_usec = 0;
    if ((r = select(nfd, &ibits, 0, 0, &tv)) > 0 && FD_ISSET(sock, &ibits)) {
        if (sock == mns.mns_atpsock)
            atp_process_input(sock);
        else if (sock == mns.mns_routedsock)
            routed_process_input(sock);
    }
    return (0);
}

char atpbuf[1024];

int
atp_process_input(sock)
int sock;
{
    struct sockaddr from;
    int fromlen, r, count;
    char *c;
    struct atp_msg *atp;

    for (;;) {
        fromlen = sizeof (from);
        r = recvfrom(sock, atpbuf, sizeof (atpbuf), 0, &from, &fromlen);
        if (r < 0 || fromlen != sizeof (struct sockaddr_in))
            break;
        atp = (struct atp_msg *)atpbuf;
        c = (char *)&atp->atp_address;
        if (atp->atp_opcode == MNS_TRANSFORM_REQUEST) {
            r = atp_return_map_q(c, &count);
            if (count > 0) {
                atp->atp_opcode = MNS_TRANSFORM_REPLY;
                atp->atp_count = count;
                (void) sendto(mns.mns_atpsock, (char *)atp, r+2, 0, &from, sizeof(struct sockaddr_in));
            }
        }
    }
    return (0);
}

char ripbuf[1024];

int routed_process_input(sock)
int sock;
{
    struct sockaddr from;
    int fromlen, r;

    for (;;) {
        fromlen = sizeof (from);
        r = recvfrom(sock, ripbuf, sizeof (ripbuf), 0, &from, &fromlen);
        if (r < 0 || fromlen != sizeof (struct sockaddr_in))
            break;
        rip_input(&from, (struct rip *)ripbuf, r);
    }
    return (0);
}

u_long
atp_setbcast(addr)
u_long addr;
{
    struct address_q *q;

    for (q = mns.mns_mapq; q; q = q->q_next) {
        if (q->q_bcast == addr)
            return ((u_long)0);
    }
    return (addr);
}

int
atp_add_newitem(a)
struct atp_block *a;
{
    struct address_q *q;
    char *malloc();
    struct address_q **p;

    p = &(mns.mns_mapq);
    while (*p) {
        if ((*p)->q_net == a->atpb_net) {
            if ((*p)->q_ip == a->atpb_ipadr)
                return(0);
            q = *p;
            break;
        }
        p = &((*p)->q_next);
    }
    if ((*p) == 0) {
        q = (struct address_q *)malloc (sizeof(struct address_q));
        if (q == (struct address_q *)0)
            return (-1);
        q->q_bcast = 0;
        q->q_next  = (struct address_q *)0;
        *p = q;
    }
    q->q_net     = a->atpb_net;
    q->q_ip      = a->atpb_ipadr;
    q->q_bcast   = atp_setbcast(q->q_ip | 0xffff0000);
    memcpy(q->q_sitename, a->atpb_sitename, ITEM_NAMELEN);
    memcpy(q->q_netname, a->atpb_netname, ITEM_NAMELEN);
    if ((mns.mns_states[q->q_net] & ECONET_IS_CONNECTED) == 0)
        mns.mns_states[q->q_net] |= MNS_IS_CONNECTED;
    return (0);
}


int
atp_return_map_q(a, count)
u_char *a;
int *count;
{
    struct address_q *q;
    int n, r;

    r = 0; n = 0;
    for (q = mns.mns_mapq; q; q = q->q_next) {
        *a++ = q->q_net;
        *a++ = 0;
        memcpy(a, (char *)&(q->q_ip), 4);
        a += 4;
        r += 6;
        memcpy(a, q->q_sitename, ITEM_NAMELEN);
        a += ITEM_NAMELEN;
        r += ITEM_NAMELEN;
        memcpy(a, q->q_netname, ITEM_NAMELEN);
        a += ITEM_NAMELEN;
        r += ITEM_NAMELEN;
        n++;
    };
    *count = n;
    return (r);
}

int init_sockets()
{
    if (mns.mns_flags & MNS_SOCKET)
        return (0);
    mns.mns_rxdsock = do_getsock(MNSDATAPORT, 1, 1);
    mns.mns_txdsock = do_getsock(MNSDATAPORT, 0, 0);
    mns.mns_atpsock = do_getsock(MNSATPPORT, 1, 0);
    mns.mns_routedsock = do_getsock(ROUTEDPORT, 1, 0);
    if (mns.mns_rxdsock < 0 || mns.mns_txdsock < 0 ||
        mns.mns_atpsock < 0 || mns.mns_routedsock < 0)
        return (-1);
    return (0);
}

free_sockets()
{
    if (mns.mns_rxdsock != -1)
        (void) socketclose(mns.mns_rxdsock);
    if (mns.mns_txdsock != -1)
        (void) socketclose(mns.mns_txdsock);
    if (mns.mns_atpsock != -1)
        (void) socketclose(mns.mns_atpsock);
    if (mns.mns_routedsock != -1)
        (void) socketclose(mns.mns_routedsock);
}

int mns_warnings()
{
    if (!(mns.mns_flags & MNS_GATEWAY)) {
        printf("%s: ", mns_str(Str_Warn));
        printf("%s\n", mns_str(Str_BadGwy));
        return (1);
    }
    return (0);
}

mns_info(all)
int all;
{
    int i, found = 0;

    printf("\n%-18s", mns_str(Str_AccNet));
    for (i = 1; i < 256; i++) {
        if (mns.mns_states[i] & (ECONET_IS_CONNECTED|MNS_IS_CONNECTED)) {
            if ((++found % 8) == 0)
                printf("\n%-18s", " ");
            if (mns.mns_states[i] & ECONET_IS_CONNECTED)
                printf("*%-5d", i);
            else if (mns.mns_ifcnt > 0)
                printf("%-6d", i);
        }
    }
    printf("\n");
    if (!all)
        return;
    printf("\n%-18s", mns_str(Str_TxStat));
    printf("%s=%d, ", mns_str(Str_Data), mns.mns_txcnt);
    printf("%s=%d, ", mns_str(Str_Immedt), mns.mns_tximmcnt);
    printf("%s=%d, ", mns_str(Str_ImmRep), mns.mns_tximmrcnt);
    printf("%s=%d\n",mns_str(Str_Retry), mns.mns_txretry);
    printf("%-18s", " ");
    printf("%s=%d, ", mns_str(Str_Error), mns.mns_txerrs);
    printf("%s=%d, ", mns_str(Str_DtaAck), mns.mns_txacks);
    printf("%s=%d, ", mns_str(Str_DtaRej), mns.mns_txrej);
    printf("%s=%d\n", mns_str(Str_BrdCst), mns.mns_txbccnt);
    printf("%-18s", " ");
    printf("(%s=%d, ", mns_str(Str_Local), mns.mns_txlbc);
    printf("%s=%d)\n", mns_str(Str_Global), mns.mns_txgbc);
    printf("\n%-18s", mns_str(Str_RxStat));
    printf("%s=%d, ", mns_str(Str_Data), mns.mns_rxcnt);
    printf("%s=%d, ", mns_str(Str_Immedt), mns.mns_rximmcnt);
    printf("%s=%d, ", mns_str(Str_BrdCst), mns.mns_rxbc);
    printf("%s=%d\n", mns_str(Str_Dscard), mns.mns_rxdiscard);
    printf("%-18s", " ");
    printf("%s=%d, ", mns_str(Str_Retry), mns.mns_rxretries);
    printf("%s=%d, ", mns_str(Str_Error), mns.mns_rxerrs);
    printf("%s=%d, ", mns_str(Str_DtaAck), mns.mns_rxacks);
    printf("%s=%d\n", mns_str(Str_DtaRej), mns.mns_rxrej);
    printf("%-18s", " ");
    printf("%s=%d, ", mns_str(Str_ImmRep), mns.mns_rximreply);
    printf("%s=%d\n", mns_str(Str_InvRep), mns.mns_rxackdiscard);
    printf("\n%-18s", mns_str(Str_ModSts));
    printf("0%o", mns.mns_flags);
    printf("\n");
}

int
ip_to_mns(addr, net, station)
u_long addr;
int *net, *station;
{
    struct address_q *q;
    u_long i, m;

    i = ntohl(addr);
    m = i & ~0xff;
    for (q = mns.mns_mapq; q; q = q->q_next) {
        if (m == htonl(q->q_ip)) {
            *station = i & 0xff;
            *net = (int)q->q_net;
            return(1);
        }
    }
    return (0);
}

int
src_is_ok(rx, net, station)
struct rxcb *rx;
int net, station;
{
    if (((rx->rx_network > 0 && rx->rx_network < ANY_NETWORK) && net != rx->rx_network) ||
        ((rx->rx_station > 0 && rx->rx_station < ANY_STATION) && station != rx->rx_station))
        return (0);
    return (1);
}

u_long
mns_to_ip(net, station)
int net, station;
{
    struct address_q *q;

    if (net == 0)
        net = local_net();

    if ((mns.mns_states[net] & ECONET_IS_CONNECTED) != 0)
        return ((u_long)0);

    for (q = mns.mns_mapq; q; q = q->q_next) {
        if (net == q->q_net)
            return (dst_is_local_econet(q->q_ip) ? (u_long)0 : (q->q_ip | htonl(station)));
    }

    return ((connected_econet != -1) ? (u_long) 0 : (u_long) -1);
}

int
dst_is_local_econet(ip)
u_long ip;
{
    u_long i = ntohl(ip);

    if (mns.mns_econetipadr) {
        i &= ~0xffff;
        return ((i == mns.mns_econetipadr) ? 1 : 0);
    }
    return (0);
}

int
mns_addrtoname(b, i)
char *b;
u_long i;
{
    struct address_q *q;
    u_long ipa;

    i &= ~0xffff;
    for (q = mns.mns_mapq; q; q = q->q_next) {
        ipa = ntohl(q->q_ip) & ~0xffff;
        if (ipa == i) {
            if (q->q_sitename[0]) {
                strcpy(b, q->q_sitename);
                strcat(b, ".");
                strcat(b, q->q_netname);
            }
            else
                strcpy(b, q->q_netname);
            return (1);
        }
    }
    return (0);
}

setbmap()
{
    struct address_q *q;

    for (q = mns.mns_mapq; q; q = q->q_next) {
        if (q->q_bcast == eco_bcast)
            q->q_bcast = 0;
    }
}

int
msg_broadcast(flag, port, data, len, local)
u_char flag, port;
char *data;
int len, local;
{
    struct address_q *q;
    int i;

    if (local || !mns.mns_mapq) {
        for (i = 0; i < 4; i++) {
            if (mns.mns_ifaddrs[i])
                (void) msg_transmit(mns.mns_ifaddrs[i], flag, 0, port, data, len, BROADCAST_DATA_FRAME, 0);
        }
    }
    else {
        for (q = mns.mns_mapq; q; q = q->q_next) {
            if (q->q_bcast)
                (void) msg_transmit(q->q_bcast, flag, 0, port, data, len, BROADCAST_DATA_FRAME, 0);
        }
    }
    if (local)
        mns.mns_txlbc++;
    else
        mns.mns_txgbc++;
    mns.mns_txbccnt++;
    return (0);
}

namtomodule(nm)
char *nm;
{
    _kernel_swi_regs r;
    _kernel_oserror *e;
    struct dib *d;

    r.r[1] = Service_FindNetworkDriver;
    r.r[2] = (int)nm;
    r.r[3] = 0;
    e = _kernel_swi(XOS_Bit | OS_ServiceCall,&r, &r);
    if (e == 0 && r.r[1] == 0 && (d = (struct dib *)(r.r[3])) != (struct dib *)0) {
        e = _kernel_swi(XOS_Bit | (d->dib_swibase + DCI_Version), &r, &r);
        if (!e && r.r[0] >= CURRENT_DCI_VERSION)
            strncpy(nm, d->dib_module, 24);
    }
}

int
in_local_aun_network(net)
int net;
{
    return (0);
}

_kernel_oserror *
range_check(port, station, net)
int port, station, net;
{
    if (port < 0 || port > 255)
        return(mns_error(Err_BadPort));
    if (station < 0 || station > 255)
        return(mns_error(Err_BadStn));
    if (net < 0 || net > 255)
        return(mns_error(Err_BadNet));
    return ((_kernel_oserror *)0);
}

int
is_wild(port, station, network)
int port, station, network;
{
#ifdef OldCode
    return ((network == ANY_NETWORK || network == 0 ||
             station == ANY_STATION || station == 0 ||
             port == ANY_PORT || port == 0) ? 1 : 0);
#else
/* Insert KRuttle's 6.03 changes */
    return ((network == ANY_NETWORK || station == ANY_STATION ||
            (network == 0 && station == 0) ||
             port == ANY_PORT || port == 0) ? 1 : 0);
#endif

}


