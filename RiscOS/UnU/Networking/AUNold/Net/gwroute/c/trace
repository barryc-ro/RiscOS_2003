
#define RIPCMDS
#include "defs.h"
#include "../module.h"

char *inet_ntoa(), *sprintnet(), *sprintroute(), *sprintdest(), *mns_str();

#define TRACE_FILE "<Gateway$Dir>.Trace"
char *trace_file = 0;

traceon(file)
char *file;
{
        trace_file = file ? file : TRACE_FILE;
        traceactions = 1;
}

traceoff(trace)
int trace;
{
        traceactions = 0;
}

traceaction(action, rt)
char *action;
struct rt_entry *rt;
{
        action=action;
        rt=rt;
}

tracenewmetric(rt, newmetric)
        struct rt_entry *rt;
        int newmetric;
{
        rt=rt;
        newmetric=newmetric;
}

dumppacket(dir, who, cp, size, stamp)
        struct sockaddr_in *who;
        char *dir, *cp;
        register int size;
        struct timeval *stamp;
{
        FILE *fd = NULL;
        struct rip *msg = (struct rip *)cp;
        struct netinfo *n;
        int from = strcmp(dir, "to");

        if (msg->rip_cmd != RIPCMD_REQUEST && msg->rip_cmd != RIPCMD_RESPONSE)
            return;
        (void) gettimeofday(&now, (struct timezone *)NULL);
        size -= 4 * sizeof (char);
        n = msg->rip_nets;
        for (; size > 0; n++, size -= sizeof (struct netinfo)) {
            if (size < sizeof (struct netinfo)) 
                break;
            if (msg->rip_cmd == RIPCMD_REQUEST &&
                ntohl(n->rip_metric) == (u_long)HOPCNT_INFINITY) 
                continue;
            if (fd == NULL) {
                fd = fopen(trace_file, "a");
                if (fd == NULL)
                    return;
                fprintf(fd, "%.19s:", ctime((time_t *)&stamp->tv_sec));
                fprintf(fd, "  %s %s\n", from ? "<==" : "==>", sprintdest(who->sin_addr)); 
            }
#define satosin(sa)     ((struct sockaddr_in *)&sa)
            fprintf(fd, "%-4s%-16s", " ", sprintnet(&n->rip_dst));
            if (ntohl(n->rip_metric) == 1)
                fprintf(fd, "%s\n", mns_str(Str_Local));
            else
                fprintf(fd, "%s=%d\n", mns_str(Str_Gtewys), ntohl(n->rip_metric) - 1); 
        }
        fflush(fd);
        if (ferror(fd))
                traceoff(0);
        fclose(fd);
}

char *
sprintdest(saddr)
u_long saddr;
{
    static char line[32];

    saddr = ntohl(saddr);
#define C(x)    ((x) & 0xff)
    if (C(saddr >> 8) == 0xff && C(saddr) == 0xff) {
        if (!mns_addrtoname(line, saddr)) 
            (void) sprintf(line, "%lu.%lu", C(saddr >> 24), C(saddr >> 16));
        strcat(line, " (broadcast)");
    } 
    else   
        (void) sprintf(line, "%lu.%lu", C(saddr >> 8), C(saddr));
    return (line);
}

