/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.2  95/01/24  15:26:21  kwelton
 * Added a new ioctl() SIOCSWHOTHEYARE, which duplicates the functionality
 * of SIOCGWHOIAMMNS in the old InternetAG module (yes, someone really was
 * stupid enough to have two different versions of the one ioctl() =8().
 * 
 * Revision 1.1  94/12/02  10:55:21  kwelton
 * Initial revision
 * 
 */
/*
 * Copyright (c) 1983, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */
#include "kernel.h"

#include "sys/param.h"
#include "sys/systm.h"
#include "sys/dir.h"
#include "sys/user.h"
#include "sys/mbuf.h"
#include "sys/socket.h"
#include "sys/socketvar.h"
#include "sys/protosw.h"
#include "sys/errno.h"
#include "sys/ioctl.h"

#include "net/if.h"
#include "net/af.h"

#include "ether.h"

int	ifqmaxlen = IFQ_MAXLEN;

/*
 * Network interface utility routines.
 *
 * Routines with ifa_ifwith* names take sockaddr *'s as
 * parameters.
 */

ifinit()
{
    register struct ifnet *ifp;

    for (ifp = ifnet; ifp; ifp = ifp->if_next)
	if (ifp->if_snd.ifq_maxlen == 0)
	    ifp->if_snd.ifq_maxlen = ifqmaxlen;

    if_slowtimo();
}

#ifdef vax
/*
 * Call each interface on a Unibus reset.
 */
ifubareset(uban)
	int uban;
{
	register struct ifnet *ifp;

	for (ifp = ifnet; ifp; ifp = ifp->if_next)
		if (ifp->if_reset)
			(*ifp->if_reset)(ifp->if_unit, uban);
}
#endif

/*
 * Attach an interface to the
 * list of "active" interfaces.
 */
if_attach(ifp)
	struct ifnet *ifp;
{
	register struct ifnet **p = &ifnet;
	while (*p)
		p = &((*p)->if_next);
	*p = ifp;
}

/*
 * Locate an interface based on a complete address.
 */
/*ARGSUSED*/
struct ifaddr *
ifa_ifwithaddr(addr)
	struct sockaddr *addr;
{
	register struct ifnet *ifp;
	register struct ifaddr *ifa;

#define equal(a1, a2) \
	(bcmp((caddr_t)((a1)->sa_data), (caddr_t)((a2)->sa_data), 14) == 0)
	for (ifp = ifnet; ifp; ifp = ifp->if_next)
	    for (ifa = ifp->if_addrlist; ifa; ifa = ifa->ifa_next) {
		if (ifa->ifa_addr.sa_family != addr->sa_family)
			continue;
		if (equal(&ifa->ifa_addr, addr))
			return (ifa);
		if ((ifp->if_flags & IFF_BROADCAST) &&
		    equal(&ifa->ifa_broadaddr, addr))
			return (ifa);
	}
	return ((struct ifaddr *)0);
}
/*
 * Locate the point to point interface with a given destination address.
 */
/*ARGSUSED*/
struct ifaddr *
ifa_ifwithdstaddr(addr)
	struct sockaddr *addr;
{
	register struct ifnet *ifp;
	register struct ifaddr *ifa;

	for (ifp = ifnet; ifp; ifp = ifp->if_next)
	    if (ifp->if_flags & IFF_POINTOPOINT)
		for (ifa = ifp->if_addrlist; ifa; ifa = ifa->ifa_next) {
			if (ifa->ifa_addr.sa_family != addr->sa_family)
				continue;
			if (equal(&ifa->ifa_dstaddr, addr))
				return (ifa);
	}
	return ((struct ifaddr *)0);
}

/*
 * Find an interface on a specific network.  If many, choice
 * is first found.
 */
struct ifaddr *
ifa_ifwithnet(addr)
	register struct sockaddr *addr;
{
	register struct ifnet *ifp;
	register struct ifaddr *ifa;
	register u_int af = addr->sa_family;
	register int (*netmatch)();

	if (af >= AF_MAX)
		return (0);
	netmatch = afswitch[af].af_netmatch;
	for (ifp = ifnet; ifp; ifp = ifp->if_next)
	    for (ifa = ifp->if_addrlist; ifa; ifa = ifa->ifa_next) {
		if (ifa->ifa_addr.sa_family != addr->sa_family)
			continue;
		if ((*netmatch)(&ifa->ifa_addr, addr))
			return (ifa);
	}
	return ((struct ifaddr *)0);
}

#ifdef notdef
/*
 * Find an interface using a specific address family
 */
struct ifaddr *
ifa_ifwithaf(af)
	register int af;
{
	register struct ifnet *ifp;
	register struct ifaddr *ifa;

	for (ifp = ifnet; ifp; ifp = ifp->if_next)
	    for (ifa = ifp->if_addrlist; ifa; ifa = ifa->ifa_next)
		if (ifa->ifa_addr.sa_family == af)
			return (ifa);
	return ((struct ifaddr *)0);
}
#endif

/*
 * Mark an interface down and notify protocols of
 * the transition.
 * NOTE: must be called at splnet or eqivalent.
 */
if_down(ifp)
	register struct ifnet *ifp;
{
	register struct ifaddr *ifa;

	ifp->if_flags &= ~IFF_UP;
	for (ifa = ifp->if_addrlist; ifa; ifa = ifa->ifa_next)
		pfctlinput(PRC_IFDOWN, &ifa->ifa_addr);
	if_qflush(&ifp->if_snd);
}

/*
 * Flush an interface queue.
 */
if_qflush(ifq)
	register struct ifqueue *ifq;
{
	register struct mbuf *m, *n;

	n = ifq->ifq_head;
	while (m = n) {
		n = m->m_list;
#ifdef OldCode
		m_freem(m);
#else
		FREEM(m);
#endif
	}
	ifq->ifq_head = 0;
	ifq->ifq_tail = 0;
	ifq->ifq_len = 0;
}

/*
 * Handle interface watchdog timer routines.  Called
 * from softclock, we decrement timers (if set) and
 * call the appropriate interface routine on expiration.
 */
if_slowtimo()
{
	register struct ifnet *ifp;

	for (ifp = ifnet; ifp; ifp = ifp->if_next) {
		if (ifp->if_timer == 0 || --ifp->if_timer)
			continue;
		if (ifp->if_watchdog)
			(*ifp->if_watchdog)(ifp->if_unit);
	}
	/*
	 * XXX TRACE XXX
	 *
	 * have replaced hz with HZ here - is this correct?
	 */
	timeout(if_slowtimo, (caddr_t)0, HZ / IFNET_SLOWHZ);
}

/*
 * Map interface name to
 * interface structure pointer.
 */
static struct ifnet *ifunit(char *name)
{
    register char *cp;
    register struct ifnet *ifp;
    int unit;
    unsigned len;
    char *ep, c;
#ifdef OldCode
    int tried_again = 0;
#endif /* OldCode */

    for (cp = name; cp < name + IFNAMSIZ && *cp; cp++)
	if (*cp >= '0' && *cp <= '9')
	    break;

    if (*cp == '\0' || cp == name + IFNAMSIZ)
	return ((struct ifnet *)0);

    /*
     * Save first char of unit, and pointer to it,
     * so we can put a null there to avoid matching
     * initial substrings of interface names.
     */
    len = cp - name + 1;
    c = *cp;
    ep = cp;
    for (unit = 0; *cp >= '0' && *cp <= '9'; )
	unit = unit * 10 + *cp++ - '0';
    *ep = 0;

#ifdef OldCode
  try_again:
#endif /* OldCode */

    for (ifp = ifnet; ifp; ifp = ifp->if_next)
    {
	if (bcmp(ifp->if_name, name, len))
	    continue;

	/*
	 * it *is* possible for a network driver to
	 * disappear, so check that this has not
	 * happened.
	 */
	if( unit == ifp->if_unit && !(ifp->if_flags & IFF_NODRIVER) )
	    break;
    }

#ifdef OldCode
    /*
     * if_module interface
     */
    if (ifp == 0 && !tried_again)
    {
	if (if_module_attach(name, len))
	{
	    tried_again = 1;
	    goto try_again;
	}
    }
#endif /* OldCode */

    *ep = c;
    return (ifp);
}

/*
 * Interface ioctls.
 */
int ifioctl(struct socket *so, int cmd, caddr_t data)
{
    register struct ifnet *ifp;
    register struct ifreq *ifr;

    switch (cmd)
    {

      case SIOCGIFCONF:
	return (ifconf(cmd, data));

#if defined(INET) && NETHER > 0
      case SIOCSARP:
      case SIOCDARP:
	/* FALL THROUGH */

#ifdef __riscos
      case SIOCTARP:
#endif

      case SIOCGARP:
	return (arpioctl(cmd, data));
#endif
    }

    ifr = (struct ifreq *)data;
    ifp = ifunit(ifr->ifr_name);
    if (ifp == 0)
	return (ENXIO);

    switch (cmd)
    {
#ifdef __riscos
      case SIOCGWHOIAMMNS:
	if (if_whoamimns(ifp) != 0)
	    return (EADDRNOTAVAIL);

	break;

      case SIOCGWHOIAMR:
      case SIOCGWHOIAMB:
      case SIOCGWHOIAMRB:
	if (if_whoamiaddr(ifp, cmd) != 0)
	    return (EADDRNOTAVAIL);

	break;

      case SIOCGWHOIAMM:
	if (if_whoamimask(ifp) != 0)
	    return (EADDRNOTAVAIL);

	break;

      case SIOCSWHOTHEYARE:
	/*
	 * XXX
	 *
	 * this ioctl() is a replacement for SIOCWHOIAMMNS
	 * which, in the InternetAG module provided
	 * completely different functionality to what it
	 * provides in the Internet and InternetA modules.
	 *
	 * this code is *even more* braindamaged than
	 * originally thought: a struct ifnet pointer is
	 * passed to revarp_broadcastclientaddrs(), whereas
	 * the function actually expects a struct arpcom
	 * pointer (this reproduces what happens in the
	 * old (DCI2) NetG/InternetAG code).
	 */
	revarp_broadcastclientaddrs(ifp);
	break;

#endif /* defined(__riscos) */

      case SIOCGIFFLAGS:
	ifr->ifr_flags = ifp->if_flags;
	break;

      case SIOCGIFMETRIC:
	ifr->ifr_metric = ifp->if_metric;
	break;

      case SIOCSIFFLAGS:
	if (ifp->if_flags & IFF_UP && (ifr->ifr_flags & IFF_UP) == 0)
	{
	    int s = splimp();
	    if_down(ifp);
	    splx(s);
	}

	ifp->if_flags = (ifp->if_flags & IFF_CANTCHANGE) |
			(ifr->ifr_flags & ~IFF_CANTCHANGE);

	if (ifp->if_ioctl)
	    (void) (*ifp->if_ioctl)(ifp, cmd, data);

	break;

      case SIOCSIFMETRIC:
	ifp->if_metric = ifr->ifr_metric;
	break;

      default:
	if (so->so_proto == 0)
	    return (EOPNOTSUPP);

	return ((*so->so_proto->pr_usrreq)(so, PRU_CONTROL, cmd, data, ifp));
    }

    return (0);
}

/*
 * Return interface configuration
 * of system.  List may be used
 * in later ioctl's (above) to get
 * other information.
 */
/*ARGSUSED*/
ifconf(cmd, data)
	int cmd;
	caddr_t data;
{
	register struct ifconf *ifc = (struct ifconf *)data;
	register struct ifnet *ifp = ifnet;
	register struct ifaddr *ifa;
	register char *cp, *ep;
	struct ifreq ifr, *ifrp;
	int space = ifc->ifc_len, error = 0;

	ifrp = ifc->ifc_req;
	ep = ifr.ifr_name + sizeof (ifr.ifr_name) - 2;
	for (; space > sizeof (ifr) && ifp; ifp = ifp->if_next) {
		bcopy(ifp->if_name, ifr.ifr_name, sizeof (ifr.ifr_name) - 2);
		for (cp = ifr.ifr_name; cp < ep && *cp; cp++)
			;
		*cp++ = '0' + ifp->if_unit; *cp = '\0';
		if ((ifa = ifp->if_addrlist) == 0) {
			bzero((caddr_t)&ifr.ifr_addr, sizeof(ifr.ifr_addr));
			error = copyout((caddr_t)&ifr, (caddr_t)ifrp, sizeof (ifr));
			if (error)
				break;
			space -= sizeof (ifr), ifrp++;
		} else
		    for ( ; space > sizeof (ifr) && ifa; ifa = ifa->ifa_next) {
			ifr.ifr_addr = ifa->ifa_addr;
			error = copyout((caddr_t)&ifr, (caddr_t)ifrp, sizeof (ifr));
			if (error)
				break;
			space -= sizeof (ifr), ifrp++;
		}
	}
	ifc->ifc_len -= space;
	return (error);
}

/* EOF if.c */
