/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.2  94/12/06  15:24:55  kwelton
 * Must use the return value from ENSURE_SAFE to update m0 (looutput()).
 * 
 * Revision 1.1  94/12/02  10:57:34  kwelton
 * Initial revision
 * 
 */
/*
 * Copyright (c) 1983, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * Loopback interface driver for protocol testing and timing.
 */
#include "sys/param.h"
#include "sys/systm.h"
#include "sys/mbuf.h"
#include "sys/socket.h"
#include "sys/errno.h"
#include "sys/ioctl.h"
#include "sys/dcistructs.h"

#include "net/if.h"
#include "net/netisr.h"
#include "net/route.h"

#ifdef	INET
#include "netinet/in.h"
#include "netinet/in_systm.h"
#include "netinet/in_var.h"
#include "netinet/ip.h"
#include "netinet/if_ether.h"
#endif

#ifdef vax
#include "vax/mtpr.h"
#endif

#ifdef NS
#include "netns/ns.h"
#include "netns/ns_if.h"
#endif

#ifdef	ISO
#include "net/iso_hooks.h"
#endif	ISO

#define LOMTU	(1024+512)

int	looutput(), loioctl();

/**********************************************************************/

looutput(struct ifnet *ifp, register struct mbuf *m0, struct sockaddr *dst)
{
   int s;
   register struct ifqueue *ifq;
   struct mbuf *m, *n;
   RxHdrRef rx;

   /*
    * For each mbuf chain, prepend a pseudo-rxhdr containing the
    * interface pointer which will be discarded by the receiving
    * code later, then enqueue the chain of mbufs
    */
   ifq = &ipintrq;

   s = splimp();

   while (m0)
   {
       /*
	* take note of next in list of mbuf chains, before it
	* is broken by the IF_ENQUEUE macro below
	*/
       n = m0->m_list;

       /* first ensure whole chain is safe, if fails, discard whole list */
       if ((m0 = ENSURE_SAFE(m0)) == NULL)
       {
	   /* if it failed, has discarded the chain already */
	   m0 = n;
	   while (m0)
	   {
	       n = m0->m_list;
	       FREEM(m0);
	       m0 = n;
	   }
	   return (ENOBUFS);
       }

       /* get a new mbuf to put rxhdr in, to be discarded later */
       if ((m = ALLOC_S(MINCONTIG, NULL)), m == NULL)
       {
	   while (m0)
	   {
	       n = m0->m_list;
	       FREEM(m0);
	       m0 = n;
	   }
	   return (ENOBUFS);
       }

       m->m_type = MT_HEADER;
       m->m_off = MINOFF(m);
       m->m_next = m0;
       m0 = m;

       /* This is a horrid kludge: put frame type in length field. */
       m->m_len = ETHERTYPE_IP; /* pretend all packets are IP. */

       rx = mtod(m0, RxHdrRef);
       rx->rx_ptr = ifp;

       ifp->if_opackets++;

       if (IF_QFULL(ifq))
       {
	   IF_DROP(ifq);

	   m0->m_list = n;
	   while (m0)
	   {
	       n = m0->m_list;
	       FREEM(m0);
	       m0 = n;
	   }
	   splx(s);
	   return (ENOBUFS);
       }

       /* enqueue this chain and step onto next chain in list */
       IF_ENQUEUE(ifq, m0);
       m0 = n;

       ifp->if_ipackets++;
   }

   /*
    * all done, schedule the soft interrupt and return
    */
   schednetisr(NETISR_IP);

   splx(s);

   return(0);
}

/**********************************************************************/

/*
 * Process an ioctl request.
 */
/* ARGSUSED */
loioctl(ifp, cmd, data)
	register struct ifnet *ifp;
	int cmd;
	caddr_t data;
{
	int error = 0;
	data = data;

	switch (cmd) {

	case SIOCSIFADDR:
		ifp->if_flags |= IFF_UP | IFF_RUNNING;
		/*
		 * Everything else is done at a higher level.
		 */
		break;

	default:
		error = EINVAL;
	}
	return (error);
}

/**********************************************************************/

/* EOF if_loop.c */
