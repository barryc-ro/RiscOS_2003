/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  94/12/02  11:15:01  kwelton
 * Initial revision
 * 
 */
/*
 * Copyright (c) 1983, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */
#include "sys/param.h"
#include "sys/socket.h"
#include "sys/protosw.h"
#include "sys/domain.h"
#include "sys/mbuf.h"

#include "netinet/in.h"
#include "netinet/in_systm.h"

/*
 * TCP/IP protocol family: IP, ICMP, UDP, TCP.
 */
int	ip_output(),ip_ctloutput();
int	ip_init(),ip_slowtimo(),ip_drain();
int	icmp_input();
int	udp_input(),udp_ctlinput();
int	udp_usrreq();
int	udp_init();
int	tcp_input(),tcp_ctlinput();
int	tcp_usrreq(),tcp_ctloutput();
int	tcp_init(),tcp_fasttimo(),tcp_slowtimo(),tcp_drain();
int	raw_init(), rip_input(),rip_output(),rip_ctloutput();
extern	int raw_usrreq();

#ifdef __unix
extern	struct domain inetdomain;

struct protosw inetsw[] = {
{ 0,		&inetdomain,	0,		0,
  0,		ip_output,	0,		0,
  0,
  ip_init,	0,		ip_slowtimo,	ip_drain,
},
{ SOCK_DGRAM,	&inetdomain,	IPPROTO_UDP,	PR_ATOMIC|PR_ADDR,
  udp_input,	0,		udp_ctlinput,	ip_ctloutput,
  udp_usrreq,
  udp_init,	0,		0,		0,
},
{ SOCK_STREAM,	&inetdomain,	IPPROTO_TCP,	PR_CONNREQUIRED|PR_WANTRCVD,
  tcp_input,	0,		tcp_ctlinput,	tcp_ctloutput,
  tcp_usrreq,
  tcp_init,	tcp_fasttimo,	tcp_slowtimo,	tcp_drain,
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_RAW,	PR_ATOMIC|PR_ADDR,
  rip_input,	rip_output,	0,		rip_ctloutput,
  raw_usrreq,
  0,		0,		0,		0,
},
{ SOCK_RAW,	&inetdomain,	IPPROTO_ICMP,	PR_ATOMIC|PR_ADDR,
  icmp_input,	rip_output,	0,		rip_ctloutput,
  raw_usrreq,
  raw_init,	       0,	       0,	       0,
},
	/* raw wildcard */
{ SOCK_RAW,	&inetdomain,	0,		PR_ATOMIC|PR_ADDR,
  rip_input,	rip_output,	0,		rip_ctloutput,
  raw_usrreq,
  0,		0,		0,		0,
},
};

struct domain inetdomain =
    { AF_INET, "internet", 0, 0, 0,
      inetsw, &inetsw[sizeof(inetsw)/sizeof(inetsw[0])] };
#else

struct protosw inetsw[6] = { 0 };
struct domain inetdomain = { 0 };

in_proto_init()
{
	struct protosw *p;
	struct domain *d;

	p = &inetsw[0];
	p->pr_type = 0;
	p->pr_domain = &inetdomain;
	p->pr_protocol = 0;
	p->pr_flags = 0;
	p->pr_input = 0;
	p->pr_output = ip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = 0;
	p->pr_usrreq = 0;
	p->pr_init = ip_init;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = ip_slowtimo;
	p->pr_drain = ip_drain;

	p = &inetsw[1];
	p->pr_type = SOCK_DGRAM;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_UDP;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = udp_input;
	p->pr_output = 0;
	p->pr_ctlinput = udp_ctlinput;
	p->pr_ctloutput = ip_ctloutput;
	p->pr_usrreq = udp_usrreq;
	p->pr_init = udp_init;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	p = &inetsw[2];
	p->pr_type = SOCK_STREAM;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_TCP;
	p->pr_flags = PR_CONNREQUIRED|PR_WANTRCVD;
	p->pr_input = tcp_input;
	p->pr_output = 0;
	p->pr_ctlinput = tcp_ctlinput;
	p->pr_ctloutput = tcp_ctloutput;
	p->pr_usrreq = tcp_usrreq;
	p->pr_init = tcp_init;
	p->pr_fasttimo = tcp_fasttimo;
	p->pr_slowtimo = tcp_slowtimo;
	p->pr_drain = tcp_drain;

	p = &inetsw[3];
	p->pr_type = SOCK_RAW;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_RAW;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = rip_input;
	p->pr_output = rip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = rip_ctloutput;
	p->pr_usrreq = raw_usrreq;
	p->pr_init = 0;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	p = &inetsw[4];
	p->pr_type = SOCK_RAW;
	p->pr_domain = &inetdomain;
	p->pr_protocol = IPPROTO_ICMP;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = icmp_input;
	p->pr_output = rip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = rip_ctloutput;
	p->pr_usrreq = raw_usrreq;
	p->pr_init = raw_init;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	p = &inetsw[5];
	p->pr_type = SOCK_RAW;
	p->pr_domain = &inetdomain;
	p->pr_protocol = 0;
	p->pr_flags = PR_ATOMIC|PR_ADDR;
	p->pr_input = rip_input;
	p->pr_output = rip_output;
	p->pr_ctlinput = 0;
	p->pr_ctloutput = rip_ctloutput;
	p->pr_usrreq = raw_usrreq;
	p->pr_init = 0;
	p->pr_fasttimo = 0;
	p->pr_slowtimo = 0;
	p->pr_drain = 0;

	d = &inetdomain;
	d->dom_family = AF_INET;
	d->dom_name = "internet";
	d->dom_init = 0;
	d->dom_externalize = 0;
	d->dom_dispose = 0;
	d->dom_protosw = inetsw;
	d->dom_protoswNPROTOSW = &inetsw[sizeof(inetsw)/sizeof(inetsw[0])];
	d->dom_next = 0;
}

#endif UNIX

/* EOF in_proto.c */
