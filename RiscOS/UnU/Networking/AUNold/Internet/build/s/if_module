; generated by Norcroft RISC OS ARM C vsn 5.06 (Acorn Computers Ltd) [Feb 16 1995]

        AREA |C$$code|, CODE, READONLY
|x$codeseg|

        IMPORT  arpresolve
        IMPORT  ntohs
        IMPORT  htons
        IMPORT  memcpy
        IMPORT  _kernel_swi
        EXPORT  if_module_output
if_module_output
        MOV      ip,sp
        STMDB    sp!,{v1-v6,fp,ip,lr,pc}
        SUB      fp,ip,#4
        MOV      v2,a1
        MOV      v1,a2
        SUB      sp,sp,#&3c
        LDR      a4,[a1,#0]
        ADD      a4,a4,#4
        ORR      a4,a4,#&20000
        MOV      v3,a2
        MOV      v4,#0
        STR      a4,[sp,#&38]
        LDR      a4,[a1,#&10]
        MOV      a4,a4,LSL #16
        MOV      a4,a4,ASR #16
        TST      a4,#&800
        MOVNE    v4,#6
        BNE      |L00018c.J41.if_module_output|
        AND      a4,a4,#&41
        TEQ      a4,#&41
        MOVNE    v4,#&32
        BNE      |L00018c.J41.if_module_output|
        LDR      a4,[a3,#0]
        MOV      a4,a4,LSL #16
        MOVS     a4,a4,LSR #16
        BEQ      |L000160.J12.if_module_output|
        TEQ      a4,#2
        BNE      |L000188.J10.if_module_output|
        LDR      a3,[a3,#4]
        STR      a3,[sp,#0]
        ADD      a4,sp,#&c
        STMDB    sp!,{a4}
        ADD      a4,sp,#8
        ADD      a3,sp,#4
        BL       arpresolve
        ADD      sp,sp,#4
        TEQ      a1,#0
        BEQ      |L00022c.J45.if_module_output|
        LDR      a1,[v3,#8]
        ADD      a1,v3,a1
        LDR      a1,[a1,#2]
        MOV      a1,a1,LSL #16
        MOV      a1,a1,LSR #16
        BL       ntohs
        LDR      a2,[v3,#&c]
        SUB      a2,a1,a2
        LDR      a1,[sp,#&c]
        TEQ      a1,#0
        BEQ      |L000154.J17.if_module_output|
        CMP      a2,#0
        BLE      |L000154.J17.if_module_output|
        MOVS     a1,a2,LSL #23
        BNE      |L000154.J17.if_module_output|
        LDR      a1,[v3,#&10]
        ADD      a3,a1,#4
        LDR      a1,[v3,#8]
        CMP      a3,a1
        BGT      |L000154.J17.if_module_output|
        MOV      a3,#&1000
        ADD      v5,a3,a2,ASR #9
        SUB      a1,a1,#4
        STR      a1,[v3,#8]
        LDR      a1,[v3,#&c]
        ADD      a1,a1,#4
        STR      a1,[v3,#&c]
        MOV      a1,#&800
        BL       htons
        LDR      a2,[v3,#8]
        ADD      a2,v3,a2
        STRB     a1,[a2,#0]
        MOV      a1,a1,LSR #8
        STRB     a1,[a2,#1]
        LDR      a1,[v3,#&c]
        MOV      a1,a1,LSL #16
        MOV      a1,a1,LSR #16
        BL       htons
        LDR      a2,[v3,#8]
        ADD      a2,v3,a2
        STRB     a1,[a2,#2]
        MOV      a1,a1,LSR #8
        STRB     a1,[a2,#3]
        LDR      a1,[v3,#0]
        TEQ      a1,#0
        BEQ      |L0001b0.J25.if_module_output|
        B        |L0001a0.J24.if_module_output|
|L000154.J17.if_module_output|
        MOV      v5,#&800
        ADD      v6,sp,#4
        B        |L0001c4.J28.if_module_output|
|L000160.J12.if_module_output|
        ADD      a2,a3,#2
        MOV      v3,a2
        ADD      a1,sp,#4
        MOV      a3,#6
        BL       memcpy
        ADD      v6,sp,#4
        LDR      v5,[v3,#&c]
        MOV      v5,v5,LSL #16
        MOV      v5,v5,LSR #16
        B        |L0001c4.J28.if_module_output|
|L000188.J10.if_module_output|
        MOV      v4,#&2f
|L00018c.J41.if_module_output|
        LDR      v2,[pc, #L00019c-.-8]
        LDR      ip,[sl,#-0]
        ADD      v2,ip,v2
        B        |L000204.J39.if_module_output|
L00019c
        IMPORT  mbctl
        DCD     mbctl
|L0001a0.J24.if_module_output|
        LDR      v3,[v3,#0]
        LDR      a1,[v3,#0]
        TEQ      a1,#0
        BNE      |L0001a0.J24.if_module_output|
|L0001b0.J25.if_module_output|
        STR      v1,[v3,#0]
        MOV      a2,#0
        LDR      a1,[v1,#0]
        STR      a2,[v1,#0]
        MOV      v1,a1
|L0001c4.J28.if_module_output|
        MOV      a1,#0
        STR      a1,[sp,#&10]
        LDR      a1,[v2,#&c]
        MOV      a1,a1,LSL #16
        MOV      a1,a1,ASR #16
        STR      a1,[sp,#&14]
        STR      v5,[sp,#&18]
        STR      v1,[sp,#&1c]
        STR      v6,[sp,#&20]
        ADD      a3,sp,#&10
        ADD      a2,sp,#&10
        LDR      a1,[sp,#&38]
        BL       _kernel_swi
        TEQ      a1,#0
        MOVNE    v4,#&37
        B        |L000228.J35.if_module_output|
|L000204.J39.if_module_output|
        TEQ      v1,#0
        BEQ      |L000228.J35.if_module_output|
|L00020c.J34.if_module_output|
        MOV      a2,v1
        LDR      v1,[v1,#4]
        MOV      a1,v2
        MOV      lr,pc
        LDR      pc,[v2,#&50]
        TEQ      v1,#0
        BNE      |L00020c.J34.if_module_output|
|L000228.J35.if_module_output|
        MOV      a1,v4
|L00022c.J45.if_module_output|
        LDMDB    fp,{v1-v6,fp,sp,pc}^

        IMPORT  splimp
        IMPORT  claim_frames
        IMPORT  arpwhohas
        IMPORT  splx
        EXPORT  if_module_ioctl
if_module_ioctl
        MOV      ip,sp
        STMDB    sp!,{v1-v4,fp,ip,lr,pc}
        SUB      fp,ip,#4
        MOV      v1,a1
        MOV      v2,a2
        SUB      sp,sp,#&28
        MOV      v3,a3
        BL       splimp
        MOV      v4,a1
        LDR      a1,[v1,#&c]
        MOV      a1,a1,LSL #16
        MOV      a1,a1,ASR #16
        STR      a1,[sp,#0]
        LDR      ip,[pc, #L0002b8-.-8]
        TEQ      v2,ip
        BEQ      |L0002c0.J7.if_module_ioctl|
        LDR      ip,[pc, #L0002bc-.-8]
        TEQ      v2,ip
        BNE      |L000340.J4.if_module_ioctl|
        LDR      a1,[v1,#&10]
        MOV      a1,a1,LSL #16
        MOV      a1,a1,ASR #16
        ANDS     a2,a1,#1
        BEQ      |L000310.J14.if_module_ioctl|
        TST      a1,#&40
        BNE      |L000310.J14.if_module_ioctl|
        MOV      a1,v1
        MOV      a2,#1
        BL       claim_frames
        TEQ      a1,#0
        LDR      a1,[v1,#&10]
        ORREQ    a1,a1,#&40
        BICNE    a1,a1,#&41
        B        |L000334.J26.if_module_ioctl|
L0002b8
        DCD     &8020690c
L0002bc
        DCD     &80206910
|L0002c0.J7.if_module_ioctl|
        LDR      a1,[v1,#&10]
        AND      a1,a1,#&41
        TEQ      a1,#&41
        BEQ      |L0002f8.J10.if_module_ioctl|
        MOV      a1,v1
        MOV      a2,#1
        BL       claim_frames
        TEQ      a1,#0
        BNE      |L0002f8.J10.if_module_ioctl|
        LDR      a1,[v1,#&10]
        ORR      a1,a1,#&41
        STRB     a1,[v1,#&10]
        MOV      a1,a1,ASR #8
        STRB     a1,[v1,#&11]
|L0002f8.J10.if_module_ioctl|
        LDR      a1,[v3,#4]
        ADD      a2,v3,#4
        STR      a1,[v1,#&64]
        MOV      a1,v1
        BL       arpwhohas
        B        |L000340.J4.if_module_ioctl|
|L000310.J14.if_module_ioctl|
        TEQ      a2,#0
        BNE      |L000340.J4.if_module_ioctl|
        TST      a1,#&40
        BEQ      |L000340.J4.if_module_ioctl|
        MOV      a1,v1
        MOV      a2,#0
        BL       claim_frames
        LDR      a1,[v1,#&10]
        BIC      a1,a1,#&40
|L000334.J26.if_module_ioctl|
        STRB     a1,[v1,#&10]
        MOV      a1,a1,ASR #8
        STRB     a1,[v1,#&11]
|L000340.J4.if_module_ioctl|
        MOV      a1,v4
        BL       splx
        MOV      a1,#0
        LDMDB    fp,{v1-v4,fp,sp,pc}^

        EXPORT  if_module_null
if_module_null
        MOV      a1,#0
        MOVS     pc,lr

        EXPORT  if_module_none
if_module_none
        MOV      a1,#6
        MOVS     pc,lr

        IMPORT  splhi
        IMPORT  arpinput
        IMPORT  revarpinput
        IMPORT  ipintr
        EXPORT  if_callb
if_callb
        MOV      ip,sp
        STMDB    sp!,{v1-v6,fp,ip,lr,pc}
        SUB      fp,ip,#4
        SUB      sp,sp,#8
        LDR      v5,[pc, #L000408-.-8]
        LDR      ip,[sl,#-0]
        ADD      v5,ip,v5
        MOV      v4,#0
|L000380.J4.if_callb|
        BL       splhi
        LDR      a3,[pc, #L00040c-.-8]
        LDR      ip,[sl,#-0]
        ADD      a3,ip,a3
        LDR      v1,[a3,#0]
        TEQ      v1,#0
        BEQ      |L0003bc.J5.if_callb|
        LDR      a2,[v1,#4]
        STR      a2,[a3,#0]
        TEQ      a2,#0
        STREQ    v4,[a3,#4]!
        STR      v4,[v1,#4]
        LDR      a3,[v5,#0]
        SUB      a3,a3,#1
        STR      a3,[v5,#0]
|L0003bc.J5.if_callb|
        BL       splx
        TEQ      v1,#0
        MOVEQ    a1,#1
        LDMEQDB  fp,{v1-v6,fp,sp,pc}^
        LDR      a1,[v1,#8]
        ADD      a1,v1,a1
        LDR      v2,[a1,#0]
        CMN      v2,#1
        TEQNE    v2,#0
        BEQ      |L000460.J20.if_callb|
        LDR      a2,[v2,#&10]
        TST      a2,#&1000
        BEQ      |L000410.J16.if_callb|
        MOV      v3,#1
        ADD      a2,a1,#4
        MOV      a1,sp
        MOV      a3,#6
        BL       memcpy
        B        |L000414.J18.if_callb|
L000408
        EXPORT  ipintrq
        DCD     ipintrq+&8
L00040c
        DCD     ipintrq
|L000410.J16.if_callb|
        MOV      v3,#0
|L000414.J18.if_callb|
        LDR      a1,[v1,#&c]
        MOV      a1,a1,LSL #16
        MOV      a1,a1,LSR #16
        MOV      a2,#4
        TEQ      a1,#&800
        STR      a2,[v1,#&c]
        BEQ      |L000480.J23.if_callb|
        SUB      ip,a1,#&800
        TEQ      ip,#6
        MOVEQ    a2,v1
        MOVEQ    a1,v2
        BLEQ     arpinput
        BEQ      |L000380.J4.if_callb|
        SUB      ip,a1,#&8000
        TEQ      ip,#&35
        MOVEQ    a2,v1
        MOVEQ    a1,v2
        BLEQ     revarpinput
        BEQ      |L000380.J4.if_callb|
|L000460.J20.if_callb|
        MOV      a2,v1
        LDR      a3,[pc, #L00019c-.-8]
        LDR      ip,[sl,#-0]
        ADD      a3,ip,a3
        MOV      a1,a3
        MOV      lr,pc
        LDR      pc,[a3,#&50]
        B        |L000380.J4.if_callb|
|L000480.J23.if_callb|
        LDR      a1,[v1,#8]
        ADD      a1,a1,#4
        ADD      v1,v1,#8
        STMIA    v1,{a1,v4}
        SUB      v1,v1,#8
        LDR      v6,[v1,#0]
        MOV      a2,v1
        LDR      a3,[pc, #L00019c-.-8]
        LDR      ip,[sl,#-0]
        ADD      a3,ip,a3
        MOV      a1,a3
        MOV      lr,pc
        LDR      pc,[a3,#&4c]
        MOVS     a1,v6
        BEQ      |L000380.J4.if_callb|
        TEQ      v3,#0
        MOVEQ    a3,v4
        MOVNE    a3,sp
        MOV      a2,a1
        MOV      a1,v2
        BL       ipintr
        B        |L000380.J4.if_callb|

        AREA |C$$data|,DATA

|x$dataseg|

        AREA ipintrq,COMMON,NOINIT
        % 20

        EXPORT  in_ifaddr
        AREA in_ifaddr,COMMON,NOINIT
        % 4

        EXPORT  selwait
        AREA selwait,COMMON,NOINIT
        % 4

        EXPORT  boothowto
        AREA boothowto,COMMON,NOINIT
        % 4

        EXPORT  wantin
        AREA wantin,COMMON,NOINIT
        % 4

        EXPORT  panicstr
        AREA panicstr,COMMON,NOINIT
        % 4

        EXPORT  noproc
        AREA noproc,COMMON,NOINIT
        % 4

        EXPORT  swapdev_vp
        AREA swapdev_vp,COMMON,NOINIT
        % 4

        EXPORT  vm_sw_dev
        AREA vm_sw_dev,COMMON,NOINIT
        % 2

        EXPORT  dumplo
        AREA dumplo,COMMON,NOINIT
        % 4

        EXPORT  dumpdev
        AREA dumpdev,COMMON,NOINIT
        % 2

        EXPORT  rootvp
        AREA rootvp,COMMON,NOINIT
        % 4

        EXPORT  rootdev
        AREA rootdev,COMMON,NOINIT
        % 2

        EXPORT  rasize
        AREA rasize,COMMON,NOINIT
        % 4

        EXPORT  rablock
        AREA rablock,COMMON,NOINIT
        % 4

        EXPORT  updlock
        AREA updlock,COMMON,NOINIT
        % 4

        EXPORT  nswap
        AREA nswap,COMMON,NOINIT
        % 4

        EXPORT  physmem
        AREA physmem,COMMON,NOINIT
        % 4

        EXPORT  maxmem
        AREA maxmem,COMMON,NOINIT
        % 4

        EXPORT  curpri
        AREA curpri,COMMON,NOINIT
        % 1

        EXPORT  kmapwnt
        AREA kmapwnt,COMMON,NOINIT
        % 1

        EXPORT  runrun
        AREA runrun,COMMON,NOINIT
        % 4

        EXPORT  runout
        AREA runout,COMMON,NOINIT
        % 1

        EXPORT  runin
        AREA runin,COMMON,NOINIT
        % 1

        EXPORT  mpid
        AREA mpid,COMMON,NOINIT
        % 4

        EXPORT  nswdev
        AREA nswdev,COMMON,NOINIT
        % 4

        EXPORT  nchrdev
        AREA nchrdev,COMMON,NOINIT
        % 4

        EXPORT  nblkdev
        AREA nblkdev,COMMON,NOINIT
        % 4

        EXPORT  cpuspeed
        AREA cpuspeed,COMMON,NOINIT
        % 4

        END
