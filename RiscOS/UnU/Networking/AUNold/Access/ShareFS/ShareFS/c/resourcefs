/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/02/27  16:42:02  pwain
 * All existing malloc() calls changed to use rmalloc().
 * This is because ShareFS uses a different module entry
 * code which means that its stack is kept in RMA. DO NOT
 * USE MALLOC IN ShareFS CODE.
 * 
 * Revision 1.1  95/01/09  13:53:10  kwelton
 * Initial revision
 * 
 */
#include "swis.h"
#include "resourcefs.h"
#include "ralloc.h"
#include "debug.h"
#include "interface.h"
#include "util.h"
#include <string.h>
#include <stdio.h>

/* This is a resourcefs record for the object representing the remote disc */
struct resourcefs
{
    struct resourcefs *next;
    int offset;
    Information_Fields info;	/* Now Matches GBPB 10/11 format */
    int length;
    int attr;
    char fullname[4];		/* Space for "Discs." */
    int size4;			/* size+4, note actually packed back
				 * against word aligned end of
				 * fullname */
    int offset0;		/* Set to 0 for end of end of list */
};

static struct resourcefs *them = 0;

#if 0
void resourcefs_deregister(char *dir, char *name)
{
    char buf[256];		/* P:0 */
    struct resourcefs *v, **vp;
    strcpy(buf, dir);
    strcat(buf, ".");
    strcat(buf, name);
    DEBUGf("resoucefs_deregister %s..", buf);	/* P:0 */
    for (vp = &them; 0 != (v = *vp); vp = &v->next)	/* P:0 */
	if (!stricmp(v->fullname, buf))	/* P:0 */
	{
	    *vp = v->next;	/* P:0 */
	    DEBUGf("found\n");	/* P:0 */
	    _swix(ResourceFS_DeregisterFiles, _IN(0), &v->offset);
	    free(v);
	    break;
	}
}
#endif

void resourcefs_register(char *dir, char *name, int type, int attr)
{
    char buf[256];		/* P:26 */
    int k;
    struct resourcefs *v;
    strcpy(buf, dir);
    strcat(buf, ".");
    strcat(buf, name);
    DEBUGf("resourcefs_register %s %x %x..", buf, type, attr);	/* P:10 */
    for (v = them; v && stricmp(v->fullname, buf); v = v->next)	/* P:68 */
	;
    k = (strlen(buf) | 3) + 1;
    if (v)
	_swix(ResourceFS_DeregisterFiles, _IN(0), &v->offset);	/* P:0 */
    else
    {
	v = rmalloc(sizeof(struct resourcefs) + k - sizeof(v->fullname));	/* P:26 */
	strcpy(v->fullname, buf);
	v->next = them;
	them = v;
    }
    v->offset = 0;
    v->info.date_type.part_1 = type << 8 | 0xfff00000;
    StampInfo(&v->info);
    v->length = 0;
    v->attr = attr;
    memset(&v->fullname, sizeof(v->fullname) + sizeof(v->size4) + sizeof(v->offset0), 0);
    {
	int *p;
	_kernel_oserror *err;
	p = (int *) &v->fullname[(strlen(v->fullname) | 3) + 1];
	p[0] = v->length + 4;
	p[1] = 0;
	v->offset = (char *) &p[1] - (char *) &v->offset;
	DEBUGf("Regsiter %p..", &v->offset);	/* P:10 */
	err = _swix(ResourceFS_RegisterFiles, _IN(0), &v->offset);
	DEBUGf("returns %s\n", err ? err->errmess : "ok");	/* P:10 */
    }
}

void resourcefs_clear(void)
{
    struct resourcefs *v, *t;	/* P:19 */
    t = them;
    them = 0;
    while (t)			/* P:59 */
    {
	_swix(ResourceFS_DeregisterFiles, _IN(0), &t->offset);	/* P:21 */
	v = t;
	t = v->next;
	free(v);
    }
}

/* EOF resourcefs.c */
