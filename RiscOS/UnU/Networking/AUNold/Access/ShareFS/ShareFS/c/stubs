/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  95/01/09  13:53:32  kwelton
 * Initial revision
 * 
 */
#include "sys/types.h"

#include "kernel.h"
#include "errno.h"

#include "sys/uio.h"
#include "sys/socket.h"
#include "sys/socketvar.h"

#define XBIT            0x20000
#define BASESOCKETSWI   0x41200+XBIT

#define Socket          BASESOCKETSWI+0
#define Bind            BASESOCKETSWI+1
#define Recvfrom        BASESOCKETSWI+6
#define Sendto          BASESOCKETSWI+9
#define Setsockopt      BASESOCKETSWI+12
#define Socketclose     BASESOCKETSWI+16
#define Socketioctl     BASESOCKETSWI+18

/*
 * socket interface stubs
 */
int errno;
extern _kernel_oserror *_kernel_swi();
extern int socket(int domain, int type, int protocol);
extern int bind(int s, struct sockaddr * name, int namelen);
extern int sendto(int s, char *msg, int len, int flag, char *to, int tolen);
extern int recvfrom(int s, char *buf, int len, int flags, struct sockaddr * from, int *fromlenaddr);
extern int setsockopt(int s, int level, int optname, char *optval, int optlen);
extern int socketclose(int d);
extern int socketioctl(int s, int cmd, char *data);

int socket(int domain, int type, int protocol)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = domain;
    rin.r[1] = type;
    rin.r[2] = protocol;
    e = _kernel_swi(Socket, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : rout.r[0]);
}

int bind(int s, struct sockaddr *name, int namelen)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = s;
    rin.r[1] = (int) name;
    rin.r[2] = namelen;
    e = _kernel_swi(Bind, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : 0);
}


int sendto(int s, char *msg, int len, int flag, char *to, int tolen)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = s;
    rin.r[1] = (int) msg;
    rin.r[2] = len;
    rin.r[3] = flag;
    rin.r[4] = (int) to;
    rin.r[5] = tolen;
    e = _kernel_swi(Sendto, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : rout.r[0]);
}

int recvfrom(int s, char *buf, int len, int flags,
	     struct sockaddr *from, int *fromlenaddr)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = s;
    rin.r[1] = (int) buf;
    rin.r[2] = len;
    rin.r[3] = flags;
    rin.r[4] = (int) from;
    rin.r[5] = (int) fromlenaddr;
    e = _kernel_swi(Recvfrom, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : rout.r[0]);
}

int setsockopt(int s, int level, int optname, char *optval, int optlen)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = s;
    rin.r[1] = level;
    rin.r[2] = optname;
    rin.r[3] = (int) optval;
    rin.r[4] = optlen;
    e = _kernel_swi(Setsockopt, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : 0);
}

int socketclose(int d)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = d;
    e = _kernel_swi(Socketclose, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : 0);
}

int socketioctl(int s, int cmd, char *data)
{
    _kernel_oserror *e;
    _kernel_swi_regs rin, rout;

    rin.r[0] = s;
    rin.r[1] = cmd;
    rin.r[2] = (int) data;
    e = _kernel_swi(Socketioctl, &rin, &rout);
    errno = e ? e->errnum : 0;
    if (errno > EREMOTE)
	errno = ESRCH;
    return (errno ? -1 : 0);
}

/* EOF stubs.c */
