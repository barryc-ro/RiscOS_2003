        SUBT    Debugging routines and macros => Debug

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 23-Nov-87  SKS   Added $routine to DREG
; 11-Feb-88  SKS   Added integer printing code
; 19-Feb-88  SKS   Make $nonewline consistent
; 11-Mar-88  SKS   Added DSTRING macro, tweaked others
; 18-Mar-88  SKS   Fixed Tutu_PrintString
; 27-Apr-88  SKS   Fixed DLINE wrt. inversing, DSTRING wrt. r14_svc
; 27-Apr-88  SKS   Fixed DSTRING wrt. r14_svc properly (wrong offset before !)
; 05-May-88  SKS   Fixed DSTRING to give address in invalids
; 10-May-88  SKS   Added Host_Debug so you can switch to Host debug much easier
; 22-Jun-88  SKS   Error trapping for $cc field
; 20-Jul-88  SKS   Fixed DLINE with no arg
; 07-Mar-91  BC    Changed it to do it into a buffer

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Use of hdr.Debug: r13 MUST be a FD stack pointer. Do not use otherwise

;       GET     &.Hdr.Debug

; ... defs, etc ...

;       InsertDebugRoutines             ; ensure this is after module header !
;                                       ; conventional to have this just before
;       END

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Output a register with optional string, preserving all state in all modes

; eg. DREG r0,"register zero is "
;     DREG r1,"r1 is ",cc
;     DREG r2,,,Integer
;     DREG r0,,cc
;     DREG r0,,,Word
;     DREG r1,"Thing is ",,Byte

        MACRO
$label  DREG    $reg, $string, $cc, $routine
$label  Push    "r0, r14"
        Push    psr
 [ "$string" = ""
  [ $reg = r13
        MOV     r0, #" "
        BL      Tutu_PutByte
        ADD     r0, r13, #12    ; Correct for having stacked info on FD r13
  |
   [ $reg = r0
        BL      Tutu_CopyString
        DCB     " ", 0
        ALIGN
   |
        MOV     r0, #" "
        BL      Tutu_PutByte
        MOV     r0, $reg
   ]
  ]
 |
  [ $reg = r13
        ADD     r0, r13, #12    ; Correct for having stacked info on FD r13
  |
   [  $reg <> r0
         MOV     r0, $reg
   ]
  ]
        BL      Tutu_CopyString
        DCB     "$string", 0
        ALIGN
 ]
 [ "$cc" = ""
  [ "$routine" <> ""
        BL      Tutu_$routine
        BL      Tutu_NewLine
  |
        BL      Tutu_WordLine
  ]
 |
  [ "$cc" <> "cc"
  ! 1,"Error in DREG with 'cc': '$cc' used instead"
  MEXIT
  ]
  [ "$routine" <> ""
        BL      Tutu_$routine
  |
        BL      Tutu_Word
  ]
 ]
        Pull    r0
        TEQP    r0, #0
        NOP
        Pull    "r0, r14"
        MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        MACRO
$label  BREG    $reg, $string, $cc
$label  DREG    $reg, "$string", "$cc", Byte
        MEND
        [       False
        Push    "r0, lr"
        Push    pc
 [ "$string" = ""
  [ $reg = r13
        MOV     r0, #" "
        BL      Tutu_PutByte
        ADD     r0, r13, #12    ; Correct for having stacked info on FD r13
  |
   [ $reg = r0
        BL      Tutu_CopyString
        DCB     " ", 0
        Align
   |
        MOV     r0, #" "
        BL      Tutu_PutByte
        MOV     r0, $reg
   ]
  ]
 |
  [ $reg = r13
        ADD     r0, r13, #12    ; Correct for having stacked info on FD r13
  |
   [ $reg <> r0
        MOV     r0, $reg
   ]
  ]
        BL      Tutu_CopyString
        DCB     "$string", 0
        ALIGN
 ]
 [ "$cc" = ""
        BL      Tutu_ByteLine
 |
  [ "$cc" <> "cc"
  ! 1,"Error in BREG with 'cc': '$cc' used instead"
  MEXIT
  ]
        BL      Tutu_Byte
 ]
        Pull    lr
        TEQP    lr, #0
        NOP
        Pull    "r0, lr"
   ;     MEND
        ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Output a string, preserving all state in all modes

        MACRO
$label  DLINE   $string, $cc
$label  Push    "r0, r14"
        Push    psr
 [ "$string" <> ""
        BL      Tutu_CopyString
        DCB     "$string"
  [ "$cc" = ""
        DCB     10, 13
  |
   [ "$cc" <> "cc"
   ! 1,"Error in DLINE with 'cc': '$cc' used instead"
   MEXIT
   ]
  ]
        DCB     0
        ALIGN
 |
  [ "$cc" = ""
        BL      Tutu_NewLine
  ]
 ]
        Pull    r14
        TEQP    r14, #0
        NOP
        Pull    "r0, r14"
        MEND


        MACRO
$label  DSTRING $reg, $string, $cc
$label  Push    "r0, r14"
        Push    psr
 [ "$string" = ""
   [ $reg = r0
        BL      Tutu_CopyString
        DCB     "'", 0
        ALIGN
   |
        MOV     r0, #"'"
        BL      Tutu_PutByte
   ]
 |
        BL      Tutu_CopyString
        DCB     "$string", "'", 0
        ALIGN
 ]
 [ $reg <> r0
  [ $reg = r14
        LDR     r0, [sp, #8]
  |
        MOV     r0, $reg
  ]
 ]
        BL      Tutu_PrintString
        BL      Tutu_CopyString
        DCB     "'"
 [ "$cc" = ""
        DCB     10, 13
 |
  [ "$cc" <> "cc"
  ! 1,"Error in DSTRING with 'cc': '$cc' used instead"
  MEXIT
  ]
 ]
        DCB     0
        ALIGN
        Pull    r14
        TEQP    r14, #0
        NOP
        Pull    "r0, r14"
        MEND



        MACRO
        InsertDebugRoutines
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Tutu's infamous debugging routines

Tutu_WordLine
        Push    "r0, lr"      ; Get round LDM ^ bug in 3um ARM, XOS errors
        BL      Tutu_Word
        BL      Tutu_NewLine
        Pull    "r0, pc",,^

Tutu_Word
        Push    "r0-r2, lr"
        LDR     r1, DebugPointer
        MOV     r2, #10
        SWI     XOS_ConvertHex8
        LDR     r0, DebugLimit
        CMP     r1, r0
        STRLE   r1, DebugPointer
        Pull    "r0-r2, pc",,^

Tutu_Byte
        Push    "r0-r2, lr"
        LDR     r1, DebugPointer
        MOV     r2, #4
        SWI     XOS_ConvertHex2
        LDR     r0, DebugLimit
        CMP     r1, r0
        STRLE   r1, DebugPointer
        Pull    "r0-r2, pc",,^

Tutu_Integer
        Push    "r0-r2, lr"
        LDR     r1, DebugPointer
        MOV     r2, #16
        SWI     XOS_ConvertSpacedInteger4
        LDR     r0, DebugLimit
        CMP     r1, r0
        STRLE   r1, DebugPointer
        Pull    "r0-r2, pc",,^

Tutu_Cardinal
        Push    "r0-r2, lr"
        LDR     r1, DebugPointer
        MOV     r2, #15
        SWI     XOS_ConvertSpacedCardinal4
        LDR     r0, DebugLimit
        CMP     r1, r0
        STRLE   r1, DebugPointer
        Pull    "r0-r2, pc",,^


Tutu_BadString          DCB     "--- Invalid Address ---", 0
Tutu_NullString         DCB     "<Null>", 0
                        ALIGN

Tutu_PrintString
        Push    "r0, r1, lr"
        MOV     r1, r0

        TST     r1, #&FC000000          ; Trying to cause address exception ?
        ADRNE   r1, Tutu_BadString
        BNE     %FT20

        CMP     r1, #&02000000          ; Or abort, or stiffo ?
        RSBCSS  r14, r1, #&03800000
        ADRCS   r1, Tutu_BadString
        BCS     %FT20

        CMP     r1, #0
        ADREQ   r1, Tutu_NullString

10      LDRB    r0, [r1], #1
        CMP     r0, #32
        Pull    "r0, r1, pc", CC, ^
        BL      Tutu_PutByte
        B       %BT10

20      LDRB    r0, [r1], #1
        CMP     r0, #32
        BCC     %FT30
        BL      Tutu_PutByte
        B       %BT20

30      BL      Tutu_CopyString
        DCB     " (&", 0
        ALIGN
        LDR     r0, [sp]
        BL      Tutu_Word
        MOV     r0, #")"
        BL      Tutu_PutByte
        Pull    "r0, r1, pc",, ^

Tutu_CopyString
        Push    "r0, r1"
        BIC     lr, lr, #ARM_CC_Mask
        LDR     r1, DebugPointer
40      LDRB    r0, [ r14 ], #1
        STRB    r0, [ r1 ], #1
        TEQ     r0, #0
        BNE     %BT40
        DEC     r1                      ; Point back at the zero
        INC     r14, 3                  ; Get to the right word boundary
        BIC     r14, r14, #3            ; Align afterwards
        LDR     r0, DebugLimit
        CMP     r1, r0
        STRLE   r1, DebugPointer
        Pull    "r0, r1"
        MOV     pc, lr

Tutu_NewLine
        Push    "r0, lr"
        LDR     r14, DebugPointer
        MOV     r0, #10
        STRB    r0, [ r14 ], #1
        MOV     r0, #13
        STRB    r0, [ r14 ], #1
        LDR     r0, DebugLimit
        CMP     r14, r0
        STRLE   r14, DebugPointer
        Pull    "r0, pc"

Tutu_PutByte
        Push    "r0, lr"
        LDR     r14, DebugPointer
        STRB    r0, [ r14 ], #1
        LDR     r0, DebugLimit
        CMP     r14, r0
        STRLE   r14, DebugPointer
        Pull    "r0, pc"

; End of the debug routines
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        MEND

        GBLL    Host_Debug
Host_Debug SETL False

        OPT     OldOpt
        END
