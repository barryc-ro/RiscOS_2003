/*
        Functions to supply "UNIX" operations on a
        non-UNIX system.
*/
/* Modification history:

   05/05/95, RWB - Added #include <time.h>

 */
#include <stdio.h>
#include <time.h>    /* Added by RWB Fri 05th May 1995 */
#include <pwd.h>
#include <sys/time.h>
#include <sys/errno.h>
#include <kernel.h>
#include <swis.h>
#include <string.h>

extern socketclose(), socketioctl();
extern socketread(), socketwrite();
extern socketreadv(), socketwritev();
extern socketstat(), getstablesize();
extern int errno;

static char *getvarhostname();
static char *getvarusername();

#define UNIX_MagicNumber_UID_Nobody 32767
#define UNIX_MagicNumber_GID_Nobody 9999

#define Default_HostName "ARM_NoName"
#define Default_UserName "root"

#define VARBUFSIZE 64

static char varnamebuf[VARBUFSIZE];
static char *usernamevar = "Inet$UserName";
static char *hostnamevar = "Inet$HostName";
static struct passwd pwbuf;

int gethostname( char *name, int max_namelen )
{
        char *n;

        if ((n = getvarhostname()) != 0)
                strncpy (name, n, max_namelen);
        else strcpy(name, Default_HostName);
        return (0);
}

int geteuid( void )
{
        return UNIX_MagicNumber_UID_Nobody;
}

int getuid (void)
{
        return UNIX_MagicNumber_UID_Nobody;
}

int getegid( void )
{
        return UNIX_MagicNumber_GID_Nobody;
}

int getgroups( int ngrps, int *grparray )
{
        ngrps = ngrps;
        grparray[0] = UNIX_MagicNumber_GID_Nobody;
        return 1;
}

typedef struct {unsigned int l,h;} machinetime;

static int realtime(void)
{ /* this is time(), recoded here to avoid the absurd 6ms delay
     in the RISC OS 3 Shared C Library (penalty is timezone) */
        machinetime bt, w, w2;
        bt.l = 3;                 /* presumably 'request time' arg */
        _kernel_osword(14, (int *)&bt); /* read timer as 5 byte integer centiseconds since 1/1/1900 */
/* to two 3-byte things - for divide */
        w.h = ((bt.h & 255) << 8) | (bt.l >> 24);
        w.l = bt.l & 0xffffff;
/* turn csecs to secs */
        w2.h = w.h / 100;
        w2.l = ((w.h % 100 << 24) | w.l) / 100;
/* back to 8 byte binary */
        bt.h = w2.h >> 8;
        bt.l = (w2.h << 24) | w2.l;
/* normalise to Jan70 instead of Jan00... */
#define secs0070 (((unsigned)86400)*(365*70+17))  /* less than 2^32 */
        if (bt.l < secs0070) bt.h--;
        bt.l -= secs0070;
/* if high word is non-zero then date is unset/out of unix range... */
        return bt.h ? -1 : bt.l;
}

int gettimeofday( struct timeval *tv, struct timezone *tzp )
{
        struct tm *t_gmt;
        struct tm *t_local;
        tv->tv_sec = realtime();
        tv->tv_usec = 0;
        if ( tzp )
        {
                t_gmt = gmtime( (time_t *)&tv->tv_sec );
                t_local = localtime( (time_t *)&tv->tv_sec );
                tzp->tz_minuteswest = (int)difftime( mktime( t_gmt ), mktime( t_local )) / 60;
                tzp->tz_dsttime = t_local->tm_isdst;
        }

        return NULL;
}

int getpid( void )
{
        return UNIX_MagicNumber_GID_Nobody;
}

char *index( char *s, char c )
{
        return strchr( s, c );
}

char *rindex( char *s, char c )
{
        return strrchr( s, c );
}



int close(s)
int s;
{
        return (socketclose(s));
}

int ioctl(s, cmd, data)
int s, cmd;
char *data;
{
        return (socketioctl(s, cmd, data));
}

int read(s, buf, nbytes)
int s;
char *buf;
int nbytes;
{
        return (socketread(s, buf, nbytes));
}

int write(s, buf, nbytes)
int s;
char *buf;
int nbytes;
{
        return (socketwrite(s, buf, nbytes));
}


int readv(s, iov, iovcnt)
int s;
struct iovec *iov;
int iovcnt;
{
        return (socketreadv(s, iov, iovcnt));
}

int writev(s, iov, iovcnt)
int s;
struct iovec *iov;
int iovcnt;
{
        return (socketwritev(s, iov, iovcnt));
}

int fstat(s, buf)
int s;
char *buf;
{
        return (socketstat(s, buf));
}

char xputchar(ch)
char ch;
{
        _kernel_swi_regs rin, rout;
        _kernel_oserror *e;

        rin.r[0] = (int)ch;
        e = _kernel_swi(XOS_Bit | OS_WriteC, &rin, &rout);
        return (ch);
}

flushinput()
{
        _kernel_swi_regs rin, rout;
        _kernel_oserror *e;

        rin.r[0] = 15;
        rin.r[1] = 1;
        rin.r[2] = 0;
        e = _kernel_swi(XOS_Bit | OS_Byte, &rin, &rout);
}

int getdtablesize()
{
        return (getstablesize());
}

herror(c)
char *c;
{
        c = c;
}

struct passwd *getpwuid(uid)
{
        bzero((char *)&pwbuf, sizeof(pwbuf));
        pwbuf.pw_name = getvarusername();
        if (pwbuf.pw_name == 0)
                pwbuf.pw_name = Default_UserName;
        return (&pwbuf);
}

char *getlogin()
{
        return (getvarusername());
}

char *getpass(prompt)
char *prompt;
{
        static char pbuf[9];
        char *p;
        int c;

        fprintf(stdout, "%s", prompt); fflush(stdout);
        for (p = pbuf; (c = osreadc()) != '\r' && c != EOF;) {
                if (p < &pbuf[8])
                        *p++ = c;
        }
        fprintf(stdout, "\n");
        *p = 0;
        return (pbuf);
}

int osreadc()
{
        _kernel_swi_regs rin, rout;
        _kernel_oserror *e;

        e = _kernel_swi(XOS_Bit | OS_ReadC, &rin, &rout);
        return (rout.r[0] == 0x1b ? EOF : rout.r[0]);
}

char *xgets(buf)
char *buf;
{
        char *p;
        int c;

        flushinput();
        for (p = buf; (c = osreadc()) != '\r' && c != EOF;) {
                  putchar(c);
                  *p++ = c;
        }
        if (c == '\r') putchar('\n');
        *p = 0;
        return (buf);
}

struct passwd *getpwnam(name)
char *name;
{
        bzero((char *)&pwbuf, sizeof(pwbuf));
        pwbuf.pw_name = name;
        return (&pwbuf);
}

struct passwd *getpwent()
{
        return ((struct passwd *) 0);
}


char *getvarhostname()
{
    int nread;
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;
    int tries = 0;

again:
    rin.r[0] = (int)hostnamevar;
    rin.r[1] = (int)varnamebuf;
    rin.r[2] = (int)VARBUFSIZE;
    rin.r[3] = 0;
    rin.r[4] = 0;
    e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &rin, &rout);
    if (e == 0) {
        nread = rout.r[2];
        varnamebuf[nread] = 0;
        if (nread > 0)
            return (varnamebuf);
     }
     if (tries++ == 0) {
        rin.r[0] = (int)hostnamevar;
        rin.r[1] = (int)Default_HostName;
        rin.r[2] = strlen(Default_HostName)+1;
        rin.r[3] = 0;
        rin.r[4] = 0;
        e = _kernel_swi(XOS_Bit | OS_SetVarVal, &rin, &rout);
        if (e == 0)
            goto again;
     }
     return ((char *)0);
}

char *getvarusername()
{
    int nread;
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;

    rin.r[0] = (int)usernamevar;
    rin.r[1] = (int)varnamebuf;
    rin.r[2] = (int)VARBUFSIZE;
    rin.r[3] = 0;
    rin.r[4] = 0;
    e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &rin, &rout);
    if (e != 0)
        return ((char *)0);
    nread = rout.r[2];
    varnamebuf[nread] = 0;
    return (nread ? varnamebuf : (char *)0);
}

long lseek(d, offset, whence)
int d;
long offset;
int whence;
{
    errno = ESPIPE;
    return (-1);
}

int strcasecmp(a, b)
char *a, *b;
{
    while(*a && *b) {
        if (tolower(*a++) != tolower(*b++))
            return (1);
    }
    return ((*a || *b) ? 1 : 0);
}

int strncasecmp(a, b, n)
char *a, *b;
int n;
{
    while(*a && *b && n--) {
        if (tolower(*a++) != tolower(*b++))
            return (1);
    }
    return ((*a || *b) ? 1 : 0);
}

/*
 * file system operations
 */
#define F_OK  0
#define W_OK  2
#define R_OK  4
int access(path, mode)
char *path;
int mode;
{
        _kernel_swi_regs rin, rout;
        _kernel_oserror *e;
        int attr;

        rin.r[0] = 17;
        rin.r[1] = path;
        rin.r[4] = 0;
        e = _kernel_swi(XOS_Bit | OS_File, &rin, &rout);
        if (rout.r[0] == 0) {
                errno = ENOENT;
                return (-1);
        }
        if (rout.r[0] == 2)
                goto ok;
        attr = rout.r[5];
        if (mode == F_OK)
                return (0);
        if (mode == W_OK) {
                if ((attr & 02) == 0) {
                        errno = EACCES;
                        return(-1);
                }
                return (0);
        }
        if (mode == R_OK) {
                if ((attr & 01) == 0) {
                        errno = EACCES;
                        return(-1);
                }
                return (0);
        }
ok:
        errno = 0;
        return (0);
}

int chmod(path, mode)
char *path;
int mode;
{
        _kernel_swi_regs rin, rout;
        _kernel_oserror *e;
        int attr;

        rin.r[0] = 17;
        rin.r[1] = path;
        rin.r[4] = 0;
        e = _kernel_swi(XOS_Bit | OS_File, &rin, &rout);
        if (rout.r[0] == 0) {
                errno = ENOENT;
                return (-1);
        }
        attr = rout.r[5];
        if (mode & 0200) attr |= 02;
        if (mode & 0400) attr |= 01;
        rin.r[0] = 4;
        rin.r[1] = path;
        rin.r[5] = attr;
        e = _kernel_swi(XOS_Bit | OS_File, &rin, &rout);
        errno = 0;
        return (0);
}

int readdir(path, buf, len, name, offset)
char *path, *buf;
{
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;
    int fsize;

    rin.r[0] = 9;
    rin.r[1] = path;
    rin.r[2] = buf;
    rin.r[3] = 1;
    rin.r[4] = offset;
    rin.r[5] = len;
    rin.r[6] = name;
    e = _kernel_swi(XOS_Bit | OS_GBPB, &rin, &rout);
    if (rout.r[3] != 1)    /* number of objects read */
        return (-1);
    return (rout.r[4]);    /* next item to read */

}

int filestat(fname, type)
char *fname;
char *type;
{
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;
    int fsize;

    rin.r[0] = 5;
    rin.r[1] = fname;
    e = _kernel_swi(XOS_Bit | OS_File, &rin, &rout);
    *type = rout.r[0];
    if (*type == 0)
        return (-1);
    fsize = rout.r[4];
    return (fsize);
}

int chdir(dir)
char *dir;
{
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;

    rin.r[0] = 0;
    rin.r[1] = dir;
    e = _kernel_swi(XOS_Bit | OS_FSControl, &rin, &rout);
    return (0);
}

char *getwd(buf)
char *buf;
{
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;
    char namebuf[32], *b, *c, length;

    rin.r[0] = 6;
    rin.r[2] = namebuf;
    e = _kernel_swi(XOS_Bit | OS_GBPB, &rin, &rout);
    length = namebuf[1];
    b = buf;
    c = &namebuf[2];
    while (length-- > 0)
        *b++ = *c++;
    *b = 0;
    return (buf);
}

void killfile(name)
char *name;
{
    _kernel_swi_regs rin, rout;
    _kernel_oserror *e;

    rin.r[0] = 6;
    rin.r[1] = name;
    e = _kernel_swi(XOS_Bit | OS_File, &rin, &rout);
}

char    *sys_errlist[] = {
        "Unspecified error",
        "EPERM",                                /* 1 - EPERM */
        "ENOENT",                               /* 2 - ENOENT */
        "Cannot access Internet module",        /* 3 - ESRCH */
        "EINTR",                                /* 4 - EINTR */
        "Cannot access interface",              /* 5 - EIO */
        "ENXIO",                                /* 6 - ENXIO */
        "E2BIG",                                /* 7 - E2BIG */
        "ENOEXEC",                              /* 8 - ENOEXEC */
        "Destination host not accessible",      /* 9 - EBADF */
        "ECHILD",                               /* 10 - ECHILD */
        "EAGAIN",                               /* 11 - EAGAIN */
        "ENOMEM",                               /* 12 - ENOMEM */
        "Cannot access network",                /* 13 - EACCES */
        "Invalid address supplied",             /* 14 - EFAULT */
        "ENOTBLK",                              /* 15 - ENOTBLK */
        "Socket busy",                          /* 16 - EBUSY */
        "EEXIST",                               /* 17 - EEXIST */
        "EXDEV",                                /* 18 - EXDEV */
        "Cannot access device",                 /* 19 - ENODEV */
        "ENOTDIR",                              /* 20 - ENOTDIR */
        "EISDIR",                               /* 21 - EISDIR */
        "Invalid argument supplied",            /* 22 - EINVAL */
        "ENFILE",                               /* 23 - ENFILE */
        "EMFILE",                               /* 24 - EMFILE */
        "ENOTTY",                               /* 25 - ENOTTY */
        "ETXTBSY",                              /* 26 - ETXTBSY */
        "EFBIG",                                /* 27 - EFBIG */
        "ENOSPC",                               /* 28 - ENOSPC */
        "ESPIPE",                               /* 29 - ESPIPE */
        "EROFS",                                /* 30 - EROFS */
        "EMLINK",                               /* 31 - EMLINK */
        "EPIPE",                                /* 32 - EPIPE */

/* math software */
        "EDOM",                                 /* 33 - EDOM */
        "ERANGE",                               /* 34 - ERANGE */

/* non-blocking and interrupt i/o */
        "Requested operation would block",         /* 35 - EWOULDBLOCK */
        "Requested operation now in progress",     /* 36 - EINPROGRESS */
        "Requested operation already in progress", /* 37 - EALREADY */

/* ipc/network software */

        /* argument errors */
        "ENOTSOCK",                             /* 38 - ENOTSOCK */
        "EDESTADDRREQ",                         /* 39 - EDESTADDRREQ */
        "Supplied message too long",            /* 40 - EMSGSIZE */
        "Invalid Protocol type",                /* 41 - EPROTOTYPE */
        "Option not supported by protocol",     /* 42 - ENOPROTOOPT */
        "Protocol not supported",               /* 43 - EPROTONOSUPPORT */
        "Socket type not supported",            /* 44 - ESOCKTNOSUPPORT */
        "Operation not supported on socket",    /* 45 - EOPNOTSUPP */
        "Protocol family not supported",        /* 46 - EPFNOSUPPORT */
        "Address family not supported by protocol family",
                                                       /* 47 - EAFNOSUPPORT */
        "Requested internet address already in use",   /* 48 - EADDRINUSE */
        "Unable to assign requested internet address", /* 49 - EADDRNOTAVAIL */

        /* operational errors */
        "Destination network is not available", /* 50 - ENETDOWN */
        "No route to destination network",      /* 51 - ENETUNREACH */
        "Network dropped connection on reset",  /* 52 - ENETRESET */
        "Connection aborted",                   /* 53 - ECONNABORTED */
        "Connection reset by peer",             /* 54 - ECONNRESET */
        "No free buffers available",            /* 55 - ENOBUFS */
        "Connection already exists",            /* 56 - EISCONN */
        "No connection exists",                 /* 57 - ENOTCONN */
        "Can't send - connection shutdown",     /* 58 - ESHUTDOWN */
        "ETOOMANYREFS",                         /* 59 - ETOOMANYREFS */
        "Connection has timed out",             /* 60 - ETIMEDOUT */
        "Connection refused",                   /* 61 - EREFUSED */
        "ELOOP",                                /* 62 - ELOOP */
        "ENAMETOOLONG",                         /* 63 - ENAMETOOLONG */
        "Destination host is not available",    /* 64 - EHOSTDOWN */
        "No route to destination host",         /* 65 - EHOSTUNREACH */
        "ENOTEMPTY",                            /* 66 - ENOTEMPTY */
        "EPROCLIM",                             /* 67 - EPROCLIM */
        "EUSERS",                               /* 68 - EUSERS */
        "EDQUOT",                               /* 69 - EDQUOT */
        "Stale NFS File Handle"                 /* 70 - ESTALE */
        "Mount path itself mounted on server"   /* 71 - EREMOTE */
};
int     sys_nerr = { sizeof sys_errlist/sizeof sys_errlist[0] };

void xperror(const char *s)
{
        if (s && *s)
                printf("%s: ", s);
        printf("%s\n", errno < sys_nerr ? sys_errlist[errno] : "Unknown error");
}

void
bcopy(src, dst, length)
char *src, *dst;
int length;
{
        memcpy(dst, src, length);
}

int
bcmp(b1, b2, length)
char *b1, *b2;
int length;
{
        return (memcmp(b1, b2, length) != 0);
}

bzero(b, length)
char *b;
int length;
{
        memset(b, 0, length);
}
