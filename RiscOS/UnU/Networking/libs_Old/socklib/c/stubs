#include <sys/types.h>
#include <sys/uio.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <kernel.h>

#define XBIT            0x20000
#define BASESOCKETSWI   0x41200+XBIT

#define Socket          BASESOCKETSWI+0
#define Bind            BASESOCKETSWI+1
#define Listen          BASESOCKETSWI+2
#define Accept          BASESOCKETSWI+3
#define Connect         BASESOCKETSWI+4
#define Recv            BASESOCKETSWI+5
#define Recvfrom        BASESOCKETSWI+6
#define Recvmsg         BASESOCKETSWI+7
#define Send            BASESOCKETSWI+8
#define Sendto          BASESOCKETSWI+9
#define Sendmsg         BASESOCKETSWI+10
#define Shutdown        BASESOCKETSWI+11
#define Setsockopt      BASESOCKETSWI+12
#define Getsockopt      BASESOCKETSWI+13
#define Getpeername     BASESOCKETSWI+14
#define Getsockname     BASESOCKETSWI+15
#define Socketclose     BASESOCKETSWI+16
#define Socketselect    BASESOCKETSWI+17
#define Socketioctl     BASESOCKETSWI+18
#define Socketread      BASESOCKETSWI+19
#define Socketwrite     BASESOCKETSWI+20
#define Socketstat      BASESOCKETSWI+21
#define Socketreadv     BASESOCKETSWI+22
#define Socketwritev    BASESOCKETSWI+23
#define Socketgettsize  BASESOCKETSWI+24

/*
 * socket interface stubs
 */
int errno;
extern _kernel_oserror *_kernel_swi();

socket(domain, type, protocol)
int domain, type, protocol;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = domain;
        rin.r[1] = type;
        rin.r[2] = protocol;
        e = _kernel_swi(Socket, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

bind(s, name, namelen)
int s;
struct sockaddr *name;
int namelen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)name;
        rin.r[2] = namelen;
        e = _kernel_swi(Bind, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

listen(s, backlog)
int s, backlog;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = backlog;
        e = _kernel_swi(Listen, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

int
accept(s, addr, addrlen)
int s;
struct sockaddr *addr;
int *addrlen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)addr;
        rin.r[2] = (int)addrlen;
        e = _kernel_swi(Accept, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

connect(s, name, namelen)
int s;
struct sockaddr *name;
int namelen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)name;
        rin.r[2] = namelen;
        e = _kernel_swi(Connect, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

sendto(s, msg, len, flag, to, tolen)
int     s;
char    *msg;
int     len, flag;
char    *to;
int     tolen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[2] = len;
        rin.r[3] = flag;
        rin.r[4] = (int)to;
        rin.r[5] = tolen;
        e = _kernel_swi(Sendto, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

send(s, msg, len, flag)
int s;
char *msg;
int len, flag;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[2] = len;
        rin.r[3] = flag;
        e = _kernel_swi(Send, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

sendmsg(s, msg, flag)
int s;
struct msghdr *msg;
int flag;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[2] = flag;
        e = _kernel_swi(Sendmsg, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}
        

recvfrom(s, buf, len, flags, from, fromlenaddr)
int     s;
char    *buf;
int     len, flags;
struct sockaddr *from;
int     *fromlenaddr;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)buf;
        rin.r[2] = len;
        rin.r[3] = flags;
        rin.r[4] = (int)from;
        rin.r[5] = (int)fromlenaddr;
        e = _kernel_swi(Recvfrom, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

recv(s, buf, len, flag)
int s;
char *buf;
int len, flag;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)buf;
        rin.r[2] = len;
        rin.r[3] = flag;
        e = _kernel_swi(Recv, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

recvmsg(s, msg, flags)
int s;
struct msghdr *msg;
int flags;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)msg;
        rin.r[3] = flags;
        e = _kernel_swi(Recvmsg, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

shutdown(s, how)
int s, how;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = how;
        e = _kernel_swi(Shutdown, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

setsockopt(s, level, optname, optval, optlen)
int s, level, optname;
char *optval;
int optlen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = level;
        rin.r[2] = optname;
        rin.r[3] = (int)optval;
        rin.r[4] = optlen;
        e = _kernel_swi(Setsockopt, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

getsockopt(s, level, optname, optval, optlen)
register int s, level, optname;
char *optval;
int *optlen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = level;
        rin.r[2] = optname;
        rin.r[3] = (int)optval;
        rin.r[4] = (int)optlen;
        e = _kernel_swi(Getsockopt, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

/*
 * Get socket name.
 */
getsockname(s, name, namelen)
int s;
struct sockaddr *name;
int *namelen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)name;
        rin.r[2] = (int)namelen;
        e = _kernel_swi(Getsockname, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

/*
 * Get name of peer for connected socket.
 */
getpeername(s, name, namelen)
int s;
char *name;
int *namelen;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)name;
        rin.r[2] = (int)namelen;
        e = _kernel_swi(Getpeername, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}
 
socketclose(d)
int d;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = d;
        e = _kernel_swi(Socketclose, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}
 
select(nfds, rfds, wfds, efds, tv)
int nfds, rfds, wfds, efds, tv;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = nfds;
        rin.r[1] = rfds;
        rin.r[2] = wfds;
        rin.r[3] = efds;
        rin.r[4] = tv;
        e = _kernel_swi(Socketselect, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

socketioctl(s, cmd, data)
int s, cmd;
char *data;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = cmd;
        rin.r[2] = (int)data;
        e = _kernel_swi(Socketioctl, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

socketread(s, buf, len)
int s;
char *buf;
int len;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)buf;
        rin.r[2] = len;
        e = _kernel_swi(Socketread, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

socketwrite(s, buf, len)
int s;
char *buf;
int len;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)buf;
        rin.r[2] = len;
        e = _kernel_swi(Socketwrite, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

socketwritev(s, iov, iovcnt)
int s;
struct iovec *iov;
int iovcnt;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)iov;
        rin.r[2] = iovcnt;
        e = _kernel_swi(Socketwritev, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

socketreadv(s, iov, iovcnt)
int s;
struct iovec *iov;
int iovcnt;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)iov;
        rin.r[2] = iovcnt;
        e = _kernel_swi(Socketreadv, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

socketstat(s, buf)
int s;
char *buf;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = (int)buf;
        e = _kernel_swi(Socketstat, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

getstablesize()
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = 0;
        e = _kernel_swi(Socketgettsize, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}
