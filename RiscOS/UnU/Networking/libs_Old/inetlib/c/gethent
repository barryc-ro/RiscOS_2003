/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@(#)gethostent.c        5.3 (Berkeley) 3/9/86";
#endif LIBC_SCCS and not lint

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ctype.h>

/*
 * Internet version.
 */
#define MAXALIASES      35
#define MAXADDRSIZE     14
#define LBUFSIZ         255

static char HOSTDB[] = "<InetDBase$Path>hosts";
static FILE *hostf = NULL;
static char hostaddr[MAXADDRSIZE];
static char line[LBUFSIZ+1];
static struct hostent host;
static char *host_aliases[MAXALIASES];
static char *host_addrs[2];
int     _host_stayopen;

static char *any();

sethostent(f)
        int f;
{
        if (hostf != NULL)
                rewind(hostf);
        else hostf = fopen(HOSTDB, "r");
        _host_stayopen |= f;
}

endhostent()
{
        if (hostf) {
                fclose(hostf);
                hostf = NULL;
        }
        _host_stayopen = 0;
}

struct hostent *
namisipadr(nam)
char *nam;
{
        u_long val;
        char **q;

        val = inet_addr(nam);
        if (val == -1)
                return (NULL);

        /*
         * ksr 22.9.92
         */
        host_addrs[0] = hostaddr;

        host.h_addr_list = host_addrs;
        *((u_long *)host.h_addr) = val;
        host.h_length = sizeof (u_long);
        host.h_addrtype = AF_INET;
        host.h_name = nam;
        q = host.h_aliases = host_aliases;
        *q = NULL;
        return (&host);
}

struct hostent *
gethostent()
{
        char *p;
        register char *cp, **q;

        if (hostf == NULL && (hostf = fopen(HOSTDB, "r" )) == NULL)
                return (NULL);
again:
        if ((p = fgets(line, LBUFSIZ, hostf)) == NULL)
                return (NULL);
        if (*p == '#')
                goto again;
        while (*p == ' ' || *p == '\t')
                p++;
        cp = any(p, "#\n");
        if (cp == NULL)
                goto again;
        *cp = '\0';
        cp = any(p, " \t");
        if (cp == NULL)
                goto again;
        *cp++ = '\0';
        /* THIS STUFF IS INTERNET SPECIFIC */

        /*
         * ksr 22.9.92
         */
        host_addrs[0] = hostaddr;

        host.h_addr_list = host_addrs;
        *((u_long *)host.h_addr) = inet_addr(p);
        host.h_length = sizeof (u_long);
        host.h_addrtype = AF_INET;
        while (*cp == ' ' || *cp == '\t')
                cp++;
        host.h_name = cp;
        q = host.h_aliases = host_aliases;
        cp = any(cp, " \t");
        if (cp != NULL) 
                *cp++ = '\0';
        while (cp && *cp) {
                if (*cp == ' ' || *cp == '\t') {
                        cp++;
                        continue;
                }
                if (q < &host_aliases[MAXALIASES - 1])
                        *q++ = cp;
                cp = any(cp, " \t");
                if (cp != NULL)
                        *cp++ = '\0';

        }
        *q = NULL;
        return (&host);
}

static char *
any(cp, match)
        register char *cp;
        char *match;
{
        register char *mp, c;

        while (c = *cp) {
                for (mp = match; *mp; mp++)
                        if (*mp == c)
                                return (cp);
                cp++;
        }
        return ((char *)0);
}
