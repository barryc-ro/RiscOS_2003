/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@(#)gethostnamadr.c     5.5 (Berkeley) 3/9/86";
#endif LIBC_SCCS and not lint

#include <stdio.h>
#include <netdb.h>
#include <ctype.h>
#include "kernel.h"

#define XDNS_GetHostByName 0x46000+0x20000

#ifndef RISCOS
#define MAXALIASES      35

static struct hostent host;
static char *host_aliases[MAXALIASES];
static char hostbuf[BUFSIZ+1];
static char *host_addrs[2];
#endif
static int _host_stayopen;

struct hostent *
gethostbyname(nam)
        register char *nam;
{
        register struct hostent *hp;
        register char **cp;
        struct hostent *namisipadr();
        _kernel_swi_regs r;
        _kernel_oserror *e;

        if ((hp = namisipadr(nam)) != (struct hostent *)0)
                return (hp);

        /* R.M. 2/93 added DNS support */

        r.r[0]=0; 
        r.r[1]=(int)nam;
        e=_kernel_swi(XDNS_GetHostByName,&r,&r);
        if (( e==NULL) && (r.r[1]!=0)) return (struct hostent *)r.r[1];
        if ((e != NULL) && (e->errnum!=0x1e6 /* SWI not known */))
           return (struct hostent *)0;
        sethostent(_host_stayopen);
        while (hp = gethostent()) {
                if (strcmp(hp->h_name, nam) == 0)
                        break;
                for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
                        if (strcmp(*cp, nam) == 0)
                                goto found;
        }
found:
        if (!_host_stayopen)
                endhostent();
        return (hp);
}

struct hostent *
gethostbyaddr(addr, length, type)
        char *addr;
        register int length;
        register int type;
{
        register struct hostent *hp;

        sethostent(_host_stayopen);
        while (hp = gethostent()) {
                if (hp->h_addrtype == type && hp->h_length == length
                    && bcmp(hp->h_addr, addr, length) == 0)
                                break;
        }
        if (!_host_stayopen)
                endhostent();
        return (hp);
}
