#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <ctype.h>

/* 
 * ?? ??? ??  ???   Created
 * 24-Jul-91  ???   Last modified
 * 28-Jul-94  AMcC  Skip Symbol file header if necessary (link 5.00 onwards)
 */

typedef struct Symbol {
    struct Symbol *next;
    int value;
    char name[1];
} Symbol;

Symbol *findsym(Symbol *l, char *name)
{
    while (l) {
        if (strcmp(l->name, name) == 0)
            return l;
        l = l->next;
    }
    return 0;
}

Symbol *getsym(FILE *f, int sym)
{
    char buff[256];
    unsigned n;
    int i, c;
    Symbol *s;

    c = fgetc(f);
    if (c == EOF) return 0;
    if (isspace(c)) {
        printf("symgen: Unexpected white space in symbols file\n");
        exit(1);
    }
    i = 0;
    do {
        buff[i++] = c;
        c = fgetc(f);
    } while (c != EOF && !isspace(c));
    buff[i++] = 0;
    s = malloc(offsetof(Symbol, name) + i);
    strcpy(s->name, buff);
    if (c == EOF) {
        printf("symgen: Unexpected end of symbols file\n");
        exit(1);
    }
    while (c == ' ') {
        c = fgetc(f);
    }
    if (c != '\n') {
        if (!sym) {
            printf("symgen: Trailing garbage at EOL\n");
            exit(1);
        }
        if (!isxdigit(c)) {
            printf("symgen: Hex digit expected\n");
            exit(1);
        }
        n = 0;
        do {
            if (isdigit(c))
                n = n * 16 + (c - '0');
            else
                n = n * 16 + ((c & 0xdf) - 'A' + 10);
            c = fgetc(f);
        } while (isxdigit(c));
        s->value = n;
        while (c != '\n') {
            if (c == EOF) {
                printf("symgen: Unexpected end of file\n");
                exit(1);
            }
            c = fgetc(f);
        }
    } else if (sym) {
        printf("symgen: Symbol value expected\n");
        exit(1);
    }
    return s;
}

int main(int argc, char **argv)
{
    FILE *ef, *sf, *of;
    Symbol *el, *sl, *l, *r;
    int errf;

    if (argc != 4) {
        printf("Usage: symgen <entry file> <symbol file> <output asm file>\n\n");
        printf("<entry file> is a list of required entry points (as produced by xtentries)\n");
        printf("<symbol file> is a symbol list as produced by the -sy flag on link 4.00\n");
        printf("<output asm file> is the output file to be processed by ObjAsm\n");
        exit(1);
    }

   /* open the Entries file - ef */
    ef = fopen(argv[1], "r");
    if (!ef) {
        printf("symgen: Error opening %s\n", argv[1]);
        exit(1);
    }

   /* open the Symbols file - sf */
    sf = fopen(argv[2], "r");
    if (!sf) {
        printf("symgen: Error opening %s\n", argv[2]);
        exit(1);
    }
   /* skip the Symbol file header if necessary (Link 5.00 onwards) */
    fscanf(sf, "\nSymbol Table\n\n");

   /* open the output file - of */
    of = fopen(argv[3], "w");
    if (!of) {
        printf("symgen: Error opening %s\n", argv[3]);
        exit(1);
    }

   /* create a linked list of Entries - el */
    el = 0;
    while ((l = getsym(ef, 0)) != NULL) {
        if (!findsym(el, l->name)) {
            l->next = el;
            el = l;
        }
    }

   /* finished reading the Entries - close the file */
    if (fclose(ef)) {
        printf("symgen: Error reading %s\n", argv[1]);
        exit(1);
    }

   /* create a linked list of Symbols - sl */
    sl = 0;
    while ((l = getsym(sf, 1)) != NULL) {
        l->next = sl;
        sl = l;
    }

   /* finished reading the Symbols - close the file */
    if (fclose(sf)) {
        printf("symgen: Error reading %s\n", argv[2]);
        exit(1);
    }

  /* point to the head of the Entries list */
    l = el;
    errf = 0;
    fprintf(of, " AREA AbsSyms, CODE\n");
    while (l) {
        r = findsym(sl, l->name);  /* look for the Entry in the Symbols list */
        if (!r) {
            printf("symgen: *** Symbol %s not found\n", l->name);
            errf = 1;
        } else {
            fprintf(of, "|%s| * &%x\n", r->name, r->value);
            fprintf(of, " EXPORT |%s|\n", r->name);
        }
        l = l->next;
    }
    fprintf(of, " END\n");
    if (fclose(of)) {
        printf("symgen: Error writing %s\n", argv[3]);
        exit(1);
    }
    exit(errf);
}
