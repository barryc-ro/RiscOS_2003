/* -*-c-*- */

/* http.c */

/*
 * The HTTP module provides a mechanism for sending requests and
 * fetching results using the HyperText Transfer Protocol.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "tcplibs.h"

#define HOSTSTRING 0
#include "http.h"

#include "mimemap.h"

/**********************************************************************/
/*
 * Global definitions
 */

#ifndef DEBUG
#define DEBUG 0
#endif

#ifndef TESTMODE
#define TESTMODE 0
#endif

/**********************************************************************/
/*
 * Error definitions
 */

/* Error definitions */
typedef enum {
    err_NO_SUCH_HOST,
    err_CANT_FIND_SERVICE,
    err_CANT_FIND_PROTOCOL,
    err_CANT_MAKE_SOCKET,
    err_CANT_CONNECT,
    err_BAD_IOCTL,
    err_NO_MEMORY,
    err_BAD_MAGIC,
    err_CANT_OPEN_FILE,

    err_LAST_ERROR
    } error_numbers;

static char *err_strings[] = {
    "Can't find host in database",
    "Can't find service in database",
    "Can't find protocol in database",
    "Can't make socket",
    "Can't connect to server",
    "Bad IOCTL call",
    "Not enough free memory",
    "Invalid connection handle",
    "Can't open output file",

    "Unknown error"
    };

/**********************************************************************/
/*
 * Global variable definitions
 */

void *private_word;

fd_set fd_read, fd_write;

http_connection *http_cons[FD_SETSIZE];	/* Array of pointers */

http_connection *http_cons_list;

volatile int tick_pending, data_pending, callback_pending;

static int sockets_connecting;	/* Count of sockets in the process of connection (i.e. still need to be polled) */

#define TMP_BUF_SIZE	1024
char tmp_buffer[TMP_BUF_SIZE];

static char http_version[] = HTTP_VERSION;

/**********************************************************************/
/*
 * Forward declarations of functions static to this file
 */

static _kernel_oserror *setup_ticker_and_event(void);
static void clear_ticker_and_event(void);
static void setup_callback(void);
static void clear_callback(void);

/**********************************************************************/
/*
 * This structure is a prototype for a connection.
 */
static http_connection proto_con = {
    HTTP_MAGIC,			/* Magic number */
    NULL,			/* Next pointer */
    NULL,			/* Prev pointerb */
    0,				/* Poll word */
    status_NEW,			/* Status */
    NULL,			/* Object name */
    NULL,			/* Outgoing headers */
    -1,				/* Socket number */
    { 0, },			/* Socket address */
    NULL,			/* File name */
    NULL,			/* File handle */
    -1,				/* Data size */
    -1,				/* Data so far */
    NULL,			/* List of fetched headers */
    -1,				/* Return code */
    NULL,			/* Return message */
    0,				/* Buffer offset */
    0,				/* Buffer used */
    { 0 }			/* Buffer data */
    };

/**********************************************************************/
/*
 * The bcmp and bzero functions are needed by various internet library
 * calls.  I just pass them through to the memXXX versions.
 */

int bcmp(void *s1, void *s2, size_t s)
{
    return memcmp(s1, s2, s);
}

void bzero(void *p, int s)
{
    memset(p, 0, s);	
}

#ifdef NEED_OWN_GETHOSTBYNAME
/**********************************************************************/
/*
 * This is a copy of the gethostbyname code that works!
 */

#define	MAXALIASES	35
#define	MAXADDRS	35

static char *h_addr_ptrs[MAXADDRS + 1];

static struct hostent host;
static char *host_aliases[MAXALIASES];
static char hostbuf[BUFSIZ+1];
#if 0
static struct in_addr host_addr;
#endif
static FILE *hostf = NULL;
static char hostaddr[MAXADDRS];
static char *host_addrs[2];
static int stayopen = 0;

#define _PATH_HOSTS	"<InetDBase$Path>Hosts"

static void _sethtent(int f)
{
	if (hostf == NULL)
		hostf = fopen(_PATH_HOSTS, "r" );
	else
		rewind(hostf);
	stayopen |= f;
}

static void _endhtent(void)
{
	if (hostf && !stayopen) {
		(void) fclose(hostf);
		hostf = NULL;
	}
}

static struct hostent *_gethtent(void)
{
	char *p;
	register char *cp, **q;

	if (hostf == NULL && (hostf = fopen(_PATH_HOSTS, "r" )) == NULL)
		return (NULL);
again:
	if ((p = fgets(hostbuf, BUFSIZ, hostf)) == NULL)
		return (NULL);
	if (*p == '#')
		goto again;
	cp = strpbrk(p, "#\n");
	if (cp == NULL)
		goto again;
	*cp = '\0';
	cp = strpbrk(p, " \t");
	if (cp == NULL)
		goto again;
	*cp++ = '\0';
	/* THIS STUFF IS INTERNET SPECIFIC */
	host.h_addr_list = host_addrs;
	host.h_addr = hostaddr;
	*((u_long *)host.h_addr) = inet_addr(p);
	host.h_length = sizeof (u_long);
	host.h_addrtype = AF_INET;
	while (*cp == ' ' || *cp == '\t')
		cp++;
	host.h_name = cp;
	q = host.h_aliases = host_aliases;
	cp = strpbrk(cp, " \t");
	if (cp != NULL) 
		*cp++ = '\0';
	while (cp && *cp) {
		if (*cp == ' ' || *cp == '\t') {
			cp++;
			continue;
		}
		if (q < &host_aliases[MAXALIASES - 1])
			*q++ = cp;
		cp = strpbrk(cp, " \t");
		if (cp != NULL)
			*cp++ = '\0';
	}
	*q = NULL;
	return (&host);
}

#if 0
static struct hostent *_gethtbyaddr(char *addr, int len, int type)
{
    register struct hostent *p;

    _sethtent(0);
    while ((p = _gethtent()) != 0)
    {
	if (p->h_addrtype == type && !bcmp(p->h_addr, addr, len))
	    break;
    }
    _endhtent();
    return (p);
}
#endif

static struct hostent *_gethtbyname(char *name)
{
    register struct hostent *p;

    _sethtent(0);
    while ((p = _gethtent()) != 0 )
    {
	char **q = p->h_aliases;
	int hit = 0;

#if DEBUG && 0
	fprintf(stderr, "%s\n", p->h_name);
#endif
	if (strcmp(p->h_name, name) == 0)
	    break;

	while (*q)
	{
#if DEBUG && 0
	fprintf(stderr, "%s\n", *q);
#endif
	    if (strcmp(*q, name) == 0)
	    {
		hit = 1;
		break;
	    }
	    q++;
	}
	if (hit)
	    break;
    }
    _endhtent();

#if DEBUG && 0
	fprintf(stderr, "gethostbyname returns %p\n", p);
#endif

    return (p);
}
#endif /* NEED_OWN_GETHOSTBYADDR */

/**********************************************************************/
/*
 * Error generation function
 */

static _kernel_oserror *make_error(int err)
{
    static _kernel_oserror e;

    if (err > err_LAST_ERROR)
	err = err_LAST_ERROR;
    
    e.errnum = err;
    strncpy(e.errmess, err_strings[err], 252);
    
#if DEBUG
    printf("Making error number %d: %s\n", err, err_strings[err]);
#endif

    return &e;
}

/**********************************************************************/
/*
 * Module finalisation function
 */
static void module_final(void)
{
    http_connection *c, *next_one;

#if TESTMODE
    printf("Module finalisation called\n");
#endif

    clear_ticker_and_event();

    clear_callback();

    for (c = http_cons_list; c != NULL; c = next_one)
    {
	next_one = c->next;
#if DEBUG
	fprintf(stderr, "Closeing connection at %p on socket %d\n", c, c->socket);
#endif
	http_close_handle(c, http_close_DELETE_FILE);
    }
}

/**********************************************************************/
/*
 * Module initialisation function
 */
extern _kernel_oserror *module_initialise(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror *ep;

    private_word = pw;

#if TESTMODE
    printf("Module initialisation called.\n");
#endif

    FD_ZERO(&fd_read);

    bzero(http_cons, sizeof(http_cons));
    http_cons_list = NULL;

    tick_pending = data_pending = callback_pending = 0;
    sockets_connecting = 0;

    ep = setup_ticker_and_event();
    if (ep)
	goto err;

    atexit(&module_final);
    
    return 0;

 err:
    return ep;
    
    UNUSED(cmd_tail);
    UNUSED(pbase);
}

/**********************************************************************/
/*
 * Module CLI handler function
 */
extern _kernel_oserror *module_cli_handler(char *arg_string, int arg_count, unsigned int cmd_no, void *pw)
{
    http_connection *c;

#if DEBUG
    printf("CLI handler called, command number %d\n", cmd_no);
#endif

    switch(cmd_no)
    {
    case 0:
	printf("HTTP support module status information\n");
	
	if (http_cons_list)
	{
	    for (c = http_cons_list; c != NULL; c = c->next)
	    {
		printf("Connection at %p on socket %d, status = %d, data fetched = %d/%d, file name = '%s', rc = %d, message = '%s'\n",
		       c, c->socket, c->status,
		       c->data_so_far, c->data_size,
		       c->fname ? c->fname : "<garbage>",
		       c->rc,
		       c->message ? c->message : "<none>" );
	    }
	}
	else
	{
	    printf("No current connections\n");
	}
	break;
    }
    
    return 0;
    
    UNUSED(arg_string);
    UNUSED(arg_count);
    UNUSED(pw);
}

/**********************************************************************/
/*
 * Module SWI handler function
 */
extern _kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *regs, void *pw)
{
    _kernel_oserror *ep;
    http_connection *c;

#if DEBUG
    printf("SWI handler called, SWI number 0x%02x\n", swinum);
#endif

    switch(swinum)
    {
    case 0:
	/* Open */
	/* Entry:
	 * r0 = pointer to host name (or dotted IP address)
	 * r1 = pointer to port name (or number)
	 * r2 = pointer to object to fetch
	 * r3 = pointer to linked list of header lines (must not be freed until the data transfer starts)
	 * r4 = pointer to file name for data (or NULL to be given one)
	 * Exit:
	 * r0 = connection handle
	 */
#if HOSTSTRING
	return http_open((char *) regs->r[0],
			 (char *) regs->r[1],
			 (char *) regs->r[2],
			 (http_header_item *) regs->r[3],
			 (char *) regs->r[4],
			 (http_connection **) &regs->r[0] );	   
#else
	return http_open(regs->r[0],
			 regs->r[1],
			 (char *) regs->r[2],
			 (http_header_item *) regs->r[3],
			 (char *) regs->r[4],
			 (http_connection **) &regs->r[0] );	   
#endif
	break;
    case 1:
	/* Status */
	/* Entry:
	 * r0 = connection handle
	 * Exit:
	 * ???
	 */
	c = (http_connection *) regs->r[0];
	ep = http_check_handle(c);
	if (ep)
	    return ep;

	regs->r[0] = c->status ;
	regs->r[1] = (int) &(c->poll_word) ;
	regs->r[2] = (int) c->fname ;
	regs->r[3] = c->data_size ;
	regs->r[4] = c->data_so_far ;
	regs->r[5] = (int) c->headers ;
	regs->r[6] = (int) c->rc ;
	regs->r[7] = (int) c->message ;

	return NULL;
	break;
    case 2:
	/* Close */
	/* Entry:
	 * r0 = connection handle
	 * r1 =  flags
	 */
	c = (http_connection *) regs->r[0];
	ep = http_check_handle(c);
	if (ep)
	    return ep;
	return http_close_handle(c, regs->r[1]);
	break;
    case 3:
	regs->r[0] = mime_map_to_riscos((char *) regs->r[0]);
	return NULL;
	break;
    case 4:
	regs->r[0] = (int) mime_map_from_riscos(regs->r[0]);
	return NULL;
	break;
    case 5:
	/* SetFileType */
	/* Entry:
	 * r0 = connection handle
	 * r1 =  flags
	 */
	c = (http_connection *) regs->r[0];
	ep = http_check_handle(c);
	if (ep)
	    return ep;
	return http_set_file_type(c);
	break;
    }
    
    return NULL;
    
    UNUSED(pw);
}

/**********************************************************************/
/*
 * A function to handle the internet events.
 */
extern int inetevent_handler(_kernel_swi_regs *regs, void *pw)
{
    if (regs->r[0] == Internet_Event)
    {
	if ( FD_ISSET(regs->r[2], &fd_read))
	{
	    /* take some action */
	    data_pending = 1;
	    setup_callback();
	}
    }
    
    return VIA_R14;
    
    UNUSED(pw);
}

int timer_handler( _kernel_swi_regs *r, void *pw )
{
    tick_pending = 1;
    setup_callback();

    return VIA_R14;
}

/**********************************************************************/
/*
 * A function to handle the callbacks caused by internet events.
 */
extern int callback_handler(_kernel_swi_regs *regs, void *pw)
{
    char *l;
    int max_sock = 0;
    int i;

#if DEBUG && 0
    printf("Callback handler entered\n");
#endif

    /*	@@@@ N.B. There is potentially a race state around here.  If the callback pending
     *	flag gets cleared before the select call then there can be a spurious callback
     *	that has nothing to do.  If the flag gets cleared after the call then there is
     *	a small chance that the module will miss data.  Since the cost of an extra callback
     *	is not great we err on the safe side.
     */
    callback_pending = 0;
    
    if (tick_pending)
    {
	int i;

	if (sockets_connecting)
	{
	    for(i=0; i<FD_SETSIZE; i++)
	    {
		http_connection *c = http_cons[i];
		if (c)
		{
		    int rc;

		    if (c->status == status_CONNECTING)
		    {
#if DEBUG
			fprintf(stderr, "Trying another connect of %d\n", c->socket);
#endif
			rc = connect(c->socket, (struct sockaddr *) &(c->sa), sizeof(struct sockaddr));
			
			if (rc > -1)
			{
			    /* This should not happen, but we will catch it anyway */
			    c->status = status_REQUESTING;
			}
			else
			{
			    switch(errno)
			    {
			    case EISCONN:
				/* The connection is through now */
				c->status = status_REQUESTING;
				break;
			    case EALREADY:
				/* The connection is still going through */
				/* Do nothing */
				break;
			    default:
				/* The connection failed */
				c->status = status_CONNECT_FAILED;
				if (c->fh)
				{
				    fclose(c->fh);
				    c->fh = NULL;
				}
				break;
			    }
			}
		    }

		    if (c->status == status_REQUESTING)
		    {
			http_send_request(c);
		    }

		    rc = 0;

		    while (c->status == status_REQUEST_HEADERS && rc != EWOULDBLOCK)
		    {
			rc = http_send_request_headers(c);
		    }
		}
	    }
	}

	tick_pending = 0;
    }

    for (i = 0; i < FD_SETSIZE; i++)
    {
	if ( FD_ISSET(i, &fd_read) || FD_ISSET(i, &fd_write) )
	{
	    max_sock = i + 1;
	}
    }
    
    if (data_pending  || max_sock )
    {
	fd_set fd_read_tmp, fd_write_tmp, fd_excep_tmp;
	int n;
	struct timeval tv = {0};
	
	/* This function gets called when there has been an event on a socket */

	data_pending = 0;
	
	memcpy(&fd_read_tmp, &fd_read, sizeof(fd_set));
	memcpy(&fd_write_tmp, &fd_write, sizeof(fd_set));
	memcpy(&fd_excep_tmp, &fd_read, sizeof(fd_set));
	
	n = select(max_sock, &fd_read_tmp, &fd_write_tmp, &fd_excep_tmp, &tv);
	
#if DEBUG
	if (n)
	    fprintf(stderr, "Select gave a result of %d (errno = %d)\n", n, errno);
#endif
	
	if (n > 0)
	{
	    for( i = 0; i < FD_SETSIZE; i++)
	    {
		if (FD_ISSET(i, &fd_read_tmp) || FD_ISSET(i, &fd_write_tmp) || FD_ISSET(i, &fd_excep_tmp))
		{
		    http_connection *c = http_cons[i];

		    if (c == 0)
		    {
			/* This should not happen, try to patch things up */
			FD_CLR(i, &fd_read);
			FD_CLR(i, &fd_write);
#if DEBUG
			fprintf(stderr, "Socket %i spuriously in fd_sets, now removed\n", i);
#endif
		    }
		    else
		    {
			int rc;

			switch (c->status)
			{
			case status_REQUEST_HEADERS:
			    break;
			case status_WAITING:
			    /* Expecting a response line */
			    l = http_getline(c, 1); /* Get the next lline, doing a read */
			    if (l)
			    {
				http_process_response_line(c, l);

				l = http_getline(c, 0);
				while (l && c->status == status_GETTING_HEADERS)
				{
				    http_process_header_line(c, l);
				    if (c->status == status_GETTING_HEADERS)
					l = http_getline(c, 0);
				}
				if (c->status == status_GETTING_BODY)
				{
				    http_flush_data_to_file(c);
				}
			    }
			    break;
			case status_GETTING_HEADERS:
			    l = http_getline(c, 1);
			    while (l && c->status == status_GETTING_HEADERS)
			    {
				http_process_header_line(c, l);
				if (c->status == status_GETTING_HEADERS)
				    l = http_getline(c, 0);
			    }
			    if (c->status == status_GETTING_BODY)
			    {
				http_flush_data_to_file(c);
			    }
			    break;
			case status_GETTING_BODY:
			    while (1)
			    {
				rc = recv(c->socket, tmp_buffer, TMP_BUF_SIZE, 0);
				if (rc <= 0)
				{
				    if (rc == 0 || errno != EWOULDBLOCK)
				    {
					c->status = status_COMPLEATED;
					if (c->fh)
					{
					    fclose(c->fh);
					    c->fh = NULL;
					}
				    }

				    break; /* NOTE:  This is a break for the WHILE loop, not the switch() */
				}
				else
				{
				    c->data_so_far += rc;
				    if (c->fh)
					fwrite(tmp_buffer, rc, 1, c->fh);
				}
			    }
			    break;
			default:
			    break;
			}
			if (c->status == status_CONNECT_FAILED ||
			    c->status == status_REQUEST_FAILED ||
			    c->status == status_COMPLEATED)
			{
			    http_socket_close(c);
			}
		    }
		    
		    n--;
		}	
	    }
#if DEBUG
	    if (n != 0)
		fprintf(stderr, "%d unknown select items\n", n);
#endif
	}

    }	

    return VIA_R14;
    
    UNUSED(pw);
}

_kernel_oserror *http_check_handle(http_connection *c)
{
    if (c == NULL || c->magic != HTTP_MAGIC)
    {
	return make_error(err_BAD_MAGIC);
    }

    return 0;
}

_kernel_oserror *http_set_file_type(http_connection *c)
{
    if (c->fname)
    {
	http_header_item *hi;
	
	for (hi = c->headers; hi != NULL; hi = hi->next)
	{
	    if (strcasecmp(hi->key, "CONTENT-TYPE") == 0)
	    {
		int ft;
		
		ft = mime_map_to_riscos(hi->value);
		if (ft != -1)
		{
		    _kernel_osfile_block fb;
#if DEBUG
		    fprintf(stderr, "Setting file type of '%s' to 0x%03X\n", c->fname, ft);
#endif
		    fb.load = ft;
		    _kernel_osfile(18, c->fname, &fb);
		}
		break;
	    }
	}
    }
    return NULL;
}

_kernel_oserror *http_close_handle(http_connection *c, int flags)
{
    /* Note that we do NOT free the outgoing headers because we don't know where they came from */
#if DEBUG
    fprintf(stderr, "Closing the connection at %p\n", c);
#endif

    http_cons[c->socket] = NULL;

    if (c->fh != NULL)
    {
#if DEBUG
	fprintf(stderr, "Closing file\n");
#endif
	fclose(c->fh);
    }

    /* Do this one first in case someone is stupid enough to set the type and then delete */
    if (flags & http_close_SET_TYPE)
    {
	http_set_file_type(c);
    }

    if (flags & http_close_DELETE_FILE)
    {
	if (c->fname)
	{
#if DEBUG
	    fprintf(stderr, "Removing file '%s'\n", c->fname);
#endif
	    remove(c->fname);
	}
    }

    http_socket_close(c);	/* This does its own check for the validity of the socket number */

    if (c->fname)
    {
#if DEBUG
	    fprintf(stderr, "Freeing file name\n");
#endif
	free(c->fname);
    }

    if (c->message)
    {
#if DEBUG
	    fprintf(stderr, "Freeing message string\n");
#endif
	free(c->message);
    }

    if (c->object)
    {
#if DEBUG
	fprintf(stderr, "Freeing object name\n");
#endif
	free(c->object);
    }

    http_free_headers(c->headers); /* The function does its own check for NULL pointers */

    /* Finally, zap the magic number */
    c->magic = 0;

#if DEBUG
    fprintf(stderr, "Unlinking from list\n");
#endif
    if (c->prev == NULL)
	http_cons_list = c->next;
    else
	c->prev->next = c->next;

    if (c->next != NULL)
	c->next->prev = c->prev;

#if DEBUG
    fprintf(stderr, "Freeing connection structure\n");
#endif
    free(c);

#if DEBUG
    fprintf(stderr, "Connection closed.\n");
#endif

    return 0;
}

_kernel_oserror *http_free_headers(http_header_item *h)
{
    http_header_item *hn;

    while(h != NULL)
    {
	hn = h->next;
#if DEBUG
	    fprintf(stderr, "Freeing header line\n");
#endif
	free(h);
	h = hn;
    }

    return NULL;
}

#if HOSTSTRING
_kernel_oserror *http_open(char *host, char *port, char *object, http_header_item *headers, char *fname, http_connection **result)
#else
_kernel_oserror *http_open(int host, int port, char *object, http_header_item *headers, char *fname, http_connection **result)
#endif
{
    http_connection *new;
#if HOSTSTRING
    struct hostent *hp;
    struct servent *sp;
#endif
    int i;
    int rc;

#if DEBUG
#if HOSTSTRING
    fprintf(stderr, "Opening new conection.  Host = '%s', port = '%s', object = '%s', fname = '%s'.\n\tHeaders stored at %p\n",
	    host, port ? port : "", object, fname ? fname : "", headers);
#else
    fprintf(stderr, "Opening new conection.  Host = 0x%08x, port = 0x%04x, object = '%s', fname = '%s'.\n\tHeaders stored at %p\n",
	    host, port, object, fname ? fname : "", headers);
#endif
#endif

    *result = NULL;

    new = malloc(sizeof(http_connection));
    if (new == 0)
	return make_error(err_NO_MEMORY);

    *new = proto_con;		/* Fill in with a prototype connection */


#if HOSTSTRING
#if DEBUG
    fprintf(stderr, "Looking up the name '%s'\n", host);
#endif

#ifdef NEED_OWN_GETHOSTBYNAME
    if ((hp = _gethtbyname(host)) == NULL)
#else
    if ((hp = gethostbyname(host)) == NULL)
#endif
    {
	static struct hostent h_ent;
	static char *has[1];
	static unsigned long hostaddr;

	h_ent.h_addr_list = has;
	h_ent.h_addr = (char*) &hostaddr;

#if DEBUG
	fprintf(stderr, "Scanning '%s' as an IP address\n", host);
	fflush(stderr);
#endif

	if (isdigit(host[0]))
	{
	    *((u_long *)h_ent.h_addr) = inet_addr(host);

	    h_ent.h_length = 4;
	    h_ent.h_addrtype = AF_INET;
	    hp = &h_ent;
	}
	else
	{
	    return make_error(err_NO_SUCH_HOST);
	}
    }

#if DEBUG
    fprintf(stderr, "Host is %d.%d.%d.%d\n",
	    ((unsigned char *) hp->h_addr)[0],
	    ((unsigned char *) hp->h_addr)[1],
	    ((unsigned char *) hp->h_addr)[2],
	    ((unsigned char *) hp->h_addr)[3] );
#endif
        
    memcpy((char *)&(new->sa.sin_addr),(char *) hp->h_addr,  hp->h_length);
    new->sa.sin_family = hp->h_addrtype;
    
    /* Port can be a NULL string, an ASCII number or a service from the services file */

    if ( (port == NULL) || (*port == 0) )
    {
	new->sa.sin_port = htons(HTTP_PORT);
    }
    else if ((i = atoi(port)) != 0)
    {
	new->sa.sin_port = htons(i);
    }
    else if ( ( sp = getservbyname(port, "tcp") ) == NULL)
    {
	return make_error(err_CANT_FIND_SERVICE);
    }
    else
    {
	new->sa.sin_port = sp->s_port;
    }
        
#if DEBUG
    fprintf(stderr, "Using port %d\n", ntohs(new->sa.sin_port) );
#endif

#else /* HOSTSTRING */
    memcpy((char *)&(new->sa.sin_addr),(char *) &host,  sizeof(host) );
    new->sa.sin_family = AF_INET;    
    new->sa.sin_port = port;    
#endif

    if ( (new->socket = socket(AF_INET, SOCK_STREAM, 0)) <0)
    {
	return make_error(err_CANT_MAKE_SOCKET);
    }

#if DEBUG
    fprintf(stderr, "New socket is %d\n", new->socket);
#endif	

    i = 1;
    rc = socketioctl(new->socket, FIONBIO, &i);
    if (rc == -1)
	return make_error(err_BAD_IOCTL);

    i = 1;
    rc = socketioctl(new->socket, FIOASYNC, &i);
    if (rc == -1)
	return make_error(err_BAD_IOCTL);

#if DEBUG
    fprintf(stderr, "About to connect...");
#endif	

    rc = connect(new->socket, (struct sockaddr *) &(new->sa), sizeof(struct sockaddr));

/*
 * Legal return values are:
 *	36	EINPROGRESS	The connection process has been started but no result as yet.
 *	22	EINVAL		The connection process failed, either due to a timeout or a rejection.
 *	37	EALREADY	The connection process is still going on and may yet finnish.
 *	56	EISCONN		The connection process succeded and we are now connected.
 */

    if (rc < 0 && errno != EINPROGRESS)
    {
	return make_error(err_CANT_CONNECT);
    }

#if DEBUG
    fprintf(stderr, "Connect rc = %d, error number %d\n", rc, errno);
#endif	

/*
 * The connection process may take a little time.  So we go off and make
 * the data file and come back in a moment to check if we are done.
 */

    new->object = strdup(object);
    if (new->object == NULL)
    {
	return make_error(err_NO_MEMORY);
    }

    new->sendhead = headers;

    if (fname == NULL)
    {
	fname = tmpnam(NULL);
    }

    new->fname = strdup(fname);
    if (new->fname == NULL)
    {
	return make_error(err_NO_MEMORY);
    }

#if DEBUG
    fprintf(stderr, "Opening file '%s'\n", new->fname);
#endif

    new->fh = fopen(new->fname, "wb");
    if (new->fh == NULL)
    {
	return make_error(err_CANT_OPEN_FILE);
    }

    rc = connect(new->socket, (struct sockaddr *) &(new->sa), sizeof(struct sockaddr));
    /* What do we do if this call succeeds?  I guess we just leave it */
    if (rc < 0)
    {
	switch (errno)
	{
	case EISCONN:
	    new->status = status_REQUESTING;
	    break;
	case EALREADY:
	    new->status = status_CONNECTING;
	    sockets_connecting++;
	    break;
	default:
	    return make_error(err_CANT_CONNECT);
	    break;
	}
    }
    else
    {
	new->status = status_REQUESTING;
    }

    /* Get this in before we send anything */
    http_cons[new->socket] = new;

    FD_SET(new->socket, &fd_write);

#if DEBUG
    fprintf(stderr, "ISSET: %ld %ld\n", FD_ISSET(new->socket, &fd_read), FD_ISSET(new->socket, &fd_write) );
#endif

    if (new->status == status_REQUESTING)
    {
	http_send_request(new);
    }

    rc = 0;

    while (new->status == status_REQUEST_HEADERS && rc != EWOULDBLOCK)
    {	
	rc = http_send_request_headers(new);
    }
    
    new->next = http_cons_list;
    /* new->prev is set to NULL in the prototype */

    if (http_cons_list)
	http_cons_list->prev = new;
    http_cons_list = new;

    *result = new;
    return NULL;
}

static _kernel_oserror *setup_ticker_and_event(void)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    r.r[0] = 0x10;
    r.r[1] = (int) &inetevent_entry;
    r.r[2] = (int) private_word;
    
    ep = _kernel_swi(XOS_Bit + OS_Claim, &r, &r);

    if (ep)
	return ep;
    
    _kernel_osbyte(14, Event_Internet, 0);

    r.r[0] = TICKER_RATE;
    r.r[1] = (int) timer_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(OS_CallEvery, &r, &r);

    if (ep)
    {
	clear_ticker_and_event();
	return ep;
    }

    return NULL;
}

static void clear_ticker_and_event(void)
{
    _kernel_swi_regs r;

    _kernel_osbyte(13, Event_Internet, 0);
    
    r.r[0] = 0x10;
    r.r[1] = (int) inetevent_entry;
    r.r[2] = (int) private_word;
    
    _kernel_swi(OS_Release, &r, &r);

    r.r[0] = (int) timer_entry;
    r.r[1] = (int) private_word;
    
    _kernel_swi(OS_RemoveTickerEvent, &r, &r);
}

static void setup_callback(void)
{
    if (callback_pending == 0)
    {
	_kernel_swi_regs r;

	r.r[0] = (int) &callback_entry;
	r.r[1] = (int) private_word;
	callback_pending = 1;
	    
	_kernel_swi(OS_AddCallBack, &r, &r);
    }
}

static void clear_callback(void)
{
    if (callback_pending)
    {
	_kernel_swi_regs r;
	
	r.r[0] = (int) &callback_entry;
	r.r[1] = (int) private_word;

	callback_pending = 0;
	_kernel_swi(OS_RemoveCallBack, &r, &r);
    }
}

char *strdup(char *s)
{
    char *ss;

    ss = malloc(strlen(s) + 1);

    if (ss)
	strcpy(ss, s);

    return ss;
}

void http_send_request(http_connection *c)
{
    sprintf(tmp_buffer, "%s %s %s\r\n", "GET", c->object, http_version);
#if DEBUG
    /* You dont want a \n on this printf */
    fprintf(stderr, "Sending request: %s", tmp_buffer);
#endif
    if (send(c->socket, tmp_buffer, strlen(tmp_buffer), 0) < 0)
    {
	c->status = status_REQUEST_FAILED;
	if (c->fh)
	{
	    fclose(c->fh);
	    c->fh = NULL;
	}
    }
    else
    {
	c->status = status_REQUEST_HEADERS;
    }
}

/* Returns 0 is a line was sent or the connection died, EWOULDBLOCK if it would block */
int http_send_request_headers(http_connection *c)
{
    if (c->sendhead)
	sprintf(tmp_buffer, "%s: %s\r\n", c->sendhead->key, c->sendhead->value);
    else
	strcpy(tmp_buffer, "\r\n");

#if DEBUG
    /* You dont want a \n on this printf */
    fprintf(stderr, "Sending header: %s", tmp_buffer);
#endif

    if (send(c->socket, tmp_buffer, strlen(tmp_buffer), 0) < 0)
    {
	if (errno != EWOULDBLOCK)
	{
	    c->status = status_REQUEST_FAILED;
	    if (c->fh)
	    {
		fclose(c->fh);
		c->fh = NULL;
	    }
	}
	else
	{
	    /* If it would block then just return */
	    return EWOULDBLOCK;
	}
    }
    else
    {
	if (c->sendhead)
	    c->sendhead = c->sendhead->next;
	else
	{
	    shutdown(c->socket, 1);
	    c->status = status_WAITING;
	    FD_CLR(c->socket, &fd_write);
	    FD_SET(c->socket, &fd_read);
	}
    }

    return 0;
}

/*
 * Read some more data from the line and return the next line of data
 */
char* http_getline(http_connection *c, int read)
{
    char *end;

    if (c->buf_used)
    {
	memmove(c->buffer, c->buffer + c->buf_used, c->buf_off - c->buf_used);
	c->buf_off -= c->buf_used;
	c->buf_used = 0;
    }

    if (read)
    {
	int rc;
	rc = recv(c->socket, c->buffer + c->buf_off, MAX_INPUT - c->buf_off, 0);
	if (rc < 0)
	{
	    if (errno != EWOULDBLOCK)
	    {
		c->status = status_REQUEST_FAILED;
		if (c->fh)
		{
		    fclose(c->fh);
		    c->fh = NULL;
		}
		return NULL;
	    }
	}
	else
	{
	    c->buf_off += rc;
	    c->buffer[c->buf_off] = 0; /* Make use we always have a NULL at the end */
	}
    }

    end = strchr(c->buffer, '\n');

    if (end)
    {
	c->buf_used = (end - c->buffer) + 1;
	if (end[-1] == '\r')
	    end[-1] = 0;
	end[0] = 0;
	return c->buffer;
    }
    
    return NULL;
}

void http_process_header_line(http_connection *c, char *l)
{
    char *p;
#if DEBUG
    fprintf(stderr, "Received: '%s'\n", l);
#endif
    if (strlen(l) == 0)
    {
	c->status = status_GETTING_BODY;
    }
    else
    {
	/* Try to split the the header line */
	p = strchr(l, ':');
	if (p != 0)
	{
	    http_header_item *hi;
	    
	    *p = 0;
	    while (isspace(*(++p)))
		;
	    hi = malloc(sizeof(http_header_item));
	    if (hi)
	    {
		hi->key = strdup(l);
		hi->value = strdup(p); 
		
		if (hi->key == NULL || hi->value == NULL)
		{
		    if (hi->key)
			free(hi->key);
		    if (hi->value)
			free(hi->value);
		}
	    }
	    
	    if (hi)
	    {
		hi->next = c->headers;
		c->headers = hi;
	    }
	    
	    http_check_special_headers(c, hi);
	}
	else
	{
#if DEBUG
	    fprintf(stderr, "Badly formed header line, no ':'\n");
#endif
	}
    }    
}

void http_process_response_line(http_connection *c, char *l)
{
#if DEBUG
    fprintf(stderr, "Recieved: '%s'\n", l);
#endif				
    if (strncmp(l, http_version, strlen(http_version)) == 0)
    {
	char *p;
	
	p = l + strlen(http_version);
	while (isspace(*(++p)))
	    ;
	c->rc = atoi(p);
	p += 2;
	while (isspace(*(++p)))
	    ;
	c->message = strdup(p);
#if DEBUG
	fprintf(stderr, "Response: %d '%s'\n", c->rc, c->message ? c->message : "<no message>");
#endif
	c->status = status_GETTING_HEADERS;
    }
    else
    {
#if DEBUG
	fprintf(stderr, "Badly formed response line\n");
#endif
	c->status = status_REQUEST_FAILED;
	if (c->fh)
	{
	    fclose(c->fh);
	    c->fh = NULL;
	}
    }    
}

void http_flush_data_to_file(http_connection *c)
{
    c->data_so_far = 0;

    if (c->fh && (c->buf_off != c->buf_used))
    {
	int n;

	n = c->buf_off - c->buf_used;
	fwrite(c->buffer + c->buf_used, n, 1, c->fh);
	c->data_so_far = n;
    }
}

void http_socket_close(http_connection *c)
{
    if (c->socket != -1)
    {
#if DEBUG
	fprintf(stderr, "Closing socket %d\n", c->socket);
#endif

	FD_CLR(c->socket, &fd_read);
	FD_CLR(c->socket, &fd_write);

	http_cons[c->socket] = NULL;

	socketclose(c->socket);
	c->socket = -1;
    }
}

int strcasecmp(char *s1, char *s2)
{
    int c1, c2, t;

    while (1)
    {
	c1 = *s1++;
	c2 = *s2++;
	if (c1 == 0 || c2 == 0)
	    return c1-c2;
	else
	{
	    t = toupper(c1) - toupper(c2);
	    if (t)
		return t;
	}
    }
}

void http_check_special_headers(http_connection *c, http_header_item *hi)
{
    if (strcasecmp(hi->key, "CONTENT-LENGTH") == 0)
    {
	c->data_size = atoi(hi->value);
    }
}
