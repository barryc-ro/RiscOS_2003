/*
 * TokenCheck (tokencheck.c)
 *
 * Checks that message tokens exist in all required translations of a messages
 * file, to avoid disappointment when applications/modules keel over and die
 * at run-time due to missing messages
 *
 *
 * Syntax:
 *   tokencheck MessagesFile
 *
 *
 * This application runs on RISC OS only.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"

/* CLX */
#include "hash.h"

/* Local */
#include "VersionNum"

/* Useful constants */
static const char varname_locale[] = "Locale"; /* Environment variable to check */
static const char varval_uk[] = "UK";          /* The locale to compare to */

static const char version[] = "$VersionNum: " Module_FullVersion " $";

/* A buffer into which to read lines of input */
#define BUFFER_LENGTH BUFSIZ
static const size_t buffer_length = BUFFER_LENGTH;
static char buffer[BUFFER_LENGTH];

enum tc_flag_bits {
  tc_DEBUGGING = 1
};
static int tc_flags = 0;


static void usage(void)
{
  (void) version;
  (void) fputs(
    "tokencheck " Module_FullVersion " [" Module_Date "]\n"
    "Syntax: tokencheck <messages file>\n",
    stderr);
  exit(EXIT_FAILURE);
}

static FILE *tokencheck_open(const char *filename)
{
  return fopen(filename, "rb");
}

static char *Strdup(const char *s1)
{
  if (s1 == NULL) {
    return NULL;
  }
  else {
    const size_t length = strlen(s1) + 1;
    char *const s2 = malloc(length);

    if (s2 == NULL) return NULL;
    return memcpy(s2, s1, length);
  }
}

static char *varval_locale(void)
{
  char *var_locale = Strdup(getenv(varname_locale));
  if (!var_locale) {
    (void) fprintf(stderr,
      "tokencheck: unable to read <%s> environment variable\n", varname_locale);
    exit(EXIT_FAILURE);
  }
  return var_locale;
}

/* Read file and return the next non-comment line */
static char *load_line(FILE *f)
{
  while (fgets(buffer, buffer_length, f)) {
    /* Strip comments, newlines, token values etc. */
    buffer[strcspn(buffer, "\r\n#:")] = '\0';
    if (*buffer) {
      return buffer;
    }
  }
  return NULL;
}

/* Extract the next token from the message file and return it and a next
 * pointer for the next call
 */
static char *load_tokens(FILE *f, char *buffer, char **next_buffer)
{
  char *result;

  if (buffer == NULL) {
    buffer = load_line(f);
    if (buffer == NULL) {
      return NULL;
    }
  }

  result = buffer;
  *next_buffer = buffer + strcspn(buffer, "/");
  if (**next_buffer == '\0') {
    *next_buffer = NULL;
  }
  else {
    **next_buffer = '\0';
    ++*next_buffer;
  }
  return result;
}

/* Load all the message keys into the hash table */
static void hash_messages(FILE *f, HashTable h)
{
  const char *token;
  char *buffer = NULL;
  HashId id;

  while ((token = load_tokens(f, buffer, &buffer)) != NULL) {
    if (tc_flags & tc_DEBUGGING) fprintf(stderr, "Found token %s\n", token);
    if (!hash_enter(h, token, &id)) {
      fprintf(stderr,
        "tokencheck: Duplicate token: %s\n", token);
      exit(EXIT_FAILURE);
    }
  }
}

static int check_messages(FILE *f, HashTable h)
{
  const char *token;
  char *buffer = NULL;
  HashId id;
  int failures = 0;

  while ((token = load_tokens(f, buffer, &buffer)) != NULL) {
    if (tc_flags & tc_DEBUGGING) fprintf(stderr, "Checking token %s\n", token);
    if (!hash_lookup(h, token, &id)) {
      fprintf(stderr,
        "tokencheck: Token not found in translation: %s\n", token);
      ++failures;
    }
  }

  return failures;
}

int main(int argc, char *argv[])
{
  char *var_locale;
  FILE *foreign_messages, *uk_messages;
  HashTable foreign_hash;

  if (argc != 2) {
    usage();
    /*NOTREACHED*/
  }

  /* Read the current locale setting */
  var_locale = varval_locale();

  if (strcmp(var_locale, varval_uk) == 0) {
    /* Current locale setting matches the default locale */
    exit(EXIT_SUCCESS);
  }

  foreign_messages = tokencheck_open(argv[1]);
  if (!foreign_messages) {
    (void) fprintf(stderr,
      "Unable to open foreign messages file %s\n", argv[1]);
    exit(EXIT_FAILURE);
  }

  /* Temporarily switch locale, open the file, restore the locale */
  _kernel_setenv(varname_locale, varval_uk);
  uk_messages = tokencheck_open(argv[1]);
  _kernel_setenv(varname_locale, varval_uk);
  if (!uk_messages) {
    (void) fprintf(stderr,
      "Unable to open %s messages file %s\n", varval_uk, argv[1]);
    exit(EXIT_FAILURE);
  }

  foreign_hash = hash_new(256);
  if (foreign_hash == NULL) {
    fputs(
      "tokencheck: Unable to construct hash table to store messages\n",
      stderr);
    exit(EXIT_FAILURE);
  }
  hash_messages(foreign_messages, foreign_hash);
  exit(check_messages(uk_messages, foreign_hash) ? EXIT_FAILURE : EXIT_SUCCESS);
}
