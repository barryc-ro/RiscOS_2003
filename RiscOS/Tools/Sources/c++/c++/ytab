
# line 29 "gram.y"
#include "cfront.h"
#include "size.h"
#include "template.h"
#include <string.h>
// include tqueue.h after YYSTYPE is defined ...

static int	in_static = 0;
int		in_friend = 0;
int		must_be_friend = 0;
int		default_args = 0;
int		dont_instantiate = 0;
static int explicit_template_definition = 0;
Pname righttname=0;


struct parstate {
	Ptype intypedef;
	int   infriend;
	int   defercheck;
	Pname intag;
	int cid;
} pstate[BLMAX];
static int px;
extern int classid;
static void
SAVE_STATE()
{
//error('d',"save_state: in_typedef%t in_tag%n defer_check %d",in_typedef,in_tag,defer_check);
	if ( px >= BLMAX ) error('i',"parsing state stack overflow -- current table %s",Ctbl->whereami());
	pstate[px].intypedef = in_typedef;
	pstate[px].infriend = in_friend;
	in_typedef = 0;
	in_friend = 0;
	pstate[px].defercheck = defer_check;
	defer_check = 0;
	pstate[px].intag = in_tag;
	in_tag = 0;
	pstate[px].cid = classid;
	classid = 0;
	++px;
}
static void
RESTORE_STATE()
{
//error('d',"restore_state: in_typedef%t in_tag%n defer_check %d",in_typedef,in_tag,defer_check);
	if ( --px < 0 ) error('i',"parsing state stack underflow -- current table %s",Ctbl->whereami());
	in_typedef = pstate[px].intypedef;
	in_friend = pstate[px].infriend;
	defer_check = pstate[px].defercheck;
	in_tag = pstate[px].intag;
	classid = pstate[px].cid;
//error('d',"            -> in_typedef%t in_tag%n defer_check %d",in_typedef,in_tag,defer_check);
}


//SYM parsing symbol table management
inline void
PUSH_ARG_SCOPE()
{
DB(if(Kdebug>=1)error('d',"push arg table; %ctbl %s",'C',Ctbl->whereami()););
	Ctbl = new ktable( 0, Ctbl, 0 );
	Ctbl->k_id = ARG;
}
inline void
PUSH_CLASS_SCOPE( Pname n )
{
DB(if(Kdebug>=1)error('d',"pushC table%n; %ctbl %s",n,'C',Ctbl->whereami()););
	// table allocated in name::tname() to avoid problems with forward
	//     refs to class templates
	Pclass cl = n->tp->classtype();
	cl->k_tbl->k_next = Ctbl;
	Ctbl = cl->k_tbl;
	Ctbl->expand(CTBLSIZE);
}
inline void
PUSH_BLOCK_SCOPE()
{
DB(if(Kdebug>=1)error('d',"push block tbl; %ctbl %s in %s",'C',Ctbl->whereami(),Ctbl->k_next->whereami()););
	if ( Ctbl->k_id == ARG )
		Ctbl->expand(TBLSIZE);
	else {
		Ctbl = new ktable(TBLSIZE, Ctbl, Ctbl->k_name );
	}
	Ctbl->k_id = BLOCK;
	if ( Ctbl->k_next == Gtbl
	||   Ctbl->k_next->k_id == BLOCK
	||   Ctbl->k_next->k_id == CLASS )
		Ctbl->k_t->next = Ctbl->k_next->k_t;
}
inline void
PUSH_TEMPLATE_SCOPE()
{
DB(if(Kdebug>=1)error('d',"push template tbl; %ctbl %s",'C',Ctbl->whereami()););
	Ctbl = new ktable( 0, Ctbl, 0 );
	Ctbl->k_id = TEMPLATE;
}
inline void
POP_SCOPE( int deallocate = 0 )
{
DB(if(Kdebug>=1)error('d',"pop tbl %s",Ctbl->whereami()););
	if ( Ctbl == Gtbl ) error('i', "bad parsing table");
	Pktab b = Ctbl;
	Ctbl = Ctbl->k_next;
	if ( b->k_id == ARG || deallocate ) delete b;
}


/*SYM -- replaces set_scope()/curr_scope for switching between scopes
 *       in member defs
 * Temporarily reset scope in member defs:
 *     int X::f( T t = a ) { ... }
 *     int X::s[10] =        ... ,  i = 3;
 *            |----scope of X----|
 * ??? What about exprs "p->operator T()", etc ???
 */
// Although local member defs are illegal outside a local class, scopes
//    are stacked for error recovery / extensibility.
struct pcontext {
	Pktab ktbl;
	int   saved_template;
};
static pcontext scopestack[BLMAX];
static int scopex = 0;
Pname
SET_SCOPE( Pname n )
{
	Pktab ntb;
	if ( n == 0 ) ntb = 0;
	else if ( n == sta_name ) ntb = Gtbl;
	else if ( n->n_template_arg == template_type_formal ) {
		DB(if(Kdebug>=1)error('d',"set scope%n -- template formal -- currently in %s next %s",n,Ctbl->whereami(),Ctbl->k_next->whereami()););
		return n;
	}
	else if ( n->tp ) {
		Ptype t = n->tp->skiptypedefs();
		if ( t->base==COBJ ) ntb = t->classtype()->k_tbl;
		else ntb = 0;
	} else ntb = 0;
	DB(if(Kdebug>=1)error('d',"set scope%n ntb %s next %s, currently in %s",n,ntb->whereami(),ntb?ntb->k_next->whereami():"<nil>",Ctbl->whereami()););
	if (ntb == 0) return 0;//error('i',"scope set to null table(n==%n)!",n);
	if ( scopex >= BLMAX ) error('i',"set scope %s: parsing scope stack overflow -- current table %s",ntb->whereami(),Ctbl->whereami());
	if ( Ctbl->k_id == TEMPLATE ) {
		// parsing template member function
		//    template<...> PT<...>::f() {}
		// be sure template params are in scope when parsing f
		// -- extract template scope from current scope and put it
		//    in new scope
		Pktab tt = Ctbl;
		Ctbl = Ctbl->k_next;
		tt->k_next = ntb->k_next;
		ntb->k_next = tt;
		scopestack[scopex].saved_template = 1;
	}
	scopestack[scopex++].ktbl = Ctbl;
	Ctbl = ntb;
	return n;
}
void
UNSET_SCOPE()
{
	// restore surrounding template scope, if appropriate
	Pktab tt = 0;
	if ( --scopex < 0 ) error('i',"parsing scope stack underflow -- current scope %s",Ctbl->whereami());
	if ( scopestack[scopex].saved_template ) {
		scopestack[scopex].saved_template = 0;
		if ( Ctbl->k_next==0 || Ctbl->k_next->k_id != TEMPLATE )
			error('i',"set scope failed restoring template table -- current table %s",Ctbl->whereami());
		tt = Ctbl->k_next;
		Ctbl->k_next = tt->k_next;
	}
	DB(if(Kdebug>=1)error('d',"unset scope %s -> %s tt %s",Ctbl->whereami(),scopestack[scopex].ktbl->whereami(),tt?tt->whereami():"<nil>"););
	Ctbl = scopestack[scopex].ktbl;
	if ( tt ) { tt->k_next = Ctbl; Ctbl = tt; }
}
inline Pktab
GET_XSCOPE()
{
	if ( scopex-1 < 0 ) error('i',"parsing scope stack underflow -- current table %s",Ctbl->whereami());
	return scopestack[scopex-1].ktbl;
}
inline void
SET_XSCOPE( Pktab tb )
{
	if ( scopex-1 < 0 ) error('i',"parsing scope stack underflow -- current table %s",Ctbl->whereami());
	scopestack[scopex-1].ktbl = tb;
}


// macros
#define copy_if_need_be(s)  ((templp->in_progress || templp->parameters_in_progress) ? strdup(s) : s) 
#define YYMAXDEPTH 600

#ifdef DBG
#ifndef YYDEBUG
#define YYDEBUG 1
#endif
#endif

static init_seen = 0;
static cdi = 0;
static Pnlist cd = 0, cd_vec[BLMAX];
static char stmt_seen = 0, stmt_vec[BLMAX];
static Pnlist scd = 0; // keep track of cd list outside of switch

static Pname err_name = 0;

// support for template friend declarations within a class
static Pcons templ_friends;

// fcts put into norm2.c just to get them out of gram.y
void sig_name(Pname);	
Ptype tok_to_type(TOK);
void memptrdcl(Pname, Pname, Ptype, Pname);

static bit decl_with_init(Pnlist cd) 
/* do the declarations have an initializer
   or a class object with a constructor */
{
	for (Pname n=cd->head;n;n=n->n_list) {
		if (n->n_initializer) return 1;
		Pname cln=n->tp->is_cl_obj();
		if (cln && Pclass(cln->tp)->c_ctor)
			return 1;
	}
	return 0;
}


static char* 
get_classname(char* s)
{
// error('d',"get_classname(%s)",s);
	char* r = new char[strlen(s)+1];
	sprintf(r,s);
	s = r;

	char* s1 = s;
	while (*s) {
		for ( ; s[0] && (s[0] != '_' || s[1] && s[1] != '_'); s++) s1++;;
		if (*s) {
			if (strncmp(s,"__pt__",6)==0) { // parameterized class
				*s1 = '\0';
				return r;
			}
		}
		return r;
	}
	return r;
}

static Pptr doptr(TOK p, TOK t)
{
	Pptr r = new ptr(p,0);
	switch (t) {
	case CONST:
		r->b_const = 1;
               // if (p == RPTR) error('w',"redundant `const' after &");
		break;
	case VOLATILE:
		error('w',"\"volatile\" not implemented (ignored)");
		break;
	default:
		error("syntax error: *%k",t);
	}
	return r;
}

static Pbcl dobase(TOK pr, Pname n, TOK v = 0)
{
// error('d',"dobase(%k %n %k)", pr,n,v);

	Pbcl b = new basecl(0,0);
	b->ppp = pr;	// save protection indicator

	if (n) {
		if (n->base != TNAME) {
			Pname nn = k_find_name(n->string,Ctbl,HIDDEN);
			if ( nn == 0 ) {
				error("BN%n not aTN",n);
				return 0;
			} else
				n = nn;
		}

		Pbase bt = Pbase(n->tp);
		while (bt->base == TYPE) bt = Pbase(bt->b_name->tp);

                if (bt->base != COBJ) {
                        // template <class B> class D : public B {};
                        if (templp->in_progress == true  && bt->base == ANY)
                            error('s',"formalTZ%n used asBC ofY",n);
                        else error("BN%n not aCN",n);
                        return 0;
                }

		if (v) {
			if (v != VIRTUAL) error("syntax error:%k inBCD",v);
			b->base = VIRTUAL;
		}
		else
			b->base = NAME;

		b->bclass = Pclass(bt->b_name->tp);
	}

	return b;
}


#define Ndata(a,b)	b->normalize(Pbase(a),0,0)
#define Ncast(a,b)	b->normalize(Pbase(a),0,1)
#define Nfct(a,b,c)	b->normalize(Pbase(a),Pblock(c),0)
#define Ncopy(n)	(n->base==TNAME)?new name(n->string):n

#define Finit(p)	Pfct(p)->f_init
#define Fargdcl(p,q,r)	Pfct(p)->argdcl(q,r)
#define Freturns(p)	Pfct(p)->returns
#define Fbody(p)	Pfct(p)->body /*SYM*/
#define Vtype(v)	Pvec(v)->typ
#define Ptyp(p)		Pptr(p)->typ

		/* avoid redefinitions */
#undef EOFTOK
#undef ASM
#undef BREAK
#undef CASE
#undef CONTINUE
#undef DEFAULT
#undef DELETE
#undef DO
#undef ELSE
#undef ENUM
#undef FOR
#undef FORTRAN
#undef FRIEND
#undef GOTO
#undef IF
#undef NEW
#undef OPERATOR
#undef RETURN
#undef SIZEOF
#undef SWITCH
#undef THIS
#undef WHILE
#undef LP
#undef RP
#undef LB
#undef RB
#undef REF
#undef DOT
#undef NOT
#undef COMPL
#undef MUL
#undef AND
#undef PLUS
#undef MINUS
#undef ER
#undef OR
#undef ANDAND
#undef OROR
#undef QUEST
#undef COLON
#undef ASSIGN
#undef CM
#undef SM
#undef LC
#undef RC
#undef ID
#undef STRING
#undef ICON
#undef FCON
#undef CCON
#undef ZERO
#undef ASOP
#undef RELOP
#undef EQUOP
#undef DIVOP
#undef SHIFTOP
#undef ICOP
#undef TYPE

#undef CATCH
#undef THROW
#undef TRY

#undef TNAME
#undef EMPTY
#undef NO_ID
#undef NO_EXPR
#undef FDEF
#undef ELLIPSIS
#undef AGGR
#undef MEM
#undef MEMPTR
#undef PR
#undef MEMQ
#undef TSCOPE
#undef DECL_MARKER
#undef REFMUL
#undef LDOUBLE
#undef LINKAGE
#undef TEMPLATE

#undef XVIRT
#undef XNLIST
#undef XILINE
#undef XIA
#undef SM_PARAM
#undef PTNAME
#undef NEW_INIT_KLUDGE

# line 441 "gram.y"
typedef union  {
	char*	s;
	TOK	t;
	int	i;
	loc	l;
	Pname	pn;
	Ptype	pt;
	Pexpr	pe;
	Pstmt	ps;
	Pbase	pb;
	Pnlist	nl;
	Pslist	sl;
	Pelist	el;
	Pbcl	pbc;
	Pptr	pp;
	PP	p;	// fudge: pointer to all class node objects
	Plist	pl;
	toknode* q;	// token queue
} YYSTYPE;

# line 461 "gram.y"
#include "tqueue.h"
extern YYSTYPE yylval, yyval;
extern int yyparse();

// in_typedef should allow for nested in_typedef
extern int	declTag;	 // !1: inline, virtual mod permitted
int		in_sizeof = 0;
int		in_new = 0;
Ptype 		in_typedef = 0;  // catch redefinition of TNAME
Pname		in_tag = 0;      // handle complex typedefs: int (*)()
extern int	defer_check;	 // redefinition typedef check delay

extern 	must_be_id;	 // !0, TNAME => ID, i.e., int X
int	DECL_TYPE = 0; 	 // lalex() wants this set for global x(*fp)()
int	in_arg_list=0; 	 // !0 when parsing argument list
static  in_binit_list=0;
int	in_class_decl=0; // !0 when processing class definition
int	parsing_class_members=0; // !0 when parsing class def but not member function body
int	in_mem_fct=0;    // !0 when parsing member function definition
Ptempl_inst pti = 0; // explicit template class: class X<int> {};

#define yylex lalex
#define NEXTTOK() ( (yychar==-1) ? (yychar=yylex(),yychar) : yychar )
#define EXPECT_ID() must_be_id = 1
#define NOT_EXPECT_ID() must_be_id = 0

Pname syn()
{
ll:
	switch (yyparse()) {
	case 0:		return 0;	// EOF
	case 1:		goto ll;	// no action needed
	default:	return yyval.pn;
	}
}

# define EOFTOK 0
# define ASM 1
# define AUTO 2
# define BREAK 3
# define CASE 4
# define CONTINUE 7
# define DEFAULT 8
# define DELETE 9
# define DO 10
# define ELSE 12
# define ENUM 13
# define FOR 16
# define FORTRAN 17
# define FRIEND 18
# define GOTO 19
# define IF 20
# define NEW 23
# define OPERATOR 24
# define RETURN 28
# define SIZEOF 30
# define SWITCH 33
# define THIS 34
# define WHILE 39
# define LP 40
# define RP 41
# define LB 42
# define RB 43
# define REF 44
# define DOT 45
# define NOT 46
# define COMPL 47
# define MUL 50
# define AND 52
# define PLUS 54
# define MINUS 55
# define LT 58
# define GT 60
# define ER 64
# define OR 65
# define ANDAND 66
# define OROR 67
# define QUEST 68
# define COLON 69
# define ASSIGN 70
# define CM 71
# define SM 72
# define LC 73
# define RC 74
# define ID 80
# define STRING 81
# define ICON 82
# define FCON 83
# define CCON 84
# define NAME 85
# define ZERO 86
# define ASOP 90
# define RELOP 91
# define EQUOP 92
# define DIVOP 93
# define SHIFTOP 94
# define ICOP 95
# define TYPE 97
# define CATCH 98
# define THROW 99
# define TRY 100
# define TNAME 123
# define EMPTY 124
# define NO_ID 125
# define NO_EXPR 126
# define FDEF 127
# define ELLIPSIS 155
# define AGGR 156
# define MEM 160
# define MEMPTR 173
# define PR 175
# define MEMQ 176
# define TSCOPE 178
# define DECL_MARKER 179
# define REFMUL 180
# define LDOUBLE 181
# define LINKAGE 182
# define TEMPLATE 185
# define XVIRT 200
# define XNLIST 201
# define XILINE 202
# define XIA 203
# define SM_PARAM 207
# define PTNAME 209
# define NEW_INIT_KLUDGE 210
# define XDELETED_NODE 211
# define DUMMY_LAST_NODE 212
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern short yyerrflag;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
YYSTYPE yylval, yyval;
# define YYERRCODE 256

# line 2897 "gram.y"


static Pname
enumcheck( Pname n )
{
	Ptype tx = n->tp;
	if ( tx->base == TYPE ) {
		Pname bn = Pbase(tx)->b_name;
		tx = bn->tp;
		if ( tx->base != EOBJ
		||   strcmp(bn->string,n->string)
		)
			error("%n ofT%t redeclared as enum.",n,tx);
		n = bn;
	} else if ( tx->base != EOBJ )
		error("%n ofT%t redeclared as enum",n,tx);

// error('d',"enumtag: ccl %t tag: %n", ccl, n);
	if (ccl && ccl->class_base == CL_TEMPLATE) {
		if (check_bound_type != not_set)
			error('s',"nested enum %n within nestedC %t withinYC %t",n,ccl,ccl->in_class);
		else check_bound_type = look_for;
	}
	return n;
}

static void
check_tag()
/*
        Allow the case of inline/virtual/overload as 
        modifiers of return type of form struct/class/union x foo() 
        SM, COLON, LC ==> real class declaration, not return type
*/
{
	switch ( NEXTTOK() ) {
	case SM: case COLON: case LC:
    		declTag = 1;
    		break;
	default:
    		declTag = 0;
    		break;
        }
}

static void
hoist_al()
/*SYM hoist names in arg table to next outer scope and pop scope
 * called upon discovering that an arg list isn't really being parsed
 *    -- i.e., 'arg_lp decl RP ...' -- arg_lp pushed an arg table
 */
{
	if ( Ctbl->k_id != ARG ) {
		// saw something like '( X::y )' while probably reduced
		//    as 'arg_lp decl RP' and pushed scope of X
		// no names should have been entered; discard table
		Pktab otbl = Ctbl;
		Ctbl = GET_XSCOPE();
		if ( Ctbl->k_id != ARG ) error('i',"hoist_al: noA table");
		POP_SCOPE();
		SET_XSCOPE(Ctbl);
		Ctbl = otbl;
		return;
	}
	if ( !in_typedef && !in_friend ) Ctbl->hoist();
	POP_SCOPE();
}
static void
arg_redec( Pname fn )
/* parsing restored member inline at end of class
 * redeclare args before entering function
 */
{
	if ( fn==0 || fn->tp->base != FCT )
		error('i',"bad inline rewrite! --%n %t",fn,fn?fn->tp:0);
	if ( Ctbl->k_id != ARG )
		error('i',"arg_redec(%n ) -- noA table",fn);
	//SYM -- reenter in arg table
	//SYM -- probably more efficient to keep arg table around...
	Pname al = Pfct(fn->tp)->argtype;
	Pname n = 0;
	for ( ;  al;  al = al->n_list ) {
		DB( if(Ydebug>=1)error('d',"arg_redec:  %n  %d",al,al->lex_level); );
		n = new name(al->string);
		insert_name(n,Ctbl);
		DB( if(Ydebug>=1)error('d',"   %n",n); );
	}
}

static Pname
dummy_dtor( TOK q, TOK d )
{
	if ( q != d ) {
		error("syntax error: inconsistent destructor notation");
		q = d;
	}
	Pname dt = new name("type destructor");
	dt->base = DTOR;
	dt->tp = new fct(void_type,0,1);
	dt->n_dcl_printed = 1; // suppress any code generation
	switch ( d ) {
	default:
		error("syntax error: illegal destructor notation");
		dt->tp2 = any_type;
		break;
	case CHAR:
		dt->tp2 = dt->tpdef = char_type;
		break;
	case SHORT:
		dt->tp2 = dt->tpdef = short_type;
		break;
	case INT:
		dt->tp2 = dt->tpdef = int_type;
		break;
	case LONG:
		dt->tp2 = dt->tpdef = long_type;
		break;
	case FLOAT:
		dt->tp2 = dt->tpdef = float_type;
		break;
	case DOUBLE:
		dt->tp2 = dt->tpdef = double_type;
		break;
	case VOID:
		dt->tp2 = dt->tpdef = void_type;
		break;
	}
	return dt;
}
static Pname
dummy_dtor()
{
	Pname dt = new name("type destructor");
	dt->base = DTOR;
	dt->tp = new fct(void_type,0,1);
	dt->n_dcl_printed = 1; // suppress any code generation
	dt->tp2 = 0;
	dt->tpdef = 0;
	return dt;
}

static bit
check_if_base( Pclass c1, Pclass c2 )
{
	if ( c1 == c2 ) return 1;
	for (Pbcl b = c1->baselist; b; b=b->next) {
		if (b->bclass==c2) return 1;
		if (check_if_base(b->bclass,c2)) return 1;
	}
	return 0;
}
short yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 48,
	71, 44,
	72, 44,
	-2, 43,
-1, 65,
	155, 388,
	-2, 309,
-1, 70,
	13, 383,
	97, 383,
	123, 383,
	155, 383,
	156, 383,
	160, 383,
	178, 383,
	179, 383,
	182, 383,
	-2, 309,
-1, 127,
	73, 107,
	-2, 101,
-1, 342,
	70, 96,
	-2, 95,
-1, 349,
	60, 16,
	71, 16,
	-2, 119,
-1, 350,
	60, 15,
	71, 15,
	-2, 118,
-1, 433,
	73, 107,
	-2, 102,
-1, 471,
	1, 213,
	3, 213,
	4, 213,
	7, 213,
	8, 213,
	9, 213,
	10, 213,
	13, 213,
	16, 213,
	19, 213,
	20, 213,
	23, 213,
	24, 213,
	28, 213,
	30, 213,
	33, 213,
	34, 213,
	39, 213,
	40, 213,
	46, 213,
	47, 213,
	50, 213,
	52, 213,
	54, 213,
	55, 213,
	72, 213,
	73, 213,
	80, 213,
	81, 213,
	82, 213,
	83, 213,
	84, 213,
	85, 213,
	86, 213,
	95, 213,
	97, 213,
	99, 213,
	100, 213,
	123, 213,
	156, 213,
	160, 213,
	178, 213,
	179, 213,
	182, 213,
	185, 213,
	209, 213,
	-2, 0,
	};
# define YYNPROD 403
# define YYLAST 3422
short yyact[]={

 163,  24, 512, 228, 181,   8, 470, 401, 341, 191,
 407, 333, 351, 340, 237,  58, 538, 152, 318, 321,
   9, 387,  58,  58, 127,  63,  10, 216, 187, 207,
 190,  11, 120, 308,  83, 606, 206, 301, 263, 165,
 120, 136, 337,  69, 334, 509, 539,  29, 578,  25,
 591, 124,  72,  22, 589, 590, 123, 591, 600, 149,
 599, 589, 590, 185,  53, 134, 194,  22,  65,  18,
 177,  44, 123, 185,  22,  22,  89, 124,  69, 456,
 679,  57, 175,  17, 208,  41, 194,  90, 194,  43,
  74, 598, 596, 597, 595, 480,  88,  52, 304, 199,
 597,  65,   7,  69,  77,  80,  69, 660, 337,  83,
 180, 591, 218,  29, 119,  84,  34, 409, 120, 410,
  42,  26,  44, 125, 211, 336,  32,  24,  33,  65,
  34, 222,  65, 248, 355, 356,  54,  34,  34, 194,
  43, 185, 185, 202,  58, 184,  44, 223, 196,  36,
 403,  41, 185, 224, 597, 184, 352, 537, 225,  32,
  32,  33,  33, 122,  43,  81, 194, 121, 196, 275,
 196,  42, 173,  78, 120, 234, 254, 647, 287,  22,
 606, 139, 305,  58, 299, 300, 607, 606,  44, 309,
 289, 277, 342, 530, 120,  42,  22, 457, 406, 471,
 215, 131,  58, 335, 519, 331,  43, 264, 297,  17,
 274, 120, 278, 279, 280, 281, 282, 283, 284, 285,
 286, 196, 161, 184, 184, 242,  80, 510, 172, 221,
 120, 194,  53,  34, 184,  22, 276,  42, 315, 120,
 120, 606,  34,  53,  41, 324, 311, 563, 196,  35,
 292, 357, 240, 344,  22, 513, 119, 232, 279,  34,
  53, 293,  45, 263, 614,  52,  83, 339, 521, 185,
 427, 461, 391, 391, 317, 173, 307, 435, 194, 345,
 487,  44,  35,  35,  80,  42, 381, 531, 294,  53,
 120, 289, 120, 307, 394, 337,  65, 330,  34,  43,
  29, 328, 396,  44,  54, 185, 397, 327, 383,  34,
  44, 120, 338, 196, 398,  54, 414,  34,  42,  42,
 194,  43, 307, 404, 405,  66,  34, 379,  43, 577,
  42, 172,  54, 325, 416, 412, 120, 120,  41, 143,
 144,  53, 425,  71, 419, 420, 296, 278, 185, 423,
 428, 184,  42, 382, 306,  34, 486, 437, 433,  42,
 196,  54, 439, 311, 311, 443, 442,  83, 435,  65,
 534, 434, 320, 586, 307,  44,  31, 441,  71, 173,
 429, 431, 584, 319, 194, 288,  31, 184, 583, 408,
 120, 337,  73,  43, 346, 229,  29, 323,  86,  30,
 535, 329, 196,  71,  44, 347,  71,  34, 319,  30,
 466, 467, 447,  54, 454, 140, 145,  87, 338, 338,
 501, 204,  43,  81,  42,  40,  34, 325, 173, 120,
 184, 120,  75, 120,  41, 172, 178, 484, 325,  24,
 481,  73, 203, 489, 485, 416, 416, 477, 478, 474,
 494, 389, 120,  42,  36, 685,  67,  62, 120, 490,
  68, 213, 683, 663, 185, 491, 196, 173, 441, 325,
 492,  44, 573, 120, 120, 482, 499, 483, 453,  67,
 542, 504, 502,  68, 172, 517, 432,  28, 493,  43,
 451,  22, 498, 469, 385, 392, 146,  29, 516, 185,
 468, 390, 120, 506, 197, 496, 141, 185,  36,  23,
  67, 338,  21, 338,  68, 338, 523, 514, 325, 325,
  42,  17, 209, 172, 209, 463, 526, 128, 137, 536,
 462, 421, 120, 527, 541,  41, 120, 411, 506, 507,
  67, 194, 532, 545,  68, 551, 184, 553, 505, 314,
  83, 465,  67, 302,  34, 338,  68, 522, 235, 212,
 544, 552, 543, 186,  44, 579, 459, 413,  39, 587,
 671,  70,  44,  67, 248, 209, 514,  68, 246, 247,
 393, 184,  43, 524, 616, 609, 403,  44, 581, 184,
  43,  27, 533,  36, 183, 617,  32, 619,  33,  32,
 571,  33, 290, 473, 580,  43, 233, 210,  14, 449,
 295, 452, 294,  42, 338,  46, 458, 254, 460, 612,
  64,  42,  67, 196, 662, 646,  68, 267, 268, 610,
 217, 621, 613, 268, 415, 651,  42, 653, 654, 655,
 656, 268, 658,  78, 475, 625,  78, 424, 571, 571,
 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
 571, 571, 571, 571, 571, 571, 571, 209, 666, 585,
 182, 185, 649, 193, 668, 623, 677, 440, 622, 120,
 193, 358, 359, 360, 361, 362, 363, 364, 365, 366,
 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
 377, 686, 378, 582, 263, 620, 310, 384, 416, 575,
 574, 673, 682, 670,  36, 608,  67,  15, 508,  35,
  68, 571,  35, 322, 674, 426, 349, 464,  53, 326,
 217, 311,  48, 131,  14, 680, 436, 343,  37,  76,
  79, 231, 162,  20, 417, 415, 415, 241, 239, 182,
 525, 424, 353, 184, 244,  42, 209,  20,  42, 472,
 518, 307, 591,  82,  20,  20, 589, 590, 440,  64,
 600,  67, 599, 291, 298,  68,  41, 137, 230,  36,
 476,  67, 354,  40, 337,  68, 438, 236,  47,  29,
 515, 332, 464, 464,  34, 669, 348,  82, 418, 142,
  54, 430,  31, 598, 402, 597, 595,  85, 479, 173,
 403, 303, 659,  44, 626, 488, 188, 446,  36, 192,
  32, 138,  33, 310, 310,  30, 117,  41,  32, 164,
  33,  43, 451, 528, 189, 322, 627, 628, 629, 630,
 631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
 641, 642, 643, 644, 645,  29, 547, 546,  19,  82,
 540, 243,  42,  29,  44, 172, 353,  51, 529, 227,
  49, 130, 220, 173, 126,  82,  38, 137, 350, 133,
  16, 495,  43,   1, 511, 291,  20,   2,  64,   0,
  67,   0, 606,  41,  68,   0, 389,  64, 422,  67,
 243,  41,  82,  68,  64, 205,  67, 132, 450, 672,
  68,   0, 193,  42, 131, 402, 402,   0,  60, 316,
  61,  41,   0, 520,  82,  20,  39, 248,   0, 172,
  44, 246, 247,  82,   0, 256,   0, 257,  44, 137,
   0,   0,   0,  35,  20, 137, 390,   0,  43,  55,
   0,  35,   0,   0,  40, 239,  43,  41,  44, 147,
   0, 137, 273,   0, 270,   0, 271, 272, 255, 253,
 254, 252,   0, 151, 173,   0,  43, 129,   0,  42,
 160, 176,   0,   0, 171,   0, 576,  42,   0, 137,
 176, 291,   0,   0,  44,   0, 157, 158,   0,   0,
 153,   0, 154,   0, 156, 155,   0,  42, 415,  44,
   0,   0,  43, 135, 388, 395, 618, 269,   0,   0,
   0,   0, 624, 137,   0, 386,  29,  43,   0,   0,
 172, 169, 167, 168, 170,  29, 166,   0,  23,   0,
   0,   0,   0,  42,   0, 159,  14, 174, 648, 150,
   0,   0,   0, 568,   0, 564, 560, 263,  42, 565,
 561, 569, 567,   0,  41,  40,   0,   0, 556,   0,
   0, 566, 554,  41, 591, 151, 173,   0, 589, 590,
 549, 130, 160,   0,   0, 557, 171, 665, 131,   0,
 667, 555, 176,   0,   0,   0,   0,  39, 157, 158,
   0,  44, 153,   0, 154,   0, 156, 155,   0,   0,
 148, 248,   0, 681, 291, 246, 247, 597, 595,  43,
  27,   0,   0, 183, 548, 471,  40,   0,  43,   0,
  82,  41, 558, 169, 167, 168, 170,  29, 166, 113,
   0,   0,   0,   0,   0,   0,   0, 159,  14, 550,
  42, 572, 562, 112, 254, 252,   0,   0,   0,  42,
   0,   0,   0,  32,   0,  33, 131,   0,  44,   0,
 105,   0, 106,   0, 114, 559, 107, 108,   0,   0,
  93,  20,  94, 503,  91,  92,  43, 129, 101,   0,
 102, 310,   0, 352,  96,  95, 103, 104,  29, 131,
 111, 115,   0,   0, 606,   0,   0,   0,  39,  41,
  51,   0, 570,   0,   0,  29, 500,  42,   0,   0,
 110, 100,  98,  99,  97, 109,   0, 118,   0, 147,
  43,  27,   0,  40, 183,   0,  41,   0, 131,   0,
   0, 263,  41, 151, 173,   0,  44,   0,   0,   0,
 160,   0,   0,  41, 171, 455,   0,   0,   0,   0,
 176,  42,   0,   0,  43,   0, 157, 158,   0,  39,
 153,   0, 154,  44, 156, 155,   0,   0, 678,  44,
   0,  41,   0,   0,   0,   0,  35,   0,   0,   0,
  44,  43,  55, 179,   0,  42,   0,  43,   0,   0,
 172, 169, 167, 168, 170,  29, 166,   0,  43, 131,
 116,   0,   0,   0,   0, 159,   0, 195,  44, 150,
 147,   0,  42,   0,  40,   0, 399,   0,  42,   0,
   0,   0,   0,   0, 151, 173,  43,   0,   0,  42,
   0, 160,   0,  41,   0, 171,   0,   0,   0,   0,
   0, 176,  41,   0,   0,   0,  31, 157, 158,   0,
   0, 153,  31, 154,   0, 156, 155,  42,   0,   0,
   0,   0,  36,   0,   0,   0,  39,   0,  36,  30,
 148,   0,  32,   0,  33,  30,   0,   0,  32,  44,
  33, 172, 169, 167, 168, 170,  29, 166,  43,  27,
   0,  59, 183,   0,   0,   0, 159,  43, 195,   0,
 150, 147,  56,   0,   0,   0,   0,  29,  19,   0,
   0,   0,   0,  29,   0, 151, 173,   0,   0,  42,
   0,   0, 160,   0,  41,  78, 171,   0,  42,   0,
   0,   0, 176,   0,   0,   0,   0,   0, 157, 158,
   0,   0, 153,   0, 154,  41, 156, 155,  40,   0,
   0,  41,   0,   0,   0,   0,   0,  39,   0,   0,
   0, 148,   0,   0,   0, 179,   0,   0,   0,   0,
   0, 569, 172, 169, 167, 168, 170,  29, 166,  43,
  27,   0,  44, 183,   0, 151, 173, 159,  44, 174,
   0, 150, 160,   0,   0,  35, 171,   0,   0,   0,
  43,  35, 176,   0,   0,   0,  43,   0, 157, 158,
  42,   0, 153,   0, 154,  41, 156, 155,   0,   0,
  29,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  42,  23,   0,   0,   0,   0,  42,   0,   0,
   0,   0, 172, 169, 167, 168, 170,  29, 166, 151,
 173,   0, 148,   0,   0,   0, 160, 159,  41, 174,
 171, 572,   0,   0,   0,   0, 176,   0, 650,   0,
  43,   0, 157, 158,   0,   0, 153,   0, 154,   0,
 156, 155,  40,   0,   0,  41,   0,   0, 248,   0,
   0,  39, 246, 247,   0,  44, 256,   0, 257,   0,
   0,  42,   0,   0,   0,   0, 172, 169, 167, 168,
 170,  29, 166,  43,  27,   0,   0, 183,   0, 151,
 173, 159, 570, 174,   0,   0, 160,   0,   0, 255,
 171, 254, 252,   0,   0,   0, 176,   0, 611,   0,
  43,   0, 157, 158,  42,   0, 153,   0, 154,  41,
 156, 155,   0,   0,  29,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,
   0,  42,   0,   0,   0,   0, 172, 169, 167, 168,
 170,  29, 166, 151, 173,   0, 266,   0,   0,   0,
 160, 159,  41, 174, 171,   0,   0,   0,   0,   0,
 176,   0, 380,   0,  43,   0, 157, 158,   0,   0,
 153,   0, 154,   0, 156, 155,   0,   0, 263,  41,
   0,   0,   0,   0,   0, 238,   0,   0,   0,  44,
   0,   0,   0,   0,   0,  42,   0,   0,   0,   0,
 172, 169, 167, 168, 170,  29, 166,  43,  27,   0,
   0, 183,   0, 151, 173, 159, 266, 174,   0,   0,
 160,   0,   0,   0, 171,   0,   0,   0,   0,   0,
 176,   0, 265,   0,  43,   0, 157, 158,  42,   0,
 153,   0, 154,  41, 156, 155,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0, 147,   0,  42,   0,   0,   0,   0,
 172, 169, 167, 168, 170,  29, 166, 151, 173,   0,
 266,   0,   0,   0, 160, 159,   0, 174, 171,   0,
   0,   0,   0,   0, 176, 200,   0,   0,  43,   0,
 157, 158,   0,   0, 198,   0, 154,   0, 156, 155,
   0,   0,  36,  41,   0,   0,  32,   0,  33,   0,
   0,   0,  32,   0,  33,   0,   0, 179,   0,  42,
   0,   0,   0,   0, 172, 169, 167, 168, 170,  29,
 166,   0,   0,   0,   0,   0,   0, 151, 173, 159,
 266,  29, 309, 150, 160,   0,   0,   0, 171,   0,
   0,   0,   0, 214, 176,   0,   0,   0,  43,  78,
 157, 158,   0,   0, 153,   0, 154,   0, 156, 155,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  41,
   0,   0,   0,   0,   0,  41,   0,   0,   0,  42,
   0,   0,   0,   0, 172, 169, 167, 168, 170,  29,
 166, 151, 173,   0,   0,   0,   0,   0, 160, 159,
   0, 174, 171,   0,   0,   0,  44, 201, 176,   0,
   0,   0,  44,   0, 157, 158,   0,   0, 153,  35,
 154,   0, 156, 155,  43,  35,   0,  41,   0,   0,
  43,   0,   0,  40,   4,  12,   0,   0,   0,   0,
   0,   0,   0,  42,  31,   0,   0,  40, 313, 169,
 167, 168, 170,  29, 166,  42,   0,   0,  31,   0,
  36,  42,   0, 159, 266, 174,   0,  30,   0,   0,
  32,   0,  33,   0,  36,   0,   0,   0, 151, 173,
   0,  30,  43,   0,  32, 160,  33,   0,   0, 171,
   0,  41,   0,   0, 219, 176,   0,   0,   0,   0,
  19, 157, 158,   0,   0,  29,   3,   0,   6,   0,
   0,   0,   0,  42,  19,   0,   0,  23,   0,  29,
   0,   0,   0,   0,   0,   0,   0,   0, 266,   0,
   0,  23,   0,   0,  40, 172, 169, 167, 168, 170,
  29, 166,  40,  41,   0,  31,  43,   0,   0,   0,
 159,   0, 174,   0,   0,   0,   0,  41,   0,   0,
   0,  36,   0,   0,   0,   0,   0,   0,  30,  36,
   0,  32,   0,  33,   0,   0,  39,  42,  41,  32,
  44,  33,   0,   0,   0,  40,   0,   0,   0,   0,
  39,   0,   0,  35,  44, 226,   0,   0,  43,  27,
  40,  19, 183,   0,   0,  13,  29,  35,   0, 309,
   0,  31,  43,  27,  29, 266,   5,   0,  23,  13,
   0,   0,  32,   0,  33,   0,  51,  36,   0,  42,
   0,   0,   0,  43,  30,   0,   0,  32,   0,  33,
   0,   0,   0,  42,  41,   0,   0,   0,   0,   0,
   0,   0,  41,   0,   0,   0,  59,  29,   0,  50,
   0,   0,   0,   0,  42,   0,   0,  56,   0,  51,
   0,   0,  29,   0,   0,   0,   0,  39,   0,   0,
   0,  44,   0,   0,  51,  39,   0,   0,   0,  44,
   0,   0,   0,   0,  35,  41,   0,   0,   0,  43,
  27,   0,  35, 183,   0,   0,   0,  43,  55,   0,
  41, 591,   0, 592,   0, 589, 590,   0,   0, 600,
   0, 599,   0,   0,   0, 594, 593, 601,  39,   0,
  42,   0,  44,   0,   0,   0,   0,   0,  42,   0,
   0,   0,   0,  39,   0,  35,   0,  44,   0,   0,
  43,  55, 598, 596, 597, 595,   0,   0,   0, 684,
  35,   0,   0,   0,   0,  43,  55,   0, 248,   0,
 249,   0, 246, 247,   0,   0, 256,   0, 257,   0,
   0,  42, 251, 250, 258, 259, 262,   0, 245, 261,
   0,   0,   0,   0,   0,   0,  42,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0, 260, 255,
 253, 254, 252, 248,   0, 249,   0, 246, 247,   0,
   0, 256,   0, 257,   0,   0,   0, 251, 250, 258,
 259, 262,   0, 245, 261, 676,   0,   0,   0,   0,
   0, 606,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0, 675, 260, 255, 253, 254, 252,   0, 248,
   0, 249,   0, 246, 247,   0,   0, 256,   0, 257,
   0,   0,   0, 251, 250, 258, 259, 262,   0, 245,
 261,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0, 664, 263, 260,
 255, 253, 254, 252, 248,   0, 249,   0, 246, 247,
   0,   0, 256,   0, 257,   0,   0,   0, 251, 250,
 258, 259, 262,   0, 245, 261,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0, 263, 260, 255, 253, 254, 252,   0,
 591,   0, 592,   0, 589, 590,   0,   0, 600,   0,
 599,   0,   0,   0, 594, 593, 601, 602, 605, 661,
 588, 604,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0, 263,
 603, 598, 596, 597, 595, 248,   0, 249,   0, 246,
 247,   0,   0, 256,   0, 257,   0,   0,   0, 251,
 250, 258, 259, 262, 657, 245, 261,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0, 652,   0, 263, 260, 255, 253, 254, 252,
   0, 248,   0, 249,   0, 246, 247,   0,   0, 256,
   0, 257,   0,   0,   0, 251, 250, 258, 259, 262,
   0, 245, 261,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 606, 260, 255, 253, 254, 252, 248,   0, 249,   0,
 246, 247,   0,   0, 256,   0, 257,   0,   0,   0,
 251, 250, 258, 259, 262,   0, 245, 261, 615,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0, 263, 260, 255, 253, 254,
 252, 497,   0,   0,   0,   0,   0,   0, 248,   0,
 249,   0, 246, 247,   0,   0, 256,   0, 257,   0,
   0,   0, 251, 250, 258, 259, 262,   0, 245, 261,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 263,   0,   0,   0,   0, 448,   0, 260, 255,
 253, 254, 252, 248,   0, 249,   0, 246, 247,   0,
   0, 256,   0, 257,   0,   0,   0, 251, 250, 258,
 259, 262,   0, 245, 261,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0, 263,   0,   0,   0,
   0,   0, 445, 260, 255, 253, 254, 252,   0, 248,
   0, 249,   0, 246, 247,   0,   0, 256,   0, 257,
   0,   0,   0, 251, 250, 258, 259, 262,   0, 245,
 261,   0,   0,   0,   0,   0,   0, 591,   0, 592,
   0, 589, 590,   0,   0, 600,   0, 599, 263, 260,
 255, 253, 254, 252, 248,   0, 249,   0, 246, 247,
   0,   0, 256,   0, 257,   0,   0,   0, 251, 250,
 258, 259, 262, 444, 245, 261,   0,   0, 598, 596,
 597, 595,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 400,   0, 263, 260, 255, 253, 254, 252,   0,
 248,   0, 249,   0, 246, 247,   0,   0, 256,   0,
 257,   0,   0,   0, 251, 250, 258, 259, 262,   0,
 245, 261,   0,   0,   0,   0,   0, 248,   0, 249,
   0, 246, 247,   0,   0, 256,   0, 257, 312, 263,
 260, 255, 253, 254, 252, 248,   0, 249,   0, 246,
 247,   0,   0, 256,   0, 257,   0,   0,   0, 251,
 250, 258, 259, 262,   0, 245, 261, 606, 255, 253,
 254, 252,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0, 263, 260, 255, 253, 254, 252,
   0, 591,   0, 592,   0, 589, 590,   0,   0, 600,
   0, 599,   0,   0,   0, 594, 593, 601, 602, 605,
   0, 588, 604,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 263, 603, 598, 596, 597, 595, 591,   0, 592,   0,
 589, 590,   0,   0, 600,   0, 599,   0,   0,   0,
 594, 593, 601, 602, 605,   0, 588, 263,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0, 263, 603, 598, 596, 597,
 595,   0, 248,   0, 249,   0, 246, 247,   0,   0,
 256,   0, 257,   0,   0,   0, 251, 250, 258, 259,
 262,   0, 245,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 606, 260, 255, 253, 254, 252, 248,   0, 249,
   0, 246, 247,   0,   0, 256,   0,   0,   0,   0,
   0, 251, 250, 258, 259, 262, 591, 245, 592,   0,
 589, 590,   0,   0, 600,   0, 599,   0,   0,   0,
 594, 593, 601, 602, 605,   0, 606, 260, 255, 253,
 254, 252,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0, 598, 596, 597,
 595, 248,   0, 249,   0, 246, 247,   0,   0, 256,
   0, 257,   0,   0,   0, 251, 250, 258, 259, 262,
   0, 248, 263, 249,   0, 246, 247,   0,   0, 256,
   0, 257,   0,   0,   0, 251, 250, 258,   0,   0,
   0,   0, 255, 253, 254, 252, 591,   0, 592,   0,
 589, 590,   0,   0, 600,   0, 599,   0,   0,   0,
 594, 593, 255, 253, 254, 252, 248, 263, 249,   0,
 246, 247,   0,   0, 256,   0, 257,   0,   0,   0,
 251, 250,   0,   0,   0,   0, 606, 598, 596, 597,
 595, 591,   0, 592,   0, 589, 590,   0,   0, 600,
   0, 599,   0,   0,   0, 594,   0, 255, 253, 254,
 252, 248,   0, 249,   0, 246, 247,   0,   0, 256,
   0, 257,   0,   0,   0, 251,   0,   0,   0,   0,
   0, 263, 598, 596, 597, 595,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 263, 255, 253, 254, 252,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0, 606,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0, 263,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 606,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 263 };
short yypact[]={

2004,-1000,-1000,-1000,-1000, 189,-1000,-1000,-1000,-1000,
-1000,-1000, 575,-1000,2157, 848,-1000, 531,-1000, 396,
 352,1338, 778,-1000, -14,-1000,-1000,-1000, 340, 359,
 -27,1130,  70,  66,-122,  26,-1000,-1000,-1000,1008,
 834,-1000, 340,-1000,-1000,-1000, 100, 357, 729, 268,
-1000,-1000, 531,-1000,-1000,-1000, 347,-1000, -89, 950,
1402,-1000,1445,-1000, 522,1220,-1000, 950,-1000,-1000,
1804,-1000,1445, 362,-1000, 376, 580, 531,-1000, 864,
 531,-1000,-1000,-1000,-106,1311,-1000,1311,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000, 518, 418,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,1816,-1000,-1000,
 -89,-1000,-1000,-1000,  15,-1000,1990, 326, 340,-1000,
-1000,-1000,-1000, 184,-1000,-1000, 427,-1000,1311, 517,
1579,1445,-1000,1332,-1000,-1000,3022,1740, 618, 922,
1874, 941,1874,1874,1874,1874,1874,1874,1874,1874,
1874,-1000, 251, 143,-1000,1311,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,1130, 572, 570,-1000, 274,3022,1402,
  60,-1000,2157,-1000,-1000, -14,-1000, 512,  27, 283,
-1000,-1000,-1000,2099, 244, 572, 570,2885,1938, 508,
-1000, 778,-1000,-1000, 362,-1000, 312,-1000,-1000,3067,
2142, 337,-1000,-1000,-1000,-1000,-1000, 549,-1000,-1000,
-1000,-1000,-1000, 235, 229,-1000, 332, 352, 132,  28,
1311, 112,-1000,-1000, 312, 207, 334,-1000, 798,1113,
  10,1402,-1000, 729, 950, 950, 950, 950, 950, 950,
 950, 950, 950, 950, 950, 950, 950, 950, 950, 950,
 950, 950, 950, 950, 922, 950, 605,1670, 941,-1000,
 950, 849, 404,1402, 922,-1000,-1000,1220, 922, 922,
 922, 922, 922, 922, 922, 922, 922,2025,-1000,1229,
2840, 770,-1000,-1000,1402,1402,-1000, 124, 320,-1000,
-1000,  20,-1000, 496, 412,-1000,1402,-1000, 674,-1000,
1822, 109,-1000, 490,-1000,  20, 857,-1000,-1000,1311,
-1000, 437, 549,-1000,-1000, -96,-1000,-1000,-1000,-1000,
 198,-1000, 279,-1000,-1000, 704, 311,-1000,-1000, 312,
 297,-1000,-1000, 112,-1000,-1000,-1000,1579,-1000, 340,
-1000, 468,-1000,  76, 320,-1000,-1000,-1000,3022,3022,
  83,  83,-142, 877,3241,2867, 524,1548,-142,1061,
1061,1061,3196,3151,3022,3022,2794,-1000,2749, 922,
 950,-1000,-1000,1220,2703,-1000, 785,-1000, 355,1158,
 -81, 150,-1000, 443,-1000, 148, 489, 484,-1000,-1000,
-1000, 510, 546, 110, 459, 452,-1000, 126,-1000,-1000,
 563,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000, 468,
 739, 553, 553,-1000,-1000, 437, -32,-1000,  28,-1000,
 -38,-1000, -38, 326,-1000, 112, 286, 206,2091,-1000,
-1000,-1000, 468, 126, 950,1874,2658, 451,-1000,-1000,
-1000,1119,-1000,-1000,-1000,-1000, 373,1086,-1000,-1000,
-1000,-1000,-1000, 941,-1000,-1000, 437, 498,-1000,-1000,
-1000, -29, 215, 121,  20,1402,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000, 131,-1000, 950,-1000,-1000,-1000,
-1000,-1000,-1000, 196,-1000,3131, 922,1874, 941,-1000,
-1000, 653,-1000,-1000,-1000,-1000,1445, 468,-1000,-1000,
 119, 216,-1000,1402, 552, 329,-1000,-1000, 320,-1000,
3022,-1000, 922,-1000,-1000,-1000,-1000,-1000,-1000, -28,
-1000, 215, 439,1402,-1000, 121, 126,-1000,-1000,-1000,
1052,-1000,-1000, 431,-1000,-1000,-1000,-1000,-1000, 950,
 248,-1000,-1000,-1000, 525, 525, 548,-1000, 319, 313,
-1000, 304, 126,2931,-1000,-1000, 106,-1000, 545,1606,
 610, 922,1874,-1000,-1000, 192,2606, 126,-1000, 950,
-1000,-1000, 525,-1000,-1000, 950,-1000,-1000,1472,1472,
1472,1472,1472,1472,1472,1472,1472,1472,1472,1472,
1472,1472,1472,1472,1472,1472,1472,-1000,-1000,  96,
 922, 950,1536, 922,-1000,-1000,-1000, 623,2561,-1000,
-1000,-1000,-1000,-1000,2515,-1000,   9,2976,  61,  61,
-145,   0,3221,2777,   7, 712,-145,1024,1024,1024,
3176,2231,2976,2976,2470,-1000, 585, 422,2424, 922,
 950,-1000,-1000, 950,-1000,-1000,-1000,-1000,-1000,-1000,
 530,1472, 525,-1000,1874,2379,-1000,2333,-1000, 126,
1445, -75,3086,-1000, 922,1874, 950,-1000,2099, 421,
 922,2288, 414,-1000,-1000,-1000,-1000 };
short yypgo[]={

   0, 887,  31,  26,  20, 457,  10, 884,   2,   4,
 883, 325, 512, 607, 880, 121,  13,   8,  24,  44,
 879, 876,  49, 874, 872,  81, 870,  69, 717,   9,
 868,  16, 860,   6, 857, 856, 834,  28, 436, 247,
  59, 222, 829,   7,  17,  27,  87, 826,  33,  12,
  30, 819,  25, 816,  19,  84,  48, 738,   0,  21,
 742, 487,  82, 115, 815, 814, 812,  76, 811, 808,
 796, 795,   3, 791,  11,  37,  52, 790,  29,  36,
 102, 788, 787, 786, 110, 782, 774, 760, 759, 754,
 747, 778,  18, 741, 737,  14, 736, 729, 725, 718,
 715, 710, 709, 705, 703, 678, 675, 669, 645,  39,
 644 };
short yyr1[]={

   0,  10,  10,  10,  10,  10,  10,  81,  83,  80,
  64,  64,  64,  64,  64,  70,  70,   1,   1,   1,
   1,   1,   2,   2,  85,   4,   4,   4,  86,   3,
   3,   3,  87,  69,  84,  88,   6,   6,   7,   7,
   8,   8,   5,   5,  25,  89,  25,  25,  90,  25,
  26,  26,   9,   9,  91,  92,  62,  62,  62,  14,
  14,  14,  14,  14,  14,  14,  13,  13,  13,  13,
  13,  13,  79,  79,  78,  78,  20,  20,  20,  93,
  15,  94,  15,  15,  16,  16,  82,  82,  82,  95,
  95,  49,  49,  49,  49,  17,  96,  17,  17,  97,
  22,  22,  22,  22,  98,  98,  72,  72,  73,  73,
  74,  74,  74,  74,  74,  21,  21,  21,  18,  18,
  19,  19,  23,  23,  23,  24,  24,  24,  24,  24,
  24,  24,  24,  27,  27,  27,  27,  67,  67,  67,
  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,
  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,
  67,  67,  67,  60,  58,  58,  61,  61,  75,  75,
  75,  77,  77,  28,  28,  28,  28,  28,  28,  28,
  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
  48,  48,  48,  48,  48,  48,  48,  54,  54,  54,
  43,  43,  43,  43,  43,  45,  45,  30,  30,  30,
  31,  32,  56,  99,  33,  33,  33,  35,  35,  35,
  35, 100,  35,  35, 102, 101,  34,  34,  34,  34,
  34,  34,  34,  34,  34,  34, 103,  34, 104,  34,
 105,  34, 106,  34, 107,  34, 108,  34,  34,  65,
  65,  66,  71,  71,  37,  36,  36,  29,  29,  39,
  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,
  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,
  39,  39,  39,  39,  38,  38,  38,  38,  38,  38,
  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
  59,  59,  59,  59,  59,  59,  59,  59,  42,  42,
  42,  42,  42,  42,  42,  63,  57,  57,  57,  41,
  41,  41,  44, 109,  47,  47,  47,  47,  46,  55,
  51, 110,  51,  76,  52,  53,  53,  50,  50,  68,
  68,  68,  12,  12,  12,  12,  12,  12,  12,  12,
  12,  11,  11 };
short yyr2[]={

   0,   1,   1,   1,   2,   1,   1,   0,   0,   7,
   1,   1,   1,   1,   2,   1,   1,   1,   1,   1,
   1,   5,   4,   2,   0,   7,   5,   5,   0,   6,
   4,   4,   0,   4,   0,   0,   3,   0,   1,   3,
   3,   4,   2,   0,   1,   0,   4,   2,   0,   4,
   1,   3,   3,   2,   1,   1,   1,   4,   4,   1,
   1,   1,   2,   1,   1,   1,   1,   2,   2,   2,
   2,   2,   3,   1,   1,   1,   1,   1,   2,   0,
   5,   0,   6,   2,   1,   3,   3,   1,   0,   2,
   2,   1,   2,   2,   2,   1,   0,   4,   0,   0,
   5,   2,   5,   2,   0,   2,   2,   0,   1,   3,
   1,   2,   2,   3,   3,   2,   4,   7,   1,   1,
   1,   1,   2,   0,   2,   1,   2,   2,   1,   1,
   1,   2,   3,   1,   2,   2,   2,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   2,   2,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   2,   2,   1,   0,   2,
   5,   1,   3,   2,   4,   2,   4,   6,   4,   4,
   6,   1,   3,   2,   4,   2,   2,   2,   2,   3,
   1,   2,   0,   2,   2,   2,   3,   0,   2,   2,
   0,   2,   2,   4,   4,   0,   2,   0,   2,   2,
   2,   0,   3,   0,   4,   2,   3,   1,   1,   1,
   2,   0,   5,   4,   0,   2,   2,   1,   3,   3,
   1,   1,   1,   3,   5,   3,   0,   9,   0,   4,
   0,   4,   0,   4,   0,   5,   0,   4,   3,   0,
   2,   3,   4,   3,   1,   1,   3,   1,   3,   3,
   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
   3,   3,   3,   3,   3,   3,   5,   3,   2,   5,
   3,   6,   1,   2,   3,   3,   3,   3,   3,   3,
   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
   3,   5,   3,   2,   5,   3,   6,   1,   2,   0,
   2,   2,   3,   3,   2,   2,   2,   2,   2,   2,
   2,   2,   2,   2,   2,   4,   3,   4,   4,   3,
   4,   4,   3,   4,   4,   3,   4,   4,   1,   2,
   3,   3,   1,   3,   1,   1,   1,   1,   1,   1,
   2,   3,   4,   2,   4,   3,   3,   3,   4,   4,
   5,   5,   6,   6,   4,   4,   1,   1,   2,   1,
   2,   2,   4,   1,   1,   1,   2,   2,   2,   2,
   2,   0,   5,   1,   5,   3,   1,   1,   0,   0,
   1,   2,   1,   1,   2,   2,   2,   2,   1,   3,
   2,   3,   1 };
short yychk[]={

-1000, -10,  -1,  72,   0, 182,  74, -80,  -9,  -4,
  -3,  -2,   1, 185, -13, -28, -14, -62, -27,  80,
 -60, -12, -76,  97, -58, -22, -15, 179, -61,  85,
  47,  24,  50,  52, -63, 173,  40, -57, -21, 156,
  13, 123, 209, 178, 160,  73,  40, -81, -28, -26,
  72,  97, -62, -22, -15, 179,  80, -25, -58,  69,
  70,  72,  -5, -52,  40, -76, -11,  42,  46, -52,
  40, -11, -76,  45, -27,  80, -28, -62,  97, -28,
 -62, 179, -57, 123, -63, -91,  58,  58, 123, -67,
 -46,  54,  55,  50,  52,  65,  64,  94,  92,  93,
  91,  58,  60,  66,  67,  40,  42,  46,  47,  95,
  90,  70,  23,   9,  44,  71, 180, -47,  97, -62,
 -58,  97,  97, 178, 173,  97, -23, -18, -61, 179,
  73,  80,  73, -20, -18, 179, -58, -61, -91,  81,
  58,  -5,  70,  71,  72,  69, -38,   9, 160, -40,
  99,  23, -44,  50,  52,  55,  54,  46,  47,  95,
  30, -41, -60, -58, -42,-109,  86,  82,  83,  81,
  84,  34,  80,  24,  97, -62,  40, -29, -38,  73,
 -84,  -9, -13, 182, -62, -58,  41, -37, -53, -36,
 -50, -29, -51, -13, -58,  97, -62, -38,  50, -37,
  41, 173, -27,  80,  45,  41, -79, -78, -55, -38,
 -13, -79,  41,  43,  97, -62, -45, -12,  97,  74,
 -24, -80,  -9,  -4,  -3,  -2, 175, -60, -72,  69,
 -91, -93,  73, 179, -79,  41, -82, -95, 156, -13,
 -84, -90, -25, -28, -89,  70,  54,  55,  50,  52,
  65,  64,  94,  92,  93,  91,  58,  60,  66,  67,
  90,  71,  68, 180, -40,  42, 160,   9,  23,  95,
  42,  44,  45,  40, -40, -44, -55,-109, -40, -40,
 -40, -40, -40, -40, -40, -40, -40, -44, -41,  47,
 -38, -13, -67, -46,  40,  40,  72, -37, -86, 124,
 125, -75,  41, -68,  71, 155,  71, -62, -48,  80,
 -12, -76,  43,  80,  41, -75, -28, -27, -92,  71,
  60, -54, -12,  60, -45, -63, -97,  72,  72,  69,
 -27,  73, -73, -74, -19, 175,  97,  80, -62, -79,
 -16, -17,  80, -94, -92,  72,  60,  71, -70, -61,
  80, -49,  80, -12, -85, 124, 125, -29, -38, -38,
 -38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
 -38, -38, -38, -38, -38, -38, -38, -38, -38, -40,
  42, -44, -55,-109, -38, -41, 176, -59, -60,  47,
  97, -58, -41, 176, -59, -60, -37, -37, -18,  97,
  41, -43, -12,  40, -37, -37,  74,  -6,  69,  97,
  99,  41, -50, 155, -29, -11, -52,  70, -61, -48,
 -48,  41,  41, -78, -11, -54, -98,  72,  71, -19,
  97, -19, 175, -92,  74,  71, -96, -16, -83, -95,
 -11, -52, -49,  -6,  69,  43, -38, -37,  43, -41,
 123,  47, -41, 123, -18,  97, 160,  47, -41, 123,
 -41, 123,  41,  41, -11,  41, -43, -43,  41,  41,
 -33,  73, -88,  40, -75,-110,  41, -52, -52, -69,
 127, -74, -19, -19, -72, -17,  70,  74, -64,  -9,
  -4,  -3,  -2, -22, -33, -38, -40,  43,  41, -18,
  97,  47, -18,  97, -44, -55,-109,  41, -99,  74,
 256,  -7,  -8,  40, -19, -77, -18, -29, -87,  73,
 -38,  72, -40, -44, -55,  97, -18, -52, -11, -30,
  74,  71, -37,  40,  41,  71,  -6, 185, -31,  74,
 -32,  -8,  41, -37, -18, -33, -34, -35,  72,  28,
  97,  -9,  -4, -33,  20,  39,  16,  33,  80, 123,
   4,   8, 100, -39,   3,   7,  19,  10,   1,   9,
 160, -40,  99,  41,-101,-102, -38,  81, -56,  40,
 -56,  40,-104,  69,  69,-107,  69, -33,  70,  54,
  55,  50,  52,  65,  64,  94,  92,  93,  91,  60,
  58,  66,  67,  90,  71,  68, 180,  80,-100,  40,
 -40,  42,   9, -40,  72,  72, -33, -31, -38, -31,
-103, -56,-105,-106, -38,-108, -65, -39, -39, -39,
 -39, -39, -39, -39, -39, -39, -39, -39, -39, -39,
 -39, -39, -39, -39, -39, -39, -31,  81, -38, -40,
  42,  12,  41, -31, -31, -31, -31,  69, -31, -66,
  98,  69,  39,  41,  43, -38, -31, -38, -31, -71,
 -76,  40, -39, -56, -40,  43,  72, -33, -13, 155,
 -40, -38, -48,  41,  41,  41, -31 };
short yydef[]={

   0,  -2,   1,   2,   3,  60,   5,   6,  17,  18,
  19,  20,   0,   7,   0,  43,  66,  61, 181, 133,
   0,   0,   0,  59, 163,  63,  64,  65,  56,   0,
   0,   0, 392, 393,   0, 398, 383, 164, 123,   0,
   0, 167,   0, 366, 367,   4,   0,   0,  -2,   0,
  53,  67,  68,  69,  70,  71, 133,  50, 163, 309,
 309,  23,  34, 173, 383,  -2, 188, 309, 402, 175,
  -2, 187, 388,   0, 183, 133, 185, 186, 395,   0,
   0,  62, 165, 166,   0, 309,  54, 309, 134, 135,
 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
 146, 147, 148, 149, 150,   0,   0, 153, 154, 155,
 156, 157, 158, 159, 160, 161, 162, 205, 374, 375,
   0, 394, 396, 368, 397, 400,   0,  -2, 119, 103,
 115, 118,  79,  83,  76,  77,   0, 119, 309,   0,
  88,  34,  48,   0,  52,  45,  47,   0, 367, 307,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0, 338,   0, 163, 342, 309, 344, 345, 346, 347,
 348, 349, 369,   0,   0,   0, 373,   0, 257, 309,
  28,  42,   0,  60,  61,   0, 168,   0, 389, 254,
 386, 255, 387, 192, 163,  59,  61,   0,   0,   0,
 168,   0, 182, 133,   0, 189,   0,  73,  74,  75,
 197,   0, 151, 152, 376, 377, 378, 205, 399,  99,
 122, 124, 125, 129, 128, 130,   0,   0,   0,   0,
 309,  98,  81,  78,   0,   0,   0,  87,   0,   0,
  24, 309,  51,  44, 309, 309, 309, 309, 309, 309,
 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
 309, 309, 309, 309, 303, 309, 367,   0,   0, 314,
 309,   0,   0, 309, 308, 310, 311, 309, 315, 316,
 317, 318, 319, 320, 321, 322, 323, 324, 339,   0,
   0, 200, 370, 371, 309, 309,  22,   0,  37,  30,
  31, 174, 176,   0, 388, 390, 309,  68, 380, 190,
 192, 192, 401, 369, 178, 179,   0, 184,  57, 309,
  55, 379, 197,  58, 206,   0, 104, 126, 127, 131,
 183, 116, 106, 108, 110,   0,   0, 120, 121,   0,
   0,  84,  -2,  98, 365,  21,   8,   0,  89,  -2,
  -2,  90,  91,   0,  37,  26,  27,  49,  46, 284,
 285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
 295, 296, 297, 298, 299, 300,   0, 302,   0, 305,
 309, 312, 313, 309,   0, 326,   0, 329,   0,   0,
   0, 163, 332,   0, 335,   0,   0,   0, 340, 341,
 343,   0, 200, 200,   0,   0, 258,   0,  35, 169,
   0, 168, 385, 391, 256, 194, 195, 381, 191, 193,
   0,   0,   0,  72, 199, 198, 100, 132,   0, 111,
   0, 112,   0,  -2,  80,  98,   0,   0,   0,  86,
  93,  94,  92,   0, 309,   0,   0,   0, 325, 327,
 328,   0, 330, 331, 350, 353,   0,   0, 333, 334,
 336, 337, 364,   0, 202, 372, 201,   0, 358, 359,
  29,  -2,   0,   0, 384, 309, 196, 177, 180, 105,
  32, 109, 113, 114,   0,  85, 309,  82,   9,  10,
  11,  12,  13,  63,  25, 301, 304,   0,   0, 351,
 355,   0, 356, 357, 360, 361,   0,   0, 207, 215,
   0,  36,  38, 309,   0,   0, 171, 382,  37, 117,
  97,  14, 306, 362, 363, 352, 354, 203, 204, 211,
 216,   0,   0, 309, 170,   0,   0, 208, 209, 214,
   0,  39,  40,   0, 172,  33, 210, 224, 227, 309,
  59, 230, 231, 232,   0,   0,   0, 238, 369, 167,
 244,   0,   0, 217, 218, 219,   0, 221,   0,   0,
 367, 282,   0,  41, 226,   0,   0,   0, 211, 309,
 211, 236,   0, 240, 242, 309, 246, 249,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0, 220, 211,   0,
 278, 309,   0, 283, 225, 228, 229, 233,   0, 235,
 211, 211, 211, 211,   0, 211, 248, 259, 260, 261,
 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
 272, 273, 274, 275,   0, 277,   0,   0,   0, 280,
 309, 211, 212, 309, 239, 241, 243, 211, 247, 250,
   0,   0,   0, 223,   0,   0, 234,   0, 245,   0,
   0, 383, 276, 222, 279,   0, 309, 251, 192,   0,
 281,   0,   0, 253, 211, 252, 237 };
# define yaccpar_sccsid "@(#)yaccpar 4.1 (Berkeley) 2/11/83"

# define YYFLAG -1000
# define YYERROR goto yyerrlab
# define YYACCEPT return(0)
# define YYABORT return(1)

/*	parser for yacc output	*/

#ifdef YYDEBUG
#if YYDEBUG != 0
int yydebug = 0; /* 1 for debugging */
#endif
#endif

YYSTYPE yyv[YYMAXDEPTH]; /* where the values are stored */
int yychar = -1; /* current input token number */
int yynerrs = 0;  /* number of errors */
short yyerrflag = 0;  /* error recovery flag */

yyparse() {

	short yys[YYMAXDEPTH];
	short yyj, yym;
	register YYSTYPE *yypvt;
	register short yystate, *yyps, yyn;
	register YYSTYPE *yypv;
	register short *yyxi;

	yystate = 0;
	yychar = -1;
	yynerrs = 0;
	yyerrflag = 0;
	yyps= &yys[-1];
	yypv= &yyv[-1];

 yystack:    /* put a state and value onto the stack */

#ifdef YYDEBUG
#if YYDEBUG != 0
	if( yydebug  ) printf( "state %d, char 0%o\n", yystate, yychar );
#endif
#endif
		if( ++yyps> &yys[YYMAXDEPTH] ) { yyerror( "yacc stack overflow" ); return(1); }
		*yyps = yystate;
		++yypv;
		*yypv = yyval;

 yynewstate:

	yyn = yypact[yystate];

	if( yyn<= YYFLAG ) goto yydefault; /* simple state */

	if( yychar<0 ) if( (yychar=yylex())<0 ) yychar=0;
	if( (yyn += yychar)<0 || yyn >= YYLAST ) goto yydefault;

	if( yychk[ yyn=yyact[ yyn ] ] == yychar ){ /* valid shift */
		yychar = -1;
		yyval = yylval;
		yystate = yyn;
		if( yyerrflag > 0 ) --yyerrflag;
		goto yystack;
		}

 yydefault:
	/* default state action */

	if( (yyn=yydef[yystate]) == -2 ) {
		if( yychar<0 ) if( (yychar=yylex())<0 ) yychar = 0;
		/* look through exception table */

		for( yyxi=yyexca; (*yyxi!= (-1)) || (yyxi[1]!=yystate) ; yyxi += 2 ) ; /* VOID */

		while( *(yyxi+=2) >= 0 ){
			if( *yyxi == yychar ) break;
			}
		if( (yyn = yyxi[1]) < 0 ) return(0);   /* accept */
		}

	if( yyn == 0 ){ /* error */
		/* error ... attempt to resume parsing */

		switch( yyerrflag ){

		case 0:   /* brand new error */

			yyerror( "syntax error" );
		yyerrlab:
			++yynerrs;

		case 1:
		case 2: /* incompletely recovered error ... try again */

			yyerrflag = 3;

			/* find a state where "error" is a legal shift action */

			while ( yyps >= yys ) {
			   yyn = yypact[*yyps] + YYERRCODE;
			   if( yyn>= 0 && yyn < YYLAST && yychk[yyact[yyn]] == YYERRCODE ){
			      yystate = yyact[yyn];  /* simulate a shift of "error" */
			      goto yystack;
			      }
			   yyn = yypact[*yyps];

			   /* the current yyps has no shift onn "error", pop stack */

#ifdef YYDEBUG
#if YYDEBUG != 0
			   if( yydebug ) printf( "error recovery pops state %d, uncovers %d\n", *yyps, yyps[-1] );
#endif
#endif
			   --yyps;
			   --yypv;
			   }

			/* there is no state on the stack with an error shift ... abort */

	yyabort:
			return(1);


		case 3:  /* no shift yet; clobber input char */

#ifdef YYDEBUG
#if YYDEBUG != 0
			if( yydebug ) printf( "error recovery discards char %d\n", yychar );
#endif
#endif

			if( yychar == 0 ) goto yyabort; /* don't discard EOF, quit */
			yychar = -1;
			goto yynewstate;   /* try again in the same state */

			}

		}

	/* reduction by production yyn */

#ifdef YYDEBUG
#if YYDEBUG != 0
		if( yydebug ) printf("reduce %d\n",yyn);
#endif
#endif
		yyps -= yyr2[yyn];
		yypvt = yypv;
		yypv -= yyr2[yyn];
		yyval = yypv[1];
		yym=yyn;
			/* consult goto table to find next state */
		yyn = yyr1[yyn];
		yyj = yypgo[yyn] + *yyps + 1;
		if( yyj>=YYLAST || yychk[ yystate = yyact[yyj] ] != -yyn ) yystate = yyact[yypgo[yyn]];
		switch(yym){
			
case 1:
# line 679 "gram.y"
{	return 2; } break;
case 2:
# line 680 "gram.y"
{	return 1; } break;
case 3:
# line 681 "gram.y"
{	return 0; } break;
case 4:
# line 683 "gram.y"
{
				set_linkage(yypvt[-1].s);
				bl_level--;
				return 1;
			} break;
case 5:
# line 689 "gram.y"
{
				set_linkage(0);
				bl_level++;
				return 1;
			} break;
case 6:
# line 694 "gram.y"
{  return 1; } break;
case 7:
# line 698 "gram.y"
{	
			PUSH_TEMPLATE_SCOPE();//SYM
// error('d',"template seen: in_class_decl %d", in_class_decl);
			if (in_class_decl) {
				must_be_friend = 1;
				if (templp->in_progress == true) // inside template
					templp->save_templ = new templ_state;
			}
			else must_be_friend = 0;
			templp->start() ;
		 } break;
case 8:
# line 710 "gram.y"
{
			templp->enter_parameters(); 
		 } break;
case 9:
# line 714 "gram.y"
{
			templp->end(yypvt[-0].pn);
			POP_SCOPE(); //SYM
			if (in_class_decl && templp->save_templ) {
				delete templp->save_templ;
				templp->save_templ = 0;
			}
			else { 
				templp->in_progress = false;
				bound_expr_tbl->reinit();
			}
                  //SYM -- goto mod removed
                 } break;
case 11:
# line 730 "gram.y"
{ goto mod; } break;
case 12:
# line 731 "gram.y"
{ goto mod; } break;
case 14:
# line 734 "gram.y"
{ 
			Pname pn = yypvt[-1].pb->aggr();
			/* basetype:aggr() does not return the name for a forward 
		    	 * declaration, so extract it directly */
                    	yyval.p = (pn ? pn : yypvt[-1].pb->b_name);
                    	DECL_TYPE = 0;
		  } break;
case 16:
# line 745 "gram.y"
{ yyval.pn = Ncopy(yypvt[-0].pn) ;} break;
case 17:
# line 749 "gram.y"
{	
				//SYM -- tn stuff removed
				if (yypvt[-0].pn==0) yyval.i = 1; 
			} break;
case 18:
# line 753 "gram.y"
{ goto mod; } break;
case 19:
# line 755 "gram.y"
{ mod: //SYM -- tn stuff removed
				Pname n = yypvt[-0].pn;
				if ( n && n->n_qualifier ) {//SYM
					if ( n->n_qualifier->n_template_arg != template_type_formal )
						UNSET_SCOPE();
					if ( n->n_qualifier == sta_name )
						n->n_qualifier = 0;
				}
			} break;
case 21:
# line 766 "gram.y"
{	Pname n = new name(make_name('A'));
				n->tp = new basetype(ASM,0);
				Pbase(n->tp)->b_name = Pname(yypvt[-2].s);
				yyval.p = n;
			} break;
case 22:
# line 774 "gram.y"
{
				err_name = yypvt[-3].pn;
				if(err_name) err_name->n_initializer = yypvt[-1].pe;
				goto fix;
			} break;
case 23:
# line 780 "gram.y"
{
				Ptype t;
				err_name = yypvt[-1].pn;
			fix:
				if (err_name == 0) {
					error("syntax error:TX");
					yyval.p = Ndata(defa_type,err_name);
				}
				else if ((t=err_name->tp) == 0) {
					error("TX for%n",err_name);
					yyval.p = Ndata(defa_type,err_name);
				}
				else if (t->base==FCT) {
					if (Pfct(t)->returns==0)
						yyval.p = Nfct(defa_type,err_name,0);
					else
						yyval.p = Ndata(0,err_name);
				}
				else {
					error("syntax error:TX for%k%n",t->base,err_name);
					yyval.p = Ndata(defa_type,err_name);
				}
				if ( err_name && err_name->n_qualifier ) {
					if ( err_name->n_qualifier->n_template_arg != template_type_formal )
						UNSET_SCOPE();
					if ( err_name->n_qualifier == sta_name )
						err_name->n_qualifier = 0;
				}
			} break;
case 24:
# line 812 "gram.y"
{	if ( yychar == LC ) --bl_level;
				Pname n = Nfct(yypvt[-3].p,yypvt[-2].pn,dummy);
				Fargdcl(n->tp,name_unlist(yypvt[-1].nl),n);
				arg_redec( yypvt[-2].pn );
				yyval.pn = n;
			 	if ( yychar == LC ) ++bl_level;
				Ctbl->k_name = n;
			} break;
case 25:
# line 821 "gram.y"
{	Pname n = yypvt[-2].pn;//SYM
				if ( !in_typedef ) {
					Fbody(n->tp) = Pblock(yypvt[-0].p);//SYM
					Finit(n->tp) = yypvt[-1].pn;
				}
				yyval.p = n;
				NOT_EXPECT_ID();
			} break;
case 26:
# line 830 "gram.y"
{
				Pname n = Nfct(yypvt[-4].p,yypvt[-3].pn,dummy);
				Fargdcl(n->tp,name_unlist(yypvt[-2].nl),n);
				yypvt[-0].q->retval.pn = n;
				yyval.p = n;
				NOT_EXPECT_ID();
			} break;
case 27:
# line 838 "gram.y"
{
				if (!templp->in_progress)
					error(&yypvt[-3].pn->where,"syntax error -- did you forget a ';'?");
				Pname n = Nfct(yypvt[-4].p,yypvt[-3].pn,0);
				yyval.p = n;
				NOT_EXPECT_ID();
			} break;
case 28:
# line 848 "gram.y"
{	if ( yychar == LC ) --bl_level;
			 	Pname n = Nfct(defa_type,yypvt[-2].pn,dummy);
				Fargdcl(n->tp,name_unlist(yypvt[-1].nl),n);
				arg_redec( yypvt[-2].pn );
				yyval.pn = n;
			 	if ( yychar == LC ) ++bl_level;
				Ctbl->k_name = n;
			} break;
case 29:
# line 857 "gram.y"
{	Pname n = yypvt[-2].pn;//SYM
				Fbody(n->tp) = Pblock(yypvt[-0].p);//SYM
				if ( yypvt[-1].pn && yypvt[-1].pn->n_list && 
     					ccl && ccl->csu == UNION )  
						error( "multiple initializers in unionK %s::%n", yypvt[-5].pn->string, yypvt[-5].pn );
				Finit(n->tp) = yypvt[-1].pn;
				yyval.p = n;
				NOT_EXPECT_ID();
			} break;
case 30:
# line 867 "gram.y"
{
				Pname n = Nfct(defa_type,yypvt[-3].pn,dummy);
				Fargdcl(n->tp,name_unlist(yypvt[-2].nl),n);
				yypvt[-0].q->retval.pn = n;
				yyval.p = n;
				NOT_EXPECT_ID();
			} break;
case 31:
# line 875 "gram.y"
{
				if (explicit_template_definition  == 0 )
					error(&yypvt[-3].pn->where,"badD of%n -- did you forget a ';'?",yypvt[-3].pn);
				else {
			             Pname n = pti->get_tname();
				     if (yypvt[-3].pn->n_oper == DTOR)
					error('s',"explicitYZL for destructor of specializedYC%n -- please drop the parameter list",n);
				     else
					error('i',"specialializedYC%n: declaration problem: %s",n,yypvt[-3].pn->string);
				     error('i', "cannot recover from previous error" );
				}
				Pname n = Nfct(defa_type,yypvt[-3].pn,0);
				yyval.p = n;
				NOT_EXPECT_ID();
			} break;
case 32:
# line 893 "gram.y"
{	PUSH_ARG_SCOPE();//SYM
                        	arg_redec(yypvt[-0].pn);
                        	Ctbl->k_name = yypvt[-0].pn;
                   	} break;
case 33:
# line 898 "gram.y"
{
				Finit(yypvt[-3].pn->tp) = yypvt[-1].pn;
				Pfct(yypvt[-3].pn->tp)->body = Pblock(yypvt[-0].p);
				yyval.pn = yypvt[-3].pn;
				NOT_EXPECT_ID();
			} break;
case 34:
# line 908 "gram.y"
{
			// if parsing implicit inline def, save body
			//   of function for parsing after class def
			if ( Ctbl->k_id != ARG )
				error('i',"expectingA table in check_inline!");
			switch ( NEXTTOK() ) {
			case LC: case COLON:
				if ( in_class_decl ) {
					// mem or friend inline def
					// save text of mem_init & ftn
					la_backup(yychar,yylval);
					// yylval used as dummy...
					la_backup(FDEF, yylval);
					if ( yylval.q = save_text() ) {
						yychar = EMPTY;
						POP_SCOPE();//SYM
					} else { // syntax error
						// just parse in place
						yylex(); // FDEF
						yylex();
						yychar = NO_ID;
						hoist_al();//SYM
					}
				} // if in_class_decl
				//SYM -- else non-nested ftn def
				//SYM -- arg table will become block table
				break;
			default:
				la_backup(yychar,yylval);
				yychar = NO_ID; // 'graceful' recovery
				hoist_al();//SYM
				break;
			}
		   } break;
case 35:
# line 944 "gram.y"
{ ++in_binit_list; } break;
case 36:
# line 945 "gram.y"
{	
				yyval.p = yypvt[-0].p; 
				in_arg_list = 0;
				--in_binit_list;
			} break;
case 37:
# line 951 "gram.y"
{	yyval.p = 0; } break;
case 38:
# line 955 "gram.y"
{ yyval.p = yypvt[-0].p; } break;
case 39:
# line 957 "gram.y"
{ yyval.pn = yypvt[-0].pn;  yyval.pn->n_list = yypvt[-2].pn; } break;
case 40:
# line 961 "gram.y"
{
				yyval.pn = new name;
				yyval.pn->n_initializer = yypvt[-1].pe;
			} break;
case 41:
# line 966 "gram.y"
{
				Pname n = Ncopy(yypvt[-3].pn);
				n->base = yypvt[-3].pn->base;
				n->tp = yypvt[-3].pn->tp;
				n->n_initializer = yypvt[-1].pe;
				yyval.pn = n;
			} break;
case 42:
# line 981 "gram.y"
{	if (yypvt[-0].pn == 0)
					error("badAD");
				else if (yypvt[-0].pn->tp->base == FCT)
					error("FD inAL (%n)",yypvt[-0].pn);
				else if (yypvt[-1].p)
                                        yypvt[-1].nl->add_list(yypvt[-0].pn);
				else
					yyval.nl = new nlist(yypvt[-0].pn);
			} break;
case 43:
# line 991 "gram.y"
{
				PUSH_ARG_SCOPE();//SYM
                                yyval.p = 0; 
			} break;
case 45:
# line 999 "gram.y"
{
                                if ( in_typedef ) {
                                        error("Tdef field");
                                        in_typedef = 0;
                                }
                        //      ENTER_NAME(yypvt[-1].pn);
                        } break;
case 46:
# line 1007 "gram.y"
{	yyval.p = yypvt[-3].pn;
				yyval.pn->tp = new basetype(FIELD,yypvt[-0].pn);
		 	} break;
case 47:
# line 1011 "gram.y"
{	yyval.p = new name;
				yyval.pn->tp = new basetype(FIELD,yypvt[-0].pn);
                                if ( in_typedef ) {
                                        error("Tdef field");
                                        in_typedef = 0;
                                }
			} break;
case 48:
# line 1019 "gram.y"
{
                        //      ENTER_NAME(yypvt[-1].pn);
                        } break;
case 49:
# line 1023 "gram.y"
{       Pexpr e = yypvt[-0].pe;
                                if (e == dummy) error("emptyIr");
                                yypvt[-3].pn->n_initializer = e;
                                init_seen = 0;
                        } break;
case 50:
# line 1031 "gram.y"
{	Pname n = yypvt[-0].pn;
				if (n) {
				    yyval.nl = new nlist(n);
				    if ( n->n_qualifier ) {//SYM
					if ( n->n_qualifier->n_template_arg != template_type_formal )
						UNSET_SCOPE();
					if ( n->n_qualifier == sta_name )
					    n->n_qualifier = 0;
				    }
				}
				if ( NEXTTOK() == CM && la_look() == TNAME ) 
					EXPECT_ID();
			} break;
case 51:
# line 1045 "gram.y"
{	Pname n = yypvt[-0].pn;
				if (yypvt[-2].p)
					if (n)
						yypvt[-2].nl->add(n);
					else
						error("DL syntax");
				else {
					if (n) yyval.nl = new nlist(n);
					error("DL syntax");
				}
				if ( n ) {
				    if ( n->n_qualifier ) {//SYM
					if ( n->n_qualifier->n_template_arg != template_type_formal )
						UNSET_SCOPE();
					if ( n->n_qualifier == sta_name )
					    n->n_qualifier = 0;
				    }
				}
				if ( NEXTTOK() == CM && la_look() == TNAME ) 
					EXPECT_ID();
			} break;
case 52:
# line 1069 "gram.y"
{ 
				extern int co_hack;
				co_hack = 1;
				/*$$ = Ndata($1,name_unlist($<nl>2));*/
				Pname n = Ndata(yypvt[-2].p,name_unlist(yypvt[-1].nl)); 
//error('d',"data_dcl:type decl_list sm: %n%t in_typedef%t in_tag%n",n,n->tp,in_typedef,in_tag);
				//SYM redef check removed
				in_typedef = 0;
				in_friend = 0;
				in_tag = 0;
				co_hack = 0;
				DECL_TYPE = 0; 
				yyval.p = n;
			} break;
case 53:
# line 1084 "gram.y"
{
				yyval.p = yypvt[-1].pb->aggr(); 
				in_typedef = 0;
				in_friend = 0;
				in_tag = 0;
				DECL_TYPE = 0; 
			} break;
case 54:
# line 1095 "gram.y"
{ templp->parameters_in_progress++; } break;
case 55:
# line 1096 "gram.y"
{ templp->parameters_in_progress--; } break;
case 56:
# line 1098 "gram.y"
{ yyval.pn = templp->check_tname(yypvt[-0].pn) ; } break;
case 57:
# line 1100 "gram.y"
{ 
			int sm = NEXTTOK()==SM;
			if (in_friend) in_friend += sm;
			bit flag=0;
			if (dtpt_opt && in_typedef &&  
				!templp->parameters_in_progress &&
				curloc.file == first_file)
				flag=1;
		    	yyval.pn = parametrized_typename(yypvt[-3].pn,
						  (expr_unlist(yypvt[-1].el)),in_friend) ; 
			if (flag)
				righttname=yyval.pn;
		  } break;
case 58:
# line 1114 "gram.y"
{ extern Pbase any_type;
		    error("%n was not aZizedT.", yyval.pn) ;
                    yyval.pn= yypvt[-3].pn->tdef() ;
                    yyval.pn->tp = any_type ; } break;
case 59:
# line 1123 "gram.y"
{ 
				yyval.p = new basetype(yypvt[-0].t,0); 
				if ( yypvt[-0].t == TYPEDEF ) {
					in_typedef = yyval.pt;
// error('d',"typedef: ccl %t ", ccl, yypvt[-0].pn);
					if (ccl && ccl->class_base==CL_TEMPLATE) {
						if (check_bound_type != not_set)
							error('s',"nested Tdef within nestedC %t withinYC %t",ccl,ccl->in_class);
						else check_bound_type = look_for;
					}
				}
				else if ( yypvt[-0].t == FRIEND ) {
					in_friend = 1;
					must_be_friend = 0;
				}
				else if ( yypvt[-0].t == STATIC && 
					check_bound_type == look_for) {
// error('d',"static: ccl %t ", ccl);
						in_static = 1;
				}
				if (DECL_TYPE == -1) DECL_TYPE = 0;
			} break;
case 60:
# line 1146 "gram.y"
{	yyval.p = new basetype(EXTERN,0);
				yyval.pb->b_linkage = yypvt[-0].s;
				if (DECL_TYPE == -1) DECL_TYPE = 0;
			} break;
case 61:
# line 1151 "gram.y"
{
				yyval.p = new basetype(TYPE,yypvt[-0].pn); 
				if (DECL_TYPE == -1) DECL_TYPE = 0;
			} break;
case 62:
# line 1156 "gram.y"
{ // modified tn_list TNAME
				yyval.p = new basetype(TYPE,yypvt[-0].pn);
				//xxx qualifier currently ignored...
				if (DECL_TYPE == -1) DECL_TYPE = 0;
			} break;
case 65:
# line 1164 "gram.y"
{ 
				if (DECL_TYPE == TNAME)
					yyval.p = new basetype(TYPE,yypvt[-0].pn); 
		//	else if (DECL_TYPE == TSCOPE)
		//	yyval.p = 0;
				else
				if (DECL_TYPE == 0 &&
					yypvt[-0].p->base == TNAME)
						yyval.p = new basetype(TYPE,yypvt[-0].pn); 
				else
					yyval.p = new basetype(yypvt[-0].t,0); 
				DECL_TYPE = -1;
			} break;
case 67:
# line 1181 "gram.y"
{ 
				if ( DECL_TYPE != -1 ) {
					switch (yypvt[-1].pb->base) { 
					case COBJ: case EOBJ:
						Pbase bt;	
						bt = new basetype(0,0);
						*bt = *yypvt[-1].pb;
						DEL(yypvt[-1].pb);
						yypvt[-1].pb = bt;
					}
					yyval.p = yypvt[-1].pb->type_adj(yypvt[-0].t); 
				}
				DECL_TYPE = 0;
			} break;
case 68:
# line 1196 "gram.y"
{
//error('d',"decl_type: %d  $1: %t  $2: %n",DECL_TYPE,yypvt[-1].pb,yypvt[-0].pn);
				if ( DECL_TYPE != -1 ) 
			 		yyval.p = yypvt[-1].pb->name_adj(yypvt[-0].pn);
			/*XXX*/	else if(yypvt[-1].pb==0) yyval.p=new basetype(TYPE,yypvt[-0].pn);
				DECL_TYPE = 0;
			} break;
case 69:
# line 1203 "gram.y"
{ yyval.p = yypvt[-1].pb->base_adj(yypvt[-0].pb); } break;
case 70:
# line 1204 "gram.y"
{ yyval.p = yypvt[-1].pb->base_adj(yypvt[-0].pb); } break;
case 71:
# line 1206 "gram.y"
{ 
				if (DECL_TYPE == TYPE) {
					switch (yypvt[-1].pb->base) { 
					case COBJ: case EOBJ: 
						{
						Pbase bt;
						bt = new basetype(0,0);
						*bt = *yypvt[-1].pb;
						DEL(yypvt[-1].pb);
						yypvt[-1].pb = bt;
						}
					}
					yyval.p = yypvt[-1].pb->type_adj(yypvt[-0].t);  
				}
			/*XXX*/	else if (DECL_TYPE == TSCOPE) {
			/*XXX*/		error('i',"T decl_marker(tscope)");
			/*XXX*/	//	yyval.p = yypvt[-1].p;//ignore(?)
			/*XXX*/	}
				else
					yyval.p = yypvt[-1].pb->name_adj(yypvt[-0].pn); 
				DECL_TYPE = -1;
			} break;
case 72:
# line 1231 "gram.y"
{yypvt[-2].el->add(new expr(ELIST,yypvt[-0].pe,NULL)) ; } break;
case 73:
# line 1233 "gram.y"
{ yyval.el = new elist(new expr(ELIST,yypvt[-0].pe,NULL)); } break;
case 74:
# line 1237 "gram.y"
{
				yypvt[-0].pn->n_template_arg = template_actual_arg_dummy;
				yyval.pe = yypvt[-0].pn; /* keep yacc happy */ 
			} break;
case 75:
# line 1242 "gram.y"
{ 
				if (yypvt[-0].pe == dummy) error("emptyYZL");
				yyval.pe = yypvt[-0].pe; 
			} break;
case 76:
# line 1250 "gram.y"
{ yyval.p = enumcheck( yypvt[-0].pn); } break;
case 77:
# line 1252 "gram.y"
{
			if ( DECL_TYPE != TNAME ) {
				error("syntax error -- enum%k",yypvt[-0].t);
				yyval.p = 0;
			} else 
				yyval.p = enumcheck( yypvt[-0].pn);
		} break;
case 78:
# line 1260 "gram.y"
{
			if ( DECL_TYPE != TNAME ) {
				error("enum declaration syntax");
				yyval.p = 0;
			} else 
				yyval.pn = enumcheck(yypvt[-0].pn);
			if (in_typedef && in_typedef->base == 0)
				in_typedef->defined = TNAME_SEEN;
			//xxx qualifier currently ignored...
		} break;
case 79:
# line 1272 "gram.y"
{ ++in_class_decl; } break;
case 80:
# line 1273 "gram.y"
{ --in_class_decl; yyval.p = end_enum(0,yypvt[-1].nl); } break;
case 81:
# line 1274 "gram.y"
{ ++in_class_decl; } break;
case 82:
# line 1275 "gram.y"
{ --in_class_decl; yyval.p = end_enum(yypvt[-4].pn,yypvt[-1].nl); } break;
case 83:
# line 1276 "gram.y"
{ yyval.pb = (Pbase)yypvt[-0].pn->tp; } break;
case 84:
# line 1280 "gram.y"
{	if (yypvt[-0].p) yyval.nl = new nlist(yypvt[-0].pn); } break;
case 85:
# line 1282 "gram.y"
{	if( yypvt[-0].p)
					if (yypvt[-2].p)
						yypvt[-2].nl->add(yypvt[-0].pn);
					else
						yyval.nl = new nlist(yypvt[-0].pn);
			} break;
case 88:
# line 1293 "gram.y"
{ 
				yyval.pn = NULL;
				error("emptyYZL");
			} break;
case 89:
# line 1302 "gram.y"
{ templp->collect(yypvt[-1].t, yypvt[-0].pn) ; } break;
case 90:
# line 1304 "gram.y"
{templp->collect(Ndata(yypvt[-1].p,yypvt[-0].pn)); } break;
case 91:
# line 1311 "gram.y"
{	yyval.p = yypvt[-0].pn; } break;
case 92:
# line 1313 "gram.y"
{	Ptyp(yypvt[-1].p) = yypvt[-0].pn->tp;
				yypvt[-0].pn->tp = (Ptype)yypvt[-1].p;
				yyval.p = yypvt[-0].p;
			} break;
case 93:
# line 1318 "gram.y"
{	Vtype(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = (Ptype)yypvt[-0].p;
			} break;
case 94:
# line 1322 "gram.y"
{	Freturns(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = (Ptype)yypvt[-0].p;
			} break;
case 95:
# line 1329 "gram.y"
{
				if ( yypvt[-0].pn->n_oper != TNAME )
					insert_name(yypvt[-0].pn,Ctbl);
				yyval.p = yypvt[-0].pn;
				yyval.pn->tp = moe_type;
			} break;
case 96:
# line 1336 "gram.y"
{
				if ( yypvt[-0].pn->n_oper != TNAME )
					insert_name(yypvt[-0].pn,Ctbl);
			} break;
case 97:
# line 1341 "gram.y"
{	yyval.p = yypvt[-3].pn;
				yyval.pn->tp = moe_type;
				yyval.pn->n_initializer = yypvt[-0].pe;
// error('d',"moe = e check_bound_type: %d", check_bound_type);
			} break;
case 98:
# line 1347 "gram.y"
{	yyval.p = 0; } break;
case 99:
# line 1351 "gram.y"
{	parsing_class_members = 0;
				RESTORE_STATE();
				switch ( NEXTTOK() ) {
				case TYPE: case AGGR: case ENUM: case EOFTOK:
					error("`;' or declaratorX afterCD");
					la_backup(yychar,yylval);
					yychar = SM;
					break;
				}
				la_backup(yychar,yylval);
				yychar = -1;
				restore_text();
				++bl_level; // scope weirdness!
				++in_mem_fct;
			} break;
case 100:
# line 1367 "gram.y"
{
				--in_mem_fct;
				--bl_level; // scope weirdness!
				if ( yychar == ID ) {
					// (yuk!) adjust lex level
					--yylval.pn->lex_level;
				}
				ccl->mem_list = name_unlist(yypvt[-3].nl);
// error('d',"ccl: %t templ_friends: %d", ccl, templ_friends);
				ccl->templ_friends = templ_friends; templ_friends = 0;
				if ( --in_class_decl )  // nested class
					// continue to parse enclosing class
					parsing_class_members = 1;
				//SYM -- tn stuff removed
                        	POP_SCOPE();//SYM
				if ( Ctbl->k_id == TEMPLATE ) {
					// remove intermediate template table
					//    from scope of class
					ccl->k_tbl->k_next = Ctbl->k_next;
				}

				if (pti) {
					pti->explicit_inst();
					Pname nnn = yyval.pt->bname();
// error('d',"ccl: %s nnn: %s", ccl->string, nnn->string);
					nnn->string = ccl->string;
					explicit_template_definition = 0;
					pti = 0;
				}

				end_cl();
				declTag = 1;
			} break;
case 101:
# line 1401 "gram.y"
{ aggrcheck:
				yyval.pb = (Pbase)yypvt[-0].pn->tp; 
				if ( yyval.p == 0 ) {
					if (templp->parameters_in_progress)
						error("TX for%n -- did you misdeclare aY?",yypvt[-0].pn);
					else error("TX for %n",yypvt[-0].pn);
					error('i', "cannot recover from previous error" );
				}

				if ( yyval.p->base == TYPE ) {
					Pname nx = yyval.pb->b_name;
					yyval.pb = (Pbase)nx->tp;
					if ( yyval.p->base != COBJ
					||   strcmp(nx->string,yypvt[-0].pn->string)
					)
						error("%n of type%t redeclared as%k.",yypvt[-0].pn,yyval.pb,yypvt[-1].t);
				} else if ( yyval.p->base != COBJ )
					error("%n of type%t redeclared as%k",yypvt[-0].pn,yyval.pb,yypvt[-1].t);
				check_tag();
			} break;
case 102:
# line 1422 "gram.y"
{ 
                    /* don't place the template on the instantiation list if it is
                     * a friend declaration or a foward declaration of a specialization
                     * friend class x<int> and struct x<int>; */

                    dont_instantiate = NEXTTOK()==SM;
		    if (dont_instantiate && in_friend == 0) {
			// *** this code could be used for forward declaration
			Ptempl t = templp->is_template(yypvt[-3].pn);

			// must have seen a definition of template class
			if (t == 0) {
				error("explicitC instance of a nonYC%n",yypvt[-3].pn);
				error('i', "cannot recover from previous error" );
			}

			// make sure the explicit arguments are ok
			t->check_actual_args(expr_unlist(yypvt[-1].el));

			// watch out for redefinition -- if exists,
			// use forward declaration or create instance
			pti = t->get_match(expr_unlist(yypvt[-1].el),0,false);
			if ( pti ) { 
				if (pti->get_class()->class_base == INSTANTIATED)
					error("ZC%n multiply instantiated",yypvt[-3].pn);
			}
			else pti = new templ_inst(expr_unlist(yypvt[-1].el),t,yypvt[-4].t);
			pti->inst_formals = t->get_formals();

			error('s',"forwardD of a specialized version ofY%n",yypvt[-3].pn);
			error('C',"\tclass %n",pti->get_tname()); 
			error('c'," -- did you mean a general forward declaration of theY?\n");
			error('C',"\tif so, use:  template <formal-parameters> class %n;\n",yypvt[-3].pn);
	            }

                    Pname p = parametrized_typename(yypvt[-3].pn, (expr_unlist(yypvt[-1].el)), in_friend);
                    dont_instantiate = 0;
                    yyval.pb = (Pbase)p->tp;
                    check_tag();
                  } break;
case 103:
# line 1463 "gram.y"
{
				goto aggrcheck;
			} break;
case 106:
# line 1473 "gram.y"
{ yyval.pbc = yypvt[-0].pbc; } break;
case 107:
# line 1474 "gram.y"
{ yyval.pbc = 0; } break;
case 109:
# line 1479 "gram.y"
{	if (yypvt[-0].pbc) { yyval.pbc = yypvt[-0].pbc; yyval.pbc->next = yypvt[-2].pbc; } } break;
case 110:
# line 1482 "gram.y"
{ yyval.pbc = dobase(0,yypvt[-0].pn); } break;
case 111:
# line 1483 "gram.y"
{ yyval.pbc = dobase(yypvt[-1].t,yypvt[-0].pn); } break;
case 112:
# line 1484 "gram.y"
{ yyval.pbc = dobase(0,yypvt[-0].pn,yypvt[-1].t); } break;
case 113:
# line 1485 "gram.y"
{ yyval.pbc = dobase(yypvt[-2].t,yypvt[-0].pn,yypvt[-1].t); } break;
case 114:
# line 1486 "gram.y"
{ yyval.pbc = dobase(yypvt[-1].t,yypvt[-0].pn,yypvt[-2].t); } break;
case 115:
# line 1490 "gram.y"
{
				Pname n = start_cl(yypvt[-1].t,0,0);
				PUSH_CLASS_SCOPE(n);//SYM
				ccl->k_tbl = Ctbl;//SYM
				yyval.p = Pbase(n->tp);
				parsing_class_members = 1;
				//SYM -- tn stuff removed
				in_class_decl++;
				SAVE_STATE();
			} break;
case 116:
# line 1502 "gram.y"
{
				Pname n = start_cl(yypvt[-3].t,yypvt[-2].pn,yypvt[-1].pbc);
				PUSH_CLASS_SCOPE(n);//SYM
				ccl->k_tbl = Ctbl;//SYM
				yyval.p = Pbase(n->tp);
				parsing_class_members = 1;
				//SYM -- tn stuff removed
				in_class_decl++;
				SAVE_STATE();
			} break;
case 117:
# line 1513 "gram.y"
{
			// LC increments bl_level by 1
			if ( bl_level > 1 )
			     error('s', "specializedY%n not at global scope",yypvt[-5].pn);
			explicit_template_definition = 1;
			Ptempl t = templp->is_template(yypvt[-5].pn);

			// must have seen a definition of template class
			if (t == 0 || !t->defined) {
				error("YC%n must be defined prior to an explicitC instance",yypvt[-5].pn);
				error('i', "cannot recover from previous error" );
			}

			// make sure the explicit arguments are ok
			t->check_actual_args(expr_unlist(yypvt[-3].el));

			// watch out for redefinition -- if exists,
			// use forward declaration or create instance
			pti = t->get_match(expr_unlist(yypvt[-3].el),0,false);
			if ( pti ) { 
				if (pti->get_class()->class_base == INSTANTIATED)
					error("ZC%n multiply instantiated",yypvt[-5].pn);
			}
			else pti = new templ_inst(expr_unlist(yypvt[-3].el),t,yypvt[-6].t);

			Pname n = start_cl(yypvt[-6].t,pti->get_tname(),yypvt[-1].pbc);
                        Pbase(n->tp)->b_name->n_redefined = 1;
			PUSH_CLASS_SCOPE(n);//SYM
			ccl->k_tbl = Ctbl;//SYM
			yyval.p = Pbase(n->tp);
			parsing_class_members = 1;
			in_class_decl++;
			SAVE_STATE();
			} break;
case 118:
# line 1549 "gram.y"
{ yyval.p = yypvt[-0].pn; } break;
case 119:
# line 1550 "gram.y"
{ yyval.p=yypvt[-0].p; } break;
case 120:
# line 1553 "gram.y"
{ yyval.p = yypvt[-0].pn; } break;
case 121:
# line 1554 "gram.y"
{ yyval.p=yypvt[-0].p; } break;
case 122:
# line 1558 "gram.y"
{
				if (yypvt[-0].p) {
					if (yypvt[-1].p)
						yypvt[-1].nl->add_list(yypvt[-0].pn);
					else
						yyval.nl = new nlist(yypvt[-0].pn);
				}
in_static = 0;
			} break;
case 123:
# line 1567 "gram.y"
{ yyval.p = 0; } break;
case 124:
# line 1569 "gram.y"
{
// error('d', "ZizedTD must be atG, notC scope" );
				if (must_be_friend) {
					error("non-friend ZizedTD must be atG, notC scope" );
					error('i', "cannot recover from previous error" );
				}
  				templ_friends = new cons(templp->parsed_template,templ_friends);
				templp->parsed_template = 0;
			} break;
case 125:
# line 1581 "gram.y"
{
// error('d',"cl_mem <- data_dcl in_static: %d in_typedef; %d check_bound_type: %d",in_static,in_typedef,check_bound_type);
				if ( check_bound_type && 
					( in_typedef || in_static )) 
						check_bound_type = found;
			} break;
case 131:
# line 1593 "gram.y"
{	yyval.p = new name;
				yyval.pn->base = yypvt[-1].t;
			} break;
case 132:
# line 1597 "gram.y"
{	Pname n = Ncopy(yypvt[-1].pn);
				if (n->n_oper == TYPE) {
					error('s',"visibilityD for conversion operator");
					// n->tp = Ptype(n->n_initializer);
					n->tp = Ptype(n->cond);
					n->cond = 0;
					// n->n_initializer = 0;
					n->n_oper = 0;
					sig_name(n);
				}
				n->n_qualifier = yypvt[-2].pn;
				n->base = PR;
				yyval.p = n;
				if ( yypvt[-2].pn && yypvt[-2].pn->n_template_arg != template_type_formal )
					UNSET_SCOPE();//SYM
			} break;
case 133:
# line 1627 "gram.y"
{ yyval.p = yypvt[-0].pn; } break;
case 134:
# line 1629 "gram.y"
{	yyval.p = Ncopy(yypvt[-0].pn);
				yyval.pn->n_oper = DTOR;
			} break;
case 135:
# line 1633 "gram.y"
{	yyval.p = new name(oper_name(yypvt[-0].t));
				yyval.pn->n_oper = yypvt[-0].t;
			} break;
case 136:
# line 1637 "gram.y"
{	Pname n = yypvt[-0].pn;
				n->string = "_type";
				n->n_oper = TYPE;
				n->cond = Pexpr(n->tp);
				// n->n_initializer = Pexpr(n->tp);
				n->tp = 0;
				yyval.p = n;
			} break;
case 151:
# line 1661 "gram.y"
{	yyval.t = CALL; } break;
case 152:
# line 1662 "gram.y"
{	yyval.t = DEREF; } break;
case 158:
# line 1668 "gram.y"
{	yyval.t = NEW; --in_new; } break;
case 159:
# line 1669 "gram.y"
{	yyval.t = DELETE; } break;
case 160:
# line 1670 "gram.y"
{	yyval.t = REF; } break;
case 161:
# line 1671 "gram.y"
{	yyval.t = CM; } break;
case 162:
# line 1672 "gram.y"
{	yyval.t = REFMUL;
					if (yypvt[-0].t == DOT) error(".* cannot be overloaded");
				} break;
case 163:
# line 1677 "gram.y"
{ yyval.pn = SET_SCOPE(yypvt[-0].pn); } break;
case 164:
# line 1681 "gram.y"
{   if ( yypvt[-0].pn != sta_name ) {
				Pname n = yypvt[-0].pn;
				char *str = 0, *s = n->string;
				if (n->n_template_arg != template_type_formal) {
				    n = n->tp->is_cl_obj();
				    if ( n ) str = s = get_classname(n->string);
				}
				if ( n && NEXTTOK() == TNAME
				&& strcmp(s,yylval.pn->string)==0){
					// ctor -- change to ID to avoid
					//    parsing as type spec
					yychar = ID;
					yylval.pn = Ncopy(yylval.pn);
					yylval.pn->n_oper = TNAME;
				}
				if ( str ) delete str;
			    }
			    yyval.pn = yypvt[-0].pn;
			} break;
case 165:
# line 1701 "gram.y"
{//SYM
			   if ( yypvt[-0].pn == sta_name ) {
			   	error("scope qualifier syntax");
			   } else {
// error('d',"tn_list: tn_list tscope: pn2: %s", yypvt[-0].pn->string);
				Pname cn = yypvt[-0].pn;
				char *str = 0, *s = cn->string;
				if (cn->n_template_arg != template_type_formal){
				    cn = yypvt[-0].pn->tp->is_cl_obj();
				    if (cn) str = s = get_classname(cn->string);
				}
				if ( cn && NEXTTOK() == TNAME
				&& strcmp(s,yylval.pn->string)==0){
					// ctor -- change to ID to avoid
					//    parsing as type spec
					yychar = ID;
					yylval.pn = Ncopy(yylval.pn);
					yylval.pn->n_oper = TNAME;
				}
				if ( str ) delete str;
				if ( yypvt[-1].pn != sta_name
				&&   yypvt[-1].pn->n_template_arg != template_type_formal){
				    Pname cx = yypvt[-1].pn->tp->is_cl_obj();
				    if ( cx ) // cx::cn::
					if ( check_if_base(Pclass(cx->tp),Pclass(cn->tp)) )
						error("%n ::%n :: --%n not aM of%n",cx,cn,cn,cx);
				}
			    }
			    yyval.pn = yypvt[-0].pn;
			} break;
case 166:
# line 1734 "gram.y"
{	
				yyval.pn = yypvt[-0].pn;
				if (in_typedef && in_typedef->base == 0)
					in_typedef->defined = TNAME_SEEN;
				//xxx qualifier currently ignored...
				// yyval.pn = Ncopy( yypvt[-0].pn );
				// yyval.pn->n_oper = TNAME;
				// yyval.pn->n_qualifier = yypvt[-1].pn;
			} break;
case 167:
# line 1744 "gram.y"
{	
				yyval.pn = yypvt[-0].pn;
				if (in_typedef && in_typedef->base == 0)
					in_typedef->defined = TNAME_SEEN;
			//	yyval.pn = Ncopy( yypvt[-0].pn );
			//	yyval.pn->n_oper = TNAME;
			} break;
case 168:
# line 1754 "gram.y"
{ yyval.i = 0; } break;
case 169:
# line 1756 "gram.y"
{ /* const/volatile function */
				switch ( yypvt[-0].t ) {
				case VOLATILE:
					error('s',"volatile functions");
					break;
				case CONST:
					yyval.i = (yypvt[-1].i | 1);
					break;
				default:
					if ( NEXTTOK() != SM
					&&   yychar != COLON
					&&   yychar != LC ) {
						la_backup(yychar,yylval);
						yylval.t = yypvt[-0].t;
						la_backup(TYPE,yylval);
						yylval.t = SM;
						yychar = SM;
						error("syntax error: unexpected%k (did you forget a `;'?)",yypvt[-0].t);
					} else error("FD syntax: unexpected%k",yypvt[-0].t);
					break;
				}
 			} break;
case 170:
# line 1779 "gram.y"
{ yyval.i = yypvt[-4].i; } break;
case 171:
# line 1782 "gram.y"
{ yyval.pl = 0; } break;
case 172:
# line 1784 "gram.y"
{ yyval.pl = 0; } break;
case 173:
# line 1788 "gram.y"
{	Freturns(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = yypvt[-0].pt;
			} break;
case 174:
# line 1792 "gram.y"
{ /* function with no argument */
 				yypvt[-3].pn->tp = new fct(yypvt[-3].pn->tp,0,1);
 				Pfct(yypvt[-3].pn->tp)->f_const = (yypvt[-0].i & 1);
 			} break;
case 175:
# line 1797 "gram.y"
{	Pname n = yypvt[-1].pn;
				yyval.p = Ncopy(n);
				//??? what if tname is qualified ???
				//SYM -- change -- do not if ctor def...
				if ( !in_typedef
				&&  (ccl==0 || strcmp(n->string,ccl->string)) )
					n->hide();
				yyval.pn->n_oper = TNAME;
				Freturns(yypvt[-0].p) = yyval.pn->tp;
				yyval.pn->tp = yypvt[-0].pt;
			} break;
case 176:
# line 1813 "gram.y"
{	
				yypvt[-3].pn->tp = new fct(yypvt[-3].pn->tp,yypvt[-1].pn,1); 
 				in_arg_list = 0;
 				//SYM end_al(yypvt[-2].pl,0);
 				POP_SCOPE();//SYM
				//RESTORE_STATE();
			} break;
case 177:
# line 1821 "gram.y"
{
				Pptr p = new ptr( PTR, 0 );
				Ptyp(p) = new basetype(TYPE,yypvt[-5].pn);
				Freturns( yypvt[-0].p ) = Ptype(p);
				yypvt[-2].pn->tp = yypvt[-0].pt;
			//SYM -- insert in table if not done elsewhere...
				if ( yypvt[-2].pn->n_oper != TNAME && !in_typedef ) {
					insert_name(yypvt[-2].pn,Ctbl);
				}
				yyval.p = yypvt[-2].pn;
				if (DECL_TYPE == -1) DECL_TYPE = 0;
			} break;
case 178:
# line 1834 "gram.y"
{	Pname n = yypvt[-3].pn;
				yyval.p = Ncopy(yypvt[-3].pn);
				//??? what about qualified tname?
				//SYM -- change -- do not if ctor def...
			//XXXXX defer until name::normalize()?
				if ( !in_typedef
				&&  (ccl==0 || strcmp(n->string,ccl->string)) )
					n->hide();
				yyval.pn->n_oper = TNAME;
				yyval.pn->tp = new fct(0,yypvt[-1].pn,1);
			} break;
case 179:
# line 1846 "gram.y"
{ /* function with no argument */
				Pname n = yypvt[-3].pn;
				yyval.p = Ncopy(yypvt[-3].pn);
				//SYM -- change -- do not if ctor def...
				if ( !in_typedef
				&&  (ccl==0 || strcmp(n->string,ccl->string)) )
					n->hide();
 				yyval.pn->n_oper = TNAME;
 				yyval.pn->tp = new fct(0,0,1);
 				Pfct(yyval.pn->tp)->f_const = (yypvt[-0].i & 1);
			} break;
case 180:
# line 1858 "gram.y"
{	memptrdcl(yypvt[-3].pn,yypvt[-5].pn,yypvt[-0].pt,yypvt[-2].pn);
				yyval.p = yypvt[-2].p;
			} break;
case 181:
# line 1862 "gram.y"
{//SYM -- insert in table if appropriate...
			 //SYM    n_oper == TNAME => tname already hidden
			 //SYM    other !=0 values of n_oper => op or dtor
			 //SYM -- enter non-oper names as well as TNAMEs
			 //SYM    in parsing table to handle "1.5 namespace"
			 //SYM    in all scopes, since dcl does not build
			 //SYM    the complete table until after functions
			 //SYM    / classdefs are parsed.
			 //SYM friends are processed in norm.c
			 //SYM    to handle 'friend x;' etc
				if ( yypvt[-0].pn->n_oper == 0
				&&  !in_typedef && !in_friend ) {
				    //SYM do not hide ctor name...
				    if ( ccl==0 || parsing_class_members==0
				    ||   strcmp(ccl->string,yypvt[-0].pn->string)) {
					Pname n = new name; *n = *yypvt[-0].pn;
					insert_name(n,Ctbl);
				    }
				}
			} break;
case 182:
# line 1883 "gram.y"
{	yyval.p = Ncopy(yypvt[-0].pn);
				//yyval.pn->n_qualifier = yypvt[-2].pn;
				error("`.' used for qualification; please use `::'");
			} break;
case 183:
# line 1888 "gram.y"
{	yyval.p = yypvt[-0].p;
				//SYM if ( yypvt[-1].pn != sta_name ) {
    				//SYM	set_scope(yypvt[-1].pn); 
					if ( yypvt[-1].pn == sta_name 
    					&&   yyval.pn->n_oper==DTOR )
						error("bad syntax for destructor ::%n",yyval.pn);
    					yyval.pn->n_qualifier = yypvt[-1].pn;
				//SYM }
			} break;
case 184:
# line 1898 "gram.y"
{	yyval.p = Ncopy(yypvt[-0].pn);
				//yyval.pn->n_qualifier = yypvt[-3].pn;//SYM yypvt[-2].pn;
				error("`.' used for qualification; please use `::'");
				error("non-type qualifier%n",yypvt[-2].pn);
				//if ( yypvt[-3].pn != sta_name ) {
    				//SYM	set_scope(yypvt[-3].pn); 
    				//	yypvt[-2].pn->n_qualifier = yypvt[-3].pn;
				//}
			} break;
case 185:
# line 1908 "gram.y"
{	Ptyp(yypvt[-1].p) = yypvt[-0].pn->tp;
				yypvt[-0].pn->tp = yypvt[-1].pt;
				yyval.p = yypvt[-0].p;
			} break;
case 186:
# line 1913 "gram.y"
{	yyval.p = Ncopy(yypvt[-0].pn);
				//??? what about qualified tnames?
				yyval.pn->n_oper = TNAME;
				// cannot evaluate at this point: defer until data_dcl
				if ( !in_typedef ) yypvt[-0].pn->hide();//SYM
				else in_tag = yypvt[-0].pn;//SYM???
				yyval.pn->tp = yypvt[-1].pt;
			} break;
case 187:
# line 1922 "gram.y"
{	yyval.p = Ncopy(yypvt[-1].pn);
				//??? what about qualified tnames?
				yyval.pn->n_oper = TNAME;
				if ( !in_typedef ) yypvt[-1].pn->hide();//SYM
				else in_tag = yypvt[-1].pn;//SYM???
				yyval.pn->tp = yypvt[-0].pt;
			} break;
case 188:
# line 1930 "gram.y"
{	Vtype(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = yypvt[-0].pt;
			} break;
case 189:
# line 1947 "gram.y"
{ 
				yyval.p = yypvt[-1].p; 
				in_arg_list = 0;
				hoist_al();//SYM end_al(yypvt[-2].pl,0);
				//RESTORE_STATE();
			} break;
case 190:
# line 1956 "gram.y"
{//SYM -- insert in table if not done elsewhere...
				if ( yypvt[-0].pn->n_oper != TNAME ) {
					Pname n = new name; *n = *yypvt[-0].pn;
					insert_name(n,Ctbl);
				}
				yyval.p = yypvt[-0].pn;
			} break;
case 191:
# line 1964 "gram.y"
{	yyval.p = Ncopy(yypvt[-0].pn);
				yyval.pn->n_oper = TNAME;
				yypvt[-0].pn->hide();
				yyval.pn->tp = yypvt[-1].pt;
			} break;
case 192:
# line 1970 "gram.y"
{	
				yyval.p = new name; 
				NOT_EXPECT_ID();
			} break;
case 193:
# line 1975 "gram.y"
{	Ptyp(yypvt[-1].p) = yypvt[-0].pn->tp;
				yypvt[-0].pn->tp = (Ptype)yypvt[-1].p;
				yyval.p = yypvt[-0].p;
			} break;
case 194:
# line 1980 "gram.y"
{	Vtype(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = (Ptype)yypvt[-0].p;
			} break;
case 195:
# line 1984 "gram.y"
{	Freturns(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = (Ptype)yypvt[-0].p;
			} break;
case 196:
# line 2000 "gram.y"
{ 
// error('d', "arg_lp arg_decl rp in_arg_list: %d", in_arg_list );
				yyval.p = yypvt[-1].p; 
				in_arg_list = 0;
				hoist_al();//SYM end_al(yypvt[-2].pl,0);
				//RESTORE_STATE();
			} break;
case 197:
# line 2010 "gram.y"
{	yyval.p = new name; } break;
case 198:
# line 2012 "gram.y"
{	Ptyp(yypvt[-1].p) = yypvt[-0].pn->tp;
				yypvt[-0].pn->tp = (Ptype)yypvt[-1].p;
				yyval.p = yypvt[-0].p;
                                NOT_EXPECT_ID();
			} break;
case 199:
# line 2018 "gram.y"
{	Vtype(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = (Ptype)yypvt[-0].p;
			} break;
case 200:
# line 2023 "gram.y"
{ yyval.p = new name; } break;
case 201:
# line 2025 "gram.y"
{	Ptyp(yypvt[-1].p) = yypvt[-0].pn->tp;
				yypvt[-0].pn->tp = (Ptype)yypvt[-1].p;
				yyval.p = yypvt[-0].p;
				NOT_EXPECT_ID();
			} break;
case 202:
# line 2031 "gram.y"
{	Vtype(yypvt[-0].p) = yypvt[-1].pn->tp;
				yypvt[-1].pn->tp = (Ptype)yypvt[-0].p;
			} break;
case 203:
# line 2035 "gram.y"
{	Freturns(yypvt[-0].p) = yypvt[-2].pn->tp;
				yypvt[-2].pn->tp = yypvt[-0].pt;
				yyval.p = yypvt[-2].p;
			} break;
case 204:
# line 2040 "gram.y"
{	Vtype(yypvt[-0].p) = yypvt[-2].pn->tp;
				yypvt[-2].pn->tp = yypvt[-0].pt;
				yyval.p = yypvt[-2].p;
			} break;
case 205:
# line 2047 "gram.y"
{	yyval.p = new name; } break;
case 206:
# line 2049 "gram.y"
{	Ptyp(yypvt[-1].p) = yypvt[-0].pn->tp;
				yypvt[-0].pn->tp = (Ptype)yypvt[-1].p;
				yyval.p = yypvt[-0].p;
			} break;
case 207:
# line 2059 "gram.y"
{
				yyval.p = 0; 
			} break;
case 208:
# line 2063 "gram.y"
{
				error( "ZizedTD must be atG, not local scope" );
				error('i', "cannot recover from previous error" );
			} break;
case 209:
# line 2068 "gram.y"
{	
				if (yypvt[-0].p)
					if (yypvt[-1].p)
						yypvt[-1].sl->add(yypvt[-0].ps);
					else {
						yyval.sl =  new slist(yypvt[-0].ps);
						stmt_seen = 1;
					}
			} break;
case 210:
# line 2079 "gram.y"
{
				yyval.p = yypvt[-0].p;
				if (yypvt[-0].p)	stmt_seen = 1;
			} break;
case 211:
# line 2086 "gram.y"
{
				yyval.p = 0;
				check_decl();
			} break;
case 212:
# line 2093 "gram.y"
{	yyval.p = yypvt[-1].p;
			/*	if ($<pe>$ == dummy) error("empty condition");*/
				stmt_seen = 1;
			} break;
case 213:
# line 2100 "gram.y"
{	PUSH_BLOCK_SCOPE();//SYM
				cd_vec[cdi] = cd;
				stmt_vec[cdi] = stmt_seen;
				++cdi;
				cd = 0;
				stmt_seen = 0;
				//SYM -- tn stuff removed
			} break;
case 214:
# line 2109 "gram.y"
{	Pname n = name_unlist(cd);
				Pstmt ss = stmt_unlist(yypvt[-1].sl);
				yyval.p = new block(yypvt[-3].l,n,ss,yypvt[-0].l);
				//SYM -- tn stuff removed
				cd = cd_vec[--cdi];
				stmt_seen = stmt_vec[cdi];
				if (cdi < 0) error('i',"block level(%d)",cdi);
				NOT_EXPECT_ID();
				yyval.ps->k_tbl = Ctbl;//SYM
                        	POP_SCOPE();//SYM
			} break;
case 215:
# line 2121 "gram.y"
{ yyval.p = new block(yypvt[-1].l,0,0,yypvt[-0].l); NOT_EXPECT_ID();
			  if ( Ctbl->k_id == ARG ) POP_SCOPE();//SYM
			} break;
case 216:
# line 2125 "gram.y"
{ yyval.p = new block(yypvt[-2].l,0,0,yypvt[-0].l); NOT_EXPECT_ID();
			  if ( Ctbl->k_id == ARG ) POP_SCOPE();//SYM
			} break;
case 217:
# line 2131 "gram.y"
{	yyval.p = new estmt(SM,curloc,yypvt[-0].pe,0);	} break;
case 218:
# line 2133 "gram.y"
{	yyval.p = new stmt(BREAK,yypvt[-0].l,0); } break;
case 219:
# line 2135 "gram.y"
{	yyval.p = new stmt(CONTINUE,yypvt[-0].l,0); } break;
case 220:
# line 2137 "gram.y"
{	yyval.p = new lstmt(GOTO,yypvt[-1].l,yypvt[-0].pn,0); } break;
case 221:
# line 2138 "gram.y"
{ stmt_seen=1; } break;
case 222:
# line 2139 "gram.y"
{	yyval.p = new estmt(DO,yypvt[-4].l,yypvt[-0].pe,yypvt[-2].ps); } break;
case 223:
# line 2141 "gram.y"
{	
				if (stmt_seen)
					yyval.p = new estmt(ASM,curloc,(Pexpr)yypvt[-1].s,0);
				else {
					Pname n = new name(make_name('A'));
					n->tp = new basetype(ASM,(Pname)yypvt[-1].s);
					if (cd)
						cd->add_list(n);
					else
						cd = new nlist(n);
					yyval.p = 0;
				}
			} break;
case 224:
# line 2156 "gram.y"
{
			if ( NEXTTOK() != SM ) {
				error("`;' missing afterS");
				la_backup(yychar,yylval);
				yychar = SM;
			}
		  } break;
case 227:
# line 2167 "gram.y"
{	yyval.p = new estmt(SM,yypvt[-0].l,dummy,0); } break;
case 228:
# line 2169 "gram.y"
{	yyval.p = new estmt(RETURN,yypvt[-2].l,yypvt[-1].pe,0); } break;
case 229:
# line 2171 "gram.y"
{
				error("local linkage specification");
				yyval.p = yypvt[-0].pn;
			} break;
case 230:
# line 2176 "gram.y"
{	Pname n = yypvt[-0].pn;
				if (n) {
//error('d',"adding local dcl of%n%t ll %d in_typedef%t",n,n->tp,n->lex_level,in_typedef);
					if (stmt_seen) {
						yyval.p = new block(n->where,n,0);
						yyval.ps->base = DCL;
						yyval.ps->k_tbl = Ctbl;//SYM
					}
					else {
						if (cd)
							cd->add_list(n);
						else
							cd = new nlist(n);
						yyval.p = 0;
					}
				} // if n
				else if (stmt_seen) {
					yyval.p = new block(curloc,0,0);
					yyval.ps->base = FDCL;
				}
			} break;
case 231:
# line 2198 "gram.y"
{
				Pname n = yypvt[-0].pn;
				if (!templp->in_progress)
					error(&n->where,"%n's definition is nested (did you forget a ``}''?)",n);
				if (cd)
					cd->add_list(n);
				else
					cd = new nlist(n);
				yyval.p = 0;
			} break;
case 233:
# line 2210 "gram.y"
{	yyval.p = new ifstmt(yypvt[-2].l,yypvt[-1].pe,yypvt[-0].ps,0); } break;
case 234:
# line 2212 "gram.y"
{	yyval.p = new ifstmt(yypvt[-4].l,yypvt[-3].pe,yypvt[-2].ps,yypvt[-0].ps); } break;
case 235:
# line 2214 "gram.y"
{	yyval.p = new estmt(WHILE,yypvt[-2].l,yypvt[-1].pe,yypvt[-0].ps); } break;
case 236:
# line 2215 "gram.y"
{ stmt_seen=1; } break;
case 237:
# line 2216 "gram.y"
{	yyval.p = new forstmt(yypvt[-8].l,yypvt[-5].ps,yypvt[-4].pe,yypvt[-2].pe,yypvt[-0].ps); } break;
case 238:
# line 2217 "gram.y"
{ if (scd==0) scd=cd;} break;
case 239:
# line 2218 "gram.y"
{	
				scd=0;
				yyval.p = new estmt(SWITCH,yypvt[-3].l,yypvt[-1].pe,yypvt[-0].ps); 
			} break;
case 240:
# line 2222 "gram.y"
{ yyval.p = yypvt[-1].pn; stmt_seen=1; } break;
case 241:
# line 2223 "gram.y"
{	Pname n = yypvt[-1].pn;
				yyval.p = new lstmt(LABEL,n->where,n,yypvt[-0].ps);
			} break;
case 242:
# line 2226 "gram.y"
{ yyval.p = new name(yypvt[-1].pn->string); stmt_seen=1; } break;
case 243:
# line 2227 "gram.y"
{	Pname n = yypvt[-1].pn;
				yyval.p = new lstmt(LABEL,n->where,n,yypvt[-0].ps);
			} break;
case 244:
# line 2230 "gram.y"
{ stmt_seen=1; } break;
case 245:
# line 2231 "gram.y"
{	
				if (scd!=cd && cd && decl_with_init(cd)) error("jump past initializer (did you forget a '{ }'?)");
				if (yypvt[-2].pe == dummy) error("empty case label");
				yyval.p = new estmt(CASE,yypvt[-4].l,yypvt[-2].pe,yypvt[-0].ps);
			} break;
case 246:
# line 2236 "gram.y"
{ stmt_seen=1; } break;
case 247:
# line 2237 "gram.y"
{	
				if (scd!=cd && cd && yypvt[-1].pe && decl_with_init(cd)) error("jump past initializer (did you forget a '{ }'?)");
				yyval.p = new stmt(DEFAULT,yypvt[-3].l,yypvt[-0].ps); 
			} break;
case 248:
# line 2242 "gram.y"
{ yyval.p = new handler( yypvt[-1].ps, stmt_unlist(yypvt[-0].sl) ); } break;
case 249:
# line 2247 "gram.y"
{ yyval.sl = 0; } break;
case 250:
# line 2249 "gram.y"
{	
				if (yypvt[-0].ps)
					if (yypvt[-1].sl)
						yypvt[-1].sl->add(yypvt[-0].ps);
					else {
						yyval.sl =  new slist(yypvt[-0].ps);
						stmt_seen = 1;
					}
			} break;
case 251:
# line 2261 "gram.y"
{
			    if ( yypvt[-1].pn ) {
				yypvt[-1].pn->n_list = yypvt[-0].ps->d;
				yypvt[-0].ps->d = yypvt[-1].pn;
			    }
			    yyval.ps = yypvt[-0].ps;
			} break;
case 252:
# line 2272 "gram.y"
{	in_arg_list = 0;
				yyval.pn = Ndata(yypvt[-2].p,yypvt[-1].pn);
				if ( yyval.pn->string == 0 )
					yyval.pn = 0;
				else
					yyval.pn->base = CATCH;
			} break;
case 253:
# line 2280 "gram.y"
{ yyval.pn = 0; } break;
case 254:
# line 2287 "gram.y"
{	Pexpr e = expr_unlist(yypvt[-0].el);
				while (e && e->e1==dummy) {
					register Pexpr ee2 = e->e2;
					if (ee2) error("EX inEL");
					delete e;
					e = ee2;
				}
				yyval.p = e;
			} break;
case 255:
# line 2299 "gram.y"
{	yyval.el = new elist(new expr(ELIST,yypvt[-0].pe,0)); } break;
case 256:
# line 2301 "gram.y"
{	yypvt[-2].el->add(new expr(ELIST,yypvt[-0].pe,0)); } break;
case 258:
# line 2306 "gram.y"
{
  			  	if ( in_arg_list ) 
       			  		error( "syntax error: IrL not permitted in AL" );
				else if ( in_binit_list )
					error( "syntax error: IrL not permitted inMIr" );
  			  	else 
					init_seen = 1;
				Pexpr e;
				if (yypvt[-1].p)
					e = yypvt[-1].pe;
				else
					e = new expr(ELIST,dummy,0);
				yyval.p = new expr(ILIST,e,0);
			} break;
case 259:
# line 2323 "gram.y"
{	bbinop:	yyval.p = new expr(yypvt[-1].t,yypvt[-2].pe,yypvt[-0].pe); } break;
case 260:
# line 2324 "gram.y"
{	goto bbinop; } break;
case 261:
# line 2325 "gram.y"
{	goto bbinop; } break;
case 262:
# line 2326 "gram.y"
{	goto bbinop; } break;
case 263:
# line 2327 "gram.y"
{	goto bbinop; } break;
case 264:
# line 2328 "gram.y"
{	goto bbinop; } break;
case 265:
# line 2329 "gram.y"
{	goto bbinop; } break;
case 266:
# line 2330 "gram.y"
{ 	goto bbinop; } break;
case 267:
# line 2331 "gram.y"
{	goto bbinop; } break;
case 268:
# line 2332 "gram.y"
{	goto bbinop; } break;
case 269:
# line 2333 "gram.y"
{	goto bbinop; } break;
case 270:
# line 2334 "gram.y"
{	goto bbinop; } break;
case 271:
# line 2335 "gram.y"
{	goto bbinop; } break;
case 272:
# line 2336 "gram.y"
{	goto bbinop; } break;
case 273:
# line 2337 "gram.y"
{	goto bbinop; } break;
case 274:
# line 2338 "gram.y"
{	goto bbinop; } break;
case 275:
# line 2339 "gram.y"
{	goto bbinop; } break;
case 276:
# line 2341 "gram.y"
{	yyval.p = new qexpr(yypvt[-4].pe,yypvt[-2].pe,yypvt[-0].pe); } break;
case 277:
# line 2343 "gram.y"
{	yyval.p = new expr(yypvt[-1].t,yypvt[-2].pe,yypvt[-0].pe); } break;
case 278:
# line 2345 "gram.y"
{ yyval.p = new expr(DELETE,yypvt[-0].pe,0); } break;
case 279:
# line 2347 "gram.y"
{
				if(yypvt[-2].pe != dummy) {
					if ( warning_opt || strict_opt )
						error(strict_opt?0:'w',"v in `delete[v]' is redundant; use `delete[] instead (anachronism)");
				}
				yyval.p = new expr(DELETE,yypvt[-0].pe,yypvt[-2].pe);
			} break;
case 280:
# line 2355 "gram.y"
{	yyval.p = new expr(GDELETE,yypvt[-0].pe,0); } break;
case 281:
# line 2357 "gram.y"
{
				if(yypvt[-2].pe != dummy) { 
					if ( warning_opt || strict_opt )
						error(strict_opt?0:'w',"v in `::delete[v]' is redundant; use `::delete[] instead (anachronism)");
				}
				yyval.p = new expr(DELETE,yypvt[-0].pe,yypvt[-2].pe);
			} break;
case 283:
# line 2366 "gram.y"
{ yyval.p = dummy; } break;
case 284:
# line 2370 "gram.y"
{	binop:	yyval.p = new expr(yypvt[-1].t,yypvt[-2].pe,yypvt[-0].pe); } break;
case 285:
# line 2371 "gram.y"
{	goto binop; } break;
case 286:
# line 2372 "gram.y"
{	goto binop; } break;
case 287:
# line 2373 "gram.y"
{	goto binop; } break;
case 288:
# line 2374 "gram.y"
{	goto binop; } break;
case 289:
# line 2375 "gram.y"
{	goto binop; } break;
case 290:
# line 2376 "gram.y"
{	goto binop; } break;
case 291:
# line 2377 "gram.y"
{ 	goto binop; } break;
case 292:
# line 2378 "gram.y"
{	goto binop; } break;
case 293:
# line 2379 "gram.y"
{	goto binop; } break;
case 294:
# line 2380 "gram.y"
{	goto binop; } break;
case 295:
# line 2381 "gram.y"
{	goto binop; } break;
case 296:
# line 2382 "gram.y"
{	goto binop; } break;
case 297:
# line 2383 "gram.y"
{	goto binop; } break;
case 298:
# line 2384 "gram.y"
{	goto binop; } break;
case 299:
# line 2385 "gram.y"
{	goto binop; } break;
case 300:
# line 2386 "gram.y"
{	goto binop; } break;
case 301:
# line 2388 "gram.y"
{	yyval.p = new qexpr(yypvt[-4].pe,yypvt[-2].pe,yypvt[-0].pe); } break;
case 302:
# line 2390 "gram.y"
{	yyval.p = new expr(yypvt[-1].t,yypvt[-2].pe,yypvt[-0].pe); } break;
case 303:
# line 2392 "gram.y"
{	yyval.p = new expr(DELETE,yypvt[-0].pe,0); } break;
case 304:
# line 2394 "gram.y"
{
				if(yypvt[-2].pe != dummy) {
					if ( warning_opt || strict_opt )
						error(strict_opt?0:'w',"v in `delete[v]' is redundant; use `delete[] instead (anachronism)");
				}
				yyval.p = new expr(DELETE,yypvt[-0].pe,yypvt[-2].pe);
			} break;
case 305:
# line 2402 "gram.y"
{	yyval.p = new expr(GDELETE,yypvt[-0].pe,0); } break;
case 306:
# line 2404 "gram.y"
{
				if(yypvt[-2].pe != dummy) {
					if ( warning_opt || strict_opt )
						error(strict_opt?0:'w',"v in `::delete[v]' is redundant; use `::delete[] instead (anachronism)");
				}
				yyval.p = new expr(DELETE,yypvt[-0].pe,yypvt[-2].pe);
			} break;
case 307:
# line 2411 "gram.y"
{ 
			init_seen = 0; 
			} break;
case 308:
# line 2415 "gram.y"
{ yyval.p = dummy; } break;
case 309:
# line 2417 "gram.y"
{	yyval.p = dummy; } break;
case 310:
# line 2420 "gram.y"
{ goto new1; } break;
case 311:
# line 2422 "gram.y"
{	new1:
				Ptype t = yypvt[-0].pn->tp;
				yyval.p = new texpr(NEW,t,0);
				--in_new;
			} break;
case 312:
# line 2427 "gram.y"
{ goto new3; } break;
case 313:
# line 2429 "gram.y"
{	new3:
				Ptype t = yypvt[-0].pn->tp;
 				yyval.p = new texpr(GNEW,t,0);
				--in_new;
 			} break;
case 314:
# line 2435 "gram.y"
{	yyval.p = new expr(yypvt[-0].t,yypvt[-1].pe,0); } break;
case 315:
# line 2437 "gram.y"
{
				yyval.p = new texpr(CAST,yypvt[-1].pn->tp,yypvt[-0].pe);
			} break;
case 316:
# line 2441 "gram.y"
{	yyval.p = new expr(DEREF,yypvt[-0].pe,0); } break;
case 317:
# line 2443 "gram.y"
{	yyval.p = new expr(ADDROF,0,yypvt[-0].pe); } break;
case 318:
# line 2445 "gram.y"
{	yyval.p = new expr(UMINUS,0,yypvt[-0].pe); } break;
case 319:
# line 2447 "gram.y"
{	yyval.p = new expr(UPLUS,0,yypvt[-0].pe); } break;
case 320:
# line 2449 "gram.y"
{	yyval.p = new expr(NOT,0,yypvt[-0].pe); } break;
case 321:
# line 2451 "gram.y"
{	yyval.p = new expr(COMPL,0,yypvt[-0].pe); } break;
case 322:
# line 2453 "gram.y"
{	yyval.p = new expr(yypvt[-1].t,0,yypvt[-0].pe); } break;
case 323:
# line 2455 "gram.y"
{	
				yyval.p = new texpr(SIZEOF,0,yypvt[-0].pe); 
				--in_sizeof;
			} break;
case 324:
# line 2460 "gram.y"
{	
				yyval.p = new texpr(SIZEOF,yypvt[-0].pn->tp,0); 
				--in_sizeof;
			} break;
case 325:
# line 2465 "gram.y"
{	yyval.p = new expr(DEREF,yypvt[-3].pe,yypvt[-1].pe); } break;
case 326:
# line 2467 "gram.y"
{	yyval.p = new ref(REF,yypvt[-2].pe,yypvt[-0].pn); } break;
case 327:
# line 2469 "gram.y"
{
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(REF,yypvt[-3].pe,yypvt[-0].pn);
			} break;
case 328:
# line 2474 "gram.y"
{	yypvt[-0].pn = new name(yypvt[-0].pn->string);
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(REF,yypvt[-3].pe,yypvt[-0].pn);
			} break;
case 329:
# line 2479 "gram.y"
{	yyval.p = new ref(REF,yypvt[-2].pe,yypvt[-0].pn); } break;
case 330:
# line 2481 "gram.y"
{ // kluge to handle parameterized qualifiers, since
			  //    they are not included in MEMQ
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(REF,yypvt[-3].pe,yypvt[-0].pn);
				if ( yypvt[-1].pn && yypvt[-1].pn->n_template_arg != template_type_formal )
					UNSET_SCOPE();
			} break;
case 331:
# line 2489 "gram.y"
{ // kluge to handle parameterized qualifiers, since
			  //    they are not included in MEMQ
				yypvt[-0].pn = new name(yypvt[-0].pn->string);
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(REF,yypvt[-3].pe,yypvt[-0].pn);
				if ( yypvt[-1].pn && yypvt[-1].pn->n_template_arg != template_type_formal )
					UNSET_SCOPE();
			} break;
case 332:
# line 2498 "gram.y"
{	yyval.p = new ref(DOT,yypvt[-2].pe,yypvt[-0].pn); } break;
case 333:
# line 2500 "gram.y"
{
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(DOT,yypvt[-3].pe,yypvt[-0].pn);
			} break;
case 334:
# line 2505 "gram.y"
{	yypvt[-0].pn = new name(yypvt[-0].pn->string);
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(DOT,yypvt[-3].pe,yypvt[-0].pn);
			} break;
case 335:
# line 2510 "gram.y"
{	yyval.p = new ref(DOT,yypvt[-2].pe,yypvt[-0].pn); } break;
case 336:
# line 2512 "gram.y"
{ // kluge to handle parameterized qualifiers, since
			  //    they are not included in MEMQ
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(DOT,yypvt[-3].pe,yypvt[-0].pn);
				if ( yypvt[-1].pn && yypvt[-1].pn->n_template_arg != template_type_formal )
					UNSET_SCOPE();
			} break;
case 337:
# line 2520 "gram.y"
{ // kluge to handle parameterized qualifiers, since
			  //    they are not included in MEMQ
				yypvt[-0].pn = new name(yypvt[-0].pn->string);
				yypvt[-0].pn->n_qualifier = yypvt[-1].pn;
				yyval.p = new ref(DOT,yypvt[-3].pe,yypvt[-0].pn);
				if ( yypvt[-1].pn && yypvt[-1].pn->n_template_arg != template_type_formal )
					UNSET_SCOPE();
			} break;
case 339:
# line 2530 "gram.y"
{ // set scope to parse 'C::operator N' where N is in C
			  // still does not handle 'p->operator N'
			  //     (requires either fancier structures or 
			  //     on-the-fly type checking)
				yyval.p = Ncopy(yypvt[-0].pn);
				yyval.pn->n_qualifier = yypvt[-1].pn;
				if ( yypvt[-1].pn && yypvt[-1].pn->n_template_arg != template_type_formal )
					UNSET_SCOPE();
			} break;
case 340:
# line 2540 "gram.y"
{
				yyval.p = dummy_dtor();
				yyval.pn->n_qualifier = yypvt[-2].pn;
				yyval.pn->n_dtag = yypvt[-0].pn;
			} break;
case 341:
# line 2546 "gram.y"
{	
				yyval.p = dummy_dtor( yypvt[-0].t, yypvt[-0].t );
				yyval.pn->n_qualifier = yypvt[-2].pn;
			} break;
case 342:
# line 2551 "gram.y"
{
			if ( init_seen )
     				error( "syntax error:IrL illegal within ()");
			} break;
case 343:
# line 2557 "gram.y"
{
				if ( yypvt[-1].p == dummy )
					error("syntax error: nullE");
				yyval.p = yypvt[-1].p;
			} break;
case 344:
# line 2563 "gram.y"
{	yyval.p = zero; } break;
case 345:
# line 2565 "gram.y"
{	yyval.p = new expr(ICON,0,0);
				yyval.pe->string = copy_if_need_be(yypvt[-0].s);
			} break;
case 346:
# line 2569 "gram.y"
{	yyval.p = new expr(FCON,0,0);
				yyval.pe->string = copy_if_need_be(yypvt[-0].s);
			} break;
case 347:
# line 2573 "gram.y"
{	yyval.p = new expr(STRING,0,0);
				yyval.pe->string = copy_if_need_be(yypvt[-0].s);
			} break;
case 348:
# line 2577 "gram.y"
{	yyval.p = new expr(CCON,0,0);
				yyval.pe->string = copy_if_need_be(yypvt[-0].s);
			} break;
case 349:
# line 2581 "gram.y"
{	yyval.p = new expr(THIS,0,0); } break;
case 350:
# line 2585 "gram.y"
{	
				yyval.p = dummy_dtor();
				yyval.pn->n_dtag = yypvt[-0].pn; // checked later
			} break;
case 351:
# line 2590 "gram.y"
{	
				yyval.p = dummy_dtor();
				yyval.pn->n_qualifier = yypvt[-2].pn; // checked later
				yyval.pn->n_dtag = yypvt[-0].pn; // checked later
			} break;
case 352:
# line 2596 "gram.y"
{ yyval.p = dummy_dtor(yypvt[-3].t,yypvt[-0].t); } break;
case 353:
# line 2598 "gram.y"
{ yyval.p = dummy_dtor(yypvt[-0].t,yypvt[-0].t); } break;
case 354:
# line 2600 "gram.y"
{	
				yyval.p = dummy_dtor( yypvt[-3].t, yypvt[-3].t );
				yyval.pn->n_dtag = yypvt[-0].pn;
			} break;
case 355:
# line 2605 "gram.y"
{
				yyval.p = dummy_dtor( yypvt[-0].t, yypvt[-0].t );
				yyval.pn->n_qualifier = yypvt[-2].pn;
			} break;
case 356:
# line 2610 "gram.y"
{ // kluge to parse parameterized qualifiers after ./->
				yyval.p = dummy_dtor();
				yyval.pn->n_qualifier = yypvt[-2].pn;
				yyval.pn->n_dtag = yypvt[-0].pn;
			} break;
case 357:
# line 2616 "gram.y"
{ // kluge to parse parameterized qualifiers after ./->
				yyval.p = dummy_dtor( yypvt[-0].t, yypvt[-0].t );
				yyval.pn->n_qualifier = yypvt[-2].pn;
			} break;
case 358:
# line 2623 "gram.y"
{ 	yyval.p = new texpr(VALUE,tok_to_type(yypvt[-3].t),yypvt[-1].pe); } break;
case 359:
# line 2628 "gram.y"
{	
				yyval.p = new texpr(VALUE,yypvt[-3].pn->tp,yypvt[-1].pe); 
				if (yypvt[-3].pn->is_template_arg() && 
				    yypvt[-3].pn->tp->base == ANY) {
					yyval.pe->base = PT_VALUE;
					yyval.pe->pt_name = yypvt[-3].pn;
				}
			} break;
case 360:
# line 2636 "gram.y"
{ goto new2; } break;
case 361:
# line 2638 "gram.y"
{	new2:
				Ptype t = yypvt[-0].pn->tp;
				yyval.p=new texpr(NEW,t,0);
				yyval.pe->e2 = yypvt[-2].pe;
				--in_new;
			} break;
case 362:
# line 2644 "gram.y"
{ goto new4; } break;
case 363:
# line 2646 "gram.y"
{	new4:
				Ptype t = yypvt[-0].pn->tp;
				yyval.p = new texpr(GNEW,t,0);
				yyval.pe->e2 = yypvt[-2].pe;
				--in_new;
			} break;
case 364:
# line 2653 "gram.y"
{	
				Pexpr ee = yypvt[-1].pe;
				Pexpr e = yypvt[-3].pe;
				if (e->base==NEW || e->base==GNEW)
					e->e1 = ee;
				else
					yyval.p = new call(e,ee);
			} break;
case 365:
# line 2665 "gram.y"
{
		    yyval.pn =parametrized_typename(yypvt[-3].pn,(expr_unlist(yypvt[-1].el))); 
	 	 } break;
case 366:
# line 2670 "gram.y"
{ yyval.pn = yypvt[-0].pn; } break;
case 367:
# line 2671 "gram.y"
{ yyval.pn = sta_name; } break;
case 368:
# line 2672 "gram.y"
{ yyval.pn = yypvt[-1].pn; } break;
case 369:
# line 2677 "gram.y"
{
				if ( in_arg_list && !in_binit_list ) {
				    Pktab tb = Ctbl;
				    for (; tb && tb->k_id==ARG; tb=tb->k_next) {
					if ( tb->look(yypvt[-0].pn->string,0) ) {
						error("illegalR toA%n in defaultA",yypvt[-0].pn);
						yypvt[-0].pe = dummy;
						break;
					}
				    }
				}
				yyval.p = yypvt[-0].pn;
			} break;
case 370:
# line 2691 "gram.y"
{	yyval.p = new name(oper_name(yypvt[-0].t));
				yyval.pn->n_oper = yypvt[-0].t;
			} break;
case 371:
# line 2695 "gram.y"
{	yyval.p = yypvt[-0].p;
				sig_name(yyval.pn);
			} break;
case 372:
# line 2704 "gram.y"
{
				yyval.p = Ncast(yypvt[-2].p,yypvt[-1].pn);
			} break;
case 373:
# line 2709 "gram.y"
{ check_cast(); } break;
case 374:
# line 2713 "gram.y"
{
				TOK t = yypvt[-0].t;

				switch (t) {
				case FRIEND:
				case OVERLOAD:
				case REGISTER:
				case STATIC:
				case EXTERN:
				case AUTO:
				case VIRTUAL:
					error("%k in operatorT",t);
					t = INT;
					
				}

				yyval.p = new basetype(t,0);

			} break;
case 375:
# line 2732 "gram.y"
{ yyval.p = new basetype(TYPE,yypvt[-0].pn); } break;
case 376:
# line 2734 "gram.y"
{ 
				if ( DECL_TYPE != -1 ) {
					switch (yypvt[-1].pb->base) { 
					case COBJ: case EOBJ:
						{
						Pbase bt;
						bt = new basetype(0,0);
						*bt = *yypvt[-1].pb;
						DEL(yypvt[-1].pb);
						yypvt[-1].pb = bt;
						}
					}
					yyval.p = yypvt[-1].pb->type_adj(yypvt[-0].t); 
				}
				DECL_TYPE = 0;
			} break;
case 377:
# line 2751 "gram.y"
{ 
				if ( DECL_TYPE != -1 ) 
			 		yyval.p = yypvt[-1].pb->name_adj(yypvt[-0].pn);
				DECL_TYPE = 0;
			} break;
case 378:
# line 2758 "gram.y"
{ yyval.p = Ncast(yypvt[-1].p,yypvt[-0].pn); } break;
case 379:
# line 2761 "gram.y"
{ yyval.p = Ncast(yypvt[-1].p,yypvt[-0].pn); } break;
case 380:
# line 2764 "gram.y"
{	
                         //      ENTER_NAME(yypvt[-0].pn);
				yyval.p = Ndata(yypvt[-1].p,yypvt[-0].pn); 
			} break;
case 381:
# line 2769 "gram.y"
{
                        //      ENTER_NAME(yypvt[-1].pn);
                        } break;
case 382:
# line 2773 "gram.y"
{       
				if (templp->in_progress == true) 
					default_args = 1;
				yyval.p = Ndata(yypvt[-4].p,yypvt[-3].pn);
                                yyval.pn->n_initializer = yypvt[-0].pe;
                        } break;
case 383:
# line 2782 "gram.y"
{	PUSH_ARG_SCOPE();//SYM
				//SAVE_STATE();
				in_arg_list=1; 
				check_decl(); 
				yyval.pl = 0;
				//SYM -- tn stuff removed
			} break;
case 384:
# line 2792 "gram.y"
{
			yyval.p = new fct(0,name_unlist(yypvt[-3].nl),yypvt[-2].t); 
			if ( NEXTTOK() != COLON ) in_arg_list=0;
			//in_arg_list=0;
			Pfct(yyval.pt)->f_const = (yypvt[-0].i & 1);
			//SYM -- removed kluge
                        POP_SCOPE();//SYM
			//RESTORE_STATE();
		    } break;
case 385:
# line 2804 "gram.y"
{
				if (yypvt[-0].p)
					if (yypvt[-2].p)
						yypvt[-2].nl->add(yypvt[-0].pn);
					else {
						error("AD syntax");
						yyval.nl = new nlist(yypvt[-0].pn); 
					}
				else
					error("AD syntax");
			} break;
case 386:
# line 2816 "gram.y"
{
				if (yypvt[-0].p) yyval.nl = new nlist(yypvt[-0].pn); 
			} break;
case 388:
# line 2822 "gram.y"
{	yyval.p = 0; } break;
case 389:
# line 2826 "gram.y"
{	yyval.t = 1; } break;
case 390:
# line 2828 "gram.y"
{	yyval.t = ELLIPSIS; } break;
case 391:
# line 2830 "gram.y"
{	yyval.t = ELLIPSIS; } break;
case 392:
# line 2834 "gram.y"
{
			yyval.p = new ptr(PTR,0); 
			EXPECT_ID();
			} break;
case 393:
# line 2839 "gram.y"
{
			yyval.p = new ptr(RPTR,0); 
			EXPECT_ID();
			} break;
case 394:
# line 2844 "gram.y"
{	yyval.p = doptr(PTR,yypvt[-0].t); } break;
case 395:
# line 2846 "gram.y"
{	
				switch ( yypvt[-0].t ) {
				case CONST:
                                     yypvt[-1].pp->b_const = 1; break;
				case VOLATILE:
				     error('w',"\"volatile\" not implemented (ignored)");
				     break;
				default:
				    error( "syntax error: *%k", yypvt[-0].t );
				}
				yyval.p = yypvt[-1].pp; 
			} break;
case 396:
# line 2859 "gram.y"
{	yyval.p = doptr(RPTR,yypvt[-0].t); } break;
case 397:
# line 2861 "gram.y"
{	goto memptr1;  } break;
case 398:
# line 2863 "gram.y"
{
			memptr1:
			yyval.p = new ptr(PTR,0);
			Pname n = yypvt[-0].pn;
			if (n->is_template_arg()==0) {
				if(n->tp->skiptypedefs()->base != COBJ) {
				    yyval.pp->memof = 0;
				    error("P toM of nonCT");
				}
				else yyval.pp->memof = n->tp->skiptypedefs()->classtype();
			}
			else {
				yyval.pp->memof = 0;
				yyval.pp->ptname = n;
			}
			EXPECT_ID();
			} break;
case 399:
# line 2881 "gram.y"
{	
				yypvt[-1].t = yypvt[-0].t;
				goto memptr2;  
			} break;
case 400:
# line 2886 "gram.y"
{	
				memptr2:
				yyval.p = doptr(PTR,yypvt[-0].t);
				yyval.pp->memof = yypvt[-1].pn->tp->classtype();
			} break;
case 401:
# line 2893 "gram.y"
{ yyval.p = new vec(0,yypvt[-1].pe!=dummy?yypvt[-1].pe:0 ); } break;
case 402:
# line 2894 "gram.y"
{ yyval.p = new vec(0,0); } break;
		}
		goto yystack;  /* stack new state and value */

	}
