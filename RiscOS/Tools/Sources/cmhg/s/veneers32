; s.veneers - Interface veneers between 32-bit modules written in C and RISC OS
; Copyright (C) Pace Micro Technology plc. 1999

        AREA |C32$$code|, CODE, READONLY

V_Bit           *       &10000000
SVC_Mode        *       3
Error_BadSWI    *       &1E6

sb              RN      9

XMessageTrans_ErrorLookup * &61506

        ASSERT  a1 = r0
        ASSERT  a2 = r1
        ASSERT  a3 = r2
        ASSERT  a4 = r3
        ASSERT  v1 = r4
        ASSERT  v2 = r5
        ASSERT  v3 = r6
        ASSERT  v4 = r7
        ASSERT  v5 = r8
        ASSERT  v6 = r9
        ASSERT  sb = r9
        ASSERT  sl = r10
        ASSERT  fp = r11
        ASSERT  ip = r12
        ASSERT  sp = r13
        ASSERT  lr = r14
        ASSERT  pc = r15


        EXPORT  b_veneer_32
        EXPORT  bl_veneer_32
        EXPORT  initialise_lib_veneer_32
        EXPORT  initialise_user_veneer_32
        EXPORT  initialise_end_veneer_32
        EXPORT  finalise_user_veneer_32
        EXPORT  finalise_end_veneer_32
        EXPORT  finalise_lib_veneer_32
        EXPORT  service_call_veneer_32
        EXPORT  cmd_handler_veneer_32
        EXPORT  swi_handler_veneer_32
        EXPORT  swi_decode_veneer_32
        EXPORT  swi_decode2_start_veneer_32
        EXPORT  swi_decode2_end_veneer_32
        EXPORT  irq_entry_veneer_32
        EXPORT  irq_common_head_veneer_32
        EXPORT  irq_common_tail_veneer_32
        EXPORT  generic_entry_veneer_32
        EXPORT  generic_common_head_veneer_32
        EXPORT  generic_common_tail_veneer_32

b_veneer_32
        DCD     b_start
        DCD     b_end  - b_start
        DCD     b_call - b_start
        DCD     -1

b_start
b_call
        B       .
b_end

bl_veneer_32
        DCD     bl_start
        DCD     bl_end  - bl_start
        DCD     bl_call - bl_start
        DCD     -1

bl_start
bl_call
        BL      .
bl_end

;
; Initialisation code:
;
; On entry R10 = pointer to environment string
;          R11 = I/O base or instantiation number
;          R12 = private word pointer
;          V clear
;          Mode: SVC26 or SVC32
;
; On exit, set V and R0 if error.
;
; Must preserve R7-R11,R13
; Can corrupt R0-R6,R12,R14,flags (except V)
;
initialise_lib_veneer_32
        DCD     initialise_lib_start
        DCD     initialise_lib_end  - initialise_lib_start
        DCD     initialise_lib_call - initialise_lib_start
        DCD     -1

initialise_lib_start
        STMFD   sp!, {r7-r11, lr}
; It is vital that the next MOV a1,... precedes the BL; CMHG assumes so.
        MOV     a1, #1                  ; request data copying (multiple
initialise_lib_call                     ; instantiation) by default to
        BL      .                       ; _clib_initialisemodule
initialise_lib_end

initialise_user_veneer_32
        DCD     initialise_user_start
        DCD     initialise_user_end  - initialise_user_start
        DCD     initialise_user_call - initialise_user_start
        DCD     %FT01 - initialise_user_start
        DCD     %FT02 - initialise_user_start
        DCD     %FT03 - initialise_user_start
        DCD     -1

; _kernel_oserror *user_init(char *cmd_tail, int podule_base, void *priv_word);
initialise_user_start
        LDMVSFD sp!, {r7-r11, pc}       ; exit quickly on error
        MOV     a3, a1                  ; private word pointer (from
                                        ; _clib_initialisemodule)

01      SUB     sl, sl, #0000           ; Added by NK to fix nested initialisations
        LDMIA   sl, {a1, a2}            ; and rewritten by KJB to not use hard-coded
        SUB     sl, sl, #20             ; -536, -540 offsets.
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers
        STMIA   sl, {a1, a2}
02      ADD     sl, sl, #0000

        ADD     a1, sp, #(10-7)*4       ; R10 = command tail
        LDMIA   a1, {a1, a2}            ; R11 = podule base
        MOV     fp, #0                  ; halt C backtrace here!
initialise_user_call
        BL      .
03      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        CMP     r0, #0                  ; clears V if R0 is zero.
        MOVNE   r1, #0
        CMPNE   r1, #&80000000          ; set V
        LDMFD   sp!, {r7-r11, pc}
initialise_user_end

initialise_end_veneer_32
        DCD     initialise_end_start
        DCD     initialise_end_end  - initialise_end_start
        DCD     -1
        DCD     -1

initialise_end_start
        LDMFD   sp!, {r7-r11, pc}
initialise_end_end

;
; Finalisation code:
;
; On entry R10 = fatality indication
;          R11 = instantiation number
;          R12 = private word pointer
;          V clear
;          Mode: SVC26 or SVC32
;
; On exit set V and R0 if error
;
; Must preserve R7-R11,R13
; Can corrupt R0-R6,R12,R14,flags (except V)
;
finalise_user_veneer_32
        DCD     finalise_user_start
        DCD     finalise_user_end - finalise_user_start
        DCD     finalise_user_call - finalise_user_start
        DCD     %F01 - finalise_user_start
        DCD     -1

finalise_user_start
        STMDB   sp!, {r7-r12, lr}       ; may corrupt r0-r6,r12,r14
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; Bottom of SVC stack
        LDMIA   sl, {v1, v2}            ; Save old reloc modifiers
        LDR     r12, [r12]
        LDMIB   r12, {fp, r12}          ; -> static data
        STMIA   sl, {fp, r12}           ; new reloc modifiers
01      ADD     sl, sl, #0000
        MOV     fp, #0
        ADD     a1, sp, #3*4            ; set up args
        LDMIA   a1, {a1-a3}
finalise_user_call
        BL      .                       ; to user finalisation
finalise_user_end

finalise_end_veneer_32
        DCD     finalise_end_start
        DCD     finalise_end_end  - finalise_end_start
        DCD     finalise_end_call - finalise_end_start
        DCD     %F01 - finalise_end_start
        DCD     -1

finalise_end_start
        CMP     r0, #0
        BNE     %FT01
        LDR     r0, [sp, #5*4]
finalise_end_call
        BL      .                       ; to _clib_finalisemodule
        MOVS    r0, #0
01      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        MOVNE   r1, #0
        CMPNE   r1, #&80000000
        LDMFD   sp!, {r7-r12, pc}
finalise_end_end

finalise_lib_veneer_32
        DCD     finalise_lib_start
        DCD     finalise_lib_end - finalise_lib_start
        DCD     finalise_lib_call - finalise_lib_start
        DCD     %F01 - finalise_lib_start
        DCD     %F02 - finalise_lib_start
        DCD     -1

finalise_lib_start
        STMFD   sp!, {r7-r11, lr}
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     r0, r12                 ; make life easy for _clib_finalise
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl, {fp, r12}           ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!
finalise_lib_call
        BL      .                       ; to _clib_finalisemodule
02      SUBS    sl, sl, #0000           ; clear V
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r7-r11, pc}
finalise_lib_end

;
; Service call handler:
;
; On entry R1  = service number
;          R12 = private word pointer
;          Mode: SVC26, SVC32, IRQ26 or IRQ32
;
; R1 set to zero to claim call, else R1 preserved
; R0,R2-R8 should be preserved unless passing back results
; Must preserve R9-R11,R13
; Can corrupt R12,R14,flags (yes really)
;
service_call_veneer_32
        DCD     service_call_start
        DCD     service_call_end  - service_call_start
        DCD     service_call_call - service_call_start
        DCD     %F01 - service_call_start
        DCD     %F02 - service_call_start
        DCD     -1

; void sc_handler(int service_no, _kernel_swi_regs *r, void *priv_word);
service_call_start
        STMFD   sp!, {r0-r9, sl, fp, lr}; create args in store
        MOV     a1, r1                  ; service call number
        MOV     a2, sp                  ; regset *
        MRS     v3, CPSR                ; get hold of processor status register
        ORR     a4, v3, #SVC_Mode       ; force SVC mode (preserve 26/32 bitness)
        MSR     CPSR_ctl, a4            ; change mode, preserving interrupt enable
        MOV     fp, #0                  ; halt C backtrace here!
        MOV     v4, lr                  ; save r14_SWI (lest entry mode = IRQ)
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a3, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {v5, v6}           ; new relocation modifiers
        STMIA   sl,  {v5, v6}           ; set by module init
01      ADD     sl, sl, #0000

service_call_call
        BL      .

        MOV     lr, v4                  ; retrieve SWI r14
        MSR     CPSR_ctl, v3            ; back to entry mode
02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r0-r9, sl, fp, pc}
service_call_end

;
; Command handler:
;
; On entry R0 = pointer to command tail (read-only)
;          R1 = number of parameters
;          R12 = private word pointer
;          V clear
;          Mode: SVC26 or SVC32
;
; On exit, set V and R0 if error.
;
; Must preserve R7-R11,R13
; Can corrupt R0-R6,R12,R14,flags (except V)
;
cmd_handler_veneer_32
        DCD     cmd_handler_start
        DCD     cmd_handler_end  - cmd_handler_start
        DCD     cmd_handler_call - cmd_handler_start
        DCD     %F01 - cmd_handler_start
        DCD     %F02 - cmd_handler_start
        DCD     -1

; _kernel_oserror *cmd_handler(char *arg_str, int argc, int cmd_no, void *pw);
cmd_handler_start
        STMFD   sp!, {r0, sl, fp, lr}
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a4, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; (set by module init)
01      ADD     sl, sl, #0000           ; relocated by abs(sl_lib_offset) (< 0)
        MOV     fp, #0                  ; halt C backtrace here!

cmd_handler_call
        BL      .                       ; a dummy call

02      SUB     sl, sl, #0000
        STMIA   sl,  {v1, v2}           ; restore old reloc modifiers
        LDMFD   sp!, {r1, sl, fp, lr}

        CMP     r1, r0                  ; allow return for *Help code
        CMPNE   r0, #0
        MOVEQ   pc, lr                  ; V cleared by one of above CMPs
        CMP     r0, #-1
        MOVEQ   r0, #0                  ; allow return for *Configure code
        MOV     r1, #0
        CMP     r1, #&80000000          ; set V
        MOV     pc, lr
cmd_handler_end

;
; SWI handler code:
;
; On entry R0-R9 passed from the SWI caller
;          R11 = SWI number modulo chunk size
;          R12 = private word pointer
;          R14 contains flags of the SWI caller
;          V clear
;          Mode: SVC26 or SVC32
;
; On exit, set V and R0 if error.
; R0-R9 are returned to SWI caller
;
; Can corrupt R10-R12,R14,flags (except V)
;
swi_handler_veneer_32
        DCD     swi_handler_start
        DCD     swi_handler_end  - swi_handler_start
        DCD     swi_handler_call - swi_handler_start
        DCD     %F01 - swi_handler_start
        DCD     %F02 - swi_handler_start
        DCD     -1

        EXPORT  swi_handler_veneer_32_modname_reloc_offset
swi_handler_veneer_32_modname_reloc_offset
        DCD     %F03 - swi_handler_start

        EXPORT  swi_handler_veneer_32_adrtoken_offset
swi_handler_veneer_32_adrtoken_offset
        DCD     %F04 - swi_handler_start

; _kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw);
swi_handler_start
        STMFD   sp!, {r0-r9, lr}        ; create args in store; save lr;
        MRS     v5, CPSR                ; get hold of the flags
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        MOV     a1, r11                 ; swi_no
        ADD     a2, sp, #4              ; 'r'
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a3, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!

swi_handler_call
        BL      .

02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        TEQ     a1, #0                  ; restore (pos modified) regs
        BNE     %FT05                   ; jump to error exit case
        MSR     CPSR_all, v5            ; restore flags (clears V, corrupts Z!)
        LDMFD   sp!, {r0-r9, pc}        ; return from SWI
05      ADD     sp, sp, #4              ; junk old R0 in saved registers
        ORR     v5, v5, #V_Bit          ; set V flag in saved PSR ready for exit
        CMP     a1, #-1
        BEQ     swi_handler_bad_swi     ; go and get the BadSWI translated error
        MSR     CPSR_all, v5            ; restore flags (sets V)
        LDMFD   sp!, {r1-r9, pc}        ; return value (error pointer) => r0
swi_handler_bad_swi
04      ADR     r0,BadSwiToken          ; Return "SWI out of range" if
        MOV     r1,#0                   ; return value = -1
        MOV     r2,#0
03      SUB     r4,pc,#0,30             ; gets relocated in write_output
        SUB     r4,r4,#0,22             ; this instruction might get removed by CMHG
        SWI     XMessageTrans_ErrorLookup
        MSR     CPSR_all, v5            ; restore flags (sets V)
        LDMFD   sp!, {r1-r9, pc}
BadSwiToken
        &       Error_BadSWI
        =       "BadSWI", 0
        ALIGN
swi_handler_end

;
; SWI decode code:
;
; On entry R0-R3 parameters for decoding
;          R12 = private word pointer
;          R14 contains flags of the SWI caller
;          V clear
;          Mode: SVC26 or SVC32
;
; On exit, set V if error.
; Must preserve R1,R3,R7-R11
; Text->number should update R0, number->text should update R2, otherwise preserve
; Can corrupt R4-R6,R12,R14,flags (except V)
;
swi_decode_veneer_32
        DCD     swi_decode_start
        DCD     swi_decode_end  - swi_decode_start
        DCD     swi_decode_call - swi_decode_start
        DCD     %F01 - swi_decode_start
        DCD     %F02 - swi_decode_start
        DCD     -1

; void swi_decode(int register[4], void *private_word);
swi_decode_start
        STMFD   sp!, {r0-r3, r10-r11, lr} ; create args in store; save lr;
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        MOV     a1, sp                  ; 'r'
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        MOV     a2, r12                 ; private word ptr.
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!

swi_decode_call
        BL      .

02      SUBS    sl, sl, #0000           ; clears V
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r0-r3, r10-r11, pc} ; restore (pos modified) regs
swi_decode_end

; The following two veneers form the two halves of the new decode
; veneer. They must be kept together so the inter-veneer branches work.

swi_decode2_start_veneer_32
        DCD     swi_decode2_start
        DCD     swi_decode2_num_to_text - swi_decode2_start
        DCD     swi_decode2_text_to_num - swi_decode2_start
        DCD     %F01                    - swi_decode2_start
        DCD     -1

swi_decode2_end_veneer_32
        DCD     swi_decode2_num_to_text
        DCD     swi_decode2_end         - swi_decode2_num_to_text
        DCD     swi_decode2_num_to_text - swi_decode2_num_to_text
        DCD     %F02                    - swi_decode2_num_to_text
        DCD     -1

; int swi_text_to_number(const char *string, void *pw);
; int swi_number_to_text(int swi_no, char *buffer, int offset, int end, void *pw);
swi_decode2_start
        STMFD   sp!, {r0-r3, r10-r11, lr} ; create args in store; save lr;
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     lr, [r12]               ; -> static data
        LDMIB   lr, {fp, lr}            ; new relocation modifiers
        STMIA   sl, {fp, lr}            ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!
        CMP     a1, #0
        BGE     %FT20

        MOV     a1, r1
        MOV     a2, r12
swi_decode2_text_to_num
        BL      .
        STR     a1, [sp, #4*0]
        B       %FT30

20      STMFD   sp!, {r12}
swi_decode2_num_to_text
        BL      .
        ADD     sp, sp, #4
        STR     a1, [sp, #4*2]

30
02      SUBS    sl, sl, #0000           ; clears V
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        LDMFD   sp!, {r0-r3, r10-r11, pc} ; restore (pos modified) regs
swi_decode2_end

irq_entry_veneer_32
        DCD     irq_entry_start
        DCD     irq_entry_end  - irq_entry_start
        DCD     -1
        DCD     -1

irq_entry_start
        STMFD   sp!, {r0-r9, sl, fp, lr}
        MOV     r2, #0
        B       .
irq_entry_end


irq_common_head_veneer_32
        DCD     irq_common_head_start
        DCD     irq_common_head_end  - irq_common_head_start
        DCD     %F02 - irq_common_head_start
        DCD     %F01 - irq_common_head_start
        DCD     -1

; int irq_handler(_kernel_swi_regs *r, void *private_word);
irq_common_head_start
        MOV     a1, sp                  ; input register set (possible args)
        MRS     v3, CPSR                ; get hold of the flags
        ORR     a4, v3, #SVC_Mode       ; force SVC mode (preserve 32-bitness)
        MSR     CPSR_ctl, a4            ; switch mode
        MOV     a2, r12                 ; private word ptr.

        MOV     v4, lr                  ; remember SWI r14
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!

02      ADD     lr, pc, #irq_common_head_end-.-8 ; relocated by cg_irq_handlers
        ADD     pc, pc, r2              ; despatch...
        NOP                             ; dummy, marking start of tail...
irq_common_head_end

        ; then   B       irq_handler_0           ; corrupts r0-r3, r12
        ;        B       irq_handler_1           ; corrupts r0-r3, r12
        ; .....

irq_common_tail_veneer_32
        DCD     irq_common_tail_start
        DCD     irq_common_tail_end  - irq_common_tail_start
        DCD     -1
        DCD     %F02 - irq_common_tail_start
        DCD     -1

irq_common_tail_start
02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        MOV     lr, v4                  ; restore SWI r14
        MOV     ip, v3                  ; copy flags to non-blatted register
        MSR     CPSR_ctl, v3            ; back to entry mode
        TEQS    r0, #0                  ; did he return 0?
        LDMFD   sp!, {r0-r9, sl, fp, lr}; If no, lr is correct to pass it on
        LDREQ   lr, [sp], #4            ; Yes
        MSR     CPSR_flg, ip            ; Restore flags
        MOV     pc, lr                  ; Return to right place
irq_common_tail_end


generic_entry_veneer_32
        DCD     generic_entry_start
        DCD     generic_entry_end  - generic_entry_start
        DCD     -1
        DCD     -1

generic_entry_start
        STMFD   sp!, {r0-r9, sl, fp, lr}
        MOV     r2, #0
        B       .
generic_entry_end


generic_common_head_veneer_32
        DCD     generic_common_head_start
        DCD     generic_common_head_end  - generic_common_head_start
        DCD     %F02 - generic_common_head_start
        DCD     %F01 - generic_common_head_start
        DCD     -1

; _kernel_oserror *generic_handler(_kernel_swi_regs *r, void *private_word);
generic_common_head_start
        MOV     a1, sp                  ; input register set (possible args)
        MRS     v3, CPSR                ; get hold of the flags
        ORR     a4, v3, #SVC_Mode       ; force SVC mode (preserve 32-bitness)
        MSR     CPSR_ctl, a4            ; switch mode
        MOV     a2, r12                 ; private word ptr.

        MOV     v4, lr                  ; remember SWI r14
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20         ; SP_LWM
        LDMIA   sl, {v1, v2}            ; save old reloc modifiers over fn call
        LDR     r12, [r12]              ; -> static data
        LDMIB   r12, {fp, r12}          ; new relocation modifiers
        STMIA   sl,  {fp, r12}          ; set by module init
01      ADD     sl, sl, #0000
        MOV     fp, #0                  ; halt C backtrace here!

02      ADD     lr, pc, #generic_common_head_end-.-8 ; relocated by cg_irq_handlers
        ADD     pc, pc, r2              ; despatch...
        B       .                       ; dummy, marking start of tail...
generic_common_head_end

        ; then   B       irq_handler_0           ; corrupts r0-r3, r12
        ;        B       irq_handler_1           ; corrupts r0-r3, r12
        ; .....
generic_common_tail_veneer_32
        DCD     generic_common_tail_start
        DCD     generic_common_tail_end  - generic_common_tail_start
        DCD     -1
        DCD     %F02 - generic_common_tail_start
        DCD     -1

generic_common_tail_start
02      SUB     sl, sl, #0000
        STMIA   sl, {v1, v2}            ; restore old reloc modifiers
        MOV     lr, v4                  ; restore r14_svc
        MSR     CPSR_ctl, v3            ; back to entry mode
        TEQ     a1, #0
        STRNE   a1, [sp]                ; blat stacked R0
        ORRNE   v3, v3, #V_Bit          ; set V bit
        MSR     CPSR_flg, v3            ; restore flags
        LDMFD   sp!, {r0-r9, sl, fp, pc}; return
generic_common_tail_end

        END
