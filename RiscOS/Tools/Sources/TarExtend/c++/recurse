/************************************************************************/
/* File:    recurse.c++                                                 */
/* Purpose: Routines to allow you to recurse down a directory structure */
/*           from a set root point.                                     */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@e-14.com>                      */
/* History: 0.01  1999-01-27                                            */
/*                Created.                                              */
/************************************************************************/


// Include Standard C headers
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <strings.h>

// Include Standard C++ headers
#include <iostream.h>
#include <fstream.h>

// Include Risc-OS headers
#include "kernel.h"
#include "swis.h"
#include "os.h"

// Include Application headers
#include "Types.h"
#include "Recurse.h"
#include "TList.h"
#include "CPathConv.h"
#include "RMalloc.h"
#include "MemCheck:MemCheck.h"

// Define pre-processor symbols.



/* ---------------------------------- Static (file) variables ----------------------------------- */
list<CPathConv> conversion_list;



/* ------------------------------------ Forward Declarations  ----------------------------------- */
unsigned int check_path_component_is_not_in_list(const char* path);
BOOL check_if_path_is_in_list(const char* path);
BOOL set_filetype(char* filename, int filetype);
void generate_unique_replacement_path(char* replacement_path, char* location, const char* word);
BOOL replace_path(char* path);
BOOL is_replacement_path_in_list(const char* path);



/* ------------------------------------- External variables ------------------------------------- */


/* This stores the maximum length allowable before a warning is produced. The default value is 100. */
extern unsigned int max_filename_length;

/* This is the path seperator character */
extern char path_seperator;

/* If this is 0, only errors are produced, otherwise verbose output */
extern unsigned int verbose_text;

/* This stores the root filename. */
extern char* root_filename;

/* This stores the name the archiver is to use. */
extern char* archive_name;

/* This stores the total number of files that have been scanned. */
extern unsigned long num_files_scanned;



/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* gstrans                                                              */
/*                                                                      */
/* This routine scans through the argument list and gstrans's every     */
/*  string that it contains.                                            */
/*                                                                      */
/* Parameters: argv[]. The argument vector.                             */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void gstrans(char *argv[])
{
  char buf[512], *p;
  _kernel_oserror *e;
  int returned_buffer_size;

  while (*++argv != NULL)
  {
    DBUG_PRINTF("gstrans(): String before translation is  %s\n", *argv);
    e = _swix(OS_GSTrans, _INR(0,2) | _OUT(2), (int)*argv, int(buf), sizeof(buf)-1, &returned_buffer_size);
    if (!e)
    {
      if (returned_buffer_size >= sizeof(buf) || (p = rmalloc(strlen(buf)+1)) == NULL)
      {
        continue;
      }
      *argv = p;
      buf[returned_buffer_size] = '\0';
      strcpy(p,buf);
      DBUG_PRINTF("gstrans(): String after translation is %s\n", p);
    }
  }
}



/************************************************************************/
/* scan_filepath                                                        */
/*                                                                      */
/* This routine scans the passed path and calculates a set of reductions*/
/*  that can e made to allow it to fit within max_length_allowed. These */
/*  reductions comprise of a set of path translations which are stored  */
/*  in a list.                                                          */
/*                                                                      */
/* Parameters: path. The path (in string form) to be checked.           */
/*             max_length_allowed. The maximum length of the path       */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void scan_filepath(const char* path, unsigned int max_length_allowed)
{
  DBUG_PRINTF("\nscan_filepath(): %s is too long at %d chars.\n", path, strlen(path));

  assert(path);
  assert(max_length_allowed > 0);

  // Copy the path to a new string.
  char* path_copy = rmalloc(strlen(path)+2);
  if (!path_copy)
  {
    cout << "scan_filepath(): Error allocating memory for the path copy." << endl;
    exit (EXIT_FAILURE);
  }
  strcpy(path_copy, path);

  // Add a path_seperator to the end of path_copy
//  MemCheck_SetChecking(0, 1); // Since (for this program) we are concatanting a string literal over, switch off read-access checking.
  strcat(path_copy, ".");
//  MemCheck_SetChecking(1, 1); // Switch read-access checking on again.

  DBUG_PRINTF("scan_filepath(): path is %s (length %d)\n", path, strlen(path));

  // Check the path for existing conversions in the conversions list.
  unsigned int truncation_length = check_path_component_is_not_in_list(path_copy);
  if (strlen(path_copy)-truncation_length < max_length_allowed)
  {
//    DBUG_PRINTF("scan_filepath(): %s has been truncated using an existing conversion to %s (only %d chars)\n", path, path_copy, strlen(path_copy)-truncation_length);
    rfree(path_copy);
    return;
  }

  // Scan through the filepath, getting the path segments and seeing if they can be 'chopped' down.
  // Search for the $ sign (if present). We are only interested in things after the devices, hence the $
  char* seperator = path_copy;                          // Set it to the beginning of the string
  char* temp_seperator = strchr(path_copy, (int)'$');   // Look for a '$' sign (if present)
  if (temp_seperator)                                   // If there is one.
  {
    seperator = temp_seperator;                         // Set the seperator pointer to the '$'
  }

  if (seperator)                                        // this should point to the '$' or the beginning of the path.
  {
    // Find the next file_seperator
 //   cout << "String after intial truncation is " << seperator << endl;
    seperator = strchr(seperator, (int)'.') + 1; // +1 to get past the seperator
    DBUG_PRINTF("String after first seperator is %s\n", seperator);

    int shortened_path_length;
    char* shortened_path = NULL;
    char* seperator2 = seperator;
    shortened_path = rmalloc(strlen(path_copy)+2); // Substrings should never be larger than the parent string

    do
    {
      // Find word (seperated by two file_seperators not already in the list.
      seperator = seperator2;
      seperator2 = strchr(seperator2, (int)'.')+1; // Move to the next seperator
      DBUG_PRINTF("String after sep2 is %s\n", seperator2);
      assert (seperator  != NULL);
      assert (seperator2 != NULL);

      // Get the shortened path
      shortened_path_length = (int)seperator2-(int)path_copy;
//      cout << "Shortened_path_length = " << shortened_path_length << endl;
      if ( shortened_path_length > strlen(path))
      {
        shortened_path_length = strlen(path);
      }
      if (shortened_path_length < strlen(path_copy))
      {
        strncpy(shortened_path, path, shortened_path_length);
        shortened_path[shortened_path_length-1] = '\0'; // -1 to remove the final seperator
        DBUG_PRINTF("The shortened path is '%s' (length %d)\n", shortened_path, shortened_path_length);
      }
    }
//    while ((check_if_path_is_in_list(shortened_path)) && (shortened_path_length < strlen(path_copy))); // Repeat until we find a path *not* in the list or the pointer is outside the string.
    while ((check_if_path_is_in_list(shortened_path))); // Repeat until we find a path *not* in the list or the pointer is outside the string.

    // Get the path segment (word) to be replaced.
    unsigned int word_length = (int)seperator2-(int)seperator;
    char* word = rmalloc (word_length+2);
    if (!word)
    {
      cout << "Error allocating memory for word (" << word_length+2 << " bytes." << endl;
      cout << "seperator2 = " << (int) seperator2 << " seperator = " << (int) seperator << endl;
      exit(EXIT_FAILURE);
    }
    strncpy(word, seperator, word_length);
    word[word_length] = '\0';
//    cout << "The word is '" << word << "' (length " << word_length << "). " << endl;

    // Make a shortened version of 'word' to replace the long one.
    if (strlen(word) > 1)
    {
      // take the first character of the word as the new string.
      char* replacement_path = rmalloc(strlen(shortened_path)+2); // Replacement string will be shorter than the original string.
      if (!replacement_path)
      {
        cout << "Error allocating memory for replacement_path (" << strlen(shortened_path)+2 << " bytes." << endl;
        exit(EXIT_FAILURE);
      }
      strcpy (replacement_path, shortened_path);
      char* location = replacement_path+(seperator-path_copy); // To the beginning of the word
      // Now replace the word with the replacement character.
      generate_unique_replacement_path(replacement_path, location, word);
//      cout << "Replacing path " << shortened_path << " with " << replacement_path << endl;

      // Append this to the list.
      CPathConv conversion(shortened_path, replacement_path);
//      cout << conversion << endl;
      node<CPathConv>* new_conversion = new node<CPathConv>(conversion);
      conversion_list.append_node(new_conversion);
//      conversion_list.append_node(new node<CPathConv>(conversion));
      rfree (replacement_path);
    }
    else
    {
      cout << "The word cannot be shortened as it only has one character." << endl;
    }

    DBUG_PRINTF("scan_filepath(): freeing the memory for word.\n");
    if (word != NULL)
    {
      rfree(word);
    }

    DBUG_PRINTF("scan_filepath(): Freeing the memory for shortened_path.\n");
    if (shortened_path)
    {
      rfree(shortened_path);
    }
  }

  if (path_copy)
  {
    DBUG_PRINTF("scan_filepath(): Freeing the memory for path_copy.\n");
    rfree (path_copy);
  }
}




/************************************************************************************
*  set_filetype
*
*  This routine sets the passed file to the passed type.
*
*  Parameters: filename  This is the filename of the file to be changed.
*              filetype  The filetype for the file to be changed to.
*
*  Returns:    It returns TRUE if the operation was successful, and FALSE otherwise.
*
************************************************************************************/
BOOL set_filetype(char* filename, int filetype)
{
  _kernel_oserror *err = NULL;
  err = _swix( OS_File, _IN(0)|_IN(1)|_IN(2), 18, filename, filetype);

  /* Firstly enusre that the file exists and there was not an error during the SWI call. */
  if (!file_exists(filename) || err)
  {
    return (FALSE);
  }

  return (TRUE);
}





/************************************************************************************
*  file_exists
*
*  This routine checks whether the passed file exists.
*
*  Parameters: filename  This is the filename of the file to be checked.
*
*  Returns:    It returns TRUE if the file exists, FALSE otherwise (or if there was
*               an error during the SWI call).
*
************************************************************************************/
BOOL file_exists(char* filename)
{
  _kernel_oserror *err;
  unsigned long int exists;
  err = _swix( OS_File, _IN(0)|_IN(1)|_OUT(0), 5, filename, &exists);
  if (!exists || err) /* File does not exist. */
  {
    return (FALSE);
  }
  return (TRUE);
}





/************************************************************************************
*
*
*  This routine recurses down the directory tree from 'namebuf' and scnas each file
*   (normal file or image file) that it comes across.
*
*  Parameters: namebuf. The filename to be recursed from.
*              namebufp. The last name checked.
*              cmps. ???
*
*  Returns:    void
*
************************************************************************************/
void reccheckdir(
  char *namebuf,
  char *namebufp,
  char *cmps)
{
  int pos = 0;
  int numread;
  int filetype;
  char resbuf[1024];
  char *resp;
  int i;
  _kernel_oserror *fail;

//  DBUG_PRINTF("reccheckdir(): namebuf  = %s\n", namebuf);
//  DBUG_PRINTF("reccheckdir(): namebufp = %s\n", namebufp);
//  DBUG_PRINTF("reccheckdir(): cmps     = %s\n", cmps);

  do
  {
    /* get several entries from the current directory level */

    fail = _swix( OS_GBPB, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|_IN(6)|_OUT(3)|_OUT(4),
            10, namebuf, resbuf, sizeof(resbuf), pos, sizeof( resbuf ), "*",
            &numread, &pos );
    if (fail != 0)
    {
      printf("Unexpected error");
      printf("Error: [%x]  (%s)", fail->errnum,fail->errmess);
      assert(1!=1); // End execution and give file and line info.
    }
//    DBUG_PRINTF("reccheckdir(): SWI called. %d entries read.\n", numread);

    // go through all the entries in this response block
    resp = &resbuf[0];
    for ( i=0; i<numread; i++ )
    {
//      DBUG_PRINTF("reccheckdir(): %d of %d entries\n", i, numread);
      sprintf( namebufp, ".%s", &resp[20] );
//      DBUG_PRINTF("reccheckdir(): namebufp = %s  namebuf = %s\n", namebufp, namebuf);

      // make a string from the contents of the response block for this entry
      filetype = *(int *)&resp[16];

      if ( filetype == 1 || filetype == 3 ) /* File or image (filetype&1)*/
      {
        unsigned long int length = strlen(namebuf);
        num_files_scanned++;

//        DBUG_PRINTF("File is : %s (length %ld)\n", namebuf, length);

        if (verbose_text != 0)
        {
          printf("File is : %s (length %ld)\n", namebuf, length);
        }
        if (length > max_filename_length)
        {
          /* Path length is too long */
          DBUG_PRINTF("path length of file : %s is too long at %ld)\n", namebuf, length);
          scan_filepath(namebuf, max_filename_length);
        }
      }

      /* Since it is a directory recurse down into it and repeat. */
      if ( filetype == 2 )
      {
        reccheckdir( namebuf, namebufp+strlen(namebufp), cmps);
      }

      /* find the next entry in the directory buffer */
      resp = &resp[20] + strlen( &resp[20] ) + 1 + 3;
      resp = (char *)((int)resp & ~3 );
      namebufp[0]='\0';
    }
  } while ( pos!=-1 );
}




/************************************************************************************
*  display_paths
*
*  This routine sorts the internal list into order and then displays all the nodes
*   in the list.
*
*  Parameters: void
*
*  Returns:    void
*
************************************************************************************/
void display_paths(void)
{
  conversion_list.sort(E_SORT_ORDER_ASCENDING);
  conversion_list.show_list();
}




/************************************************************************************
*  check_if_path_is_in_list
*
* This routine checks that the passed path is not in the list. It compares
*  against the original (i.e. non-altered) values.
*
*  Parameters: path. This is the path to be checked against.
*
*  Returns:    It returns TRUE if the path was found, FALSE otherwise
*
************************************************************************************/
BOOL check_if_path_is_in_list(const char* path)
{
  BOOL found = FALSE;

  assert (path!=NULL);

  DBUG_PRINTF("check_if_path_is_in_list(char*): Path is %s\n", path);

  // Ensure that the list is not empty
  if (conversion_list.get_size() == 0)
  {
    DBUG_PRINTF("check_if_path_is_in_list(char*): Nothing in list. Aborting.\n");
    return (FALSE);
  }

  // Scan through the list, checking if path contains anything in the list.
  for (unsigned int loop = 0; loop < conversion_list.get_size(); loop++)
  {
//    printf("check_if_path_is_in_list(char*): Node (%d of %d)\n", loop, conversion_list.get_size());
    CPathConv this_node(conversion_list.get_node(loop));

    // Do the two strings match?
    if (strcmp(path, this_node.get_original_value())==0) // The strings match
    {
//      cout << "check_if_path_is_in_list(char*): Node contains " << this_node << endl;
//      cout << this_node.get_original_value() << " matches " << path << endl;
      found = TRUE;
      break;
    }
  }

  return (found);
}



/************************************************************************************
*  check_path_component_is_not_in_list
*
* This routine checks that the passed path has no constituent parts in the
*  list. If it does, then it returns the cumulative reducation. for instance,
*  Fun2Em.Sources may be truncated down to F.S, leaving a cumulative chnage of 11
*  characters.
*
*  Parameters: path. The path to be searched for,
*
*  Returns:    The cumulative reduction in size.
*
************************************************************************************/
unsigned int check_path_component_is_not_in_list(const char* path)
{
  unsigned int truncation_length = 0;

  assert (path!=NULL);

//  cout << "check_path_component_is_not_in_list(char*): Path is " << path << endl;

  // Ensure that the list is not empty
  if (conversion_list.get_size() == 0)
  {
    DBUG_PRINTF("check_path_component_is_not_in_list(char*): List is empty. Aborting.\n");
    return (truncation_length);
  }

  // Scan through the list, checking if path contains anything in the list.
  for (unsigned int loop = 0; loop < conversion_list.get_size(); loop++)
  {
//    printf("check_path_component_is_not_in_list(char*): Node (%d of %d)\n", loop, conversion_list.get_size());
    CPathConv this_node(conversion_list.get_node(loop));

    // Is this node's original string a substring of path?
    if (strstr(path, this_node.get_original_value()))
    {
//      cout << "check_path_component_is_not_in_list(char*): Node contains " << this_node << endl;
//      cout << this_node.get_original_value() << " is a substring of " << path << endl;
      truncation_length += (strlen(this_node.get_original_value()) - strlen(this_node.get_replacement_value()));
    }
  }

  return (truncation_length);
}





/************************************************************************************
*  generate_unique_replacement_path
*
*  This routine replaces the character at 'location' with a shortened version
*   which will lead to a unique filename. The string passed in 'replacement_path'
*   is altered to be the new string.
*  Also it ensures that the replacement path is unique within the list, i.e. an
*   identical truncated name has not already been generated.
*
*  It also makes sure that if it gets to Z, it goes to A again and continues
*   until it reaches the original character. Then it increments the location
*   to move onto the next letter, and does the same thing with that letter.
*  This is to ensure that a directory with more than 26 items to be truncated
*   (or with some existing single-letter filenames) gets truncated correctly.
*
*  This will still probbably not behave correctly with (for instance) a
*   directory where all the files are single letters A-Z. In this case, it should
*   just return the original word.
*
*  Parameters: replacement_path. This will contain the altered path.
*
*  Assumes:    It assues that the replacement string will be smaller than the
*               string passed in. This should always be the case as this routine
*               performs the change itself.
*
*  Returns:    void
*
************************************************************************************/

void generate_unique_replacement_path(char* replacement_path, char* location, const char* word)
{
  unsigned int word_pos = 0;
  char replacement_char = word[word_pos]; // Initially make it the 1st letter of the word.
  char original_char = word[word_pos];

  assert(replacement_path);
  assert(word);

  // Ensure that if the word is only 1 char long, skip over it as it cannot be truncated.
  if (strlen(word) == 1)
  {
    return;
  }

  // Generate the new name.
  do
  {
    // create the new filename
    *location = replacement_char;           // Add the character
    *(location+1) = '\0';                   // Add the terminator
    replacement_char++;                     // Try another character

    if (replacement_char == original_char-1) // Has cycled around to the first letter
    {
      *location = original_char;
      location++; // move to the next location
      word_pos++;
      replacement_char = word[word_pos]; // Initially make it the word_pos letter of the word.
      original_char = word[word_pos];
    }

    if (replacement_char > 'Z')             // Cycle through the alphabet
    {
      replacement_char = 'A';
    }
  }
  while (file_exists(replacement_path) || is_replacement_path_in_list(replacement_path)); // Repeat until the file does not alreadt exist and the replacement path has not already been created.
}






/************************************************************************************
*  is_replacement_path_in_list
*
* This routine checks whether or not the passed *replacement* path already
*  exists in the list.
*
*  Parameters: path. The path to be replaced.
*
*  Returns:    It returns TRUE if the path exists, FALSE otherwise.
*
************************************************************************************/
BOOL is_replacement_path_in_list(const char* path)
{
  BOOL found = FALSE;

  // Ensure that we have not been passed in a NULL pointer
  assert (path!=NULL);

  // Ensure that the list is not empty
  if (conversion_list.get_size() == 0)
  {
    DBUG_PRINTF("is_replacement_path_in_list(const char*): Nothing in list. Aborting.\n");
    return (FALSE);
  }

  // Scan through the list, checking if path contains anything in the list.
  for (unsigned int loop = 0; loop < conversion_list.get_size(); loop++)
  {
    CPathConv this_node(conversion_list.get_node(loop));

    // Do the two strings match?
    if (strcmp(path, this_node.get_replacement_value())==0) // The strings match
    {
      found = TRUE;
      break;
    }
  }

  return (found);
}




/************************************************************************************
*  replace_path
*
* This routine converts the passed path to the replacement path if it is
*  present in the list. Hence a full pathname can be converted using this routine
*  to it's shortened form.
*
*  Parameters: path. The path to be replaced.
*
*  Assumes:    That the replacement path is smaller than the path passed in; no new
*               memory is allocated, and an attempt to copy to a shorter string
*               will overwrite other memory. At the moment This case is caught by
*               an assert() command in this routine.
*
*  Returns:    It returns TRUE if the path was replaced, FALSE otherwise.
*
************************************************************************************/
BOOL replace_path(char* path)
{
  BOOL found = FALSE;

  assert (path!=NULL);

  DBUG_PRINTF("replace_path(char*): Path is %s\n", path);

  // Ensure that the list is not empty
  if (conversion_list.get_size() == 0)
  {
//    cout << "replace_path(char*): Nothing in list. Aborting." << endl;
    return (FALSE);
  }

  // Scan through the list, checking if path contains anything in the list.
  for (unsigned int loop = 0; loop < conversion_list.get_size(); loop++)
  {
//    printf("check_if_path_is_in_list(char*): Node (%d of %d)\n", loop, conversion_list.get_size());
    CPathConv this_node(conversion_list.get_node(loop));

    // Do the two strings match?
    if (strcmp(path, this_node.get_original_value())==0) // The strings match
    {
      // Do an assert to check enough memory is allocated in the string.
      assert (strlen(this_node.get_replacement_value()) <= strlen(path));
      // Note: the line below assumes that the replacement string is shorter than the original string.
      strcpy (path, this_node.get_replacement_value());
      found = TRUE;
      break;
    }
  }

  return (found);
}






/************************************************************************************
*  output_archiver_file
*
* This routine writes the file which can be used to archive the directory
*  structure to the filename passed.
*
*  Parameters: archiver_filename  This is the filename of the file to be created.
*
*  Returns:    It returns TRUE if the operation was successful, FALSE otherwise
*
************************************************************************************/
BOOL output_archiver_file(char* archiver_filename)
{
  DBUG_PRINTF("output_archiver_file(char*)\n");
  // Open the output stream & check for errors
  ofstream output(archiver_filename);
  if (output.fail())
  {
    cout << "Error opening file " << archiver_filename << endl;
    return (FALSE);
  }

  output << "| Directory tree archiver." << endl;

  output << "| This file is automatically generated by TarExtend. Do not manually alter." << endl;

  output << "| Change directory to the root." << endl;

  // Filecrc the files.
  output << "echo Generating CRC for the uncompressed sources..." << endl;
  output << "*cdir CRCs" << endl;
  output << "*do filecrc -create -d " << root_filename << " -f CRCs.SourcCRC" << endl;

  // Scan through the list, outputing the details to the file.
  output << endl << "| Rename all the files." << endl;
  for (int loop = 0; loop < conversion_list.get_size(); loop++)
  {
    CPathConv this_node(conversion_list.get_node(loop));
    output << "rename " << this_node.get_original_value() << " " << this_node.get_replacement_value() << endl;
  }

  // The root filename may have changed; check whether it has or not. of it has then the name has to be change to the new one or the tar command will not work.
  if (check_if_path_is_in_list(root_filename))
  {
    cout << root_filename << " has been altered. Changing it to ";
    replace_path(root_filename);
    cout << root_filename << endl;
  }

  // Add the tar command
  output << endl << "| Creating the archive." << endl;
  output << "*cdir DR" << endl;
  output << "tar -Tcvf DR."<< archive_name << " " << root_filename << " { > DR.arclist }" << endl;

  // Now rename the sources back again.
  output << endl << "| Renaming all the source files back." << endl;
  for (loop = conversion_list.get_size()-1; loop >= 0; loop--)
  {
    CPathConv this_node(conversion_list.get_node(loop));
    output << "rename " << this_node.get_replacement_value() << " " << this_node.get_original_value() << endl;
  }

  // Filecrc the archive.
  output << endl << "| Generating CRC for the archive..." << endl;
  output << endl << "dir dr" << endl;
  output << "*do filecrc -create -d " << archive_name << " -f ^.CRCs.ArcCRC" << endl;

  DBUG_PRINTF("output_archiver_file(char*): Here #9\n",);
  // Finally set the filetype of arclist to text
  output << endl << "| Setting the filetype of the archive list to text" << endl;
  output << "settype arclist text" << endl;

  output.close();

  // Set type to taskobey
  set_filetype(archiver_filename, 4055);

  return (TRUE);
}





/************************************************************************************
*  output_dearchiver_file
*
* This routine writes the file which can be used to dearchive the directory
*  structure to the filename passed.
*
*  Parameters: dearchiver_filename  This is the filename of the file to be created.
*
*  Returns:    It returns TRUE if the operation was successful, FALSE otherwise
*
************************************************************************************/
BOOL output_dearchiver_file(char* dearchiver_filename)
{
  DBUG_PRINTF("output_dearchiver_file(char*)\n");

  ofstream output(dearchiver_filename);
  if (output.fail())
  {
    cout << "Error opening file " << dearchiver_filename << endl;
    return (FALSE);
  }

  output << "| Directory tree dearchiver." << endl;

  output << "| This file is automatically generated by TarExtend. Do not manually alter." << endl;

  output << endl << "set target$dir <obey$dir>" << endl;

  // Check the archive using CRC.
  output << endl << "| Checking CRC for the archive..." << endl;
  output << "echo Checking CRC for the archive" << endl;
  output << "dir <cdname$dir>.dr" << endl;
  output << "*do filecrc -d " << archive_name << " -f ^.CRCs.ArcCRC" << endl;

  // Dearchive the tarfile.
  output << endl << "| Dearchiving the archive." << endl;
  output << "echo dearchiving the archive..." << endl;
  output << "dir <target$dir>" << endl;
  output << "tar -xvf <cdname$dir>.dr." << archive_name << " " << root_filename << " { > unarclist }" << endl;

  // Scan through the list backwards, outputing the details to the file.
  output << endl << "| Renaming all the files." << endl;
  output << "echo renaming all the files..." << endl;
  for (int loop = conversion_list.get_size()-1; loop >= 0; loop--)
  {
    CPathConv this_node(conversion_list.get_node(loop));
    output << "rename " << this_node.get_replacement_value() << " " << this_node.get_original_value() << endl;
  }

  // Check that all the files are present and sizes are okay.
  output << endl << "| Use perl script to ensure all files have been dearchived." << endl;
  output << "do perl <cdname$dir>.tools.filecmp <cdname$dir>.dr.arclist <target$dir>.unarclist" << endl;

  // Finally set the filetype of unarclist to text
  output << endl << "| Setting the filetype of the unarchive list to text" << endl;
  output << "settype unarclist text" << endl;

  // Check the sources using CRC.
  output << endl << "| checking CRC for the uncompressed sources..." << endl;
  output << "*echo checking CRC for the uncompressed sources..." << endl;
  output << "*dir <cdname$dir>.dr" << endl;
  output << "*do filecrc -d <target$dir>." << root_filename << " -f ^.CRCs.SourcCRC" << endl;

  output.close();

  /* Set type to taskobey */
  set_filetype(dearchiver_filename, 4055);

  return (TRUE);
}





/************************************************************************************
*  output_manual_file
*
*  This routine writes the file which can be used to dearchive the directory
*   structure to the filename passed.
*
*  Parameters: manual_filename  This is the filename of the file to be created.
*
*  Returns:    It returns TRUE if the operation was successful, FALSE otherwise
*
************************************************************************************/
BOOL output_manual_file(char* manual_filename)
{
  DBUG_PRINTF("output_manual_file(char*)\n");

  ofstream output(manual_filename);
  if (output.fail())
  {
    cout << "Error opening file " << manual_filename << endl;
    return (FALSE);
  }

  output << "| Directory tree dearchiver." << endl;

  output << "| This file details the changes that have been made to the build tree to allow" << endl;
  output << "|  it to fit within the 100-character limitation of tar. It presents a series of" << endl;
  output << "|  renames which have to be performed to set the build back to it's original" << endl;
  output << "|  state." << endl << endl;

  // Scan through the list backwards, outputing the details to the file.
  for (int loop = conversion_list.get_size()-1; loop >= 0; loop--)
  {
    CPathConv this_node(conversion_list.get_node(loop));
    output << "rename " << this_node.get_replacement_value() << " " << this_node.get_original_value() << endl << endl;
  }

  output.close();

  /* Set type to obey */
  set_filetype(manual_filename, 4095);

  return (TRUE);
}

