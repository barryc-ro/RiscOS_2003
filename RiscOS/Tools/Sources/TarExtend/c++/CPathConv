/************************************************************************/
/* File:    CPathsConv.c++                                              */
/* Purpose: Stores 2 Risc OS filepaths - the original one, and one for  */
/*           it to be converted to. It also specifies a number of       */
/*           operations that can be performed on these filepaths.       */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@e-14.com>                      */
/* History: 0.01  1999-01-27                                            */
/*                Created.                                              */
/************************************************************************/

// Include Standard C headers
#include <stdlib.h>
#include <strings.h>
#include <assert.h>
#include <stdio.h>

// Include Standard C++ headers
#include <iostream.h>

// Include Application headers
#include "CPathConv.h"
#include "TList.h"
#include "RMalloc.h"

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */



/************************************************************************/
/* CPathConv(char*, char*)                                              */
/*                                                                      */
/* Main constructor for the CPathConv() class. It copies the two passed */
/*  character strings into itself. It assert's if either are NULL.      */
/*                                                                      */
/* Parameters: original_path_passed     The first string.               */
/*             replacement_path_passed  The second string               */
/*                                                                      */
/* Assumes:    Both strings are non-NULL - this case is caught using    */
/*              assertions.                                             */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
CPathConv::CPathConv(char* original_path_passed, char* replacement_path_passed)
{
  DBUG_PRINTF("CPathConv::CPathConv(char*, char*)\n");
  assert (original_path_passed != NULL);
  original_path = rmalloc(strlen(original_path_passed)+1);
  strcpy(original_path, original_path_passed);

  assert (replacement_path_passed != NULL);
  replacement_path = rmalloc(strlen(replacement_path_passed)+1);
  strcpy(replacement_path, replacement_path_passed);
//  DBUG_PRINTF("CPathConv::CPathConv(char* char* original_path_passed, char* replacement_path_passed): Created CPathConv object at %p\n", path);
}



CPathConv::CPathConv(const char* original_path_passed, const char* replacement_path_passed)
{
  DBUG_PRINTF("CPathConv::CPathConv(const char*, const char*)\n");
  assert (original_path_passed != NULL);
  original_path = rmalloc(strlen(original_path_passed)+1);
  strcpy(original_path, original_path_passed);

  assert (replacement_path_passed != NULL);
  replacement_path = rmalloc(strlen(replacement_path_passed)+1);
  strcpy(replacement_path, replacement_path_passed);
}



CPathConv::CPathConv(CPathConv& path)
{
  DBUG_PRINTF("CPathConv::CPathConv(CPathConv&)\n");
  assert (path.original_path != NULL);
  original_path = rmalloc(strlen(path.original_path)+1);
  strcpy(original_path, path.original_path);

  assert (path.replacement_path != NULL);
  replacement_path = rmalloc(strlen(path.replacement_path)+1);
  strcpy(replacement_path, path.replacement_path);
  DBUG_PRINTF("CPathConv::CPathConv(CPathConv&): original = %s replacement = %s\n", original_path, replacement_path);
}



CPathConv::CPathConv()
{
  DBUG_PRINTF("CPathConv::CPathConv()\n");
  original_path = NULL;
  replacement_path = NULL;
}

CPathConv::~CPathConv()
{
  DBUG_PRINTF("CPathConv::~CPathConv()\n");
  DBUG_PRINTF("CPathConv::~CPathConv(): Freeing CPathConv objects with memory at %p and %p\n", original_path, replacement_path);
  if (original_path)
  {
    rfree (original_path);
    original_path = NULL;
  }
  if (replacement_path)
  {
    rfree (replacement_path);
    replacement_path = NULL;
  }
  DBUG_PRINTF("CPathConv::~CPathConv(): End\n");
}


void CPathConv::display(void)
{
  DBUG_PRINTF("CPathConv::display(void)\n");
  cout << original_path << " will be replace with " << replacement_path << endl;
}


char* CPathConv::get_original_value(void)
{
  DBUG_PRINTF("CPathConv::get_original_value(void) : returning %s\n", original_path);
  return (original_path);
}


char* CPathConv::get_replacement_value(void)
{
  DBUG_PRINTF("CPathConv::get_replacement_value(void) : returning %s\n", replacement_path);
  return (replacement_path);
}


ostream& operator <<(ostream& stream, CPathConv& path_passed)
{
  DBUG_PRINTF("CPathConv::operator <<(ostream&, CPathConv&)\n");
  stream << path_passed.get_original_value() << " will be replaced with " << path_passed.get_replacement_value();
  return (stream);
}


// This comparison operation is done on the lengths of the original strings.
int operator <(CPathConv path1, CPathConv path2 )
{
  DBUG_PRINTF("CPathConv::operator <(CPathConv, CPathConv)\n");
  if (strlen(path1.get_original_value()) < strlen(path2.get_original_value()))
  {
    return(TRUE);
  }
  return (FALSE);
}


// This comparison operation is done on the lengths of the original strings.
int operator >(CPathConv path1, CPathConv path2 )
{
  DBUG_PRINTF("CPathConv::operator >(CPathConv, CPathConv)\n");
  if (strlen(path1.get_original_value()) > strlen(path2.get_original_value()))
  {
    return(TRUE);
  }
  return (FALSE);
}




int operator ==(CPathConv path1, CPathConv path2 )
{
  DBUG_PRINTF("CPathConv::operator ==(CPathConv path1, CPathConv path2 )\n");
  if (strcmp(path1.get_original_value()   , path2.get_original_value()) == 0 &&
      strcmp(path1.get_replacement_value(), path2.get_replacement_value()) == 0)
  {
    return(TRUE);
  }
  return (FALSE);
}




int CPathConv::operator =(CPathConv path1)
{
  DBUG_PRINTF("CPathConv::operator =(CPathConv)\n");
  // Copy the path over.
  if (original_path != NULL)
  {
    rfree (original_path);
    original_path = NULL;
  }
  if (replacement_path != NULL)
  {
    rfree (replacement_path);
    replacement_path = NULL;
  }
  original_path = rmalloc(strlen(path1.get_original_value())+1);
  strcpy(original_path, path1.get_original_value());

  replacement_path = rmalloc(strlen(path1.get_replacement_value())+1);
  strcpy(replacement_path, path1.get_replacement_value());

  return (TRUE);
}



BOOL CPathConv::set_data(char* new_original_path, char* new_replacement_path)
{
  DBUG_PRINTF("CPathConv::set_data(char*, char*)\n");
  // Copy the path over.
  if (original_path != NULL)
  {
    rfree (original_path);
    original_path = NULL;
  }
  if (replacement_path != NULL)
  {
    rfree (replacement_path);
    replacement_path = NULL;
  }
  original_path = rmalloc(strlen(new_original_path)+1);
  strcpy(original_path, new_original_path);
  replacement_path = rmalloc(strlen(new_replacement_path)+1);
  strcpy(replacement_path, new_replacement_path);
  DBUG_PRINTF("CPathConv::set_data(char*, char*): original_path = %s  replacement_path = %s\n", original_path, replacement_path);

  return (TRUE);
}

