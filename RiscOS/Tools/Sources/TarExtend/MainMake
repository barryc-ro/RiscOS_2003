# Main Makefile for the Tar Extension Utility
# ===========================================
#

# -----------------------------------------------------------------------------
# Change List
#

# Date          Name    Description
# ====          ====    ===========
# 1999-01-27    DSC     Created


# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= ^.Build
EXP_DIR		= ^.Build

# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CP		= copy
CC		= $(MemCheckCC) cc
C++		= $(MemCheckCC) c++
#C++		= g++
CM		= cmhg
RM		= remove
LD		= link
LB		= libfile
WIPE		= -wipe
TOUCH		= create

CCFLAGS		= -c -depend !Depend -ffah -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(CCEXTRA) -DBLAH
C++FLAGS	= -c -depend !Depend -ffa -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(C++EXTRA) -DBLAH
ASFLAGS		= -depend !Depend -Stamp -quit
CPFLAGS		= ~clfnr~v
#LDFLAGS		= -c++ -aof
LDFLAGS		=  $(EXTRALDFLAGS) -c++ -aof
LBFLAGS		= -c
WFLAGS		= ~CFR~V

# -----------------------------------------------------------------------------
# Libraries
#

CLIB		= CLib:o.stubs
ROMCSTUBS	= RISC_OSLib:o.romcstubs
ABSSYM		= RISC_OSLib:o.c_abssym
WRAPPER		= RISC_OSLib:s.ModuleWrap

C++LIB          = $(LIBDIR).C++Lib.o.c++lib

EVENTLIB	= $(LIBDIR).tboxlibs.o.eventlib
TOOLBOXLIB	= $(LIBDIR).tboxlibs.o.toolboxlib
WIMPLIB		= $(LIBDIR).tboxlibs.o.wimplib

SOCKLIB		= $(LIBDIR).TCPIPLibs.o.socklib5
DEBUGLIB	= $(LIBDIR).DebugLib.o.debuglib
INETLIB		= $(LIBDIR).TCPIPLibs.o.inetlib
UNIXLIB		= $(LIBDIR).TCPIPLibs.o.unixlib

LIBS = \
 $(SOCKLIB)\
 $(C++LIB)\
 $(CLIB)\
 $(EXTRALIBS)

LIBSMC = \
 $(SOCKLIB)\
 $(C++LIB)\
 $(CLIB)\
 $(EXTRALIBS)

# LIBSMC = \
#  $(NBLIB)MC\
#  $(WIMPLIB)\
#  $(TOOLBOXLIB)\
#  $(EVENTLIB)\
#  $(EMAILCOMMONLIB)MC\
#  $(MBOXLIB)MC\
#  $(NETLINKLIB)MC\
#  $(SOCKLIB)\
#  $(ACORNPOP3)\
#  $(ACORNSMTP)\
#  $(ELIB)MC\
#  $(EXTRALIBS)\
#  $(C++LIB)\
#  $(CLIB)\


# ------------------------------------------------------------------------------
# Include files
#

INCLUDES	= tbox:,C:,<Lib$Dir>.C++Lib,<Lib$Dir>


# -----------------------------------------------------------------------------
# Export Paths for Messages module
#

RESDIR          = $(RESDIR).$(RES_COMPONENT)
RESAPP          = <Resource$Dir>.Apps.$(APP)


# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= TarExtend
#RES_COMPONENT   = NCMail
APP             = !TarExtend
# MODULE	= rm.!NCMail
# ROM_MODULE	= aof.NCMail
LPATH           = LocalUserIFRes:

OBJS =\
 $(EXT).main \
 $(EXT).DBUG \
 $(EXT).Recurse \
 $(EXT).RMalloc \
 $(EXT).CPathConv
 
# FILES =\
#  $(LPATH)!Boot \
#  $(LPATH)!Run \


# ------------------------------------------------------------------------------
# Rule patterns
#

# The ROM variant of this library needs is principally intended for use with
# module-wrapped applications, so stack limit checking is not disabled in the
# ROM build rules below (it's fine for use with SVC mode module code as well).

.SUFFIXES: .o .od .oMC .oHP .oz .i .s .h .c .c++
.c.i:;		$(CC)  $(CCFLAGS)  -c -C -E $< >> $@
.c.o:;		$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.oMC:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.oHP:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.od:;		$(CC)  $(CCFLAGS)  -g -o $@ $<
.c.oz:;		$(CC)  $(CCFLAGS)  -zM -o $@ $<
.c++.i:;	$(C++) $(C++FLAGS) -c -C -E $< >> $@
.c++.o:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.oMC:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.oHP:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.od:;	$(C++) $(C++FLAGS) +g -o $@ $<
.c++.oz:;	$(C++) $(C++FLAGS) -zM -o $@ $<
.s.o:;		$(AS)  $(ASFLAGS)  -o $@ $<


# ------------------------------------------------------------------------------
# Build all the component
#

all:	$(TARGET) $(EXT).local_dirs
  	$(CP)	$(TARGET)	$(TARGET)	$(CPFLAGS)

debug:	$(TARGET) $(EXT).local_dirs
	$(CP)	$(TARGET)	$(TARGET)	$(CPFLAGS)

preprocess:	$(OBJS) $(EXT).local_dirs

# export_libsMC: export_libs
# 	@echo

# export_libsHP: export_libs
# 	@echo

clean_all: clean
 	@$(RM)   $(EXP_HDR).h.EngVersion
 	@$(RM)   $(EXP_HDR).h.enguiapi
	@$(RM)   $(EXP_HDR).h.engtypes
	@$(RM)   $(EXP_HDR).h.eng_dirs
	@$(RM)   $(EXP_HDR).$(EXT).eng_dirs
	@$(RM)   $(EXP_DIR).$(TARGET)

# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

clean:
	@$(WIPE) $(EXT)			$(WFLAGS)

# export_hdrs: h.Version h.enguiapi h.engtypes $(EXP_HDR).h.eng_dirs
# 	@$(CP)	h.Version	$(EXP_HDR).h.EngVersion			$(CPFLAGS)
# 	@$(CP)	h.enguiapi	$(EXP_HDR).h.enguiapi			$(CPFLAGS)
# 	@$(CP)	h.engtypes	$(EXP_HDR).h.engtypes			$(CPFLAGS)

# export_libs: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs
# 	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

ram: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

rom: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

install_common: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs $(FILES)
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

install: install_common
        @echo
        @echo $(COMPONENT): Application installed to ^.Build.$(INSTDIR)

#installd_common: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs $(FILES)
#	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

installd_common: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs $(FILES)
	$(CP)	$(TARGET)	$(EXT).$(COMPONENT)		$(CPFLAGS)
	@echo Memcheck build built.

installd: installd_common
        @echo $(COMPONENT): Debug application installed ^.Build.$(INSTDIR)

installMC: installd_common
        @echo $(COMPONENT): MemCheck application installed ^.Build.$(INSTDIR)

installHP: installd
        @echo $(COMPONENT): HierProf application installed ^.Build.$(INSTDIR)

# resources:
# 	@echo    $(RESDIR)
#         @$(MKDIR) $(RESDIR)
#         @$(MKDIR) $(RESAPP)
#         @$(CP) $(LPATH)!BootROM  $(RESAPP).!Boot       $(CPFLAGS)
#         @$(CP) $(LPATH)!RunROM   $(RESAPP).!Run        $(CPFLAGS)
#         @echo
#         @echo $(COMPONENT): Resource files copied to Messages module


$(EXT).local_dirs:
	@$(MKDIR) $(EXT)
	@$(MKDIR) Targets
	@$(TOUCH) $@

$(EXP_HDR).h.eng_dirs:
	@$(MKDIR) $(EXP_HDR).h
	@$(TOUCH) $@
	
$(EXP_DIR).$(EXT).eng_dirs:
	@$(MKDIR) $(EXP_DIR)
	@$(MKDIR) $(EXP_DIR).$(EXT)
	@$(TOUCH) $@


# ------------------------------------------------------------------------------
# Final link
#

$(TARGET): $(OBJS) $(EXT).local_dirs
	$(LD) $(LDFLAGS) -o $@ $(OBJS)


# ------------------------------------------------------------------------------
# Dynamic dependencies:
o.main:	c++.main
o.main:	h.types
o.main:	h.TList
o.main:	C:h.iostream
o.main:	C:h.memory
o.main:	h.types
o.main:	h.recurse
o.main:	h.RMalloc
o.DBUG:	c++.DBUG
o.DBUG:	h.types
o.Recurse:	c++.Recurse
o.Recurse:	C:h.iostream
o.Recurse:	C:h.memory
o.Recurse:	C:h.fstream
o.Recurse:	C:h.iostream
o.Recurse:	C:h.kernel
o.Recurse:	C:h.swis
o.Recurse:	C:h.os
o.Recurse:	h.Types
o.Recurse:	h.Recurse
o.Recurse:	h.TList
o.Recurse:	C:h.iostream
o.Recurse:	h.types
o.Recurse:	h.CPathConv
o.Recurse:	h.types
o.Recurse:	h.RMalloc
o.Recurse:	MemCheck:h.MemCheck
o.RMalloc:	c++.RMalloc
o.RMalloc:	h.types
o.RMalloc:	h.rmalloc
o.RMalloc:	C:h.dbug
o.CPathConv:	c++.CPathConv
o.CPathConv:	C:h.iostream
o.CPathConv:	C:h.memory
o.CPathConv:	h.CPathConv
o.CPathConv:	h.types
o.CPathConv:	h.TList
o.CPathConv:	C:h.iostream
o.CPathConv:	h.types
o.CPathConv:	h.RMalloc
