/************************************************************************/
/* File:    TList.h                                                     */
/* Purpose: To serve as a template linked-list class (doubly linked)    */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@e-14.com>                      */
/* History: 0.01  1999-01-26                                            */
/*                Created.                                              */
/************************************************************************/

// Include Standard C headers
#include <stdlib.h>

// Include Standard C++ headers
#include <iostream.h>

// Include Application headers
#include "types.h"

// Define pre-processor symbols.
// #define USE_TEST_HARNESS

enum sort_order
{
  E_SORT_ORDER_NONE,
  E_SORT_ORDER_ASCENDING,
  E_SORT_ORDER_DESCENDING
};


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* class node                                                           */
/*                                                                      */
/* This class acts as a 'holder' for whatever class is used to          */
/*  instantiate the template.                                           */
/*                                                                      */
/* Parameters: T       The type to be instantiated.                     */
/*                                                                      */
/* Assumes:    That the instantiator class has a set of operators.      */
/*                                                                      */
/* Returns:    Nothing.                                                 */
/*                                                                      */
/************************************************************************/
template <class T> class node
{
  public:

   node(T &value)
   {
     DBUG_PRINTF("node::node(T value)\n");
     node::value = value;
   }

   node(void)
   {
   }

   ~node()
   {
     DBUG_PRINTF("node::~node()\n");
   }

   T get_value(void)
   {
     return (value);
   }

   void show_value(void)
   {
     cout << value;
   }

   BOOL less_than(T* comparison)
   {
     BOOL return_val = FALSE;
     // Compare the two and return the result.
     if (value < *comparison)
     {
       return_val = TRUE;
     }

     return (return_val);
   }

   struct node<T> *next;
   struct node<T> *previous;

 private:
   T value;
};



template<class T> class list
{
  public:
    list(void)
    {
      DBUG_PRINTF("list::list()\n");
      first.next = NULL;
      last = &first;
      first.previous = NULL;
    }

    ~list()
    {
      DBUG_PRINTF("list::~list()\n");
      // Scan through the list of nodes deleting them as appropriate.
      node<T> *current_node = first.next;
      while (current_node)
      {
        node<T> *next_node = current_node->next;
        delete (current_node);
        current_node = next_node;
      }
    }

    void show_list(void);
    void* append_node(node<T>* new_node);
    void show_reverse(void);
    void insert_node(node<T>* new_node);
    void delete_node(T value);
    node<T> *search(T value);
    int count(T value);
    void sort(sort_order order);
    int get_size(void);
    T get_node(unsigned int number);

  private:
    node<T> first;
    node<T>* last;
};






/************************************************************************/
/* get_node                                                             */
/*                                                                      */
/*                                                                      */
/* This routine returns the 'number'th node in the list. This is very   */
/*  inefficient, and an iterator-type system would be much quicker.     */
/*  The first node is said to be at position 0.                         */
/*                                                                      */
/* Parameters: number. The number of the node that you require.         */
/*                                                                      */
/* Assumes:    That number is relatively sensible. if it is not, then   */
/*              this routine returns the last node in the list.         */
/*                                                                      */
/* Returns:    The node that was requested, or the last node if 'number'*/
/*              is invalid.                                             */
/*                                                                      */
/************************************************************************/
template<class T> T list<T>::get_node(unsigned int number)
{
  DBUG_PRINTF("list<T>::get_node(unsigned int)\n");
  unsigned int count = 0;
  node<T> *current_node = first.next;
  while (current_node)
  {
    if (count == number) // This is the node we want.
    {
      T temp(current_node->get_value());
      return (temp);
    }
    count++;
    current_node = current_node->next;
  }

//  assert (1!=1); // Ooops, asked for a silly number. Must handle this better...
  T temp(current_node->get_value()); // Return the last node.
  return (temp);

}




/*************************************************************************
* show_list
*
* This routine iterates through the list and displays all the nodes.
*
* Parameters: none
*
* Assumes:    Nothing
*
* Returns:    void
*
*************************************************************************/
template<class T> void list<T>::show_list(void)
{
  DBUG_PRINTF("list<T>::show_list(void)\n");
  node<T> *current_node = first.next;
  while (current_node)
  {
    current_node->show_value();
    current_node = current_node->next;
    cout << endl;
  }
}





/*************************************************************************
* count
*
* This routine counts all the ndes in the list containing the passed
*  value
*
* Parameters: value. The thing to be counted.
*
* Assumes:    Nothing
*
* Returns:    the number of 'value' in the list (0 if none).
*
*************************************************************************/
template<class T> int list<T>::count(T value)
{
  DBUG_PRINTF("list<T>::count(T)\n");

  node<T>* current_node = first.next;

  int count = 0;

  while (current_node)
  {
    if (current_node->get_value() == value)
    {
      count++;
      current_node = current_node->next;
    }
  }

  return (count);
}




/*************************************************************************
* get_size
*
* This routine returnd the number of nodes in the list.
*
* Parameters: void
*
* Assumes:    Nothing
*
* Returns:    the number of nodes in the list (0 if list is empty)
*
*************************************************************************/
template<class T> int list<T>::get_size(void)
{
  DBUG_PRINTF("list<T>::get_size(void)\n");
  unsigned int count = 0;
  node<T> *current_node = first.next;
  while (current_node)
  {
    current_node = current_node->next;
    count++;
  }

  return (count);
}



// This routine iterates through the list in reverse (from the end to the
//  start) and displays all the nodes.


/*************************************************************************
* show_reverse
*
* This routine iterates through the list in reverse (from the end to the
*  start) and displays all the nodes.
*
* Parameters: none
*
* Assumes:    Nothing
*
* Returns:    void
*
*************************************************************************/
template<class T> void list<T>::show_reverse(void)
{
  DBUG_PRINTF("list<T>::show_reverse(void)\n");
  node<T> *current_node = last;
  while (current_node->previous)
  {
    current_node->show_value();
    current_node = current_node->previous;
    cout << endl;
  }
}




/*************************************************************************
* append_node
*
* This routine appends the node pointed to to the list.
*
* Parameters: T* node_copy. A pointer to the node to be copied.
*
* Assumes:    Nothing
*
* Returns:    void*. A pointer to the node.
*
*************************************************************************/
template<class T> void* list<T>::append_node(node<T>* node_copy)
{
  DBUG_PRINTF("list<T>::append_node(node<T>*)\n");
  last->next = node_copy;
  node_copy->previous = last;
  last = node_copy;
  last->next = NULL;
  DBUG_PRINTF("list<T>::append_node(node<T>*): End\n");
  return (node_copy);
}



/*************************************************************************
* insert_node
*
* This routine inserts the node pointed to to the list.
*
* Parameters: T* new_node. A pointer to the node to be inserted
*
* Assumes:    Nothing
*
* Returns:    void.
*
*************************************************************************/
template<class T> void list<T>::insert_node(node<T> *new_node)
{
  DBUG_PRINTF("list<T>::insert_node(node<T>*)\n");
  node<T> *current_node = first.next;
  node<T> *previous_node = &first;

  while ((current_node) && (current_node != new_node))
  {
    current_node = current_node->next;
    previous_node = previous_node->next;
  }

  previous_node->next = new_node;
  new_node->previous = previous_node;
  new_node->next = current_node;
}




/*************************************************************************
* delete_node
*
* This routine deletes the first node in the list which contains the
*  passed value.
*
* Parameters: T value. The value to be searched for.
*
* Assumes:    Nothing
*
* Returns:    void.
*
*************************************************************************/
template<class T> void list<T>::delete_node(T value)
{
  DBUG_PRINTF("list<T>::delete_node(T value)\n");

  node<T> *current_node = first.next;
  node<T> *previous_node = &first;
  BOOL found = FALSE;

  while ((current_node) && (!(current_node->get_value() == value)))
  {
    current_node = current_node->next;
    previous_node = previous_node->next;
    found = TRUE;
  }

  /* Delete this node. */
  if (found)
  {
    previous_node->next = current_node->next;
    if (current_node->next != NULL) // it is not the last node
    {
      current_node->next->previous = previous_node;
    }
    delete (current_node);
  }
  else
  {
    DBUG_PRINTF("list<T>::delete_node(T value): Value not found.\n");
  }
  DBUG_PRINTF("list<T>::delete_node(T value): Exit\n");
}





/*************************************************************************
* search
*
* This routine returnd the first node in the list that contains the
*  passed value.
*
* Parameters: T value. The value to be searched for.
*
* Assumes:    Nothing
*
* Returns:    T*. A pointer to the located node (NULL if no match was
*                  (found).
*
*************************************************************************/
template<class T> node<T>* list<T>::search(T value)
{
  DBUG_PRINTF("list<T>::search(T)\n");
  node<T> *current_node = first.next;

  while (current_node)
  {
    if (current_node->get_value() == value)
    {
      return (current_node);
    }
    else
    {
      current_node = current_node->next;
    }
  }

  return (NULL);
}






/*************************************************************************
* list<T>::sort(void)
*
* This routine sorts the list. Atm it is very basic - it only sorts
*  into ascending order and relies on the instantiated class having an
*  less_than() member function.
*
* Parameters: void.
*
* Assumes:    The instantiated class has a > operator overloaded m
*              member.
*
*  Returns:    void.
*
*************************************************************************/
template<class T> void list<T>::sort(sort_order order)
{
  DBUG_PRINTF("void list<T>::sort(void)\n");

  // If the list has less than 2 numbers, it must be sorted already.
  if (get_size() < 2)
  {
//    cout << "List has less than 2 members. Aborting sort." << endl;
    return;
  }
  // Okay, sort the list.
  BOOL altered = TRUE;
  while (altered == TRUE)
  {
//    DBUG_PRINTF("void list<T>::sort(void):  Here #1\n");
    altered = FALSE;
    node<T> *iterator = &first;
    iterator = iterator->next; // Start with the second node.
    do
    {
//      DBUG_PRINTF("void list<T>::sort(void):  Here #2\n");
      iterator = iterator->next;

      node<T> *node_3 = iterator;
      node<T> *node_2 = node_3->previous;
      node<T> *node_1 = node_2->previous;
      node<T> *node_4 = node_3->next;
//      DBUG_PRINTF("void list<T>::sort(void):  Here #3\n");

//      cout << "node_1 is ";  node_1->show_value(); cout << endl;
//      cout << "node_2 is ";  node_2->show_value(); cout << endl;
//      cout << "node_3 is ";  node_3->show_value(); cout << endl;
//      cout << "node_4 is ";  node_4->show_value(); cout << endl;
      if (node_3->get_value() > node_2->get_value())
      {
//        DBUG_PRINTF("void list<T>::sort(void):  Here #5\n");
//        node_3->show_value();
//        cout << " is less than ";
//        node_3->previous->show_value();
//        cout << ". Swap them." << endl;

        // These nodes are in a line : 1->2->3->4
        //  We want them to be in    : 1->3->2->4

        {
          // Node is not the first or last nodes in the list.
          node_1->next = node_3;
          node_3->previous = node_1;

          node_3->next = node_2;
          node_2->previous = node_3;

          if (node_4 != NULL) // Is not last node in list
          {
            node_2->next = node_4;
            node_4->previous = node_2;
          }
          else
          {
            node_2->next = NULL;
          }

        }

        altered = TRUE;
      }
//      DBUG_PRINTF("void list<T>::sort(void):  Here #6\n");
    }
    while (iterator->next);
  } // End while altered
}


