#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"

int main(int argc, char **argv)
{
    int *infile_buffer;
    char *infile, *outfile, *symbol;
    int size, i;
    FILE *f;
    _kernel_osfile_block b;
    char cmdline[256];
    char tempfile[256];

    if (argc != 4) {
        fprintf(stderr, "Usage: BinAOF <Binary infile> <AOF outfile> <Symbol>\n");
        exit(1);
    }
    infile = argv[1];
    outfile = argv[2];
    symbol = argv[3];
    if (_kernel_osfile(17, infile, &b) != 1) {
        fprintf(stderr, "Error opening %s\n", infile);
        exit(1);
    }
    size = (b.start + 3) & ~3;
    if (!size) {
        fprintf(stderr, "Cant't BinAOF null file\n");
        exit(1);
    }
    infile_buffer = malloc(size);
    size = size / 4;
    *((int *)(infile_buffer + size - 1)) = 0;
    b.load = (int)infile_buffer;
    b.exec = 0;
    if (_kernel_osfile(16, infile, &b) != 1) {
        fprintf(stderr, "Error reading %s\n", infile);
        exit(1);
    }
    tmpnam(tempfile);
    if ((f = fopen(tempfile, "w")) == 0) {
        fprintf(stderr, "Error opening temporary file\n");
        exit(1);
    }
    fprintf(f, " EXPORT |%s_base|\n", symbol);
    fprintf(f, " EXPORT |%s_limit|\n", symbol);
    fprintf(f, " AREA |C$$data|\n");
    fprintf(f, "|%s_base|", symbol);
    for (i = 0; i < size; i++) {
        if ((i & 7) == 0)
            fprintf(f, "\n DCD ");
        else
            fputc(',', f);
        fprintf(f, "&%x", infile_buffer[i]);
    }
    fprintf(f, "\n|%s_limit|\n", symbol);
    fprintf(f, " END\n");
    if (fclose(f) == EOF) {
        fprintf(stderr, "Error writing temporary file\n");
        exit(1);
    }
    sprintf(cmdline, "objasm %s -to %s -stamp -quit\n", tempfile, outfile);
    if (system(cmdline))
        exit(1);
    remove(tempfile);
    return 0;
}
