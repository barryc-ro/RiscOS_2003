r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
r10             RN      10
r11             RN      11
r12             RN      12
r13             RN      13
r14             RN      14
r15             RN      15

sl              RN      10
fp              RN      11
ip              RN      12
sp              RN      13

lr              RN      14
pc              RN      15

f0              FN      0
f1              FN      1
f2              FN      2
f3              FN      3
f4              FN      4
f5              FN      5
f6              FN      6
f7              FN      7

		GBLL	StrongARM
StrongARM	SETL 	{TRUE}

                GET     s.defs

                EXPORT  single_step
                EXPORT  watchlist
                EXPORT  breaklist
                EXPORT  abort_flag
                EXPORT  code_table
                EXPORT  image_base
                EXPORT  image_rosize
                EXPORT  ss_proc_pc
                EXPORT  step_count
                EXPORT  bindings
                EXPORT  last_watch
		[ StrongARM
		EXPORT	StoredPCOffset
		]

                IMPORT  stepflag
                IMPORT  in_debuggee
                IMPORT  dataaccessflag
                IMPORT  registers
                IMPORT  regs_r14

; Reason code for stopping execution
n_undef_inst     EQU    1
n_prefetch_abort EQU    2
n_data_abort     EQU    3
n_address_ex     EQU    4
n_error          EQU    5
n_exit           EQU    6
n_exit_abex      EQU    7
n_hit_break      EQU    8
n_watch_changed  EQU    9
n_step_count     EQU    10
n_resume         EQU    11
n_shiftf12       EQU    12
n_retfromcall    EQU    13
n_lostwatch      EQU    14

os_enteros      EQU     &16
os_breakpt      EQU     &17

os_writes       EQU     &1
xos_write0      EQU     &20002
xos_converthex8 EQU     &200d4
xos_writec      EQU     &20000
xos_newline     EQU     &20003
xos_synchronisecodeareas EQU &2006e
os_callaswi	EQU	&6f
os_callaswir12	EQU	&71
xdebugger_disassemble EQU &60380

                AREA    |C$$code|, CODE, READONLY

o_break_next    EQU     0
o_break_addr    EQU     8
o_break_inst    EQU     24

o_watch_next    EQU     0
o_watch_addr    EQU     4
o_watch_n       EQU     8
o_watch_stack   EQU     12
o_watch_str     EQU     16
o_watch_c       EQU     20
o_watch_datum   EQU     44
o_watch_base    EQU     64
o_watch_contents EQU    68

o_swino         EQU     4

code_table      DCD     0
image_base      DCD     0
image_rosize    DCD     0

ss_proc_pc      DCD     0
ss_flags        DCD     0
step_count      DCD     0

inst            RN       8
sflags          RN       9
reg_ptr         RN      10
pc_flags        RN      11
pc_val          RN      12

o_user_sp       EQU     16 * 4 + 8 * 12 + 4
o_user_lr       EQU     o_user_sp + 4

; R4  = No. of instructions / statements to step
; R11, bit 31 = 1 => step by source statement
; R11, bit 30 = 1 => step into procedure calls
; R12 = addr of register dump
single_step     MOV     sflags, lr
                MOV     reg_ptr, r12
                STR     r4, step_count
                BIC     sflags, sflags, #&f0000000
                ORR     sflags, sflags, r11
                LDR     r2, watchlist
                CMP     r2, #0
                BNE     updatewatch
updatewatch_ret
                LDR     pc_val, [reg_ptr, #15 * 4]
                AND     pc_flags, pc_val, #&fc000003
                BIC     pc_val, pc_val, #&fc000003
                ADR     r0, breaklist
single_step4    LDR     r0, [r0, #o_break_next]
                CMP     r0, #0
                BEQ     ss_fetch
                LDR     r1, [r0, #o_break_addr]
                CMP     r1, pc_val
                BNE     single_step4
                LDR     inst, [r0, #o_break_inst]
                ADD     pc_val, pc_val, #4
                B       ss0

watchlist       DCD     0
breaklist       DCD     0
abort_flag      DCD     0

last_watch      DCD     0
bindings        DCD     0
watch_fp        DCD     0

ss_watch_change STR     r2, last_watch
                MOV     r0, #n_watch_changed
                B       ss_end
ss_step_end     MOV     r0, #n_step_count
ss_end          ORR     pc_val, pc_val, pc_flags
                STR     pc_val, [reg_ptr, #15 * 4]
                MOVS    pc, sflags

hbuf            DCD     0, 0, 0

		[ StrongARM
condition_table
		;         NNNNNNNN
		;         ZZZZ    ZZZZ
		;         CC  CC  CC  CC
		;         V V V V V V V V
		DCW	2_1111000011110000	; EQ
		DCW	2_0000111100001111	; NE
		DCW	2_1100110011001100	; CS
		DCW	2_0011001100110011	; CC
		DCW	2_1111111100000000	; MI
		DCW	2_0000000011111111	; PL
		DCW	2_1010101010101010	; VS
		DCW	2_0101010101010101	; VC
		DCW	2_0000110000001100	; HI
		DCW	2_1111001111110011	; LS
		DCW	2_1010101001010101	; GE
		DCW	2_0101010110101010	; LT
		DCW	2_0000101000000101	; GT
		DCW	2_1111010111111010	; LE
		DCW	2_1111111111111111	; AL
		DCW	2_0000000000000000	; NV
		]
ss
                [ 0 = 1
                MOV     r0, #4
                SWI     xos_writec
                MOV     r0, pc_val
                ADR     r1, hbuf
                MOV     r2, #12
                SWI     xos_converthex8
                SWI     xos_write0
                MOV     r0, #':'
                SWI     xos_writec
                LDR     r0, [pc_val]
                ADR     r1, hbuf
                MOV     r2, #12
                SWI     xos_converthex8
                SWI     xos_write0
                MOV     r0, #' '
                SWI     xos_writec
                LDR     r0, [pc_val]
                MOV     r1, pc_val
                SWI     xdebugger_disassemble
                MOV     r0, r1
                SWI     xos_write0
                SWI     xos_newline
                MOV     r0, #5
                SWI     xos_writec
                ]
                LDR     r2, abort_flag
                CMP     r2, #0
                MOVNE   r0, #n_shiftf12
                BNE     ss_end
                LDR     r2, watchlist
                CMP     r2, #0
                BEQ     ss_count_steps
                LDR     r6, bindings
                CMP     r6, #0
                LDREQ   r6, [reg_ptr, #11 * 4]
                LDRNE   r6, [reg_ptr, #10 * 4]
                LDR     r7, watch_fp
                STR     r6, watch_fp
ss_watch1       CMP     r6, r7
                BNE     check_stack
check_stack_ret LDR     r1, [r2, #o_watch_addr]
                SUB     r0, r1, reg_ptr
                BCC     ss_watch1p1
                CMP     r0, #160
                BCS     ss_watch1p1
                LDR     r0, [r2, #o_watch_stack]
                CMP     r0, #0
                CMPNE   r0, r6
                BNE     ss_watch2p1
ss_watch1p1     ADD     r0, r2, #o_watch_contents
                LDR     r3, [r2, #o_watch_n]
ss_watch2       LDRB    r4, [r1], #1
                LDRB    r5, [r0], #1
                CMP     r4, r5
                BNE     ss_watch_change
                SUBS    r3, r3, #1
                BNE     ss_watch2
ss_watch2p1     LDR     r2, [r2, #o_watch_next]
                CMP     r2, #0
                BNE     ss_watch1
ss_count_steps  TST     sflags, #&80000000
                BEQ     ss_dec_count
                LDR     r0, code_table
                LDR     r1, image_base
                SUB     r2, pc_val, r1
                LDR     r1, image_rosize
                CMP     r2, r1
                BCS     ss_fetch
                MOV     r1, r2, LSR #5
                LDRB    r0, [r0, r1]
                MOV     r1, r2, LSR #2
                AND     r1, r1, #7
                ADD     r1, r1, #1
                MOVS    r0, r0, LSR r1
                BCC     ss_fetch
ss_dec_count    LDR     r0, step_count
                SUBS    r0, r0, #1
                STR     r0, step_count
                BEQ     ss_step_end
ss_fetch0       LDR     r6, [reg_ptr, #15 * 4]
ss_fetch        LDR     inst, [pc_val], #4
ss0             AND     r0, inst, #&f0000000    ; Condition bits
                TEQS    r0, #&e0000000          ; &e => always
                BEQ     ss2                     ; Faster this way
		[ StrongARM
		ADR	r14, condition_table	; Get appropriate bitfield
		LDR	r14, [r14,r0,LSR #27]	;     for condition code
		MOV	r0, pc_flags, LSR #28
		MOV	r2, #1
		TSTS	r14, r2, LSL r0		; Check the bit for our flags
		BEQ	ss
		|
                ORR     r0, r0, #&a000000       ; B +00 opcode
                STR     r0, ss1                 ; Save in inst buff
                TEQP    pc, pc_flags            ; Rest. PC flags
                B       ss1                     ; Break pipeline
ss1             DCD     0
                B       ss                      ; Fall through if cond. fails
		]
                BIC     inst, inst, #&f0000000  ; B here if condition succeeds
                ORR     inst, inst, #&e0000000  ; Change condition to AL
ss2             AND     r0, inst, #&f000000     ; Opcode
                CMPS    r0, #&8000000           ; 0 <= op < 8
                BLO     ss3                     ; => dataproc | ldrstr
                CMPS    r0, #&c000000           ; 8 <= op < c
                BLO     ss4                     ; => ldmstm | B | BL
                CMPS    r0, #&f000000           ; op != f
                BNE     ss_coproc               ; => coproc | undefined
                                                ; op == f => swi
ss_swi          BIC     r0, inst, #&ff000000    ; SWI no. -> r0
                BIC     r0, r0, #&20000         ; Clear X bit
ss_swi2         CMPS    r0, #1
                BEQ     ss_writes               ; SWI os_writes?
                CMPS    r0, #os_breakpt
                BEQ     ss_breakpt              ; SWI os_breakpt?
		TEQS	r0, #os_callaswi
		ANDEQ	inst, inst, #&ff000000
		LDREQ	r14, [reg_ptr, #10*4]	; SWI OS_CallASWI?
		ORREQ   inst, inst, r14
		TEQS	r0, #os_callaswir12
		ANDEQ	inst, inst, #&ff000000
		LDREQ	r14, [reg_ptr, #12*4]	; SWI OS_CallASWIR12?
		ORREQ   inst, inst, r14
                STR     inst, ss_swi_inst       ; Store instruction
                ORR     r0, pc_flags, pc_val
                STR     r0, [reg_ptr, #15*4]
		[ StrongARM
		MOV	r0, #1
		ADR	r1, ss_swi_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		]
                TEQP    pc, pc_flags            ; Rest PC flags
                LDR     r13, [reg_ptr, #13 * 4] ; FIXME
                LDR     r14, [reg_ptr, #14 * 4]
                STR     sflags, ss_flags
                LDMIA   reg_ptr, {r0-r9}        ; Rest. Regs 0 - 9
                B       ss_swi_inst             ; Break pipeline
ss_swi_inst     DCD     0
                STMIA   reg_ptr, {r0-r9}
                LDR     sflags, ss_flags
                STR     r13, [reg_ptr, #13 * 4] ; May be in SVC mode after eg
                STR     r14, [reg_ptr, #14 * 4] ; os_enteros so save sp & lr
                MOV     pc_flags, pc
                AND     pc_flags, pc_flags, #&f0000003
                B       ss

ss3             CMPS    r0, #&4000000           ; 4 <= op < 8
                BHS     ss_ldrstr               ; => LDR | STR
                                                ; 0 <= op < 4 => dataproc
ss_dataproc     ADD     r3, pc_val, #4          ; PC = inst addr + 8
                TST     inst, #&2000000
                BNE     ss_dataproc0
                TST     inst, #&10
                ADDNE   r3, r3, #4              ; (+12 if register shift)
ss_dataproc0    STR     r3, [reg_ptr, #15 * 4]
                AND     r1, inst, #&90
                CMP     r1, #&90
                TSTEQ   inst, #&2000000
                BEQ     ss_funnydataops
                AND     r5, inst, #&f0000       ; Rn
                MOV     r5, r5, LSR #16-2       ; n * 4 -> R5
                LDR     r1, [reg_ptr, r5]       ; Rn -> R1
                BIC     inst, inst, #&f0000
                ORR     inst, inst, #&10000     ; Rn <- 1
                AND     r0, inst, #&01800000
                CMP     r0, #&01000000          ; TST, TEQ, CMP, CMN
; These instructions could change from SVC mode to user mode so load r13 & r14
; before emulating the instruction and save them afterwards. Thus if a mode
; change occurs the reg block will get updated with the correct regs.
                LDREQ   r13, [reg_ptr, #13 * 4]
                LDREQ   r14, [reg_ptr, #14 * 4]
                ANDNE   r6, inst, #&f000        ; Rd
                MOVNE   r6, r6, LSR #12-2       ; d * 4 -> R6
                LDRNE   r2, [reg_ptr, r6]       ; Rd -> R2
                BICNE   inst, inst, #&f000
                ORRNE   inst, inst, #&2000      ; Rd <- 2
                TST     inst, #&2000000
                BNE     ss_dataproc1            ; Immediate shift
                TST     inst, #&10
                ANDNE   r4, inst, #&f00         ; Rs
                MOVNE   r4, r4, LSR #8-2
                LDRNE   r4, [reg_ptr, r4]       ; Rs -> R4
                BICNE   inst, inst, #&f00
                ORRNE   inst, inst, #&400       ; Rs <- 4
                ORR     r3, r3, pc_flags        ; Rm = PC + PSR
                STR     r3, [reg_ptr, #15 * 4]
                AND     r3, inst, #&f           ; Rm
                MOV     r3, r3, LSL #2
                LDR     r3, [reg_ptr, r3]       ; Rm -> R3
                BIC     inst, inst, #&f
                ORR     inst, inst, #3          ; Rm <- 3
ss_dataproc1    STR     inst, ss_dproc_inst     ; Store inst
		[ StrongARM
		ADR	r7,ss_dproc_temp
		STMIA	r7,{r0-r2,lr}
		MOV	r0, #1
		ADR	r1, ss_dproc_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		LDMIA	r7,{r0-r2,lr}
		]
                TEQP    pc, pc_flags
		B	ss_dproc_inst		; Break pipeline
ss_dproc_inst   DCD     0
                MOV     r3, pc
                TST     inst, #&100000           ; S bit
                ANDNE   pc_flags, r3, #&f0000003 ; Flags from stored PC
                CMP     r0, #&01000000           ; TST, TEQ, CMP, CMN
; Update r13 & r14 if potential mode change
                STREQ   r13, [reg_ptr, #13 * 4]
                STREQ   r14, [reg_ptr, #14 * 4]
                BEQ     ss
                STR     r2, [reg_ptr, r6]       ; No => Save Rd
                CMP     r6, #15 * 4             ; Rd = 15 ?
                BNE     ss
                BIC     pc_val, r2, #&fc000003  ; Get altered PC
                TST     inst, #&100000
                ANDNE   pc_flags, r2, #&f0000003
                B       ss

ss_proc         STR     r0, ss_proc_pc          ; Set up value for lr in proc
                STR     sflags, ss_flags
                ADR     lr, ss_proc_cont        ; Continuation addres
                ORR     lr, lr, pc_flags        ; + flags
                STR     lr, [reg_ptr, #14*4]
                ADD     pc_val, pc_val, #4
                ADD     pc_val, pc_val, inst, LSL #2    ; Dest = PC + offset * 4
                BIC     pc_val, pc_val, #&fc000003      ; Clear unwanted carry
                ORR     pc_val, pc_val, pc_flags        ; + flags
                STR     pc_val, [reg_ptr, #15*4]
                MOV     r0, #0
                STR     r0, stepflag            ; Suspend single stepping
                LDMIA   reg_ptr, {r0-r15}^      ; Off to proc

ss_dproc_temp	%	4*4

ss_proc_cont    STR     r14, regs_r14
                ADRL    r14, registers
                STMIA   r14, {r0 - r13}
                MOV     reg_ptr, r14
                LDR     sflags, ss_flags
                MOV     pc_flags, pc
                AND     pc_flags, pc_flags, #&f0000003
                LDR     pc_val, ss_proc_pc
                BIC     pc_val, pc_val, #&fc000003
                MOV     r0, #0
                STR     r0, ss_proc_pc
                STR     pc_val, stepflag        ; Resume single stepping
                B       ss

ss4             CMPS    r0, #&a000000           ; 8 <= op < a
                BCC     ss_ldmstm               ; => LDM | STM
                BEQ     ss_branch               ; op == a => branch
                                                ; op == b => branchlink

ss_branchlink   ORR     r0, pc_val, pc_flags    ; Set lr and fall into branch
                TST     sflags, #&40000000
                BEQ     ss_proc
                STR     r0, [reg_ptr, #14 * 4]

ss_branch       SUB     r2, pc_val, #4
                ADD     pc_val, pc_val, #4            ; PC points 8 beyond inst
                ADD     pc_val, pc_val, inst, LSL #2  ; Dest = PC + offset * 4
                BIC     pc_val, pc_val, #&fc000003    ; Clear unwanted carry
                AND     inst, inst, #&ff000000
                CMP     inst, #&ea000000
                BNE     ss
                LDR     r0, [pc_val]
                LDR     r1, break_strlr
                CMP     r0, r1
                BNE     ss
                ADR     r0, breaklist
ss_branch1      LDR     r0, [r0, #o_break_next]
                CMP     r0, #0
                BEQ     ss
                LDR     r1, [r0, #o_break_addr]
                CMP     r1, r2
                BNE     ss_branch1
                ADD     pc_val, r2, #4
                B       ss_breakpt

break_strlr     DCD     &e50fe010

ss_ldmstm
		[ StrongARM
		LDR	r0, StoredPCOffset
		SUB	r0, r0, #4
		ADD	r0, pc_val, r0          ; PC <- inst addr + 12 + PSR
		|
                ADD     r0, pc_val, #8
		]
                ORR     r0, r0, pc_flags
                STR     r0, [reg_ptr, #15 * 4]
                AND     r1, inst, #&f0000       ; Rn (base reg)
                MOV     r1, r1, LSR #16-2       ; n * 4 -> r1
                LDR     r3, [reg_ptr, r1]       ; Rn -> r3
                MOV     r2, #4
                TST     inst, #&800000          ; U/D bit
                RSBEQ   r2, r2, #0              ; Down => r2 = -4, Up => r2 = 4
                MOV     r4, r3                  ; Base reg
                BIC     r5, inst, #&ff000000
                BIC     r5, r5, #&ff0000
ss_ldmstm1      MOVS    r5, r5, LSR #1          ; Bit from mask
                ADDCS   r4, r4, r2              ; Update base
                BNE     ss_ldmstm1              ; All bits out of mask?
                TST     inst, #&800000
                MOVEQ   r3, r4                  ; Down => Base = Last reg
                EOR     r6, inst, inst, LSL #1  ; Post incr and Down ||
                TST     r6, #&1000000           ; Pre incr and UP
                ADDEQ   r3, r3, #4              ; Adjust base by 4
                MOV     r0, #0                  ; Register idx
                BIC     r5, inst, #&ff000000
                BIC     r5, r5, #&ff0000
                TST     inst, #&100000          ; Store?
                BEQ     ss_ldmstm4
                MOVS    r6, inst, ROR #22       ; Writeback?
;                CMPCS   r1, #15*4               ; &&  base != pc
                STRCS   r4, [reg_ptr, r1]       ; Store writeback
                CMPCS   r1, #13*4               ; Set sp if SVC mode to
                MOVEQ   r13, r4                 ; preserve stack contents
ss_ldmstm2      MOVS    r5, r5, LSR #1          ; Bit from mask
                LDRCS   r6, [r3], #4            ; Load reg dump from memory
                STRCS   r6, [reg_ptr, r0]
                ADD     r0, r0, #4              ; Point to next reg
                BNE     ss_ldmstm2              ; All bits out of mask?
                CMP     r0, #16 * 4             ; R15 written
                BCC     ss                      ; No, do next step
                TST     inst, #&400000          ; S bit?
                LDRNE   pc_flags, [reg_ptr, #15 * 4]
                ANDNE   pc_flags, pc_flags, #&f0000003    ; Get loaded flags
                LDR     pc_val, [reg_ptr, #15 * 4]
                BIC     pc_val, pc_val, #&fc000003        ; Get loaded PC
                B       ss
ss_ldmstm4      MOVS    r5, r5, LSR #1          ; Bit from mask
                LDRCS   r6, [reg_ptr, r0]       ; Copy reg to memory
                STRCS   r6, [r3], #4
                ADD     r0, r0, #4              ; point to next reg
                BCC     ss_ldmstm4              ; Only do one reg
                MOVS    r6, inst, ROR #22       ; Writeback?
;                CMPCS   r1, #15*4               ; && base != r15?
                STRCS   r4, [reg_ptr, r1]       ; => store writeback
                CMPCS   r1, #13*4               ; Set sp if SVC mode to
                MOVEQ   r13, r4                 ; preserve stack contents
                CMP     r5, #0                  ; Only one reg to do?
                BEQ     ss                      ; Step next inst
ss_ldmstm5      MOVS    r5, r5, LSR #1          ; Bit from mask
                LDRCS   r6, [reg_ptr, r0]       ; Copy reg to memory
                STRCS   r6, [r3], #4
                ADD     r0, r0, #4              ; point to next reg
                BNE     ss_ldmstm5              ; All regs done?
                B       ss

ss_ldrstr       ADD     r0, pc_val, #4          ; PC(Rn) = inst addr + 8
                STR     r0, [reg_ptr, #15 * 4]
                AND     r5, inst, #&f0000       ; Rn
                MOV     r5, r5, LSR #16-2       ; n * 4 -> R5
                LDR     r1, [reg_ptr, r5]       ; Rn -> R1
		[ StrongARM
		LDR	r2, StoredPCOffset
		SUB	r2, r2, #4
		ADD	r2, pc_val, r2          ; PC(Rd) = inst addr + 12 + PSR
		|
                ADD     r2, pc_val, #8          ; PC(Rd) = inst addr + 12 + PSR
		]
                ORR     r2, r2, pc_flags
                STR     r2, [reg_ptr, #15 * 4]
                AND     r6, inst, #&f000        ; Rd
                MOV     r6, r6, LSR #12-2       ; d * 4 -> R6
                LDR     r2, [reg_ptr, r6]       ; Rd -> R2
                BIC     inst, inst, #&ff000
                ORR     inst, inst, #&12000     ; n, d = 1, 2
                TST     inst, #&2000000         ; Immediate bit (0=>immediate)
                ANDNE   r3, inst, #&f           ; Rm
                MOVNE   r3, r3, LSL #2
                LDRNE   r3, [reg_ptr, r3]       ; Rm -> R3
                BICNE   inst, inst, #&f
                ORRNE   inst, inst, #3          ; Rm <- 3
                TSTNE   inst, #&10              ; Register shift
                ANDNE   r4, inst, #&f00         ; Rs
                MOVNE   r4, r4, LSR #8-2
                LDRNE   r4, [reg_ptr, r4]       ; Rs -> R4
                BICNE   inst, inst, #&f00
                ORRNE   inst, inst, #&400       ; Rs <- 4
                STR     inst, ss_ldrstr_inst    ; Store instruction
		[ StrongARM
		ADR	r7,ss_dproc_temp
		STMIA	r7,{r0-r2,lr}
		MOV	r0, #1
		ADR	r1, ss_ldrstr_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		LDMIA	r7,{r0-r2,lr}
		]
                TEQP    pc, pc_flags
		B	ss_ldrstr_inst		; Break pipeline
ss_ldrstr_inst  DCD     0
                CMP     r5, #13*4               ; Set sp if in SVC mode
                MOVEQ   r13, r1                 ; to preserve stack contents
                STR     r1, [reg_ptr, r5]       ; Save Rn
                STR     r2, [reg_ptr, r6]       ; Save Rd
                CMP     r6, #15 * 4             ; Rd = R15
                BNE     ss
                TST     inst, #&100000
                LDRNE   pc_val, [reg_ptr, #15 * 4]
                BICNE   pc_val, pc_val, #&fc000003    ; Get new PC
                B       ss

		[ StrongARM
StoredPCOffset
		DCD	0
		]

ss_coproc       CMP     r0, #&e000000
                BEQ     ss_coproc_int

ss_coproc_xfer  ADD     r0, pc_val, #4
                STR     r0, [reg_ptr, #15 * 4]
                AND     r5, inst, #&f0000
                MOV     r5, r5, LSR #16-2
                LDR     r1, [reg_ptr, r5]
                BIC     inst, inst, #&f0000
                ORR     inst, inst, #&10000
                STR     inst, ss_xfer_inst
		[ StrongARM
		ADR	r7,ss_dproc_temp
		STMIA	r7,{r0-r2,lr}
		MOV	r0, #1
		ADR	r1, ss_xfer_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		LDMIA	r7,{r0-r2,lr}
		]
                B       ss_xfer_inst
ss_xfer_inst    DCD     0
                STR     r1, [reg_ptr, r5]
                B       ss

ss_coproc_int   TST     inst, #&10
                BNE     ss_coproc_rxfer
ss_copproc_dop  STR     inst, ss_dop_inst
		[ StrongARM
		ADR	r7,ss_dproc_temp
		STMIA	r7,{r0-r2,lr}
		MOV	r0, #1
		ADR	r1, ss_dop_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		LDMIA	r7,{r0-r2,lr}
		]
                B       ss_dop_inst
ss_dop_inst     DCD     0
                B       ss

ss_coproc_rxfer ADD     r0, pc_val, #4
                ORR     r0, r0, pc_flags
                STR     r0, [reg_ptr, #15 * 4]
                AND     r5, inst, #&f000
                MOV     r5, r5, LSR #12-2
                CMP     r5, #15*4
                LDRNE   r1, [reg_ptr, r5]
                BICNE   inst, inst, #&f000
                ORRNE   inst, inst, #&1000
                STR     inst, ss_rxfer_inst
		[ StrongARM
		ADR	r7,ss_dproc_temp
		STMIA	r7,{r0-r2,lr}
		MOV	r0, #1
		ADR	r1, ss_rxfer_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		LDMIA	r7,{r0-r2,lr}
		]
                B       ss_rxfer_inst
ss_rxfer_inst   DCD     0
                MOV     r3, pc
                CMP     r5, #15*4
                STRNE   r1, [reg_ptr, r5]
                ANDEQ   pc_flags, r3, #&f0000000
                B       ss

; Opcodes of the form xxxx 000x xxxx xxxx xxxx xxxx 1xx1 xxxx
ss_funnydataops TST     inst, #&60
		BNE	ss_newldst

; Opcodes of the form xxxx 000x xxxx xxxx xxxx xxxx 1001 xxxx
		ANDS	r5, inst, #&01c00000
		BEQ	ss_mul
		TEQS	r5, #&00400000
		BEQ	ss_undef
		CMPS	r5, #&00c00000
		BLS	ss_mull
		CMPS	r5, #&01400000
		BHI	ss_undef

; Opcodes of the form xxxx 0001 0xxx xxxx xxxx xxxx 1001 xxxx
ss_swp
		TSTS	inst, #&00300000
		TSTEQS	inst, #&00000f00
		BNE	ss_undef
; Opcodes of the form cccc 0001 0b00 nnnn dddd 0000 1001 mmmm
; (NB R15 is not allowed as Rm, Rn or Rd, so we're happy)
		AND	r5, inst, #&0000f000	; Rd
		LDR	r1, [reg_ptr, r5, LSR #12-2] ; Rd -> R1
		AND	r2, inst, #&0000000f    ; Rm
		LDR	r2, [reg_ptr, r2, LSL #2] ; Rm -> R2
		AND	r3, inst, #&000f0000	; Rn
		LDR	r3, [reg_ptr, r3, LSR #16-2] ; Rn -> R3
		TST	inst, #&00400000
		SWPEQ	r1, r2, [r3]
		SWPNEB	r1, r2, [r3]
		STR	r1, [reg_ptr, r5, LSR #12-2]
		B	ss

; Opcodes of the form cccc 0000 00as dddd nnnn ssss 1001 mmmm
ss_mul          AND     r5, inst, #&f0000
                LDR     r1, [reg_ptr, r5, LSR #16-2] ; Rd -> R1
                AND     r2, inst, #&f
                LDR     r2, [reg_ptr, r2, LSL #2]    ; Rm -> R2
                AND     r3, inst, #&f00
                LDR     r3, [reg_ptr, r3, LSR #8-2]  ; Rs -> R3
		TSTS	inst, #&00200000
                [ {TRUE}
		; Save an instruction - we know that Rn should be R0 for MUL
                AND     r4, inst, #&f000
                |
		MOVEQ	r4, #0
		ANDNE	r4, inst, #&f000
		]
                LDRNE   r4, [reg_ptr, r4, LSR #12-2] ; Rn -> R4
		MLAS	r1, r2, r3, r4
                MOV	r3, pc
                STR     r1, [reg_ptr, r5, LSR #16-2] ; Save dest reg Rd
                TSTS    inst, #&00100000             ; S bit
		BEQ	ss
		AND	pc_flags, pc_flags, #&10000000 ; Preserve V bit
		AND	r3, r3, #&e0000000
                ORR     pc_flags, pc_flags, r3
                B       ss

; Opcodes of the form xxxx 0000 1uas hhhh llll ssss 1001 mmmm
; (NB R15 is not allowed as RdLo, RdHi, Rm or Rs, so we're happy)
ss_mull		AND	r5, inst, #&0000f000
		LDR	r1, [reg_ptr, r5, LSR #12-2]  ; RdLo -> R1
		AND	r6, inst, #&000f0000
		LDR	r2, [reg_ptr, r6, LSR #16-2]  ; RdHi -> R2
		AND	r3, inst, #&0000000f
		LDR	r3, [reg_ptr, r3, LSL #2]     ; Rm -> R3
		AND	r4, inst, #&00000f00
		LDR	r4, [reg_ptr, r4, LSR #8-2]   ; Rs -> R4
		AND	r7, inst, #&00600000
		ADD	pc, pc, r7, LSR #21-3
		NOP
		UMULLS	r1,r2,r3,r4
		B	ss_mull0
		UMLALS	r1,r2,r3,r4
		B	ss_mull0
		SMULLS	r1,r2,r3,r4
		B	ss_mull0
		SMLALS	r1,r2,r3,r4
ss_mull0	MOV	r3,pc
		TSTS	inst, #&00100000	   ; S bit
		ANDNE	pc_flags, r3, #&f0000000   ; Flags from stored PC
		STR	r1, [reg_ptr, r5, LSR #12-2] ; Store RdLo
		STR	r2, [reg_ptr, r6, LSR #16-2] ; Store RdHi
		B	ss

; Opcodes of the form xxxx 000p u0wl nnnn dddd 0000 1sh1 mmmm
;                  or xxxx 000p u1wl nnnn dddd iiii 1sh1 iiii
; (NB R15 is not allowed as Rd or Rm)
ss_newldst      ADD     r0, pc_val, #4          ; PC(Rn) = inst addr + 8
                STR     r0, [reg_ptr, #15 * 4]
                AND     r5, inst, #&f0000       ; Rn
                LDR     r1, [reg_ptr, r5, LSR #16-2] ; Rn -> R1
                AND     r6, inst, #&f000        ; Rd
                LDR     r2, [reg_ptr, r6, LSR #12-2] ; Rd -> R2
		TST	inst, #&00400000	; reg or imm offset?
		AND	r3, inst, #&f
		LDREQ	r3, [reg_ptr, r3, LSL #2] ; Rm -> R3
		ANDNE	r4, inst, #&f00
		ORRNE	r3, r3, r4, LSR #8      ; offset -> R3

		TST	inst, #&00800000	; plus or minus?
		RSBEQ	r3, r3, #0

		TST	inst, #&01000000	; pre-indexing?
		ADDNE	r1, r1, r3

		AND	r7,inst,#&00100000
		AND	r4,inst,#&00000060
		ORR	r4,r4,r7,LSR #16	; r4 = SHL0000
		ADD	pc,pc,r4,LSR #4-3
		NOP

		; A table of the simplified instructions, of the
		; form [LD|ST]R[S][H] R2,[R1,#0]
		; (some of these are illegal or impossible, of course)
		DCD	&E1C12090	; STRB R2,[R1,#0]  (imposs+illeg)
		B	ss_newldst0
		DCD	&E1D12090	; LDRB R2,[R1,#0]  (imposs+illeg)
		B	ss_newldst0
		DCD	&E1C120B0       ; STRH R2,[R1,#0]
		B	ss_newldst0
		DCD	&E1D120B0       ; LDRH R2,[R1,#0]
		B	ss_newldst0
		DCD	&E1C120D0       ; STRSB R2,[R1,#0] (illeg)
		B	ss_newldst0
		DCD	&E1D120D0       ; LDRSB R2,[R1,#0]
		B	ss_newldst0
		DCD	&E1C120F0       ; STRSH R2,[R1,#0] (illeg)
		B	ss_newldst0
		DCD	&E1D120F0       ; LDRSH R2,[R1,#0]

ss_newldst0
		STR	r2,[reg_ptr, r6, LSR #12-2]  ; Store Rd
		TST	inst, #&01000000
		ADDEQ	r1, r1, r3		; Add offset if post-indexed
		STREQ	r1, [reg_ptr,r5,LSR #16-2] ; Store Rn if post-indexed
		TST	inst, #&00200000
		STRNE	r1, [reg_ptr, r5, LSR #16-2] ; Store Rn if writeback
                B       ss

;
; Special case SWI OS_Writes
ss_writes       MOV     r0, pc_val               ; String = PC
                TEQP    pc, pc_flags             ; Set flags
                SWI     xos_write0               ; Write string (Fix error)
                ADD     pc_val, r0, #3           ; Align end of string
                BIC     pc_val, pc_val, #3       ; to next word
                AND     pc_flags, pc, #&f0000000 ; Set flags
                B       ss

ss_undef        STR     inst, ss_undef_inst
		[ StrongARM
		ADRL	r7,ss_dproc_temp
		STMIA	r7,{r0-r2,lr}
		MOV	r0, #1
		ADR	r1, ss_undef_inst
		MOV	r2, r1
		SWI	xos_synchronisecodeareas
		LDMIA	r7,{r0-r2,lr}
		]
                B       ss_undef_inst
ss_undef_inst   DCD     0
                B       ss

ss_breakpt      SUB     pc_val, pc_val, #4
                ORR     pc_val, pc_val, pc_flags
                STR     pc_val, [reg_ptr, #15*4]
                MOV     r0, #0
                STR     r0, stepflag
                LDMIA   reg_ptr, {r0-r15}^

data_save_test  DCD     &7496
; Must be preserved
;   R2 = Ptr to watchpoint structure
;   R6 = Possible FP
;   R7 = Previous FP
check_stack
                CMP     r6, #0          ; 0 frame pointer?
                BEQ     check_stack_ret ; Don't try to check stack, continue
                MOV     r0, #0
                STR     r0, in_debuggee
                STR     r0, dataaccessflag
                MOV     r4, r6
                LDR     r5, [r2, #o_watch_stack]
                CMP     r5, #0
                BEQ     check_stack_ret
check_stack1    CMP     r4, r5          ; Found frame?
                BEQ     check_stack2    ; Watchpoint OK, continue
                LDR     r1, [r4]        ; Possible save mask ptr
                LDR     r0, dataaccessflag
                CMP     r0, #0          ; Invalid FP?
                BNE     check_stack2    ; Try to continue
                BIC     r1, r1, #&fc000003
		[ StrongARM
		LDR	r0, StoredPCOffset
		LDR	r1, [r1, -r0]
		|
                LDR     r1, [r1, #-12]  ; Possible ret. data save inst
		]
                LDR     r0, dataaccessflag
                CMP     r0, #0          ; Invalid save mask ptr?
                BNE     check_stack2    ; Try to continue
                MOV     r1, r1, LSR #17
                LDR     r0, data_save_test
                CMP     r1, r0          ; Invalid data save inst?
                BNE     check_stack2    ; Try to continue
                LDR     r4, [r4, #-12]  ; Next frame ptr
                CMP     r4, #0          ; End of stack frames?
                BNE     check_stack1
                MOV     r0, #1
                STR     r0, in_debuggee
                MOV     r0, #n_lostwatch
                B       ss_end
check_stack2    MOV     r0, #1
                STR     r0, in_debuggee
                B       check_stack_ret

updatewatch     LDR     r0, bindings
                CMP     r0, #0
                LDREQ   r6, [reg_ptr, #11 * 4]      ; RiscOS FP
                LDRNE   r6, [reg_ptr, #10 * 4]      ; Arthur FP
                STR     r6, watch_fp
updatewatch1    LDR     r1, [r2, #o_watch_addr]
                SUB     r0, r1, reg_ptr
                BCC     updatewatch2
                CMP     r0, #160
                BCS     updatewatch2
                LDR     r0, [r2, #o_watch_stack]
                CMP     r0, #0
                CMPNE   r0, r6
                BNE     updatewatch4
updatewatch2    ADD     r0, r2, #o_watch_contents
                LDR     r3, [r2, #o_watch_n]
updatewatch3    LDRB    r4, [r1], #1
                STRB    r4, [r0], #1
                SUBS    r3, r3, #1
                BNE     updatewatch3
updatewatch4    LDR     r2, [r2, #o_watch_next]
                CMP     r2, #0
                BNE     updatewatch1
                B       updatewatch_ret

                END
