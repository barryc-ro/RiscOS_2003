r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
r10             RN      10
r11             RN      11
r12             RN      12
r13             RN      13
r14             RN      14
r15             RN      15

sl              RN      10
fp              RN      11
ip              RN      12
sp              RN      13

lr              RN      14
pc              RN      15

f0              FN      0

                GET     s.defs

                EXPORT  rotate_right
                EXPORT  memcpy
                EXPORT  malloc
                EXPORT  free
                EXPORT  heap_init
                EXPORT  salloc
                EXPORT  heap_discard
                EXPORT  find_word
                EXPORT  cvt_packed
                EXPORT  cvt_fp
		EXPORT  cvt_fpinternal
                EXPORT  cvt_fpextended
                EXPORT  loadfpextended
                EXPORT  munge256
                EXPORT  wordset
                EXPORT  clear_breakpoints
                EXPORT  blocklist
                EXPORT  find_vector
		EXPORT	rma_malloc
		EXPORT	rma_free
		[ USE_DAS
		EXPORT	DoHeapOpWithExtension
		EXPORT	da_no
		EXPORT	da_addr
		]

                IMPORT  breaklist

sblocksize      EQU     2048

n_module_claim  EQU     6
n_module_free   EQU     7

OS_EnterOS      EQU     &16
OS_Module       EQU     &1e
OS_Heap		EQU	&1d
XOS_Heap	EQU	&2001d
XOS_ChangeDynamicArea EQU &2002a
OS_DynamicArea	EQU	&66
XOS_DynamicArea	EQU	&20066

OS_GenerateError EQU    &2b

                AREA    |C$$code|, CODE, READONLY

blocklist       DCD     0
s_bytes_free    DCD     &7fffffff
s_block         DCD     &badadd04

memcpy          MOV     r3, r0
                CMP     r2, #4
                BCC     byte_copy
memcpy1         TST     r3, #3
                LDRNEB  ip, [r1], #1
                STRNEB  ip, [r3], #1
                SUBNE   r2, r2, #1
                BNE     memcpy1
                TST     r1, #3
                BNE     byte_copy
                SUBS    r2, r2, #16
                BCC     memcpy6
                STMDB   sp!, {r4, r5, r6}
memcpy2         LDMIA   r1!, {r4, r5, r6, ip}
                STMIA   r3!, {r4, r5, r6, ip}
                SUBS    r2, r2, #16
                BCS     memcpy2
                LDMIA   sp!, {r4, r5, r6}
memcpy6         ADDS    r2, r2, #12
                BCC     memcpy4
memcpy3         LDR     ip, [r1], #4
                STR     ip, [r3], #4
                SUBS    r2, r2, #4
                BCS     memcpy3
memcpy4         ADDS    r2, r2, #3
                MOVCCS  pc, lr
memcpy5         LDRB    ip, [r1], #1
                STRB    ip, [r3], #1
byte_copy       SUBS    r2, r2, #1
                BCS     memcpy5
                MOVS    pc, lr

rotate_right    MOV     r0, r0, ROR r1
                MOVS    pc, lr

	[ USE_DAS
da_no DCD	0
da_addr DCD	0

		; Code nicked from the kernel's RMA handling...
da_tempws	DCD 0
da_tempws2	DCD 0
da_tempws3	DCD 0

DoHeapOpWithExtension
		STR	ip, da_tempws
		STR	r0, da_tempws2
		MOV	ip, lr
		LDR	r1, da_addr
		SWI	XOS_Heap
		LDRVC	r0, da_tempws2
		MOVVC	lr, ip
		LDRVC	ip, da_tempws
		MOVVC	pc, lr

		LDR	lr,[r0]
		TEQ	lr,#&184	; no room in heap
		MOVNE	lr, ip
		LDRNE	ip, da_tempws
		MOVNE	pc, lr          ; can only retry if ran out of room

  ; note that this doesn't cope well with a block at the end preceded by a
  ; free block, but tough.

         	LDR	r1, da_addr
         	LDR     r0, [r1, #8]	; heap base offset
         	LDR     r1, [r1, #12]	; heap end offset
         	SUB     r1, r1, r0                  ; bytes free
         	SUB     r1, r3, r1                  ; bytes needed

         	ADD     r1, r1, #8                  ; safety factor

         	LDR	r0, da_no
         	SWI     XOS_ChangeDynamicArea
		MOVVC	r0, #5
		STR	r3, da_tempws3
		MOVVC	r3, r1
		LDR	r1, da_addr
		SWIVC	XOS_Heap		    ; expand heap as well!
		LDR	r3, da_tempws3

         	LDRVC	r0, da_tempws2              ; heap reason code back
         	SWIVC   XOS_Heap
		MOV	lr, ip
		LDR	ip, da_tempws
		MOV	pc, lr




malloc          MOV     ip, lr
                [ HEAP_TAG
                ADD     r0, r0, #32
                ]
                [ PRAGMA_C1
                ADD     r0, r0, #4
                ]
                ADD     r0, r0, #4
                MOV     r3, r0
                MOV     r0, #2
                BL	DoHeapOpWithExtension
		SWIVS	OS_GenerateError
                LDR     r0, blocklist
                STR     r0, [r2]
                [ PRAGMA_C1
                STR     r3, [r2, #4]
                ]
                STR     r2, blocklist
                ADD     r0, r2, #4
                [ HEAP_TAG
                [ PRAGMA_C1
                ADD     r0, r0, #4
                ]
malloc1         LDRB    r3, [r1], #1
                STRB    r3, [r0], #1
                CMP     r3, #0
                BNE     malloc1
;                SWI     1
;                DCB     4, 30, "malloc ", 0
;                ADD     r0, r2, #4
;                SWI     2
;                SWI     1
;                DCB     "                              ", 13, 10, 5, 0
;                SWI     4
                ADD     r0, r2, #4 + 32
                ]
                [ PRAGMA_C1
                ADD     r0, r0, #4
                ]
                MOVS    pc, ip

free            CMP     r0, #0
                MOVEQS  pc, lr
                MOV     r3, lr
                SUB     r2, r0, #4
                [ HEAP_TAG
                SUB     r2, r2, #32
                ]
                [ PRAGMA_C1
                SUB     r2, r2, #4
                ]
;                SWI     1
;                DCB     4, 30, "Free ", 0
;                SUB     r0, r0, #32
;                SWI     2
;                SWI     1
;                DCB     "                            ", 13, 10, 5, 0
;                SWI     4
                ADR     r1, blocklist
free1           LDR     r0, [r1]
                CMP     r0, #0
                BEQ     free_error
                CMP     r0, r2
                MOVNE   r1, r0
                BNE     free1
                LDR     r0, [r0]
                STR     r0, [r1]
free2           MOV     r0, #3
                BL	DoHeapOpWithExtension
                MOVS    pc, r3
	]

	[ :LNOT:USE_DAS
malloc
	]
rma_malloc
                MOV     ip, lr
                [ HEAP_TAG
                ADD     r0, r0, #32
                ]
                [ PRAGMA_C1
                ADD     r0, r0, #4
                ]
                ADD     r0, r0, #4
                MOV     r3, r0
                MOV     r0, #n_module_claim
                SWI     OS_Module
                LDR     r0, blocklist
                STR     r0, [r2]
                [ PRAGMA_C1
                STR     r3, [r2, #4]
                ]
                STR     r2, blocklist
                ADD     r0, r2, #4
                [ HEAP_TAG
                [ PRAGMA_C1
                ADD     r0, r0, #4
                ]
rma_malloc1     LDRB    r3, [r1], #1
                STRB    r3, [r0], #1
                CMP     r3, #0
                BNE     rma_malloc1
;                SWI     1
;                DCB     4, 30, "malloc ", 0
;                ADD     r0, r2, #4
;                SWI     2
;                SWI     1
;                DCB     "                              ", 13, 10, 5, 0
;                SWI     4
                ADD     r0, r2, #4 + 32
                ]
                [ PRAGMA_C1
                ADD     r0, r0, #4
                ]
                MOVS    pc, ip

	[ :LNOT:USE_DAS
free
	]
rma_free        CMP     r0, #0
                MOVEQS  pc, lr
                MOV     r3, lr
                SUB     r2, r0, #4
                [ HEAP_TAG
                SUB     r2, r2, #32
                ]
                [ PRAGMA_C1
                SUB     r2, r2, #4
                ]
;                SWI     1
;                DCB     4, 30, "Free ", 0
;                SUB     r0, r0, #32
;                SWI     2
;                SWI     1
;                DCB     "                            ", 13, 10, 5, 0
;                SWI     4
                ADR     r1, blocklist
rma_free1       LDR     r0, [r1]
                CMP     r0, #0
                BEQ     free_error
                CMP     r0, r2
                MOVNE   r1, r0
                BNE     rma_free1
                LDR     r0, [r0]
                STR     r0, [r1]
                MOV     r0, #n_module_free
                SWI     OS_Module
                MOVS    pc, r3

free_error      ADR     r0, ddt_heap_corrupt_msg
                SWI     OS_GenerateError

ddt_heap_corrupt_error EQU &854
ddt_heap_corrupt_msg
                DCD     ddt_heap_corrupt_error
                DCB     "DDT heap corrupt", 0

                [ HEAP_TAG
salloc_str      DCB     "salloc", 0
                ]

                ALIGN
salloc          ADD     r0, r0, #3
                BIC     r0, r0, #3
                LDR     r3, s_block
                LDR     r1, s_bytes_free
                SUBS    r1, r1, r0
                BCS     salloc1
                CMP     r0, #64
                [ HEAP_TAG
                ADR     r1, salloc_str
                ]
                BCS     malloc
                STMDB   sp!, {r0, lr}
                MOV     r0, #sblocksize
                BL      malloc
                MOV     r3, r0
                LDMIA   sp!, {r0, lr}
                RSB     r1, r0, #sblocksize
salloc1         STR     r1, s_bytes_free
                ADD     r3, r3, r0
                STR     r3, s_block
                SUB     r0, r3, r0
                MOVS    pc, lr

heap_init       MOV     r0, #0
                STR     r0, blocklist
                STR     r0, s_bytes_free
		[ USE_DAS
		MOV	sp, #&8000		   ; use scratch space
		STMFD	sp!, {r0-r8, lr}
		LDR	r0, da_no
		TEQS	r0, #0
		LDMNEFD	sp!, {r0-r8, pc}^
		MOV	r0, #1
		MOV	r1, #-64*1024*1024
		SWI	XOS_ChangeDynamicArea      ; shrink back the RMA
		MOV	r0, #0
		MOV	r1, #-1
		MOV	r2, #32*1024
		MOV	r3, #-1
		MOV	r4, #2_010000000
		MOV	r5, #11*1024*1024
		MOV	r6, #0
		MOV	r7, #0
		ADR	r8, DA_name
		SWI	OS_DynamicArea
		STR	r1, da_no
		STR	r3, da_addr
		MOV	r0, #0
		MOV	r1, r3
		MOV	r3, r2
		SWI	OS_Heap
		LDMFD	sp!, {r0-r8, pc}^

DA_name		DCB	"DDT workspace", 0
		ALIGN
		|
                MOVS    pc, lr
		]

os_writes       EQU     1
os_converthex8  EQU     &d4
os_write0       EQU     2
os_newline      EQU     3

hbuff           DCD     0, 0, 0

heap_discard    LDR     r2, blocklist
                MOV     ip, lr
heap_discard1   CMP     r2, #0
                STREQ   r2, blocklist
		[ USE_DAS
		BEQ	junk_da
		|
                MOVEQS  pc, ip
		]
;                SWI     1
;                DCB     4, 30, "Heap discard ", 0
;                ADD     r0, r2, #4
;                [ PRAGMA_C1
;                ADD     r0, r0, #4
;                ]
;                SWI     2
;                SWI     1
;                DCB     "                            ", 13, 10, 5, 0
;                SWI     4
                LDR     r3, [r2]
		CMP	r2, #64*1024*1024  ; is it an RMA block or DA block?
                MOVLO   r0, #n_module_free
                SWILO   OS_Module
                MOV     r2, r3
                B       heap_discard1

		[ USE_DAS
junk_da
		MOV	r0, #1
		LDR	r1, da_no
		TEQ	r1, #0
		SWINE	OS_DynamicArea
		MOV	r0, #0
		STR	r0, da_no
		STR	r0, da_addr
		MOVS	pc, ip
		]

find_word       STMDB   sp!, {r4, lr}
find_word1      CMP     r0, r1
                LDMCSIA sp!, {r4, pc}^
                LDMIA   r0!, {r3, r4, ip, lr}
                CMP     r2, r3
                CMPNE   r2, r4
                CMPNE   r2, ip
                CMPNE   r2, lr
                BNE     find_word1
                SUB     r0, r0, #20
find_word2      LDR     r3, [r0, #4]!
                CMP     r2, r3
                BNE     find_word2
                LDMIA   sp!, {r4, pc}^

cvt_packed      LDFE    f0, [r1]
                STFP    f0, [r0]
                MOVS    pc, lr

cvt_fp          LDFP    f0, [r1]
                STFE    f0, [r0]
                MOVS    pc, lr

cvt_fpinternal  LFM     f0, 1, [r1]
		STFE    f0, [r0]
		MOVS	pc, lr

cvt_fpextended  LDFD    f0, [r0]
                STFE    f0, [r1]
                MOV     r0, r1
                MOVS    pc, lr

loadfpextended  LDFE    f0, [r0]
                MOVS    pc, lr

munge256        AND     r1, r0, #2_01111000
                ORR     r1, r1, r1, LSR #4
                MOV     r1, r1, LSL #1
                AND     r1, r1, #2_01111000
                BIC     r0, r0, #2_01111000
                ORR     r0, r0, r1
                MOVS    pc, lr

wordset         STMDB   sp!, {lr}
                MOV     r3, r1
                MOV     ip, r1
                MOV     lr, r1
wordset1        SUBS    r2, r2, #16
                STMCSIA r0!, {r1, r3, ip, lr}
                BCS     wordset1
                ADDS    r2, r2, #12
wordset2        STRCS   r1, [r0], #4
                SUBCSS  r2, r2, #4
                BCS     wordset2
                LDMIA   sp!, {pc}^

o_next          EQU     0
o_addr          EQU     8
o_inst          EQU     24

clear_breakpoints
                MOV     r3, lr
                SWI     OS_EnterOS
                ADRL    r0, breaklist
clear_bp1       LDR     r0, [r0, #o_next]
                CMP     r0, #0
                MOVEQS  pc, r3
                LDR     r1, [r0, #o_addr]
                CMP     r1, #0
                LDRNE   r2, [r0, #o_inst]
                STRNE   r2, [r1]
                B       clear_bp1

OS_Release      EQU     &20
OS_CallAVector  EQU     &34
OS_AddToVector  EQU     &47

find_vector     STMDB   sp!, {r9, lr}
                MOV     r9, r0
                ADR     r1, find_vector_intercept
                MOV     r2, #1
                SWI     OS_AddToVector
                SWI     OS_CallAVector
                STR     r0, [sp, #-4]!
                MOV     r0, r9
                SWI     OS_Release
                LDMIA   sp!, {r0, r9, pc}^

find_vector_intercept
                MOV     r0, r10
                LDMIA   sp!, {pc}^

                END
