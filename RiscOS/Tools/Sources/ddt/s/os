r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
r10             RN      10
r11             RN      11
r12             RN      12
r13             RN      13
r14             RN      14
r15             RN      15

sl              RN      10
fp              RN      11
ip              RN      12
sp              RN      13

lr              RN      14
pc              RN      15

                GET     s.defs

                EXPORT  os_write0
                EXPORT  xos_file
                EXPORT  xos_readvarval
                EXPORT  xos_setvarval
                EXPORT  os_fscontrol
                EXPORT  os_changeenvironment
                EXPORT  os_exit
                EXPORT  os_generateerror
                EXPORT  os_spriteop
                EXPORT  wimp_spriteop
                EXPORT  os_readmodevariable
                EXPORT  xos_module
                EXPORT  os_readc
                EXPORT  os_callavector
                EXPORT  os_plot
                EXPORT  os_writec
                EXPORT  os_writen
                EXPORT  os_getenv
                EXPORT  os_writeenv
                EXPORT  wimp_setcolour
                EXPORT  os_swinumbertostring
                EXPORT  xos_gbpb_read
                EXPORT  xos_find_open
                EXPORT  os_find_close
                EXPORT  os_mouse
                EXPORT  os_byte
		EXPORT	os_byte2
                EXPORT  os_word
                EXPORT  wimp_commandwindow
                EXPORT  wimp_readpixtrans
                EXPORT  hourglass_start
                EXPORT  hourglass_off
                EXPORT  hourglass_smash
                EXPORT  os_claim
                EXPORT  os_release
                EXPORT  os_addtovector
                EXPORT  os_vs
                EXPORT  os_last_error
                EXPORT  fpemulator_version
                EXPORT  xos_bput
                EXPORT  os_readmemmapinfo
                EXPORT  os_readmemmapentries
                EXPORT  os_setmemmapentries
                EXPORT  os_readmonotonictime
                EXPORT  colourtrans_invalidatecache
                EXPORT  colourtrans_returngcol
                EXPORT  colourtrans_returnoppgcol
                EXPORT  xwimp_readsysinfo
                EXPORT  wimp_readpalette
                EXPORT  wimp_setpalette
                EXPORT  os_cli
                EXPORT  os_readpalette
                EXPORT  os_delinkapplication
                EXPORT  os_relinkapplication
                EXPORT  wimp_getwindowinfo
                EXPORT  xos_confirm
; MEDUSA - Add SWIs needed
                EXPORT  colourtrans_setcolour
                EXPORT  colourtrans_generatetable
		EXPORT	os_screenmode
; StrongARM needs...
		EXPORT	os_synchronisecodeareas
		EXPORT	os_platformfeatures_code
; Printing debugging...
                EXPORT  pdriver_selectjob
                EXPORT  pdriver_abortjob
                EXPORT  os_dynamicarea_enumerate
                EXPORT  os_dynamicarea_read_info

OS_WriteC            EQU     &00
OS_WriteS            EQU     &01
OS_Write0            EQU     &02
OS_ReadC             EQU     &04
OS_CLI               EQU     &05
OS_Byte              EQU     &06
OS_Word              EQU     &07
XOS_File             EQU     &20008
XOS_BPut             EQU     &2000b
XOS_GBPB             EQU     &2000c
OS_Find              EQU     &0d
XOS_Find             EQU     &2000d
OS_GetEnv            EQU     &10
OS_Exit              EQU     &11
OS_Mouse             EQU     &1c
XOS_Module           EQU     &2001e
OS_Claim             EQU     &1f
OS_Release           EQU     &20
XOS_ReadVarVal       EQU     &20023
XOS_SetVarVal        EQU     &20024
OS_FSControl         EQU     &29
OS_GenerateError     EQU     &2b
OS_SpriteOp          EQU     &2e
OS_ReadPalette       EQU     &2f
OS_CallAVector       EQU     &34
OS_ReadModeVariable  EQU     &35
OS_SWINumberToString EQU     &38
OS_ChangeEnvironment EQU     &40
OS_ReadMonotonicTime EQU     &42
OS_Plot              EQU     &45
OS_WriteN            EQU     &46
OS_AddToVector       EQU     &47
OS_WriteEnv          EQU     &48
OS_DelinkApplication EQU     &4d
OS_RelinkApplication EQU     &4e
OS_ReadMemMapInfo    EQU     &51
OS_ReadMemMapEntries EQU     &52
OS_SetMemMapEntries  EQU     &53
XOS_Confirm          EQU     &20059
OS_ScreenMode	     EQU     &65
XOS_DynamicArea      EQU     &20066
XOS_PlatformFeatures EQU     &2006d
XOS_SynchroniseCodeAreas EQU &2006e
Wimp_GetWindowInfo   EQU     &400cc
Wimp_SetPalette      EQU     &400e4
Wimp_ReadPalette     EQU     &400e5
Wimp_SetColour       EQU     &400e6
Wimp_SpriteOp        EQU     &400e9
Wimp_CommandWindow   EQU     &400ef
Wimp_ReadPixTrans    EQU     &400ed
XWimp_ReadSysInfo    EQU     &600f2
XFPEmulator_Version  EQU     &60480
XHourglass_Off       EQU     &606c1
XHourglass_Smash     EQU     &606c2
XHourglass_Start     EQU     &606c3
ColourTrans_ReturnGCOL      EQU &40742
ColourTrans_ReturnOppGCOL   EQU &40747
ColourTrans_InvalidateCache EQU &40750
ColourTrans_SetColour EQU    &4075e
ColourTrans_GenerateTable EQU &40763
XPDriver_SelectJob   EQU     &a0145
XPDriver_AbortJob    EQU     &a0149

overflow             EQU     &10000000

                AREA    OScode, CODE, READONLY

fpemulator_version
                MOV     r3, lr
                SWI     XFPEmulator_Version
                MOVVS   r0, #0
                MOVS    pc, r3

os_vs           MOV     r0, #0
                MOVVS   r0, #1
                MOVS    pc, lr

os_last_error   DCD     0

os_write0       MOV     r3, lr
                SWI     OS_Write0
                MOVS    pc, r3

xos_file        STMDB   sp!, {r4, r5, lr}
                MOV     ip, r2
                LDMIA   ip, {r2, r3, r4, r5}
                SWI     XOS_File
                STMIA   ip, {r2, r3, r4, r5}
                LDMIA   sp!, {r4, r5, lr}
                BIC     lr, lr, #overflow
                ORRVS   lr, lr, #overflow
                STRVS   r0, os_last_error
                MOVS    pc, lr

xos_bput        MOV     r3, lr
                SWI     XOS_BPut
                BIC     lr, lr, #overflow
                ORRVS   lr, lr, #overflow
                STRVS   r0, os_last_error
                MOVS    pc, r3

os_fscontrol    STMDB   sp!, {r4, r5, r6, r7, lr}
                MOV     ip, r1
                LDMIA   ip, {r1, r2, r3, r4, r5, r6, r7}
                SWI     OS_FSControl
                STMIA   ip, {r1, r2, r3, r4, r5, r6, r7}
                LDMIA   sp!, {r4, r5, r6, r7, pc}^

xos_readvarval  STMDB   sp!, {r4, r5, r6, lr}
                MOV     r5, r3
                LDR     r6, [sp, #16]
                MOV     r4, r6
                CMP     r5, #0
                LDRNE   r3, [r5]
                CMP     r6, #0
                LDRNE   r4, [r6]
                SWI     XOS_ReadVarVal
                CMP     r5, #0
                STRNE   r3, [r5]
                CMP     r6, #0
                STRNE   r4, [r6]
                MOV     r0, r2
                LDMIA   sp!, {r4, r5, r6, pc}^

xos_setvarval   STMDB   sp!, {r4, lr}
                MOV     r3, r1
setvarval1      LDRB    r2, [r3], #1
                CMP     r2, #' '
                BCS     setvarval1
                SUB     r2, r3, r1
                MOV     r3, #0
                MOV     r4, #0
                SWI     XOS_SetVarVal
                LDMIA   sp!, {r4, pc}^

os_changeenvironment
                STMDB   sp!, {r4, r5, lr}
                MOV     r4, r2
                MOV     r5, r3
                CMP     r4, #0
                LDRNE   r2, [r4]
                CMP     r5, #0
                LDRNE   r3, [r5]
                SWI     OS_ChangeEnvironment
                CMP     r4, #0
                STRNE   r2, [r4]
                CMP     r5, #0
                STRNE   r3, [r5]
                MOV     r0, r1
                LDMIA   sp!, {r4, r5, pc}^

os_exit         SWI     OS_Exit

os_generateerror
                SWI     OS_GenerateError

os_spriteop     STMDB   sp!, {r4, r5, r6, r7, r8, lr}
                MOV     r8, r1
                LDMIA   r8, {r1, r2, r3, r4, r5, r6, r7}
                SWI     OS_SpriteOp
                STMIA   r8, {r1, r2, r3, r4, r5, r6, r7}
                LDMIA   sp!, {r4, r5, r6, r7, r8, pc}^

wimp_spriteop   STMDB   sp!, {r4, r5, r6, r7, r8, lr}
                MOV     r8, r1
                LDMIA   r8, {r1, r2, r3, r4, r5, r6, r7}
                SWI     Wimp_SpriteOp
                STMIA   r8, {r1, r2, r3, r4, r5, r6, r7}
                LDMIA   sp!, {r4, r5, r6, r7, r8, pc}^

xos_module      STMDB   sp!, {r4, r5, lr}
                MOV     ip, r1
                LDMIA   ip, {r1 - r5}
                SWI     XOS_Module
                STMIA   ip, {r1 - r5}
                RSBVS   r0, r0, #0
                LDMIA   sp!, {r4, r5, pc}^

os_readmodevariable
                MOV     r3, lr
                SWI     OS_ReadModeVariable
                MOV     r0, r2
                MOVS    pc, r3

os_readc        MOV     r3, lr
                SWI     OS_ReadC
                MOVS    pc, r3

os_callavector  STMDB   sp!, {r4, r5, r6, r7, r8, r9, lr}
                MOV     ip, r0
                LDMIA   ip, {r0 - r9}
                SWI     OS_CallAVector
                STMIA   ip, {r0 - r9}
                LDMIA   sp!, {r4, r5, r6, r7, r8, r9, pc}^

os_plot         MOV     r3, lr
                SWI     OS_Plot
                MOVS    pc, r3

os_writec       MOV     r3, lr
                SWI     OS_WriteC
                MOVS    pc, r3

os_writen       MOV     r3, lr
                SWI     OS_WriteN
                MOVS    pc, r3

os_getenv       STMDB   sp!, {lr}
                MOV     ip, r0
                MOV     r3, r1
                SWI     OS_GetEnv
                CMP     ip, #0
                STRNE   r1, [ip]
                CMP     r3, #0
                STRNE   r2, [r3]
                LDMIA   sp!, {pc}^

os_writeenv     MOV     r3, lr
                SWI     OS_WriteEnv
                MOVS    pc, r3

wimp_setcolour  MOV     r3, lr
                SWI     Wimp_SetColour
                MOVS    pc, r3

os_swinumbertostring
                MOV     r3, lr
                BIC     r0, r0, #&ff000000
                SWI     OS_SWINumberToString
                ADD     r0, r1, r2
                MOVS    pc, r3

n_osgbpb_read     EQU   3
n_osgbpb_read_seq EQU   4

xos_gbpb_read   STMDB   sp!, {r4, lr}
                MOV     r4, r3
                MOV     r3, r2
                MOV     r2, r1
                MOV     r1, r0
                TST     r4, #&80000000
                MOVEQ   r0, #n_osgbpb_read
                MOVNE   r0, #n_osgbpb_read_seq
                SWI     XOS_GBPB
                MOVVC   r0, r3
                RSBVS   r0, r0, #0
                LDMIA   sp!, {r4, pc}^

n_osfind_close  EQU     0

xos_find_open   MOV     r3, lr
                SWI     XOS_Find
                MOVVS   r0, #0
                MOVS    pc, r3

os_find_close   MOV     r3, lr
                MOV     r1, r0
                MOV     r0, #0
                SWI     OS_Find
                MOVS    pc, r3

os_mouse        STMDB   sp!, {r4, r5, r6, lr}
                MOV     r4, r0
                MOV     r5, r1
                MOV     r6, r2
                SWI     OS_Mouse
                STR     r0, [r4]
                STR     r1, [r5]
                CMP     r6, #0
                STRNE   r3, [r6]
                MOV     r0, r2
                LDMIA   sp!, {r4, r5, r6, pc}^

os_byte         STMDB   sp!, {lr}
                SWI     OS_Byte
                AND     r0, r1, #&ff
                AND     r2, r2, #&ff
                ORR     r0, r0, r2, LSL #8
                ORRCS   r0, r0, #&80000000
                LDMIA   sp!, {pc}^

os_byte2        STMDB   sp!, {lr}
                SWI     OS_Byte
		MOV	r0, r2
                LDMIA   sp!, {pc}^

os_word         STMDB   sp!, {lr}
                SWI     OS_Word
                MOV     r0, r1
                LDMIA   sp!, {pc}^

wimp_commandwindow
                MOV     r3, lr
                SWI     Wimp_CommandWindow
                MOVS    pc, r3

wimp_readpixtrans
                STMDB   sp!, {r6, r7, lr}
                MOV     r6, r3
                LDR     r7, [sp, #12]
                SWI     Wimp_ReadPixTrans
                LDMIA   sp!, {r6, r7, pc}^

hourglass_start MOV     r3, lr
                SWI     XHourglass_Start
                MOVS    pc, r3

hourglass_off   MOV     r3, lr
                SWI     XHourglass_Off
                MOVS    pc, r3

hourglass_smash MOV     r3, lr
                SWI     XHourglass_Smash
                MOVS    pc, r3

os_claim        MOV     r3, lr
                SWI     OS_Claim
                MOVS    pc, r3

os_release      MOV     r3, lr
                SWI     OS_Release
                MOVS    pc, r3

os_addtovector  MOV     r3, lr
                SWI     OS_AddToVector
                MOVS    pc, r3

os_readmemmapinfo
                MOV     r3, lr
                SWI     OS_ReadMemMapInfo
                ORR     r0, r0, r1, LSL #16
                MOVS    pc, r3

os_readmemmapentries
                MOV     r3, lr
                SWI     OS_ReadMemMapEntries
                MOVS    pc, r3

os_setmemmapentries
                MOV     r3, lr
                SWI     OS_SetMemMapEntries
                MOVS    pc, r3

os_readmonotonictime
                MOV     r3, lr
                SWI     OS_ReadMonotonicTime
                MOVS    pc, r3

colourtrans_invalidatecache
                MOV     r1, lr
                SWI     ColourTrans_InvalidateCache
                MOVS    pc, r1

colourtrans_returngcol
                MOV     r1, lr
                SWI     ColourTrans_ReturnGCOL
                MOVS    pc, r1

colourtrans_returnoppgcol
                MOV     r1, lr
                SWI     ColourTrans_ReturnOppGCOL
                MOVS    pc, lr

xwimp_readsysinfo
                MOV     r1, lr
                SWI     XWimp_ReadSysInfo
                RSBVS   r0, r0, #0
                MOVS    pc, r1

wimp_readpalette
                MOV     r2, lr
                MOV     r1, r0
                SWI     Wimp_ReadPalette
                MOVS    pc, r2

wimp_setpalette MOV     r2, lr
                MOV     r1, r0
                SWI     Wimp_SetPalette
                MOVS    pc, r2

os_cli          MOV     r2, lr
                SWI     OS_CLI
                MOVS    pc, r2

os_readpalette  MOV     ip, lr
                SWI     OS_ReadPalette
                MOV     r0, r2
                MOVS    pc, ip

os_delinkapplication
                MOV     r3, lr
                SWI     OS_DelinkApplication
                MOV     r0, r1
                MOVS    pc, r3

os_relinkapplication
                MOV     r3, lr
                SWI     OS_RelinkApplication
                MOVS    pc, r3

wimp_getwindowinfo
                MOV     r3, lr
                MOV     r1, r0
                SWI     Wimp_GetWindowInfo
                MOVS    pc, r3

xos_confirm     MOV     r3, lr
                SWI     XOS_Confirm
                MOV     r0, #1
                MOVNE   r0, #0
                MOVCS   r0, #0
                MOVVS   r0, #0
                MOVS    pc, r3

colourtrans_setcolour
                STMDB   sp!, {r4, lr}
                MOV     r3, r1
                MOV     r4, r2
                SWI     ColourTrans_SetColour
                LDMIA   sp!, {r4, pc}^

colourtrans_generatetable
                STMDB   sp!, {r4, r5, r6, r7, lr}
                MOV     r4, r2
                MOV     r2, #-1
                MOV     r3, #-1
                MOV     r5, #0
                SWI     ColourTrans_GenerateTable
                LDMIA   sp!, {r4, r5, r6, r7, pc}^

os_synchronisecodeareas
		MOV	r3, lr
		MOV	r2, r1
		MOV	r1, r0
		MOV	r0, #1
		SWI	XOS_SynchroniseCodeAreas
		MOVS	pc, r3

os_platformfeatures_code
		MOV	ip, lr
		MOV	r0, #0
		SWI	XOS_PlatformFeatures
		MOVVS	r0, #0
		MOVS	pc, ip

os_screenmode
		MOV	r3, lr
		SWI	OS_ScreenMode
		MOVS	pc, r3

pdriver_selectjob
                MOV     ip, lr
                SWI     XPDriver_SelectJob
                MOVVS   r0, #0
                MOVS    pc, ip

pdriver_abortjob
                MOV     ip, lr
                SWI     XPDriver_AbortJob
                MOVS    pc, ip

os_dynamicarea_enumerate
                MOV     ip, lr
                MOV     r1, r0
                MOV     r0, #3
                SWI     XOS_DynamicArea
                MOVVC   r0, r1
                MOVVS   r0, #-1
                MOVS    pc, ip

os_dynamicarea_read_info
                STMFD   sp!, {r4-r9, ip, lr}
                MOV     ip, r2
                MOV     r9, r1
                MOV     r1, r0
                MOV     r0, #2
                SWI     XOS_DynamicArea
                MOVVS   r3, #0
                MOVVS   r2, #0
                TEQ     r9, #0
                STRNE   r3, [r9]
                TEQ     ip, #0
                STRNE   r2, [ip]
                LDMFD   sp!, {r4-r9, ip, pc}^

                END
