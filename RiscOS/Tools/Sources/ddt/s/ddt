r0              RN      0
r1              RN      1
r2              RN      2
r3              RN      3
r4              RN      4
r5              RN      5
r6              RN      6
r7              RN      7
r8              RN      8
r9              RN      9
r10             RN      10
r11             RN      11
r12             RN      12
r13             RN      13
r14             RN      14
r15             RN      15

sl              RN      10
fp              RN      11
ip              RN      12
sp              RN      13

lr              RN      14
pc              RN      15

                GET     s.defs

                IMPORT  debug_aif
                IMPORT  debug_init
                IMPORT  |__RelocCode|
                IMPORT  malloc
                IMPORT  rma_malloc
                IMPORT  heap_init
                IMPORT  claim_swiv
                IMPORT  release_swiv
                IMPORT  blocklist
                IMPORT  heap_discard
                IMPORT  poll_intercept_flag
                IMPORT  user_sp
                IMPORT  user_lr
                [ PRAGMA_C1
                IMPORT  exception
                ]

                EXPORT  |__main|
                [ {TRUE}
                EXPORT  |x$stack_overflow|
                EXPORT  |x$stack_overflow_1|
                ]
                EXPORT  |x$divide|
                EXPORT  |x$udivide|
                [ {TRUE}
                EXPORT  |__rt_stkovf_split_small|
                EXPORT  |__rt_stkovf_split_big|
                ]
                EXPORT  |__rt_sdiv|
                EXPORT  |__rt_udiv|
                EXPORT  cmd_buffer
                EXPORT  error_buffer
                EXPORT  line_buffer
                EXPORT  debug_swi_inst
                EXPORT  debugtask
                EXPORT  reset_dbgflag
                [ PRAGMA_C1
                EXPORT  |_rd1chk|
                EXPORT  |_rd2chk|
                EXPORT  |_rd4chk|
                EXPORT  |_wr1chk|
                EXPORT  |_wr2chk|
                EXPORT  |_wr4chk|
                EXPORT  enable_access
                ]

zp_wimpdomain           EQU     &ff8

ddt_swibase             EQU     &41d40

debugaif_swi            EQU     0                       ; | ddt_swibase
beingdebugged_swi       EQU     1                       ; | ddt_swibase
startdebug_swi          EQU     2                       ; | ddt_swibase
enddebug_swi            EQU     3                       ; | ddt_swibase

ddt_errbase             EQU     &840

unk_swi_error           EQU     ddt_errbase + 0
stack_overflow_error    EQU     ddt_errbase + 1
bad_debugdata_error     EQU     ddt_errbase + 2
exception_error         EQU     ddt_errbase + 3
div_zero_error          EQU     ddt_errbase + 4
read_error              EQU     ddt_errbase + 5
write_error             EQU     ddt_errbase + 6
cant_debug_error        EQU     ddt_errbase + 7
null_env_error          EQU     ddt_errbase + 8
mult_debug_error        EQU     ddt_errbase + 9
no_fp_error             EQU     ddt_errbase + 10
no_colour_error         EQU     ddt_errbase + 11
no_wrchv_routine        EQU     ddt_errbase + 12
no_bytev_routine        EQU     ddt_errbase + 13
no_vector_table         EQU     ddt_errbase + 14
bad_sprite              EQU     ddt_errbase + 15
old_format_window       EQU     ddt_errbase + 16
no_template             EQU     ddt_errbase + 17
too_many_menus          EQU     ddt_errbase + 18

                AREA    |!|, CODE, READONLY

overflow                EQU     &10000000               ; Mask for V status
I_bit                   EQU     &08000000

stacksize               EQU     24 * 1024

n_callback_handle       EQU     7

OS_ChangeEnvironment    EQU     &40
OS_SetCallBack          EQU     &1b
OS_UpCall               EQU     &33
XOS_SynchroniseCodeAreas EQU	&2006E

OS_Exit                 EQU     &11
OS_GenerateError        EQU     &2b
XOS_ReadVarVal          EQU     &20023

n_file_load_path        EQU     12
n_file_ex_path          EQU     13
n_file_load_var         EQU     14
n_file_ex_var           EQU     15
n_file_generate_error   EQU     19

OS_File                 EQU     &08
XOS_File                EQU     &20008
n_fscontrol_start_app   EQU     2

OS_FSControl            EQU     &29

OS_CLI                  EQU     &05
OS_ConvertHex8          EQU     &d4
OS_WriteS               EQU     1
OS_Write0               EQU     2
OS_NewLine              EQU     3
OS_GetEnv               EQU     &10

XFPEmulator_Version     EQU     &60480
XColourTrans_InvalidateCache EQU &60750

n_module_delete EQU     4
n_module_claim  EQU     6
n_module_free   EQU     7
OS_Module       EQU     &1e
XOS_Module      EQU     &2001e

; Offsets in AIF header
o_decompress_br         EQU     0
o_reloc_br              EQU     4
o_zinit_br              EQU     8
o_entry_br              EQU     12
o_exit_swi              EQU     16
o_rosize                EQU     20
o_rwsize                EQU     24
o_debugsize             EQU     28
o_zisize                EQU     32
o_debug_version         EQU     36
o_image_base            EQU     40
o_workspace             EQU     44
o_debug_swi             EQU     48
o_r14fix                EQU     52
o_alt_zinit_br          EQU     56
o_unused                EQU     60
o_zinitcode             EQU     64

swi_inst                EQU     &ef000000

mov_r0_r0               EQU     &e1a00000

debug_swi               EQU     swi_inst + ddt_swibase + debugaif_swi
r14fix_inst             EQU     &e24fe030  ; SUB  r14, pc, #&30
debug_br_inst           EQU     &ea000008  ; B    debug_start
; br_adjust is the amount to subtract from the zeron init branch when moved to
; its new home @ o_alt_zinit_br. The L bit must also be cleared.
br_adjust               EQU     (o_alt_zinit_br - o_zinit_br) / 4
b_inst                  EQU     &ea000000
ret_inst                EQU     &e1b0f00e  ; MOVS pc, lr

module_start            EQU     .

                DCD     0                       ; Run
                DCD     init - module_start
                DCD     finish - module_start   ; Finish
                DCD     service - module_start  ; Service call
                DCD     title - module_start
                DCD     help - module_start
                DCD     cmd_table - module_start
                DCD     ddt_swibase
                DCD     do_swi - module_start
                DCD     swi_table - module_start
                DCD     0                       ; SWI decode routine

title           DCB     "DDT", 0

help            DCB     "DDT", 9, 9
                DCB     "1.80 (21 Apr 1997)", 0

swi_table       DCB     "Debugger", 0
                DCB     "DebugAIF", 0
                DCB     "BeingDebugged", 0
                DCB     "StartDebug", 0
                DCB     "EndDebug", 0
                DCB     0

cmd_table       DCB     "DebugAIF", 0
                ALIGN
                DCD     debug_cmd - module_start
                DCB     1                         ; Min. parameters
                DCB     0                         ; GSTrans map
                DCB     255                       ; Max. parameters
                DCB     0                         ; Flags
                DCD     debug_syn - module_start  ; Syntax message
                DCD     debug_help - module_start ; Help message
                DCD     0                         ; End of command table

debug_help      DCB     "*DebugAIF invokes the interactive debugger on an AIF image.", 13

debug_syn       DCB     "Syntax: *DebugAIF <AIF image> [<image arguments>]", 0
                DCD     0

ddt_in_use_err  EQU     &853
ddt_in_use      DCD     ddt_in_use_err
                DCB     "Cannot die - debugging session in progress", 0

service_reset   EQU     &27

service         CMP     r1, #service_reset
                MOVNES  pc, lr
                STMDB   sp!, {r0, r1, r2, r3, ip, lr}
                BL      heap_discard
                BL      reset_dbgflag
                BL      claim_swiv
                LDMIA   sp!, {r0, r1, r2, r3, ip, pc}^

finish          LDR     r0, in_debugger
                CMP     r0, #0
                ADRNE   r0, ddt_in_use
                ORRNES  pc, lr, #overflow
                STMDB   sp!, {r0, r1, r2, r3, ip, lr}
                BL      heap_discard
                BL      reset_dbgflag
                LDMIA   sp!, {r0, r1, r2, r3, ip, lr}
                B       release_swiv

init            STMDB   sp!, {r7, r8, r9, r10, r11, lr}
                BL      |__RelocCode|
                LDR     r0, [r12]
                CMP     r0, #0
                LDMNEIA sp!, {r7, r8, r9, r10, r11, pc}^
		[ {TRUE}
                MOV     sl, sp
                AND     sl, sl, #&ff00000
                ADD     sl, sl, #512
                MOV     fp, #0
		]
                BL      debug_init
                BL      claim_swiv
                LDMIA   sp!, {r7, r8, r9, r10, r11, lr}
                MOVS    pc, lr

unk_swi_msg     DCD     unk_swi_error
                DCB     "Unknown Debugger SWI", 0

do_swi          SUBS    r11, r11, #beingdebugged_swi
                ADRNE   r0, unk_swi_msg
                ORRNES  pc, lr, #overflow
                LDR     r11, [r11, #zp_wimpdomain]
                LDR     r0, in_debugger
                CMP     r0, r11
                MOVNE   r0, #0
                MOVEQ   r0, #1
                MOVS    pc, lr

registers       %       64
old_callback    %       16

stack_str       DCB     "stack", 0
                ALIGN

debugtask       MVN     r14, #I_bit
                TSTP    r14, pc
                ADR     r14, registers
                STMIA   r14, {r0-r14}^
                MOV     r9, r0
                LDMIA   sp!, {r0, r12, lr}
                STR     r0, registers + 0 * 4
                STR     r12, registers + 12 * 4
                STR     lr, registers + 15 * 4
                ADRL    r14, user_sp
                STMIA   r14, {r13, r14}^
                TEQP    pc, #0
                SWI     XFPEmulator_Version
                MOVVS   r0, #0
                CMP     r0, #400
                ADRLO   r0, no_fp
                SWILO   OS_GenerateError
                SWI     XColourTrans_InvalidateCache
                ADRVS   r0, no_colour
                SWIVS   OS_GenerateError
                LDR     r14, in_debugger
                CMP     r14, #0
                ADR     r0, mult_debug
                SWINE   OS_GenerateError
                LDR     r0, [r14, #zp_wimpdomain]
                STR     r0, in_debugger
                BL      heap_init
                MOV     r0, #stacksize
                ADR     r1, stack_str
                BL      rma_malloc
                ADD     sl, r0, #256
                ADD     sp, r0, #stacksize
                MOV     fp, #0
                ADR     r0, registers
                MOV     r1, r9
                BL      debug_aif
|__main|        EQU     @
exit_inst       SWI     OS_Exit

in_debugger     DCD     0

reset_dbgflag   MOV     r0, #0
                STR     r0, in_debugger
                ADRL    r1, poll_intercept_flag
                STR     r0, [r1]
                MOVS    pc, lr

cant_start_err  EQU     &600
cant_start_msg  DCD     cant_start_err
                DCB     "Unable to start application", 0
                ALIGN

mult_debug      DCD     mult_debug_error
                DCB     "Debugging session already in progress", 0
                ALIGN

no_fp           DCD     no_fp_error
                DCB     "FPEmulator module version 4.00 or later not loaded", 0
                ALIGN

no_colour       DCD     no_colour_error
                DCB     "Colours module not loaded", 0
		ALIGN

    [ {TRUE}
|x$stack_overflow|
|x$stack_overflow_1|
|__rt_stkovf_split_small|
|__rt_stkovf_split_big|
                ADR     r0, stack_overflow_msg
                SWI     OS_GenerateError

stack_overflow_msg
                DCD     stack_overflow_error
                DCB     "Stack overflow in Debugger", 0
                ALIGN
    ]

OS_WriteC       EQU     0
OS_Newline      EQU     3

mode_screensize EQU     7
OS_ReadModeVariable EQU &35

debug_cmd       ORR     lr, lr, #overflow
                STMDB   sp!, {r6, r7, r8, lr}
                MOV     r7, r0
                MOV     r5, r7
                ADR     r8, cmd_buffer + 256
debug_cmd1      LDRB    r0, [r5]                ; Find end of 1st word in tail
                CMP     r0, #' ' + 1
                STRCSB  r0, [r8, #-1]!
                ADDCS   r5, r5, #1
                BCS     debug_cmd1
                MOV     r6, r5
debug_cmd2      LDRB    r0, [r6]                ; Skip space, to second word
                CMP     r0, #' '
                ADDEQ   r6, r6, #1
                BEQ     debug_cmd2
                MOV     r3, #0
                STRB    r3, [r5]                ; 0 byte at end of command word
                STRB    r3, [r8, #-1]!
                ADR     r0, run_path
                MVN     r2, #0                  ; -1
                SWI     XOS_ReadVarVal
                CMP     r2, #0                  ; -1 => found, 0 => not found
                ADREQ   r4, default_path        ; Use ",%." if not found
                MOVEQ   r0, #n_file_ex_path
                ADRNE   r4, run_path            ; Otherwise variable "Run$Path"
                MOVNE   r0, #n_file_ex_var
                MOV     r1, r7
                STMDB   sp!, {r0, r4}
                SWI     OS_File   ; Get info on file
                CMP     r0, #1
                MOVNE   r2, r0
                LDMIA   sp!, {r0, r4}
                BNE     err_object_type
                LDR     r5, =&fff00000
                AND     r7, r2, r5
                CMP     r7, r5
                MOVNE   r2, r3
                MOVNE   r3, #1
                BNE     load_dbge
                AND     r5, r2, #&f0000
                CMP     r5, #&f0000
                ADRNE   r0, cant_debug_msg
                LDMNEIA sp!, {r6, r7, r8, pc}^
                AND     r5, r2, #&ff00
                CMP     r5, #&d300
                CMPNE   r5, #&f800
                ADRNE   r0, cant_debug_msg
                LDMNEIA sp!, {r6, r7, r8, pc}^
                MOV     r3, #0
                MOV     r2, #&8000
; R0 = Examine function
; R1 = Name
; R2 = Exec address if R3 = 1, Load and Exec if R3 = 0
; R3 = 0 or 1 for OS_File
; R4 = Pointer to path or variable
;
; First send around an upcall before clobbering application space!
;
load_dbge       MOV     r5, r0
                MOV     r0, #&100       ; Upcall new application
                SWI     OS_UpCall
                CMP     r0, #0
                ADREQ   r0, cant_start_msg
                LDMEQIA sp!, {r6, r7, r8, pc}^
                MOV     r0, r5
; Now try loading the image
                SUB     r0, r0, #n_file_ex_path - n_file_load_path
                SWI     OS_File   ; Try loading file, loaded address in r2
                LDR     r0, =&fff00000
                AND     r1, r2, r0
                CMP     r1, r0
                MOVEQ   r2, #&8000
                MOV     r0, r2
                MOV     r3, r2
                ADR     r1, start_addr
                MOV     r2, #9
                SWI     OS_ConvertHex8
                MOV     r0, #';'
                STRB    r0, [r1], #1
debug_cmd3      LDRB    r0, [r6], #1
                STRB    r0, [r1], #1
                CMP     r0, #' '
                BCS     debug_cmd3
                LDR     r0, exit_inst           ; No Exit SWI
                LDR     r1, [r3, #o_exit_swi]   ; => not an AIF image
                CMP     r0, r1
                LDR     r0, =debug_swi
                LDRNE   r2, [r3]
                STRNE   r0, [r3]
                MOVNE   r0, #0
                BNE     go1
                MOV     r2, #0
                LDR     r1, [r3, #o_debug_swi]
                CMP     r0, r1          ; Debug SWI already in place?
                BEQ     go              ; Go start debuggee
                STR     r0, [r3, #o_debug_swi]
                LDR     r0, =r14fix_inst
                STR     r0, [r3, #o_r14fix]
                LDR     r0, =debug_br_inst
                LDR     r1, [r3, #o_zinit_br]
                STR     r0, [r3, #o_zinit_br]
            ;    AND     r0, r1, #&f0000000
            ;    CMP     r0, #&f0000000
            ;   IDJ/NK: 5-Jan-95 use new NOP == MOV r0, r0
            ;           bug-fix AQU-00700, AQU-00714
                LDR     r0, =mov_r0_r0
                TEQ     r0, r1
                LDREQ   r1, =ret_inst
                BEQ     str_zi_br
                SUB     r1, r1, #br_adjust
                BIC     r1, r1, #&ff000000
                ORR     r1, r1, #b_inst
str_zi_br       STR     r1, [r3, #o_alt_zinit_br]
go              LDR     r0, [r3, #o_debugsize]
go1             STR     r2, debug_swi_inst
                ADD     r3, r0, r0, LSR #1
                MVN     r0, #0
                MOV     r1, #mode_screensize
                SWI     OS_ReadModeVariable
                ADD     r3, r3, r2
                ADD     r3, r3, #&8000
                MOV     r0, #n_module_claim
                SWI     OS_Module
                MOV     r0, #n_module_free
                SWI     OS_Module
		[ StrongARM
		MOV	r0, #0
		SWI	XOS_SynchroniseCodeAreas
		]
                ADR     r0, go_buffer
                SWI     OS_CLI
                SWI     OS_Exit

debug_swi_inst  DCD     0

run_path        DCB     "Run$Path", 0
                ALIGN
default_path    DCB     ",%.", 0
                ALIGN

go_buffer       DCB     "go "
start_addr      DCB     "00000000"
                DCB     ";"
cmd_buffer      EQU     .
line_buffer     %       256

error_buffer    %       256

err_object_type MOV     r0, #n_file_generate_error
                SWI     XOS_File
                LDMNEIA sp!, {r6, r7, r8, pc}^

cant_debug_msg  DCD     cant_debug_error
                DCB     "Can't debug files of this type", 0
                ALIGN

div_zero_msg    DCD     div_zero_error
                DCB     "Divide by zero in debugger", 0
                ALIGN

; Signed divide of a2 by a1: returns quotient in a1, remainder in a2
; Quotient is truncated (rounded towards zero).
; Sign of remainder = sign of dividend.
; Destroys a3, r3 and ip
; Negates dividend and divisor, then does an unsigned divide; signs
; get sorted out again at the end.
; Code mostly as for udiv, except that the justification part is slightly
; simplified by knowledge that the dividend is in the range [0..#x80000000]
; (one register may be gained thereby).

|__rt_sdiv|
|x$divide|      MOVS    ip, r0
                RSBMI   r0, r0, #0              ; absolute value of divisor
                EOR     ip, ip, r1
                ANDS    r3, r1, #&80000000
                ORR     ip, r3, ip, LSR #1
                ; ip bit 31  sign of dividend (= sign of remainder)
                ;    bit 30  sign of dividend EOR sign of divisor (= sign of quotient)
                RSBNE   r1, r1, #0              ; absolute value of dividend

                MOV     r2, r0
                MOV     r3, #0
s_loop          CMP     r1, r2, ASL #0
                BLS     s_shifted0mod8
                CMP     r1, r2, ASL #1
                BLS     s_shifted1mod8
                CMP     r1, r2, ASL #2
                BLS     s_shifted2mod8
                CMP     r1, r2, ASL #3
                BLS     s_shifted3mod8
                CMP     r1, r2, ASL #4
                BLS     s_shifted4mod8
                CMP     r1, r2, ASL #5
                BLS     s_shifted5mod8
                CMP     r1, r2, ASL #6
                BLS     s_shifted6mod8
                CMP     r1, r2, ASL #7
                MOVHI   r2, r2, ASL #8
                BHI     s_loop
s_loop2         CMP     r1, r2, ASL #7
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #7
                CMP     r1, r2, ASL #6
s_shifted6mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #6
                CMP     r1, r2, ASL #5
s_shifted5mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #5
                CMP     r1, r2, ASL #4
s_shifted4mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #4
                CMP     r1, r2, ASL #3
s_shifted3mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #3
                CMP     r1, r2, ASL #2
s_shifted2mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #2
                CMP     r1, r2, ASL #1
s_shifted1mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #1
                CMP     r1, r2, ASL #0
s_shifted0mod8  ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #0
                CMP     r0, r2, LSR #1
                MOVLS   r2, r2, LSR #8
                BLS     s_loop2
                MOV     r0, r3
                TST     ip, #&40000000
                RSBNE   r0, r0, #0
                TST     ip, #&80000000
                RSBNE   r1, r1, #0
                MOVS    pc, lr

; Unsigned divide of r1 by r0: returns quotient in r0, remainder in r1
; Destroys r2, r3 and ip

|__rt_udiv|
|x$udivide|     MOVS    r2, r0
                ADREQ   r0, div_zero_msg
                SWIEQ   OS_GenerateError
                MOV     r3, #0
                MOV     ip, #&80000000
                CMP     r1, ip
                MOVLO   ip, r1
u_loop          CMP     ip, r2, ASL #0
                BLS     u_shifted0mod8
                CMP     ip, r2, ASL #1
                BLS     u_shifted1mod8
                CMP     ip, r2, ASL #2
                BLS     u_shifted2mod8
                CMP     ip, r2, ASL #3
                BLS     u_shifted3mod8
                CMP     ip, r2, ASL #4
                BLS     u_shifted4mod8
                CMP     ip, r2, ASL #5
                BLS     u_shifted5mod8
                CMP     ip, r2, ASL #6
                BLS     u_shifted6mod8
                CMP     ip, r2, ASL #7
                MOVHI   r2, r2, ASL #8
                BHI     u_loop
u_loop2
u_shifted7mod8  CMP     r1, r2, ASL #7
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #7
u_shifted6mod8  CMP     r1, r2, ASL #6
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #6
u_shifted5mod8  CMP     r1, r2, ASL #5
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #5
u_shifted4mod8  CMP     r1, r2, ASL #4
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #4
u_shifted3mod8  CMP     r1, r2, ASL #3
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #3
u_shifted2mod8  CMP     r1, r2, ASL #2
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #2
u_shifted1mod8  CMP     r1, r2, ASL #1
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #1
u_shifted0mod8  CMP     r1, r2, ASL #0
                ADC     r3, r3, r3
                SUBHS   r1, r1, r2, ASL #0
                CMP     r0, r2, LSR #1
                MOVLS   r2, r2, LSR #8
                BLS     u_loop2
                MOV     r0, r3
                MOVS    pc, r14

                [ PRAGMA_C1

read_short_align_msg
                DCB     "Short read from non halfword aligned address", 0
                ALIGN

read_word_align_msg
                DCB     "Word read from non word aligned address", 0
                ALIGN

write_short_align_msg
                DCB     "Short write to non halfword aligned address", 0
                ALIGN

write_word_align_msg
                DCB     "Word write to non word aligned address", 0
                ALIGN

enable_access   DCD     0

|_rd1chk|
                STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, #0
                B       addrchk
|_rd2chk|
                STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, #0
                TST     r0, #1
                ADRNE   r3, read_short_align_msg
                B       addrchk
|_rd4chk|
                STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, #0
                TST     r0, #3
                ADRNE   r3, read_word_align_msg
                B       addrchk
|_wr1chk|
                STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, #&80000000
                B       addrchk
|_wr2chk|
                STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, #&80000000
                TST     r0, #1
                ADRNE   r3, write_short_align_msg
                ORRNE   r3, r3, #&80000000
                B       addrchk
|_wr4chk|
                STMDB   sp!, {r1, r2, r3, lr}
                MOV     r3, #&80000000
                TST     r0, #3
                ADRNE   r3, write_word_align_msg
                ORRNE   r3, r3, #&80000000

; R0 = Memory address to check for validity
; R3 : Bit 31 => Test for writing
; R3 : Bits 0 - 30 = Pointer to error message to be printed if address is valid
;      (ie. print alignment error only if address is valid), 0 => no error
; {r1, r2, r3, lr} saved on stack
addrchk
                LDR     r1, enable_access       ; Just return if enable access
                CMP     r1, #0                  ; flag set
                LDMNEIA sp!, {r1, r2, r3, pc}^
                TST     lr, #3
                BEQ     addrchk0
                CMP     r0, sp
                BCC     addrchk0
                BIC     r1, sp, #&ff
                BIC     r1, r1, #&ff00
                ADD     r1, r1, #8192
                CMP     r0, r1
                LDMCCIA sp!, {r1, r2, r3, pc}^
addrchk0        CMP     r0, #&1800000           ; Allow access to page 0 for
                LDMCCIA sp!, {r1, r2, r3, pc}^  ; the time being
                ADRL    r1, module_start
                CMP     r0, r1
                BCC     addrchk1
                LDR     r2, [r1, #-4]
                ADD     r1, r1, r2
                CMP     r0, r1
                LDMCCIA sp!, {r1, r2, r3, pc}^
addrchk1        ADRL    r2, blocklist
addrchk2        LDR     r2, [r2]
                CMP     r2, #0
                BEQ     addr_error
                CMP     r0, r2
                BCC     addrchk2
                LDR     r1, [r2, #4]
                ADD     r1, r1, r2
                CMP     r0, r1
                BCS     addrchk2
                BICS    r3, r3, #&80000000
                LDMEQIA sp!, {r1, r2, r3, pc}^
                MOV     r0, r3
                B       addr_error1

addr_error
                TST     r3, #&80000000
                ADR     r0, read_addr_msg
                ADRNE   r0, write_addr_msg
addr_error1
                LDMIA   sp!, {r1, r2, r3}
                ADRL    lr, registers
                STMIA   lr, {r0 - r14}^
                MOV     r12, lr
                LDMIA   sp!, {lr}
                TST     lr, #3
                STRNE   sp, [r12, #13*4]
                STR     lr, [r12, #15*4]
                B       exception

                ]

read_addr_msg   DCB     "Illegal memory read", 0
                ALIGN

write_addr_msg  DCB     "Illegal memory write", 0
                ALIGN

                END
