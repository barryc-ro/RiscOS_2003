#define SC_MARK         0

#define SC_SLOFFSET     560

#define IS_A_STACK_CHUNK 0x760690ff

#define BREAKPOINT    0x0f000017
#define EXIT_SWI      0xef000011
#define BRANCH_OPCODE 0x0a000000
#define BRANCH_INST   0xea000000
#define BREAK_STRLR   0xe50fe010
#define BREAK_ADRLR   0xe24fe014

#define IS_PBREAK(bp) ((bp)->proc)

extern char regnames[2][6][3];

typedef struct BreakPoint {
    struct BreakPoint *next;
/* The following 5 fields are the breakpoint code which is executed when a
 * breakpoint occurs :-
 * L1   DCD     0       ; Save loc. for lr
 * L2   DCD     0       ; Addr of breakpoint
 *      STR     lr, L1  ; Break branches here, free lr
 *      ADR     lr, L1  ; Setup pointer to the save block
 *      B       svc_break_handler
 */
    int save_lr;      /* addr = 0 => SWI break, save_lr = swi no */
    int addr;
    int str_lr;
    int adr_lr;
    int b_svc_break;
    int inst;
    ProcDef *proc;    /* For ptrace, 0=> normal breakpoint */
    char *file;
    int line;
    char str[1];
} BreakPoint;

extern BreakPoint *breaklist;

typedef struct WatchPoint {
    struct WatchPoint *next;
    int addr;
    int n;
    int *stackframe;
    char *str;
    Context c;      /* 6 words */
    Datum d;
    int base;
    char contents[1];
} WatchPoint;

extern WatchPoint *watchlist;

extern void claim_wrchv(void);
extern void release_wrchv(void);
extern void find_wrch(void);
extern int readbyte(int address, int *byte);
extern int readword(int address, int *word);
extern int writeword(int address, int word);
extern BreakPoint *swi_break_lookup(int swino);
extern BreakPoint *break_lookup(int addr);
extern void swi_break_set(int swino, char *s);
extern int break_set(int addr, char *s, char *file, int line);
extern WatchPoint *watch_lookup(int addr, int *stackframe);
extern int pbreak_set(int addr, ProcDef *proc);
extern int watch_set(int addr, int size, int *stackframe,
                     char *s, Context *c, Datum *d, int base);
extern void read_memmap(int image_base, int image_rosize);
