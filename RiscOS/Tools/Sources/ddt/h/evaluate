#define node_variable 0
#define node_number   1
#define node_operator 2
#define node_field    3

#define op_times       0
#define op_div         1
#define op_rem         2
#define op_plus        3
#define op_minus       4
#define op_lshift      5
#define op_rshift      6
#define op_lt          7
#define op_le          8
#define op_gt          9
#define op_ge         10
#define op_eq         11
#define op_neq        12
#define op_and        13
#define op_xor        14
#define op_or         15
#define op_logand     16
#define op_logor      17

#define op_dot        18
#define op_arrow      19
#define op_contents   20
#define op_addrof     21
#define op_subscript  22
#define op_negate     23
#define op_lognot     24
#define op_compl      25

#define is_dyadic(s) ((s) <= op_logor)
#define is_monadic(s) (((s) >= op_negate && (s) <= op_compl) || \
                        (s) == op_contents || (s) == op_addrof)

typedef struct Variable {
    struct VarDef *def;
    Context con;
} Variable;

typedef struct Operator {
    int op;
    struct ExpTree *left, *right;
} Operator;

typedef struct Field {
    char *name;
} Field;

typedef struct ExpTree {
    int nodetype;
    union e_un {
        Variable v;
        Number n;
        Operator o;
        Field f;
    } e;
} ExpTree;

extern int low_eval(char **ps, int *res, int evaluate);
extern int vardeftodatum(VarDef *def, Context *c, Datum *res);
extern int datumtonum(Datum *d, Number *num);
extern int findlwb(ItemArray *item, Context *c);
extern int findupb(ItemArray *item, Context *c);
extern int typesize(Datum *d, Context *c);
extern int eval_fpconst(char **ps, FPExtended *fp, int terminate);
extern int evaluate(ExpTree *tree, Context *c, Datum *res);
#if 0
extern void print_tree(ExpTree *tree);
#endif
