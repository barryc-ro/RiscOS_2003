#define WimpEvent_Null      0
#define WimpEvent_Redraw    1
#define WimpEvent_Open      2
#define WimpEvent_Close     3
#define WimpEvent_Leaving   4
#define WimpEvent_Entering  5
#define WimpEvent_Click     6
#define WimpEvent_Drag      7
#define WimpEvent_Key       8
#define WimpEvent_Menu      9
#define WimpEvent_Scroll   10
#define WimpEvent_Lose     11
#define WimpEvent_Gain     12
#define WimpEvent_Message  17
#define WimpEvent_Recorded 18
#define WimpEvent_ACK      19

typedef struct OS_Error_Block {
    int   errno;
    char  errmsg[252];
} OS_Error_Block;

typedef struct OS_Error_Buffer {
    int   errpc;
    OS_Error_Block error;
} OS_Error_Buffer;

typedef struct OS_File_Block {
    int r2, r3, r4, r5;
} OS_File_Block;

typedef struct OS_FSControl_Block {
    int r1, r2, r3, r4, r5, r6, r7;
} OS_FSControl_Block;

typedef struct Sprite_Area {
    int size;
    int nsprites;
    int sproffset;
    int freeoffset;
} Sprite_Area;

typedef struct OS_SpriteOP_Block {
    Sprite_Area *area;
    void        *sprite;
    int r3, r4, r5, r6, r7;
} OS_SpriteOP_Block;

int os_vs(void);

extern OS_Error_Block *os_last_error;

void os_write0(char *s);

#define OS_FILE_READ_ATTR 17
#define OS_FILE_LOAD_PATH 12
#define OS_FILE_LOAD_VAR  14
#define OS_FILE_LOAD      16
#define OS_FILE_SAVE      10
#define OS_FILE_SETTYPE   18
#define OS_FILE_MAKEERROR 19

int xos_file(int action, char *name, OS_File_Block *fb);

int xos_bput(int c, int fd);

#define OS_FSCONTROL_START_APP       2
#define OS_FSCONTROL_FSNO_TO_FSNAME 33

void os_fscontrol(int action, OS_FSControl_Block *cb);

#define OS_SPRITEOP_USER_NAME_PTR      256
#define OS_SPRITEOP_USER_AREA_PTR      512

#define OS_SPRITEOP_INIT_AREA            9
#define OS_SPRITEOP_GET_SPRITE_USER     16
#define OS_SPRITEOP_PUT_SPRITE_USER     34
#define OS_SPRITEOP_SET_PTR_SHAPE       36
#define OS_SPRITEOP_READ_SPRITE_INFO    40
#define OS_SPRITEOP_PUT_SPRITE_SCALED   52
#define OS_SPRITEOP_SWITCH_OUTPUT       60

int os_spriteop(int spriteop, OS_SpriteOP_Block *sb);
int wimp_spriteop(int spriteop, OS_SpriteOP_Block *sb);

#define OS_MODULE_CLAIM          6
#define OS_MODULE_FREE           7
#define OS_MODULE_EXTRACT_INFO  12

typedef struct ModuleInfoStr {
    int mod_no;
    int ins_no;
    int base;
    int pw;
    int postfix;
} ModuleInfoStr;

int xos_module(int moduleop, void *args);

#define OS_READMODE_XEIGFACTOR  4
#define OS_READMODE_YEIGFACTOR  5
#define OS_READMODE_SCREENSIZE  7
#define OS_READMODE_LOG2BPP     9
#define OS_READMODE_XWINDLIMIT  11
#define OS_READMODE_YWINDLIMIT  12

int os_readmodevariable(int mode, int variable);

int xos_readvarval(char *name, char *buff,
                   int len, char **var_name, int *type);

void xos_setvarval(char *name, char *value);

#define N_MemoryLimit_Handler 0
#define N_Undef_Handler       1
#define N_Prefetch_Handler    2
#define N_Abort_Handler       3
#define N_Address_Handler     4
#define N_Other_Handler       5
#define N_Error_Handler       6
#define N_Callback_Handler    7
#define N_Break_Handler       8
#define N_Escape_Handler      9
#define N_Event_Handler       10
#define N_Exit_Handler        11
#define N_UnusedSWI_Handler   12
#define N_Registers_Handler   13
#define N_Space_Handler       14
#define N_CAO_Handler         15
#define N_UpCall_Handler      16

#define N_Handlers 17

int *os_changeenvironment(int handle, int *handler, int *r12, void **buffer);

void os_exit(void);

void os_generateerror(OS_Error_Block *eb);

int os_readc(void);

typedef struct OS_CallAVector_Block {
    int r0, r1, r2, r3, r4, r5, r6, r7, r8;
    int vector;
} OS_CallAVector_Block;

#define VDU_VECTOR 0x1b

void os_callavector(OS_CallAVector_Block *vb);

#define SET_GRAPHICS_MODE        5
#define CLEAR_GRAPHICS_WINDOW   16
#define SET_GRAPHICS_COLOUR     18
#define DEFINE_GRAPHICS_WINDOW  24
#define RESTORE_DEFAULT_PALETTE 20
#define RESTORE_DEFAULT_WINDOWS 26

#define VDU23_SET_TINT          17
#define SET_TINT_GRAPHICS_FGRND  2
#define SET_TINT_GRAPHICS_BGRND  3

#define PLOT_LINE_INCLUSIVE     0
#define PLOT_POINT              64
#define PLOT_RECT_FILL          96

#define PLOT_ABS_COPY           191

#define MOVE_REL                0
#define PLOT_REL_FGRND          1
#define PLOT_REL_INVERSE        2
#define PLOT_REL_BGRND          3
#define MOVE_ABS                4
#define PLOT_ABS_FGRND          5
#define PLOT_ABS_INVERSE        6
#define PLOT_ABS_BGRND          7

void os_plot(int op, int x, int y);

void os_writec(int c);

void os_writen(char *s, int n);

char *os_getenv(int *hwm, int **time);

void os_writeenv(char *cmdline, int *time);

#define PLOT_ACTION_AND         0x20
#define PLOT_ACTION_EOR         0x30

void wimp_setcolour(int colour);

extern char *os_swinumbertostring(int swino, char *s, int n);

extern int xos_gbpb_read(int file_handle, void *buffer, int n, int where);

#define OS_FIND_READ            0x40
#define OS_FIND_CREATE          0x80
#define OS_FIND_PATH            0x01
#define OS_FIND_NO_PATH         0x03

extern int xos_find_open(int action, char *name, char *path);

extern void os_find_close(int handle);

#define RIGHT_BUTTON    0x01
#define MIDDLE_BUTTON   0x02
#define LEFT_BUTTON     0x04

extern int os_mouse(int *x, int *y, int *time);

#define OSBYTE_SPECIFY_OUTPUT       3
#define OSBYTE_CURSOR_KEYS          4
#define OSBYTE_1ST_FLASH_DURATION   9
#define OSBYTE_2ND_FLASH_DURATION  10
#define OSBYTE_FLUSH_BUFFER        21
#define OSBYTE_POINTER            106
#define OSBYTE_READ_TEXT_CHAR     135
#define OSBYTE_READ_KBD           129
#define OSBYTE_CLEAR_ESC          124
#define OSBYTE_WRITE_VDU_BANK     112
#define OSBYTE_WRITE_DISPLAY_BANK 113
#define OSBYTE_PROG_SHIFT_KEYS2   222
#define OSBYTE_PROG_FN_KEYS       225
#define OSBYTE_PROG_SHIFT_FN_KEYS 226
#define OSBYTE_PROG_CTRL_FN_KEYS  227
#define OSBYTE_READ_DISPLAY_BANK  251

#define N_BUFFER_KEYBOARD 0
#define N_BUFFER_MOUSE    9

extern int os_byte(int op, int x, int y);
extern int os_byte2(int op, int x, int y);

#define OSWORD_MOUSEOP  21

#define MOUSEOP_DEFPTR        0
#define MOUSEOP_SETBOUNDBOX   1
#define MOUSEOP_SETMOUSEPOS   3
#define MOUSEOP_READMOUSEPOS  6
#define WORD_READCHAR        10

extern int os_word(int op, void *data);

extern void wimp_commandwindow(char *s);

extern void wimp_readpixtrans(int op, int area, char *name,
                              int* factors, int *pixtrans);

extern void hourglass_start(int delay);

extern void hourglass_off(void);

extern void hourglass_smash(void);

#define WRCH_VECTOR      0x03
#define BYTE_VECTOR      0x06
#define EVENT_VECTOR     0x10
#define UPCALL_VECTOR    0x1d
#define CHANGEENV_VECTOR 0x1e
#define SPRITE_VECTOR    0x1f
#define DRAW_VECTOR      0x20
#define COLOUR_VECTOR    0x22

#define N_Vectors        0x23

extern void os_claim(int vector, int address, int r12_val);

extern void os_release(int vector, int address, int r12_val);

extern void os_addtovector(int vector, int address, int r12_val);

extern int fpemulator_version(void);

#define PROT_MASK       3
#define PROT_ALL        0
#define PROT_RO         1
#define PROT_NONE       2

typedef struct MemInfo {
    int pageno;
    int address;
    int protection;
} MemInfo;

extern int os_readmemmapinfo(void);

extern void os_readmemmapentries(MemInfo *entries);

extern void os_setmemmapentries(MemInfo *entries);

extern int os_readmonotonictime(void);

extern void colourtrans_invalidatecache(void);

extern int colourtrans_returngcol(int colour);

extern int colourtrans_returnoppgcol(int colour);

extern int xwimp_readsysinfo(int item);

extern void wimp_readpalette(void *palette);

extern void wimp_setpalette(void *palette);

extern void os_cli(char *s);

extern int os_readpalette(int colour, int type);

extern int os_delinkapplication(void *buffer, int size);

extern void os_relinkapplication(void *buffer);

extern void wimp_getwindowinfo(void *block);

extern int xos_confirm(void);

extern void colourtrans_setcolour(int gcol, int flags, int action);

extern void colourtrans_generatetable(int mode, int *palette, unsigned char *pixtrans);

extern void os_synchronisecodeareas(void *start, void *end);

extern int os_platformfeatures_code(void);

extern void os_screenmode(int reason, int);

extern int pdriver_selectjob(int, const char *);

extern int pdriver_abortjob(int);

extern int os_dynamicarea_enumerate(int);

extern void os_dynamicarea_read_info(int n, unsigned int *start, unsigned int *size);
