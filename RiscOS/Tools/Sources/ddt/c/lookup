#include "defs.h"
#include "os.h"
#include "asd.h"
#include "quickdraw.h"
#include "window.h"
#include "debug.h"
#include "lowlevel.h"
#include "control.h"
#include "lib.h"
#include "lookup.h"

static int type_order[8] = { 7, 6, 1, 0, 3, 2, 5, 4 };

/*
 * Shellsort the low-level symbol table. Shellsort because shellsort is faster
 * than Quicksort for N < 5000. Also it has a nice worst case O(N ** 1.5) and
 * is much simpler than Quicksort.
 *
 * Shellsort 3 - Quicksort 0
 */
void sym_sort(ItemSymbol *a, unsigned int n)
{
    unsigned int h, i, j, k;
    ItemSymbol v;
    int incrs[20];    /* Up to 3 ^ 20 symbols */

    a--;
    i = 1;
    k = 0;
    do {
        incrs[k++] = i;
        i = i * 3 + 1;
    } while (i <= n);
    do {
        h = incrs[--k];
        for (i = h + 1; i <= n; i++) {
            v = a[i];
            j = i;
            while (j > h && (a[j-h].value > v.value || (a[j-h].value == v.value &&
                    type_order[(a[j-h].sym >> 24) & 7] > type_order[(v.sym >> 24) & 7]))) {
                a[j] = a[j-h];
                j -= h;
            }
            a[j] = v;
        }
    } while (h > 1);
}

unsigned build_labeltab(ItemSymbol *a,
                               unsigned int n, unsigned *l, char *s)
{
    unsigned i, j, v;

    v = 0xffffffff;
    i = 0;
    for (j = 0; j < n; j++) {
        if (v != a[j].value) {
            v = a[j].value;
            l[i++] = v >> 2;
        }
    }
    l[i++] = 0x3fffffff;
    return i;
}

ItemSymbol *sym_lookup(unsigned word)
{
    ItemSymbol *symtab;
    int l, r, m;

    symtab = symbol_tab;
    l = 0;
    r = symbols - 1;
    if (r < 0) return 0;
    m = l;
    while (l <= r) {
        m = (l + r) >> 1;
        if (word <= symtab[m].value)
            r = m - 1;
        if (word >= symtab[m].value)
            l = m + 1;
    }
    while (m >= 0 && word < symtab[m].value) m--;
    if (m < 0) return 0;
    word = symtab[m].value;
    do {
        m--;
    } while (m >= 0 && word == symtab[m].value);
    return &symtab[m+1];
}

unsigned line_lookup(unsigned line)
{
    unsigned *ltab;
    int l, r;
    unsigned m;

    ltab = labeltab;
    l = 0;
    r = nlabels - 1;
    if (r <= 0) return 0;
    while (l <= r) {
        m = (l + r) >> 1;
        if (line <= ltab[m] + m)
            r = m - 1;
        if (line >= ltab[m] + m)
            l = m + 1;
    }
    if (m) m--;
    while (line > ltab[m] + m) m++;
    return m;
}

unsigned addr_lookup(unsigned addr)
{
    unsigned *ltab;
    int l, r, m;

    addr >>= 2;
    ltab = labeltab;
    l = 0;
    r = nlabels - 1;
    if (r <= 0) return 0;
    while (l <= r) {
        m = (l + r) >> 1;
        if (addr <= ltab[m])
            r = m - 1;
        if (addr >= ltab[m])
            l = m + 1;
    }
    if (m < nlabels - 1) m++;
    while (m >= 0 && addr < ltab[m]) m--;
    return m + 1;
}

int isvardigit(int c)
{
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||
                                            (c >= '0' && c <= '9') || c == '_';
}

int issymdigit(int c)
{
    return isvardigit(c) || c == '.' || c == '!' || c == '$';
}

ItemSymbol *symname_lookup(char *sym)
{
    ItemSymbol *sy, *syend;
    char *strtab;

    sy = symbol_tab;
    syend = sy + symbols;
    strtab = string_tab;
    while (sy < syend) {
        if (!strcmp(sym, strtab + STR_INDEX(sy->sym)))
            return sy;
        sy++;
    }
    sy = symbol_tab;
    while (sy < syend) {
        if (!cistrcmp(sym, strtab + STR_INDEX(sy->sym)))
            return sy;
        sy++;
    }
    return 0;
}
