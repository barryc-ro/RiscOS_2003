#include "defs.h"
#include "ddt.h"
#include "help.h"

char *help_text;

char *help_messages[14] = {
"\
\n\
This is the Desktop Debugging Tool (DDT). A\n\
debugging session may be started in one of the\n\
following ways.\n\
\n\
Link an application with the -debug flag and\n\
execute it as per normal.\n\
\n\
Drop an image onto the debugger icon on the\n\
icon bar.\n\
\n\
From a task window or the desktop cli (from the\n\
task manager menu) type \"debugaif <image> <args>\"\n\
",
"",
"\
Continue:\n\
   Starts or restarts execution of the debuggee.\n\
\n\
   If any watchpoints are set the debuggee is\n\
   single stepped and the watchpoints checked\n\
   after each instruction.\n\
\n\
   If execution tracing is enabled the debuggee\n\
   is single stepped and the current location\n\
   displayed after each instruction or statement.\n\
\n\
   Press Shift-F12 to stop execution.\n\
",
"\
Single step:\n\
   Execute the debuggee one instruction or source\n\
   statement at a time.\n\
\n\
   The number of instructions or statements to be\n\
   executed may be specified in the single step\n\
   dialog box (default = 1).\n\
\n\
   The 'Step into procedures' option specifies\n\
   whether single stepping should continue into\n\
   procedures or whether procedure calls should\n\
   be treated as single instructions.\n\
",
"\
Call:\n\
   Call a procedure.\n\
\n\
   The name of the procedure is specified in the\n\
   call dialog box along with any arguments the\n\
   procedure may take.\n\
\n\
   Arguments are given in brackets after the\n\
   procedure name, arguments may be word sized\n\
   integer values or floating point values.\n\
\n\
   The return value will be placed in register R0\n\
   (or F0 for floating point return values).\n\
",
"\
Return:\n\
   Return from the procedure indicated in the\n\
   context dialog box (default = current\n\
   procedure), any newer stack frames are\n\
   discarded.\n\
\n\
   The return value which may be an integer or\n\
   floating point value may be specified in the\n\
   return dialog box.\n\
\n\
   If no return value is specified a default\n\
   value of 0 (or 0.0 for floating point values)\n\
   is used.\n\
",
"\
Breakpoint:\n\
   A breakpoint can be set on a source procedure,\n\
   a source line number, a low level symbol or code\n\
   address or on a particular SWI or window manager\n\
   event.\n\
\n\
   The 'Remove' icon removes a breakpoint. The\n\
   breakpoint may be specified in the same way as\n\
   used when setting it or as a breakpoint number\n\
   preceded by a '#' character.\n\
\n\
   'Remove all' removes all current breakpoints.\n\
\n\
   'List' lists all current breakpoints.\n\
",
"\
Watchpoint:\n\
   A watchpoint can be set\n\
   on a source variable or a memory address.\n\
\n\
   The 'Remove' icon removes a watchpoint. The\n\
   watchpoint may be specified in the same way as\n\
   used when setting it or as a watchpoint number\n\
   preceded by a '#' character.\n\
\n\
   'Remove all' removes all current watchpoints.\n\
\n\
   'List' lists all current watchpoints.\n\
",
"\
Trace:\n\
   'Execution' updates the source or disassembly\n\
   display after each instruction or source\n\
   statement is executed.\n\
\n\
   'Procedures' displays the name of each\n\
   procedure when it is called.\n\
\n\
   'Watchpoints' displays the values of\n\
   watchpoints as they change.\n\
\n\
   'Breakpoints', 'Event breaks' and 'SWI break'\n\
   display a message every time the respective\n\
   breakpoint occurs and then continue execution\n\
   without halting at the breakpoint.\n\
",
"\
Context:\n\
   The context dialog box allows you to change\n\
   the source or disassembly display to the\n\
   location associated with an earlier (or later)\n\
   stack frame.\n\
\n\
   'Out' moves out one frame on the stack.\n\
\n\
   'In' moves in one frame on the stack.\n\
\n\
   'Home' returns to the current execution\n\
    location.\n\
",
"\
Display:\n\
   Display one of the following:\n\
\n\
   Source text\n\
   Source variable information\n\
   Low level symbol information\n\
   Symbolic instruction disassembly\n\
   Memory contents\n\
   Procedure arguments\n\
   Local variables\n\
   ARM registers\n\
   Floating point registers\n\
   Stack backtrace information\n\
",
"\
Change:\n\
   Change variable, register or memory contents\n\
\n\
   The name or address of the object to be\n\
   changed are specified in the 'Name' icon.\n\
\n\
   The new contents are specified in the\n\
   'Contents' icon. For variables the contents\n\
   icon contains an integer or FP constant, for\n\
   registers if contains a low level expression\n\
   or FP constant and for memory contents it\n\
   contains a comma separated list of low level\n\
   expressions.\n\
",
"\
Log:\n\
   Logs any output to the debugger output window\n\
   to the file specified in the 'Filename' icon.\n\
   Any previous log file is closed. If the file\n\
   already exists its contents are overwritten.\n\
   The log file is closed when the debugging\n\
   session is terminated.\n\
",
"\
Find:\n\
   Find a string, a sequence of bytes or a\n\
   sequence of words in application workspace.\n\
\n\
   A string is specified without quotes.\n\
\n\
   A sequence of bytes or words is specified as a\n\
   comma separated list of low level expressions.\n\
\n\
   All occurances of the string, byte or word\n\
   sequence are reported.\n\
"
};

char *get_help_line(int line)
{
    char *s, *d;

    s = help_text;
    if (!line) return "";
    while (--line) if (*s) while (*s++ != '\n');
    if (!*s) return "";
    line_buffer[0] = ' ';
    line_buffer[1] = ' ';
    d = line_buffer + 2;
    while ((*d = *s++) != '\n') d++;
    *d = 0;
    return line_buffer;
}
