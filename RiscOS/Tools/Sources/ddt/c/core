#include "defs.h"
#include "os.h"
#include "asd.h"
#include "lowlevel.h"
#include "control.h"
#include "lib.h"
#include "core.h"

int *save_core(void)
{
    int *dwp, *wp, *limit;
    int v, n;
    int *dump;

    dwp = wp = (int *)0x8000;
    limit = (int *)os_changeenvironment(N_MemoryLimit_Handler, 0, 0, 0);
/*
    os_write0("Compressing application space\r\n");
    os_write0("Initial size = ");
    wrhex((int)limit - 0x8000);
    os_write0("\r\n");
*/
    while (wp < limit) {
        v = *wp;
        n = 1;
        while (++wp < limit && *wp == v) n++;
        if (v == 0 || v == 0x6c6d6e6f) {
            v = v ? 0x6c6d6e00 : 0x6c6d6d00;
            if (n < 256) {
                *dwp++ = v | n;
            } else {
                *dwp++ = v;
                *dwp++ = n;
            }
        } else if (n >= 2 || (v & 0xfffffc00) == 0x6c6d6c00) {
            if (n < 256) {
                *dwp++ = 0x6c6d6f00 | n;
            } else {
                *dwp++ = 0x6c6d6f00;
                *dwp++ = n;
            }
            *dwp++ = v;
        } else
            *dwp++ = v;
    }
    *dwp++ = 0;
/*
    os_write0("Final size = ");
    wrhex((int)dwp - 0x8000);
    os_write0("\r\n");
*/
    dump = malloc((int)dwp - 0x8000, "Compressed App");
    memcpy(dump, (char *)0x8000, (int)dwp - 0x8000);
    return dump;
}

void rest_core(int *dump)
{
    int *dwp, *wp;
    int v, n, i;

    dwp = dump;
    wp = (int *)0x8000;
    while (v = *dwp++) {
        if ((v & 0xfffffc00) == 0x6c6d6c00) {
            n = v & 0xff;
            if (!n)
                n = *dwp++;
            switch ((v >> 8) & 0x0f) {
                case 0x0d: v = 0; break;
                case 0x0e: v = 0x6c6d6e6f; break;
                case 0x0f: v = *dwp++; break;
            }
            for (i = 0; i < n; i++)
                *wp++ = v;
        } else
            *wp++ = v;
    }
    free(dump);
}
