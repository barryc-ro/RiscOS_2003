#include "defs.h"
#include "quickdraw.h"
#include "window.h"
#include "os.h"
#include "asd.h"
#include "lowlevel.h"
#include "control.h"
#include "lib.h"
#include "ddt.h"
#include "bin.h"
#include "templates.h"

typedef struct Template {
    int offset, size;
    int version;
    char identifier[12];
} Template;

struct TemplateFile {
    int unused[4];
    Template templates[1];
};

Window *get_template(TemplateFile *tf, char *name)
{
    Template *t;
    Window *w;
    char *s;
    int i;
    char text_buffer[16];

    text_buffer[12] = 0;
    t = tf->templates;
    while (t->offset) {
        if (cistrcmp(name, t->identifier) == 0) {
            w = malloc(t->size, "Template");
            memcpy(w, (char *)tf + t->offset, t->size);
            if (!(w->flags & WF_NEWFORMAT))
                fatal(OLD_FORMAT_WINDOW, "DDT: Old format window template");
            if (w->flags & WF_TITLE) {
                s = (char *)w + (int)(w->buffer);
                if (!(w->title_flags & IF_INDIRECTED))
                    memcpy(s = text_buffer, &(w->buffer), 12);
                zero_terminate(s);
                w->buffer = strcpy(salloc(strlen(s) + 1), s);
            }
            for (i = 0; i < w->nicons; i++) {
                if (IF_BUTTON(w->icons[i].flags) == B_WRITEABLE) {
                    if (!(w->icons[i].flags & IF_INDIRECTED))
                        w->icons[i].bufflen = 12;
                    w->icons[i].buffer = salloc(w->icons[i].bufflen + 1);
                    w->icons[i].buffer[0] = 0;
                    continue;
                }
                s = (char *)w + (int)(w->icons[i].buffer);
                if (!(w->icons[i].flags & IF_INDIRECTED))
                    memcpy(s = text_buffer, &(w->icons[i].buffer), 12);
                zero_terminate(s);
                w->icons[i].buffer = strcpy(salloc(strlen(s) + 1), s);
                if (w->icons[i].flags & IF_INDIRECTED) {
                    if ((int)w->icons[i].validstring <= 0) {
                        w->icons[i].validstring = 0;
                    } else {
                        s = (char *)w + (int)(w->icons[i].validstring);
                        zero_terminate(s);
                        w->icons[i].validstring =
                                             strcpy(salloc(strlen(s) + 1), s);
                    }
                }
            }
            return w;
        }
        t++;
    }
    fatal(NO_TEMPLATE, "DDT: Template not found");
    return 0;
}

void load_templates(void)
{
    Template *t;
    TemplateFile *tf;

    tf = (TemplateFile *)&template_base;
    t = tf->templates;
    while (t->offset) {
        zero_terminate(t->identifier);
        t++;
    }
}
