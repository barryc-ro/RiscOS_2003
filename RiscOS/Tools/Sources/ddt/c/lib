#include "defs.h"
#include "os.h"
#include "asd.h"
#include "lowlevel.h"
#include "control.h"
#include "output.h"
#include "errors.h"
#include "lib.h"

int isstring(char *s)
{
    int i, r;

    if (s == 0)
        return 0;

    i = 0;
    r = 1;
    dataaccessflag = 0;
#ifdef PRAGMA_C1
    enable_access = 1;
#endif
    while (s[i]) {
        if (dataaccessflag || ((s[i]<32 || s[i]==127) &&
                s[i]!='\n' && s[i]!='\r' && s[i]!='\t')) {
            r = 0;
            break;
        }
        i++;
        if (i > 80)
            break;
    }
#ifdef PRAGMA_C1
    enable_access = 0;
#endif
    dataaccessflag = 1;
    if (i < 2 || i > 80)
        r = 0;
    return r;
}

char digits[36] = "0123456789abcdefghijklmnopqrstuvwxyz";

char *write_hex(char *s, int w, int n)
{
    int i;

    for (i = n - 1; i >= 0; i--) {
        s[i] = digits[w & 0x0f];
        w >>= 4;
    }
    s[n] = 0;
    return s + n;
}

int quotechar(int c)
{
    switch(c) {
        case '\n': c = 'n'; break;
        case '\t': c = 't'; break;
        case '\v': c = 'v'; break;
        case '\b': c = 'b'; break;
        case '\r': c = 'r'; break;
        case '\f': c = 'f'; break;
        case '\a': c = 'a'; break;
        default: c = c + '@'; break;
    }
    return c;
}

char *add_str(char *s, char *add)
{
    int c;

    while ((c = *add++) != 0) {
        if (c && c < 32) {
            c = quotechar(c);
            if (c >='a')
               *s++ = '\\';
            else
               *s++ = '|';
        }
        *s++ = c;
    }
    return s;
}

char *write_uns(char *s, unsigned w, int n, int base)
{
    int i;

    i = n;
    do {
        if (--i < 0)
            break;
        s[i] = digits[w % base];
        w /= base;
    } while (w);
    while (--i >= 0)
        s[i] = base == 10 ? ' ' : '0';
    s[n] = 0;
    return s + n;
}

char *write_uns_lj(char *s, unsigned w, int base)
{
    if (w >= base)
        s = write_uns_lj(s, w / base, base);
    *s++ = digits[w % base];
    return s;
}

void wrhex(int w)
{
    static char hex_buff[12];

    write_hex(hex_buff, w, 8);
    os_write0(hex_buff);
}

char *write_hex0(char *s, int w)
{
    int n;

    n = 2;
    if (w & 0xff00)
        n = 4;
    if (w & 0xffff0000)
        n = 8;
    return write_hex(s, w, n);
}

void cvt_str(char *cs)
{
    int i;

    i = *cs;
    while (i--) {
       *cs = *(cs + 1);
       cs++;
   }
   *cs = 0;
}

char *strcpy(char *cs, char *ct)
{
    char *s;

    s = cs;
    while ((*s++ = *ct++) != 0);
    return cs;
}

int strlen(char *cs)
{
    char *s;

    s = cs;
    while (*cs) cs++;
    return cs - s;
}

void memmove(void *s1, const void *s2, int len)
{
    char *p1 = (char *) s1;
    char *p2 = (char *) s2;

    if (p1 > p2)
    {
        p1 += len;
        p2 += len;

        while (len)
        {
            *--p1=*--p2;
            len--;
        }
    }
    else if (p1 < p2)
    {
        while (len)
        {
            *p1++=*p2++;
            len--;
        }
    }
}

char *strcat(char *s, char *t)
{
    strcpy(s + strlen(s), t);
    return s;
}

int cistrcmp(char *s, char *t)
{
    for ( ; ((*s | 0x20) == (*t | 0x20)) || (*s < ' ' && *t < ' '); s++, t++)
        if (*s < ' ')
            return 0;
    return 1;
}

int strcmp(char *s, char *t)
{
    for (; (*s == *t) || (*s < ' ' && *t < ' '); s++, t++)
        if (*s < ' ')
            return 0;
    return 1;
}

int strncmp(const char *a, const char * b, int n)
                                        /* as strcmp, but at most n chars */
{
    while (n-- > 0)
    {   char c1 = *a++, c2 = *b++;
        int d = c1 - c2;
        if (d != 0) return d;
        if (c1 == 0) return 0;     /* no need to check c2 */
    }
    return 0;
}

int match(char *pat, char *str)
{
    do {
        if (*pat=='*') {
            while (*++pat == '*');
            while (*str) {
                if (!match(pat, str)) return 0;
                str++;
            }
        }
        if (*str == '\0') return *pat;
        if (*pat != '#' && (*pat | 0x20) != (*str | 0x20)) return 1;
        pat++; str++;
    } while (1);
}

void munge_filename(char *s)
{
    char *extn, *root, c;

    extn = root = s;
    while ((c = *s++) != 0) {
        if (c == ':')
            extn = root = s;
        if (c == '.') {
            root = extn;
            extn = s;
        }
    }
    if (root != extn) {
        c = *extn | 0x20;
        if (!*(extn + 1) && (c == 'h' || c == 'c' || c == 'f' || c == 'p')) {
            extn--; s--;
            do {
                *--s = *--extn;
            } while (extn > root);
            *root = 'o';
            *(root + 1) = '.';
        }
    }
}

char *zero_terminate(char *cs)
{
    char *s;

    s = cs;
    while (*s >= ' ') s++;
    *s = 0;
    return cs;
}

static int base_digit(char c, int base)
{
    if (c >= '0' && c <= '9') {
        if (c - '0' >= base)
            return -1;
        return c - '0';
    }
    if (c >= 'a') c -= 'a' - 'A';
    if (c >= 'A' && c <= 'Z') {
        if (c - 'A' + 10 >= base)
            return -1;
        return c - 'A' + 10;
    }
    return -1;
}

int atoi(char **ps, int base, int *res, int flags)
{
    int n;
    int d;
    int sign;
    char *s;

    n = 0;
    s = *ps;
    while (*s == ' ') s++;
    sign = 0;
    if (*s == '+' || *s == '-') {
        if (*s == '-')
            sign = 1;
        while (*++s == ' ');
    }
    d = base_digit(*s, base);
    if (!(flags & 2) && d < 0) return ERR_INTEXPECTED;
    while (d >= 0) {
        n = n * base + d;
        s++;
        d = base_digit(*s, base);
    }
    while (*s == ' ') s++;
    *ps = s;
    if (sign) n = -n;
    *res = n;
    if ((flags & 1) && *s)
        return ERR_INTTERM;
    return 0;
}

unsigned extract_digit(unsigned *words, int d)
{
    return (words[2 - (d >> 3)] >> ((d & 7) << 2)) & 0x0f;
}

void set_digit(unsigned *words, int d, int v)
{
    words[2 - (d >> 3)] |= (v & 0x0f) << ((d & 7) << 2);
}

void fatal(int errno, char *errmsg)
{
    OS_Error_Block eb;

    eb.errno = errno;
    strcpy(eb.errmsg, errmsg);
    os_generateerror(&eb);
}

void error(char *errmsg)
{
    output_line(errmsg);
}

void msg(char *s)
{
    os_writec(4); os_writec(30);
    os_write0(s);
    os_readc();
    os_writec(5);
}

int is_abs_fname(char *name)
{
    int c;

    while (c = *name++) {
        if (c == ':' || c == '$' || c == '&' || c == '%' || c == '<')
            return 1;
    }
    return 0;
}

#ifdef SELF_CHECKS
/* Allocate memory ensuring that the returned block can be safely protected
 * 1) Returned block must start on a page boundary
 * 2) Returned block must cover an exact no. of pages
 * Bodge this by rounding the amount to be allocated up to the nearest 32k
 * allocating 32k more than this and rounding the returned address up to
 * the nearest 32k.
 */
void *page_alloc(int size)
{
    int p;

    size = (size + 32767) & ~32767;
    p = (int)malloc(size + 32768, "protected page");
    p = (p + 32767) & ~32767;
    return (void *)p;
}

void prot_mem(void *p, int n)
{
    int pages;
    int size;
    int i;
    MemInfo *entries;

    entries = malloc(sizeof(MemInfo) + sizeof(int), "prot_mem entries");
    i = os_readmemmapinfo();
    size = i & 0xffff;
    pages = (i >> 16) & 0xffff;
    entries[1].pageno = -1;
    for (i = 0; i < pages; i++) {
        entries->pageno = i;
        os_readmemmapentries(entries);
        if (entries->address >= (int)p && entries->address < (int)p + n) {
            entries->protection = PROT_RO;
            os_setmemmapentries(entries);
        }
    }
}

void unprot_mem(void *p, int n)
{
    int pages;
    int size;
    int i;
    MemInfo *entries;

    entries = malloc(sizeof(MemInfo) + sizeof(int), "unprot_mem entries");
    i = os_readmemmapinfo();
    size = i & 0xffff;
    pages = (i >> 16) & 0xffff;
    entries[1].pageno = -1;
    for (i = 0; i < pages; i++) {
        entries->pageno = i;
        os_readmemmapentries(entries);
        if (entries->address >= (int)p && entries->address < (int)p + n) {
            entries->protection = 0;
            os_setmemmapentries(entries);
        }
    }
}
#endif

char *write_int(char *s, int w, int base)
{
    unsigned int u;

    u = w;
    if (base == 10 && w < 0) {
        u = -w;
        *s++ = '-';
    }
    s = write_uns_lj(s, u, base);
    *s = 0;
    return s;
}
