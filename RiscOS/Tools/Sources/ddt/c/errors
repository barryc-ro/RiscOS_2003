#include "defs.h"
#include "os.h"
#include "asd.h"
#include "lowlevel.h"
#include "control.h"
#include "lib.h"
#include "errors.h"

static char *errmess(int err)
{
  switch (err) {
    case SYMBOL_NOT_FOUND:   return "Symbol not found";
    case AMBIGUOUS:          return "Ambiguous reference";
    case NOTFOUND:           return "Name not found";
    case ERR_SOURCENOTFOUND: return "No source information for context";
    case ERR_LINENOTFOUND:   return "No source information for source line";
    case ERR_NOTAPROC:       return "Not a procedure";
    case ERR_NOSUCHBREAK:    return "No such breakpoint";
    case ERR_BREAK_SET:      return "Error setting breakpoint";
    case ERR_OPEN_SOURCE:    return "Error opening source file";
    case ERR_DBGTABLE:       return "Badly formatted debugging tables";
    case ERR_ACCESS:         return "Error accessing memory";
    case ERR_INTERNAL:       return "Internal error";
    case ERR_STACKEMPTY:     return "No outer frames on stack";
    case ERR_LVALUE:         return "Not an lvalue";
    case ERR_WATCH_SET:      return "Error setting watchpoint";
    case ERR_NOSUCHWATCH:    return "No such watchpoint";
    case ERR_NOVARINFO:      return "No argument information";
    case ERR_NOLOCALS:       return "No local variables in current context";
    case ERR_NOARGS:         return "No arguments in current context";
    case ERR_READSOURCE:     return "Unable to read source";
    case ERR_STACKHOME:      return "Stack at execution level";
    case ERR_NUMTOOBIG:      return "Number too big";
    case ERR_BADBASE:        return "Malformed base";
    case ERR_NOFILE:         return "No filename specified";
    case ERR_TOOMANYARGS:    return "Too many arguments";
    case ERR_RO_BASE:        return "RO area base not on page boundary, first page not protected";
    case ERR_RO_LIMIT:       return "RO area limit not on page boundary, last page not protected";
    case ERR_LOWEXPR:        return "Error in low-level expression";
    case ERR_LOWTERM:        return "Error in low-level expression: incorrectly terminated";
    case ERR_FPEXPECTED:     return "Floating point constant expected";
    case ERR_FRACTEXPECTED:  return "Fractional part expected after '.'";
    case ERR_FPTERM:         return "Error in floating point constant: incorrectly terminated";
    case ERR_INTEXPECTED:    return "Integer constant expected";
    case ERR_INTTERM:        return "Error in integer constant: incorrectly terminated";
    case ERR_PROCEXPECTED:   return "Procedure or module name expected";
    case ERR_LINEEXPECTED:   return "Line number, procedure name or module name expected";
    case ERR_VARTERM:        return "Error in variable specification: incorrectly terminated";
    case ERR_VAREXPECTED:    return "Variable name expected";
    case ERR_BADARMREG:      return "Invalid ARM register, specify R0-R15";
    case ERR_BADFPREG:       return "Invalid FP register, specify F0-F7";
    case ERR_BADREG:         return "Invalid register, specify R0-R15, F0-F7, Sl, FP, IP, SP, LR or PC";
    case ERR_CHANGECONTENTS: return "No contents given in change dialog";
    case ERR_CHANGETERM:     return "Error in contents: incorrectly terminated";    case ERR_NOBREAKNO:      return "No breakpoint number after '#'";
    case ERR_CONTEXTTERM:    return "Error in context specification: incorrectly terminated";
    case ERR_NOWATCHNO:      return "No watchpoint number after '#'";
    case ERR_RPARENEXPECTED: return "Error in argument list: ')' expected";
    case ERR_FINDTERM:       return "Error in find list: incorrectly terminated";
    case ERR_OPENLOG:        return "Error opening log file";
    case ERR_ASSGOP:         return "Illegal assignment operator";
    case ERR_SYNTAX:         return "Syntax error in expression";
    case ERR_BRACKETS:       return "Missing ')' in expression";
    case ERR_SELECT:         return "Fieldname expected after '.'";
    case ERR_SQBRACKETS:     return "Missing ']'";
    case ERR_TYPEWARN:       return "Warning: Type mismatch";
    case ERR_DIVBYZERO:      return "Division by zero";
    case ERR_TYPE:           return "Type mismatch";
    case ERR_BADFIELD:       return "Unknown structure field name";
    case ERR_BOUNDS:         return "Array index out of bounds";
    case ERR_TYPESIZE:       return "Can't determine size of type";
    case ERR_NOACT:          return "Procedure not currently active";
    case ERR_NOSUCHSWI:      return "SWI name not found";
    case ERR_CHOICES:        return "Unable to save options file <DDT$Dir>.Choices";
    case ERR_VOIDACCESS:     return "Cannot access void values";
    case ERR_REG_ADDR:       return "Cannot take address of register";
    default:                 return "Unknown error";
  }
}

void report(int err)
{
    if (err)
        error(errmess(err));
}
