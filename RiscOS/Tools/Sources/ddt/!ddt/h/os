typedef struct OS_File_Block {
    int r2, r3, r4, r5;
} OS_File_Block;

typedef struct OS_Error_Block {
    int   errno;
    char  errmsg[252];
} OS_Error_Block;

typedef struct SpriteArea {
    int size;
    char sprites[1];
} SpriteArea;

typedef struct Rect {
    int minx, miny, maxx, maxy;
} Rect;

typedef struct Icon {
    Rect r;
    int flags;
    char *buffer;
    char *validstring;
    int bufflen;
} Icon;

typedef struct Window {
    Rect r;
    int scx, scy;
    int behind;
    int flags;
    char frame;
    char title_bgrnd;
    char work_fgrnd;
    char work_bgrnd;
    char scroll_bgrnd;
    char scroll_fgrnd;
    char title_input_bgrnd;
    char unused;
    Rect ex;
    int title_flags;
    int work_flags;
    int sprite_area;
    short min_width;
    short min_height;
    char *buffer;
    char *validstring;
    int bufflen;
    int nicons;
    Icon icons[1];
} Window;

#define E_NULL                  0
#define E_REDRAW                1
#define E_OPEN                  2
#define E_CLOSE                 3
#define E_LEAVING_WINDOW        4
#define E_ENTERING_WINDOW       5
#define E_CLICK                 6
#define E_DRAG_BOX              7
#define E_KEY                   8
#define E_MENU                  9
#define E_SCROLL                10
#define E_LOSE_CARET            11
#define E_GAIN_CARET            12
#define E_USER_MESSAGE          17
#define E_USER_MESSAGE_RECORDED 18
#define E_USER_MESSAGE_ACK      19

typedef struct EventOpen {
    int window_handle;
    Rect vis_rect;
    int scx, scy;
    int behind_handle;
} EventOpen;

#define MB_ADJUST 1
#define MB_MENU   2
#define MB_SELECT 4

typedef struct EventClick {
    int screen_x, screen_y;
    int buttons;
    int window_handle;
    int icon_handle;
} EventClick;

typedef struct EventKey {
    int window_handle;
    int icon_handle;
    int dx, dy;
    int flags;
    int index;
    int ch;
} EventKey;

typedef struct EventScroll {
    int window_handle;
    Rect vis_rect;
    int scx, scy;
    int behind_handle;
    int dx, dy;
} EventScroll;

typedef struct EventCaret {
    int window_handle;
    int icon_handle;
    int dx, dy;
    int flags;
    int index;
} EventCaret;

#define MESSAGE_QUIT            0
#define MESSAGE_DATASAVE        1
#define MESSAGE_DATASAVEACK     2
#define MESSAGE_DATALOAD        3
#define MESSAGE_DATALOADACK     4

typedef struct EventMessage {
    int size;
    int sender_handle;
    int my_ref;
    int your_ref;
    int action;
    int data[1];
} EventMessage;

typedef union WimpEvent {
    int          window_handle; /* E_REDRAW, E_CLOSE, */
                                /* E_LEAVING_WINDOW, E_ENTERING_WINDOW */
    EventOpen    open;          /* E_OPEN */
    EventClick   click;         /* E_CLICK */
    Rect         drag;          /* E_DRAG_BOX */
    EventKey     key;           /* E_KEY */
    int          menu[10];      /* E_MENU */
    EventScroll  scroll;        /* E_SCROLL */
    EventCaret   caret;         /* E_LOSE_CARET, E_GAIN_CARET */
    EventMessage msg;           /* E_USER_MESSAGE, E_USER_MESSAGE_RECORDED */
                                /* E_USER_MESSAGE_ACK */
    char         generic[256];
} WimpEvent;

#define MF_LAST 128

typedef struct DDT_Menu {
    char title[12];
    char title_fgrnd, title_bgrnd;
    char work_fgrnd, work_bgrnd;
    int width, height;
    int gap;
    struct menu_item {
        unsigned menu_flags;
        int submenu;
        unsigned icon_flags;
        char text[12];
    } items[3];
} DDT_Menu;

#define OS_FILE_READ_ATTR  17
#define OS_FILE_WRITE_LOAD  2
#define OS_FILE_LOAD       16
#define OS_FILE_MAKEERROR  19

extern int os_file(int action, char *name, OS_File_Block *b);

extern int xos_file(int action, char *name, OS_File_Block *b);

extern OS_Error_Block *os_delete(char *name);

extern void os_generateerror(OS_Error_Block *b);

extern void os_exit(void);

extern void os_gstrans(char *str, char *buffer, int len_and_flags);

extern OS_Error_Block *xos_cli(char *cmd);

#define OSMODULE_LOAD    1
#define OSMODULE_DELETE  4
#define OSMODULE_LOOKUP 18

extern OS_Error_Block *xos_module(int reason, char *module);

extern OS_Error_Block *xwimp_starttask(char *cmd);

extern int wimp_initialise(char *task_name);

extern void wimp_closedown(int task);

extern int wimp_currentslot(int size);

extern void wimp_mergesprites(char *name);

extern int wimp_createicon(int window_handle, Icon *icon);

extern int os_readmonotonictime(void);

extern void wimp_seticonstate(int window_handle, int icon_handle,
                             int eor_mask, int bic_mask);

extern int wimp_pollidle(int mask, WimpEvent *event, int time);

extern int wimp_poll(int mask, WimpEvent *event);

#define WF_CLOSE       (1 << 25)
#define WF_TITLE       (1 << 26)
#define WF_VSCROLL     (1 << 28)
#define WF_ADJUST      (1 << 29)
#define WF_HSCROLL     (1 << 30)
#define WF_NEWFORMAT   (0x80000000)

#define IF_TEXT          (1 << 0)
#define IF_SPRITE        (1 << 1)
#define IF_BORDER        (1 << 2)
#define IF_HCENTRED      (1 << 3)
#define IF_VCENTRED      (1 << 4)
#define IF_FILLED        (1 << 5)
#define IF_INDIRECTED    (1 << 8)
#define IF_RJUSTIFY      (1 << 9)
#define IF_HALFSIZE      (1 << 11)
#define IF_INVERTED      (1 << 21)
#define IF_SHADED        (1 << 22)
#define IF_DELETED       (1 << 23)
#define IF_BUTTON(f)     (((f) >> 12) & 0x0f)
#define IF_ESG(f)        (((f) >> 16) & 0x0f)
#define IF_BACKGROUND(f) (((f) >> 28) & 0x0f)
#define IF_FOREGROUND(f) (((f) >> 24) & 0x0f)

#define B_CLICKONCE      3
#define B_MENU           9
#define B_RADIO          11
#define B_WRITEABLE      15

#define ERROR_OK          1
#define ERROR_CANCEL      2
#define ERROR_HIGHLIGHT   4
#define ERROR_CMD         8
#define ERROR_RETURN     16
#define ERROR_SELECT     32

extern void wimp_reporterror(OS_Error_Block *error, int flags, char *name);

extern int wimp_sendmessage(int reason, EventMessage *msg, int task);

extern void wimp_createmenu(DDT_Menu *m, int x, int y);

extern int wimp_createwindow(Window *w);

extern void wimp_openwindow(EventOpen *open);

extern void wimp_closewindow(int handle);

extern void wimp_getpointerinfo(EventClick *mouse);

extern void wimp_seticonposition(int window_handle, int icon_handle, int pos);

extern void wimp_processkey(int ch);

extern int wimp_readsysinfo(int item);
