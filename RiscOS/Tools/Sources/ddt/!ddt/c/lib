#include "os.h"

int lwm, hwm;

char *strcpy(char *cs, char *ct)
{
    char *s;

    s = cs;
    while ((*s++ = *ct++) != 0);
    return cs;
}

void *memcpy(void * s1, void * s2, int n)
{
    char *cs1=s1, *cs2=s2;

    while (n--)
        *cs1++ = *cs2++;
    return s1;
}

int strlen(char *cs)
{
    char *s;

    s = cs;
    while (*cs) cs++;
    return cs - s;
}

int cistrcmp(char *s, char *t)
{
    for ( ; (*s | 0x20) == (*t | 0x20); s++, t++)
        if (!*s)
            return 0;
    return 1;
}

char *zero_terminate(char *cs)
{
    char *s;

    s = cs;
    while (*s >= ' ') s++;
    *s = 0;
    return cs;
}

void fatal(int errno, char *errmsg)
{
    OS_Error_Block eb;

    eb.errno = errno;
    strcpy(eb.errmsg, errmsg);
    os_generateerror(&eb);
}

void error(int errno, char *errmsg)
{
    OS_Error_Block eb;

    eb.errno = errno;
    strcpy(eb.errmsg, errmsg);
    wimp_reporterror(&eb, ERROR_OK | ERROR_CMD, "DDT");
}

void *alloc(int n)
{
    void *p;

    n = (n + 3) & ~3;
    p = (void *)lwm;
    lwm += n;
    if (lwm > hwm)
        fatal(0x1000, "Out of memory");
    return p;
}

void *copywords(void *s, void *t, int n)
{
    int *is, *it;

    is = s;
    it = t;
    do {
        *is++ = *it++;
        n -= 4;
    } while (n > 0);
    return s;
}
