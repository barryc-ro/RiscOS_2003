#include "os.h"
#include "lib.h"
#include "templates.h"

typedef struct Template {
    int offset, size;
    int version;
    char identifier[12];
} Template;

struct TemplateFile {
    int unused[4];
    Template templates[1];
};

Window *get_template(TemplateFile *tf, char *name)
{
    Template *t;
    Window *w;
    char *s;
    int i;
    char text_buffer[16];

    text_buffer[12] = 0;
    t = tf->templates;
    while (t->offset) {
        if (cistrcmp(name, t->identifier) == 0) {
            w = alloc(t->size);
            copywords(w, (char *)tf + t->offset, t->size);
            if (!(w->flags & WF_NEWFORMAT))
                fatal(0x1000, "Old format window");
            if (w->flags & WF_TITLE) {
                if (w->title_flags & IF_INDIRECTED) {
                    s = (char *)w + (int)(w->buffer);
                    zero_terminate(s);
                    w->buffer = strcpy(alloc(strlen(s) + 1), s);
                }
            }
            for (i = 0; i < w->nicons; i++) {
                if (IF_BUTTON(w->icons[i].flags) == B_WRITEABLE) {
                    w->icons[i].buffer = alloc(w->icons[i].bufflen + 1);
                    w->icons[i].buffer[0] = 0;
                    continue;
                }
                if (w->icons[i].flags & IF_INDIRECTED) {
                    s = (char *)w + (int)(w->icons[i].buffer);
                    zero_terminate(s);
                    w->icons[i].buffer = strcpy(alloc(strlen(s) + 1), s);
                    if ((int)w->icons[i].validstring <= 0) {
                        w->icons[i].validstring = 0;
                    } else {
                        s = (char *)w + (int)(w->icons[i].validstring);
                        zero_terminate(s);
                        w->icons[i].validstring =
                                             strcpy(alloc(strlen(s) + 1), s);
                    }
                }
            }
            return w;
        }
        t++;
    }
    fatal(0x1000, "Template not found");
    return 0;
}

TemplateFile *load_templates(char *name)
{
    OS_File_Block fb;
    Template *t;
    int object;
    TemplateFile *tf;

    object = os_file(OS_FILE_READ_ATTR, name, &fb);
    if (object != 1) {
        fb.r2 = object;
        os_file(OS_FILE_MAKEERROR, name, &fb);
    }
    tf = alloc(fb.r4);
    fb.r2 = (int)tf;
    fb.r3 = 0;
    os_file(OS_FILE_LOAD, name, &fb);
    t = tf->templates;
    while (t->offset) {
        zero_terminate(t->identifier);
        t++;
    }
    return tf;
}
