/*
 * unmodsqz - reverses the effect of modsqz
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>

#include "bytesex.h"

#include "unmodsqz.h"

/*
 *
 * This source code is a translation of the assembler source code that you will find
 * elsewhere in this component.
 *
 */

enum constants {
  nibslong = 7,
  nibsshort = 14 - nibslong,

  minshort = 2 + nibslong,
  minlong = 2,

  init_compressed_bit = (int32) 0x80000000,
  final_invincible_bit = (int32) 0x80000000
};

enum header_fields {
  entry_start,
  entry_init,
  entry_final,
  entry_service,
  entry_title,
  entry_help
};

typedef struct {
  int32 decoded_size;
  int32 encoded_size;
  int32 tables_size;
  int32 nshorts;
  int32 nlongs;
} module_comp_data_table;

#define absolute_address(ptr, offset) ((void *) (((char *)(ptr)) + (offset)) )
/*
static void *(absolute_address)(void *ptr, int32 offset)
{
  return ((char *)ptr) + offset;
}
*/

error_code unsqueeze_module(
  int32 *ptr,
  void **output,
  size_t *output_len)
{
  error_code e = ok;
  int32 init = bytesex_hostval(ptr[entry_init]) ^ init_compressed_bit;

  if (init & init_compressed_bit) {
    e = errcode_NOT_SQUEEZED;
  }
  else {
    module_comp_data_table t;
    int32 *module;
    unsigned char *encoded_hwm;
    unsigned char *encoded_lwm;
    size_t dt_size = sizeof(module_comp_data_table);
    void *void_table_ptr = absolute_address(ptr, init - dt_size);
    int32 *data_table_end = void_table_ptr;
    module_comp_data_table *pt = void_table_ptr;

    /* Take a copy of the information table at the end of the module */
    t.decoded_size = bytesex_hostval(pt->decoded_size);
    t.encoded_size = bytesex_hostval(pt->encoded_size);
    t.tables_size = bytesex_hostval(pt->tables_size);
    t.nshorts = bytesex_hostval(pt->nshorts);
    t.nlongs = bytesex_hostval(pt->nlongs);

    encoded_hwm = absolute_address(data_table_end, -t.tables_size);
    encoded_lwm = absolute_address(encoded_hwm, -t.encoded_size);

    *output_len = (size_t) t.decoded_size;
    *output = module = malloc(*output_len);
    if (module == NULL) {
      e = errcode_NO_MEM;
    }
    else {
      int32 shortlong_size = (t.nshorts + t.nlongs) * 4;
      int32 *exptable = malloc((size_t) shortlong_size);

      if (exptable == NULL) {
        e = errcode_NO_MEM;
        free(module);
      }
      else {
        int32 *decoded_hwm = absolute_address(module, t.decoded_size);
        unsigned char *tables_lwm = encoded_hwm;
        int32 *decoded_table = exptable;
        int32 *decoded_shorts_table = exptable;
        int32 *decoded_longs_table = NULL;
        enum {
          doing_shorts,
          doing_longs,
          done_shorts_and_longs
        } decode_type = doing_shorts;

        while (decode_type == doing_shorts || decode_type == doing_longs) {
          /* this while loop represents the label decodeTab */
          int32 nels = (decode_type == doing_shorts) ? t.nshorts : t.nlongs;
          int32 prev_entry = -1;

          while (--nels >= 0) {
            int32 byte = *tables_lwm++, num;

            num = byte - 10;
            if (num >= 0) {
              /* greaterThan9 */
              if (byte < 92) {
                prev_entry += num;
                *decoded_table++ = prev_entry;
              }
              else {
                num = byte - 174;
                if (num >= 0) {
                  /* twoMore */
                  num = (*tables_lwm++) | (num << 16);
                  prev_entry += num | ((int32) (*tables_lwm++) << 8);
                  *decoded_table++ = prev_entry;
                }
                else {
                  /* oneMore */
                  prev_entry += ((byte - 92) << 8) | (*tables_lwm++);
                  *decoded_table++ = prev_entry;
                }
              }
            }
            else {
              /* literalOrOnes */
              if (byte == 0) {
                /* literal */
                num = *tables_lwm++;
                num |= ((int32) (*tables_lwm++) << 8);
                num |= ((int32) (*tables_lwm++) << 16);
                if (decode_type == doing_shorts) {
                  num |= ((int32) (*tables_lwm++) << 24);
                }
                prev_entry += num;
                *decoded_table++ = prev_entry;
              }
              else {
                /* ones */
                nels = (nels - byte) + 1;
                while (byte-- > 0) {
                  *decoded_table++ = ++prev_entry;
                }
              }
            }
          }

          switch (decode_type) {
            case doing_shorts:
              decode_type = doing_longs;
              decoded_longs_table = decoded_table;
              break;
            case doing_longs:
              decode_type = done_shorts_and_longs;
              break;
          }
        }

        /* label: decodedBothTabs
         * Matching up register/variable assignments to the assembler:
         * R12 = &shorts[0]                           => decoded_shorts_table
         * R11 = &longs[0]                            => decoded_longs_table
         * R10 = highest address + 1 of encoded data  => encoded_hwm
         * R9  = lowest address of encoded data       => encoded_lwm
         * R8  = highest address +1 of decoded data   => decoded_hwm
         */

        while (encoded_hwm > encoded_lwm) {
          int32 thisbyte = *--encoded_hwm;
          int32 byte;
          int32 nib, w[2];
          int i;

          for (i=0; i<2; thisbyte >>= 4, ++i) {
            nib = thisbyte & 0xF;

            if (nib >= minshort) {
              /* shortX */
              w[i] = decoded_shorts_table[((nib - minshort) << 8) | (*--encoded_hwm)];
            }
            else if (nib >= minlong) {
              /* longX */
              w[i] = decoded_longs_table[(nib - minlong) << 8 | (*--encoded_hwm)];
              w[i] = (w[i] << 8) | (*--encoded_hwm);
            }
            else if (nib == 0) {
              /* notlongX */
              w[i] = 0;
            }
            else {
              /* literalX */
              byte = *--encoded_hwm;
              byte |= (int32) (*--encoded_hwm) << 8;
              byte |= (int32) (*--encoded_hwm) << 16;
              byte |= (int32) (*--encoded_hwm) << 24;
              w[i] = byte;
            }
          }

          decoded_hwm[-1] = bytesex_hostval(w[1]);
          decoded_hwm[-2] = bytesex_hostval(w[0]);
          decoded_hwm -= 2;
        }

        /* doneDecode */
        free(exptable);

        if (module != decoded_hwm) {
          e = errcode_BAD_DECODE;
        }
      }
    }

    if (e == ok) {
      const int32 final = bytesex_hostval(module[entry_final]);
      module[entry_final] = bytesex_hostval(final & ~final_invincible_bit);
    }
  }

  return e;
}
