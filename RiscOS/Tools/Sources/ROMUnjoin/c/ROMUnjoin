#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef __riscos
  #include "swis.h"
  #include "kernel.h"
  #include "VersionNum"
#endif

void getimage(char name[], char **image, int *ilen);
void modDump(char *image, char *dirBase);
char *memfind(char *mem, char *find);
#ifdef __riscos
void hourglass(int state);
#endif

void doexit(void) {
#ifdef __riscos
  hourglass(0);
#endif
}

int main(int argc, char *argv[]) {
  char *iptr, dirBase[255] = "\0";
  int ilen;

  atexit(doexit);

  fprintf(stdout, "ROM Module Splitter V%s (%s)\n\n", Module_FullVersion, Module_Date);

  if (argc >= 3) {
    hourglass(1);
    sprintf(dirBase, argv[2]);
    getimage(argv[1], &iptr, &ilen);
    modDump(iptr, dirBase);
    hourglass(0);
  }
  else {
    fprintf(stdout, "Splits up a ROM image into its constituent modules.\n");
    fprintf(stdout, "Each module is saved into an individual file.\nIf there are more than 78 modules in the ROM, they go into subdirectories numbered 1, 2 etcetera.\n\n");
    fprintf(stdout, "Syntax:\tROMUnjoin <ROM image> <dir base>\n\n");
    exit(EXIT_FAILURE);
  }
}

void getimage(char name[], char **image, int *ilenptr)
{
  FILE *fptr;

  if ((fptr = fopen(name, "rb")) == NULL) {
    fprintf(stderr, "Can't open %s\n", name);
    exit(EXIT_FAILURE);
  }

  /* Find size of image */
  fseek(fptr, 0L, SEEK_END);
  *ilenptr = (size_t) ftell(fptr);
  fseek(fptr, 0L, SEEK_SET);

  /* Alloc & read entire image */
  if ((*image = malloc(*ilenptr)) == NULL) {
    fprintf(stderr, "Can't allocate %dK for image\n", (*ilenptr)/1024);
    exit(EXIT_FAILURE);
  }
  if (fread(*image, 1, *ilenptr, fptr) != *ilenptr) {
    fprintf(stderr, "Can't read %s\n", name);
    exit(EXIT_FAILURE);
  }

  fclose(fptr);
}

void modDump(char *image, char *dirBase) {
  char *dptr, *p, *endPtr;
  int modNum = 1, modSize, fileNum = 1, dirNum = 1;
  char fileName[256];
  _kernel_swi_regs regs;

  p = memfind(image, "UtilityModule");

  dptr = (char *)(((int)p-0x14) & ~3);
  while (*((int *)(dptr+0x10)) != p-dptr) {
    dptr -= 4;
  }

  dptr -= 4;

  sprintf(fileName, "cdir %s", dirBase);
  system(fileName);

  while (*((int *)dptr) != 0) {
    sprintf(fileName, "cdir %s.%d", dirBase, dirNum);
    system(fileName);
    fileNum = 1;
    while ((fileNum <= 70) && (*((int *)dptr) != 0)) {
      sprintf(fileName, "%s.%d.Module%03d\0", dirBase, dirNum, modNum);
      modSize = *(int *)(dptr);
      endPtr = (char *)(dptr + modSize + 5);

      regs.r[0] = 11;
      regs.r[1] = (int)&fileName;
      regs.r[2] = 4090;
      regs.r[4] = 0;
      regs.r[5] = (modSize - 1);
      _kernel_swi(OS_File, &regs, &regs);

      fprintf(stdout,"Writing %7d bytes from %8p to %8p to file %s.\n", modSize, dptr, endPtr, fileName);

      regs.r[0] = 10;
      regs.r[1] = (int)&fileName;
      regs.r[2] = 4090;
      regs.r[4] = (int)(dptr + 4);
      regs.r[5] = (int)endPtr;
      _kernel_swi(OS_File, &regs, &regs);

      dptr += *((int *)dptr);
      modNum++;
      fileNum++;
    }
    dirNum++;
  }
}

char *memfind(char *mem, char *find)
{
  char *c = mem;

  do
  {
    while (*c != *find)
      c++;

    if (!(strcmp(c, find)))
      return c;

    c++;
  } while (1);
}

#ifdef __riscos
/*
 * toggle hourglass
 */
void
hourglass(int state)
{
  if (state)
    _swix(Hourglass_On,0);
  else
    _swix(Hourglass_Off,0);
}
#endif
