#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    unsigned int  irq              : 1;
    unsigned int                   : 1;
    unsigned int  fiq              : 1;
    unsigned int  id               : 4;
    unsigned int  conformant       : 1;

    unsigned int  chunk_dir        : 1;
    unsigned int  interrupt_status : 1;
    unsigned int  width            : 2;
    unsigned int                   : 4;

    unsigned int                   : 8;

    /* Yuck - have to split this because bitfields can't be split over word
     * boundaries.
     */
    unsigned int  product_low_byte : 8;
    unsigned int  product_hi_byte  : 8;

    unsigned int  manufacturer     : 16;

    unsigned int  country          : 8;
} ECId;

typedef struct
{
    /* OS ID byte */
    union
    {
        struct
        {
            unsigned int  data : 4;
            unsigned int  os   : 3;
            unsigned int       : 1;
            unsigned int  size : 24;
        } bits;

        unsigned int  value;
    } first_word;

    unsigned int    start;
} Chunk;

typedef struct
{
    size_t  start_code;
    size_t  init_code;
    size_t  final_code;
    size_t  service_handler;
    size_t  title;
    size_t  help;
    size_t  help_command_table;
} ModuleHeader;

enum
{
    IntStatusPtrs_Size = 8
};

enum
{
    OS_Id_RISCOS,
    OS_Id_UNIX         = 2,
    OS_Id_Manufacturer = 6,
    OS_Id_Device
};

enum
{
    ChunkData_RISCOS_Loader,
    ChunkData_RISCOS_Module,
    ChunkData_RISCOS_BBC_ROM,
    ChunkData_RISCOS_Sprite
};

void  process_image (unsigned char *  image);

void  write_module (unsigned char *  module_start,
                    size_t           modules_size);


int  main (int  argc, char *  argv[])
{
    char *           image_file_name;
    FILE *           image_fp;
    size_t           image_file_size;
    unsigned char *  image;

    assert (sizeof (ECId) == 8);
    assert (sizeof (Chunk) == 8);

    if (argc < 2)
    {
        fprintf (stderr, "usage: podulesplit <filename>\n");
        exit (EXIT_FAILURE);
    }

    image_file_name = argv[1];
    image_fp = fopen (image_file_name, "rb");
    if (!image_fp)
    {
        fprintf (stderr, "couldn't open file %s\n", image_file_name);
        exit (EXIT_FAILURE);
    }

    fseek (image_fp, 0, SEEK_END);
    image_file_size = (size_t) ftell (image_fp);
    rewind (image_fp);

    image = malloc (image_file_size);
    if (!image)
    {
        fprintf (image_fp, "couldn't allocate memory\n");
        fclose (image_fp);
        exit (EXIT_FAILURE);
    }

    fread (image, sizeof (unsigned char), image_file_size, image_fp);

    fclose (image_fp);

    process_image (image);
    free (image);

    return EXIT_SUCCESS;
}

void  process_image (unsigned char *  image)
{
    ECId *  ec_id = (ECId *) image;

    if (ec_id->id != 0)
    {
        fprintf (stderr,
                 "Expansion cards with Simple ECIds don't have modules\n");
        return;
    }

    if (!ec_id->interrupt_status || !ec_id->chunk_dir)
    {
        fprintf (stderr, "ROM doesn't have chunk directory\n");
        return;
    }
    else
    {
        Chunk *  chunk = (Chunk *) (image + sizeof (ECId) + IntStatusPtrs_Size);


        while (chunk->first_word.value != 0)
        {
            switch (chunk->first_word.bits.os)
            {
                case OS_Id_RISCOS:
                    switch (chunk->first_word.bits.data)
                    {
                        case ChunkData_RISCOS_Loader:
                            printf ("Loader\n");
                            break;

                        case ChunkData_RISCOS_Module:
                            printf ("Relocatlable Module: ");
                            write_module (image + chunk->start,
                                          chunk->first_word.bits.size);
                            break;

                        case ChunkData_RISCOS_BBC_ROM:
                            printf ("BBC ROM\n");
                            break;

                        case ChunkData_RISCOS_Sprite:
                            printf ("Sprite\n");
                            break;

                        default:
                            printf ("Warning: found reserved data type %d\n",
                                    chunk->first_word.bits.data);
                            break;
                    }
                break;

                case OS_Id_UNIX:
                    printf ("UNIX data\n");
                    break;

                case OS_Id_Manufacturer:
                    printf ("Manufacturer specific data\n");
                    break;

                case OS_Id_Device:
                    printf ("Device data\n");
                    break;

                default:
                    printf ("Warning: found reserved OS Id %d\n",
                            chunk->first_word.bits.os);
                    break;
            }

            ++chunk;
        }
    }
}

void  write_module (unsigned char *  module_start,
                    size_t           module_size)
{
    FILE *  fp;
    char *  module_title;

    module_title = (char *) module_start +
                                ((ModuleHeader *) module_start)->title;
    printf ("%s\n", module_title);

    fp = fopen (module_title, "wb");
    fwrite (module_start, sizeof (unsigned char), module_size, fp);
    fclose (fp);
}
