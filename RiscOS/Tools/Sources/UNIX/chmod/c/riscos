/*
 * chmod (riscos.c) - change access permissions on files and directories
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 *
 */

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

#include "host.h"
#include "dir.h"
#include "err.h"

#include "kernel.h"
#include "swis.h"
#include "Interface/HighFSI.h"

#include "chmod.h"


typedef struct {
  unsigned int load;
  unsigned int exec;
  unsigned int length;
  unsigned int attr;
  unsigned int type;
  char name[4];
} osgbpb_response;

static const int dirs_always_readable = 1;

/*
 * read catalogue info
 */
_kernel_oserror *read_obj_type(char *path, int *type)
{
  return _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, path, type);
}

/*
 * set object attributes
 */
_kernel_oserror *set_obj_attr(char *path, unsigned attr)
{
  return _swix(OS_File, _INR(0,1)|_IN(5), OSFile_WriteAttr, path, attr);
}


#define CHBUFSIZ (16*BUFSIZ)

static char dirname[CHBUFSIZ];
static char enumbuf[CHBUFSIZ];
static char leaves[CHBUFSIZ];
static int gflags;

/* Construct a textual representation of attributes - note static buffer! */
static char *dec(unsigned attr)
{
  static char buf[8];

  buf[0] = (attr & locked_attribute) ? 'L' : ' ';
  buf[1] = (attr & write_attribute) ? 'W' : ' ';
  buf[2] = (attr & read_attribute) ? 'R' : ' ';
  buf[3] = '/';
  buf[4] = (attr & public_write_attribute) ? 'W' : ' ';
  buf[5] = (attr & public_read_attribute) ? 'R' : ' ';
  buf[6] = 0;
  return buf;
}

static _kernel_oserror *process_generic(char *name, unsigned attr, pset *p, int type)
{
  unsigned oattr = attr;

  for (;p; p=p->next) {
    unsigned bits = 0;
    if (p->c & user) {
      if ((p->p & pread) && type == object_file) bits |= read_attribute;
      if ((p->p & pexec) && type == object_directory) bits |= read_attribute;
      if (p->p & pwrite) bits |= write_attribute;
      if (p->p & pt) {
        bits |= locked_attribute;
      }
    }
    if (p->c & group) {
      /* No action! */
    }
    if (p->c & other) {
      if ((p->p & pread) && type == object_file) bits |= public_read_attribute;
      if ((p->p & pexec) && type == object_directory) bits |= public_read_attribute;
      if (p->p & pwrite) bits |= public_write_attribute;
     }

    if ((p->p & pX) && (p->op == plus) && type == object_directory) {
      if (dirs_always_readable || (attr & (read_attribute | public_read_attribute))) {
        bits |= (read_attribute | public_read_attribute);
      }
    }

    if (gflags & flag_debug) {
      err_report("%02x %s %02x\n", attr,
        p->op == plus ? "+" : p->op == minus ? "-" : "=",
        bits);
    }

    switch (p->op) {
      case plus:
        attr |= bits;
        break;
      case minus:
        attr &= ~bits;
        break;
      case force:
        if (p->c & other) {
          attr &= ~(public_read_attribute | public_write_attribute);
        }
        if (p->c & user) {
          attr &= ~(read_attribute | write_attribute | locked_attribute);
        }
        attr |= bits;
        break;
    }
  }

  if (attr != oattr) {
    _kernel_oserror *e;

    if (gflags & flag_debug) {
      err_report("was: %s %s", dec(oattr), name);
      err_report("now: %s %s", dec(attr),  name);
    }

    if (gflags & flag_verbose) {
      err_report("%s", name);
    }
    e = set_obj_attr(name, attr);
    if (e && (gflags & flag_force)) e = NULL;
    return e;
  }
  else {
    if (gflags & flag_debug) {
      err_report("...: %s %s", dec(oattr), name);
    }
  }
  return NULL;
}

static _kernel_oserror *do_scandir(char *eodir, char *filt, char *nptr, char *eptr)
{
  char *ptr;
  int next;
  _kernel_oserror *err = NULL;
  int flags = 0;

  for (ptr = nptr, next = flags = 0; err == NULL && next != -1;) {
    char *p;
    int count;

    err = _swix(OS_GBPB, _INR(0,6)|_OUTR(3,4), OSGBPB_ReadDirEntriesInfo,
      dirname, enumbuf, sizeof(enumbuf)/32, next, sizeof(enumbuf), filt,
      &count, &next);

    if (!err) {
      for (p = enumbuf; count-- > 0; ) {
        osgbpb_response *o = (osgbpb_response *) p;
        size_t namelen = strlen(o->name) + 1;
        if (count) {
#         define align_ptr(x) ((void *)((((int)(x))+3)&~3))
          p = align_ptr(o->name + namelen);
        }

        /* Do our stuff */
        *eodir++ = '.';
        strcpy(eodir, o->name);
        if (o->type == object_file) {
          process_generic(dirname, o->attr, perms, o->type);
        }
        else if (o->type == object_directory) {
          process_generic(dirname, o->attr, perms, o->type);
          if (gflags & flag_recurse) {
            if (ptr + namelen < eptr) {
              /* We only store it if we haven't run out of space! */
              memcpy(ptr, o->name, namelen);
              ptr += namelen;
            }
          }
        }
        *--eodir = '\0';
      }
    }
  }
  --ptr; /* point back at final terminating byte */

  /* Finished the enumeration now, so we can change the directory with
   * complete impunity and NOT have to re-enumerate it.
   *
   * Scan back through all the directory names and call this routine
   * recursively to process them.
   */

  *eodir++ = '.';

  while (!err && ptr-- > nptr) {
    size_t length = 0;

    while (*ptr && ptr >= nptr) {
      --ptr;
      ++length;
    }

    memcpy(eodir, ptr + 1, length + 2);
    err = do_scandir(eodir + length, "*", ptr + 1, eptr);
  }

  eodir[-1] = '\0';

  return err;
}

void process(fset **pfs, int flags)
{
  const char sep = host_dir_sep_char();

  gflags = flags;

  while (*pfs) {
    char *wc, *eodir;
    fset *next = pop_filespec(pfs);
    if (!next) break;
    if (flags & flag_verbose) err_report(next->filespec);
    wc = strrchr(next->filespec, sep);
    if (wc) {
      if (strcspn(next->filespec, "*") < (wc - next->filespec)) {
        /* wildcard in this component - if we supported globbing, we'd enumerate
         * the matching directories and push_filespec them all, then abort this
         * loop (ie. use continue)
         */
        err_fail("Wildcards not supported in anything but leafnames - sorry");
      }
      strncpy(dirname, next->filespec, wc - next->filespec);
      eodir = dirname + (wc - next->filespec);
      *eodir = '\0';
      ++wc;
    }
    else {
      eodir = dirname;
      *eodir++ = '@';
      *eodir = '\0';
      wc = next->filespec;
    }
    /* Now, dirname contains the directory name, wc points at the filter */
    *leaves = '\0';
    do_scandir(eodir, wc, leaves + 1, leaves + sizeof(leaves) - 1);
    free(next);
  }
}
