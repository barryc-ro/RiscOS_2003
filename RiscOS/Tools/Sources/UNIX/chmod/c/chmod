/*
 * chmod - change access permissions on files and directories
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 *
 */

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

#include "err.h"
#include "host.h"

#include "kernel.h"
#include "swis.h"

#include "chmod.h"
#include "VersionNum"

#define VERSION_IDENT "$" "VersionNum: " Module_FullVersion " $"

static void usage(void)
{
  (void) VERSION_IDENT;
  (void) fputs("chmod " Module_FullVersion " [" Module_Date "]\n", stderr);
  (void) fputs("Usage: chmod [-f] [-v] [-R] mode file ...\n", stderr);
  exit(EXIT_FAILURE);
}

pset *perms = 0;

static void add_perm(int c, int op, int p)
{
  pset *ps = malloc(sizeof(*ps)), **ins;

  if (ps) {
    ps->next = NULL;
    ps->p = p;
    ps->c = c;
    ps->op = op;

    for (ins = &perms; *ins; ins = &((*ins)->next)) ;;
    *ins = ps;
  }
}

void push_filespec(fset **fp, const char *name)
{
  fset *fs = malloc(sizeof(*fs) + strlen(name) + 1);

  if (fs) {
    strcpy(fs->filespec, name);
    fs->next = *fp;
    *fp = fs;
  }
}

fset *pop_filespec(fset **fp)
{
  fset *result = *fp;
  if (result) {
    *fp = result->next;
  }
  return result;
}

static void parse_mode(char *mode)
{
  int ok = 1;
  if (isdigit(*mode)) {
    char *ep;
    int val;
    errno = 0;
    val = (int) strtol(mode, &ep, 8);
    if (errno || *ep || val > INT_MAX || val < 0L) {
      ok = 0;
    }
    else {
      add_perm(user, force, (val & 0700) >> 6);
      add_perm(group, force, (val & 070) >> 3);
      add_perm(other, force, val & 07);
    }
  }
  else {
    int sclass = 0;
    int op;
    int perm = 0;
    char *next = mode;
    while (ok && *next) {
      mode = next;
      next += strcspn(next, ",");
      sclass = 0;
      perm = 0;
      if (*next) {
        *next++ = '\0';
      }
      while (strchr("ugoa", *mode)) {
        switch (*mode) {
          case 'u': sclass |= user; break;
          case 'g': sclass |= group; break;
          case 'o': sclass |= other; break;
          case 'a': sclass |= all; break;
        }
        ++mode;
      }
      if (!sclass) sclass = all;
      if (!strchr("+-=", *mode)) {
        ok = 0;
      }
      else {
        switch (*mode++) {
          case '+': op = plus; break;
          case '-': op = minus; break;
          case '=': op = force; break;
        }
        for (; *mode && ok; ++mode) {
          switch (*mode) {
            case 'r': perm |= pread; break;
            case 'w': perm |= pwrite; break;
            case 'x': perm |= pexec; break;
            case 's': perm |= psuid; break;
            case 't': perm |= pt; break;
            case 'X': perm |= pX; break;
            default:
              ok = 0;
              break;
          }
        }
        add_perm(sclass, op, perm);
      }
    }
  }

  if (ok) return;

  err_fail("Invalid file mode: %s", mode);
}

static int change_modes(char **files, int flags)
{
  char *fspec;
  fset *f = 0;

  for (fspec = *files; fspec; fspec = *++files) {
    push_filespec(&f, fspec);
  }

  process(&f, flags);
  return 0;
}


int main(int argc, char *argv[])
{
  int flags = 0, i, doneopts = 0;

  host_init();
  err_init("chmod");

  for (i=1; i<argc && !doneopts; ++i) {
    const char *arg = argv[i];

    if (*arg++ != '-') break;
    while (*arg) {
      switch (*arg++) {
        case 'R':
          flags |= flag_recurse;
          break;
        case 'f':
          flags |= flag_force;
          break;
        case 'v':
          flags |= flag_verbose;
          break;
        case 'r': case 'w': case 'x': case 't':
        case 'g': case 'o': case 's': case 'u': case 'X':
          --i;
          doneopts = 1;
          break;
        case 'h':
        case '?':
          usage();
          break;
        case 'd':
          flags |= flag_debug;
      }
    }
  }

  if (!argv[i] || !argv[i+1]) usage();
  parse_mode(argv[i]);
  if (!perms) return 0; /* No changes! */
  return change_modes(argv+i+1, flags);
}
