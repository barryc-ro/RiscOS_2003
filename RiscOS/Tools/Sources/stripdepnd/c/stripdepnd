/*
 * stripdepnd.  Strips dependencies from specified Makefile.
 *
 * Copyright (C) Acorn Computers Ltd. 1998
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#define AppName "stripdepnd"

static _kernel_oserror *err(_kernel_oserror *e);
static int verbose = 0;


/* This is the only OS dependent function - actually performs the truncation
 * The current file pointer is guaranteed to be within the new extent of the file
 * and no dirty I/O buffers will be in use.
 */
static void truncate_file(FILE *f, long new_extent)
{
	int fd = f->__file;
        (void) err(_swix(OS_Args, _INR(0,2), 3, fd, new_extent));
}


/* ------------------------------------------------------------------------- */
/* The rest of this source file is portable */

static const long marker_not_found = -1L;

static char buffer[BUFSIZ];
static char marker[] = "# Dynamic dependencies:";

static long find_strip(FILE *f)
{
        int continuation = 0;

        while (fgets(buffer, sizeof(buffer), f) != NULL) {
                /* Read line-by-line, if a line is far too long, ignore the next
                 * "line" as it was merely a continuation of the previous line because
                 * our buffer was too small.
                 */
                if (!continuation) {
                	if (strncmp(marker, buffer, sizeof(marker)-1) == 0) {
                                /* We found it - assume not a very long line! */
                                return ftell(f);
                        }
                }
                continuation = (strchr(buffer, '\n') == NULL);
        }

	return marker_not_found;
}

static _kernel_oserror *err(_kernel_oserror *e)
{
        if (e != NULL) {
                fprintf(stderr, AppName ": %s\n", e->errmess);
        }

        return e;
}

static void attempt_strip(const char *filename)
{
        long new_extent;
        FILE *f;

	f = fopen(filename, "r+");
	if (f == NULL) {
	        (void) fprintf(stderr, AppName ": Unable to open `%s'\n", filename);
	        return;
	}

	if (verbose) {
	        fprintf(stderr, "-- Search %s for dynamic dependencies ...\n", filename);
	}

        new_extent = find_strip(f);
	rewind(f);

        if (new_extent != marker_not_found) {
                if (verbose) {
                        fprintf(stderr, "-- Truncating at offset %#lx\n", new_extent);
                }
                truncate_file(f, new_extent);
        }
        else {
                if (verbose) {
                        fprintf(stderr, "-- No dynamic dependencies found\n");
                }
        }

        fclose(f);
}

static void help(void)
{
        fputs(AppName " strips dynamic dependencies from the specified makefiles.\n"
        	"If no files are specified, the file Makefile in the current directory\n"
        	"is stripped, if present\n", stderr);
}

static void syntax(void)
{
        fputs("Syntax: " AppName " [-help] [-v] [<file> [<file> ...]]\n", stderr);
}

int main(int argc, char *argv[])
{
        int arg;
	int stripcount = 0;

        for (arg = 1; arg < argc; ++arg) {
                const char *argval = argv[arg];
                if (argval[0] == '-') {
                        /* Check options */
                        if (!strcmp(argval+1, "help")) {
                                syntax();
                                help();
                                ++stripcount;
                        }
                        else if (!strcmp(argval+1, "v")) {
                                ++verbose;
                        }
                        else {
                                syntax();
                                ++stripcount;
                        }

                }
                else {
                        ++stripcount;
                        attempt_strip(argval);
                }
        }

	/* Default action if no names specified is to strip @.Makefile */
        if (stripcount == 0) attempt_strip("Makefile");

        return EXIT_SUCCESS;
}
