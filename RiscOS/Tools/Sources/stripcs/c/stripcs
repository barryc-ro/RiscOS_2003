/*
 * stripcs.  Strips centisecond components of timestamps.
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#define AppName "stripcs"

static int verbose = 0;

static _kernel_oserror *err(_kernel_oserror *e)
{
        if (e != NULL) {
                fprintf(stderr, AppName ": %s\n", e->errmess);
        }

        return e;
}

static void stamp(const char *filename, int filetype, int load, int exec)
{
        load |= 0xFFF00000 | ((filetype & 0xFFF) << 8);
        err(_swix(OS_File, _INR(0,2), 2, filename, load));
        err(_swix(OS_File, _INR(0,1)|_IN(3), 3, filename, exec));
}

static void fix_time_stamp(int *load, int *exec)
{
        int timestamp[9];
        struct {
                int exec;
                int load;
        } date;

        date.exec = *exec;
        date.load = *load;

        err(_swix(Territory_ConvertTimeToOrdinals, _INR(0,2), -1, &date, timestamp));
        timestamp[0] = 0;
        err(_swix(Territory_ConvertOrdinalsToTime, _INR(0,2), -1, &date, timestamp));

        *exec = date.exec;
        *load = date.load;
}

static void *safe_malloc(size_t n)
{
        void *result = malloc(n);
        if (!result) {
                fprintf(stderr, AppName ": out of memory\n");
                exit(EXIT_FAILURE);
        }

        return result;
}

static void *align_ptr(void *p)
{
        char *pc = p;

        while (((int) pc ) & 3) ++pc;
        return pc;
}

static void read_dir_entries(const char *dir, int depth)
{
        char *name, *eoname;
        const size_t dirnamelen = strlen(dir);
        const size_t dirlen = dirnamelen + sizeof(".") + 1024; /* arbitrary */
        int context, count;
        char buffer[BUFSIZ], *bp;

        name = safe_malloc(dirlen);
        memcpy(name, dir, dirnamelen);
        eoname = name + dirnamelen;

        if (verbose) printf("%-*s%s\n", depth*2, "", dir);
        ++depth;

        context = 0;
        while (context != -1) {
                *eoname = '\0';
                err(_swix(OS_GBPB, _INR(0,6)|_OUTR(3,4), 12, name, buffer,
                        BUFSIZ, context, sizeof(buffer), 0, &count, &context));
                *eoname = '.';
                for (bp = buffer; count > 0; --count) {
                        int *ip = (int *) bp;
                        size_t filelen = strlen(bp + 24);
                        fix_time_stamp(ip, ip+1);
                        memcpy(eoname + 1, bp + 24, filelen + 1);
                        if (ip[4] == 2) {
                                /* It was a directory */
                                read_dir_entries(name, depth);
                        }
                        else {
                                if (verbose) {
                                        printf("%-*s%s\n", depth*2, "", eoname+1);
                                }
                                stamp(name, ip[5], ip[0], ip[1]);
                        }
                        bp = align_ptr(bp + 24 + filelen + 1);
                }
        }
        --depth;
        free(name);
}

static void attempt_strip(const char *filename)
{
        int type, ftype;
        struct {
                int exec;
                int load;
        } date;

        err(_swix(OS_File, _INR(0,1)|_OUT(0)|_OUTR(2,3)|_OUT(6), 23, filename, &type,
                &date.load, &date.exec, &ftype));

        if (type == 2) {
                read_dir_entries(filename, 0);
        }
        else {
                fix_time_stamp(&date.load, &date.exec);
                stamp(filename, ftype, date.load, date.exec);
        }
}

static void help(void)
{
        fputs(AppName " strips the centisecond component of an object's timestamp.\n"
                "If no files are specified, no files are modified\n", stderr);
}

static void syntax(void)
{
        fputs("Syntax: " AppName " [-help] [-v] [<file> [<file> ...]]\n", stderr);
}

int main(int argc, char *argv[])
{
        int arg;
        int stripcount = 0;

        for (arg = 1; arg < argc; ++arg) {
                const char *argval = argv[arg];
                if (argval[0] == '-') {
                        /* Check options */
                        if (!strcmp(argval+1, "help")) {
                                syntax();
                                help();
                                ++stripcount;
                        }
                        else if (!strcmp(argval+1, "v")) {
                                ++verbose;
                        }
                        else {
                                syntax();
                                ++stripcount;
                        }

                }
                else {
                        ++stripcount;
                        attempt_strip(argval);
                }
        }

        return EXIT_SUCCESS;
}
