/* > tlink.c

 * Created by NK : 94

 * CHANGE LOG (since toolbox version)

 * SJM: 01/95: The ctypereq version originally didn't use V type SWIs at all so
 *      the lack of a TinyStubs module wasn't being noticed so I fixed this.
 *
 * SJM: 04/95: However I also fixed both of them so that OS_CLI was called as
 *      XOS_CLI. This turns out to be a mistake as because r10 is not fixed up
 *      by the tlink init code you get a data abort. So changed back to using
 *      OS_CLI and letting the error (tinystubs can't be found) be raised
 *      directly. This is a bit naughty but better than a data abort.
 *
 * SJM: 06/95: Reformatted assembler so I could see what's going on.
 *      Use %Link rather than Link in command line.
 *      Complete the kernel and clib stub table.
 *      Split the memory functions off so that 'private' can be handled
 *      without duplicating 99% of the kernel and clib tables.
 *      Added functions to read clib statics (incomplete).
 *      Added patch up to linked file to fix the zinit relocations.
 *
 * NK:  Added version CLI option.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "VersionNum"

static char stubstart[] =
    "        AREA    |Stub$$Entries|, CODE, READONLY\n"
    "\n"
    "        IMPORT  |Image$$RW$$Base|\n"
    "        IMPORT  |Image$$RW$$Limit|\n"
    "        EXPORT  |_Lib$Reloc$Off|\n"
    "        EXPORT  |_Mod$Reloc$Off|\n"
    "        EXPORT  |_Lib$Reloc$Off$DP|\n"
    "\n"
    "SL_Lib_Offset     *      -540\n"
    "SL_Client_Offset  *      -536\n"
    "\n"
    "|_Lib$Reloc$Off|        *       -SL_Lib_Offset\n"
    "|_Mod$Reloc$Off|        *       -SL_Client_Offset\n"
    "|_Lib$Reloc$Off$DP|     *       ((-SL_Lib_Offset):SHR:2)+&F00\n"
    "                                ; A version of _Lib$Reloc$Off suitable for\n"
    "                                ; insertion into a DP instruction\n"
    "\n"
    "        IMPORT  |__RelocCode|\n"
    "\n"
    "\n"
    "        EXPORT  |_clib_finalisemodule|\n"
    "_clib_finalisemodule\n"
    "        STMFD   sp!,{lr}\n"
    "        SWI     &a2c41\n"
    "        LDMFD   sp!,{pc}\n"
    "\n"
    "        MACRO\n"
    "        StubEntry $name,$val\n"
    "        EXPORT  $name\n"
    "$name\n"
    "        DCD     $val\n"
    "        MEND\n"
    "\n"
    "stubtable\n"
    "";

static char stdinit[] =
    "        EXPORT  |_clib_initialisemodule|\n"
    "_clib_initialisemodule\n"
    "        STMFD   sp!,{lr}\n"
    "        MOV     sl,sp,LSR #20\n"
    "        MOV     sl,sl,LSL #20\n"
    "        BL      __RelocCode\n"
    "        ADR     R0,stubtable\n"
    "        SWI     &a2c40\n"	    // returns r0 -> 3 word workspace
    "        BVS     %FT99\n"
    "05\n"
    "        STR     R0,[R12]\n"    	// store in private word
    "        ADD     sl,sl,#560\n"
    "        LDR     R1,[R0,#4]\n"
    "        STR     R1,[sl,#-540]\n"
    "        MOV     R1,#0\n"
    "        STR     R1,[sl,#-536]\n"
    "        MOV     a1,R12\n"
    "    \n"
    "98\n"
    "        LDMFD   sp!,{pc}\n"
    "99\n"
    "        LDR     R14,[R0]\n"
    "        SUB     R14,R14,#6\n"
    "        TEQ     R14,#480\n"
    "        BNE     %BT98\n"
    "        ADR     R0,cmd\n"
    "        CMP     R0,#0\n"
    "        SWI     &00005\n"	    	// OS_CLI: V clear so error is reported.
    "        ADRVC   R0,stubtable\n"
    "        SWIVC   &a2c40\n"
    "        BVC     %BT05\n"
    "        B       %BT98\n"
    "cmd \n"
    "        DCB     \"rmload system:modules.tinystubs\",0"
    "\n\n";

/* clib init that returns address of ctype */

static char ctypereq[] =
    "     EXPORT  |_clib_initialisemodule|\n"
    "_clib_initialisemodule\n"
    "        STMFD   sp!,{lr}\n"
    "        MOV     sl,sp,LSR #20\n"
    "        MOV     sl,sl,LSL #20\n"
    "        BL      __RelocCode\n"
    "        ADR     R0,stubtable\n"
    "        ADR     R1,l0\n"
    "        SWI     &a2c42\n"	    // returns r0 -> 3 word workspace
    "        BVS     %FT99\n"	    // and fills in [r1,#0-256] with ctype data
    "05\n"
    "        STRVC   R0,[R12]\n"
    "        ADDVC   sl,sl,#560\n"
    "        LDRVC   R1,[R0,#4]\n"
    "        STRVC   R1,[sl,#-540]\n"
    "        MOVVC   R1,#0\n"
    "        STRVC   R1,[sl,#-536]\n"
    "        MOVVC   a1,R12\n"
    "98\n"
    "        LDMFD   sp!,{pc}\n"
    "99\n"
    "        LDR     R14,[R0]\n"
    "        SUB     R14,R14,#6\n"
    "        TEQ     R14,#480\n"
    "        BNE     %BT98\n"
    "        ADR     R0,cmd\n"
    "        CMP     R0,#0\n"
    "        SWI     &00005\n"	    	// OS_CLI: V clear so error is reported.
    "        ADRVC   R0,stubtable\n"
    "        SWIVC   &a2c42\n"
    "        BVC     %BT05\n"
    "        B       %BT98\n"
    "cmd \n"
    "        DCB     \"rmload system:modules.tinystubs\",0\n"
    "\n"
    "l0      DCD     |xstub$dataseg|\n";

static char ctypeend[] =
    "\n"
    "        AREA    |stub$$data|,DATA\n"
    "|xstub$dataseg|\n"
    "        EXPORT  |__ctype|\n"
    "__ctype %       256\n";

static char stubend[] =
    "  DCD -1\n\n";

static char zinitd[] =
    "\n"
    "        AREA    |C$$zidatb|,DATA \n"
    "        EXPORT  |zidatastore|\n"
    "|zidatastore|\n"
    "        %%      %d\n";

static char export_errno[] =
    "        EXPORT  ts_errno\n"
    "ts_errno\n"
    "        LDR     ip, [sl, #-SL_Lib_Offset]\n"
    "        LDR     a1, [ip, #&31c]\n"
    "        MOVS    pc, lr\n"
    "\n";

static char export_stdin[] =
    "        EXPORT  ts_stdin\n"
    "ts_stdin\n"
    "        LDR     ip, [sl, #-SL_Lib_Offset]\n"
    "        ADD     a1, ip, #&320\n"
    "        MOVS    pc, lr\n"
    "\n";

static char export_stdout[] =
    "        EXPORT  ts_stdout\n"
    "ts_stdout\n"
    "        LDR     ip, [sl, #-SL_Lib_Offset]\n"
    "        ADD     a1, ip, #&320 + 40\n"
    "        MOVS    pc, lr\n"
    "\n";

static char export_stderr[] =
    "        EXPORT  ts_stderr\n"
    "ts_stderr\n"
    "        LDR     ip, [sl, #-SL_Lib_Offset]\n"
    "        ADD     a1, ip, #&320 + 80\n"
    "        MOVS    pc, lr\n"
    "\n";

typedef struct { char *name; int entry;} Entries;

static Entries kernel[] =
{
    { "_kernel_init ", 0 },
    { "_kernel_exit ", 1 },
    { "_kernel_setreturncode ", 2 },
    { "_kernel_exittraphandler ", 3 },
    { "_kernel_unwind ", 4 },
    { "_kernel_procname ", 5 },
    { "_kernel_language ", 6 },
    { "_kernel_command_string ", 7 },
    { "_kernel_hostos ", 8 },
//    { "_kernel_swi ", 9 },
    { "_kernel_osbyte ", 10 },
    { "_kernel_osrdch ", 11 },
    { "_kernel_oswrch ", 12 },
    { "_kernel_osbget ", 13 },
    { "_kernel_osbput ", 14 },
    { "_kernel_osgbpb ", 15 },
    { "_kernel_osword ", 16 },
    { "_kernel_osfind ", 17 },
    { "_kernel_osfile ", 18 },
    { "_kernel_osargs ", 19 },
    { "_kernel_oscli ", 20 },
    { "_kernel_last_oserror ", 21 },
    { "_kernel_system ", 22 },
    { "_kernel_getenv ", 23 },
    { "_kernel_setenv ", 24 },
    { "_kernel_register_allocs ",25  },
    { "_kernel_alloc ", 26 },
    { "_kernel_stkovf_split_0frame ", 27 },
    { "_kernel_stkovf_split ", 28 },
    { "_kernel_stkovf_copyargs ", 29 },
    { "_kernel_stkovf_copy0args ", 30 },
    { "_kernel_udiv ", 31 },
    { "_kernel_urem ", 32 },
    { "_kernel_udiv10 ", 33 },
    { "__rt_udiv10 ", 33 },
    { "_kernel_sdiv ", 34 },
    { "_kernel_srem ", 35 },
    { "_kernel_sdiv10 ", 36 },
    { "__rt_sdiv10 ", 36 },
    { "_kernel_fpavailable ",37  },
    { "_kernel_moduleinit ", 38 },
    { "_kernel_irqs_on ", 39 },
    { "_kernel_irqs_off ", 40 },
    { "_kernel_irqs_disabled ", 41 },
    { "_kernel_entermodule ", 42 },
    { "_kernel_escape_seen ", 43 },
    { "_kernel_current_stack_chunk ", 44 },
    { "_kernel_swi_c ", 45 },
    { "_kernel_register_slotextend ", 46 },
    { "_kernel_raise_error ", 47 },
    { 0, 0 }
};

static Entries clib[] =
{
    { "__rt_stkovf_split_small ", 4 },
    { "__rt_stkovf_split_big ", 5 },
    { "__rt_udiv ", 6 },
    { "__rt_sdiv ", 8 },
    { "__rt_divtest ", 9 },
    { "__rt_rd1chk ", 12 },
    { "__rt_rd2chk ", 13 },
    { "__rt_rd4chk ", 14 },
    { "__rt_wr1chk ", 15 },
    { "__rt_wr2chk ", 16 },
    { "__rt_wr4chk ", 17 },

    { "TrapHandler ", 0 },
    { "UncaughtTrapHandler ", 1 },
    { "EventHandler ", 2 },
    { "UnhandledEventHandler ", 3 },
    { "x$stack_overflow ", 4 },
    { "x$stack_overflow_1 ", 5 },
    { "x$udivide ", 6 },
    { "x$uremainder ", 7 },
    { "x$divide ", 8 },
    { "x$divtest ", 9 },
    { "x$remainder ", 10 },
    { "x$multiply ", 11 },
    { "_rd1chk ", 12 },
    { "_rd2chk ", 13 },
    { "_rd4chk ", 14 },
    { "_wr1chk ", 15 },
    { "_wr2chk ", 16 },
    { "_wr4chk ", 17 },
    { "_main ", 18 },
    { "_exit ", 19 },
    { "_clib_initialise ", 20 },
    { "_backtrace ", 21 },
    { "_count ", 22 },
    { "_count1 ", 23 },
    { "_stfp ", 24 },
    { "_ldfp ", 25 },
    { "_printf ", 26 },
    { "_fprintf ", 27 },
    { "_sprintf ", 28 },
    { "clock ", 29 },
    { "difftime ", 30 },
    { "mktime ", 31 },
    { "time ", 32 },
    { "asctime ", 33 },
    { "ctime ", 34 },
    { "gmtime ", 35 },
    { "localtime ", 36 },
    { "strftime ", 37 },
    { "memcpy ", 38 },
    { "memmove ", 39 },
    { "strcpy ", 40 },
    { "strncpy ", 41 },
    { "strcat ", 42 },
    { "strncat ", 43 },
    { "memcmp ", 44 },
    { "strcmp ", 45 },
    { "strncmp ", 46 },
    { "memchr ", 47 },
    { "strchr ", 48 },
    { "strcspn ", 49 },
    { "strpbrk ", 50 },
    { "strrchr ", 51 },
    { "strspn ", 52 },
    { "strstr ", 53 },
    { "strtok ", 54 },
    { "memset ", 55 },
    { "strerror ", 56 },
    { "strlen ", 57 },
    { "atof ", 58 },
    { "atoi ", 59 },
    { "atol ", 60 },
    { "strtod ", 61 },
    { "strtol ", 62 },
    { "strtoul ", 63 },
    { "rand ", 64 },
    { "srand ", 65 },
//    { "calloc ", 66 },
//    { "free ", 67 },
    { "malloc ", 68 },
//    { "realloc ", 69 },
    { "abort ", 70 },
    { "atexit ", 71 },
    { "exit ", 72 },
    { "getenv ", 73 },
    { "system ", 74 },
    { "bsearch ", 75 },
    { "qsort ", 76 },
    { "abs ", 77 },
    { "div ", 78 },
    { "labs ", 79 },
    { "ldiv ", 80 },
    { "remove ", 81 },
    { "rename ", 82 },
    { "tmpfile ", 83 },
    { "__old_tmpnam ", 84 },
    { "fclose ", 85 },
    { "fflush ", 86 },
    { "fopen ", 87 },
    { "freopen ", 88 },
    { "setbuf ", 89 },
    { "setvbuf ", 90 },
    { "printf ", 91 },
    { "fprintf ", 92 },
    { "sprintf ", 93 },
    { "scanf ", 94 },
    { "fscanf ", 95 },
    { "sscanf ", 96 },
    { "vprintf ", 97 },
    { "vfprintf ", 98 },
    { "vsprintf ", 99 },
    { "_vfprintf ", 100 },
    { "fgetc ", 101 },
    { "fgets ", 102 },
    { "fputc ", 103 },
    { "fputs ", 104 },
    { "__filbuf ", 105 },
    { "getc ", 106 },
    { "getchar ", 107 },
    { "gets ", 108 },
    { "__flsbuf ", 109 },
    { "putc ", 110 },
    { "putchar ", 111 },
    { "puts ", 112 },
    { "ungetc ", 113 },
    { "fread ", 114 },
    { "fwrite ", 115 },
    { "fgetpos ", 116 },
    { "fseek ", 117 },
    { "fsetpos ", 118 },
    { "ftell ", 119 },
    { "rewind ", 120 },
    { "clearerr ", 121 },
    { "feof ", 122 },
    { "ferror ", 123 },
    { "perror ", 124 },
    { "__ignore_signal_handler ", 125 },
    { "__default_signal_handler ", 126 },
    { "__error_signal_marker ", 127 },
    { "signal ", 128 },
    { "raise ", 129 },
    { "setjmp ", 130 },
    { "longjmp ", 131 },
    { "acos ", 132 },
    { "asin ", 133 },
    { "atan ", 134 },
    { "atan2 ", 135 },
    { "cos ", 136 },
    { "sin ", 137 },
    { "tan ", 138 },
    { "cosh ", 139 },
    { "sinh ", 140 },
    { "tanh ", 141 },
    { "exp ", 142 },
    { "frexp ", 143 },
    { "ldexp ", 144 },
    { "log ", 145 },
    { "log10 ", 146 },
    { "modf ", 147 },
    { "pow ", 148 },
    { "sqrt ", 149 },
    { "ceil ", 150 },
    { "fabs ", 151 },
    { "floor ", 152 },
    { "fmod ", 153 },
    { "setlocale ", 154 },
    { "isalnum ", 155 },
    { "isalpha ", 156 },
    { "iscntrl ", 157 },
    { "isdigit ", 158 },
    { "isgraph ", 159 },
    { "islower ", 160 },
    { "isprint ", 161 },
    { "ispunct ", 162 },
    { "isspace ", 163 },
    { "isupper ", 164 },
    { "isxdigit ", 165 },
    { "tolower ", 166 },
    { "toupper ", 167 },
    { "__assert ", 168 },
    { "_memcpy ", 169 },
    { "_memset ", 170 },
    { "localeconv ", 171 },
    { "mblen ", 172 },
    { "mbtowc ", 173 },
    { "wctomb ", 174 },
    { "mbstowcs ", 175 },
    { "wcstombs ", 176 },
    { "strxfrm ", 177 },
    { "strcoll ", 178 },
//    { "_clib_finalisemodule ", 179 },
    { "_clib_version ", 180 },
    { "_CLib_Finalise ", 181 },
    { "tmpnam ", 182 },
    { "_swi ", 183 },
    { "_swix ", 184 },

    { "__ctype ", -1 },

    { 0, 0 }
};

static Entries internal[] =
{
    { "rmensure "   ,0},
    { "string_length ",1},
    { "string_copy " ,2},
    { "string_to_buffer ",3},
    { "string_copy_chk ",4},
    { "_kernel_swi " ,19},
    { 0,0 }
};

static Entries clib_mem[] =
{
    { "calloc "      ,66},
    { "realloc "     ,69},
    { "free "        ,67},
    { 0, 0 }
};

static Entries internal_mem[] =
{
    { "calloc "      ,16},
    { "realloc "     ,17},
    { "free "        ,18},
    { 0, 0 }
};

typedef struct { char *name; char *entry;} IntEntries;

static IntEntries clib_statics[] =
{
    { "_ts_errno ", export_errno },
    { "_ts_stdin ", export_stdin },
    { "_ts_stdout ", export_stdout },
    { "_ts_stderr ", export_stderr },
    { 0, 0 }
};

static char *initcode;
static char *initendcode;

static int zinits, zinite;

static int verbose = 0;

static void static_required(int i)
{
   if (i == -1) {
     initcode = ctypereq;
     initendcode = ctypeend;
   }
}

static void check_entries(FILE *in, Entries *entries,FILE *f, char *dcd, int *first)
{
   char buf[128];
   int en;

   fseek(in, 0, SEEK_SET);

   while (fscanf(in,"%[^\n] ",buf) != EOF)
   {
      en = 0;
      while (entries[en].name)
      {
         if (!strncmp(entries[en].name,buf,strlen(entries[en].name)))
         {
            if (entries[en].entry <0)
            	static_required(entries[en].entry);
            else
            {
               if (!*first)
               {
               	 fputs(dcd,f);
                 *first =1;
               }
               fprintf(f,"  StubEntry %s, %d\n",entries[en].name,entries[en].entry);

    	       if (verbose)
    	       	  printf("tlink: adding stub %s\n", entries[en].name);
            }
            break;
         }
         en++;
      }
   }
}


static void check_special_entries(FILE *in, FILE *f)
{
   char buf[128];
   int en;

   fseek(in, 0, SEEK_SET);

   while (fscanf(in,"%[^\n] ",buf) != EOF)
   {
      if (!strncmp(buf,"Image$$ZI$$Base",15))
      	sscanf(buf+15,"%x",&zinits);
      else if (!strncmp(buf,"Image$$ZI$$Limit",16))
      	sscanf(buf+16,"%x",&zinite);

      en = 0;
      while (clib_statics[en].name)
      {
         if (!strncmp(clib_statics[en].name,buf,strlen(clib_statics[en].name)))
         {
            fputs(clib_statics[en].entry,f);
    	    if (verbose)
    	        printf("tlink: adding static fn %s\n", clib_statics[en].name);
            break;
         }
         en++;
      }
   }
}

#define ZIDATABASE  "C$$zidata$$Base"
#define ZIDATALIMIT "C$$zidata$$Limit"
#define ZIDATBBASE  "C$$zidatb$$Base"
#define EDATA  	    "_edata"

#define SIZEOF_RELOC_CODE   (17*4)

static void fixup_zero_init(const char *symbol_file, const char *output_file)
{
    FILE *f_sym, *f_out;
    char buf[128];
    int zidata, zidatb, zilimit, edata;
    int *reloc_table;
    int size;
    char *file;

    // get symbols
    f_sym = fopen(symbol_file, "r");
    if (!f_sym) exit(1);

    while (fscanf(f_sym,"%[^\n] ",buf) != EOF)
    {
       if (!strncmp(buf,ZIDATABASE,sizeof(ZIDATABASE)-1))
      	  sscanf(buf+sizeof(ZIDATABASE)-1,"%x", &zidata);
       else if (!strncmp(buf,ZIDATALIMIT,sizeof(ZIDATALIMIT)-1))
      	  sscanf(buf+sizeof(ZIDATALIMIT)-1,"%x", &zilimit);
       else if (!strncmp(buf,ZIDATBBASE,sizeof(ZIDATBBASE)-1))
      	  sscanf(buf+sizeof(ZIDATBBASE)-1,"%x", &zidatb);
       else if (!strncmp(buf,EDATA,sizeof(EDATA)-1))
      	  sscanf(buf+sizeof(EDATA)-1,"%x", &edata);
    }

    fclose(f_sym);

    // open file
    f_out = fopen(output_file, "rb+");
    if (!f_out) exit(1);

    if (verbose)
    {
       printf("tlink: relocating zero-init from &%x to &%x (size &%x)\n", zidata-0x8000, zidatb-0x8000, zilimit-zidata);
       printf("tlink: relocation table at &%x\n", edata-0x8000);
    }

    // allocate memory
    fseek(f_out, 0, SEEK_END);
    size = (int)ftell(f_out);
    if (verbose)
       printf("tlink: file size &%x\n", size);

    file = malloc(size);
    if (!file)
    {
       fprintf(stderr, "tlink: Not enough memory to load file\n");
       exit(1);
    }

    // read file in
    fseek(f_out, 0, SEEK_SET);
    fread(file, size, 1, f_out);

    // fixup relocations
    // the last two relocations always point to he first two words in the table
    // so that the module can be re-relocated, therefore we need to stop before we get
    // to them - hence reloc_table[2] == -1
    reloc_table = (int *)(file + (edata - 0x8000));
    while (reloc_table[2] != -1)
    {
    	int *reloc_entry = (int *)&file[*reloc_table];

    	// a relocation value that points into zidata is updated
    	// to point into the ministubs zero init area
    	if (*reloc_entry >= zidata)
    	{
    	    *reloc_entry += (zidatb - zidata);
    	    if (verbose)
    	    	printf("tlink: moving entry at %x\n", *reloc_table);
    	}

        reloc_table++;
    }

    // zero the zidatb area to make sure it is zero
    memset(file + (zidatb - 0x8000), 0, zilimit - zidata);

    // write file back out
    fseek(f_out, 0, SEEK_SET);
    fwrite(file, size, 1, f_out);

    fclose(f_out);
    free(file);
}


int main(int argc, char** argv)
{
   char buf[16384];
   char link[16],*tmp;
   char stub[255],sym[255],obj[255];
   char *output_file;
   int i,prv_mem=0;
   FILE *f,*in;

   initcode =stdinit;
   initendcode ="";

   // get what real link to use
   tmp = getenv("tlink$bin");
   if (tmp && *tmp)
   {
      strcpy(link ,tmp);
      strcat(link, " ");
   }
   else
      strcpy(link, "%link ");

   if (!strcmp(argv[1],"-version") || !strcmp(argv[1],"-help")) {
     printf("TLink version " Module_MajorVersion " (Tiny linking system) " Module_MinorVersion "\n");
     puts("");
     system(link);       // call link to get its help
     exit(0);
   }
   // are we going to use internal memory routines
   tmp = getenv("tlink$memory");
   if (tmp && *tmp)
   {
       if (strstr(tmp,"private"))
       	  prv_mem =1;
   }

   tmp = getenv("tlink$verbose");
   if (tmp)
      	verbose = 1;

   if (verbose && prv_mem)
     	printf("tlink: using private memory routines\n");

   // run command once to find unmatched symbols
   strcpy (buf,link);

   for (i =1 ; i<argc; i++)
   {
      strcat(buf,argv[i]);
      strcat(buf," ");
   }
   tmpnam(sym);

   strcat(buf,"-symbols ");
   strcat(buf,sym);
   strcat(buf," -errors null:");

   system(buf);

   // build a new mini stubs file to order
   tmpnam(stub);
   f = fopen(stub,"w");
   if (!f) exit(1);

   fputs(stubstart,f);

   // get the stub entries
   in = fopen(sym,"r");
   if (in)
   {
     int kernel_first = 0;
     int internal_first = 0;
     int clib_first = 0;

     check_entries(in, kernel,f,"  DCD -2\n",&kernel_first);
     if (prv_mem)
     {
        check_entries(in, clib,f,"  DCD -4\n",&clib_first);
        check_entries(in, internal_mem,f,"  DCD -3\n",&internal_first);
     }
     else
     {
        check_entries(in, clib_mem,f,"  DCD -4\n",&clib_first);
        check_entries(in, clib,f,"  DCD -4\n",&clib_first);
     }
     check_entries(in, internal,f,"  DCD -3\n",&internal_first);

     check_special_entries(in, f);
   }

   fclose(in);

   fputs(stubend,f);

   fputs(initcode,f);

   fputs(initendcode,f);

   if (zinits != zinite) {
      fprintf(f,zinitd,zinite-zinits);
   }

   fputs("\n  END\n",f);

   fclose(f);

   // assemble the ministubs file
   tmpnam(obj);

   sprintf(buf,"objasm %s %s >> null:",stub,obj);

   system(buf);

   // build the new reallink command line with the ministubs
   // and find the output file name
   output_file = NULL;
   strcpy(buf,link);
   for (i =1 ; i<argc; i++)
   {
       if (!output_file && !strncmp(argv[i], "-o", 2) || !strncmp(argv[i], "-O", 2))
           output_file = argv[i+1];

       strcat(buf,argv[i]);
       strcat(buf," ");
   }
   strcat(buf,obj);	    	// add ministubs file
   strcat(buf," -symbols "); 	// still need symbols, reuse filename though
   strcat(buf,sym);

   system(buf);

   // fixup zero init area if there is one
   if (zinits != zinite)
       fixup_zero_init(sym, output_file);

   // clean up afterwards
   remove (sym);
   remove (obj);
   remove (stub);

   exit(0);
}

// eof main.c
