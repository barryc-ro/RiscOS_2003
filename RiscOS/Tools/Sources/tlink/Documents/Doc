                                   TLink
                                   =====

                                N Kelleher

What is TLink?
--------------

TLink, when used in place of Link, makes C¹ based modules smaller at run time.
This is achieved by :
        a) not having a branch table for the complete C library in the image
        b) sharing 'library' static data amongst modules
        c) using the image version of data, rather than copying it first

This generally results in a saving of about 9k at run time, although the image 
may be longer (eg. it has large unitialised arrays).

Tinystubs exists in RiscOS from 3.60 onwards, standalone versions are also 
available.

¹ In general, potentially, applications could benefit, but they would not 
behave like other apps.

Using TLink
-----------

TLink ultimately passes on all command line arguments, except -help or -version
which display a version message before just calling the linker for its help
message.

There are two ways to use the Tiny Link/Stubs system:

1) To use tlink without altering Makefiles, a few steps need to be taken:

set alias$link tlink %*0                so that tlink is used in place of link

set tlink$bin linkbin                   so that ultimately linkbin is called - this 
                                        could be any linker.

%link is used (so that the CLI doesn't call tlink again) if this variable is unset.

set c$path to include a stubs file with nothing in it. Eg. an AOF file with 
no objects in.

2) By changing the makefile:

Removing C:o.stubs

Replace tool link by tlink

If Tlink is always going to be used for a particular project, then this would be
the prefered route.

optional:

set tlink$memory private                - use TinyStubs memory allocator

set tlink$verbose <anything>            - TLink generates more output

Warnings
--------

All library statics are shared by all modules using TinyStubs, so problems
may arise where the library uses statics to store state.

A maximum of 16 files can be open (with fopen) at any one time over *all* the 
modules using TinyStubs, so try not to keep files open for any length of time,
or use OS_File - this is because the standard C library has a built in maximum.

Standard output and input - stdout and stdin - are shared, so may close at any 
time. So don't use printf, etc. In addition, such output may be buffered, but
of course there is one buffer for all modules.

Explicit reference to stdout will result in a link failure referring to undefined 
symbol __iob. It is possible to reference (eg. with toupper macro) __ctype.

The TinyLink system should not be used for module tasks as such modules shut
down the C library when the task exits.

Reinitialising a module (rmreinit) does not reinitialise its statics (since
there is now only one copy of them); so include conditionally compiled code
to initialise statics during module initialisation:

  #ifdef TINYSTUBS

     ... initialise statics explicitly ...

  #endif

Recommendation:

  Amend MakeFile by setting the following option for the CC tool:

    Define ->  TINYSTUBS

How it works
------------

TLink attempts to link the given objects and determines what symbols are unresolved.
it then generates an object file which contains a clib_initialise function that will
call the TinyStubs support module. It also generates various entry tables by looking
up the symbol name and matching it to its entry number. When initialising, the 
TinyStubs module replaces this with a suitable branch, either to the ROM for a clib
function or to itself for a 'private' function. TLink then relinks with this new
object file.

TLink has entries for all of the shared C library. Note that _kernel_swi does not
copy errors (unlike the standard library) into a buffer, meaning that error message
overrun can not occur. The private memory option makes calls to malloc etc. go to
a local version that does not suffer from the bugs present in some systems.

Zero init data is catered for by including an area of sufficient size immediately after
the client static data. This is because when running the module, all client data is
is stored within the image of the module. Library statics are stored in the TinyStubs
support module. The initialisation process sets up a suitable workspace for a C module:-

        [R12] + 0       12      size of this area
        [R12] + 4       TSM     the same word as in TS supports [R12]+4 - only  
                                used by the Shared C Library in ROM
        [R12] + 8        0      no dereferencing required for client statics


Credits
-------

Thanks go to Simon Middleton for extending the original TLink & Kevin Bracey for
giving it all a good thrashing.
