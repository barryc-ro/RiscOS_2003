/* compare.c */

/***************************************************************************/
/*

Compares two directory hierarchies: use

    *compare <path1> <path2> [<options>]

  where possible options are:

      -nofile             skip file comparisons
      -trace              output progress messages

12-08-92: Now takes account of "link" files, for version 1.10 of ISOForm.

*/
/***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "kernel.h"

typedef int BOOL;

#define TRUE     (1)
#define FALSE    (0)

#include "../../file.h"


typedef struct {
    unsigned load;      /* load address - or file type and start of time
                           stamp */
    unsigned exec;      /* execution address - or rest of time stamp */
    int length;         /* length of object in bytes */
    unsigned short attr;      /* attributes - see below for extra bit */
    unsigned short type;      /* object type - see below */
    char *root;
}  DR;
#define   id_of_DR(p)    ((char*)((p)+1))
#define attr_valid (0x00ff)


#define  chunk_size      (30000)   /* must be large enough to hold all the
                                      directory entries for one directory
                                      from each level at once */
#define  index_size       (1000)   /* must be larger than the maximum number
                                      of directory entries that can ever be
                                      present at one time */
#define  max_level           (8)   /* maximum directory hierarchy depth */
#define  pathname_max      (400)   /* maximum path name length */
#define  buff_size       (32768)   /* for buffers used when comparing two
                                      files */


static char *chunk;      /* space for directory entries is allocated from
                            this area */
static char *x_chunk;    /* one greater than last entry available in chunk */

static DR **index;       /* space for directory indices is allocated from
                            this area */
static DR **x_index;     /* one greater than last entry available in index */

static char *apathname;  /* hold current path names */
static char *bpathname;

static char *abuff;      /* address buffers for file comparisons */
static char *bbuff;


#define  OS_GBPB    (0x0c)     /* SWI */


static BOOL no_file_check = FALSE;
static BOOL do_trace = FALSE;


static num_files;        /* count of files found */
static num_dirs;         /* count of directories found */


/* for oserr in file.c ... */

_kernel_oserror *oserr = NULL;

/***************************************************************************/

static int length_of_DR(DR *p)

  /* returns length of the directory record p in bytes including its
     identifier, and rounded up to an integral number of words
  */

{
  return sizeof(DR) + (((strlen(id_of_DR(p))+1) + 3) & ~3);
}

/***************************************************************************/

static int comp_ascii(const void *s1, const void *s2)

 /* must declare as "const void *" to avoid compiler error messages */

{
  return strcmp(id_of_DR(*((DR**)s1)), id_of_DR(*((DR**)s2)));
}

/***************************************************************************/

static void read_one_dir(char *dirname)

  /* dirname is a full path name

     All entries in this directory are read into space addressed by chunk,
     and are indexed in space addressed by index.

     Both chunk and index are updated.
  */

{
  _kernel_swi_regs r;
  _kernel_oserror *e;
  int i;

  if (x_chunk-chunk<0)
  { printf("*** Not enough space:  x_chunk = %d, chunk = %d\n", (int)x_chunk, (int)chunk);
    exit(1);
  }

  r.r[0] = 10;
  r.r[1] = (int)dirname;
  r.r[4] = 0;
  r.r[5] = x_chunk - chunk;
  r.r[6] = 0;

  while (r.r[4] != -1)
  {
    r.r[3] = 1000000;
    r.r[2] = (int)chunk;
/* printf("Space left = %d before reading %s - r4 = %d\n", x_chunk-chunk, dirname, r.r[4]); */
    e = _kernel_swi(OS_GBPB, &r, &r);

    if (e != NULL)
    {
      printf("Error %d while reading directory %s:\n  - %s\n",
                e->errnum, dirname, e->errmess);
      exit(1);
    }

    for (i=0; i<r.r[3]; i++)
    {
      DR *obj = (DR*)chunk;
      int len = length_of_DR(obj);

     /* pack file type and bottom byte of attribute information into a single
        word, and clear the released word for the "root" information */

      obj->type = (unsigned short)(int)(obj->root);
      obj->attr &= attr_valid;
      obj->root = NULL;

      if (index==x_index)
      {
        printf("Insufficient index space\n");
        exit(1);
      }

      *(index++) = obj;

      chunk+=len;
      r.r[5]-=len;
    }
  }
/* printf("Space left = %d after reading %s - r4 = %d\n", x_chunk-chunk, dirname, r.r[4]); */

  return;
}

/***************************************************************************/

static char *read_link_name(char *dirname, char *linkname)

  /* linkname is the name of a link file (held in directory dirname), whose
     contents should be the name of a new RISCOS root directory.

     If this looks plausible, the name is read into malloc'd space, and its
     address returned as result; otherwise the result is NULL.
  */

{
  char buff[256];    /* to hold new root name: must be less than 256 chars */
  char *new_name = buff;
  int in;            /* file handle for open link file */
  char *file_pathname;

 /* open file for input */

  file_pathname = (char *)malloc(strlen(dirname)+strlen(linkname)+2);
                                       /* 2 for '.' and zero terminator */
  if (file_pathname==NULL)
  {
    printf("Run out of space when opening link file\n");
    exit(1);
  }

  strcpy(file_pathname, dirname);
  strcat(strcat(file_pathname, "."), linkname);

  if ((in = file_open_in(file_pathname))==0)  /* cannot open file */
  {
    printf("Cannot open link file\n");
    exit(1);
  }

 /* read up to 255 chars from the link file, and terminate as a string */

  {
    int len = 255 - file_read_next(in, buff, 255);
    int i;

    buff[len] = 0;

    if (!file_eof(in))     /* if not at EOF, it can't be a link file! */
    {
      printf("Link file contains too many characters\n");
      exit(1);
    }

   /* remove leading and trailing spaces/newlines from the new root name */

    len--;
    while (len>=0 && (buff[len]=='\n' || buff[len]==' ')) len--;
    buff[++len] = 0;   /* terminate the root name */

    i = 0;
    while (i<len && (buff[i]=='\n' || buff[i]==' ')) i++;

    if (i==len)            /* the link file is empty */
    {
      printf("Link file is empty\n");
      exit(1);
    }

    new_name = buff+i;
  }

 /* free space occupied by full file name and close link file */

  free(file_pathname);

  file_close(in);

 /* malloc space for new root name, copy it over, and return result */

  {
    char *root_name;

    root_name = (char *)malloc(strlen(new_name)+1);
    if (root_name==NULL)
    {
      printf("No more room to allocate space for new root name\n");
      exit(1);
    }

    strcpy(root_name, new_name);

    return root_name;
  }
}

/***************************************************************************/

void read_dir(char *dirname)

  /* dirname is a full path name

     All entries in this directory and in any directories defined by "link"
     files are read into space addressed by chunk, and are indexed in space
     addressed by index.

     Both chunk and index are updated.

     Lower-case letters are replaced by upper-case letters.

     The entries are then sorted alphanumerically.
  */

{
  DR **prev_index;
  DR **i, **j;
  int num_entries = 0;

 /* start by reading the entries which are directly held in the directory
    dirname */

  prev_index = index;
  read_one_dir(dirname);

 /* now scan each entry to see if it describes a "link" file; if so, the
    entry for the link file itself is removed from the index, and entries
    for the directory whose name is held in the link file are added to the
    end of the index. Any further link files will be automatically picked
    up and processed as the scan proceeds, so no special action is
    necessary to "recurse" */

  i = prev_index;
  while (i<index)
  {
    DR *obj = *i;

    if (id_of_DR(obj)[0] == '+')       /* link filenames start with '+' */
    {
      char *root_name;

     /* remove the link file entry and move down any remaining entries in
        the index */

      for (j=i; j<(index-1); j++) *j = *(j+1);
      index--;
      i--;

     /* determine name of directory in which the link file lives */

      if (obj->root != NULL) dirname = obj->root;

     /* read new root name and add new entries to the end of the index */

      root_name = read_link_name(dirname, id_of_DR(obj));
      {
        DR **prev_index = index;

        read_one_dir(root_name);

       /* store the RISC OS root directory name in the root field of these
          new entries */

        for (j=prev_index; j<index; j++) (*j)->root = root_name;
      }
    }
    else    /* it's a "real" object */
    {
      int j;
      char *id = id_of_DR(obj);
      int id_len = strlen(id);

     /* replace lower case by upper case letters in object's name */
      for (j=0; j<id_len; j++)
        if ('a'<=id[j] && id[j]<='z') id[j] -= ('a'-'A');

      num_entries++;
    }

    i++;
  }

/* printf("Space left = %d after reading %s - r4 = %d\n", x_chunk-chunk, dirname, r.r[4]); */
  qsort(prev_index, num_entries, sizeof(DR*), comp_ascii);

  return;
}

/***************************************************************************/

static void compare_files(char *id)

  /* compares the files <apathname>.id and <bpathname>.id - which are already
     known to have the same length.
  */

{
  int lena = strlen(apathname);
  int lenb = strlen(bpathname);
  int len = strlen(id);

  int ain;      /* file handles */
  int bin;

  int not_read = 0;
  int i;
  int buffs = 0;    /* counts number of buffers read */

 /* check there's enough space to extend the path names */

  if (lena+len+2 > pathname_max)
  {
    printf("Insufficient space to hold path name for %s in %s\n",
              id, apathname);
    return;
  }

  if (lenb+len+2 > pathname_max)
  {
    printf("Insufficient space to hold path name for %s in %s\n",
              id, bpathname);
    return;
  }

  strcat(strcat(apathname, "."), id);
  strcat(strcat(bpathname, "."), id);
/* printf(" Opening file %s\n", apathname); */
  ain = file_open_in(apathname);
/* printf(" Opening file %s\n", bpathname); */
  bin = file_open_in(bpathname);

  apathname[lena] = 0;
  bpathname[lenb] = 0;

  if (ain==0)
  {
    printf("Cannot open file %s in %s\n", id, apathname);
    if (bin!=0) file_close(bin);
    return;
  }

  if (bin==0)
  {
    printf("Cannot open file %s in %s\n", id, bpathname);
    if (ain!=0) file_close(ain);
    return;
  }


 /* both files open now - compare their contents */

  while (TRUE)
  {
    if (file_eof(ain))
    {
      if (file_eof(bin))
      {
        file_close(ain);
        file_close(bin);
        return;
      }
      printf("A at EOF and B is not!\n");
      exit(1);
    }

    if (not_read!=0)
    {
      printf("Non-zero value of not_read and not at EOF!\n");
      exit(1);
    }

   /* read the next buffer-full of data from ain and bin */
/* printf(" About to read next block from %s\n", apathname); */
    not_read = file_read_next(ain, abuff, buff_size);

/* printf(" About to read next block from %s\n", bpathname); */
    if (file_read_next(bin, bbuff, buff_size) != not_read)
    {
      printf("Different values of not_read from A and B!\n");
      exit(1);
    }

    buffs++;

   /* compare the two buffers */

    for (i=0; i<buff_size-not_read; i++)
      if (abuff[i] != bbuff[i])
      {
        printf("Files %s in %s differ at byte %d\n", id, apathname,
                 buffs*buff_size+i);
        file_close(ain);
        file_close(bin);
        return;
      }
  }
}

/***************************************************************************/

static BOOL compare_fields(DR *adir, DR *bdir)

  /* compares the fields of the two directory entries adir and bdir; result
     is TRUE iff they are the same, or only differ in load, exec and/or
     attr fields
  */

{
  if (strcmp(id_of_DR(adir), id_of_DR(bdir))!=0)
  {
    printf("Identifiers differ for %s entry in %s\n", id_of_DR(adir), apathname);
    return FALSE;
  }

  if (adir->type != bdir->type)
  {
    printf("Type values differ for %s entry in %s\n", id_of_DR(adir), apathname);
    return FALSE;
  }

  if (adir->type == 1 && adir->length != bdir->length)
  {
    printf("Length values differ for %s file in %s\n", id_of_DR(adir), apathname);
    return FALSE;
  }

  if (adir->load != bdir->load)
    printf("Load values differ for %s entry in %s\n", id_of_DR(adir), apathname);

  if (adir->exec != bdir->exec)
    printf("Exec values differ for %s entry in %s: %08x %08x\n", id_of_DR(adir), apathname, adir->exec, bdir->exec);

  if ((adir->attr & attr_valid) != (bdir->attr & attr_valid))
    printf("Attribute values differ for %s entry in %s\n", id_of_DR(adir), apathname);

  return TRUE;
}

/***************************************************************************/

static void compare(int level)

  /* compares the directories <apathname> and <bpathname> recursively
  */

{
  char *prev_chunk = chunk;    /* remember entry values to restore on exit */
  DR **prev_index = index;

  DR **adir, **bdir;           /* will index the current directories */
  int len;                     /* which each contain len entries */

  num_dirs++;


 /* check level */

  if (level > max_level)
  {
    printf("Directory %s exceeds permitted number of levels\n", apathname);
    return;
  }



 /* read the directories, and check that they each have the same number of
    entries */

  adir = index;
  read_dir(apathname);
  bdir = index;
  read_dir(bpathname);

  len = bdir - adir;
  if (index-bdir != len)
  {
    printf("Directory %s does not have the same number of entries in both hierarchies\n", apathname);
    chunk = prev_chunk;
    index = prev_index;
    return;
  }


 /* check each directory entry in turn */

  {
    int i;
    for (i=0; i<len; i++)
    {
      DR *aobj = adir[i];
      DR *bobj = bdir[i];
      char *prev_apathname;
      char *prev_bpathname;

      if (do_trace)
        printf("Comparing %s with %s at level %d\n", id_of_DR(aobj), id_of_DR(bobj), level);

     /* preserve - and then reset - pathnames if this is a "linked" object */
      if (aobj->root != NULL)
      {
        prev_apathname = malloc(strlen(apathname)+1);
        if (prev_apathname==NULL)
        {
          printf("Not enough space to preserve pathname for new root\n");
          exit(1);
        }
        strcpy(prev_apathname, apathname);
        strcpy(apathname, aobj->root);
      }
      if (bobj->root != NULL)
      {
        prev_bpathname = malloc(strlen(bpathname)+1);
        if (prev_bpathname==NULL)
        {
          printf("Not enough space to preserve pathname for new root\n");
          exit(1);
        }
        strcpy(prev_bpathname, bpathname);
        strcpy(bpathname, bobj->root);
      }

     /* check fields first - only if these are the same are further checks
        undertaken */

      if (compare_fields(aobj, bobj))
      {
        char *id = id_of_DR(aobj);

        switch (aobj->type)
        {
          case 1:              /* file */
            if (!no_file_check) compare_files(id);
            num_files++;
            break;

          case 2:              /* directory */
            {
              int lena = strlen(apathname);
              int lenb = strlen(bpathname);
              int len = strlen(id);

             /* check there's enough space to extend the path names */

              if (lena+len+2 > pathname_max)
              {
                printf("Insufficient space to hold path name for %s in %s\n",
                          id, apathname);
                break;
              }

              if (lenb+len+2 > pathname_max)
              {
                printf("Insufficient space to hold path name for %s in %s\n",
                          id, bpathname);
                break;
              }

              strcat(strcat(apathname, "."), id);
              strcat(strcat(bpathname, "."), id);

             /* recurse */

              compare(level+1);

              apathname[lena] = 0;
              bpathname[lenb] = 0;
            }
            break;

          case 3:              /* PC partition - RIC OS 3 only! */
            printf("File %s in %s is a PC partition - contents not checked\n",
                       id, apathname);
            break;

          default:             /* not known */
            printf("Object %s in directory %s has unknown type %d\n",
                      id, apathname, aobj->type);
            break;
        }
      }

     /* restore pathnames if this was a "linked" object */
      if (aobj->root != NULL)
      {
        strcpy(apathname, prev_apathname);
        free(prev_apathname);
      }
      if (bobj->root != NULL)
      {
        strcpy(bpathname, prev_bpathname);
        free(prev_bpathname);
      }

    }
  }


 /* restore entry values before exit */

  chunk = prev_chunk;
  index = prev_index;

  return;
}

/***************************************************************************/

int main(int argc, char *argv[])

{
  if (argc < 2+1)  /* must have at least two arguments! */
  {
    printf("To compare two hierarchies use *compare <root1> <root2>\n");
    exit(1);
  }

 /* read any options */

  {
    int i;

    for (i=3; i<=argc; i++)
    {
      if (strcmp(argv[i], "-nofile")==0)
        no_file_check = TRUE;
      else if (strcmp(argv[i], "-trace")==0)
        do_trace = TRUE;
    }
  }

 /* allocate space */

  apathname = (char*)malloc(pathname_max);
  bpathname = (char*)malloc(pathname_max);

  abuff = (char*)malloc(buff_size);
  bbuff = (char*)malloc(buff_size);

  chunk = (char*)malloc(chunk_size);
  x_chunk = chunk + chunk_size;

  index = (DR**)malloc(index_size*sizeof(DR**));
  x_index = index + index_size;

  if (index==NULL || abuff==NULL || bbuff==NULL || chunk==NULL)
  {
    printf("Insufficient space available\n");
    exit(1);
  }


 /* initialise */

  strcpy(apathname, argv[1]);
  strcpy(bpathname, argv[2]);

  num_dirs = 0;
  num_files = 0;


 /* do it */

  printf("Comparing %s with %s\n", apathname, bpathname);

  compare(1);

  printf("Comparison complete: %d directories and %d files found\n",
             num_dirs, num_files);

  return 0;
}

/***************************************************************************/
