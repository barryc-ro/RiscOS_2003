/* eximage.c */

/***************************************************************************/
/*
This program can be used to examine the contents of a CD-ROM image in various
ways.

Options are as follows:

   eximage -scsi <id> [ <startblock> ]*    for an image on a raw SCSI device
           -file <fname>                   for an image in a file
           -cd <id>                        for an image on a CD
           -trace                          to output progress messages
                                            during c paths, c dirss
           -relax <int>                    for non-ISOFORM checks (see below)

         * default for <startblock> is 0

   Default is "-scsi 2"

   Possible values for -relax parameter:

      1 - Allow non-zero GMT offsets in date-time fields
          Allow System Area Size = 0 as well as 32
          Allow extensions in filenames which are at most 3 characters long
           (Note: the check on the order of directory entries may fail
            erroneously for files whose names are the same, but which have
            different extensions or versions)

      2 - Allow non-zero GMT offsets in date-time fields
          Allow any size System Area
          Allow extensions in filenames which are at most 3 characters long
           (Note: the check on the order of directory entries may fail
            erroneously for files whose names are the same, but which have
            different extensions or versions)
          Final block of a file does not need to be zero-padded


The following commands are then available:

    b[lock]  n1  [n2]           dump block(s) n1 [to n2]
    n[ext]                      dump next block
    [e]x[it]                    exit
    c[heck] pvd                 check Primary Volume Descriptor
    c[heck] vdst                check Volume Descriptor Set Terminator
    c[heck] dirs                check directory structure and DDs
    c[heck] paths               check Path Tables and Path Table structure
                                 versus Directory Structure
    c[heck] all                 check everything
    l[ist] pvd                  list Primary Volume Descriptor
    l[ist] lpt n                list Type L Path Table starting at block n
    l[ist] mpt n                list Type M Path Table starting at block n
    l[ist] dir n                list Directory Block n


*/
/***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"

#include "../../main.h"
#include "../../file.h"
#include "../../scsi.h"

#include "eximage.h"

/* options */

static int scsi_id;
static int scsi_start;
static char *file_name;
static int cd_id;
BOOL trace = FALSE;
int relax = 0;

/* generic image access functions */

static void (*ropen_image)(void);
BOOL (*read_image_block)(char *buff, int n);      /* now external */
static void (*rclose_image)(void);

/* scsi image access functions and variables */

static void scsi_ropen_image(void);
static BOOL scsi_read_image_block(char *buff, int n);
static void scsi_rclose_image(void);

static int scsi_blocks_per_ISO_block;

/* file image access functions and variables */

static void file_ropen_image(void);
static BOOL file_read_image_block(char *buff, int n);
static void file_rclose_image(void);

static int file_handle;

/* cd image access functions and variables */

static void cd_ropen_image(void);
static BOOL cd_read_image_block(char *buff, int n);
static void cd_rclose_image(void);

static int cd_handle[5];

#define  CDFS_ConvertDriveToDevice  (0x41e80)     /* SWI's */
#define  CD_ReadData                (0x41241)

/* vars for argument processing */

static char **args;
static int next_arg;
static int num_args;

/* vars for command processing */

static char *buff;

/* just to fool the low-level scsi routines ... */

int output_buffer_size = ISO_block_size;
_kernel_oserror *oserr = NULL;

/* vars for the checking and listing modules */

char *b1 = NULL;
char *b2 = NULL;
char *p = NULL;


/***************************************************************************/

static void scsi_ropen_image(void)

{
  scsi_initialise(scsi_id);

  if (scsi_block_size > ISO_block_size)
  {
    printf("*** SCSI block size (%d) must be less than or equal to ISO block size (%d)\n",
                 scsi_block_size, ISO_block_size);
    exit(1);
  }

  if (ISO_block_size % scsi_block_size != 0)
  {
    printf("*** ISO block size (%d) must be a multiple of SCSI block size (%d)\n",
                 ISO_block_size, scsi_block_size);
  }

  scsi_blocks_per_ISO_block = ISO_block_size/scsi_block_size;

  return;
}

/***************************************************************************/

static BOOL scsi_read_image_block(char *buff, int n)

{
  return scsi_read(buff, scsi_start + n*scsi_blocks_per_ISO_block,
                           scsi_blocks_per_ISO_block);
}

/***************************************************************************/

static void scsi_rclose_image(void)

{
  return;
}

/***************************************************************************/

static void file_ropen_image(void)

{
  if ((file_handle = file_open_in(file_name))==0)
  {
    printf("Cannot open file '%s'\n", file_name);
    exit(1);
  }

  return;
}

/***************************************************************************/

BOOL file_read_image_block(char *buff, int n)

{
  return file_read(file_handle, buff, n*ISO_block_size, ISO_block_size);
}

/***************************************************************************/

static void file_rclose_image(void)

{
  file_close(file_handle);
  return;
}

/***************************************************************************/

static void cd_ropen_image(void)

{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  r.r[0] = cd_id;

  if ((e = _kernel_swi(CDFS_ConvertDriveToDevice, &r, &r)) != NULL)
  {
    printf("*** Cannot find CD-ROM device %d:\n   - %s\n",
             cd_id, e->errmess);
    exit(1);
  }

  if (r.r[1] == -1)
  {
    printf("*** CD-ROM drive %d not present\n", cd_id);
    exit(1);
  }

  cd_handle[0] = r.r[1] & 0x7;
  cd_handle[1] = (r.r[1]>> 3) &    0x3;
  cd_handle[2] = (r.r[1]>> 5) &    0x7;
  cd_handle[3] = (r.r[1]>> 8) &   0xff;
  cd_handle[4] = (r.r[1]>>16) & 0xffff;

  return;
}

/***************************************************************************/

static BOOL cd_read_image_block(char *buff, int n)

{
  _kernel_swi_regs r;

  r.r[0] = 0;              /* Logical Block addressing mode */
  r.r[1] = n;              /* block number */
  r.r[2] = 1;              /* number of blocks to transfer */
  r.r[3] = (int)buff;      /* buffer to read data into */
  r.r[4] = ISO_block_size; /* block size */
  r.r[7] = (int)cd_handle;

  return (_kernel_swi(CD_ReadData, &r, &r) == NULL);
}

/***************************************************************************/

static void cd_rclose_image(void)

{
  return;
}

/***************************************************************************/

static void print_block(int n)

  /* print out block n which is in buff */

{
  int i, j;
  int x;

  printf("\nBlock %d\n", n);

  for (j=0; j<2048; j+=16)
  {
    x=0;
    for (i=j; i<j+16; i++) x+=buff[i];
    if (x!=0)
    {
      printf("\n%4d ", j);
      for (i=j; i<j+16; i++)
      {
        x = buff[i];
        printf(" %02x", x);
      }
      printf("  ");
      for (i=j; i<j+16; i++)
      {
        x = buff[i];
        if (0x20<=x && x<=0x7e) printf("%c", x); else printf(" ");
      }

    }
  }

  printf("\n\n");
}

/***************************************************************************/

static void dump_block(int n)

{
  if (read_image_block(buff, n))
    print_block(n);
  else
    printf("*** Cannot read block %d\n", n);

  return;
}

/***************************************************************************/

static char *get_param(void)

  /* returns the value of an option parameter, if found; if not, returns
     NULL
  */

{
  if (next_arg == num_args ||        /* there are no more arguments */
      args[next_arg][0] == '-')      /* the next argument is an option */
    return NULL;

  return args[next_arg++];
}

/***************************************************************************/

static BOOL get_int_value(char *option, int *var)

  /* Called to read an optional option parameter that is an integer.

     If there are no more parameters, the result is FALSE.

     Otherwise, the parameter is checked: if it does not conform to the
     syntax below, an error is reported.

     Otherwise, the value is assigned to var.

       Note that the following syntax is accepted:

            [&]<digit(s)>[k|K]

       A leading & causes the <digit(s)> to be interpreted as hexadecimal
       values.

       A terminating [k|K] causes the value to be multiplied by 1024.
  */

{
  char *param;  /* to hold the parameter value */

 /* check that the option is followed by a parameter value */

  if ((param = get_param()) == NULL) return FALSE;

 /* convert parameter value to integer */

  {
    int len = strlen(param);
    int i = 0;                 /* indexes current character in param */
    int base = 10;             /* or 16 */
    int n = 0;                 /* accumulates value */

    if (param[0] == '&')       /* & as first char => hexadecimal */
    {
      base = 16;
      i++;
    }

    do
    {
      char ch = param[i];      /* pick up next character from parameter */

      if (ch>='0' && ch<='9')  /* decimal digit */
      {
        n = n*base + (ch-'0');
        continue;
      }

      if (base==16)
      {
        if (ch>='A' && ch<='F')   /* hexadecimal digit - uc */
        {
          n = n*base + (ch+10-'A');
          continue;
        }
        if (ch>='a' && ch<='f')   /* hexadecimal digit - lc */
        {
          n = n*base + (ch+10-'a');
          continue;
        }
      }

      if (ch=='k' || ch=='K')     /* k or K => multiply by 2^10 */
      {
        n *= 1024;
        i++;
        break;                    /* k|K must be last character */
      }

      break;                      /* any other char is unexpected */

    } while (++i<len);

    if (i<len)     /* an unexpected character found in param */
    {
      printf("*** Unexpected character in parameter value '%s'\n", param);
      exit(1);
    }

    *var = n;
  }

  return TRUE;
}

/***************************************************************************/

static void get_param_str(char *option, char **var)

  /* Called to read an option parameter that is a string.

     If there are no more parameters, an error is reported.

     Otherwise its value is assigned to var.
  */

{
  char *param;  /* to hold the parameter value */

 /* check parameter value is present, and fetch it */

  if ((param = get_param()) == NULL)
  {
    printf("*** Option '%s' is not followed by a parameter value\n", option);
    exit(1);
  }

 /* assign parameter value to variable */

  *var = param;

  return;
}

/***************************************************************************/

static void read_args(char *opts[], int n)

{
  char *option;

 /* default is "-scsi 2" */

  ropen_image = scsi_ropen_image;
  read_image_block = scsi_read_image_block;
  rclose_image = scsi_rclose_image;
  scsi_id = 2;
  scsi_start = 0;

 /* set up arg processing vars */

  args = opts;
  next_arg = 1;
  num_args = n;

  while (++next_arg <= num_args)
  {
    option = opts[next_arg-1];

    if (strcmp(option, "-scsi")==0)
    {
      if (!get_int_value(option, &scsi_id))
      {
        printf("*** -scsi option must be followed by device id\n");
        exit(1);
      }

      scsi_start = 0;   /* default */
      get_int_value(option, &scsi_start);

      ropen_image = scsi_ropen_image;
      read_image_block = scsi_read_image_block;
      rclose_image = scsi_rclose_image;
    }

    else if (strcmp(option, "-file")==0)
    {
      get_param_str(option, &file_name);

      ropen_image = file_ropen_image;
      read_image_block = file_read_image_block;
      rclose_image = file_rclose_image;
    }

    else if (strcmp(option, "-cd")==0)
    {
      if (!get_int_value(option, &cd_id))
      {
        printf("*** -cd option must be followed by device id\n");
        exit(1);
      }

      ropen_image = cd_ropen_image;
      read_image_block = cd_read_image_block;
      rclose_image = cd_rclose_image;
    }

    else if (strcmp(option, "-trace")==0)
      trace = TRUE;

    else if (strcmp(option, "-relax")==0)
    {
      if (!get_int_value(option, &relax))
      {
        printf("*** -relax option must be followed by an integer\n");
        exit(1);
      }
    }

    else
    {
      printf("*** Unknown option '%s'\n", option);
      exit(1);
    }
  }

  return;
}

/***************************************************************************/

static int get_int()

{
  char *s = strtok(NULL, " ");

  if (s==NULL)
    return -1;
  else
  {
    int n;

    sscanf(s, "%d", &n);
    return n;
  }
}

/***************************************************************************/

static char *get_str()

{
  char *s = strtok(NULL, " ");

  if (s==NULL)
    return "";
  else
    return s;
}

/***************************************************************************/

int main(int argc, char *argv[])

{
  char line[255];
  char *comm;
  char *option;
  int block_num = 0;
  int n;

 /* allocate buffers */

  b1 = (char*)malloc(ISO_block_size);     /* for check and list modules */
  b2 = (char*)malloc(ISO_block_size);

  if ((buff = (char*)malloc(ISO_block_size)) == NULL)
  {
    printf("*** No space for buffer\n");
    exit(1);
  }

 /* read options */

  read_args(argv, argc);

 /* open image device */

  ropen_image();

 /* process commands */

  while (TRUE)
  {
    printf("> ");
    gets(line);

    if (strcmp(line, "")==0) continue;

    comm = strtok(line, " ");

    if (strcmp(comm, "block")==0 || strcmp(comm, "b")==0)
    {
      n = get_int();

      if (n<0) continue;

      block_num = n;

      n = get_int();

      if (n<block_num)
        dump_block(block_num);
      else
      {
        for (; block_num<=n; block_num++) dump_block(block_num);
        block_num--;
      }
    }

    else if (strcmp(comm, "next")==0 || strcmp(comm, "n")==0)
    {
      block_num++;
      dump_block(block_num);
    }

    else if (strcmp(comm, "exit")==0 || strcmp(comm, "x")==0)
    {
      rclose_image();
      break;
    }

    else if (strcmp(comm, "check")==0 || strcmp(comm, "c")==0)
    {
      option = get_str();

      if (strcmp(option, "pvd")==0)
      {
        check_pvd();
      }

      else if (strcmp(option, "vdst")==0)
      {
        check_vdst();
      }

      else if (strcmp(option, "dirs")==0)
      {
        check_pvd();
        check_dirs();
      }

      else if (strcmp(option, "paths")==0)
      {
        check_pvd();
        check_paths();
      }

      else if (strcmp(option, "all")==0)
      {
        check_pvd();
        check_vdst();
        check_all();
      }

      else
      {
        printf("*** Unknown check option '%s'\n", option);
      }
    }

    else if (strcmp(comm, "list")==0 || strcmp(comm, "l")==0)
    {
      option = get_str();
      n = get_int();

      if (strcmp(option, "pvd")==0)
      {
        list_pvd();
      }

      else if (strcmp(option, "lpt")==0)
      {
        list_lpt(n);
      }

      else if (strcmp(option, "mpt")==0)
      {
        list_mpt(n);
      }

      else if (strcmp(option, "dir")==0)
      {
        list_dir(n);
      }

      else
      {
        printf("*** Unknown list option '%s'\n", option);
      }
    }

    else
      printf("*** Unknown command '%s'\n", comm);
  }

  return 0;
}

/***************************************************************************/
