/* expvd.c */

/***************************************************************************/
/*
Check/list the Primary Volume Descriptor
*/
/***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "eximage.h"


int typeL_PT = -1;
int typeM_PT = -1;
int Root_Dir = -1;
int Root_Dir_len = -1;
char Root_Dir_time[20];
int image_size = -1;
int PT_size = -1;
char copy_fileid[38];

char *s1 = NULL;
char *s2 = NULL;


/***************************************************************************/

void check_pvd()

  /* checks the PVD, setting:
         - typeL_PT
         - typeM_PT
         - Root_Dir
         - image_size
         - PT_size
         - copy_fileid */

{
  char create_time[27];

  printf("Checking PVD\n");

  s1 = "PVD";

  if ((p = g_block(16, b1)) == NULL) return;

  c_num8(0, "Volume Descriptor Type", 1);
  c_string(1, "Standard Identifier", 5, "CD001");
  c_num8(6, "Volume Descriptor Version", 1);
  c_zero(7, "unused(7)", 1);
  c_string(8, "System Identifier", 32, "");
  v_dstring(40, "Volume Identifier", 32);
  c_zero(72, "unused(72)", 8);
  image_size = g_num32B(80, "Volume Space Size");
  c_zero(88, "unused(88)", 32);
  c_num16B(120, "Volume Set Size", 1);
  c_num16B(124, "Volume Sequence Number", 1);
  c_num16B(128, "Logical Block Size", 2048);
  PT_size = g_num32B(132, "Path Table Size");
  typeL_PT = g_num32L(140, "Type L Path Table Occurrence");
  c_num32L(144, "Optional Type L Path Table Occurrence", 0);
  typeM_PT = g_num32M(148, "Type M Path Table Occurrence");
  c_num32M(152, "Optional Type M Path Table Occurrence", 0);

 /* Root Directory record */

  p += 156;

  c_num8(0, "Length of Root Directory Record", 34);
  c_num8(1, "EAR length for Root Directory Record", 0);
  Root_Dir = g_num32B(2, "Location of Root Directory");
  Root_Dir_len = g_num32B(10, "Length of Root Directory");
  g_datetimeS(18, "Recording Date and Time for Root Directory",
                                                   Root_Dir_time);
  c_num8(25, "Flags for Root Directory", 2);
  c_num8(26, "File Unit Gap for Root Directory", 0);
  c_num8(27, "Interleave Gap Size for Root Directory", 0);
  c_num16B(28, "Volume Sequence Number for Root Directory", 1);
  c_num8(32, "Length of Object Id for Root Directory", 1);
  c_num8(33, "Root Directory Identifier", 0);

  p -= 156;

  c_string(190, "Volume Set Identifier", 128, "");
  v_astring(318, "Publisher Identifier", 128);
  c_string(446, "Data Preparer Identifier", 128,
                                    "ACORN ISO 9660 FORMATTER VERSION 1.10");
  c_string(574, "Application Identifier", 128, "");
  g_fileid(702, "Copyright File Identifier", 37, copy_fileid);
  c_string(739, "Abstract File Identifier", 37, "");
  c_string(776, "Bibliographic File Identifier", 37, "");
  g_datetimeL(813, "Volume Creation Date and Time", create_time);
  c_datetimeL(830, "Volume Modification Date and Time", create_time);
  c_datetimeL(847, "Volume Expiration Date and Time", "unset");
  c_datetimeL(864, "Volume Effective Date and Time", "unset");
  c_num8(881, "File Structure Version", 1);
  c_zero(882, "reserved etc(882...)", 2048-882);

  printf("PVD check complete\n");

  return;
}

/***************************************************************************/

void check_vdst()

{
  s1 = "VDST";

  printf("Checking VDST\n");

  if ((p = g_block(17, b1))==NULL) return;

  c_num8(0, "Volume Descriptor Type", 255);
  c_string(1, "Standard Identifier", 5, "CD001");
  c_num8(6, "Volume Descriptor Version", 1);
  c_zero(7, "unused(7...)", 2048-7);

  printf("VDST check complete\n");

  return;
}

/***************************************************************************/

void list_pvd()

  /* lists the contents of the pvd */

{
  s1 = "PVD";

  if ((p = g_block(16, b1))==NULL) return;

  printf("\nPrimary Volume Descriptor Block:\n\n");

  p_num8(0, "Volume Descriptor Type");
  p_string(1, "Standard Identifier", 5);
  p_num8(6, "Volume Descriptor Version");

  p_string(8, "System Identifier", 32);
  p_string(40, "Volume Identifier", 32);

  p_num32B(80, "Volume Space Size");

  p_num16B(120, "Volume Set Size");
  p_num16B(124, "Volume Sequence Number");
  p_num16B(128, "Logical Block Size");
  p_num32B(132, "Path Table Size");
  p_num32L(140, "Type L Path Table Occurrence");
  p_num32L(144, "Optional Type L Path Table Occurrence");
  p_num32M(148, "Type M Path Table Occurrence");
  p_num32M(152, "Optional Type M Path Table Occurrence");

 /* Root Directory record */

  p += 156;

  printf("  Root Directory Record:\n");
  p_num8(1, "  EAR length");
  p_num32B(2, "  Location");
  p_num32B(10, "  Length");
  p_datetimeS(18, "  Recording Date and Time");
  p_num8(25, "  Flags");
  p_num8(26, "  File Unit Gap");
  p_num8(27, "  Interleave Gap Size");
  p_num16B(28, "  Volume Sequence Number");

  p -= 156;

  p_string(190, "Volume Set Identifier", 128);
  p_string(318, "Publisher Identifier", 128);
  p_string(446, "Data Preparer Identifier", 128);
  p_string(574, "Application Identifier", 128);
  p_string(702, "Copyright File Identifier", 37);
  p_string(739, "Abstract File Identifier", 37);
  p_string(776, "Bibliographic File Identifier", 37);
  p_datetimeL(813, "Volume Creation Date and Time");
  p_datetimeL(830, "Volume Modification Date and Time");
  p_datetimeL(847, "Volume Expiration Date and Time");
  p_datetimeL(864, "Volume Effective Date and Time");
  p_num8(881, "File Structure Version");

  printf("\n");

  return;
}

/***************************************************************************/
