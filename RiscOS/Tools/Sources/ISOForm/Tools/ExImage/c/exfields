/* exfields.c */

/***************************************************************************/
/*
Checking/listing basic fields
*/
/***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "kernel.h"

#include "eximage.h"


static char ts[300];       /* used for temporary string storage */

#define  OS_ConvertDateAndTime (0xc1)      /* SWI */

/***************************************************************************/

char *g_block(int n, char *buff)

{
  if (read_image_block(buff, n))
    return buff;
  else
  {
    printf("*** Cannot read block %d\n", n);
    return NULL;
  }  
}

/***************************************************************************/

void err(int type, ...)

{
  va_list ap;

  va_start(ap, type);

  switch (type)
  {
    case 0:
      printf("%s/%s - %s\n", s1, s2, va_arg(ap, char*));
      break;

    case 1:
      printf("%s/%s - expected value %d\n", s1, s2, va_arg(ap, int));
      break;

    case 2:
      printf("%s/%s - expected value '%s'\n", s1, s2, va_arg(ap, char*));
      break;

    case 3:
      vprintf(va_arg(ap, char*), ap);
      break;

    default:
      printf("Unexpected type = %d when calling err\n", type);
      exit(1);
  }

  if (checking_dirs)
    printf("  - while checking DD for '%s' at level %d\n", cc_id, cc_lev);

  if (checking_paths)
    printf("  - while checking PTR %d against DD for '%s'\n", cc_pti, cc_id);

  va_end(ap);
}

/***************************************************************************/

void c_num8(int i, char *d, int v)

{
  if (p[i]!=v) { s2=d; err(1,v); }
}

/***************************************************************************/

void p_num8(int i, char *d)

{
  printf("  %s: %d\n", d, p[i]);
}

/***************************************************************************/

int g_num16L(int i, char *d)

{
  char *pp = p+i;

  return (pp[1]<<8) + pp[0];
}

/***************************************************************************/

void c_num16L(int i, char *d, int v)

{
  if (g_num16L(i, d) != v) { s2=d; err(1,v); }
}

/***************************************************************************/

int g_num16M(int i, char *d)

{
  char *pp = p+i;

  return (pp[0]<<8) + pp[1];
}

/***************************************************************************/

void c_num16M(int i, char *d, int v)

{
  if (g_num16M(i, d) != v) { s2=d; err(1,v); }
}

/***************************************************************************/

void p_num16L(int i, char *d)

{
  printf("  %s: %d\n", d, g_num16L(i, d));
}

/***************************************************************************/

void p_num16M(int i, char *d)

{
  printf("  %s: %d\n", d, g_num16M(i, d));
}

/***************************************************************************/

void c_num16B(int i, char *d, int v)

{
  char *pp = p+i;

  if ((pp[0]!=pp[3]) || (pp[1]!=pp[2]))
  { s2=d; err(0, "invalid num16B field"); }

  if ((pp[2]<<8)+pp[3] != v) { s2=d; err(1,v); }
}

/***************************************************************************/

void p_num16B(int i, char *d)

{
  char *pp = p+i;

  printf("  %s: %d\n", d, (pp[2]<<8)+pp[3]);
}

/***************************************************************************/

void c_num32B(int i, char *d, int v)

{
  if (g_num32B(i, d) != v) { s2=d; err(1,v); }
}

/***************************************************************************/

int g_num32B(int i, char *d)

{
  char *pp = p+i;

  if ( (pp[0]!=pp[7]) ||
       (pp[1]!=pp[6]) ||
       (pp[2]!=pp[5]) ||
       (pp[3]!=pp[4]) )  { s2=d; err(0, "invalid num32B field"); }
  return (pp[4]<<24) + (pp[5]<<16) + (pp[6]<<8) + pp[7];
}

/***************************************************************************/

void p_num32B(int i, char *d)

{
  printf("  %s: %d\n", d, g_num32B(i, d));
}

/***************************************************************************/

int g_num32L(int i, char *d)

{
  char *pp = p+i;

  return (pp[3]<<24) + (pp[2]<<16) + (pp[1]<<8) + pp[0];
}

/***************************************************************************/

void c_num32L(int i, char *d, int v)

{
  if (g_num32L(i, d) != v) { s2=d; err(1,v); }
}

/***************************************************************************/

void p_num32L(int i, char *d)

{
  printf("  %s: %d\n", d, g_num32L(i, d));
}

/***************************************************************************/

int g_num32M(int i, char *d)

{
  char *pp = p+i;

  return (pp[0]<<24) + (pp[1]<<16) + (pp[2]<<8) + pp[3];
}

/***************************************************************************/

void c_num32M(int i, char *d, int v)

{
  if (g_num32M(i, d) != v) { s2=d; err(1,v); }
}

/***************************************************************************/

void p_num32M(int i, char *d)

{
  printf("  %s: %d\n", d, g_num32M(i, d));
}

/***************************************************************************/

void g_string(int i, char *d, int n, char *r)

{
  int j = n-1;
  char *pp = p+i;

 /* ignore trailing spaces */
  while (pp[j]==' ' && j>=0) j--;

  if (j<0) { r[0]=0; return; }  /* null string */

 /* copy to result */
  memcpy(r, pp, j+1);
  r[j+1] = 0;
}

/***************************************************************************/

void c_string(int i, char *d, int n, char *v)

{
  g_string(i, d, n, ts);
  if (strcmp(ts, v) != 0) { s2=d; err(2,v); }
}

/***************************************************************************/

void p_string(int i, char *d, int n)

{
  g_string(i, d, n, ts);
  printf("  %s: %s\n", d, ts);  
}

/***************************************************************************/

void v_astring(int i, char *d, int n)

{
  int j;

  g_string(i, d, n, ts);

  for (j=0; j<strlen(ts); j++)
  {
    char ch = ts[j];

    if ( ch<0x20 || (ch>0x22 && ch<0x25)
                 || (ch==0x40)
                 || (ch>0x5a && ch<0x5f)
                 || ch>0x5f )  
    { s2=d; err(0, "illegal characters in a-string"); }
  }  
}

/***************************************************************************/

void v_dstring(int i, char *d, int n)

{
  int j;

  g_string(i, d, n, ts);

  for (j=0; j<strlen(ts); j++)
  {
    char ch = ts[j];

    if ( ch<0x30 || (ch>0x39 && ch<0x41)
                 || (ch>0x5a && ch<0x5f)
                 || ch>0x5f ) 
      { s2=d; err(0, "illegal characters in d-string"); }
  }  
}

/***************************************************************************/

void c_zero(int i, char *d, int n)

{
  int j;
  char *pp = p+i;

  for (j=0; j<n; j++)
    if (pp[j] != 0)
    { s2=d; err(0, "non-zero value(s) in zero field"); return; }
}

/***************************************************************************/

void g_fileid(int i, char *d, int n, char *r)

{
  g_string(i, d, n, r);

  switch (relax)
  {
    case 0:
      if (r[0]!=0 && strcmp(r+(strlen(r)-3), ".;1")!=0)
      { s2=d; err(0, "'.;1' missing from fileid"); }
      return;

    case 1:
    case 2:
      if (r[0]!=0 && strcmp(r+(strlen(r)-2), ";1")!=0)
      { s2=d; err(0, "';1' missing from fileid"); }
      return;
  }
}

/***************************************************************************/

void g_objid(int i, char *d, int n, char *r)

{
  g_string(i, d, n, r);

  if (r[0]==0) strcpy(r, "**self**");
  if (r[0]==1 && r[1]==0) strcpy(r, "**parent**");
}

/***************************************************************************/

void c_datetimeL(int i, char *d, char *v)

{
  g_datetimeL(i, d, ts);
  if (strcmp(ts, v)!=0) { s2=d; err(2,v); }
}

/***************************************************************************/

static void c_2(char *p, int low, int high)

{
  int d1 = p[0]-'0';
  int d2 = p[1]-'0';
  int x = d1*10 + d2;

  if (d1<0 || d1>9 || d2<0 || d2>9)
    err(0, "non-digit in datetimeL value");

  if (x<low || x>high) err(0, "datetimeL field value out-of-range");
}

/***************************************************************************/

void g_datetimeL(int i, char *d, char *r)

{
  char *pp = p+i;

  if (strcmp(pp, "0000000000000000")==0)
    strcpy(r, "unset");
  else
  {
    s2=d;
    c_2(pp, 19, 20);    memcpy(r, pp, 2);
    c_2(pp+2, 0, 99);   memcpy(r+2, pp+2, 2);
    c_2(pp+4, 1, 12);   r[4] = '-';   memcpy(r+5, pp+4, 2);
    c_2(pp+6, 1, 31);   r[7] = '-';   memcpy(r+8, pp+6, 2);   
    c_2(pp+8, 0, 23);   r[10] = ' ';  memcpy(r+11, pp+8, 2);
    c_2(pp+10, 0, 59);  r[13] = ':';  memcpy(r+14, pp+10, 2);
    c_2(pp+12, 0, 59);  r[16] = ':';  memcpy(r+17, pp+12, 2);
    c_2(pp+14, 0, 99);  r[19] = ':';  memcpy(r+20, pp+14, 2);
    if (pp[16] != 0 && relax != 1 && relax != 2)
      err(0, "non-zero GMT offset");  r[22] = 0;
  }
}

/***************************************************************************/

void c_datetimeS(int i, char *d, char *v)

{
  g_datetimeS(i, d, ts);
  if (strcmp(ts, v)!=0) { s2=d; err(2,v); }
}

/***************************************************************************/

void p_datetimeL(int i, char *d)

{
  g_datetimeL(i, d, ts);
  printf("  %s: %s (GMT=%d)\n", d, ts, p[i+16]);
}

/***************************************************************************/

static void gS_2(int n, int low, int high, char *r)

{
  int d1 = n/10;
  int d2 = n%10;

  if (n<low || n>high)
  {
    err(0, "datetimeS field value out of range");
    r[0] = r[1] = '*';
  }

  r[0] = d1+'0';
  r[1] = d2+'0';
}

/***************************************************************************/

void g_datetimeS(int i, char *d, char *r)

{
  char *pp = p+i;
  char dd[2];

  if (pp[0]==0 && pp[1]==0 && pp[2]==0 && pp[3]==0 &&
      pp[4]==0 && pp[5]==0 && pp[6]==0) strcpy(r, "unset");
  else
  {
    s2=d;
    gS_2((pp[0]+1900)/100, 19, 20, dd);     memcpy(r, dd, 2);
    gS_2(pp[0]%100, 0, 99, dd);             memcpy(r+2, dd, 2);
    gS_2(pp[1], 1, 12, dd);   r[4] = '-';   memcpy(r+5, dd, 2);
    gS_2(pp[2], 1, 31, dd);   r[7] = '-';   memcpy(r+8, dd, 2);   
    gS_2(pp[3], 0, 23, dd);   r[10] = ' ';  memcpy(r+11, dd, 2);
    gS_2(pp[4], 0, 59, dd);   r[13] = ':';  memcpy(r+14, dd, 2);
    gS_2(pp[5], 0, 59, dd);   r[16] = ':';  memcpy(r+17, dd, 2);
    if (pp[6] != 0 && relax != 1 && relax != 2)
      err(0, "non-zero GMT offset");  r[19] = 0;
  }
}

/***************************************************************************/

void p_datetimeS(int i, char *d)

{
  g_datetimeS(i, d, ts);
  printf("  %s: %s (GMT=%d)\n", d, ts, p[i+6]);
}

/***************************************************************************/

static void cS_2(int n, int low, int high)

{
  if (n<low || n>high) err(0, "datetimeS field value out of range");
}

/***************************************************************************/

void v_datetimeS(int i, char *d)

{
  char *pp = p+i;

  if (pp[0]==0 && pp[1]==0 && pp[2]==0 && pp[3]==0 &&
      pp[4]==0 && pp[5]==0 && pp[6]==0) return;
  else
  {
    s2=d;
    cS_2((pp[0]+1900)/100, 19, 20);
    cS_2(pp[0]%100, 0, 99);
    cS_2(pp[1], 1, 12);
    cS_2(pp[2], 1, 31);  
    cS_2(pp[3], 0, 23);
    cS_2(pp[4], 0, 59);
    cS_2(pp[5], 0, 59);
    if (pp[6] != 0 && relax != 1 && relax != 2)
      err(0, "non-zero GMT offset");
  }
}

/***************************************************************************/

void g_datetimeR(int i, char *d, char *res)

{
  unsigned load = g_num32L(i, d);
  unsigned exec = g_num32L(i+4, d);

  if ((load & 0xfff00000) != 0xfff00000)
    strcpy(res, "unset");                     /* store "unset" if none */
  else
  {
    _kernel_swi_regs r;
    char buff[5];
    char *format = "%CE%YR-%MN-%DY %24:%MI:%SE";

   /* copy 5-byte datestamp to buffer and convert to datetimeL format */

    buff[0] = exec;
    buff[1] = exec>>8;
    buff[2] = exec>>16;
    buff[3] = exec>>24;
    buff[4] = load;

    r.r[0] = (int)buff;                       /* 5-byte value to convert */
    r.r[1] = (int)res;                        /* buffer to hold conversion */
    r.r[2] = 20;                              /* size of buffer */
    r.r[3] = (int)format;    /* format string */

    _kernel_swi(OS_ConvertDateAndTime, &r, &r);
  }

  return;
}

/***************************************************************************/

void c_datetimeR(int i, char *d, char *v)

{
  g_datetimeR(i, d, ts);
  if (strcmp(ts, v)!=0)
  { 
    s2=d;
    err(2,v); printf("  but found value '%s'\n", ts);
  }
}

/***************************************************************************/
