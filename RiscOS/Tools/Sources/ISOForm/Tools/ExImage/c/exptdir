/* exptdir.c */

/***************************************************************************/
/*
Check/list Path Tables and Directories
*/
/***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "../../main.h"
#include "eximage.h"


BOOL do_map = FALSE;

char *ptbuff;                  /* buffer for the path table */
int *map;                      /* image bit-map */

BOOL checking_paths = FALSE;
BOOL checking_dirs = FALSE;
int cc_pti = 0;
int cc_lev = 0;
char cc_id[50] = "";

static char ts[300];           /* some temporary string space */
static char ptrec[60];         /* for PTR's that cross block boundaries */

static char *dir_buff[max_level+1];
                               /* dir_buff[1] ... dir_buff[8] will address
                                  buffers for directory levels */

static int num_ptrs;           /* counts number of ptrs */
static int num_dirs;           /* counts number of dirs */
static int num_files;          /* counts number of files */

/***************************************************************************/

static void check_map()

{

}

/***************************************************************************/

static int check_DD(char *dir)

{
  int size;    /* of System area */

  p = dir;
  c_num8(1, "EAR length", 0);
  c_num8(26, "File Unit Size", 0);
  c_num8(27, "Interleave Gap Size", 0);
  c_num16B(28, "Volume Sequence Number", 1);

  size = dir[0] - ( (33+dir[32]+1) & ~1 );

  if (size!=0 && size!=32 && relax!=2)
    err(3, "Size of system area (%d) is neither 0 nor 32\n", size);

  return size;
}

/***************************************************************************/

static void check_dchars(char *id, int n)

{
  int i;

  for (i=0; i<n; i++)
  {
    char ch = id[i];

    if (ch<0x30 ||
        (ch>0x39 && ch<0x41) ||
        (ch>0x5a && ch<0x5f) ||
        ch>0x5f)
      err(3, "Illegal character '%c' in file or directory id\n", ch);
  }
}

/***************************************************************************/

static void check_dirid(char *id)

{
  int len = strlen(id);

  if (len>31)
    err(3, "Dirid > 31 chars (%s)\n", id);

  check_dchars(id, len);
}

/***************************************************************************/

static void check_fileid(char *id)

{
  int len = strlen(id);

  if (len<3)
  {
    err(3, "Fileid has less than 3 chars inclusive (%s)\n", id);
    return;
  }

  if (len>33)
    err(3, "Fileid > 33 chars inclusive (%s)\n", id);

  switch (relax)
  {
    case 0:
      check_dchars(id, len-3);

      if (strcmp(id+len-3, ".;1")!=0)
        err(3, "Fileid does not end with '.;1' (%s)\n", id);
      return;

    case 1:
    case 2:
      if (strcmp(id+len-2, ";1")!=0)
        err(3, "Fileid does not end with ';1' (%s)\n", id);

      { int i = len-3;
        while (i>=0)
        {
          if (id[i] == '.')
          { int nn = len-3-i;
            if (nn>3)
              err(3, "Fileid extension is more than three chars long: (%s)\n", id);
            check_dchars(id+i+1, nn);
            break;
          }
          i--;
        }
        if (i>0) check_dchars(id, i);
      }
      return;
  }

}

/***************************************************************************/

static void check_dir(int level, int loc, int len, char *time,
                                 int par_loc, int par_len, char *par_time)

{
  int d_blk;         /* address of next block of directory to read */
  int de_blk;        /* address of last block of directory */
  char *dir;         /* points to current entry */
  char new_time[20]; /* datetimeS for current entry */
  int new_loc;       /* location in current entry */
  int new_len;       /* length in current entry */
  char *top;         /* one above top of current directory buffer */
  BOOL no_copyfile = TRUE;
  char previd[256];  /* to hold identifier of previous entry */

  num_dirs++;

 /* check level <= max_level */

  if (level>8)
  {
    err(3, "More than %d levels of hierarchy\n", max_level);
    return;
  }


 /* read first block of directory into buffer */

  d_blk = loc;
  if ((dir = g_block(d_blk++, dir_buff[level]))==NULL) return;
  top = dir + ISO_block_size;
  de_blk = d_blk-1 + bytes_to_blocks(len) - 1;

 /* check first self-referencing DD */

  {
    int sysize = check_DD(dir);

    if (sysize!=0 && relax!=2)
      err(3, "First DD does not have zero System Area size\n");

    p = dir;
    c_num32B(2, "Location in first DD", loc);
    c_num32B(10, "Length in first DD", len);
    c_num8(25, "Flags in first DD", 2);
    c_num8(32, "Obj id length in first DD", 1);
    c_num8(33, "Obj id in first DD", 0);
    c_datetimeS(18, "Datetime in first DD", time);
  }

 /* check second DD points to parent */

  dir += dir[0];

  {
    int sysize = check_DD(dir);

    if (sysize!=0 && relax!=2)
      err(3, "Second DD does not have zero System Area size\n");

    p = dir;
    c_num32B(2, "Location in second DD", par_loc);
    c_num32B(10, "Length in second DD", par_len);
    c_num8(25, "Flags in second DD", 2);
    c_num8(32, "Obj id length in second DD", 1);
    c_num8(33, "Obj id in second DD", 1);
    c_datetimeS(18, "Datetime in second DD", par_time);
  }

  strcpy(previd, "");    /* initial "previous" value is null */

 /* check out the remaining "real" DDs */

  do
  {
   /* move to next DD, if any */

    dir += dir[0];

    if (dir > top)
    {
      err(3, "Directory entry appears to cross block boundary\n");
      return;
    }

    if (dir[0]==0 || dir==top)
      /* must move to next directory block, if any */
    {
      if (d_blk > de_blk) break;   /* no more entries */
      if ((dir = g_block(d_blk++, dir_buff[level]))==NULL) return;
    }


   /* check DD */

    {
      int sysize = check_DD(dir);
      BOOL has_sys = TRUE;
      int sys_offset;
      int type;

      if (sysize != 32)
      {
        has_sys = FALSE;
        if (relax!=1 && relax!=2)
          err(3, "System Area size (%d) not 32 for DD\n", sysize);
      }
      else
        sys_offset = (33+dir[32]+1) & ~1;

      p = dir;
      g_datetimeS(18, "Recording date and time", new_time);

      if (has_sys)
      {
        unsigned attr;

        c_datetimeR(sys_offset+10, "System date time", new_time);
        c_string(sys_offset, "ARCHIMEDES", 10, "ARCHIMEDES");
        c_zero(sys_offset+22, "System area end", 10);

        attr = g_num32L(sys_offset+18, "Attributes in System area");

        if ((attr & attr_pling) != 0 && dir[33] != '_')
          err(3, "Pling bit set, but dirid does not start with _\n");
      }

      new_loc = g_num32B(2, "Location");
      new_len = g_num32B(10, "Length");
      type = dir[25];

      if (type!=0 && type!=2)
        err(3, "Type (%d) should be 0 or 2\n", type);

      type = type & 2;  /* force either file or dir */

      g_string(33, "Object identifier", dir[32], cc_id);
      cc_lev = level;

      if (trace)
        printf("*** Checking DD for '%s' at level %d\n", cc_id, level);

      if (type == 0)    /* file */
      {
        num_files++;
        check_fileid(cc_id);
        if (strcmp(cc_id, previd)<0)
          err(3, "Directory entries %s and %s in wrong order\n", previd, cc_id);
        strcpy(previd, cc_id);

        if (level==1 && copy_fileid[0]!=0 && strcmp(cc_id, copy_fileid)==0)
          no_copyfile = FALSE;              /* is it the copyright file? */

       /* check that final block of file is padded with zeros */

        {
          int size = bytes_to_blocks(new_len);
          int rest = blocks_to_bytes(size) - new_len;
          int blk = new_loc + size - 1;

          if (new_len != 0)        /* ignore zero-length files */
          {
            if (g_block(blk, b1)==NULL)
              err(3, "Cannot read last block of file\n");
            else
            {
              p = b1;
              if (relax!=2)
                c_zero(ISO_block_size-rest, "End of last file block", rest);
            }
          }
        }
      }
      else              /* dir */
      {
        check_dirid(cc_id);
        if (strcmp(cc_id, previd)<0)
          err(3, "Directory entries %s and %s in wrong order\n", previd, cc_id);
        strcpy(previd, cc_id);

        if (blocks_to_bytes(bytes_to_blocks(new_len))!=new_len)
          err(3, "Size of directory is not a multiple of block size\n");

       /* recurse */

        check_dir(level+1, new_loc, new_len, new_time, loc, len, time);
      }
    }
  } while (TRUE);


 /* check any space remaining in the final directory block is zeroed */

  p=dir;
  c_zero(0, "Final block of directory", top-dir);

 /* check that copyright file, if any, was found */

  if (level==1 && copy_fileid[0] != 0 && no_copyfile)
    err(3, "Copyright file does not exist\n");

  return;
}

/***************************************************************************/

void check_dirs()

{
  int i;

  printf("Checking Directory Structure\n");
  checking_dirs = TRUE;
  s1 = "Dir structure check";
  num_dirs = 0;
  num_files = 0;


 /* allocate space for 8 buffers - the maximum number of levels allowed */

  for (i=1; i<=max_level; i++)
    dir_buff[i] = (char*)(malloc(ISO_block_size));

  if (dir_buff[max_level]==NULL)
  {
    printf("Insufficient space to allocate buffers\n");
    return;
  }

 /* recursive check of directory hierarchy */

  check_dir(1, Root_Dir, Root_Dir_len, Root_Dir_time,
                  Root_Dir, Root_Dir_len, Root_Dir_time);

 /* free space occupied by buffers */

  for (i=1; i<=max_level; i++)
    free(dir_buff[i]);

  printf("Directory Structure check complete - %d directories and %d files found\n", num_dirs, num_files);
  checking_dirs = FALSE;

  return;
}

/***************************************************************************/

void check_paths()

{
  int PT_blks = bytes_to_blocks(PT_size);

  char *ptr;               /* steps through the PTRs */
  int pti;                 /* ptr's number */
  char *s_ptr;             /* matched against the dir entries */
  int s_pti;               /* s_ptr's number */

  int M_blk = typeM_PT;    /* next block of Type M Path Table */
  char *M_ptr;             /* pointer into b1 - block of Type M Path Table */
  char *q;                 /* points to current Type M PTR */

  int D_blk;               /* number of next directory block */
  int DE_blk;              /* number of last directory block */
  char *dir;               /* address of current dir entry - in b2 */

  printf("Checking Path Table Structure\n");
  checking_paths = TRUE;
  s1 = "Path Table structure check";
  num_ptrs = 1;

 /* allocate space for the entire Type L Path Table */

  { int size = blocks_to_bytes(PT_blks);

    ptbuff = (char *)(malloc(size));
    if (ptbuff==NULL)
    {
      printf("Insufficient space for path table\n");
      return;
    }
  }

 /* read in the Type L Path Table */

  { int n = typeL_PT;
    char *pp = ptbuff;
    int i;

    for (i=0; i<PT_blks; i++)
    {
      if (g_block(n++, pp)==NULL) return;
      pp += ISO_block_size;
    }
  }

 /* initialise PTR variables */

  ptr = ptbuff;
  pti = 1;

 /* set up Type M Path Table */

  if ((M_ptr = g_block(M_blk++, b1))==NULL) return;

 /* check the first PTR - which references the Root Directory */

  p = ptr;
  c_num8(0, "Dirid length of PTR 1", 1);
  c_num8(1, "EAR length in PTR 1", 0);
  c_num32L(2, "Location in PTR 1", Root_Dir);
  c_num16L(6, "Parent PTR of PTR 1", 1);
  c_num8(8, "Dirid in PTR 1", 0);
  c_num8(9, "Pad byte in PTR 1", 0);

 /* and make sure that the Type M version is correct, too */

  p = M_ptr;
  c_num8(0, "Dirid length of PTR 1", 1);
  c_num8(1, "EAR length", 0);
  c_num32M(2, "Location in PTR 1", Root_Dir);
  c_num16M(6, "Parent PTR of PTR 1", 1);
  c_num8(8, "Dirid in PTR 1", 0);
  c_num8(9, "Pad byte in PTR 1", 0);

 /* s_ptr and M_ptr must address the "next" PTR */

  s_ptr = ptr+10;
  s_pti = 2;
  M_ptr += 10;

  do
  {
    if (trace)
    {
      p = ptr;
      g_string(8, "", p[0], ts);
      printf("*** Checking parent PTR number %d for '%s'\n", pti, ts);
    }

   /* read in the directory corresponding to ptr */

    p = ptr;
    D_blk = g_num32L(2, "Location");

    if ((dir = g_block(D_blk++, b2))==NULL) return;

   /* find length of directory from its self-referencing entry */

    {
      int len;

      p = dir;
      len = g_num32B(10, "Directory length");

      DE_blk = D_blk + bytes_to_blocks(len) - 2;
    }

   /* move dir to address one prior to the first potential real DD */

    dir += dir[0];


   /* check out each entry in this directory, matching DDs to PTRs */

    do
    {
      BOOL nomore = FALSE;

     /* move to next DD, if any */

      do
      {
        dir += dir[0];

        if (dir[0]==0 || dir==b2+ISO_block_size)
           /* must move to next block */
        {
          if (D_blk > DE_blk)
          {
            nomore = TRUE;
            break;   /* no more entries */
          }
          if ((dir = g_block(D_blk++, b2))==NULL) return;
        }
      } while ((dir[25] & 2)==0);      /* ignore FDs */
      if (nomore) break;


     /* at this point, s_ptr addresses the L PTR corresponding to the DD
        dir, and M_ptr addresses the corresponding M PTR. If the M PTR
        crosses a block boundary, we must copy it out to ptrec: we set
        its address to q, and make sure M_ptr points to the next one */

      if (s_ptr >= ptbuff+PT_size)
      {
        err(3, "Number of directories exceeds number of PTRs\n");
        return;
      }

      p = dir;
      g_string(33, "", p[32], cc_id);
      cc_pti = s_pti;
      num_ptrs++;

      if (trace)
        printf("*** Checking PTR %d against DD for '%s'\n", s_pti, cc_id);

      {
        int len = (M_ptr[0]+8+1) & ~1;

        if (M_ptr+len >= b1+ISO_block_size)  /* M record crosses boundary */
        {
          int len1 = b1+ISO_block_size - M_ptr;
          int i;

          for (i=0; i<len1; i++) ptrec[i] = M_ptr[i];
          if ((M_ptr = g_block(M_blk++, b1))==NULL) return;
          for (; i<len; i++) ptrec[i] = M_ptr[i-len1];

          q = ptrec;
          M_ptr += i-len1;
        }
        else
        {
          q = M_ptr;
          M_ptr += len;
        }
      }

     /* check that s_ptr and q are the same record, and check also against
        various PTR fields */

      { int x;

        x = s_ptr[0];
        p = q;
        c_num8(0, "Directory Identifier length in M PTR", x);

        p = s_ptr;
        c_num8(1, "EAR length", 0);
        p = q;
        c_num8(1, "EAR length in M PTR", 0);

        p = s_ptr;
        x = g_num32L(2, "Directory Location");
        p = q;
        c_num32M(2, "Directory Location in M PTR", x);
        p = dir;
        c_num32B(2, "PTR and DD locations differ", x);

        p = s_ptr;
        x = g_num16L(6, "Parent Directory Number");
        p = q;
        c_num16M(6, "Parent Directory Number in M PTR", x);
        if (x != pti)
          err(3, "PTR %d has incorrect parent id\n", s_pti);

        p = s_ptr;
        g_string(8, "Dir id", p[0], ts);
        p = q;
        c_string(8, "Dir id in M PTR", p[0], ts);
        p = dir;
        c_string(33, "PTR and DD dirids differ", p[32], ts);
      }

     /* move s_ptr to address the next PTR */

      {
        int len;

        len = (s_ptr[0]+8+1) & ~1;
        s_ptr+=len;
        s_pti++;
      }

    } while (TRUE);     /* to move on to next DD */

   /* move on to next ptr - if any */

    ptr += (ptr[0]+8+1) & ~1;
    pti++;

    if (ptr == ptbuff+PT_size) break;   /* we've reached the end! */

    if (ptr > ptbuff+PT_size)
    {
      err(3, "L PTR appears to extend beyond end of Path Table\n");
      return;
    }

  } while (TRUE);


 /* Both s_ptr and M_ptr should now point to the end of the PT */

  if (s_ptr != ptbuff+PT_size)
    err(3, "More Type L PTRs than directories\n");

  if (M_ptr!=b1 && M_ptr[0]!=0)
    err(3, "More Type M PTRs than directories\n");


 /* Check that any remaining portion of Path Table is cleared to zero */

  p = ptr;
  c_zero(0, "last L Path Table block", blocks_to_bytes(PT_blks)-PT_size);
  p = M_ptr;
  c_zero(0, "last M Path Table block", blocks_to_bytes(PT_blks)-PT_size);


  free(ptbuff);

  checking_paths = FALSE;

  printf("Path Table structure check complete - %d PTRs found\n", num_ptrs);
}

/***************************************************************************/

void check_all()

{
  do_map = TRUE;

  map = (int *)(malloc(((image_size+31)>>5)<<2));  /* for bit-map of image */
  if (map==NULL)
  {
    printf("Insufficient space for bit-map of image\n");
    return;
  }

  check_dirs();
  check_paths();
  check_map();

  free(map);

  do_map = FALSE;
}

/***************************************************************************/

static void list_pt(int n, int type)

{
  int pti = 1;
  int PT_Eblk;
  BOOL nomore = FALSE;

 /* get Path Table size from PVD - no other way of finding out when you've
    reached the end if the final block of the Table is exactly full! */

  if ((p = g_block(16, b1))==NULL) return;

  PT_size = g_num32B(132, "Path Table Size");
  PT_Eblk = bytes_to_blocks(PT_size) + n - 1;

  if ((p = g_block(n++, b1))==NULL) return;

  do
  {
    int len = (p[0]+8+1) & ~1;
    int i;
    char *nextp = p+len;

    if (p[0]==0) return;

    if (nextp >= b1+ISO_block_size)    /* this record meets or crosses a
                                          block boundary */
    {
      int len1 = b1+ISO_block_size-p;

      for (i=0; i<len1; i++) ptrec[i] = p[i];

      if (n>PT_Eblk)
        nomore = TRUE;
      else
      {
        if ((p = g_block(n++, b1))==NULL) return;
      }

      for (; i<len; i++) ptrec[i] = p[i-len1];

      nextp = p+i-len1;
      p = ptrec;
    }

    g_objid(8, "Directory Identifier", p[0], ts);
    printf("  %d: %s\n", pti++, ts);
    p_num8(1, "  EAR length");

    if (type==0)   /* Type L Path Table */
    {
      p_num32L(2, "  Location");
      p_num16L(6, "  Parent Directory Number");
    }
    else           /* Type M Path Table */
    {
      p_num32M(2, "  Location");
      p_num16M(6, "  Parent Directory Number");
    }

    p = nextp;
  } while (!nomore && p[0]!=0);

  printf("\n");

  return;
}

/***************************************************************************/

void list_lpt(int n)

{
  s1 = "Type L Path Table";
  printf("\nContents of Type L Path Table:\n\n");
  list_pt(n, 0);
}

/***************************************************************************/

void list_mpt(int n)

{
  s1 = "Type M Path Table";
  printf("\nContents of Type M Path Table:\n\n");
  list_pt(n, 1);
}

/***************************************************************************/

void list_dir(int n)

  /* lists the contents of the directory block n */

{
  s1 = "Directory";

  printf("\nContents of Directory block %d:\n\n", n);

  if ((p = g_block(n, b1))==NULL) return;

  do
  {
    int len = *p;
    int base_len = (33 + p[32] + 1) & ~1;

    if (len<34)
    {
      printf("Length of Directory Record is too small\n");
      return;
    }

    g_objid(33, "Identifier", p[32], ts);
    printf("  %s\n", ts);

    p_num8(1, "  EAR length");
    p_num32B(2, "  Location");
    p_num32B(10, "  Length");
    p_datetimeS(18, "  Recording Date and Time");
    p_num8(25, "  Flags");
    p_num8(26, "  File Unit Gap");
    p_num8(27, "  Interleave Gap Size");
    p_num16B(28, "  Volume Sequence Number");

    if (len > base_len)   /* there's some System Use data */
    { int size = len-base_len;
      int i, j, k;

      printf("    System Use (%d): ", size);

      if (size<32)   /* not CDFS System Use data! */
      {
        for (i=base_len; i<len; i++)
          printf("%02x", p[i]);
      }
      else if (size>32)  /* not CDFS System Use data! */
      {
        for (i=base_len; i<base_len+16; i++) printf("%02x", p[i]);
        printf(" ...");
      }
      else      /* assumes CDFS System use ... */
      {
        for (i=base_len; i<base_len+10; i++) printf("%c", p[i]);
        for (j=1; j<=3; j++)
        { printf(" ");
          for (k=1; k<=4; k++)
          { printf("%02x", p[i]);
            i++;
          }
        }
      }
      printf("\n");
    }
    p += len;
  } while (p < b1+ISO_block_size && *p != 0);

  if (p > b1+ISO_block_size)
    printf("Directory record appears to cross block boundary\n");

  printf("\n");

  return;
}

/***************************************************************************/
