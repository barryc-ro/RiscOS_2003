/* eximage.h */


#ifndef TRUE

typedef int BOOL;

#define TRUE     (1)
#define FALSE    (0)

#endif


  /* defined in eximage itself */

extern BOOL (*read_image_block)(char *buff, int n);

  /* major components of image */

extern int typeL_PT;        /* address of Type L Path Table */
extern int typeM_PT;        /* address of Type M Path Table */
extern int Root_Dir;        /* address of Root Directory */
extern int Root_Dir_len;    /* length of Root Directory in bytes */
extern char Root_Dir_time[];/* Recording time of Root Directory */
extern int image_size;      /* total size of image */
extern int PT_size;         /* path table size in bytes */
extern char copy_fileid[];  /* name of copyright file identifier */


  /* major state vars */

extern char *s1;            /* main item being checked */
extern char *s2;            /* sub-item being checked */

extern char *b1;            /* first buffer */
extern char *b2;            /* second buffer */
extern char *p;             /* addresses item in a buffer */

extern BOOL do_map;         /* TRUE iff mapping block usage */

extern char *ptbuff;        /* holds the path table for check_pts */
extern int *map;            /* bit-map of image */

extern BOOL trace;          /* TRUE iff trace info to be output during check
                               of path tables and of dirs */
extern int relax;           /* non-zero value indicates that certain checks
                               are to be switched off */

extern BOOL checking_paths; /* determines form of error messages ... */
extern BOOL checking_dirs;
extern int cc_pti;
extern int cc_lev;
extern char cc_id[];

  /* check and list routines */

extern void err(int type, ...);

extern char *g_block(int n, char *buff);

extern void check_pvd(void);
extern void check_vdst(void);
extern void check_dirs(void);
extern void check_paths(void);
extern void check_all(void);

extern void list_pvd(void);
extern void list_lpt(int n);
extern void list_mpt(int n);
extern void list_dir(int n);


  /* field check, get and print routines:

        i - offset from p of start of field
        n - field length
        d - field description
        v - value (to be checked against field contents)
        r - result variable (to which field contents are to be copied)

     c_ ...   check
     g_ ...   get
     v_ ...   validate
     p_ ...   print
  */

extern void c_num8(int i, char *d, int v);
extern void p_num8(int i, char *d);

extern void c_num16B(int i, char *d, int v);
extern void p_num16B(int i, char *d);

extern int g_num16L(int i, char *d);
extern void c_num16L(int i, char *d, int v);
extern void p_num16L(int i, char *d);

extern int g_num16M(int i, char *d);
extern void c_num16M(int i, char *d, int v);
extern void p_num16M(int i, char *d);

extern int g_num32B(int i, char *d);
extern void c_num32B(int i, char *d, int v);
extern void p_num32B(int i, char *d);

extern int g_num32L(int i, char *d);
extern void c_num32L(int i, char *d, int v);
extern void p_num32L(int i, char *d);

extern int g_num32M(int i, char *d);
extern void c_num32M(int i, char *d, int v);
extern void p_num32M(int i, char *d);

extern void g_string(int i, char *d, int n, char *r);
extern void c_string(int i, char *d, int n, char *v);
extern void p_string(int i, char *d, int n);

extern void v_astring(int i, char *d, int n);

extern void v_dstring(int i, char *d, int n);

extern void c_zero(int i, char *d, int n);

extern void g_fileid(int i, char *d, int n, char *r);
extern void g_objid(int i, char *d, int n, char *r);

extern void c_datetimeL(int i, char *d, char *v);
extern void g_datetimeL(int i, char *d, char *r);
extern void p_datetimeL(int i, char *d);

extern void g_datetimeS(int i, char *d, char *r);
extern void c_datetimeS(int i, char *d, char *v);
extern void p_datetimeS(int i, char *d);
extern void v_datetimeS(int i, char *d);

extern void g_datetimeR(int i, char *d, char *r);
extern void c_datetimeR(int i, char *d, char *v);

/***************************************************************************/
