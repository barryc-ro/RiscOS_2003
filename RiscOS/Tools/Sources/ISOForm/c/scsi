/* scsi.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "msg.h"
#include "scsi.h"



/**********************  Low-level SCSI interface  *************************/

  /*  exported data  */

int scsi_block_size;
int scsi_block_to_byte_shift;
int scsi_last_block;

  /*  private data  */

static int devid;              /* SCSI device identifier */

typedef struct {               /* SCSI 10-byte Command Descriptor Block */
    char opcode;
    char lun;
    char lba[4];
    char reserved;
    char length[2];
    char flags;
} cdb;

static cdb read_cdb,           /* for scsi_read  */
           write_cdb;          /* for scsi_write */

#define READ_EXTENDED   (0x28) /* SCSI op-codes for CDBs */
#define WRITE_EXTENDED  (0x2a)


#define SCSI_Version      (0x403c0)      /* SCSI SWIs */
#define SCSI_Initialise   (0x403c1)
#define SCSI_Op           (0x403c3)

#define SCSI_Op_READ      (0x01000000)   /* The kind of SCSI_Op to be done */
#define SCSI_Op_WRITE     (0x02000000)


#define MAGIC_KEY         (0xfc000003)

  /* Normally, each SCSI user must claim a device before making calls to
     the SCSI driver, thus helping to avoid problems arising from conflicts
     between separate users; a successful "claim" returns a "key" that must
     then be quoted on each call to the driver.

     However this program makes sure that only otherwise unallocated parts
     of a SCSI device are written to via SCSI_Op, and so other users - in
     particular SCSIFS - can continue to operate safely in tandem.

     Quoting MAGIC_KEY bypasses the "claim" protection tests.
  */

/***************************************************************************/

void scsi_initialise(int id)

  /* Must be called before calling scsi_read or scsi_write.

     Checks that:

       - SCSI drivers are present
       - The specified device exists
       - The device is of type "direct access"
       - The block size is a power of 2
       - The block size is at least 256 bytes
       - The block size is no greater than output_buffer_size

     If any one of these tests fails, a suitable error message is printed and
     the program exits.

     Records information about the device in the variables:

        devid
        scsi_block_size
        scsi_block_to_byte_shift
        scsi_last_block

     Initialises Command Descriptor Blocks read_cdb and write_cdb ready
     for scsi_read and scsi_write.
  */

{
  _kernel_swi_regs r;
  _kernel_oserror *e;


 /* Call SCSI_Version to check that SCSI drivers are available */

  if ((e=_kernel_swi(SCSI_Version, &r, &r)) != NULL)
  {
    printf(msg_001, e->errmess);
    exit(1);
  }


 /* Call SCSI_Initialise 2 to determine device class, block size, and number
    of blocks available */

  {
    struct {                 /* this is what SCSI_Initialise 2 returns */
        int typeetc;         /* device type is in byte 0 */
        int extra;
        int lastblocknum;
        int blocklength;
    } res;

    r.r[0] = 2;
    r.r[1] = id;
    r.r[2] = (int) &res;

    if ((e=_kernel_swi(SCSI_Initialise, &r, &r)) != NULL)
    { printf(msg_200, e->errmess);   /* unexpected SCSI problem */
      exit(1);
    }

   /* check device type is direct access (0) */

    if ((res.typeetc & 0xff) != 0)
    {
      printf(msg_042);
      exit(1);
    }

   /* record device characteristics in global variables */

    devid = id;
    scsi_block_size = res.blocklength;
    scsi_last_block = res.lastblocknum;

   /* check block size is at least 256 bytes */

    if (scsi_block_size < 256)
    {
      printf(msg_205, scsi_block_size);
      exit(1);
    }

   /* check block size is no greater than output buffer size */
    if (scsi_block_size > output_buffer_size)
    {
      printf(msg_208, scsi_block_size);
      exit(1);
    }

   /* check block size is a power of 2 and determine which one */
    {
      int i = -1;
      unsigned x = scsi_block_size;

      do
      {
        x >>= 1;
        i++;
      } while (x!=0);

      if ((1<<i) != scsi_block_size)
      { printf(msg_201, scsi_block_size);  /* block size not a power of 2 */
        exit(1);
      }

      scsi_block_to_byte_shift = i;
    }
  }

 /* set up CDBs for scsi_read and scsi_write */

  read_cdb.opcode = READ_EXTENDED;
  write_cdb.opcode = WRITE_EXTENDED;
  read_cdb.lun = write_cdb.lun = 0;         /* logical unit number is zero */
  read_cdb.flags = write_cdb.flags = 0;     /* commands not "linked" */

  return;    
}

/***************************************************************************/

static void fill_in_cdb(cdb *cdb, int lba, int n)

 /* Copies the logical block address lba and the number of blocks n to
    transfer into the command descriptor block cdb.

    The order of the bytes has to be reversed.
 */

{
  cdb->lba[0] = lba >> 24;
  cdb->lba[1] = lba >> 16;
  cdb->lba[2] = lba >> 8;
  cdb->lba[3] = lba;

  cdb->length[0] = n >> 8;
  cdb->length[1] = n;

  return; 
}

/***************************************************************************/

BOOL scsi_read(char *buff, int blk, int n)

  /* Read n blocks, starting at block number blk, to buffer buff.
     Result is TRUE iff all goes well.
  */

{
  _kernel_swi_regs r;

 /* Complete the CDB by filling in the Logical Block Address and Transfer
    Length fields */

  fill_in_cdb(&read_cdb, blk, n);

 /* call SCSI_Op */

  r.r[0] = devid + SCSI_Op_READ;
  r.r[1] = sizeof(cdb);
  r.r[2] = (int) &read_cdb;
  r.r[3] = (int) buff;                 /* buffer address */
  r.r[4] = n * scsi_block_size;        /* size of buffer - assumed correct */
  r.r[5] = 0;                          /* use default timeout */
  r.r[8] = MAGIC_KEY;

  if (((oserr=_kernel_swi(SCSI_Op, &r, &r)) != NULL) /* problem with SWI */
      || (r.r[4] != 0))                      /* couldn't read all the data */
    return FALSE;

  return TRUE;
}

/***************************************************************************/

BOOL scsi_write(char *buff, int blk, int n)

  /* Write n blocks, starting at block number blk, from buffer buff.
     Result is TRUE iff all goes well.
  */

{
  _kernel_swi_regs r;

 /* Complete the CDB by filling in the Logical Block Address and Transfer
    Length fields */

  fill_in_cdb(&write_cdb, blk, n);

 /* call SCSI_Op */

  r.r[0] = devid + SCSI_Op_WRITE;
  r.r[1] = sizeof(cdb);
  r.r[2] = (int) &write_cdb;
  r.r[3] = (int) buff;                 /* buffer address */
  r.r[4] = n * scsi_block_size;        /* size of buffer - assumed correct */
  r.r[5] = 0;                          /* use default timeout */
  r.r[8] = MAGIC_KEY;

  if (((oserr=_kernel_swi(SCSI_Op, &r, &r)) != NULL) /* problem with SWI */
      || (r.r[4] != 0))                     /* couldn't write all the data */
    return FALSE;

  return TRUE;
}

/***************************************************************************/
