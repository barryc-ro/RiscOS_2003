/*  phase1.c  */

/********************** Phase 1 - first hierarchy scan *********************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "opts.h"
#include "msg.h"
#include "scan.h"
#include "phsupp.h"
#include "phase1.h"


  /*  private data */

static int pt_chunk_next = 0;     /* high water mark for pt_chunk */


/***************************************************************************/

static PTR *new_PTR(char *dirid)

  /* Allocates a fresh PTR record, with identifier dirid; all other fields
     are cleared to zero.
  */

{
  int i;
  int len;   /* length of the PTR */
  PTR *ptr;

  len = sizeof(PTR) + round_bytes_to_word(strlen(dirid) + 1);
    /* PTR fixed part + identifier length + zero terminator, rounded up
       to an integral number of words */

  ptr = (PTR*)(pt_chunk+pt_chunk_next);

  if ((pt_chunk_next+=len) >= opt_ptsize)
  {
    printf(msg_038, next_PTR);
    exit(1);
  }

 /* clear the record */

  for (i=0; i<sizeof(PTR); i++) ((char*)ptr)[i] = 0;

 /* copy dirid into the record */

  strcpy(id_of_PTR(ptr), dirid);

  return ptr;
}

/***************************************************************************/

static void check_copyfile(void)

  /* checks that any specified copyright file exists: if not, a suitable
     error is reported.

     The root directory contents must be in dir[0] ... on entry.
  */

{
  int i;

 /* scan the root directory to see if it's there */

  for (i=0; i<next_DR; i++)
  {
    DR *obj = dir[i];

    if (obj->type == type_DIR) continue;    /* ignore sub-directories */

    if (strcmp(id_of_DR(obj), opt_copyid) == 0)   /* we've found it! */
      return;
  }

  error(msg_606, opt_copyid);

  return;
}


/***************************************************************************/

static void root_PTR(void)

 /* create PTR for Root Directory as pt[1] filling in:

     dirid       -  empty string
     parent      -  1 (itself)
     load,exec   -  datestamp info from RISC OS root directory
     first_child -  0 (=> unset)
     root        -  NULL

    This function also checks that opt_root exists, and is a directory; if
    not, a suitable message is printed and exit(1) called.
 */

{
  pt[1] = new_PTR("");
  pt[1] -> parent = 1;
  pt[1] -> root = NULL;

 /* check existence and type of root directory, and fetch datestamp info */

  switch (get_datestamp(opt_root, &(pt[1]->load), &(pt[1]->exec)))
  {
    case 0:
      printf(msg_036, opt_root);   /*  not found  */
      exit(1);

    case 1:
      printf(msg_037, opt_root);   /* root is a file, not a directory */
      exit(1);

    case 2:
      break;                       /* ok - opt_root really IS a directory! */

    case 3:
      printf(msg_045, opt_root);   /* it's a PC Partition */
      exit(1);

    case -1:                       /* the SWI call failed */
      printf(msg_040, opt_root, oserr->errmess);
      exit(1);

    default:
      printf(msg_214, opt_root);   /* it's something else ... */
      exit(1);
  }

  return;
}

/***************************************************************************/

void phase_1(void)

  /* The hierarchy is scanned to check ISO 9660 conformance, and the Path
     Table is constructed as follows:

       Each PTR is first created when its parent directory's contents are
       being scanned. At this time, the parent and identifier fields - and
       the load and exec fields - are filled in, and dummy values of 0 are
       assigned to the other fields.

       Later, its own directory's contents will be scanned - and at this time
       the size and size_of_files fields will be completed.

       Note that the location field is not calculated until Phase 2 - when
       all the PTRs have been created, and so the size of the Path Tables
       can be calculated.

     Note that the dirid is recorded in its RISC OS form so that it can be
     opened a second time: when the real PT is stored in the image during
     Phase 3, the dirid is first converted to ISO 9660 form - by replacing
     any leading ! with _.

     Counts are kept of the number of directories and files found in the
     hierarchy, and these are recorded in the external variables count_dirs
     and count_files on exit.
*/   

{
  int i;
  int first_prev_pti;  /* indexes first PTR on "previous" level */
  int last_prev_pti;   /* indexes last PTR on "previous" level */
  int parent_pti;      /* indexes current PTR on "previous" level */

  printf(msg_900);

 /* initialise directory and file counts */

  count_dirs = count_files = 0;


 /* create the PTR for the Root Directory, and initialise for the loop */

  root_PTR();

  next_PTR = 2;  /* next available PTR entry */

  level = 1;     /* number of the "current" level - the one whose files are
                    about to be processed */

 /* the next two variables delimit the PTRs of the "previous" level; to
    start with, there is just one PTR in the "previous" level: the one
    that describes the root directory */

  first_prev_pti = 1;
  last_prev_pti = 1;


 /* The following loop is executed for each level of the hierarchy.

    The terminating condition is given generally as "stop as soon as the
    previous level has no PTRs to process"; in other words, when the
    previous level has no sub-directories.

    In fact, the read_directory function ensures that we go no further than
    level 8: any directories found at that level are changed into files
    after a suitable error has been reported. */

  while (first_prev_pti <= last_prev_pti)
  {
   /* work across the previous level, directory by directory */

    for (parent_pti=first_prev_pti;
         parent_pti<=last_prev_pti;
         parent_pti++)
    {
      int dir_size;          /* size of parent directory in blocks */
      int first_files_size;  /* total size of any initial files in the parent
                                directory in blocks */
      int other_files_size;  /* total size of any other files in the parent
                                directory in blocks */
      int space_used;        /* space used in current directory block */

     /* set up state variables RISCOS_pathname, and ISO_pathname_length */

      set_path_info(parent_pti, TRUE);

     /* output progress message */

      if (!opt_quiet)
        printf(msg_905, RISCOS_pathname);

     /* read details of all objects in the directory defined by parent_pti
        into dir[0] .. dir[next_DR-1], checking and sorting as required by
        the ISO 9660 standard */

      read_directory(TRUE);

     /* level 1 only */

      if (level==1)
      {
       /* treat objects in the outermost root level as if they have been
          "linked" to from some (hypothetical) higher-level link file */

        for (i=0; i<next_DR; i++)
          if (dir[i]->root == NULL)
            dir[i]->root = opt_root;

       /* special test for level 1 only: check that any Copyright File
          specified actually exists!  */

        if (opt_copyid != NULL) check_copyfile();
      }

      count_dirs++;

     /* now work out:
          - the size of the parent directory, noting that directory records
            may not cross block boundaries
          - the total space needed to store the files in the parent
            directory: each file occupies a whole number of blocks

        We do this by scanning through the directory records, and we create
        new PTRs for this level from each sub-directory that we find "on the
        fly"  */

      dir_size = 0;         /* size of ISO parent directory in blocks */
      first_files_size = 0; /* ISO blocks needed for all the initial files
                               in the parent directory */
      other_files_size = 0; /* ISO blocks needed for all the other files
                               in the parent directory */

      space_used = special_size;
        /* this variable holds the space allocated so far in the current ISO
           directory block; it is initialised to the space required for the
           two special entries required at the start of each directory */

      for (i=0; i<next_DR; i++)
      {
        DR *obj = dir[i];     /* the current object */
        int size;             /* the size of the object's ISO DR */

       /* initialise size - fixed parts + length of id */

      /* DOS DD's and FD's have a zero length System Use field */
       size = ISO_DR_size + ((obj->type!=type_DOSFILE && obj->type!=type_DOSDIR) ? CDFS_DR_size : 0)
              + strlen(id_of_DR(obj));
     
      if (obj->type == type_FILE) size += 3;  /* to allow for  ".;1" (RISCOS files only) */

        switch (obj->type)
        {
          case type_FILE:
          case type_DOSFILE:

           /* add length of file to total space required for files */

            {
              int blocks = bytes_to_blocks(obj->length);

              if (file_type(obj->load) == opt_first)
                first_files_size += blocks;
              else
                other_files_size += blocks;
            }

            count_files++;

            break;

          case type_DIR:
          case type_DOSDIR:

           /* we are about to create a PTR for this directory: if it is
              the first one for the current parent, we must link it in
              as the first child */

            if (pt[parent_pti] -> first_child == 0)
              pt[parent_pti] -> first_child = next_PTR;

           /* create a new PTR and initialise it:
                 parent                - parent_pti
                 first_child           - 0              (unset)
                 size                  - 0              (so far)
                 size_of_first_files   - 0              (so far)
                 size_of_other_files   - 0              (so far)
                 location              - 0              (so far)
                 root                  - copied from DR
                 dirid                 - <dirname>  */

            if (next_PTR>=max_PTR)    /* this can never happen */
            {
              printf(msg_215);
              exit(1);
            }

            pt[next_PTR] = new_PTR(id_of_DR(obj));
            pt[next_PTR] -> parent = parent_pti;
            pt[next_PTR] -> root = obj -> root;

           /* copy across RISC OS date stamp info - this is used in Phase 3
              to fill in the corresponding fields in the '.' and '..' special
              directory entries at the start of each directory */

            pt[next_PTR] -> load = obj -> load;
            pt[next_PTR] -> exec = obj -> exec;

           /* subtle point: the dirid in the PTR must be a RISC OS name, and
              so if the name has a leading _ that was previously a !, it
              must be replaced: */

            if ((obj->attr & attr_pling) != 0)
              id_of_PTR(pt[next_PTR])[0] = '!';

            next_PTR++;

            break;
        }

       /* adjust size of FD or DD to be an even number of bytes, and then add
          to the space required for the parent directory: allocate another
          block if necessary, remembering that directory records cannot cross
          block boundaries */

        size = round_to_even(size);
        space_used += size;
        if (space_used > ISO_block_size)
        {
          dir_size++;
          space_used = size;
        }
      }

     /* can now complete the PTR for the parent directory */

      if (space_used != 0) dir_size++;   /* allow for any incomplete final
                                            block */

      pt[parent_pti] -> size = dir_size;
      pt[parent_pti] -> size_of_first_files = first_files_size;
      pt[parent_pti] -> size_of_other_files = other_files_size;

    }

   /* move down to next level - if any */

    first_prev_pti = last_prev_pti + 1;
      /* first PTR in the NEW previous level - if any - immediately follows
          the last PTR in the CURRENT previous level */

    last_prev_pti = next_PTR - 1;
      /* last PTR in the NEW previous level is the most recent one to have
          been created */

    level++;
  }


  printf(msg_901);

  return;
}

/***************************************************************************/
