/* main.c */


#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include "main.h"
#include "msg.h"
#include "opts.h"
#include "tofile.h"
#include "toscsi.h"
#include "phase1.h"
#include "phase23.h"
#include "scsi.h"    /* just for scsi_block_size when checking that space
                        allocated to image is sufficient */
#include "file.h"    /* just for file_close in tidyup() */


  /*  exported data  */

int output_buffer_size = 32*1024; /* must be a power of 2 that is at least
                                     as large as the greater of the SCSI
                                     block size and the ISO block size */

int state_output_file = 0;        /* output file not open */
int state_input_file = 0;         /* and neither is any input file */
BOOL state_output_started = FALSE;/* and no output has been produced */

int num_errors = 0;               /* error keeps count */
int num_warnings = 0;             /* warn keeps count */

int big_dirs = 0;                 /* read_directory keeps count */
int private_files = 0;            /* read_directory keeps count */
int long_names = 0;               /* read_directory keeps count */
int empty_files = 0;              /* read_directory keeps count */
int empty_dirs = 0;               /* read_directory keeps count */

int dos_extensions = 0;           /* read_directory keeps count */

_kernel_oserror *oserr = NULL;


/* The following three function variables are set according to the chosen
   output option (-toscsi or -tofile) in main() */

void (*open_image)(void) = NULL;
char *(*next_image_block)(void) = NULL;
void (*close_image)(void) = NULL;

char time_now[17];
  /* contains the time of this run as a 16-byte zero-terminated string in
     the datetimeL format */

DR **dir;
int next_DR = 0;
int max_DR;
char *dir_chunk;

PTR **pt;
int next_PTR = 0;
int max_PTR;
char *pt_chunk;

int level = 0;

char *RISCOS_pathname = NULL;  /* this string is extended when necessary by
                                  set_path_info */
int R_p_len = 0;               /* and no bytes are allocated at first */

int ISO_pathname_length = 0;

int image_size;
int count_dirs;
int count_files;


  /*  private data  */

#define  OS_Word               (0x07)    /* SWIs */
#define  OS_ConvertDateAndTime (0xc1)

#define  max_image_Mbytes      (650)     /* approx. max size of CD-ROMs */
#define  max_image_size  ((max_image_Mbytes*1024*1024)/ISO_block_size)

/***************************************************************************/

void *check_malloc(int nchars, char *errmess)

  /* calls malloc - if unsuccessful, outputs errmess and exits */

{
  void *res;

  res = malloc(nchars);

  if (res==NULL)
  {
    printf(errmess);
    exit(1);
  }

  return res;
}

/***************************************************************************/

void error(char *format, ...)

  /* Called whenever a non-fatal error is to be reported during Phase 1.

     Outputs the specified error message, together with the name of the
      directory currently being examined.

     Sets has_error TRUE to make sure that no image is constructed.
  */

{
  va_list ap;

  printf(msg_400);

  va_start(ap, format);
  vprintf(format, ap);
  va_end(ap);

  printf(msg_402, RISCOS_pathname);

  num_errors++;

  return;
}

/***************************************************************************/

void warn(char *format, ...)

  /* Called to output a warning message: warnings do not prevent image
      construction from taking place.

     Outputs the specified warning message, together with the name of the
      directory currently being examined.

     num_warnings counts the calls - when this exceeds max_warnings, further
      calls are ignored
  */

{
  num_warnings++;
  if (opt_nowarn) return;

  {
    va_list ap;

    printf(msg_401);

    va_start(ap, format);
    vprintf(format, ap);
    va_end(ap);

    printf(msg_402, RISCOS_pathname);
  }

  return;
}

/***************************************************************************/

static void warning_summary()

  /* Print out summary of warning messages if necessary */

{
  BOOL warn_volid;

 /* is the volid suitable for a L4FS? */

  warn_volid = opt_volid==NULL ||            /* does not exist */
               strlen(opt_volid)>16 ||       /* more than 16 chars long */
               opt_volid[0]<'A' ||           /* does not start with */
               opt_volid[0]>'Z';             /* a letter */

 /* output a warning summary if any warnings need to be made ... */

  if (num_warnings>0 || private_files>0 || warn_volid)
  {
    printf(msg_410);

    if (warn_volid) printf(msg_804, opt_volid==NULL ? "" : opt_volid);
    if (big_dirs==1) printf(msg_810);
    if (big_dirs>1) printf(msg_805, big_dirs);
    if (private_files==1) printf(msg_811);
    if (private_files>1) printf(msg_806, private_files);
    if (long_names==1) printf(msg_812);
    if (long_names>1) printf(msg_807, long_names);
    if (empty_files==1) printf(msg_813);
    if (empty_files>1) printf(msg_808, empty_files);
    if (empty_dirs==1) printf(msg_814);
    if (empty_dirs>1) printf(msg_809, empty_dirs);

    if (dos_extensions==1) printf(msg_816);
    if (dos_extensions>1)  printf(msg_817, dos_extensions);


    printf(msg_411);
  }

  return;
}

/***************************************************************************/

static void tidyup()

 /* Registered by atexit(tidyup) - called just before program exit.

    Action taken depends on program state.

    (Note that no action has to be taken for files opened by CLib -
     these are closed automatically)
 */

{
  if (state_output_file != 0) file_close(state_output_file);
  if (state_input_file != 0) file_close(state_input_file);

  return;
}

/***************************************************************************/

static void read_time_now(char *buff)

  /* reads the real-time clock using OS_Word 14,3 and records the five byte
     result in buff
  */

{
  _kernel_swi_regs r;

  r.r[0] = 14;
  buff[0] = 3;
  r.r[1] = (int)buff;

  _kernel_swi(OS_Word, &r, &r);  /* sets 5-byte datetime into buff */

  return;
}

/***************************************************************************/

static void convert_time(char *tfive, char *format, char *res, int len)

  /* converts the system-format 5-byte datetime in tfive according to the
     given format string into the buffer res of length len
  */

{
  _kernel_swi_regs r;

  r.r[0] = (int)tfive;                      /* 5-byte datetime to convert */
  r.r[1] = (int)res;                        /* buffer to hold conversion */
  r.r[2] = len;                             /* size of buffer */
  r.r[3] = (int)format;                     /* format string */

  _kernel_swi(OS_ConvertDateAndTime, &r, &r);

  return;
}

/***************************************************************************/

int main(int argc, char *argv[])

{
 /* register "tidyup" as function to call before exiting */

  atexit(tidyup);

 /* read current time, set time_now, and print header message */

  { char t[5];            /* to hold system-format datetime value */
    char run_time[24];    /* to hold converted format for message */

    read_time_now(t);
    convert_time(t, "%CE%YR%MN%DY%24%MI%SE%CS", time_now, 17);
    convert_time(t, "%24:%MI:%SE on %DY-%M3-%CE%YR", run_time, 24);

    printf(msg_910, version_id, run_time);
  }

 /* process arguments */

  process_options(argv, argc);

 /* check availability of output option, and set up image output functions
     as appropriate */

  if (opt_tofile != NULL)                  /* -tofile selected */
  {
    if (tofile_validate(opt_tofile) == -1)
      exit(1);                             /* problem with output file */
    else
    {
      open_image = tofile_open_image;
      next_image_block = tofile_next_image_block;
      close_image = tofile_close_image;
    }
  }

  if (opt_toscsi_id != -1)                    /* -toscsi selected */
  {
   /* check availability of specified image area, setting actual length
      where necessary */

    if ((opt_toscsi_length = toscsi_validate(opt_toscsi_id,
                                             opt_toscsi_start,
                                             opt_toscsi_length)) == -1)
      exit(1);
    else
    {
      open_image = toscsi_open_image;
      next_image_block = toscsi_next_image_block;
      close_image = toscsi_close_image;
    }
  }


 /* allocate space for directory records and the corresponding index: work
    out the maximum number of directory records which could be stored in the
    space to be allocated: each DR is word-aligned and followed by an
    identifier at least 1 character + zero terminator long */

  max_DR = opt_dirsize/round_bytes_to_word(sizeof(DR)+2);

 /* allocate space for the index */

  dir = (DR**)check_malloc(max_DR*sizeof(DR*), msg_028);

 /* allocate space for the DRs themselves */

  dir_chunk = check_malloc(opt_dirsize, msg_028);


 /* allocate space for path table records and the corresponding index: work
    out the maximum number of path table records which could be stored in the
    space to be allocated: each PTR is word-aligned and followed by an
    identifier at least 1 character + zero terminator long */

  max_PTR = opt_ptsize/round_bytes_to_word(sizeof(PTR)+2) + 1;
    /* '+1' because pt[1] is the first! */

 /* allocate space for the index */

  pt = (PTR**)check_malloc(max_PTR*sizeof(PTR*), msg_029);

 /* allocate space for the PTRs themselves */

  pt_chunk = check_malloc(opt_ptsize, msg_029);


 /* first directory scan to check hierarchy conforms to ISO 9660 rules */

  phase_1();

 /* placement - sets image_size */

  phase_2();

 /* issue warning messages if appropriate */

  if (opt_check || num_errors>0)
    warning_summary();

 /* report image statistics */

  printf(msg_906, image_size,
                  blocks_to_bytes(image_size)>>10,
                  count_dirs, count_files);

  if (image_size > max_image_size)       /* warn if > 650Mbytes */
    printf(msg_918, max_image_Mbytes);


 /* stop at this stage if any non-conformances have been reported */

  if (num_errors>0)
  {
    printf(msg_412);
    if (num_errors>1)
      printf(msg_030, num_errors);
    else
      printf(msg_047);
    printf(msg_413);
    if (!opt_force) exit(1);
  }

 /* no more to do if only a check was requested */

  if (opt_check) exit(0);

 /* if output is to raw scsi, check there is enough space for the image */

  if (opt_toscsi_id != -1 &&
      image_size*ISO_block_size > opt_toscsi_length*scsi_block_size)
  {
    printf(msg_031,
             (image_size*ISO_block_size+scsi_block_size-1)/scsi_block_size);
    exit(1);
  }

 /* second directory scan to create image - first note that output of the
    image has started (see tidyup() function) */

  state_output_started = TRUE;
  phase_3();

 /* add final warning summary if necessary */

  warning_summary();

  return 0;
}

/***************************************************************************/
