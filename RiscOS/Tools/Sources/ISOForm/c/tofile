/* tofile.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "msg.h"
#include "file.h"
#include "tofile.h"



/************************  File output interface  **************************/

  /*  exported data  */

  /*  private data  */

  /* Data used by the routines tofile_validate, tofile_open_image,
     tofile_next_image_block and tofile_close_image.

     These routines make use of an output area whose length is defined by
     output_buffer_size (see main.h).

     This area is viewed as a sequence of ouput buffers, each of which can
     hold a single ISO 9660 block: these individual buffers are indexed by
     an array.
  */

static int tofile;             /* RISC OS file handle */

static int *outbuff;           /* the output area */

static int numbuffs;           /* number of buffers in output area */
static char **buffs;           /* each output buffer is addressed by buffs[i]
                                  for i = 0 to numbuffs-1 */
static int nextbuff;           /* buffs[nextbuff] addresses the next buffer
                                  available */

/***************************************************************************/

int tofile_validate(char *filename)

  /* This routine attempts to open the specified file: if successful, a
     result of 0 is returned.

     If not successful, a suitable message is output, and a result of -1 is
     returned.
  */

{
 /* open the file in "write" mode */

  tofile = file_open_out(filename);

  if (tofile==0)
  {
    printf(msg_010, filename, oserr==NULL ? "" : oserr->errmess);
    return -1;
  }

 /* record output file handle as state for tidyup() function */

  state_output_file = tofile;

  return 0;
}

/***************************************************************************/

void tofile_open_image(void)

  /* This function must be called before the first call to
     tofile_next_image_block().
  */

{
 /* determine parameters of the output area */

  numbuffs = output_buffer_size/ISO_block_size;

 /* allocate the output area, and initialise the buffer index structure */

  outbuff = (int *) check_malloc(output_buffer_size, msg_009);
  buffs = (char **) check_malloc(numbuffs*sizeof(char*), msg_009);

  {
    int i;
    char *p = (char*)outbuff;

    for (i=0; i<numbuffs; i++)
    {
      buffs[i] = p;
      p += ISO_block_size;
    }
  }

 /* initialise "current state" variables */

  nextbuff = 0;                 /* first buffer to be used */
}

/***************************************************************************/

static void write_next_blocks(int n)

  /* Called from tofile_next_image_block and tofile_close_image.

     Writes out n buffers from the output area.
  */

{
  int numchars = n*ISO_block_size;

  if (!file_write_next(tofile, (char *)outbuff, numchars))
  {
    printf(msg_011, oserr==NULL ? "" : oserr->errmess);
                           /* maybe there is no more space left */
    exit(1);
  }
}

/***************************************************************************/

char *tofile_next_image_block(void)

  /* This function is called whenever a new image block is to be created.

     The result is the address of a buffer into which the contents of the
     next image block can be written.
  */

{
 /* if the output area is full, write it out */

  if (nextbuff==numbuffs)
  {
    write_next_blocks(numbuffs);
    nextbuff = 0;
  }

 /* allocate next buffer */

  return (buffs[nextbuff++]);
}

/***************************************************************************/

void tofile_close_image(void)

  /* This function must be called after the last call to
     toscsi_next_image_block().
  */

{
 /* First write out any outstanding buffers from the output area */

  if (nextbuff != 0)         /* can only be zero if NO data ever written! */
    write_next_blocks(nextbuff);

 /* now close output file */

  file_close(tofile);

 /* note this in program state */

  state_output_file = 0;

 /* free the output area and buffer index */

  free(outbuff);
  free(buffs);
}

/***************************************************************************/
