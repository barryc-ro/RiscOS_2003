/*  phsupp.c  */


/******************** Support functions for Phases 1,2,3 *******************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "opts.h"
#include "msg.h"
#include "file.h"
#include "phsupp.h"


  /* private data */

#define  OS_File      (0x08)    /* SWIs */
#define  OS_GBPB      (0x0c)

#define  ERR_buff_ov   (484)    /* "Buffer overflow" error from OS_GBPB 10 */



/***************************************************************************/

void copy_file(char *dirname, char *name)

  /* Copies the RISC OS file <dirname>.<name> to the image,
     not forgetting to pad out the last block with zeros.

     If the file has zero length, no blocks are written out.
  */

{
  int i;
  int not_read = 0;    /* number of characters left unfilled in the buffer */
  char *buff;
  char *file_pathname;
  int in;              /* file handle */

 /* open file for input */

  file_pathname = (char*)check_malloc(strlen(dirname)+strlen(name)+2,
                            msg_032);  /* 2 for '.' and zero terminator */
  strcpy(file_pathname, dirname);
  strcat(strcat(file_pathname, "."), name);

  if ((in = file_open_in(file_pathname))==0)  /* cannot open file */
  {
    printf(msg_033, file_pathname, oserr==NULL ? "" : oserr->errmess);
    exit(1);
  }

 /* note input file handle as program state - see tidyup() function */

  state_input_file = in;

 /* copy data from the file until EOF */

  while (!(file_eof(in)))
  {
    buff = next_image_block();

    if (not_read!=0)        /* this should never occur: a non-zero value */
    {                       /* should only arise at EOF */
      printf(msg_212, file_pathname);
      exit(1);
    }

    not_read = file_read_next(in, buff, ISO_block_size);
  }

 /* pad out last block with zeros if necessary */

  for (i=ISO_block_size-not_read; i<ISO_block_size; i++) buff[i]=0;


 /* free space occupied by full file name, close file and return */

  free(file_pathname);

  file_close(in);

  state_input_file = 0;   /* reset state */

  return;
}

/***************************************************************************/

static int length_of_DR(DR *p)

  /* returns length of the directory record p in bytes including its
     identifier, and rounded up to an integral number of words
  */

{
  return sizeof(DR) + round_bytes_to_word(strlen(id_of_DR(p))+1);
}


/***************************************************************************/

static int read_RISCOS_dir(char *dirname, char *buff, int buff_size)

  /* Reads the entries from directory dirname, and indexes them in dir.

     On entry:

       dirname    -  full pathname of RISC OS directory

       buff       -  address of buffer into which the directory entries are
                     to be read

       buff_size  -  size of the buffer in bytes

       next_DR    -  next free element of dir: in other words, the first
                     directory entry will be indexed by dir[next_DR]

     On exit:

       next_DR    -  next free element of dir: in other words, the last
                     directory entry was indexed by dir[next_DR-1]

       result     -  number of bytes of buff occupied by directory entries

     If the buffer is not large enough, the function does not return:
     instead, a suitable message (indicating how many directory entries
     HAVE been read) is output and the program stops.

     OS_GBPB 10 returns attribute and file type information in two separate
     words. This information is combined into a single word (two "short"s) as
     follows:

          ----------------------------------
         |    type        |   0    |  attr  |
          ----------------------------------

     This leaves the second word free to hold a pointer to the "root" file
     name and this is initialised to zero.
  */

{
  char *buff_start;
  _kernel_swi_regs r;
  _kernel_oserror *e;
  int i;

  buff_start = buff;

 /* set up initial registers for OS_GBPB 10 call */

  r.r[0] = 10;                 /* read directory info */
  r.r[1] = (int)dirname;
  r.r[4] = 0;                  /* start with the first entry */
  r.r[5] = buff_size;          /* size of the buffer */
  r.r[6] = 0;                  /* we want all entries */

 /* loop round until all entries have been read */

  while (r.r[4] != -1)
  {
    r.r[2] = (int)buff;        /* incremented each time around */
    r.r[3] = 1000000;          /* a large number - ie read as many entries
                                  at once as possible */

    e = _kernel_swi(OS_GBPB, &r, &r);

   /* we stop after any error, but treat "Buffer Overflow" (484) specially */

    if (e != NULL)
    {
      if (e->errnum == ERR_buff_ov)
        printf(msg_035, dirname, next_DR);
      else
        printf(msg_213, dirname, e->errmess);
      exit(1);
    }

   /* a number of entries may (or may not!) have been read: registers are
      as follows:
          r3 - number of entries read into buff
          r4 - handle of next entry to be read (-1 => no more to go)
      Now add each entry to the index after removing any filing-system
      dependent attribute data */

    for (i=0; i<r.r[3]; i++)
    {
      DR *obj = (DR*)buff;            /* addresses the next DR */
      int len = length_of_DR(obj );   /* including the object id, and aligned
                                         to the next word boundary */

     /* pack file type and bottom byte of attribute information into a single
        word, and clear the released word for the "root" information */

      obj->type = (unsigned short)(int)(obj->root);
      obj->attr &= attr_valid;
      obj->root = NULL;

      if (next_DR>=max_DR)     /* this cannot happen */
      {
        printf(msg_216);
        exit(1);
      }

     /* add entry to the list */

      dir[next_DR++] = (DR*)buff;

      buff += len;
      r.r[5] -= len;
    }
  }

  return (buff - buff_start);
}

/***************************************************************************/

static char *get_new_root_name(char *dirname, char *linkname)

  /* linkname is the name of a link file (held in directory dirname), whose
     contents should be the name of a new RISCOS root directory.

     If this looks plausible, the name is read into malloc'd space, and its
     address returned as result; otherwise the result is NULL.
  */

{
  char buff[256];    /* to hold new root name: must be less than 256 chars */
  char *new_name = buff;
  int in;            /* file handle for open link file */
  char *file_pathname;

 /* open file for input */

  file_pathname = (char *)check_malloc(strlen(dirname)+strlen(linkname)+2,
                            msg_032);  /* 2 for '.' and zero terminator */
  strcpy(file_pathname, dirname);
  strcat(strcat(file_pathname, "."), linkname);

  if ((in = file_open_in(file_pathname))==0)  /* cannot open file */
  {
    error(msg_608, file_pathname, oserr==NULL ? "" : oserr->errmess);
    return NULL;
  }

 /* note input file handle as program state - see tidyup() function */

  state_input_file = in;

 /* read up to 255 chars from the link file, and terminate as a string */

  {
    int len = 255 - file_read_next(in, buff, 255);
    int i;

    buff[len] = 0;

    if (!file_eof(in))     /* if not at EOF, it can't be a link file! */
    {
      error(msg_609, file_pathname);
      return NULL;
    }

   /* remove leading and trailing spaces/newlines from the new root name */

    len--;
    while (len>=0 && (buff[len]=='\n' || buff[len]==' ')) len--;
    buff[++len] = 0;   /* terminate the root name */

    i = 0;
    while (i<len && (buff[i]=='\n' || buff[i]==' ')) i++;

    if (i==len)            /* the link file is empty */
    {
      error(msg_610, file_pathname);
      return NULL;
    }

    new_name = buff+i;
  }

 /* free space occupied by full file name and close link file */

  free(file_pathname);

  file_close(in);

  state_input_file = 0;   /* reset state */

 /* malloc space for new root name, copy it over, and return result */

  {
    char *root_name;

    root_name = (char *)check_malloc(strlen(new_name)+1, msg_046);
    strcpy(root_name, new_name);

    return root_name;
  }
}

/***************************************************************************/

void read_RISCOS_dir_with_links(void)

  /* Reads the entries from directory RISCOS_pathname into dir_chunk. Upon
     return, dir[0] ... dir[next_DR-1] point to the entries.

     Any entries for link files are replaced by the contents of the
     corresponding directories.
  */

{
  char *buff = dir_chunk;
  int buff_size = opt_dirsize;
  int used;
  int i, j;

 /* start by reading the entries which are directly held in the directory
    specified by RISCOS_pathname */

  next_DR = 0;
  used = read_RISCOS_dir(RISCOS_pathname, buff, buff_size);
  buff += used;         /* ready for next call */
  buff_size -= used;    /* ready for next call */

 /* now scan each entry to see if it describes a "link" file; if so, the
    entry for the link file itself is removed from the index, and entries
    for the directory whose name is held in the link file are added to the
    end of the index. Any further link files will be automatically picked
    up and processed as the scan proceeds, so no special action is
    necessary to "recurse" */

  i = 0;
  while (i<next_DR)
  {
    DR *obj = dir[i];

    if (id_of_DR(obj)[0] == '+')       /* link filenames start with '+' */
    {
      char *root_name;
      char *dir_name;

     /* remove the link file entry and move down any remaining entries in
        the index */

      for (j=i; j<(next_DR-1); j++) dir[j] = dir[j+1];
      next_DR--;
      i--;

     /* determine name of directory in which the link file lives */

      dir_name = obj->root;
      if (dir_name == NULL) dir_name = RISCOS_pathname;

     /* if the link file is ok, add new entries to the end of the index */

      if ((root_name = get_new_root_name(dir_name, id_of_DR(obj))) != NULL)
      {
        int start_DR = next_DR;

        used = read_RISCOS_dir(root_name, buff, buff_size);
        buff += used;
        buff_size -= used;

       /* store the RISC OS root directory name in the root field of these
          new entries */

        for (j=start_DR; j<next_DR; j++) dir[j]->root = root_name;
      }
    }

    i++;
  }

  return;
}

/***************************************************************************/

int get_datestamp(char *name, unsigned *load, unsigned *exec)

  /* Copy datestamp info (load/exec) for the object called name to
     the variables load and exec.

     Returns the type of the object as result:

        0 - not found
        1 - file
        2 - directory
        3 - PC partition (RISC OS 3 only)
       -1 - problem - in which case oserr holds the RISC OS error message
  */

{
  _kernel_swi_regs r;

 /* use OS_File 17 to read this catalogue information */

  r.r[0] = 17;
  r.r[1] = (int)name;

  if ((oserr=_kernel_swi(OS_File, &r, &r))!=NULL)
    return -1;

  *load = r.r[2];
  *exec = r.r[3];

  return r.r[0];
}

/***************************************************************************/
