/* file.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "msg.h"
#include "file.h"


/**********************  Low-level File interface **************************/

  /*  exported data  */

  /*  private data  */

#define  OS_Find     (0x0d)         /* File SWIs */
#define  OS_Args     (0x09)
#define  OS_GBPB     (0x0c)

/***************************************************************************/

int file_open_out(char *fname)

  /* Tries to open a file with the given name for output.

     If successful, the result is a handle for the file - otherwise a value
     of zero is returned, and oserr is set to the SWI error return.

     If the file does not exist, it is created with filetype Data.

     If it does exist, it is opened and truncated to zero length.
  */

{
  _kernel_swi_regs r;

  r.r[0] = 0x8f;   /* Create a new file with read/write access.
                      If a file with that name already exists, it will be
                       opened and its extent set to zero.
                      No path is used to search for the file. */
  r.r[1] = (int)fname;

  if ((oserr=_kernel_swi(OS_Find, &r, &r))!=NULL) return 0;

  return r.r[0];
}

/***************************************************************************/

int file_open_in(char *fname)

  /* Tries to open a file with the given name for input.

     If successful, the result is a handle for the file - otherwise a value
     of zero is returned (for example, if the file does not exist).
  */

{
  _kernel_swi_regs r;

  r.r[0] = 0x4f;   /* Open an existing file with read access only.
                      An error is generated if the file does not exist.
                      No path is used to search for the file. */
  r.r[1] = (int)fname;

  if ((oserr=_kernel_swi(OS_Find, &r, &r))!=NULL) return 0;

  return r.r[0];
}

/***************************************************************************/

void file_close(int handle)

  /* Closes the file with the given handle.
  */

{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  r.r[0] = 0;        /* "close" option */
  r.r[1] = handle;

  if ((e=_kernel_swi(OS_Find, &r, &r))!=NULL)
  {
    printf(msg_209, e->errmess);
    exit(1);
  }
}

/***************************************************************************/

BOOL file_write_next(int handle, char *buff, int nchars)

  /* Writes out nchars from buff to the file identified by handle.

     Result is TRUE iff all goes well.
  */

{
  _kernel_swi_regs r;

  r.r[0] = 2;        /* transfer data to current position in file */
  r.r[1] = handle;
  r.r[2] = (int)buff;
  r.r[3] = nchars;

  if (((oserr=_kernel_swi(OS_GBPB, &r, &r)) != NULL) || (r.r[3] != 0))
    return FALSE;            /* r3 = no. of bytes not transferred */

  return TRUE;
}

/***************************************************************************/

int file_read_next(int handle, char *buff, int nchars)

  /* Reads up to the next nchars from the file identified by handle into the
     buffer buff.

     Result is (nchars - number of characters read) - ie 0 is returned if
     nchars were transferred.
  */

{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  r.r[0] = 4;        /* transfer data from current position in file */
  r.r[1] = handle;
  r.r[2] = (int)buff;
  r.r[3] = nchars;

  if ((e=_kernel_swi(OS_GBPB, &r, &r)) != NULL)  /* unexpected problem */
  {
    printf(msg_210, e->errmess);
    exit(1);
  }

  nchars = r.r[3];   /* number of characters remaining to be read */

  if (nchars != 0 && !file_eof(handle))  /* nchars != 0 => EOF */
  {
    printf(msg_211);
    exit(1);
  }

  return nchars;
}

/***************************************************************************/

BOOL file_read(int handle, char *buff, int from, int nchars)

  /* Reads nchars from the file identified by handle starting at byte address
     from to the buffer buff.

     Result is TRUE iff all goes well.
  */

{
  _kernel_swi_regs r;

  r.r[0] = 3;        /* transfer data from specified position in file */
  r.r[1] = handle;
  r.r[2] = (int)buff;
  r.r[3] = nchars;
  r.r[4] = from;

  if (((oserr=_kernel_swi(OS_GBPB, &r, &r)) != NULL) || (r.r[3] != 0))
    return FALSE;            /* r3 = no. of bytes not transferred */

  return TRUE;
}

/***************************************************************************/

BOOL file_eof(int handle)

  /* Returns TRUE iff the pointer for the file identified by handle is at
     the EOF position.
  */

{
  _kernel_swi_regs r;

  r.r[0] = 5;  /* EOF option */
  r.r[1] = handle;

  _kernel_swi(OS_Args, &r, &r);

  return (r.r[2]!=0);
}

/***************************************************************************/
