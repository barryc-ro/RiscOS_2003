/* toscsi.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "opts.h"
#include "msg.h"
#include "scsi.h"
#include "toscsi.h"



/**********************  High-level SCSI interface  ************************/

  /*  exported data  */

  /*  private data  */

/* Information about an ADFS Boot Block */

#define BB_location     (0xc00)        /* start address in bytes */
#define BB_length       (0x200)        /* length in bytes */

  /* offsets within the boot block */

#define BB_checksum     (0x1ff)        /* checksum byte */

#define BB_sectors      (0x1c1)        /* blocks per track */
#define BB_heads        (0x1c2)        /* tracks per cylinder */

#define BB_format       (0x1fc)        /* bottom nybble = BB_hasunix => the
                                          next two fields are valid */
#define BB_unixcyl_ls   (0x1fd)        /* cylinder address of first block */
#define BB_unixcyl_ms   (0x1fe)        /* following the RISC OS partition */

#define BB_hasunix      (2)            /* see above */

/* RISCiX partition table information */

#define RISCiX_MAGIC_ID (0x4a657320)   /* expect this at the start */

#define PT_start        (2)            /* word offset of first of eight
                                          partition table entries */

  /* defines structure of each partition table entry */

typedef struct {
    int start;           /* first block */                      
    int length;          /* in blocks */
    unsigned flags;      /* entry is valid iff PTE_valid bit is set */
    char text[16];       /* partition name, zero-terminated */
} partition_table_entry;

#define PTE_valid       (0x1)


  /* internal structure used by toscsi_validate and has_RISCiX */

typedef struct {
    int partition_num;    /* the original RISC iX partition number */
    int first_block;
    int last_block;
} pt_entry;               /* records the extent of a partition */


  /* Data used by the routines toscsi_open_image, toscsi_next_image_block
     and toscsi_close_image.

     These routines make use of an output area whose length is defined by
     output_buffer_size (see main.h).

     This area is viewed as a sequence of ouput buffers, each of which can
     hold a single ISO 9660 block: these individual buffers are indexed by
     an array.
  */

static int firstblock;         /* address of first SCSI block for image */
static int lastblock;          /* ... and of last block */
static int nextblock;          /* ... and of next block to be written */

static int *outbuff;           /* the output area */
static int blocks_in_outbuff;  /* the size of the area in SCSI blocks */

static int numbuffs;           /* number of buffers in output area */
static char **buffs;           /* each output buffer is addressed by buffs[i]
                                  for i = 0 to numbuffs-1 */
static int nextbuff;           /* buffs[nextbuff] addresses the next buffer
                                  available */

/***************************************************************************/

static BOOL is_ADFS_boot_block(char *buff)

  /* Examines the contents of the buffer buff to determine whether it is
     likely to be an ADFS boot block: result is TRUE if this is so.

     At present, the only tests performed are:
         - validate the checksum byte
         - check that byte 1c1 is non-zero (this is the byte that contains
            the number of sectors per track)

     Without the second test, all zero blocks are recognised as valid
      boot blocks!
  */

{
  int sum = 0;
  int c = 0;
  int i;

  for (i=BB_length-2; i>=0; i--)
  {
    sum += buff[i] + c;
    if (sum < 0x100) c = 0;
    else
    { 
      sum &= 0xff;
      c = 1;
    }
  }

  return (sum == buff[BB_checksum] && buff[BB_sectors] != 0);
}

/***************************************************************************/

static int has_RISCOS(void)

  /* Examines the SCSI device to see whether a RISC OS partition has been
     allocated and initialised.

     If so, the result is the size of this partition in blocks.

     If not, the result is -1.
  */

{
  int blknum;       /* SCSI block containing (start of) RISC OS Boot block */
  int offset;       /* relative address of Boot block within SCSI block */
  int numblks;      /* Boot block is contained within numblks SCSI blocks */

  int *buff;        /* buffer for Boot block */
  int buffsize;     /* size of buffer in bytes */

 /* find address of start of Boot block as SCSI block number and offset */

  { div_t r;

    r = div(BB_location, scsi_block_size);

    blknum = r.quot;
    offset = r.rem;
  }

 /* determine size of Boot block in SCSI blocks and hence buffer size */

  numblks = 1;
  buffsize = scsi_block_size;

  while (buffsize < offset + BB_length)
  { 
    numblks++;
    buffsize += scsi_block_size;
  }

 /* allocate buffer */

  buff = (int *) check_malloc(buffsize, msg_043);

 /* read SCSI block(s) containing Boot block into buffer */

  if (!scsi_read((char*)buff, blknum, numblks))
  {
    printf(msg_203, oserr==NULL ? "" : oserr->errmess);
    exit(1);
  }

 /* see if it is, indeed, a RISC OS Boot block: if so, find out how large
    the RISC OS partition is */

  { 
    char *bb = (char*)buff + offset;    /* addresses potential boot block */

    if (!is_ADFS_boot_block(bb))
    { 
      free(buff);
      return -1;
    }
    else
    {
      int size;

     /* there may be some RISC iX partitions as well, as determined by the
        bottom nybble of the format type field */

      if ((bb[BB_format] & 0xf) == BB_hasunix)
      {
        int tracks_per_cyl = bb[BB_heads];
        int blocks_per_track = bb[BB_sectors];
        int unix_start_cyl = (bb[BB_unixcyl_ms] << 8) + bb[BB_unixcyl_ls];

        size = unix_start_cyl * tracks_per_cyl * blocks_per_track;
      }
      else
        size = scsi_last_block+1; /* no RISC iX => all the disc is RISC OS */

      if (size > (scsi_last_block+1))   /* check size is in range */
      { 
        printf(msg_204, size);          /* this should never happen */
        free(buff);
        exit(1);
      }

      free(buff);
      return (size);
    }
  }
}

/***************************************************************************/

static int has_RISCiX(int blocknum, pt_entry *ptable)

  /* Examines the block blocknum to see whether it contains a RISC iX
     partition table.

     If not, the result is 0.

     If so, the extents of any defined partitions with numbers in the range
     0 to 6 inclusive are recorded in ptable, and the total number of these
     partitions is returned as result.

     [Note that partition 7 is not recorded, because this is normally defined
      to be the whole device.]
  */

{
  int *buff;

 /* allocate a buffer for the potential partition table: note that we assume
    a block size of at least 256 bytes, since the partition table is 232
    bytes long */

  buff = (int *) check_malloc(scsi_block_size, msg_044);

 /* read in the block and look to see if it contains a partition table */

  if (!scsi_read((char*)buff, blocknum, 1))
  {
    printf(msg_202, oserr==NULL ? "" : oserr->errmess);
    exit(1);
  }

  if (buff[0] != RISCiX_MAGIC_ID) /* MAGIC_ID identifies a partition table */
  { 
    free(buff);
    return(0);
  }

 /* examine each partition table entry in turn, copying the extent of each
    valid entry to ptable */

  { 
    int i;
    int count = 0;
    partition_table_entry *pte;

    pte = (partition_table_entry *)(buff + PT_start);

    for (i=0; i<7; i++)
      if ((pte[i].flags & PTE_valid) != 0) /* valid entries have this bit */
      {
        ptable[count].partition_num = i;
        ptable[count].first_block = pte[i].start;
        ptable[count].last_block = (pte[i].start + pte[i].length) - 1;
        count++;
      }

    free(buff);
    return (count);
  }
}

/***************************************************************************/

static int note_image_extent(int startblock, int endblock)

  /* Called from toscsi_validate to note the extent of a validated image
     area.

     Prints out information message, and also sets the following global
     variables to be used by toscsi_open_image, toscsi_next_image_block
     and toscsi_close_image:

        firstblock
        lastblock

     Returns the length of the image area as result.
  */

{
  int length = (endblock - startblock) + 1;

  firstblock = startblock;
  lastblock = endblock;

  printf(msg_917, startblock, endblock, length);

  return length;
}

/***************************************************************************/

int toscsi_validate(int id, int startblock, int length)

  /* This routine checks that:

         - SCSI device id exists, and is direct-access
         - The area of length length starting at startblock is available (ie
             does not overlap any RISC OS or RISC iX partition on the device)

     If startblock<0 on entry, the area is assumed to start immediately
     after any RISC OS section - or at block 0 if no RISC OS section is
     present.

     If length<0 on entry, the area is assumed to run from startblock
     to the end of the disc.

     The result is the length (>0) of the available area iff all is well;
     otherwise a suitable error message is written, and a result of -1 is
     returned.
  */

{
  int endblock;

 /* check SCSI device exists and is direct-access */

  scsi_initialise(id);  /* does not return if any problems arise */

 /* look to see if there are any partitions on the disc */

  {
    pt_entry ptable[8];       /* to hold the extent of each partition */
    int numparts;             /* number of partitions found */

   /* look for a RISC OS partition first */

    {
      int size = has_RISCOS();

      if (size < 0)        /* ie no RISC OS partition (and hence no RISC iX
                              partitions either) */
      {
        if (startblock < 0) startblock = 0;   /* implicit start => start from
                                                 the beginning */

        if (length < 0)
          endblock = scsi_last_block;  /* implicit length => go to the end */
        else
          endblock = startblock + length - 1;

        printf(msg_911, id, scsi_last_block+1, scsi_block_size);
        return (note_image_extent(startblock, endblock));
      }

     /* implicit start => start from just after RISC OS partition */

      if (startblock < 0) startblock = size;

      if (length < 0)
        endblock = scsi_last_block;  /* implicit length => go to the end */
      else
        endblock = startblock + length - 1;

     /* note RISC OS area as first partition */

      ptable[0].first_block = 0;
      ptable[0].last_block = size-1;
      numparts = 1;

     /* if space after RISC OS, look for any RISC iX partitions */

      if (size != scsi_last_block+1) 
        numparts = (has_RISCiX(size, ptable+1)) + 1;

     /* print information about the device and its partitions */

      {
        int i;

        printf(msg_912, id, scsi_last_block+1, scsi_block_size);

        printf(msg_913, ptable[0].first_block, ptable[0].last_block);
        for (i=1; i<numparts; i++)
          printf(msg_914, ptable[i].partition_num,
                          ptable[i].first_block, ptable[i].last_block);
      }

     /* check that end of area lies within device limits */

      if (endblock > scsi_last_block)
      {
        printf(msg_915, startblock, endblock);
        return -1;
      }

     /* stop now if whole disc is allocated to RISC OS */

      if (size == scsi_last_block+1)
      {
        printf(msg_919, id);
        return -1;
      }

     /* check that no part of the area overlaps any partition */
 
      {
        int i;

        for (i=0; i<numparts; i++)
          if (startblock <= ptable[i].last_block   &&
              endblock   >= ptable[i].first_block)
          {
            printf(msg_916, startblock, endblock);
            return -1;
          }
      }

      return (note_image_extent(startblock, endblock));
    }
  }
}

/***************************************************************************/

void toscsi_open_image(void)

  /* This function must be called before the first call to
     toscsi_next_image_block().
  */

{
 /* determine parameters of the output area */

  blocks_in_outbuff = output_buffer_size/scsi_block_size;
  numbuffs = output_buffer_size/ISO_block_size;

 /* allocate the output area, and initialise the buffer index structure */

  outbuff = (int *) check_malloc(output_buffer_size, msg_009);
  buffs = (char **) check_malloc(numbuffs*sizeof(char*), msg_009);

  {
    int i;
    char *p = (char*)outbuff;

    for (i=0; i<numbuffs; i++)
    {
      buffs[i] = p;
      p += ISO_block_size;
    }
  }

 /* initialise "current state" variables */

  nextblock = firstblock;       /* first SCSI block to be written */
  nextbuff = 0;                 /* first buffer to be used */
 
}

/***************************************************************************/

static void write_next_blocks(int n)

  /* Called from toscsi_next_image_block and toscsi_close_image.

     Writes out n SCSI blocks from the output area.

     If the request would cause data to be written beyond the end of the
     allocated image area, a suitable message is output and the program
     exits (this should not happen).
  */

{
  if (nextblock+n > lastblock+1)
  {
    printf(msg_207, n, nextblock);    /* this should not happen! */
    exit(1);
  }

  if (!scsi_write((char*)outbuff, nextblock, n))
  {
    printf(msg_206, n, nextblock, oserr==NULL ? "" : oserr->errmess);
                                      /* and neither should this */
    exit(1);
  }

  nextblock += n;
}

/***************************************************************************/

char *toscsi_next_image_block(void)

  /* This function is called whenever a new image block is to be created.

     The result is the address of a buffer into which the contents of the
     next image block can be written.
  */

{
 /* if the output area is full, write it out */

  if (nextbuff==numbuffs)
  {
    write_next_blocks(blocks_in_outbuff);
    nextbuff = 0;
  }

 /* allocate next buffer */

  return (buffs[nextbuff++]);
}

/***************************************************************************/

void toscsi_close_image(void)

  /* This function must be called after the last call to
     toscsi_next_image_block().
  */

{
 /* First write out any outstanding buffers from the output area */

  if (nextbuff != 0)         /* can only be zero if NO data ever written! */
  {
    div_t r;
    int numblks;
    int i;

    r = div(nextbuff*ISO_block_size, scsi_block_size);

    numblks = r.quot;

   /* The following test can only return TRUE if the SCSI block size is
      greater than ISO block size, in which case the incompletely filled
      SCSI block must be padded with zeros prior to writing it out */

    if (r.rem != 0)
    {
      for (i=r.rem; i<scsi_block_size; i++)
        ((char*)outbuff)[numblks*scsi_block_size + i] = 0;
      numblks++;
    }

    write_next_blocks(numblks);
  }

 /* pad out the remainder of the image area with zeros - unless nowipe set */

  if (!opt_nowipe)
  {
    div_t r;
    int i;
    int blocks_left;
    int whole_buffers;

    printf(msg_903);

   /* clear the output area to zero */

    for (i=0; i<(output_buffer_size/sizeof(int)); i++)
      outbuff[i] = 0;

   /* work out how many complete buffers to write out, and how many blocks
      will then remain */

    blocks_left = (lastblock - nextblock) + 1;

    if (blocks_left > 0)
    {
      r = div(blocks_left, blocks_in_outbuff);
      whole_buffers = r.quot;
      blocks_left = r.rem;

     /* write out the whole buffers */

      for (i=0; i<whole_buffers; i++)
        write_next_blocks(blocks_in_outbuff);
        
     /* write out remainder, if any */

      if (blocks_left > 0)
        write_next_blocks(blocks_left);
    }
  }

 /* free the output area and buffer index */

  free(outbuff);
  free(buffs);
}

/***************************************************************************/
