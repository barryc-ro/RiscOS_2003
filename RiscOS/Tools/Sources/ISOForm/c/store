/*  store.c  */


/*************** Functions to store data in ISO 9660 formats ***************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "msg.h"
#include "store.h"


  /*  private data  */

#define  OS_ConvertDateAndTime (0xc1)      /* SWI */

#define  conv2(p)  ((*(p)-'0')*10+*((p)+1)-'0')
  /* converts two consecutive digits addressed by p to an integer value */


/***************************************************************************/

void store_num32B(char *p, unsigned x)

{
  store_num32L(p, x);
  store_num32M(p+4, x);

  return;
}

/***************************************************************************/

void store_num32L(char *p, unsigned x)

{
  p[0] = x;
  p[1] = x>>8;
  p[2] = x>>16;
  p[3] = x>>24;

  return;
}

/***************************************************************************/

void store_num32M(char *p, unsigned x)

{
  p[0] = x>>24;
  p[1] = x>>16;
  p[2] = x>>8;
  p[3] = x;

  return;
}

/***************************************************************************/

void store_num16B(char *p, unsigned x)

{
  store_num16L(p, x);
  store_num16M(p+2, x);

  return;
}

/***************************************************************************/

void store_num16L(char *p, unsigned x)

{
  p[0] = x;
  p[1] = x>>8;

  return;
}

/***************************************************************************/

void store_num16M(char *p, unsigned x)

{
  p[0] = x>>8;
  p[1] = x;

  return;
}

/***************************************************************************/

void store_datetimeS(char *p, unsigned load, unsigned exec)

  /* load and exec contain the 8 bytes of RISC OS load/exec address OR
     datestamp data: if no datestamp data is present, the ISO 9660
     datetimeS field is set to the "unset" value */

{
 /* top three nybbles of load determine whether there is datestamp data */

  if ((load & 0xfff00000) != 0xfff00000)
    store_zero(p, 7);                     /* store "unset" if none */
  else
  {
    _kernel_swi_regs r;
    char buff[5];
    char ds[15];
    char *format = "%CE%YR%MN%DY%24%MI%SE";

   /* copy 5-byte datestamp to buffer and convert to datetimeL format */

    buff[0] = exec;
    buff[1] = exec>>8;
    buff[2] = exec>>16;
    buff[3] = exec>>24;
    buff[4] = load;

    r.r[0] = (int)buff;                       /* 5-byte value to convert */
    r.r[1] = (int)ds;                         /* buffer to hold conversion */
    r.r[2] = 15;                              /* size of buffer */
    r.r[3] = (int)format;                     /* format string */

    _kernel_swi(OS_ConvertDateAndTime, &r, &r);

   /* convert each element of the datestamp and store in the ISO field */

    p[0] = (conv2(ds)*100 + conv2(ds+2)) - 1900;
    p[1] = conv2(ds+4);
    p[2] = conv2(ds+6);
    p[3] = conv2(ds+8);
    p[4] = conv2(ds+10);
    p[5] = conv2(ds+12);
    p[6] = 0;                /* GMT offset */
  }

  return;
}

/***************************************************************************/

void store_datetimeL(char *p, char *time)

  /* time format is "yyyymmddhhmmsscc" - or NULL to mean unset */

{
  if (time == NULL)                /* if so, store "unset" value */
  {
    store_string(p, "0000000000000000", 16);     /* 16 zeros */
    p[16] = 0;                                   /* zero byte */
  }
  else
  {
    store_string(p, time, 16);     /* time is already in correct format */
    p[16] = 0;                     /* GMT offset */
  }

  return;
}

/***************************************************************************/

void store_string(char *p, char *s, int len)

  /* the string s is stored from p[0] to p[len-1], being padded on the right
     with spaces if necessary: 0<=strlen(s)<=len
     s may also be NULL on entry - which is treated as "" */

{
  int i;
  int ls = (s==NULL) ? 0 : strlen(s);

  for (i=0; i<ls; i++) p[i] = s[i];
  for (; i<len; i++) p[i] = ' ';

  return;
}

/***************************************************************************/

void store_zero(char *p, int n)

  /* store n zero bytes */

{
  int i;

  for (i=0; i<n; i++) p[i] = 0;

  return;
}

/***************************************************************************/
