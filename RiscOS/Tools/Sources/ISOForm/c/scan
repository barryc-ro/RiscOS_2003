/*  scan.c  */


/************ Directory scan functions common to Phases 1 and 3 ************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "opts.h"
#include "msg.h"
#include "phsupp.h"
#include "scan.h"


  /*  private data  */

/* some macros for character validation */

#define  digit(ch)            ('0'<=ch && ch<='9')
#define  upper_case(ch)       ('A'<=ch && ch<='Z')
#define  lower_case(ch)       ('a'<=ch && ch<='z')
#define  change_to_upper(ch)  ch-=('a'-'A')


/***************************************************************************/

static int comp_ascii(const void *s1, const void *s2)

 /* must declare as "const void *" to avoid compiler error messages */

{
  return strcmp(id_of_DR(*((DR**)s1)), id_of_DR(*((DR**)s2)));
}

/***************************************************************************/

static void remove_dir(int i)

  /* removes the directory entry dir[i] from the list */

{
  int j;

  for (j=i+1; j<next_DR; j++) dir[j-1] = dir[j];
  next_DR--;

  return;
}

/***************************************************************************/

void read_directory(BOOL check)

  /* reads the contents of the directory <RISCOS_pathname> and checks*
     that all conforms to ISO 9660.

     On exit:

       dir[0] ... dir[next_DR-1]  will point to the directory records
         sorted and processed as follows:

           - any RISC OS partition is re-typed as a file
           - all lower-case letters are replaced by upper-case in object ids
           - any leading ! is replaced by _ (with appropriate change in attr
             field)
           - any duplicate names arising as a result of the above conversion
             (of !->_) are reported as errors
           - at level == 8 only:
                - any directory found is reported as an error and is then
                    removed from the list
           - sort order is alphanumeric

           - a warning is reported for any name > 10 chars long
           - a warning is issued for any empty directory or file
           - a warning is issued for any directory with >77 entries

           - a warning is issued if the object id contains a '/' character
             four chars from the end of the id or is of type DOS (7fe4)
             in either case the object type is set to 
             type_DOSFILE or type_DOSDIR

           - an error is reported for any file name > 30 chars long
           - an error is reported for any directory name > 31 chars long
           - an error is reported for any object name that includes 
             characters other than digits, upper-case letters and underlines
           - at level == 8 only:
               - an error is reported if
                      pathname length + filename length > 245

     Note that in most cases objects with non-conforming names remain in
     the list for further processing - thus making sure that maximum
     benefit in terms of checking arises from a single run of the program.

         * Note that the BOOL parameter check is set TRUE when called from
           Phase 1, and FALSE when called from Phase 3: if check==FALSE, all
           names are transformed and records sorted according to ISO 9660
           requirements, but no checks are made.

     If the -public option is not set, a count is kept of files without
     public read access - otherwise, this bit is set.
  */

{
  int j;
  int i;          /* dir[i] addresses the current object */
  DR *obj;        /* addresses current object - file or directory entry */
  int type;       /* the type of obj - type_FILE, type_DIR etc. */
  char *objid;    /* address of the object's identifier */
  int len;        /* the length of the object's identifier */
 

 /* first read in all directory entries - taking account of any link files -
    and index them as dir[0] ... dir[next_DR-1]  */

  read_RISCOS_dir_with_links();


 /* transform and check file names */

  for (i=0; i<next_DR; i++)        /* step through each directory entry */
  {

   /* get basic information about object */

    obj = dir[i];                  /* address of DR */
    type = obj->type;              /* type of object 
                                      N.B not changed 
                                      when MSDOS object is detected
                                      (only obj->type is changed)*/
    objid = id_of_DR(obj);         /* name of object */ 
    len = strlen(objid);           /* length of object's name */


   /* file type checks */

    if (type == type_PARTITION) type = obj->type = type_FILE;
      /* treat RISC OS 3 PC partitions as files */

    if (level==max_level)

     /* any directory at level 8 is an error - and is then ignored */

      if (type == type_DIR)
      {
        error(msg_600, id_of_DR(obj));
        remove_dir(i);
        i--;
        continue;
      }


   /* name checks */

   /* change any leading ! to _ and note in attr field */

    if (objid[0] == '!')
    {
      objid[0] = '_';
      obj->attr |= attr_pling;
    }
    /* Check for files with filetype DOS (&FE4) even if they have a null 
       filename extension
       - set object type to type_DOSFILE
       Comment this out if not required */

    if ((type == type_FILE) && ((obj->load & 0xFFFFFF00) == 0xFFFFE400))
    {
      /* Set bit 2 to indicate DOS file*/
      obj->type += 4;
      /* Warn about MSDOS file/dir */ 
      if (check)
      {
        warn(msg_815,objid);
        /* Increase count */
        dos_extensions++;
       }
     }

   /* check each character is ISO permitted, changing lower to upper case */

    for (j=0; j<len; j++)
    {
      char ch = objid[j];

      if (lower_case(ch))
        change_to_upper(objid[j]);
      else
      {
        /* otherwise must be an uppercase letter, digit or an underline */

        { if (!(upper_case(ch) || digit(ch) || ch=='_'))
          { 
            /* Check to see if an MSDOS file or directory with a filename
                 extension then errors for '/' are suppressed */
            if ((ch == '/') && (j == len-4) &&
                ((type == type_DIR) || (type == type_FILE)))
            {
              /* Only carry out the changes if filetype is NOT DOS
                 since this was handled earlier */
              if ((obj->load & 0xFFFFFF00) != 0xFFFFE400)
              {
                /* Set bit 2 to indicate DOS file or dir. */
                obj->type += 4;
                /* Warn about MSDOS file/dir */ 
                if (check)
                {
                  warn(msg_815,objid);
                  /* Increase count */
                  dos_extensions++;
                }
              }
            }
            else
              /* Invalid char */
              if (check) error(msg_601, objid);
          }
        }
      }
    }

   /* check length constraints */

    if (check)
    {
      if (type==type_DIR && len>31)         /* dirid > 31 chars */
        error(msg_602, objid);

      else if (type==type_FILE && len>30)   /* fileid > 30 chars */
        error(msg_603, objid);

      else if (len>10)                      /* objid > 10 chars - warning */
      {
        warn(msg_800, objid);
        long_names++;
      }

      if (level==max_level && ISO_pathname_length + len > 245)    /* wow! */
        error(msg_604, objid);
    }

   /* check public read access and adjust if appropriate */

    if (type==type_FILE)
    {
      if (opt_public)
        obj->attr |= attr_public_read;    /* force r if option set */
      else
        if (check && (obj->attr & attr_public_read)==0) private_files++;
          /* or keep count of number of files not readable */
    }

    if (type==type_DIR)     /* does no harm - may help in the future */
    {
      if (opt_public)
        obj->attr |= attr_public_read;
    }

   /* warn about zero length files */

    if (check)
    {
      if (type==type_FILE && obj->length==0)
      {
        warn(msg_803, objid);
        empty_files++;
      }
    }

  }


 /* is the directory very large or very small? */

  if (check)
  {
    if (next_DR > 77)    /* too many entries for L4FS */
    {
      warn(msg_801);
      big_dirs++;
    }

    if (next_DR == 0)    /* empty directory */
    {
      warn(msg_802);
      empty_dirs++;
    }
  }


 /* sort the entries alphanumerically */

  qsort(dir, next_DR, sizeof(DR*), comp_ascii);


 /* finally, check to see that there are no duplicate names: these may have
    arisen because of the ! -> _ mapping, or because a "linked" directory
    contains a duplicate name */

  if (check)
  {
    i = next_DR-1;

    while (i>=1)
    {
      if (strcmp(id_of_DR(dir[i]), id_of_DR(dir[i-1])) == 0)
        error(id_of_DR(dir[i])[0] == '_' ? msg_605 : msg_607,
                                                 id_of_DR(dir[i]));
      i--;
    }
  }
}

/***************************************************************************/

void set_path_info(int pti, BOOL check)

  /* On entry, pti is a path table index: that is, pt[pti] addresses a path
     table record for some directory $.d1.d2. ... .dn

     This function sets state variables as follows:

       RISCOS_pathname = "$.dj.d(j+1). ... .dn"             ["$" - if pti==1]
      *ISO_pathname_length = strlen(d1) + ... + strlen(dn)  [  0 - if pti==1]

     where $ is the name of the root directory of the RISC OS hierarchy in
     which the directory described by pt[pti] lies.

     malloc is used where necessary to make sure RISCOS_pathname does not
     overflow.

         * Note: The BOOL parameter check is set TRUE when called from
                 Phase 1, and FALSE when called from Phase 3: when
                 check==FALSE, ISO_pathname_length is not set up.
  */

{
  PTR *path[max_level];
  int n, i;


 /* special case: root directory (pti==1) */

  if (pti==1)
  {
    int len = strlen(opt_root) + 1;

    if (R_p_len < len)    /* see below */
    {
      free(RISCOS_pathname);
      RISCOS_pathname = (char *)check_malloc(len, msg_034);
      R_p_len = len;
    }

    strcpy(RISCOS_pathname, opt_root);
    ISO_pathname_length = 0;
    if (!check) level = 0;

    return;
  }
 

 /* build up the path as path[n] = pt[1], path[n-1], ... path[0] */

  n = 0;
  while (pti != 1)
  {
    path[n++] = pt[pti];
    pti = pt[pti] -> parent;
  }
  path[n] = pt[1];

 /* work out length of ISO path name and of RISC OS path name */

  {
    int len = 0;
    int root_level = -1;

    ISO_pathname_length = 0;
    for (i=0; i<n; i++)
    {
      ISO_pathname_length += strlen(id_of_PTR(path[i]));

      if (root_level < 0)
      {
        len += (strlen(id_of_PTR(path[i])) + 1);   /* dirid plus separator */

        if (path[i]->root != NULL)
        {
          root_level = i;
          len += (strlen(path[i]->root) + 1);  /* root dirid plus zero
                                                  terminator */
        }
      }
    }

   /* check that sufficient space is allocated to RISCOS_pathname; if not,
      get some more! */

    if (R_p_len < len)
    {
      free(RISCOS_pathname);             /* free up previous allocation */
      RISCOS_pathname = (char *)check_malloc(len, msg_034);
      R_p_len = len;                     /* record new allocation */
    }

   /* build up path name */

    strcpy(RISCOS_pathname, path[root_level]->root);
    for (i=root_level; i>=0; i--)
      strcat(strcat(RISCOS_pathname, "."), id_of_PTR(path[i]));
  }

 /* if called from Phase 3, we set level - this makes sure that any
    directories at level 8 are redefined as files by read_directory
    just as they were during Phase 1 ... */

  if (!check) level = n+1;

  return;
}

/***************************************************************************/
