/* opts.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "main.h"
#include "msg.h"
#include "opts.h"


  /*  exported data  */

/* program options with initial values: NULL and -1 indicate "unset" */

char *opt_root = NULL;
BOOL opt_check = FALSE;
char *opt_tofile = NULL;
int opt_toscsi_id = -1;
int opt_toscsi_start = -1;
int opt_toscsi_length = -1;
char *opt_volid = NULL; 
char *opt_pubid = NULL;
char *opt_copyid = NULL;
BOOL opt_help = FALSE;
BOOL opt_nowipe = FALSE;
BOOL opt_quiet = FALSE;
BOOL opt_report = FALSE;
BOOL opt_public = FALSE;
BOOL opt_nowarn = FALSE;
int opt_ptsize = -1;
int opt_dirsize = -1;
char *opt_opts = NULL;
int opt_first = -1;

BOOL opt_force = FALSE;    /* not documented */


  /*  private data  */

#define max_chars_in_line    (300) /* no more than this in a line of the
                                       options file, I hope! */
#define max_args_in_file     (100) /* and no more arguments than this */

static BOOL in_opts_file;          /* set TRUE when reading options from opts
                                      file rather than the command line */

/* the following variables are set up by proc_opts, and are accessed and
   updated by the various parameter-reading functions called from proc_opts:

      args[next_arg]  is the next argument to be processed,

        unless next_arg==num_args - when there are no more arguments.
*/

static char **args;
static int next_arg;
static int num_args;


/* the variable 'destination' records which output option is specified first
   (and hence is to be chosen) */

#define  dest_UNSET  (0)
#define  dest_FILE   (1)
#define  dest_SCSI   (2)

static int destination = dest_UNSET;



/***************************************************************************/

static void force_lower(char *s)

  /* replace any upper-case letters in s by their lower-case equivalents */

{
  int i;

  for (i=0; i<strlen(s); i++)
    s[i] = tolower(s[i]);

  return;
}

/***************************************************************************/

static void force_upper(char *s)

  /* replace any lower-case letters in s by their upper-case equivalents */

{
  int i;

  for (i=0; i<strlen(s); i++)
    s[i] = toupper(s[i]);

  return;
}

/***************************************************************************/

static int read_args_from_file(char ***opts)

  /* Read in data from the options file, recording as arguments in opts[1]
     ... opts[n-1]; n is returned as result.
  */

{
  FILE *file;
  char line[max_chars_in_line+1];
  int n = 1;   /* index for next argument in opts */
  int line_num = 0;

 /* allocate space for the array of arguments */

  *opts = (char**)check_malloc((max_args_in_file+1)*sizeof(char*), msg_014);

 /* open options file */

  file = fopen(opt_opts, "r");

  if (file==NULL)
  {
    printf(msg_015);
    exit(1);
  }

 /* use fgets to read each line from the options file */

  while (fgets(line, max_chars_in_line+1, file) != NULL)
  {
    int len = strlen(line);
    int i = 0;

    line_num++;

   /* remove any terminating newline character */

    if (line[len-1] == '\n') line[--len] = 0;

   /* if line is now empty, go on to next one */

    if (len==0) continue;

   /* first char must be - */

    if (line[0] != '-')
    {
      printf(msg_027, line_num);
      exit(1);
    }

   /* find end of option and terminate it */

    while (line[i] != ' ' && line[i] != 0) i++;
    line[i] = 0;

   /* add the option to the simulated argument list */

    if (n > max_args_in_file)
    {
      printf(msg_016);
      exit(1);
    }
    (*opts)[n++] = strcpy((char*)check_malloc(strlen(line)+1, msg_014),
                          line);

   /* ignore any leading spaces before any parameter value */

    if (i != len)
      while (line[++i] == ' ');

   /* if there is a non-null parameter value, add it to the arg list */

    if (i != len)
    {
      if (n > max_args_in_file)
      {
        printf(msg_016);
        exit(1);
      }
      (*opts)[n++] = strcpy((char*)check_malloc(strlen(line+i)+1, msg_014),
                            line+i);
    }
  }

 /* close file and return one more than number of arguments recorded */

  fclose(file);
  return n;
}

/***************************************************************************/

static void supply_help_info(void)

  /* Write out information about the available options */

{
  printf("Options for *ISOForm version %s are:\n", version_id);
  printf("  -root <dirname>      Root directory for image - must be present\n");
  printf("  -check               Check only - do not create image\n");
  printf("  -tofile <filename>   Write image to file\n");
  printf("  -toscsi <deviceid> [ <startblock> [ <numblocks> ] ]\n");
  printf("                       Write image to SCSI device from <startblock>\n");
  printf("                        (default 0) of length <numblocks>\n");
  printf("  -volid <d-string>    Volume Identifier\n");
  printf("  -pubid <a-string>    Publisher Identifier\n");
  printf("  -copyid <d-string>   Copyright File Identifier\n");
  printf("  -help                Types this information\n");
  printf("  -nowipe              Do not pad out SCSI image with zeros\n");
  printf("  -quiet               Do not output progress messages\n");
  printf("  -report              Report location of objects in image\n");
  printf("  -public              Force public read access\n");
  printf("  -nowarn              Do not output warning messages\n");
  printf("  -first <int>         Write files of this type at the start of the image\n");
  printf("  -ptsize <int>[k|K]   Size of internal path table structure in bytes\n");
  printf("  -dirsize <int>[k|K]  Size of internal directory table structure in bytes\n");
  printf("  -opts <filename>     File containing further options\n");
}

/***************************************************************************/

static char *get_param(void)

  /* returns the value of an option parameter, if found; if not, returns
     NULL
  */

{
  if (next_arg == num_args ||        /* there are no more arguments */
      args[next_arg][0] == '-')      /* the next argument is an option */
    return NULL;

  return args[next_arg++];
}

/***************************************************************************/

static BOOL get_int_value(char *option, int *var)

  /* Called to read an optional option parameter that is an integer.

     If there are no more parameters, the result is FALSE.

     Otherwise, the parameter is checked: if it does not conform to the
     syntax below, an error is reported.

     Otherwise, the value is assigned to var.

       Note that the following syntax is accepted:

            [&]<digit(s)>[k|K]

       A leading & causes the <digit(s)> to be interpreted as hexadecimal
       values.

       A terminating [k|K] causes the value to be multiplied by 1024.
  */

{
  char *param;  /* to hold the parameter value */

 /* check that the option is followed by a parameter value */

  if ((param = get_param()) == NULL) return FALSE;

 /* convert parameter value to integer */

  {
    int len = strlen(param);
    int i = 0;                 /* indexes current character in param */
    int base = 10;             /* or 16 */
    int n = 0;                 /* accumulates value */

    if (param[0] == '&')       /* & as first char => hexadecimal */
    {
      base = 16;
      i++;
    }

    do
    {
      char ch = param[i];      /* pick up next character from parameter */

      if (ch>='0' && ch<='9')  /* decimal digit */
      {
        n = n*base + (ch-'0');
        continue;
      }

      if (base==16)
      {
        if (ch>='A' && ch<='F')   /* hexadecimal digit - uc */
        {
          n = n*base + (ch+10-'A');
          continue;
        }
        if (ch>='a' && ch<='f')   /* hexadecimal digit - lc */
        {
          n = n*base + (ch+10-'a');
          continue;
        }
      }

      if (ch=='k' || ch=='K')     /* k or K => multiply by 2^10 */
      {
        n *= 1024;
        i++;
        break;                    /* k|K must be last character */
      }

      break;                      /* any other char is unexpected */

    } while (++i<len);

    if (i<len)     /* an unexpected character found in param */
    {
      printf(msg_026, param);
      exit(1);
    }

    *var = n;
  }
    
  return TRUE;
}

/***************************************************************************/

static void get_param_int(char *option, int *var)

  /* Called to read an option parameter that is an integer.

     If there are no more parameters, an error is reported.

     Otherwise the parameter is checked and, provided the option has not
     already been set, its value is assigned to var.
  */

{
  int param;  /* to hold the parameter value */

 /* read and check the parameter value is present: if not, raise error */

  if (!get_int_value(option, &param))
  {
    printf(msg_022, option);
    exit(1);
  }

 /* assign parameter value to variable unless the option value has already
    been set */

  if (*var == -1) *var = param;

  return;
}

/***************************************************************************/

static BOOL check_dchar(char ch)

  /* returns TRUE iff ch is an d-char - unashamedly non-portable! */

{
  return ch>='0' && ch<='9' ||
         ch>='A' && ch<='Z' ||
         ch=='_';
}

/***************************************************************************/

static BOOL check_achar(char ch)

  /* returns TRUE iff ch is an a-char - unashamedly non-portable! */

{
  return ch>=' ' && ch<='"' ||        /*  !" */
         ch>='%' && ch<='?' ||        /* digits, %&'()*+,-./:;<=>? */
         ch>='A' && ch<='Z' ||
         ch=='_';
         
}

/***************************************************************************/

static void get_param_adchars(char *option, char **var, int n,
                              BOOL (*check)(char ch))

  /* Called to read an option parameter that is an string of no more than n
     characters.

     If there are no more parameters, an error is reported.

     Otherwise, the characters of the parameter value are checked using the
     function check - and, if the option has not already been set, its value
     is then assigned to var.
  */

{
  char *param;  /* to hold the parameter value */

 /* check parameter value is present, and fetch it */

  if ((param = get_param()) == NULL)
  {
    printf(msg_022, option);
    exit(1);
  }

 /* replace any lower-case letters by their upper-case equivalents */

  force_upper(param);

 /* check parameter is a string composed of no more than n characters of
    the correct kind */

  { int len = strlen(param);
    int i;

    if (len > n)
    {
      printf(msg_024, option);
      exit(1);
    }

    for (i=0; i<len; i++)
      if (!check(param[i]))
      {
        printf(msg_025, option, param[i]);
        exit(1);
      }
  }

 /* assign parameter value to variable unless the option value has already
    been set */

  if (*var == NULL) *var = param;

  return;
}

/***************************************************************************/

static void get_param_achars(char *option, char **var, int n)

  /* Read an option parameter that is an a-string of no more than n
     characters.
  */

{
  get_param_adchars(option, var, n, check_achar);
}

/***************************************************************************/

static void get_param_dchars(char *option, char **var, int n)

  /* Read an option parameter that is a d-string of no more than n
     characters.
  */

{
  get_param_adchars(option, var, n, check_dchar);
}

/***************************************************************************/

static void get_param_str(char *option, char **var)

  /* Called to read an option parameter that is a string.

     If there are no more parameters, an error is reported.

     Otherwise, provided the option value has not already been set, its
     value is assigned to var.
  */

{
  char *param;  /* to hold the parameter value */

 /* check parameter value is present, and fetch it */

  if ((param = get_param()) == NULL)
  {
    printf(msg_022, option);
    exit(1);
  }

 /* assign parameter value to variable unless the option value has already
    been set */

  if (*var == NULL) *var = param;

  return;
}

/***************************************************************************/

static void proc_opts(char *opts[], int n)

  /* Process options specified in opts[1] ... opts[n-1] according to the
     value of in_opts_file: TRUE => arguments are from the command line,
     FALSE => arguments are from an options file.

     Checks the existence and syntax of any option parameters: if problems
     are found, a suitable message is printed and exit(1) is called.
  */

{
  char *option;  /* the current option */

 /* set up global variables to share with parameter-reading functions */

  args = opts;
  next_arg = 1;
  num_args = n;

  while (++next_arg <= num_args)
  {
    option = opts[next_arg-1];
    force_lower(option);            /* replace any upper by lower-case */

   /* which one is it? */

    if (strcmp(option, "-root")==0)
      get_param_str(option, &opt_root);

    else if (strcmp(option, "-check")==0)
      opt_check = TRUE;

    else if (strcmp(option, "-tofile")==0)
    {
      get_param_str(option, &opt_tofile);

     /* record FILE as the destination if this is the first output option
        encountered */

      if (destination == dest_UNSET) destination = dest_FILE;
    }

    else if (strcmp(option, "-toscsi")==0)
    {
      int id;
      int start = -1;
      int length = -1;

     /* device id must be specified and in range 0<=i<=6 */

      if (!get_int_value(option, &id))
      {
        printf(msg_019);
        exit(1);
      }

      if (id>6)
      {
        printf(msg_020);
        exit(1);
      }

     /* might be followed by startblock and length */

      if (get_int_value("-toscsi startblock", &start))
        get_int_value("-toscsi startblock length", &length);

     /* record the parameter values unless this option has already been
        set */

      if (opt_toscsi_id == -1)
      {
        opt_toscsi_id = id;
        opt_toscsi_start = start;
        if (opt_toscsi_length == -1) opt_toscsi_length = length;
          /* only record length if it has not already been set by the
                   "-toscsilength <int>" option */
      }

     /* record SCSI as the destination if this is the first output option
        encountered */

      if (destination == dest_UNSET) destination = dest_SCSI;
    }

    else if (strcmp(option, "-toscsilength")==0)
      get_param_int(option, &opt_toscsi_length);

    else if (strcmp(option, "-volid")==0)
      get_param_dchars(option, &opt_volid, 32);

    else if (strcmp(option, "-pubid")==0)
      get_param_achars(option, &opt_pubid, 128);

    else if (strcmp(option, "-copyid")==0)
      get_param_dchars(option, &opt_copyid, 8);

    else if (strcmp(option, "-help")==0)
      opt_help = TRUE;

    else if (strcmp(option, "-nowipe")==0)
      opt_nowipe = TRUE;

    else if (strcmp(option, "-quiet")==0)
      opt_quiet = TRUE;

    else if (strcmp(option, "-report")==0)
      opt_report = TRUE;

    else if (strcmp(option, "-public")==0)
      opt_public = TRUE;

    else if (strcmp(option, "-nowarn")==0)
      opt_nowarn = TRUE;

    else if (strcmp(option, "-force")==0)
      opt_force = TRUE;

    else if (strcmp(option, "-ptsize")==0)
      get_param_int(option, &opt_ptsize);

    else if (strcmp(option, "-dirsize")==0)
      get_param_int(option, &opt_dirsize);

    else if (strcmp(option, "-first")==0)
      get_param_int(option, &opt_first);

    else if (strcmp(option, "-opts")==0)
    {
     /* not permitted inside an options file! */

      if (in_opts_file)
      {
        printf(msg_018);
        exit(1);
      }

      get_param_str(option, &opt_opts);
    }

    else          /* unknown option */
    {
      printf(msg_017, option);
      exit(1);
    }
  }

  return;
}

/***************************************************************************/

void process_options(char *opts[], int n)

  /* Called from main(..) to process any command line arguments supplied in
      opts[1] ... opts[n-1].

     If any problems are encountered, a suitable error message is output
      and exit(1) is called.

     If all is well, each of the option variables above will have been
      appropriately set up before exit.
  */

{
 /* if there are no arguments, supply the "help" information and exit */

  if (n==1)
  { supply_help_info();
    exit(0);
  }

 /* read any arguments from the command line first */

  in_opts_file = FALSE;
  proc_opts(opts, n);

 /* if an "options" file is specified, read further arguments from it */

  if (opt_opts != NULL)
  {
    int n;
    char **opts;

    n = read_args_from_file(&opts);

    in_opts_file = TRUE;
    proc_opts(opts, n);
  }

 /* if the -help option is set, output help and stop */

  if (opt_help)
  {
    supply_help_info();
    exit(0);
  }

 /* now check consistency of specified options and set defaults */

 /* -root is mandatory */

  if (opt_root==NULL)
  { printf(msg_012);
    exit(1);
  }

 /* -check overrides both -tofile and -toscsi options */

  if (opt_check)
  {
    opt_tofile = NULL;
    opt_toscsi_id = -1;
  }
  else
  {

   /* only the first output option specified counts */

    switch (destination)
    {
      case dest_UNSET:       /* and there MUST be one ... */
        printf(msg_013);
        exit(1);

      case dest_FILE:
        opt_toscsi_id = -1;
        break;

      case dest_SCSI:
        opt_tofile = NULL;
        break;
    }
  }

 /* set defaults */

  if (opt_ptsize == -1) opt_ptsize = DFLT_ptsize;
  if (opt_dirsize == -1) opt_dirsize = DFLT_dirsize;

  return;
}

/***************************************************************************/
