/*  phase23.c  */


/**************************** Phase 2 - placement **************************/
/*                          Phase 3 - image creation                       */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "main.h"
#include "opts.h"
#include "msg.h"
#include "store.h"
#include "phsupp.h"
#include "scan.h"
#include "phase23.h"


  /*  private data  */

static char *buff;         /* addresses current buffer */
static char *p;            /* identifies next free location in buff */

static int PT_size_bytes;  /* size of Path Table in bytes */
static int PT_size_blocks; /* size of Path Table in blocks */

#define  type_L        (0)     /* kinds of Path Table */
#define  type_M        (1)

/* the following variables are used by the "report" functions */

static int image_block;           /* keeps track of position in the image */
static int next_initial_file_location;
                                  /* keeps track of position of initial files
                                     in the image */
static char ISO_pathname[256];    /* max. allowed by ISO standard is 255
                                     chars */

#define max_obj_len   (45)        /* max length of object name that can be
                                     printed - see msg_408 */

/***************************************************************************/

static void report(char *object, char type, int start, int length, int size)

  /* outputs a single report line */

{
  int len = strlen(object);
  char trunc_obj[max_obj_len+1];

 /* truncate object on the left if it is too long */

  if (len>max_obj_len)
  {
    strcpy(trunc_obj, object+len-max_obj_len);
    object = trunc_obj;
  }

  printf(msg_408, object, type, start, length, size);

  return;
}

/***************************************************************************/

static void set_ISO_pathname(int pti)

  /* sets ISO_pathname to the ISO path name of the directory specified by
     the PTR pt[pti]; this is used by report_file(..)
  */

{
  if (pti==1)       /* the root of the hierarchy is a special case */
    strcpy(ISO_pathname, "");
  else
  {
    PTR *path[max_level];
    int n, i;

   /* build up the path as path[n] = pt[1], path[n-1], ... path[0] */

    n = 0;
    while (pti != 1)
    {
      path[n++] = pt[pti];
      pti = pt[pti] -> parent;
    }
    path[n] = pt[1];

   /* build up path name, with '.' as separators and at the end */

    ISO_pathname[0] = 0;    /* null string to start with */
    for (i=n-1; i>=0; i--)
      strcat(strcat(ISO_pathname, id_of_PTR(path[i])), ".");
  }

  return;
}

/***************************************************************************/

static void report_dir(int pti)

  /* Produce report line for the directory described by pt[pti].

     Also sets up ISO_pathname for use by report_file.
  */

{
  int size;

  set_ISO_pathname(pti);

  size = pt[pti]->size;

 /* treat root directory specially */

  if (pti==1)
  {
   /* produce report line for the root directory */

    report(msg_409, 'D', image_block, size, size*ISO_block_size);
    image_block+=size;

    return;
  }
 

 /* output report line */

  {
    int len = strlen(ISO_pathname);

    ISO_pathname[len-1] = 0;   /* remove trailing '.' before report */
    report(ISO_pathname, 'D', image_block, size, size*ISO_block_size);
    ISO_pathname[len-1] = '.'; /* and add it back afterwards */
  }

  image_block+=size;

  return;
}

/***************************************************************************/

static void report_file(DR *obj)

  /* produce report line for file */

{
  int bytes = obj->length;
  int blocks = bytes_to_blocks(bytes);
  int path_len = strlen(ISO_pathname);

 /* add filename to path name */

  strcat(ISO_pathname, id_of_DR(obj));

 /* change initial _ to ! if required */

  if ((obj->attr & attr_pling) != 0) ISO_pathname[path_len] = '!';

 /* output report line - noting location as 0 if the file is zero-length */

  report(ISO_pathname, 'F', (blocks==0) ? 0 : image_block, blocks, bytes);

  image_block+=blocks;

 /* remove filename from path name */

  ISO_pathname[path_len] = 0;

  return;
}

/***************************************************************************/

void phase_2(void)

  /* Placement:

      - calculate size of path tables, and so determine where the root
        directory can go
      - scan the Path Table working out where to store each directory,
        which is immediately followed by all its files.

     image_size is set to the total number of blocks required for the image.
  */

{
  int i;
  int next_block;    /* next block available for allocation in the image */


 /* calculate size of each path table: each PTR is made up of a fixed part,
    and a variable part (for the directory identifier) */

  PT_size_bytes = (next_PTR-1)*ISO_PTR_size;
    /* there are next_PTR-1 path table records, since the first is no. 1 */

  PT_size_bytes += 2;
    /* For the root directory descriptor's id field and padding byte; note
       that the PTR for the Root Directory must be treated specially, since
       its ISO id field is the single character (numeric) zero - which cannot
       be represented as a C string! So instead I store the RISC OS root
       directory's name there ... */

  for (i=2; i<next_PTR; i++)  /* start with the PTR following the root PTR */
  {
    int n = round_to_even(strlen(id_of_PTR(pt[i])));
      /* length of dirid rounded up to even value */

    PT_size_bytes += n;
  }

  PT_size_blocks = bytes_to_blocks(PT_size_bytes);


 /* now allow space for:
      System area      0 - 15
      PVD              16
      VDST             17
      Type L PT        18 - 17+PTS
      Type M PT        18+PTS - 17+PTS+PTS   */

  next_block = 18 + 2*PT_size_blocks;
    /* this is where the Root Directory will start */


 /* scan through path table to allocate space for any initial files */

  for (i=1; i<next_PTR; i++)
    next_block += pt[i]->size_of_first_files;


 /* now scan the path table again, allocating space for each directory
    and its other files as we go */

  for (i=1; i<next_PTR; i++)
  {
    pt[i]->location = next_block;        /* place the directory itself */
    next_block += (pt[i]->size + pt[i]->size_of_other_files);
  }


 /* record image size in external variable */

  image_size = next_block;

  return;
}

/***************************************************************************/

static void pad_buff(void)

  /* pad out buffer with zeros from p to the end */

{
  while (p < (buff+ISO_block_size)) *(p++) = 0;

  return;
}

/***************************************************************************/

static void store(char x)

  /* store the byte x in a path table block */

{
  if (p==(buff+ISO_block_size)) p = buff = next_image_block();
    /* get new buffer if this one's full */

  *(p++) = x;
}

/***************************************************************************/

static void out_PVD(void)

  /* writes the Primary Volume Descriptor to the image */

{
 /* get a new buffer for the PVD */

  p = buff = next_image_block();

 /* fill in the necessary information */

  p[0] = 1;                             /* Volume Descriptor Type */
  memcpy(p+1, "CD001", 5);              /* Standard Identifier */
  p[6] = 1;                             /* Volume Descriptor Version */
  p[7] = 0;                             /* unused */
  store_string(p+8, NULL, 32);          /* System Identifier */
  store_string(p+40, opt_volid, 32);    /* Volume Identifier */
  store_zero(p+72, 8);                  /* unused */
  store_num32B(p+80, image_size);       /* Volume Space Size */
  store_zero(p+88, 32);                 /* unused */
  store_num16B(p+120, 1);               /* Volume Set Size */
  store_num16B(p+124, 1);               /* Volume Sequence Number */
  store_num16B(p+128, ISO_block_size);  /* Logical Block Size */
  store_num32B(p+132, PT_size_bytes);   /* Path Table Size */
  store_num32L(p+140, 18);              /* Type L Path Table address */
  store_num32L(p+144, 0);               /* Optional Type L Path Table addr */
  store_num32M(p+148, 18 + PT_size_blocks);
                                        /* Type M Path Table address */
  store_num32M(p+152, 0);               /* Optional Type M Path Table addr */

 /* Root Directory Record */

  p += 156;  /* makes it easier to base on 0 */

    p[0] = 34;                                /* length of DD */
    p[1] = 0;                                 /* EAR length */
    store_num32B(p+2, pt[1]->location);       /* address of directory */
    store_num32B(p+10, blocks_to_bytes(pt[1]->size));
                                              /* length of directory */
    store_datetimeS(p+18, pt[1]->load, pt[1]->exec);
                                              /* recording date time */
    p[25] = 2;                                /* it's a DD not an FD */
    p[26] = 0;                                /* File Unit Size */
    p[27] = 0;                                /* Interleave Gap Size */
    store_num16B(p+28, 1);                    /* Volume Sequence Number */
    p[32] = 1;                                /* length of dirid */
    p[33] = 0;                                /* special dirid => 'root' */

  p -= 156;

  store_string(p+190, NULL, 128);       /* Volume Set Identifier */
  store_string(p+318, opt_pubid, 128);  /* Publisher Identifier */
  store_string(p+446, data_prep_id, 128);
                                        /* Data Preparer Identifier */
  store_string(p+574, NULL, 128);       /* Application Identifier */

 /* add '.;1' to any copyright file identifier before storing */

  {
    char copyid[12] = "";         /* max 8 chars + .;1 + terminator */

    if (opt_copyid != NULL)
      strcat(strcpy(copyid, opt_copyid), ".;1");
    
    store_string(p+702, copyid, 37);    /* Copyright File Identifier */
  }

  store_string(p+739, NULL, 37);        /* Abstract File Identifier */
  store_string(p+776, NULL, 37);        /* Bibliographic File Identifier */
  store_datetimeL(p+813, time_now);     /* Volume Creation Date and Time */
  store_datetimeL(p+830, time_now);     /* Volume Modification Date/Time */
  store_datetimeL(p+847, NULL);         /* Volume Expiration Date/Time */
  store_datetimeL(p+864, NULL);         /* Volume Effective Date/Time */
  p[881] = 1;                           /* File Structure Version */

 /* from here on it's all zero in the PVD */

  p = buff+882; 
  pad_buff();

  return;
}

/***************************************************************************/

static void out_PT(int type)

  /* Writes out a Path Table to the image; type = type_L or type_M.

     Note that this function cannot call the "store..." functions in phsupp
     because path table records are allowed to span block boundaries, and
     so there is no guarantee that multi-byte values can be stored without
     intervention.

     Instead, store(x) is used - which checks to see if a new buffer is
     needed before storing the value x.

     On entry, p = buff+ISO_block_size, and so a new buffer will be called
     for at the first call to store.
  */

{
  int i;
  int pti;
  PTR *ptrec;      /* addresses current PTR */
  char *id;        /* dirid of current PTR */
  int len;         /* length of dirid of current PTR */
  int loc;         /* location of directory defined by current PTR */
  int par;         /* location of its parent directory */

  for (pti=1; pti<next_PTR; pti++)
  {
    ptrec = pt[pti];                /* addresses the path table record to 
                                       write out */

    if (pti==1)      /* must treat Root Directory specially */
    {
      id = "";       /* which conveniently sets *id = 0 - the ISO identifier
                        for the Root Directory */
      len = 1;
    }
    else
    {
      id = id_of_PTR(ptrec);
      len = strlen(id);
    }

    loc = ptrec->location;
    par = ptrec->parent;

    store(len);             /* Directory Identifier Length */
    store(0);               /* EAR length */

  /* format of next two fields depends on type of Path Table (L or M) */

    switch (type)
    {
      case type_L:
        store(loc);         /* Location of Directory */
        store(loc>>8);
        store(loc>>16);
        store(loc>>24);

        store(par);         /* Parent Directory Number */
        store(par>>8);

        break;

      case type_M:
        store(loc>>24);      /* Location of Directory */
        store(loc>>16);
        store(loc>>8);
        store(loc);

        store(par>>8);       /* Parent Directory Number */
        store(par);

        break;
    }

   /* store Directory Identifier - temporarily switching !->_ if needed */
   /* also need to temporarily change '/' to '.' if type_DOSDIR 
      but no need to check type since must already be a directory */
    if (id[len-4]=='/')
      id[len-4] = '.';
    {
      BOOL swap = (id[0]=='!');

      if (swap) id[0]='_';

      for (i=0; i<len; i++)  /* Directory Identifier */
        store(id[i]);
      if (swap) id[0]='!';
    }
    if (id[len-4]=='.')    /* Swap back again */
      id[len-4] = '/';


    if ((len & 1)==1)        /* Optional Padding Byte */
      store(0);
  }

 /* pad out any remaining bytes in the last block of the Path Table */

  pad_buff();

  return;
}

/***************************************************************************/

static void out_special_DR(PTR *ptrec, int special_id)

  /* Writes out one of the two special directory records.

     ptrec addresses the corresponding PTR, and special_id will be given as
         - 0 - for the first special record that points to itself
         - 1 - for the second special record that points to its parent
  */

{
  p[0] = 34;                                /* length of DD */
  p[1] = 0;                                 /* EAR length */
  store_num32B(p+2, ptrec->location);       /* address of directory */
  store_num32B(p+10, blocks_to_bytes(ptrec->size));
                                            /* length of directory */
  store_datetimeS(p+18, ptrec->load, ptrec->exec);
                                            /* recording date time */
  p[25] = 2;                                /* it's a DD not an FD */
  p[26] = 0;                                /* File Unit Size */
  p[27] = 0;                                /* Interleave Gap Size */
  store_num16B(p+28, 1);                    /* Volume Sequence Number */
  p[32] = 1;                                /* length of dirid */
  p[33] = special_id;                       /* special dirid */

  return;
}

/***************************************************************************/

static void out_dir(PTR *ptrec)

  /* write out the directory associated with the PTR ptrec.

     The contents of this directory can be found in dir[0] ...
     dir[next_DR-1].
  */

{
  int i;
  int next_other_file_location;
  int next_dir_pti;
  char object_id[31]; /* Temporary copy of object id for DOS files */

  p = buff = next_image_block();

 /* start with the special directory records: the first refers to itself,
    and the second to its parent */

  out_special_DR(ptrec, 0);              /* special dirid 0 => 'self' */
  p += 34;
  out_special_DR(pt[ptrec->parent], 1);  /* special dirid 1 => 'parent' */
  p += 34;

 /* Now all the real directory and file descriptors are written out.

    Each FD includes the location and length of the file: the length is
    found directly from the directory entry, but the location has to be
    worked out as we go along. Initial files have already been stored in the
    image, and the variable next_initial_file_location keeps track of their
    whereabouts; the other files will be stored in alphanumeric order
    following the directory itself, and next_other_file_location keeps track
    of these.  */

  next_other_file_location = ptrec->location + ptrec->size;

 /* Similarly, each DD includes its location and length, and both these
    values can be found from the PTR: so we need to keep track of these,
    which are stored in alphanumeric order starting with the entry indicated
    by the first_child field. */

  next_dir_pti = ptrec->first_child;


  for (i=0; i<next_DR; i++)
  {
    DR *obj = dir[i];                 /* current object - DD or FD */
    int type = (obj->type);             /* its type - type_FILE or type_DIR */
    int len = strlen(id_of_DR(obj));  /* length of its identifier */
    BOOL needs_pad;                   /* TRUE if a padding byte is needed */
    int size;                         /* size of this object */
    int location;                     /* location of object in image */
    int length;                       /* length of object */

   /* work out size of this directory record:
         - fixed part
         - variable part (object id)
         - optional padding byte
         - system use area for CDFS */

    if (type == type_FILE) len+=3;     /* add 3 for '.;1' - RISCOS files only */
    strcpy(object_id,id_of_DR(obj));

    /* check for DOS files with a null extension
       - must add a '.' to the FD, so allocate an extra byte */
    if ((type == type_DOSFILE) && (object_id[len-4] != '/'))
      len++;

    needs_pad = ((len & 1)==0);

  
  /* Calculate the length of the DD or FD - DOS DD's and FD's have a zero length
     System Use field */

    size = ISO_DR_size + ((type!=type_DOSFILE && type!=type_DOSDIR) ? CDFS_DR_size : 0)
           + len + (needs_pad ? 1 : 0);

   /* DR's may not cross block boundaries - check there is sufficient
      space for this one, and, if not, start a new block */

    if (p+size > buff+ISO_block_size)
    {
      pad_buff();
      p = buff = next_image_block();
    }

   /* proceed to output the DR */

    p[0] = size;                                 /* length of DR */
    p[1] = 0;                                    /* EAR length */

   /* finding location and length information depends on object type */

    switch (type)
    {
      case type_DIR:
      case type_DOSDIR:
        location = pt[next_dir_pti]->location;
        length = blocks_to_bytes(pt[next_dir_pti]->size);
        next_dir_pti++;
        break;

      case type_FILE:
      case type_DOSFILE:
        {
          int size = bytes_to_blocks(obj->length);

          if (file_type(obj->load) == opt_first)
          {
            location = next_initial_file_location;
            next_initial_file_location += size;
          }
          else
          {
            location = next_other_file_location;
            next_other_file_location += size;
          }
        }
        length = obj->length;
        break;
    }

    store_num32B(p+2, (length==0)?0 : location); /* address of object */
    store_num32B(p+10, length);                  /* object length in bytes */
    store_datetimeS(p+18, obj->load, obj->exec); /* recording date time */
    p[25] = ((type&3)==type_FILE) ? 0 : 2;       /* 2 for DD, 0 for FD (N.B: Mask out bit 2)*/
    p[26] = 0;                                   /* File Unit Size */
    p[27] = 0;                                   /* Interleave Gap Size */
    store_num16B(p+28, 1);                       /* Volume Sequence Number */
    p[32] = len;                                 /* length of objid */

   /* storing identifier depends on type */

    p+=33;               /* p addresses start of id field */
    switch (type)
    {
      case type_DOSDIR:
      case type_DOSFILE:
        /* Make a temporary copy of the object id in which
           '/' is changed to '.' */
        strcpy(object_id, id_of_DR(obj));
        if(object_id[len-4] == '/')
        {
          object_id[len-4] = '.';
          memcpy(p, object_id, len);
        }
        else
        {
         /* must add a trailing '.' if a DOS file with a null extension */
        memcpy(p, id_of_DR(obj), len-1);      /* file name */
        memcpy(p+len-1, ".", 1);            /* plus . */
        break;         
        } 

        break;
      
      case type_DIR:
        memcpy(p, id_of_DR(obj), len);        /* dirid */
        break;

      case type_FILE:
        memcpy(p, id_of_DR(obj), len-3);      /* file name */
        memcpy(p+len-3, ".;1", 3);            /* plus .;1 */
        break;
    }
    p+=len;              /* p addresses byte following end of id field */

    if (needs_pad) *(p++) = 0;                   /* pad byte if needed */

   
   /* now the CDFS-specific System Use data if needed */
    if (type != type_DOSFILE && type != type_DOSDIR)
    {
      memcpy(p, "ARCHIMEDES", 10);
      store_num32L(p+10, obj->load);
      store_num32L(p+14, obj->exec);
      store_num32L(p+18, obj->attr);
      store_zero(p+22, 10); 
      p += CDFS_DR_size;
    }     


  }

 /* pad out final directory block if necessary */

  pad_buff();

  return;
}

/***************************************************************************/

static void out_dir_and_other_files(int pti)

  /* Write out the directory identified by the Path Table Record pt[pti]
     followed by all of its files.
  */

{
  int i;
  PTR *ptrec;

  ptrec = pt[pti];      /* the current path table record */

 /* read in the contents of the corresponding directory, rename objects,
    and sort according to the ISO 9660 requirements; after all this, the
    DRs will be addressed by dir[0] ... dir[next_DR-1] */

  set_path_info(pti, FALSE);

  if (!opt_quiet && !opt_report)
    printf(msg_905, RISCOS_pathname);        /* progress message */

  if (opt_report) report_dir(pti);           /* report on directory */

  read_directory(FALSE);

 /* output the directory to the image */

  out_dir(ptrec);

 /* now write out the files themselves */

  for (i=0; i<next_DR; i++)
  {
    DR *obj = dir[i];
    char *fileid;
    char *dirid;    /* in which the file lies */

    if ((obj->type&3) == type_DIR) continue;  /* ignore sub-directories (N.B: mask out bit 2)*/

    if (file_type(obj->load) == opt_first) continue;
                                          /* ignore initial files */

    fileid = id_of_DR(obj);

    if (opt_report) report_file(obj);  /* report on file */

   /* now change ISO 9660 id back to RISC OS id if necessary */

    if ((obj->attr & attr_pling) != 0) fileid[0] = '!';

   /* determine location of file */

    if (obj->root == NULL)
      dirid = RISCOS_pathname;
    else
      dirid = obj->root;

   /* now copy the file to the image */

    copy_file(dirid, fileid);
  }
}

/***************************************************************************/

static void out_initial_files(int pti)

  /* pt[pti] specifies a directory containing some initial files; these are
     written to the image
  */

{
  int i;
  PTR *ptrec;

  ptrec = pt[pti];      /* the current path table record */

 /* read in the contents of the corresponding directory, rename objects,
    and sort according to the ISO 9660 requirements; after all this, the
    DRs will be addressed by dir[0] ... dir[next_DR-1] */

  set_path_info(pti, FALSE);

  if (!opt_quiet && !opt_report)
    printf(msg_905, RISCOS_pathname);      /* progress message */

  if (opt_report) set_ISO_pathname(pti);   /* ready for report_file calls */

  read_directory(FALSE);


 /* now write out the initial files themselves */

  for (i=0; i<next_DR; i++)
  {
    DR *obj = dir[i];
    char *fileid;
    char *dirid;    /* in which the file lies */

    if ((obj->type&3) == type_DIR) continue;  /* ignore sub-directories */

    if (file_type(obj->load) != opt_first) continue;
                                          /* ignore non-initial files */

    fileid = id_of_DR(obj);

    if (opt_report) report_file(obj);  /* report on file */

   /* now change ISO 9660 id back to RISC OS id if necessary */

    if ((obj->attr & attr_pling) != 0) fileid[0] = '!';

   /* determine location of file */

    if (obj->root == NULL)
      dirid = RISCOS_pathname;
    else
      dirid = obj->root;

   /* now copy the file to the image */

    copy_file(dirid, fileid);
  }
}

/***************************************************************************/

void phase_3(void)

  /* Writes out the ISO image as:

        - System area (16 blocks)
        - Primary Volume Descriptor
        - Volume Descriptor Set Terminator
        - Type L Path Table
        - Type M Path Table

     followed by each directory and its files in path table order.
  */

{
  int i;

  printf(msg_902);

  open_image();

  if (opt_report)
  {
    printf(msg_907);
    printf(msg_908);
  }

 /* first, the System Area - 16 blocks of zeros */

  if (opt_report)
    report(msg_403, '-', 0, 16, 16*ISO_block_size);

  for (i=0; i<16; i++)
  {
    p = buff = next_image_block();
    pad_buff();
  }


 /* now the Primary Volume Descriptor */

  if (opt_report)
    report(msg_404, '-', 16, 1, ISO_block_size);

  out_PVD();


 /* now the Volume Descriptor Set Terminator */

  if (opt_report)
    report(msg_405, '-', 17, 1, ISO_block_size);

  buff = next_image_block();

  buff[0] = 255;                  /* identifies this VD as the VDST */
  memcpy(buff+1, "CD001", 5);     /* Standard Identifier */
  buff[6] = 1;                    /* Volume Descriptor Version */

  p = buff+7;
  pad_buff();


 /* now the two Path Tables */

  if (opt_report)
    report(msg_406, '-', 18, PT_size_blocks, PT_size_bytes);
  out_PT(type_L);

  if (opt_report)
    report(msg_407, '-', 18+PT_size_blocks, PT_size_blocks, PT_size_bytes);
  out_PT(type_M);


 /* if reporting, initialise image_block: report_dir and report_file keep
    track of the current position in the image by use of this variable */

  if (opt_report) image_block = 18+2*PT_size_blocks; 

 /* now write out any initial files */

  for (i=1; i<next_PTR; i++)
    if (pt[i]->size_of_first_files != 0) out_initial_files(i);


 /* We now write out all directories and other files in Path Table order,
    each directory being followed by all non-initial files within that
    directory in alphanumeric order. */

  next_initial_file_location = 18+2*PT_size_blocks;
   /* used by out_dir to keep track of location of initial files */

  for (i=1; i<next_PTR; i++) out_dir_and_other_files(i);


 /* if the -report option is set, a consistency check is worth-while */

  if (opt_report && image_block!=image_size)
    printf(msg_217, image_block, image_size);


 /* that's it! */

  close_image();

  printf(msg_904);

  return;
}

/***************************************************************************/
