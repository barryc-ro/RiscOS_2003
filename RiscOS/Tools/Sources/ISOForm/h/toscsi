/* toscsi.h */



/**********************  High-level SCSI interface  ************************/

/*
  This interface provides functions to validate a request to output an image
  to a SCSI device, and to handle sequential output of that image.

  Typical use is as follows:

    << first validate that the device exists and space is available for the
       image >>

     if (toscsi_validate(devid, startblock, endblock) < 0) ...

    << now write out the image block by block >>

     toscsi_open_image();

     while (moretodo)
     { buff = toscsi_next_image_block();
       << copy the next image block into buff >>
     }

     toscsi_image_close();

*/


extern int toscsi_validate(int id, int startblock, int endblock);

  /* This routine checks that:

         - SCSI device id exists, and is direct-access
         - The area specified by startblock, endblock is available (ie does
             not overlap any RISC OS or RISC iX partition on the device)

     If startblock<0 on entry, the area is assumed to start immediately
     after any RISC OS section - or at block 0 if no RISC OS section is
     present - and to continue until the end of the disc.

     If endblock<0 on entry, the area is assumed to run from startblock
     to the end of the disc.

     Note that if startblock<0 on entry, then endblock<0 also.

     The result is the length (>0) of the available area iff all is well;
     otherwise a suitable error message is written, and a result of -1 is
     returned.
  */

extern void toscsi_open_image(void);

  /* This function must be called before the first call to
     toscsi_next_image_block().
  */

extern char *toscsi_next_image_block(void);

  /* This function is called whenever a new image block is to be created.

     The result is the address of a buffer into which the contents of the
     next image block can be written.
  */

extern void toscsi_close_image(void);

  /* This function must be called after the last call to
     toscsi_next_image_block().
  */

/***************************************************************************/
