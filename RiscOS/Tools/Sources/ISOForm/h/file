/* file.h */



/**********************  Low-level File interface **************************/

/*
  This interface supports the reading or writing of a number of blocks at a
  time to a single RISC OS file: writing is sequential, reading can be
  sequential or at random.

  OS_Find &4F, &8F are used for opening/creating files.

  OS_GBPB 2,3,4 are used for transfers.

  OS_Find 0 is used to close a file.

  OS_Args 5 is used to discover whether the file pointer is at EOF.
*/


extern int file_open_out(char *fname);

  /* Tries to open a file with the given name for output.

     If successful, the result is a handle for the file - otherwise a value
     of zero is returned.

     If the file does not exist, it is created with filetype Data.

     If it does exist, it is opened and truncated to zero length.
  */

extern int file_open_in(char *fname);

  /* Tries to open a file with the given name for input.

     If successful, the result is a handle for the file - otherwise a value
     of zero is returned (for example, if the file does not exist).
  */

extern void file_close(int handle);

  /* Closes the file with the given handle.
  */

extern BOOL file_write_next(int handle, char *buff, int nchars);

  /* Writes out nchars from buff to the file identified by handle.

     Result is TRUE iff all goes well.
  */

extern int file_read_next(int handle, char *buff, int nchars);

  /* Reads up to the next nchars from the file identified by handle into the
     buffer buff.

     Result is (nchars - number of characters read) - ie 0 is returned if
     nchars were transferred.
  */

extern BOOL file_read(int handle, char *buff, int from, int nchars);

  /* Reads nchars from the file identified by handle starting at byte address
     from to the buffer buff.

     Result is TRUE iff all goes well.
  */

extern BOOL file_eof(int handle);

  /* Returns TRUE iff the pointer for the file identified by handle is at
     the EOF position.
  */


/***************************************************************************/
