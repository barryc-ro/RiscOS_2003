/*  main.h  */

#include "kernel.h"   /* needed for type definition _kernel_oserror */
#include "VersionNum"

  /*  boolean type and values  */

typedef int BOOL;

#define TRUE     (1)
#define FALSE    (0)


  /* program parameters */

#define version_id     Module_MajorVersion /* program version number - remember to
                                       update FrontEnd "Desc" file in step */

#define data_prep_id  ("ACORN ISO 9660 FORMATTER")
  /* this is the string that will appear in the PVD */

#define  DFLT_ptsize   (122880)     /* default size of path table in bytes */
#define  DFLT_dirsize   (25600)     /* default size of dir table in bytes */

#define  ISO_block_size  (2048)     /* fixed for this release */
#define  bytes_to_blocks(x)  ( ((x)+2047) >> 11 )
#define  blocks_to_bytes(x)  ( (x) << 11 )

#define  round_bytes_to_word(x)    ( (x)+3 & ~3 )
#define round_to_even(x)           ( (x)+1 & ~1 )

extern int output_buffer_size;


/* program state information - used by tidyup() in the case of an unexpected
   program exit */

extern int state_output_file;     /* >0 => output file handle */
extern int state_input_file;      /* >0 => input file handle */
extern BOOL state_output_started; /* TRUE iff image creation has started */


/* Error handling */

extern int num_errors;       /* number of errors reported */
extern int num_warnings;     /* number of warnings issued */

  /* count of different kinds of warning */

extern int big_dirs;         /* directories with more than 77 entries */
extern int private_files;    /* files without public read access */
extern int long_names;       /* names with more than 10 characters */
extern int empty_files;      /* empty files */
extern int empty_dirs;       /* empty directories */

extern int dos_extensions;   /* MSDOS file extensions */

extern _kernel_oserror *oserr;    /* low-level routines record any SWI error
                                     here after failures before returning
                                     FALSE */

extern void error(char *format, ...);

  /* Called whenever a non-fatal error is to be reported.
     Sets has_error TRUE to make sure that no image is constructed
  */

extern void warn(char *format, ...);

  /* Called to output a warning message: warnings do not prevent image
      construction from taking place.
  */

extern void *check_malloc(int nchars, char *errmess);

  /* Calls malloc - if unsuccessful, outputs errmess and exits
  */


/* Functions to be used to open, write up, and close the image:

   These are used in Phase 3 as follows:

      open_image();
      while (moretodo)
      { buff = next_image_block();
        << copy the next image block into buff >>
      }
      close_image();
*/

extern void (*open_image)(void);
extern char *(*next_image_block)(void);
extern void (*close_image)(void);


extern char time_now[];
  /* contains the time of this run as a 16-byte zero-terminated string in
     the datetimeL format */


/* Internal directory record (DR) structures and variables */

typedef struct {
    unsigned load;       /* load address - or file type and start of time
                            stamp */
    unsigned exec;       /* execution address - or rest of time stamp */
    int length;          /* length of object in bytes */
    unsigned short attr; /* attributes - see below for extra bit */
    unsigned short type; /* object type - see below */
    char *root;          /* RISC OS location of this object:
                             If NULL, the object is part of the same RISC OS
                              hierarchy as its parent.
                             If not, this field is the name of the root
                              directory in which this object is held (and
                              which defines the root of a further RISC OS
                              (sub-)hierarchy). */
}  DR;

#define  id_of_DR(p)  ( (char*)((p)+1) )
                        /* each record is immediately followed by a
                           zero-terminated string that is the object's
                           ISO 9660 identifier */

  /* Note that the record above maps onto the result returned by OS_GBPB 10,
     and so care must be taken if it is to be changed.

     When first created, the pair of shorts attr/type will contain the
     object's attributes, and the root field its type. But the attribute and
     type are then packed into a single word, leaving a word spare to hold
     the root field later.

     Note that this packing process relies on the order of the two short
     fields!
  */

#define  file_type(x)  (((x)&0xfff00000)==0xfff00000?((x)&0x000fff00)>>8:-2)
  /* macro to extract file type information from a load address; if none is
     present, the result is -2 */


/* File type definitions - MSDOS files have bit 2 set */
#define  type_FILE       (1)        /* values for the type field */
#define  type_DIR        (2)
#define  type_PARTITION  (3)        /* RISC OS 3 only - treated as file */
#define  type_DOSFILE    (5)        /* MSDOS file - suppress Archi. info.  */
#define  type_DOSDIR     (6)        /* MSDOS directory - suppress Archi. info. */

#define  attr_valid       (0x00ff)
  /* only the bottom byte is valid across all filing systems */
#define  attr_public_read (0x0010)    /* the public read (R) bit */
#define  attr_pling       (0x0100)
  /* extra attribute bit to indicate !->_ replacement */

extern DR **dir;
extern int next_DR;
  /* dir[0] ... dir[next_DR-1] address (sorted) directory records */
extern int max_DR;
  /* the size of dir: this is set during initialisation to ensure that space
     in dir_chunk will run out before next_DR reaches max_DR */

extern char *dir_chunk;
  /* dir_chunk addresses malloc'd space into which directory records are
     read */


/* Internal path table record (PTR) structures and variables */

typedef struct {
    int parent;         /* pt[parent] is this PTR's parent */
    int first_child;    /* pt[first_child] is this PTR's first child */
    unsigned load;      /* RISC OS filetype/timestamp info */
    unsigned exec;      /*    ...    */
    int size;           /* number of blocks required to hold the directory */
    int size_of_first_files;
                        /* number of blocks required to hold any initial
                           files in the directory */
    int size_of_other_files;
                        /* number of blocks required to hold all the other
                           files in the directory */
    int location;       /* address of directory - a block number */
    char *root;         /* RISC OS location of this object - see DR above */

}  PTR;

  /* "Initial" files are those with filetype opt_first, and will be stored
     in the image before any directories and all other files (but following
     the path tables). */

#define  id_of_PTR(p)  ( (char*)((p)+1) )
                        /* each record is immediately followed by a
                           zero-terminated string that is the directory's
                           RISC OS identifier */

extern PTR **pt;
extern int next_PTR;
  /* pt[1] ... pt[next_PTR-1] address path table records (in ISO order) */
extern int max_PTR;
  /* the size of pt: this is set during initialisation to ensure that space
     in pt_chunk will run out before next_PTR reaches max_PTR */

extern char *pt_chunk;
  /* pt_chunk addresses malloc'd space from which PTR's are allocated */


/* Variables related to the directory hierarchy scans in Phases 1 and 2 */

extern int level;                 /* current level number: level = 1 when
                                     the root directory is the parent */
#define max_level    (8)          /* maximum permitted value for level */

extern char *RISCOS_pathname;     /* path name of parent directory of current
                                     level in RISC OS format */
extern int R_p_len;               /* number of bytes currently allocated to
                                     RISCOS_pathname */

extern int ISO_pathname_length;   /* sum of the lengths of the ISO 9660 names
                                     of the directories between the root and
                                     (including) the parent directory of the
                                     current level */

extern int image_size;            /* image size in blocks */
extern int count_dirs;            /* number of directories in hierarchy */
extern int count_files;           /* number of files in hierarchy */


/* these constants define some fixed features of ISO data-structures */

#define  ISO_PTR_size  (8)     /* size of fixed part of each ISO PTR */
#define  ISO_DR_size  (33)     /* size of fixed part of each ISO DR */
#define  CDFS_DR_size (32)     /* size of System Use part of DR for CDFS */
#define  special_size (68)     /* size of the two "special" DRs at the front
                                  of every directory */


/***************************************************************************/
