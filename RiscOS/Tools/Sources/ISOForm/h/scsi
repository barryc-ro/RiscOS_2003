/* scsi.h */



/**********************  Low-level SCSI interface  *************************/

/*
  This interface supports the reading or writing of a number of blocks at a
  time to a single SCSI direct access device.

  The first call must be to scsi_initialise, which will determine device
  characteristics and store them in the following variables:

*/

extern int scsi_block_size;          /* size of each device block in bytes */
extern int scsi_block_to_byte_shift; /* log 2 of device block size */

extern int scsi_last_block;          /* highest permitted LBA (one less than
                                        size of device in blocks) */

/*
  Calls may now be made to scsi_read and scsi_write to transfer data.

  All transfers are foreground, and no attempts are made to retry in the
  event of errors being found.

  No checks are made on the validity of block numbers.
*/


extern void scsi_initialise(int id);

  /* Must be called before calling scsi_read or scsi_write.

     Checks that:

       - SCSI drivers are present
       - The specified device id exists
       - The device is of type "direct access"

     If any one of these tests fails, exit(1) is called after writing out a
     suitable error message.
  */

extern BOOL scsi_read(char *buff, int blk, int n);

  /* Read n blocks, starting at block number blk, to buffer buff.
     Resultis TRUE iff all goes well; if not, oserr may be set.
  */

extern BOOL scsi_write(char *buff, int blk, int n);

  /* Write n blocks, starting at block number blk, from buffer buff.
     Result is TRUE iff all goes well; if not, oserr may be set.
  */


/***************************************************************************/
