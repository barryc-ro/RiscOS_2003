Implementation Notes - ISO 9660 CD-ROM Formatter


History
 
    Version     Date     Notes
     0.01     22-10-91   Overall algorithm described. following Neil's
                         suggestions (MFC)
     0.02     28-10-91   Minor revisions following discussions with NC
              01-11-91   Added note about messages
              06-11-91   Added details of RISC OS and RISC iX partition tests
              12-11-91   Note on how repeated options are handled
              30-01-92   Notes on how to update version number added
                         Notes on adding a new option added
     0.03     17-02-92   Restructured, with new section on source structure
         *** Release 1.00 ***
     0.04     13-08-92   New section added on changes for version 1.10.
         *** Release 1.10 ***



1  Introduction

This document contains information which may help understanding of the code
of the ISOFORM software. A knowledge of the ISO 9660 standard is assumed.

The next section gives an overview of the algorithm used to construct the
ISO 9660 image from a hierarchy of RISC OS files.

This is followed by a section describing the structure of the source files.

Subsequent sections - in no particular order - are implementation notes
about miscellaneous program aspects.

Other documents that should be referred to are:

  Functional Specification       0384,080/FS
  Test Plan                      0384,080/TP
  PST Report                     0384,080/SQ

Note that sections 2 to 10 refer to version 1.00 of the Formatter; sections
11 and 12 describe aspects of the new features added for version 1.10.



2  The algorithm


2.1  Summary

The algorithm scans the source hierarchy twice.

During the first scan, a data structure equivalent to the Path Table is
constructed; this contains an entry for each directory in the hierarchy
which includes information about its size, and the total size of all files
within it.

The size of the Path Table can now be calculated, and so it is possible to
determine the location of every directory in the image; this is done, and the
results recorded in the Path Table structure.

We can now write out the PVD, VDST, and both type-L and type-M PTs.

Next, the Path Table structure is scanned in order. Each directory is
written out, followed by each of the files in that directory - this is the
second scan of the hierarchy.


2.2  More details


2.2.1  Directory structure

Directory information is obtained by calls to OS_GBPB 10 and so appears as
records with the following format:

  typedef struct
  {
    unsigned load;                 /* load address */
    unsigned exec;                 /* execution address */
    int length;                    /* in bytes */
    unsigned attr;                 /* attributes */
    int type;                      /* object type (see below) */
  }   DR;
    /* this record is immediately followed by a zero terminated string
       that is the object's identifier objid */

These records are stored one after the other (but each aligned to a word
boundary) in the area of memory allocated for a directory:

  char *dir_chunk;

Each is indexed (in alphabetical order) from an array:

  DR *dir[];


2.2.2  Path Table structure

The Path Table structure is built up during the first scan, and consists of
a sequence of records each corresponding to a directory in the hierarchy.
These records are stored in the area allocated for the Path Table structure
in the order in which they must appear in the Path Table image:

  char *pt_chunk;

Each record is indexed from an array:

  PTR *pt[];

Note that the first record is numbered 1 and is at pt[1]: pt[0] is not used.

Each PTR has the following structure:

  typedef struct 
  {
    int parent;                    /* identifies parent PTR */
    int first_child;               /* identifies first child */
    unsigned load;                 /* RISC OS file type/timestamp info */
    unsigned exec;
    int size;                      /* size of directory - in blocks */
    int size_of_files;             /* total number of blocks required to
                                      store all the files in the directory */
    int location;                  /* address of directory - block number */
  }   PTR;
    /* this record is immediately followed by a zero-terminated string that
       is the directory's identifier dirid */


2.2.3  Phase 1 - first scan of hierarchy (in Path Table order)

  Create level 1 of the PT:

    - This consists of a single record for the root directory, and at this
      stage only the following fields are initialised:

          dirid  = <the RISC OS path name of the hierarchy root>
          parent = 1 (itself)
          first_child = 0 (ie unset)


  We now proceed to create the complete Path Table level-by-level: each
  iteration supplies the size information for each record in the current
  level, and creates new partial records for each directory in the next
  level:

    Process each directory D in the current level in turn:

      Read all directory information for D into records in dir_chunk.

      Check that all object identifiers conform to the ISO rules, and sort
      the records into alphabetical order of objectid (taking account of
      the treatment of '!').

      Using this information, calculate:

        - D's size: from the number of objects in the directory, and the
          length of their identifiers.

        - the total space required for D's files: from the lengths of the
          files.

      We can now create new PTRs for each sub-directory DD of D, filling in
      fields as follows:

          dirid (of DD)
          parent = D
          first_child = 0 (unset)
          

      Together, this information enables us to complete the PTR for D:

          size
          size_of_files
          first_child

    At this point, all PTRs at the current level are completed, and all/any
    PTRs for the next level have been created and initialised: if there are
    any more to process, we move on to the next level (unless the limit of
    eight levels has been exceeded).


2.2.4  Phase 2 - placement and initialisation of the image

The PTR now contains sufficient information for placement to be undertaken:

  - Work out size of Path Tables (from number of entries, size of dirids).

  - PVD will be at block 16, VDST at block 17, so the Type L Path Table can
    starts at block 17; this is followed by the Type M Path Table, and then
    the Root Directory.

  - A linear scan through the PT structure can now fill in the location of
    every directory in the image.

We can now write out:

  - The PVD

  - The VDST

  - The Type L and Type M Path Tables


2.2.5  Phase 3 - second scan of hierarchy

As in Phase 1, the records in the Path Table structure are scanned level by
level, starting with level 1 (which consists of a single record describing
the Root Directory):

  For each record in the current level describing a directory D:

    Read all information about D into dir_chunk, and sort appropriately.

    We now have to hand all the information necessary to create an ISO
    Directory:

      - Create the first Directory Descriptor (that points to the Directory
        itself).

      - Create the second DD that points to its parent: find the parent's
        location from the PT structure.

      - Work through the entries in dir_chunk, creating a DD/FD for each one
        in turn. Files are written to the image in order following the
        directory itself, and so it is straightforward to keep track of the
        location of each file.

    Now that the Directory itself has been written to the image, we must
    write each of the files; another scan through dir_chunk suffices to
    identify each one and to copy it.



3  Source file structure


3.1  Make file targets

The makefile - makeiso - specifies a number of targets as follows:

  ISOForm  -  the formatter application proper
  eximage  -  a program to examine and check ISO 9660 images
  compare  -  a program to compare two directory hierarchies
  test1   )
  test2   )
  test3   ) - various test programs
  test4   )
  test5   )
  test6   )

This document is concerned only with the ISOForm target.

For more information on the other targets, see the PST report and the source
files themselves.


3.2  Source and header files

Each source file can be thought of as a "module" that provides a number of
services to other "modules". These services are provided by external
functions and external variables that are declared in a corresponding header
file.

For example, the opts.h header file declares a function process_options(..)
which, when called, will read and interpret command arguments, setting status
variables opt_root, opt_check, ... opt_dirsize to record the options chosen;
these status variables are also declared in opts.h. On the other hand, it is
opts.c that contains source code for process_options and which declares
initial values for the status variables. opts.c also contains declarations
of static variables and functions which are needed internally, but are of no
interest to a wider audience.

Thus the structure of each source file is as follows:

  #include's for ANSI library headers as required
  #include's for ISOForm module headers as required
  initialisation for any exported data items
  declaration and initialisation for any private data items
  private and exported functions

The relevant files are as follows:

  main.c, .h      - main program, error routines, store allocation
  opts.c, .h      - options analysis
  phase1.c, .h    - phase 1
  phase23.c, .h   - phase 2 and phase 3
  scan.c, .h      - directory scanning functions used in phases 1 and 3
  phsupp.c, .h    - low-level directory scanning functions
  store.c, .h     - functions to store values in ISO 9660 formats
  toscsi.c, .h    - high-level scsi interface (for image output)
  scsi.c, .h      - low-level scsi functions
  tofile.c, .h    - high-level file interface (for image output)
  file.c, .h      - low-level file functions
  msg.h           - all text messages as #define'd constant strings

The header files are a good source of further information.


3.3  Main control flow

  main(...)  ->  process_options(..)     [in opts]
                 validate output option  [tofile/toscsi]
                 initialise image output functions (see below)
                 allocate space for data structures
                 phase_1()  [in phase1]
                 phase_2()  [in phase23]
                 phase_3()  [in phase23]


3.4  Image output options

During phase 3, ISO blocks are assembled inside the output buffer and
written out to a file or SCSI device using the following functions:

  open_image()                -  to initialise output buffers etc.
  buff = next_image_block()   -  to acquire a new buffer to fill
  close_image()               -  to flush buffers and close

tofile and toscsi define alternative sets of functions as follows:

  tofile_open_image         toscsi_open_image
  tofile_next_image_block   toscsi_next_image_block
  tofile_close_image        toscsi_close_image

and main(...) chooses the appropriate set according to the chosen output
option, and following validation:

  tofile_validate(fname)  -  opens output file
  toscsi_validate(deviceid, startblock, endblock)
                          -  checks designated area is available



4  Storage allocation

To simplify coding and, particularly, testing, storage management is very
simple: sufficient space to hold the Path Table structure and the (largest)
directory is allocated right at the start. Justification for this approach
is as follows:

  Path Table structure entries (including an index to them) are around 48
  bytes long, and so 120k is sufficient for a hierarchy containing 2500
  directories.

  Directory records are around 50 bytes long (including index) and so 25k
  is sufficient to cope with a directory with 500 objects inside it.

  An overall data storage requirement of 145k seems very reasonable, and
  is likely to cover all "normal" requirements. Program options are
  provided to cater for hierarchies that fall outside these limits, allowing
  the user to specify the storage to be allocated directly.

Properties

  + The ISO image is written sequentially: this means that it could be
    written to a tape as easily as to a disk.

  + Memory requirements are reasonable for complex and large hierarchies.

  + Errors in the hierarchy that mean that it cannot be converted into an
    ISO 9660 conformant image are discovered before any of the image is
    written.

  - The directory hierarchy is scanned twice.

  + Simple storage allocation means simple coding and testing.

  - Pre-allocated memory for largest directory and Path Table may be
    inconvenient for particularly complex hierarchies (although unlikely).

  o The files within a directory immediately follow that directory in the
    image.

  + The Path Table appears at the start of the image - and so can be read in
    by an application/filing system at the start without a long seek.

  + The code can be extended easily to allow the user to specify placement
    requirements such as:

        - place the files in this directory in this order
        - place these directories in this order
        - place the Path Tables at some given position

  - It is not so easy to extend the program to allow the user to specify that
    a file in one directory should be placed next to a file from another
    directory.

  + The code can be extended easily to allow the user to specify the contents
    of the hierarchy as "this directory, plus this directory to be stored as
    a sub-directory of this directory ...".



5  Error and information messages

As an aid to "internationalisation", every piece of text output by the
program is #define'd in the header file msg.h as msg_<int>.



6  Examining a SCSI disc

The program examines the content of any specified SCSI disc before starting
to write out the image to see if it has any RISC iX and/or RISC OS data that
might overlap with the image: if so, the program will not proceed further.

The following assumptions/tests are made:

  - If there is no ADFS Boot Block, then the disc is completely free to use.

  - The ADFS Boot block is 512 bytes long, and starts at byte &c00 relative
    to the start of the disc. It will be recognised as such iff the checksum
    of bytes 510 to 0 is found in byte 511 and byte &1c1 - number of sectors
    per track - is non-zero (see algorithm in toscsi module).

  - The low nybble of byte &1fc of the boot block determines whether there
    is, potentially, a Unix area: a value of 2 says there is. If the value
    is not 2, the program assumes that the whole of the disc is devoted
    to RISC OS.

  - If there is, potentially, a Unix area, then the address of its partition
    table is given in cylinders by the contents of byte &1fd (ls) and
    &1fe (ms).

  - This can be converted to a block address using &1c2 (tracks per cylinder)
    and &1c1 (blocks per track).

  - A Unix partition table is identified by a magic number at byte 0, and
    has 8 entries giving the extent of any defined partitions - an entry is
    valid iff a certain bit is set (see toscsi module for details).

  - Unix partition number 7 is always ignored, since this conventionally
    defines the whole disc.



7  Repeated options

The Functional Specification says that:

 - Any option specified in the command line overrides the same option in
   an options file.

 - For this purpose, -tofile and -toscsi are treated as the same option.

 - -check takes precedence over either of -tofile, -toscsi.

Clearly repeated options in the command line, or in the options file, should
strictly be faulted - but the following implementation turned out to be
quicker, and is good enough:

 - Only the first occurrence of any option is recorded: subsequent ones are
   simply ignored.

 - A note is kept to show whether -tofile or -toscsi was the first output
   option to be specified (using the variable destination).

Errors are signalled only if:

 - None of -check, -toscsi, -tofile is specified.

The only marginally unsatisfactory consequence of this is that a command
line of the form:

  *isoform -tofile fred -toscsi 4

is not faulted - instead, the output option -tofile fred is accepted.



8  What you must do when changing the version number

  - Edit the #define version_id (and, possibly, data_prep_id) in main.h,
     and remake the run image
  - Edit the ReadMe file on the release disc
  - Edit the following files inside the !ISOForm application directory:
        - !Boot
        - !Run
        - Desc (in two places)



9  What you must do when adding a new option

  - Assign an external variable to hold its value (opts.h, opts.c)
  - Add code to recognise the option (extra test in proc_opts, opts.c)
  - Add to the -help info (supply_help_info, opts.c)
  - Add to the User Guide (manual)
  - Amend the desktop application - !ISOForm - as necessary:
        - Add to the !Help file
        - Add new icon in SetUp dbox, or new menu entry
        - Specify use of icon/menu entry in Desc file
        - Add interactive help information if appropriate



10  Some potential enhancements

  - Replace all _kernel_swi calls with a simpler swi-caller (see WS).

  - Improve option handling code: build table of possible options, instead
    of specific "strcmp" tests for each one; should remove case sensitivity
    at the same time.



11  Link files

scan.h defines the main interface to the RISC OS source hierarchy from the
control routines phase_1() and phase_3(); the interface routines are:

  void read_directory(BOOL)
  void set_path_info(int pti, BOOL check)

It is these routines that are most affected by link file handling.


read_directory(..) is now responsible for processing any link files found in
the directory, and must record their location for later use by set_path_info
(and other routines that need to access the linked files/directories). To do
this, the DR record structure is modified as follows:

       old structure                 new structure

       unsigned attr;                unsigned short attr;
                                     unsigned short type;
       int type;                     char *root;

If the object is in a link target directory, obj->root is set to address the
target directory's path name; otherwise it is set to NULL.

The "field packing" is necessary because the DR structure must be the same
size as the data returned by OS_GBPB 10. The data is packed by the low-level
routine read_RISCOS_dir(..), and the order of the two short fields must not
be changed - or the data-packing will fail.


A char *root field is also added to each PTR record, and, in phase_1(), the
root value is copied to each new PTR from the appropriate DR as the in-core
path table is created. This means that the path table includes enough
information for each directory to be located again in the RISC OS filing
system.


set_path_info(..) now sets RISCOS_pathname using a revised algorithm as
follows:

   a) Move up the directory tree (by following parent pti pointers) until
      a PTR with non-null root field is found: this will be the name of the
      directory in which that directory can be found.

   b) Move back down to the leaf node, adding dirids as you go, to create the
      full pathname.

This algorithm requires that a non-null root field exists for *all*
sub-directories, including those which are stored in the directory specified
by -root. [Note that the root directory itself - pti==1 - is dealt with
specially by set_path_info, with RISCOS_pathname set to opt_root.]

To achieve this, the root directory must be treated as if it had been linked
to from some hypothetical surrounding directory - and this is dealt with in
phase_1() by taking special action following the first call to
read_directory().


out_dirandfiles(pti) is called from phase_3() to output the directory pti
followed by all of its files, and set_path_info(..) is called at the start
to set RISCOS_pathname to the pathname of the directory holding the files.
But with link files, this is the correct directory only for files whose
root field is NULL: for others, the root field gives the correct directory
name. This information must be passed to copy_file, which therefore now has
an extra parameter dirid.


Now back to the low-level, where the major changes have been made.

read_directory(..) now calls a new routine - read_RISCOS_dir_with_links(..) -
instead of making a direct call to read_RISCOS_dir(..).

read_RISCOS_dir(..) - no longer an interface routine - retains similar
functionality as before, but now has extra parameters to specify where the
directory entries are to be stored and indexed; it is only called from
read_RISCOS_dir_with_links(..).

read_RISCOS_dir_with_links(..) - inside phsupp.c - calls read_RISCOS_dir(..)
as necessary to read first the directory entries inside RISCOS_pathname, and
then directory entries in any link target directories; get_new_root_name(..)
is called to extract the name of the target directory from a link file.

In detail, read_RISCOS_dir_with_links(..) operates as follows:

  - Read directory entries from RISCOS_pathname, and set their root field
    to NULL.

  - Scan these entries looking for any link files.

    If a link file is found:

      - Remove the link file DE from the index, and move each subsequent DE
        back one place.

      - Read directory entries from the target directory and add them to
        the end of the list (thus extending the scan).

      - Set their root field to the name of the target directory.

  - All directory entries will have been read, and all link files processed,
    when the scan is complete.


Once read_directory(..) has acquired all directory entries - including linked
ones - it proceeds as before to check conformance to ISO naming conventions.
One additional check is now necessary: since objects may have come from
different RISCOS directories, there is no longer any guarantee that all the
names are distinct, and so a full comparison is required.

    

12  -first option

A new option variable, opt_first, is set to the filetype of "initial" files
which are to be written to the image before any others. If this option is
not set, opt_first = -1.


Central to the implementation of the -first option are two new fields in each
PTR record which replace one previous field as follows:

            old structure              new structure

            int size_of_files          int size_of_first_files
                                       int size_of_other_files

A new macro - file_type(x) - is also defined, which takes as argument a load
address and returns the encoded filetype - or -2 if none is present. [Note
that this value must be different from the "unset" value of opt_first!]

These two fields are initialised during phase_1() as the source hierarchy is
scanned and the path table created.

Phase_2() now scans the path table twice. During the first scan, space is
reserved for any initial files (using size_of_first_files); the second scan
is as before, except that space is reserved only for "other" (non-initial)
files.

Phase_3() also now scans the path table twice. During the first scan, any
initial files are written to the image; the second scan is as before, except
that only other files are written.


Some other detailed changes are also necessary.

A new routine set_ISO_pathname(..) has been extracted from report_dir(..) so
that it can be called independently. This is because the original design of
the report_dir(..) and report_file(..) routines relied on the fact that each
file's directory would always be written to the image (and hence reported
upon) before the file - but this is not true of initial files. 

A new routine - out_initial_files(..) - is called to write out the initial
files. This is very similar to out_dir_and_files(..) [previously known as
out_dirandfiles(..)] - but calls set_ISO_pathname(..) directly instead of
out_dir(..).

out_dir(..) now has to keep track of the location of initial files (in order
to be able to fill in their DE's correctly), and does this by incrementing
a new static next_initial_file_location whenever one is encountered; this
is initialised in phase_3(..).
