/**************************************************************/
/* File:    Errors.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Global (public) error pool.                       */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 09-Oct-2000 (ADH): Created.                       */
/**************************************************************/

#ifndef DDT2_Errors__
  #define DDT2_Errors__

  #include <kernel.h>

  /* Errors are divided into loose categories of those relating to
   * front-end operations and those relating to back-end operations
   * - both front-end and back-end code may raise either type.
   *
   * To return a standard error, do something like this:
   *
   *   return errors_frontend_error(fee_out_of_memory);
   *
   * For other error messages use things like:
   *
   *   return errors_backend_message("TokenName", 0);
   *
   * This only works if the caller's specified messages are in the
   * main Messages file. In any event, recovery and report action
   * will depend on what the front-end was trying to do at the time
   * the error was raised.
   */

  /* Standard front-end errors */

  typedef enum frontend_errors
  {
    fee_out_of_memory = 0x1000

  } frontend_errors;

  /* Standard back-end errors */

  typedef enum backend_errors
  {
    bee_out_of_memory = 0x2000,
    bee_operation_not_supported,

    /* Specials */

    bee_would_block = 0x3000 /* Return this to do non-blocking back-end calls - front-end will keep calling you back */

  } backend_errors;

  /* Generate a front-end error */

  _kernel_oserror * errors_frontend_error   (frontend_errors e);
  _kernel_oserror * errors_frontend_message (const char * token, unsigned int num_args, ...);

  /* Generate a back-end error */

  _kernel_oserror * errors_backend_error    (unsigned int handle, backend_errors e);
  _kernel_oserror * errors_backend_message  (unsigned int handle, const char * token, unsigned int num_args, ...);

#endif /* DDT2_Errors__ */
