/**************************************************************/
/* File:    List.h                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle dialogue boxes showing a list of items     */
/*          (e.g. for breakpoints). Does some handling for    */
/*          the List add dialogue box and List menu.          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 19-Mar-1999 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/*          25-Oct-2000 (ADH): Adapted for DDT2.              */
/**************************************************************/

#ifndef DDT2_List__
  #define DDT2_List__

  #include <stdbool.h>
  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>
  #include "Limit.h"

  /* List dialogue component IDs */

  #define List_CID_ScrollList  0x01C0
  #define List_CID_Add         0x01C1
  #define List_CID_Remove      0x01C2
  #define List_CID_Close       0x01C3

  /* List dialogue event codes */

  #define List_EToBeShown      0x00D0
  #define List_EHidden         0x00D1
  #define List_EAdd            0x00D2
  #define List_ERemove         0x00D3
  #define List_EClose          0x00D4
  #define List_ESelectAll      0x00D5
  #define List_EClearSelection 0x00D6

  /* Structure to hold details of a known type of list */

  typedef _kernel_oserror *(*list_known_get_handle_ptr) (ObjectId list, unsigned int * handle);
  typedef _kernel_oserror *(*list_known_fill_list_ptr)  (ObjectId list, unsigned int handle);
  typedef _kernel_oserror *(*list_known_read_list_ptr)  (ObjectId list, unsigned int handle);

  typedef struct list_known
  {
    /* This is all pre-initialised in List.c */

    ComponentId                 reference;
    const char                * messages_token;

    const char                * add_name;
    bool                        drag_to_add;

    int                         child_hide_event;
    int                         parent_hide_event;

    list_known_get_handle_ptr   get_handle;
    list_known_fill_list_ptr    fill_list;
    list_known_read_list_ptr    read_list;

  } list_known;

  /* Structure to hold details of what a List add dialogue, or */
  /* equivalent, is open for. It's attached to the object by   */
  /* its client handle. The object MUST free such a malloced   */
  /* item in its Hidden handler code.                          */

  typedef struct list_add_for
  {
    ObjectId     parent;                         /* Parent window handle                           */
    ComponentId  open_for;                       /* Component ID of parent's scrolling list gadget */
    int          parent_hide_event;              /* If we see this event code on the parent, close */
    unsigned int debugger_handle;                /* Debugger handle related to the list            */

    char         initial_text[Limits_List_Item]; /* Initial text to display, if any                */
    int          list_item;                      /* Index of item being edited or -1 for "add new" */

  } list_add_for;

  /* Function prototypes */

  const list_known * list_get_known_items            (int * entries);
  _kernel_oserror  * list_register_shortcut_handlers (ObjectId parent, ObjectId menu, int hide_event);

  _kernel_oserror  * list_close_for_component        (ComponentId c);
  int                list_to_be_shown                (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  int                list_count_items                (ObjectId self);
  int                list_count_selected             (ObjectId self);

  _kernel_oserror  * list_select_all                 (ObjectId self);
  _kernel_oserror  * list_clear_selection            (ObjectId self);
  _kernel_oserror  * list_remove_selected            (ObjectId self);
  _kernel_oserror  * list_add_item                   (ObjectId self, const char * text);
  _kernel_oserror  * list_modify_item                (ObjectId self, int index, const char * text);

  _kernel_oserror  * list_setup_menu                 (ObjectId self);

  bool               list_handle_data_load           (ObjectId o, ComponentId c, const WimpMessage * m);

#endif /* DDT2_List__ */
