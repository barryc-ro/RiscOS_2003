/**************************************************************/
/* File:    BEStructs.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Back-end structures.                              */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 16-Oct-2000 (ADH): Created by splitting           */
/*                             Structures.h.                  */
/**************************************************************/

#ifndef DDT2_BEStructs__
  #define DDT2_BEStructs__

  #include <stdbool.h>
  #include <kernel.h>

  /* Global configuration
   * ====================
   *
   * This structure is filled in by a back-end debugger to indicate its general
   * capabilities. Logical groupings related to front-end functions (e.g. a
   * display of register values, setting breakpoints, calling a function) are
   * dealt with separately.
   */

  typedef struct cap_global
  {
    bool multiple;      /* Set to 'true' if multiple sessions are supported
                         * by this back-end. Multiple session support is
                         * recommended.
                         */

    bool local_config;  /* Set to 'true' if per-session configuration is
                         * supported (the configuration function is called
                         * with a specific handle). This is recommended.
                         */

  } cap_global;

  /* Integer registers
   * =================
   *
   * The register display dialogue box reads R0 through R15 aka PC, SPSR and CPSR.
   * The two bitfields in the cap_registers structure should have bits set if a
   * read or write of that particular register is supported.
   *
   * Bits 0 to 15 are for R0 to R15, bit 16 is for SPSR, and bit 17 is for CPSR.
   *
   * It is currently not possible to set a different capability mask for different
   * processor modes.
   *
   * cap_register_read gives a 'read_mask' flag word of which bits 0 through 17 are
   * significant. Set bits indicate that the value is to be read. Clear bits mean
   * 'don't care'. The bit allocation is as described above. Current values for the
   * current procesor mode should be returned. The 'registers' field is a pointer
   * to 18 integers. A back-end must fill in at least the register values it is
   * asked for, and may fill in all registers if it wishes - it should pick
   * whichever is the most efficient for it.
   *
   * cap_register_write works in the same way. This time, the 'registers' field
   * points to an array of 18 integers which again correspond to R0 through R15,
   * SPSR and CPSR, but back-ends must only write the register values specified by
   * the bitfield and no others.
   */

  typedef _kernel_oserror *(*cap_register_read_ptr)    (unsigned int   handle,
                                                        unsigned int   read_mask,
                                                        int          * registers);

  typedef _kernel_oserror *(*cap_register_write_ptr)   (unsigned int   handle,
                                                        unsigned int   write_mask,
                                                        int          * registers);

  typedef struct cap_registers
  {
    unsigned int support_read  : 18;
    unsigned int support_write : 18;

    cap_register_read_ptr  read;
    cap_register_write_ptr write;

  } cap_registers;

  /* Context
   * =======
   *
   * Context functions are handled by the front-end, but if a back-end does not
   * support jumping out of the current stack frame it should ensure that the
   * context movement dialogue is disabled.
   */

  typedef struct cap_context
  {
    bool allow_changes; /* Set to 'false' to disable front-end context changing */

  } cap_context;

  /* Single step
   * ===========
   *
   * cap_singlestep_step is called to step by 'by' instructions if 'by_instruction'
   * is true, or source lines if 'by_instruction' is false. If 'skip_functions' is
   * true, function calls will be stepped over, else stepped into.
   */

  typedef _kernel_oserror *(*cap_singlestep_step_ptr)  (unsigned int handle,
                                                        unsigned int by,
                                                        bool         by_instruction,
                                                        bool         skip_functions);

  /* Back-ends must fill in this structure. If a back-end does not support */
  /* single stepping, it should set 'step' to NULL.                        */

  typedef struct cap_singlestep
  {
    bool         by_instruction; /* Is there support for per-instruction stepping?      */
    bool         by_statement;   /* Is there support for per-statement stepping?        */
    bool         skip_functions; /* Is there support for stepping over functions?       */
    unsigned int min_step;       /* Minimum number of items that can be stepped over    */
    unsigned int max_step;       /* Maximum number of items that can be stepped over    */

    cap_singlestep_step_ptr step;

  } cap_singlestep;

  /* Trace
   * =====
   *
   * cap_singlestep_step is called to inform the back-end of a change in trace
   * options. Parameters are self explanatory.
   */

  typedef _kernel_oserror *(*cap_trace_trace_ptr)      (unsigned int handle,
                                                        bool         execution,
                                                        bool         functions,
                                                        bool         breakpoints,
                                                        bool         watchpoints,
                                                        bool         swis);

  typedef struct cap_trace
  {
    bool execution;              /* Is there support for trace-by-execution?            */
    bool functions;              /* Is there support for tracing function calls?        */
    bool breakpoints;            /* Is there support for tracing triggered breakpoints? */
    bool watchpoints;            /* Is there support for tracing triggered watchpoints? */
    bool swis;                   /* Is there support for tracing SWI calls?             */

    cap_trace_trace_ptr trace;

  } cap_trace;

  /* Breakpoint
   * ==========
   *
   * When the front-end calls the back-end to set a breakpoint and the call does
   * not return an error, the operation is deemed successful. The front-end
   * maintains the list of what breakpoints it believes are active. The back-end
   * is thus free to implement a particular breakpoint in whatever manner it sees
   * fit without worrying about how it presents it to the front-end. The back-end
   * provides a unique identifier for each breakpoint that's set so it understands
   * what is being referred to when the front-end asks it to remove something.
   *
   * cap_breakpoint_set is called to set a breakpoint. The back-end returns the
   * unique identifier through '*identifier'. The 'type' parameter indicates the
   * required kind of breakpoint. The 'value' field will be a SWI number (this is
   * translated on the machine running the debugger if the user gives a name,
   * but they may give a number), address, Wimp event number... whatever is
   * appropriate given the 'type' field's contents.
   *
   * cap_breakpoint_clear is called to remove a breakpoint. The parameters are
   * self explanatory.
   */

  typedef enum cap_breakpoint_type
  {
    cap_breakpoint_address,       /* Specific address               */
    cap_breakpoint_swi,           /* SWI call                       */
    cap_breakpoint_event,         /* On reception of Wimp event     */
    cap_breakpoint_service,       /* On reception of a service call */
    cap_breakpoint_upcall         /* On reception of an UpCall      */

  } cap_breakpoint_type;

  typedef _kernel_oserror *(*cap_breakpoint_set_ptr)   (unsigned int          handle,
                                                        unsigned int        * identifier,
                                                        cap_breakpoint_type   type,
                                                        unsigned int          value);

  typedef _kernel_oserror *(*cap_breakpoint_clear_ptr) (unsigned int handle,
                                                        unsigned int identifier);

  typedef struct cap_breakpoint
  {
    bool address;                /* Is there support for breakpoints by address?        */
    bool swi;                    /* Is there support for breakpoints by SWI number?     */
    bool event;                  /* Is there support for breakpoints by Wimp event?     */
    bool service;                /* Is there support for breakpoints by service call?   */
    bool upcall;                 /* Is there support for breakpoints by UpCall?         */

    cap_breakpoint_set_ptr   set;
    cap_breakpoint_clear_ptr clear;

  } cap_breakpoint;

  /* Watchpoint
   * ==========
   *
   * As with breakpoints (see above) the front-end keeps its own list of active
   * items.
   *
   * cap_watchpoint_set is called to set a watchpoint. The back-end returns a
   * unique identifier through '*identifier'. The address to watch is given
   * along with the method - watch for reads, writes or both - followed by the
   * 'anything' flag. If this is true, the last parameter, 'value', is ignored
   * and any value read or written triggers the watchpoint. If 'anything' is
   * false, only the specific value given in the 'value' parameter is watched
   * for.
   *
   * cap_watchpoint_clear is called to remove a watchpoint. The parameters are
   * self explanatory.
   */

  typedef enum cap_watchpoint_method
  {
    cap_watchpoint_read,
    cap_watchpoint_write,
    cap_watchpoint_read_or_write

  } cap_watchpoint_method;

  typedef _kernel_oserror *(*cap_watchpoint_set_ptr)   (unsigned int            handle,
                                                        unsigned int          * identifier,
                                                        void                  * address,
                                                        cap_watchpoint_method   method,
                                                        bool                    anything,
                                                        unsigned int            value);

  typedef _kernel_oserror *(*cap_watchpoint_clear_ptr) (unsigned int handle,
                                                        unsigned int identifier);

  /* For filling in the 'read', 'write' and 'readorwrite' fields of the
   * cap_watchpoint structure, back-ends need to say for each method whether
   * they don't support it, whether they have full support - this means that
   * either any value, or specific values can be watched for - or have only
   * partial support - this means that specific values cannot be watched for.
   *
   * So, if a back-end supported watchpoints on reading any value from memory
   * as well as specific values from memory, but only supported watchpoints
   * for writing specific values, it'd set both #defined bits for the "read"
   * field but just the Cap_Watchpoint_Specific bit for "write".
   *
   * Presently it is assumed that no debugger has more complex abilities when
   * there is a read and write watchpoint on the same memory location.
   */

  #define Cap_Watchpoint_Specific (1u<<0)
  #define Cap_Watchpoint_Anything (1u<<1)

  typedef struct cap_watchpoint
  {
    unsigned read  : 2;
    unsigned write : 2;

    cap_watchpoint_set_ptr   set;
    cap_watchpoint_clear_ptr clear;

  } cap_watchpoint;

  /* Aggregate structure forming a full description of a back-end's */
  /* abilities.                                                     */

  typedef struct abilities
  {
    /* UI capabilities */

    cap_global     global;
    cap_registers  registers;
    cap_context    context;
    cap_singlestep singlestep;
    cap_trace      trace;
    cap_breakpoint breakpoints;
    cap_watchpoint watchpoints;

  } abilities;

  /* Initialisation and finalisation
   * ===============================
   *
   * backend_inititalise is called before any other operations for that
   * back-end. The back-end returns a session identifier through '*handle'.
   * It must be able to uniquely identify a session with this. A handle of
   * zero is reserved and must always be invalid.
   *
   * backend_finalise is called when a session is being shut down.
   *
   * Configuration
   * =============
   *
   * If the back-end is configurable, the backend_configure function will
   * be called by the front-end at a time when the back-end should open its
   * configuration window. This process is expected to be self-contained. If
   * the handle given is zero, general configuration for the next session
   * to be opened is to be carried out. Otherwise, the configuration should
   * only influence the session given by the handle. If a back-end wants to
   * offer a "configure all existing sessions" system, it can put an
   * appropriate button on its configuration front-end itself.
   */

  typedef _kernel_oserror *(*backend_initialise_ptr)   (unsigned int * handle);
  typedef _kernel_oserror *(*backend_finalise_ptr)     (unsigned int   handle);
  typedef _kernel_oserror *(*backend_configure_ptr)    (unsigned int   handle, bool global);

  /* Aggregate structure completely describing a debugging back-end */

  typedef struct debugger
  {
    char                   * name;

    backend_initialise_ptr   initialise;
    backend_finalise_ptr     finalise;
    backend_configure_ptr    configure;

    abilities                ab;

  } debugger;

#endif /* DDT2_BEStructs__ */
