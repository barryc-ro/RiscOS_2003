/**************************************************************/
/* File:    Windows.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Generic window handling.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 23-Oct-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

#include <kernel.h>

#include <tboxlibs/event.h>
#include <tboxlibs/toolbox.h>

#include "Breakpoint.h"
#include "Errors.h"
#include "Global.h"
#include "List.h"
#include "ListAdd.h"
#include "NewProject.h"
#include "Watchpoint.h"

#include "Windows.h"

/* Generic structure for an event code / handler function pair */

typedef struct window_generic_handler
{
  int                   event_code;
  ToolboxEventHandler * handler;

} window_generic_handler;

/* Main structure describing a complete window handler setup */

typedef struct window_handler
{
  struct window_handler  * next;
  struct window_handler  * prev;

  int                      e_to_be_shown;
  ToolboxEventHandler    * to_be_shown;

  int                      e_hidden;
  ToolboxEventHandler    * hidden;

  unsigned int             number_of_others;
  window_generic_handler * generic_handlers;

} window_handler;

/* Local variables */

/* Window handlers are registered by windows_register_window, from */
/* windows_register_primary_handlers. This latter function is the  */
/* place to add new windows to the list.                           */

static window_handler * handlers = NULL;

/* Local functions */

static window_handler  * windows_find_handler        (window_handler * hdl);

static _kernel_oserror * windows_register_window     (int e_to_be_shown, ToolboxEventHandler * to_be_shown, int e_hidden, ToolboxEventHandler * hidden, unsigned int number_of_others, ...);

static int               windows_generic_to_be_shown (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               windows_generic_hidden      (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

/**************************************************************/
/* windows_find_handler()                                     */
/*                                                            */
/* Ensures a given handler address is in the handler array.   */
/*                                                            */
/* Parameters: Pointer to a window_handler structure.         */
/*                                                            */
/* Returns:    The same pointer, or NULL if the item was      */
/*             invalid.                                       */
/**************************************************************/

static window_handler * windows_find_handler(window_handler * hdl)
{
  window_handler * handler = handlers;

  dprintf(("Wind", "windows_find_handler: Called for &%08X\n", (unsigned int) hdl));

  if (hdl == NULL)
  {
    dprintf(("Wind", "windows_find_handler: NULL items are not allowed\n"));

    return NULL;
  }

  while (handler != NULL)
  {
    if (handler == hdl)
    {
      dprintf(("Wind", "windows_find_handler: Successful\n"));

      return hdl;
    }

    handler = handler->next;
  }

  dprintf(("Wind", "windows_find_handler: Did not find item\n"));

  return NULL;
}

/**************************************************************/
/* windows_register_window()                                  */
/*                                                            */
/* Register a window with the generic handling system.        */
/* Service function for windows_register_primary_handlers.    */
/*                                                            */
/* Parameters: Event code for the ToBeShown event (required); */
/*                                                            */
/*             Pointer to a ToolboxEventHandler for custom    */
/*             actions to take after generic ToBeShown code   */
/*             is run (may be NULL);                          */
/*                                                            */
/*             Event code for the Hidden event (required);    */
/*                                                            */
/*             Pointer to a ToolboxEventHandler for custom    */
/*             actions to take after generic Hidden code is   */
/*             run (may be NULL);                             */
/*                                                            */
/*             Number of extra handlers listed (see below);   */
/*                                                            */
/*             An event code and ToolboxEventHandler function */
/*             pointer for each of the extra handlers         */
/*             required.                                      */
/*                                                            */
/* Assumes:    There must be as many event code / handler     */
/*             parameter pairs listed as indicated by the     */
/*             "number of extra handlers" parameter.          */
/**************************************************************/

static _kernel_oserror * windows_register_window(int          e_to_be_shown,    ToolboxEventHandler * to_be_shown,
                                                 int          e_hidden,         ToolboxEventHandler * hidden,
                                                 unsigned int number_of_others, ...)
{
  window_handler * handler;
  va_list          ap;
  unsigned int     count = 0;

  dprintf(("Wind", "windows_register_window: Called for &%08X / &%08X\n", e_to_be_shown, e_hidden));

  /* Is there anything to be done? */

  if (to_be_shown == NULL && hidden == NULL && number_of_others == 0)
  {
    dprintf(("Wind", "windows_register_window: Nothing to do, exitting\n"));

    return NULL;
  }
  else if (e_to_be_shown == 0 || e_hidden == 0)
  {
    dprintf(("Wind", "windows_register_window: Invalid parameters (&%08X = 0 or &%08X = 0)\n", e_to_be_shown, e_hidden));

    return errors_frontend_error(fee_invalid_parameters,
                                 "windows_register_window");
  }

  /* Allocate space for a new handler */

  handler = calloc(1, sizeof(window_handler));

  if (handler == NULL)
  {
    return errors_frontend_error(fee_out_of_memory,
                                 "windows_register_window");
  }

  /* Link the item in */

  handler->next = handlers;
  if (handlers != NULL) handlers->prev = handler;
  handlers = handler;

  /* Fill the basic stuff in */

  handler->e_to_be_shown    = e_to_be_shown;
  handler->to_be_shown      = to_be_shown;
  handler->e_hidden         = e_hidden;
  handler->hidden           = hidden;
  handler->number_of_others = number_of_others;

  /* Allocate space for an attached generic handler array and fill that in too */

  if (number_of_others > 0)
  {
    handler->generic_handlers = calloc(number_of_others, sizeof(window_generic_handler));

    if (handler->generic_handlers == NULL)
    {
      free(handler);

      return errors_frontend_error(fee_out_of_memory,
                                   "windows_register_window");
    }

    va_start(ap, number_of_others);

    do
    {
      handler->generic_handlers[count].event_code = va_arg(ap, int);
      handler->generic_handlers[count].handler    = va_arg(ap, ToolboxEventHandler *);

      dprintf(("Wind", "windows_register_window: Registered extra event code &%08X\n", handler->generic_handlers[count].event_code));

      count++;
    }
    while (count < number_of_others);

    va_end(ap);
  }

  /* Finished */

  dprintf(("Wind", "windows_register_window: Successful\n"));

  return NULL;
}

/**************************************************************/
/* windows_register_primary_handlers()                        */
/*                                                            */
/* Register all known windows internally, then register a     */
/* generic ToBeShown handler for all ToBeShown event codes.   */
/**************************************************************/

_kernel_oserror * windows_register_primary_handlers(void)
{
  window_handler * handler;

  dprintf(("Wind", "windows_register_primary_handlers: Called\n"));

  /* First, register all windows. Add new windows here! */

  dprintf(("Wind", "windows_register_primary_handlers: Registering windows internally...\n"));

  RetError(windows_register_window(NewProject_EToBeShown, newproject_to_be_shown,
                                   NewProject_EHidden,    newproject_hidden,
                                   2,
                                   NewProject_EOK,        newproject_ok,
                                   NewProject_ECancel,    newproject_cancel));

  RetError(windows_register_window(List_EToBeShown,       list_to_be_shown,
                                   List_EHidden,          NULL,
                                   0));

  RetError(windows_register_window(ListAdd_EToBeShown,    listadd_to_be_shown,
                                   ListAdd_EHidden,       listadd_hidden,
                                   2,
                                   ListAdd_EAdd,          listadd_add,
                                   ListAdd_ECancel,       listadd_cancel));

  RetError(windows_register_window(Breakpoint_EToBeShown, breakpoint_to_be_shown,
                                   Breakpoint_EHidden,    breakpoint_hidden,
                                   3,
                                   Breakpoint_EAdd,       breakpoint_add,
                                   Breakpoint_ECancel,    breakpoint_cancel,
                                   Breakpoint_ERadios,    breakpoint_radios));

  RetError(windows_register_window(Watchpoint_EToBeShown, watchpoint_to_be_shown,
                                   Watchpoint_EHidden,    watchpoint_hidden,
                                   3,
                                   Watchpoint_EAdd,       watchpoint_add,
                                   Watchpoint_ECancel,    watchpoint_cancel,
                                   Watchpoint_EOption,    watchpoint_option));

  /* Now register the generic ToBeShown handlers */

  dprintf(("Wind", "windows_register_primary_handlers: Registering ToBeShown handlers...\n"));

  handler = handlers;

  while (handler != NULL)
  {
    RetError(event_register_toolbox_handler(-1,
                                            handler->e_to_be_shown,
                                            windows_generic_to_be_shown,
                                            (void *) handler));
    handler = handler->next;
  }

  dprintf(("Wind", "windows_register_primary_handlers: Successful\n"));

  return NULL;
}

/**************************************************************/
/* windows_deregister_primary_handlers()                      */
/*                                                            */
/* Deregister all ToBeShown handlers registered with          */
/* windows_register_primary_handlers.                         */
/**************************************************************/

_kernel_oserror * windows_deregister_primary_handlers(void)
{
  window_handler * handler = handlers;

  dprintf(("Wind", "windows_deregister_primary_handlers: Called\n"));

  while (handler != NULL)
  {
    RetError(event_deregister_toolbox_handler(-1,
                                              handler->e_to_be_shown,
                                              windows_generic_to_be_shown,
                                              (void *) handler));
    handler = handler->next;
  }

  dprintf(("Wind", "windows_deregister_primary_handlers: Successful\n"));

  return NULL;
}

/**************************************************************/
/* windows_generic_to_be_shown()                              */
/*                                                            */
/* Called before any window is shown.                         */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* 'handle' should point to an initialised window_handler     */
/* structure.                                                 */
/**************************************************************/

static int windows_generic_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  window_handler * hdl   = (window_handler *) handle;
  unsigned int     count = 0;

  dprintf(("Wind", "windows_generic_to_be_shown: Called for &%08X\n", (unsigned int) hdl));

  if (windows_find_handler(hdl) == NULL) ChkError(errors_frontend_error(fee_invalid_parameters,
                                                                        "windows_generic_to_be_shown"));

  /* Install the generic "hidden" handler. Any installations done here */
  /* are individually removed in windows_generic_hidden (see comments  */
  /* in that function for why) and so the list of handlers here and    */
  /* there must be kept in sync with each other.                       */

  ChkError(event_register_toolbox_handler(idb->self_id,
                                          hdl->e_hidden,
                                          windows_generic_hidden,
                                          (void *) hdl));

  /* Install any other extra handlers */

  while (count < hdl->number_of_others)
  {
    ChkError(event_register_toolbox_handler(idb->self_id,
                                            hdl->generic_handlers[count].event_code,
                                            hdl->generic_handlers[count].handler,
                                            (void *) hdl));
    count++;
  }

  /* If there is one, exit through the custom ToBeShown handler */

  dprintf(("Wind", "windows_generic_to_be_shown: Successful, exitting via %s\n", hdl->to_be_shown != NULL ? "custom handler" : "return (1)"));

  if (hdl->to_be_shown != NULL) return (hdl->to_be_shown)(eventcode, event, idb, handle);
  else                          return 0;
}

/**************************************************************/
/* windows_generic_hidden()                                   */
/*                                                            */
/* Called after any window is hidden.                         */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* 'handle' should point to an initialised window_handler     */
/* structure.                                                 */
/**************************************************************/

static int windows_generic_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  window_handler * hdl   = (window_handler *) handle;
  unsigned int     count = 0;

  dprintf(("Wind", "windows_generic_hidden: Called for &%08X\n", (unsigned int) hdl));

  if (windows_find_handler(hdl) == NULL) ChkError(errors_frontend_error(fee_invalid_parameters,
                                                                        "windows_generic_hidden"));

  /* Deregister all object-specific handlers. WE MUST NOT use */
  /* event_deregister_toolbox_handlers_for_object as this     */
  /* would assume that no other bits of code placed any       */
  /* handlers on the object - that's invalid for parent/child */
  /* permanent dialogue box relationships for a start.        */

  /* Remove the generic "hidden" handler */

  ChkError(event_deregister_toolbox_handler(idb->self_id,
                                            hdl->e_hidden,
                                            windows_generic_hidden,
                                            (void *) hdl));

  /* Remove any other extra handlers */

  while (count < hdl->number_of_others)
  {
    ChkError(event_deregister_toolbox_handler(idb->self_id,
                                              hdl->generic_handlers[count].event_code,
                                              hdl->generic_handlers[count].handler,
                                              (void *) hdl));
    count++;
  }

  /* If there is one, exit through the custom Hidden handler */

  dprintf(("Wind", "windows_generic_hidden: Successful, exitting via %s\n", hdl->hidden != NULL ? "custom handler" : "return (1)"));

  if (hdl->hidden != NULL) return (hdl->hidden)(eventcode, event, idb, handle);
  else                     return 0;
}
