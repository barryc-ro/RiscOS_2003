/**************************************************************/
/* File:    BEManager.c                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Debugger back-end management.                     */
/*                                                            */
/*          Plug new back-ends in here. See source comments   */
/*          for full instructions.                            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 16-Oct-2000 (ADH): Created.                       */
/**************************************************************/

/* System inclusions */

#include <stdlib.h>
#include <string.h>

#include <kernel.h>

/* Debugger back-end header file inclusions */

#include "DBEDemo.h"

/* Local inclusions */

#include "BEStructs.h"
#include "Errors.h"
#include "Utils.h"

#include "BEManager.h"

/* No attempt is made here to do some whizzy dynamic linking or */
/* define debugger back-ends by parseing external files. You    */
/* must create source and header files for your implementation  */
/* to be included directly in the DDT2 build system; include    */
/* the headers where required (more details later), and add the */
/* source to any relevant lists in the Makefile. If you haven't */
/* already guessed, by the way - 'DBE' stands for 'Debugger     */
/* Back End'.                                                   */
/*                                                              */
/* When implementing a new back-end, you should put all code in */
/* a source file called "DBE..." - e.g. "DBELocal", "DBEJTAG".  */
/* You may wish to further split this, but keep a namespace.    */
/* Functions within that should ideally be prefixed by the      */
/* filename in lower case and an underscore. The header file    */
/* should have the same name, and of course, you'll need to add */
/* it to the appropriate group of "#include"s above.            */
/*                                                              */
/* The debuggers array holds details of all back-ends. See the  */
/* definitions in Structures.h to find out what a back-end must */
/* fill in - and do this in bemanager_initialise.               */
/*                                                              */
/* Whenever a function pointer is provided, the implementation  */
/* should be put in your "DBE..." source file. NULL is allowed; */
/* if you set NULL, the feature is deemed "disabled". A quick   */
/* way to knock your back-end off the list is to set the        */
/* initialisation function pointer in the debuggers array to    */
/* NULL, for example.                                           */
/*                                                              */
/* If wanting to read stuff from the Messages file, check that  */
/* you update any relevant Messages file in the 'Resources'     */
/* directory (there may be several) and prefix all of your      */
/* tokens with a relevant source filename (see above), keeping  */
/* the capitalisation the same.                                 */

#ifdef TRACE
  static debugger debuggers [2];
#else
  static debugger debuggers [1];
#endif

static unsigned int debugger_count = sizeof(debuggers) / sizeof(*debuggers);

/* Local functions */

static _kernel_oserror * bemanager_ensure_availability (void);
static _kernel_oserror * bemanager_validate_handle     (unsigned int handle);

/**************************************************************/
/* bemanager_ensure_availability()                            */
/*                                                            */
/* Checks there is at least one available, active back-end.   */
/* Inactive back-ends have a NULL initialisation pointer.     */
/*                                                            */
/* Returns:    fee_no_backends if there are no back-ends.     */
/**************************************************************/

static _kernel_oserror * bemanager_ensure_availability(void)
{
  unsigned int count = 0;

  while (count < debugger_count)
  {
    if (debuggers[count].initialise != NULL) return NULL;
    else count++;
  }

  return errors_frontend_error(fee_no_backends,
                               "bemanager_ensure_availability");
}

/**************************************************************/
/* bemanager_validate_handle()                                */
/*                                                            */
/* Ensure a back-end handle (see e.g.                         */
/* bemanager_get_handle_from_name) is valid.                  */
/*                                                            */
/* Parameters: Handle to validate.                            */
/*                                                            */
/* Returns:    No error if the handle is valid, else          */
/*             fee_no_backends or fee_invalid_parameters.     */
/**************************************************************/

static _kernel_oserror * bemanager_validate_handle(unsigned int handle)
{
  debugger     * d     = (debugger *) handle;
  unsigned int   count = 0;
  bool           found = false;

  RetError(bemanager_ensure_availability());

  while (count < debugger_count)
  {
    if (debuggers[count].initialise != NULL && &debuggers[count] == d)
    {
      found = true;
      break;
    }
    else count++;
  }

  if (!found) return errors_frontend_error(fee_invalid_parameters,
                                           "bemanager_validate_handle");
  return NULL;
}

/**************************************************************/
/* bemanager_initialise()                                     */
/*                                                            */
/* Set up the main debuggers array.                           */
/**************************************************************/

_kernel_oserror * bemanager_initialise(void)
{
  unsigned int count;
  bool         fault = false;

  /* Make sure everything is empty first */

  memset(debuggers, 0, sizeof(debuggers));

  /* Demo back-end
   * =============
   *
   * This is a demonstration back-end. It can be used as a template for
   * others. The initialise entry point is NULL so that it never appears
   * on a real list.
   */

  /* The name must be malloced, either by utils_strdup or some other */
  /* means. Freeing occurs in bemanager_finalise.                    */
  /*                                                                 */
  /* NAMES MUST BE UNIQUE.                                           */
  /*                                                                 */
  /* The name must be no longer than Limits_BackEnd_Name (Limit.h),  */
  /* including terminator.                                           */

  debuggers[0].name = utils_strdup(lookup_token("DBEDemoName:Demo", 0, 0));

  if (debuggers[0].name == NULL)
  {
    return errors_frontend_error(fee_out_of_memory,
                                 "bemanager_initialise");
  }

  #ifdef TRACE
    debuggers[0].initialise = dbedemo_initialise;
    debuggers[0].finalise   = dbedemo_finalise;
    debuggers[0].configure  = NULL;
  #else
    debuggers[0].initialise = dbedemo_initialise;//NULL;
    debuggers[0].finalise   = dbedemo_finalise;
    debuggers[0].configure  = NULL;
  #endif

  /* Global support stuff */

  debuggers[0].ab.global.multiple           = true;
  debuggers[0].ab.global.local_config       = false;

  /* Once we implement register read/write functions, we intend to */
  /* support R0-R15, SPSR and CPSR...                              */

  debuggers[0].ab.registers.support_read    = 0x3ffff;
  debuggers[0].ab.registers.support_write   = 0x3ffff;

  /* ...but we don't actually implement that yet. */

  debuggers[0].ab.registers.read            = NULL;
  debuggers[0].ab.registers.write           = NULL;

  /* The front-end can change context, we'll cope */

  debuggers[0].ab.context.allow_changes     = true;

  /* Again, we'll fully support single stepping. Eventually. */

  debuggers[0].ab.singlestep.by_instruction = true;
  debuggers[0].ab.singlestep.by_statement   = true;
  debuggers[0].ab.singlestep.skip_functions = true;
  debuggers[0].ab.singlestep.min_step       = 1;
  debuggers[0].ab.singlestep.max_step       = 0x7fffffff;

  debuggers[0].ab.singlestep.step           = NULL;

  /* Trace support */

  debuggers[0].ab.trace.execution           = true;
  debuggers[0].ab.trace.functions           = true;
  debuggers[0].ab.trace.breakpoints         = true;
  debuggers[0].ab.trace.watchpoints         = true;
  debuggers[0].ab.trace.swis                = true;

  debuggers[0].ab.trace.trace               = NULL;

  /* Setting and clearing breakpoints */

  debuggers[0].ab.breakpoints.address       = true;
  debuggers[0].ab.breakpoints.swi           = true;
  debuggers[0].ab.breakpoints.event         = true;
  debuggers[0].ab.breakpoints.service       = true;
  debuggers[0].ab.breakpoints.upcall        = true;

  debuggers[0].ab.breakpoints.set           = NULL;
  debuggers[0].ab.breakpoints.clear         = NULL;

  /* Setting and clearing watchpointss */

  debuggers[0].ab.watchpoints.read          = Cap_Watchpoint_Specific | Cap_Watchpoint_Anything;
  debuggers[0].ab.watchpoints.write         = Cap_Watchpoint_Specific | Cap_Watchpoint_Anything;

  debuggers[0].ab.watchpoints.set           = NULL;
  debuggers[0].ab.watchpoints.clear         = NULL;

  #ifdef TRACE

    /* An extra one that just maps back to the normal demo */

    debuggers[1].name = utils_strdup(lookup_token("not-token:Demo 2", 0, 0));

    if (debuggers[1].name == NULL)
    {
      return errors_frontend_error(fee_out_of_memory,
                                   "bemanager_initialise");
    }

    debuggers[1].initialise = dbedemo_initialise;
    debuggers[1].finalise   = dbedemo_finalise;
    debuggers[1].configure  = NULL;

    debuggers[1].ab.global.multiple           = true;
    debuggers[1].ab.global.local_config       = false;

    debuggers[1].ab.registers.support_read    = 0x3ffff;
    debuggers[1].ab.registers.support_write   = 0x3ffff;
    debuggers[1].ab.registers.read            = NULL;
    debuggers[1].ab.registers.write           = NULL;

    debuggers[1].ab.context.allow_changes     = true;

    debuggers[1].ab.singlestep.by_instruction = true;
    debuggers[1].ab.singlestep.by_statement   = true;
    debuggers[1].ab.singlestep.skip_functions = true;
    debuggers[1].ab.singlestep.min_step       = 1;
    debuggers[1].ab.singlestep.max_step       = 0x7fffffff;
    debuggers[1].ab.singlestep.step           = NULL;

    debuggers[1].ab.trace.execution           = true;
    debuggers[1].ab.trace.functions           = true;
    debuggers[1].ab.trace.breakpoints         = true;
    debuggers[1].ab.trace.watchpoints         = true;
    debuggers[1].ab.trace.swis                = true;
    debuggers[1].ab.trace.trace               = NULL;

    debuggers[1].ab.breakpoints.address       = true;
    debuggers[1].ab.breakpoints.swi           = true;
    debuggers[1].ab.breakpoints.event         = true;
    debuggers[1].ab.breakpoints.service       = true;
    debuggers[1].ab.breakpoints.upcall        = true;
    debuggers[1].ab.breakpoints.set           = dbedemo_set_breakpoint;
    debuggers[1].ab.breakpoints.clear         = NULL;

    debuggers[1].ab.watchpoints.read          = Cap_Watchpoint_Specific | Cap_Watchpoint_Anything;
    debuggers[1].ab.watchpoints.write         = Cap_Watchpoint_Specific | Cap_Watchpoint_Anything;
    debuggers[1].ab.watchpoints.set           = dbedemo_set_watchpoint;
    debuggers[1].ab.watchpoints.clear         = NULL;

  #endif

  /* Sanity checks */

  for (count = 0; count < debugger_count; count++)
  {
    if (strlen(debuggers[count].name) >= Limits_BackEnd_Name) fault = true;
  }

  if (fault) return errors_frontend_error(fee_should_never_happen,
                                          "invalid debugger setup",
                                          "bemanager_initialise");

  /* Done. */

  return NULL;
}

/**************************************************************/
/* bemanager_finalise()                                       */
/*                                                            */
/* Tidy up anything initialised / claimed / whatever by       */
/* bemanager_initialise.                                      */
/**************************************************************/

_kernel_oserror * bemanager_finalise(void)
{
  unsigned int i;

  for (i = 0; i < debugger_count; i++)
  {
    free(debuggers[i].name);
  }

  return NULL;
}

/**************************************************************/
/* bemanager_enumerate_names()                                */
/*                                                            */
/* Enumerate names of back-ends.                              */
/*                                                            */
/* Parameters: Pointer to an integer holding 0 on the first   */
/*             call. This will subsequently be updated and    */
/*             the value should not be tampered with unless   */
/*             you want to restart the list, in which case,   */
/*             set the value to zero again;                   */
/*                                                            */
/*             Pointer to a const char * which will be        */
/*             updated to point to the NUL-terminated         */
/*             back-end name, or with NULL if the whole list  */
/*             of names has been enumerated.                  */
/**************************************************************/

_kernel_oserror * bemanager_enumerate_names(unsigned int * which, const char ** name)
{
  if (which == NULL || name == NULL)
  {
    return errors_frontend_error(fee_invalid_parameters,
                                 "bemanager_enumerate_names");
  }
  else RetError(bemanager_ensure_availability());

  for (;;)
  {
    // if(*which==1){*name = "Testing this thing"; (*which)++; return NULL; }
    // if(*which==2){*name = "Hello world";        (*which)++; return NULL; }
    // if(*which==3){*name = "1";                  (*which)++; return NULL; }
    // if(*which==4){*name = "";                   (*which)++; return NULL; }
    // if(*which==5){*name = "Last item";          (*which)++; return NULL; }
    //
    // or:
    //
    // if (*which<120)
    // {
    //   *name=malloc(30);sprintf((char *)(*name),"Item %d",*which);
    //   (*which)++;
    //   return NULL;
    // }

    if ((*which) >= debugger_count)
    {
      /* At the end of the array - stop listing items */

      *name = NULL;
      return NULL;
    }
    else
    {
      if (debuggers[*which].initialise == NULL)
      {
        /* This item has no initialisation entry point; don't list it */

        (*which)++;
      }
      else
      {
        /* This is a valid item, return it */

        *name = debuggers[*which].name;
        (*which)++;

        return NULL;
      }
    }
  }

  /* Should never get here... */

  return errors_frontend_error(fee_should_never_happen,
                               "flow error",
                               "bemanager_enumerate_names");
}

/**************************************************************/
/* bemanager_get_first_name()                                 */
/*                                                            */
/* Get the name of the first available debugger.              */
/*                                                            */
/* Parameters: Pointer to a const char * to take the name.    */
/**************************************************************/

_kernel_oserror * bemanager_get_first_name(const char ** name)
{
  unsigned int count = 0;

  if (name == NULL) return errors_frontend_error(fee_invalid_parameters,
                                                 "bemanager_get_first_name");

  RetError(bemanager_ensure_availability());

  while (count < debugger_count)
  {
    if (debuggers[count].initialise != NULL)
    {
      *name = debuggers[count].name;
      return NULL;
    }

    count++;
  }

  /* Should never get here... */

  return errors_frontend_error(fee_should_never_happen,
                               "bemanager_ensure_availability failed"
                               "bemanager_get_first_name");
}

/**************************************************************/
/* bemanager_get_handle_from_name()                           */
/*                                                            */
/* Back-end names are unique, but using a name to interact    */
/* with the BEManager routines is slow. Instead, use this     */
/* function to obtain a handle related to the name that can   */
/* be used in future calls.                                   */
/*                                                            */
/* Parameters: Pointer to the NUL-terminated back-end name.   */
/*             If this is NULL, the first back-end available  */
/*             is returned;                                   */
/*                                                            */
/*             Pointer to an unsigned int to take the handle. */
/**************************************************************/

_kernel_oserror * bemanager_get_handle_from_name(const char * name, unsigned int * handle)
{
  unsigned int count = 0;

  RetError(bemanager_ensure_availability());

  /* The handle is actually a direct pointer to the relevant debugger structure */
  /* in the array of debugger structures.                                       */

  if (handle != NULL)
  {
    while (count < debugger_count)
    {
      if (
           debuggers[count].initialise != NULL &&
           (
             name == NULL ||
             !strcmp(debuggers[count].name, name)
           )
         )
      {
        *handle = (unsigned int) &debuggers[count];
        return NULL;
      }
      else count++;
    }
  }

  /* Didn't find it or things were NULL that shouldn't have been */

  return errors_frontend_error(fee_invalid_parameters,
                               "bemanager_get_handle_from_name");
}

/**************************************************************/
/* bemanager_get_debugger()                                   */
/*                                                            */
/* Obtain a read-only pointer to a debugger description from  */
/* debugger's handle (see bemanager_get_handle_from_name, for */
/* example).                                                  */
/*                                                            */
/* Parameters: Debugger handle;                               */
/*                                                            */
/*             Pointer to a debugger structure (see           */
/*             BEStructs.h).                                  */
/*                                                            */
/* Returns:    debugger structure pointer is updated. If an   */
/*             error is returned directly, however, the value */
/*             is undefined.                                  */
/**************************************************************/

_kernel_oserror * bemanager_get_debugger(unsigned int handle, const debugger ** d)
{
  if (d == NULL) return errors_frontend_error(fee_invalid_parameters,
                                              "bemanager_get_abilities");

  *d = NULL;

  RetError(bemanager_validate_handle(handle));

  *d = (debugger *) handle;

  return NULL;
}
