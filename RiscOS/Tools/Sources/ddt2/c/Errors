/**************************************************************/
/* File:    Errors.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Error handling.                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 17-Oct-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

#include <swis.h>
#include <kernel.h>

#include <tboxlibs/wimplib.h>

#include "Errors.h"
#include "Global.h"
#include "Main.h"
#include "Utils.h"

/* Local functions */

static _kernel_oserror * errors_generate_error    (const char * token, unsigned int num_args, va_list ap);
static _kernel_oserror * errors_construct_backend (unsigned int handle, const char * token, unsigned int num_args, va_list ap);

/**************************************************************/
/* errors_generate_error()                                    */
/*                                                            */
/* Generate an error message in the global error block 'erb'. */
/* The error number field should be filled in *BEFORE* making */
/* a call to this function (as it *might* be modified).       */
/*                                                            */
/* Parameters: Pointer to Messages file token to look up;     */
/*                                                            */
/*             The number of extra arguments supplied;        */
/*                                                            */
/*             Up to 4 extra arguments for MessageTrans       */
/*             passed via. a va_list.                         */
/*                                                            */
/* Returns:    Pointer to the global error block, for the     */
/*             caller's convenience.                          */
/**************************************************************/

static _kernel_oserror * errors_generate_error(const char * token, unsigned int num_args, va_list ap)
{
  unsigned int      len;
  _kernel_oserror * local;
  char            * args[4];

  /* Find the arguments */

  args[0] = num_args > 0 ? va_arg(ap, char *) : 0;
  args[1] = num_args > 1 ? va_arg(ap, char *) : 0;
  args[2] = num_args > 2 ? va_arg(ap, char *) : 0;
  args[3] = num_args > 3 ? va_arg(ap, char *) : 0;

  /* Do the lookup, with substitutions */

  *lasttokn = '\0'; /* ...because we're sidestepping lookup_token in Utils.c */

  local = _swix(MessageTrans_Lookup,
                _INR(0,7),

                &meb,   /* See Global.h / Global.c */
                token,
                tokens, /* See Global.h / Global.c */
                sizeof(tokens) - 1,
                args[0],
                args[1],
                args[2],
                args[3]);

  dprintf(("Erro", "errors_generate_error: Lookup SWI returned &%08X\n", (unsigned int) local));

  /* Deal with errors from the lookup itself as well as a successful call */

  if (local == NULL)
  {
    tokens[Limits_Message - 1] = 0;
    StrNCpy0(erb.errmess, tokens);
  }
  else
  {
    erb        = *local;
    erb.errnum = Errors_Custom_Normal;
  }

  /* Append a full stop if there isn't one :-) */

  len = strlen(erb.errmess);

  if (
       len + 1 < sizeof(erb.errmess) &&
       erb.errmess[len - 1] != '.'   &&
       erb.errmess[len - 1] != '!'   &&
       erb.errmess[len - 1] != '?'
     )
     erb.errmess[len] = '.', erb.errmess[len + 1] = '\0';

  /* Finished */

  dprintf(("Erro", "errors_generate_error: Returning '%s'\n", erb.errmess));

  return &erb;
}

/**************************************************************/
/* errors_frontend_error()                                    */
/*                                                            */
/* Generate a front-end error in the global error block.      */
/*                                                            */
/* Parameters: frontend_error number;                         */
/*                                                            */
/*             Number of additional parameters supplied;      */
/*                                                            */
/*             Additional parameters, all pointers to NUL     */
/*             terminated strings. Only up to the first 4     */
/*             will be used.                                  */
/*                                                            */
/* Returns:    Pointer to the global error block, for the     */
/*             caller's convenience.                          */
/**************************************************************/

_kernel_oserror * errors_frontend_error(frontend_errors e, unsigned int num_args, ...)
{
  char    token [20];
  va_list ap;

  dprintf(("Erro", "errors_frontend_error: Called with &%X\n", (unsigned int) e));

  /* Different errors are judged to have different levels of severity */

  switch (e)
  {
    default:                     erb.errnum = Errors_Custom_Message; break;

    case fee_invalid_parameters:
    case fee_out_of_memory:      erb.errnum = Errors_Custom_Normal;  break;
  }

  /* Create the right token to lookup */

  sprintf(token, "F%05X", (unsigned int) e);

  /* Generate the error */

  va_start(ap, num_args);
  errors_generate_error(token, num_args, ap);
  va_end(ap);

  /* Finished */

  return &erb;
}

/**************************************************************/
/* errors_frontend_message()                                  */
/*                                                            */
/* Generate a front-end message in the global error block.    */
/*                                                            */
/* Parameters: Message token to use for the text;             */
/*                                                            */
/*             Number of additional parameters supplied;      */
/*                                                            */
/*             Additional parameters, all pointers to NUL     */
/*             terminated strings. Only up to the first 4     */
/*             will be used.                                  */
/*                                                            */
/* Returns:    Pointer to the global error block, for the     */
/*             caller's convenience.                          */
/**************************************************************/

_kernel_oserror * errors_frontend_message(const char * token, unsigned int num_args, ...)
{
  va_list ap;

  dprintf(("Erro", "errors_frontend_message: Called with '%s'\n", token));

  /* The error number is always the same for messages */

  erb.errnum = Errors_Custom_Message;

  /* Generate the error */

  va_start(ap, num_args);
  errors_generate_error(token, num_args, ap);
  va_end(ap);

  return &erb;
}

/**************************************************************/
/* errors_construct_backend()                                 */
/*                                                            */
/* As errors_generate_error, but the error message is         */
/* prefixed with a back-end debugger handle if there's room   */
/* to fit it in.                                              */
/*                                                            */
/* Parameters: Back-end debugger handle;                      */
/*                                                            */
/*             Message token to use for the text;             */
/*                                                            */
/*             Number of extra arguments supplied;            */
/*                                                            */
/*             Up to 4 extra arguments for MessageTrans       */
/*             passed via. a va_list.                         */
/*                                                            */
/* Returns:    Pointer to the global error block, for the     */
/*             caller's convenience.                          */
/**************************************************************/

static _kernel_oserror * errors_construct_backend(unsigned int handle, const char * token, unsigned int num_args, va_list ap)
{
  /* Generate the error */

  errors_generate_error(token, num_args, ap);

  /* Whether or not that generated its own error, prefix with the back-end handle */

  if (strlen(erb.errmess) + 12 < sizeof(erb.errmess))
  {
    char append[12];

    sprintf(append, "&%08X: ", handle);
    memmove(erb.errmess + strlen(append), erb.errmess, strlen(erb.errmess) + 1);
    strncpy(erb.errmess, append, strlen(append));
  }

  /* Finished */

  return &erb;
}

/**************************************************************/
/* errors_backend_error()                                     */
/*                                                            */
/* Generate a back-end error in the global error block.       */
/*                                                            */
/* Parameters: Back-end debugger handle;                      */
/*                                                            */
/*             backend_error number;                          */
/*                                                            */
/*             Number of additional parameters supplied;      */
/*                                                            */
/*             Additional parameters, all pointers to NUL     */
/*             terminated strings. Only up to the first 4     */
/*             will be used.                                  */
/*                                                            */
/* Returns:    Pointer to the global error block, for the     */
/*             caller's convenience.                          */
/**************************************************************/

_kernel_oserror * errors_backend_error(unsigned int handle, backend_errors e, unsigned int num_args, ...)
{
  char    token [20];
  va_list ap;

  dprintf(("Erro", "errors_backend_error: Called with &%X for &%08X\n", (unsigned int) e, handle));

  /* Different errors are judged to have different levels of severity */

  switch (e)
  {
    default:                     erb.errnum = Errors_Custom_Message; break;

    case bee_out_of_memory:      erb.errnum = Errors_Custom_Normal;  break;
  }

  /* Create the right token to lookup */

  sprintf(token, "B%05X", (unsigned int) e);

  /* Generate the error */

  va_start(ap, num_args);
  errors_construct_backend(handle, token, num_args, ap);
  va_end(ap);

  return &erb;
}

/**************************************************************/
/* errors_backend_message()                                   */
/*                                                            */
/* Generate a back-end message in the global error block.     */
/*                                                            */
/* Parameters: Back-end debugger handle;                      */
/*                                                            */
/*             Message token to use for the text;             */
/*                                                            */
/*             Number of additional parameters supplied;      */
/*                                                            */
/*             Additional parameters, all pointers to NUL     */
/*             terminated strings. Only up to the first 4     */
/*             will be used.                                  */
/*                                                            */
/* Returns:    Pointer to the global error block, for the     */
/*             caller's convenience.                          */
/**************************************************************/

_kernel_oserror * errors_backend_message(unsigned int handle, const char * token, unsigned int num_args, ...)
{
  va_list ap;

  dprintf(("Erro", "errors_backend_message: Called with '%s' for &%08X\n", token, handle));

  /* The error number is always the same for messages */

  erb.errnum = Errors_Custom_Message;

  /* Generate the error */

  va_start(ap, num_args);
  errors_construct_backend(handle, token, num_args, ap);
  va_end(ap);

  return &erb;
}

/**************************************************************/
/* errors_show()                                              */
/*                                                            */
/* Reports a (generally serious) error and exits with         */
/* EXIT_FAILURE.                                              */
/*                                                            */
/* Parameters: Pointer to a _kernel_oserror structure.        */
/*                                                            */
/* Assumes:    The pointer may be NULL.                       */
/**************************************************************/

void errors_show(_kernel_oserror * e)
{
  if (e!=NULL)
  {
    _kernel_swi_regs r;
    char             name[Limits_TaskName];
    char             spri[Limits_OS_SpriteName];
    WimpSysInfo      s;

    /* This call checks if errors can be reported in the Desktop, */
    /* or if they need to go into a command window (useful for    */
    /* CLI routines for example)                                  */

    s.r0=0;
    s.r1=0;
    wimp_read_sys_info(3,&s);

    if (s.r0==0) fprintf(stderr,"%s\n",e->errmess);
    else
    {
      StrNCpy0(name,lookup_token("_TaskName:DDT2",0));        /* Task name for 'Message from...' */
      StrNCpy0(spri,lookup_token("_SpriName:!ddt2",0));       /* Sprite name to put in error box */

      r.r[0] = (int) e;                                       /* Pointer to error block           */
      r.r[1] = (2<<9)+(1<<8);                                 /* Category 2 (warning)             */
      r.r[2] = (int) &name;                                   /* Application name looked up above */
      r.r[3] = (int) &spri;                                   /* Sprite name looked up above      */
      r.r[4] = 1;                                             /* Sprite block pointer (1 = WIMP)  */
      r.r[5] = (int) lookup_token("ErrorBtns:Quit",0);        /* Custom button, 'Quit'            */

      _kernel_swi(Wimp_ReportError,&r,&r);
    }

    exit(EXIT_FAILURE); /* Exit after reporting the error */
  }
}

/**************************************************************/
/* errors_cont()                                              */
/*                                                            */
/* Reports an error but allows execution to then continue     */
/* (rather than calling exit()) if the user clicks on         */
/* 'Continue' rather than 'Quit'. This is accomplished by a   */
/* longjmp back into wherever the setjmp was (e.g. in a poll  */
/* loop).                                                     */
/*                                                            */
/* Parameters: Pointer to a _kernel_oserror structure.        */
/*                                                            */
/* Assumes:    The pointer may be NULL.                       */
/**************************************************************/

void errors_cont(_kernel_oserror * e)
{
  if (e!=NULL)
  {
    _kernel_swi_regs r;
    char             name[Limits_TaskName];
    char             spri[Limits_OS_SpriteName];
    WimpSysInfo      s;

    #ifdef TRACE
      if (e->errnum == Errors_Custom_Fatal) e->errnum = Errors_Custom_Normal;
    #endif

    /* Force 'Quit' only for fatal errors */

    if (e->errnum == Errors_Custom_Fatal) errors_show(e);

    /* This all works in much the same way as errors_show above. */

    s.r0=0;
    s.r1=0;
    wimp_read_sys_info(3,&s);

    if (s.r0==0) fprintf(stderr,"%s\n",e->errmess);
    else
    {
      StrNCpy0(name, lookup_token("_TaskName:DDT2",0));
      StrNCpy0(spri, lookup_token("_SpriName:!ddt2",0));

      r.r[0] = (int) e;
      r.r[1] = (2<<9)+(1<<8)+1;
      r.r[2] = (int) &name;
      r.r[3] = (int) &spri;
      r.r[4] = 1;

      if (
           e->errnum != Errors_OS_Escape      &&
           e->errnum != Errors_Custom_Message
         )
         r.r[5] = (int) lookup_token("ErrorBtns:Quit",0);

      else r.r[5] = 0;

      _kernel_swi(Wimp_ReportError,&r,&r);

      if (r.r[1] == 1) longjmp(env, Main_FromShowErrorCont);

      exit(EXIT_FAILURE); /* Exit if 'Quit' is selected */
    }
  }
}

/**************************************************************/
/* errors_ret()                                               */
/*                                                            */
/* Reports an error but allows execution to then continue     */
/* (rather than calling exit()) if the user clicks on         */
/* 'Continue' rather than 'Quit'. This is accomplished by     */
/* simply returning.                                          */
/*                                                            */
/* Parameters: Pointer to a _kernel_oserror structure.        */
/*                                                            */
/* Assumes:    The pointer may be NULL.                       */
/**************************************************************/

void errors_ret(_kernel_oserror * e)
{
  if (e!=NULL)
  {
    _kernel_swi_regs r;
    char             name[Limits_TaskName];
    char             spri[Limits_OS_SpriteName];
    WimpSysInfo      s;

    #ifdef TRACE
      if (e->errnum == Errors_Custom_Fatal) e->errnum = Errors_Custom_Normal;
    #endif

    /* Force 'Quit' only for fatal errors */

    if (e->errnum == Errors_Custom_Fatal) errors_show(e);

    /* This all works in much the same way as errors_show above. */

    s.r0=0;
    s.r1=0;
    wimp_read_sys_info(3,&s);

    if (s.r0==0) fprintf(stderr,"%s\n",e->errmess);
    else
    {
      StrNCpy0(name, lookup_token("_TaskName:DDT2",0));
      StrNCpy0(spri, lookup_token("_SpriName:!ddt2",0));

      r.r[0] = (int) e;
      r.r[1] = (2<<9)+(1<<8)+1;
      r.r[2] = (int) &name;
      r.r[3] = (int) &spri;
      r.r[4] = 1;

      if (
           e->errnum != Errors_OS_Escape      &&
           e->errnum != Errors_Custom_Message
         )
         r.r[5] = (int) lookup_token("ErrorBtns:Quit",0);

      else r.r[5] = 0;

      _kernel_swi(Wimp_ReportError,&r,&r);

      if (r.r[1] != 1) exit(EXIT_FAILURE); /* Exit if 'Quit' is selected, else return normally */
    }
  }
}

/**************************************************************/
/* errors_ask()                                               */
/*                                                            */
/* Reports an error as a query - return result of button      */
/* selection by user.                                         */
/*                                                            */
/* Parameters: Pointer to a _kernel_oserror structure.        */
/*                                                            */
/*             Pointer to a MessageTrans token to look up -   */
/*             the text is used for the buttons in the error  */
/*             box.                                           */
/*                                                            */
/* Assumes:    The error pointer may be NULL. If so, the      */
/*             other two are ignored as well. If not, the     */
/*             other must not be NULL.                        */
/*                                                            */
/* Returns:    Return value of R1 from call to SWI            */
/*             Wimp_ReportError (3, 4 or 5, depending on      */
/*             which of the up to 3 custom buttons were       */
/*             activated).                                    */
/**************************************************************/

int errors_ask(_kernel_oserror * e, const char * buttons)
{
  if (e!=NULL)
  {
    _kernel_swi_regs r;
    char             name[Limits_TaskName];
    char             spri[Limits_OS_SpriteName];
    WimpSysInfo      s;

    #ifdef TRACE
      if (e->errnum == Errors_Custom_Fatal) e->errnum = Errors_Custom_Normal;
    #endif

    /* Force 'Quit' only for fatal errors */

    if (e->errnum == Errors_Custom_Fatal) errors_show(e);

    /* This all works in much the same way as errors_show above. */

    s.r0=0;
    s.r1=0;
    wimp_read_sys_info(3,&s);

    if (s.r0==0) fprintf(stderr,"%s\n",e->errmess);
    else
    {
      StrNCpy0(name, lookup_token("_TaskName:DDT2",0));
      StrNCpy0(spri, lookup_token("_SpriName:!ddt2",0));

      r.r[0] = (int) e;
      r.r[1] = (4<<9)+(1<<8);
      r.r[2] = (int) &name;
      r.r[3] = (int) &spri;
      r.r[4] = 1;

      r.r[5] = (int) lookup_token((char *) buttons,0);

      _kernel_swi(Wimp_ReportError,&r,&r);

      return r.r[1];
    }
  }

  return 0;
}
