/**************************************************************/
/* File:    NewProject.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the New project dialogue box.              */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 23-Oct-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>

#include <kernel.h>

#include <tboxlibs/event.h>
#include <tboxlibs/toolbox.h>
#include <tboxlibs/gadgets.h>

#include "BEManager.h"
#include "BEStructs.h"
#include "Errors.h"
#include "FEStructs.h"
#include "Global.h"
#include "Utils.h"

#include "NewProject.h"

/* Local variables */

static project default_project; /* The initial settings for the window */
static project current_project; /* Stuff temporarily set in the window, kept until "OK" is activated */
static bool    initialised = false;
static bool    opened      = false;

/* Local functions */

static _kernel_oserror * newproject_initialise        (void);
static _kernel_oserror * newproject_fill_from_default (ObjectId o);

/**************************************************************/
/* newproject_initialise()                                    */
/*                                                            */
/* Self-initialisation function for the first time the New    */
/* project dialogue box is opened.                            */
/**************************************************************/

static _kernel_oserror * newproject_initialise(void)
{
  default_project.next = NULL;
  default_project.prev = NULL;

  bemanager_get_first_name((const char **) &default_project.project_name);

  default_project.search_path       = NULL;
  default_project.number_of_objects = 0;
  default_project.objects           = NULL;

  default_project.debugger_number   = 0;
  default_project.debugger_handle   = 0;

  default_project.breakpoints       = NULL;
  default_project.watchpoints       = NULL;

  default_project.trace_execution   = 0;
  default_project.trace_functions   = 0;
  default_project.trace_breakpoints = 0;
  default_project.trace_watchpoints = 0;
  default_project.trace_swis        = 0;

  default_project.line_numbers      = 0;
  default_project.cpp_names         = 1;

  initialised = true;

  return NULL;
}

/**************************************************************/
/* newproject_fill_from_default()                             */
/*                                                            */
/* Fill in a New project dialogue box from the default        */
/* project structure (see top of file).                       */
/*                                                            */
/* Parameters: Object ID of dialogue box to fill in.          */
/**************************************************************/

static _kernel_oserror * newproject_fill_from_default(ObjectId o)
{
  RetError(optionbutton_set_state(0,
                                  o,
                                  NewProject_CID_LineNumbers,
                                  default_project.line_numbers));

  RetError(optionbutton_set_state(0,
                                  o,
                                  NewProject_CID_CPPNames,
                                  default_project.cpp_names));

  return newproject_set_backend(o, default_project.project_name);
}

/**************************************************************/
/* newproject_to_be_shown()                                   */
/*                                                            */
/* Called before the New project dialogue box is shown.       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as a custom handler from Windows.c.                 */
/**************************************************************/

int newproject_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("NPrj", "newproject_to_be_shown: Called\n"));

  if (opened)
  {
    dprintf(("NPrj", "newproject_to_be_shown: Already open\n"));
    return 0;
  }

  if (!initialised) ChkError(newproject_initialise());

  ChkError(newproject_fill_from_default(idb->self_id));

  current_project = default_project;
  opened          = true;

  dprintf(("NPrj", "newproject_to_be_shown: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_hidden()                                        */
/*                                                            */
/* Called when the New project dialogue box is hidden.        */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as a custom handler from Windows.c.                 */
/**************************************************************/

int newproject_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("NPrj", "newproject_hidden: Called\n"));

  opened = false;

  dprintf(("NPrj", "newproject_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_ok()                                            */
/*                                                            */
/* Called when the OK function of the New Project dialogue    */
/* box is activated.                                          */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as an extra handler from Windows.c.                 */
/**************************************************************/

int newproject_ok(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("NPrj", "newproject_ok: Called\n"));


  // This'll do for active items read into current_project such as Lists,
  // but the project name etc. will need to be read in directly. Memory
  // allocation / free issues?


  default_project = current_project;

  dprintf(("NPrj", "newproject_ok: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_cancel()                                        */
/*                                                            */
/* Called when the Cancel function of the New Project         */
/* dialogue box is activated.                                 */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as an extra handler from Windows.c.                 */
/**************************************************************/

int newproject_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("NPrj", "newproject_cancel: Called\n"));

  // Restore the local copy of the New Project dialogue box
  // contents from local structures.

  ChkError(newproject_fill_from_default(idb->self_id));

  current_project = default_project;

  dprintf(("NPrj", "newproject_cancel: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_set_backend()                                   */
/*                                                            */
/* Set the backend displayed in the given New project         */
/* dialogue box.                                              */
/*                                                            */
/* Parameters: Object ID of the New project dialogue box;     */
/*                                                            */
/*             Pointer to a back-end name, NUL terminated.    */
/**************************************************************/

_kernel_oserror * newproject_set_backend(ObjectId window, const char * name)
{
  unsigned int      hdl;
  const abilities * ab;
  bool              configure;

  dprintf(("NPrj", "newproject_set_backend: Called for &%08X with '%s'\n", window, name ? name : "<NULL>"));

  /* Get a handle to validate that the name is OK and set the display field */

  RetError(bemanager_get_handle_from_name(name, &hdl));
  RetError(displayfield_set_value(0,
                                  window,
                                  NewProject_CID_BEDisplay,
                                  (char *) name));

  /* Now deal with setting the window contents to an appropriate greyed/ungreyed state */

  RetError(bemanager_get_abilities(hdl, &ab));
  RetError(bemanager_can_configure(hdl, &configure));

  RetError(set_gadget_state(window,
                            NewProject_CID_BEConfigure,
                            configure == false ? 1 : 0));

  RetError(set_gadget_state(window,
                            NewProject_CID_Breakpoints,
                            ab->breakpoints.set == NULL ? 1 : 0));

  RetError(set_gadget_state(window,
                            NewProject_CID_Watchpoints,
                            ab->watchpoints.set == NULL ? 1 : 0));

  dprintf(("NPrj", "newproject_set_backend: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_fill_list_with_objects(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_fill_list_with_objects: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_fill_list_with_objects: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_read_list_of_objects(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_read_list_of_objects: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_read_list_of_objects: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_fill_list_with_breakpoints(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_fill_list_with_breakpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_fill_list_with_breakpoints: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_read_list_of_breakpoints(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_read_list_of_breakpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_read_list_of_breakpoints: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_fill_list_with_watchpoints(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_fill_list_with_watchpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_fill_list_with_watchpoints: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_read_list_of_watchpoints(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_read_list_of_watchpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_read_list_of_watchpoints: Successful\n"));

  return NULL;
}
