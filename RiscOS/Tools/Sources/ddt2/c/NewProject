/**************************************************************/
/* File:    NewProject.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the New project dialogue box.              */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 23-Oct-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/gadgets.h>
#include <tboxlibs/ScrollList.h>

#include "BEManager.h"
#include "BEStructs.h"
#include "Breakpoint.h"
#include "Errors.h"
#include "FEStructs.h"
#include "Global.h"
#include "Limit.h"
#include "List.h"
#include "Projects.h"
#include "Utils.h"

#include "NewProject.h"

/* Local variables */

static project default_project; /* The initial settings for the window */
static project current_project; /* Stuff temporarily set in the window, kept until "OK" is activated */
static bool    initialised = false;
static bool    opened      = false;

/* Local functions */

static _kernel_oserror * newproject_initialise (void);
static _kernel_oserror * newproject_set_up     (ObjectId o, project * use);

/**************************************************************/
/* newproject_initialise()                                    */
/*                                                            */
/* Self-initialisation function for the first time the New    */
/* project dialogue box is opened.                            */
/**************************************************************/

static _kernel_oserror * newproject_initialise(void)
{
  const char * name;

  if (initialised == false)
  {
    /* Catchall */

    memset(&default_project, 0, sizeof(default_project));
    memset(&current_project, 0, sizeof(current_project));

    /* Specific items */

    default_project.next = NULL;
    default_project.prev = NULL;

    RetError(bemanager_get_first_name(&name));

    default_project.debugger_name = utils_strdup(name);

    if (default_project.debugger_name == NULL)
    {
      return errors_frontend_error(fee_out_of_memory,
                                   "newproject_initialise");
    }

    default_project.search_path       = NULL;
    default_project.number_of_objects = 0;
    default_project.objects           = NULL;

    default_project.debugger_number   = 0;
    default_project.debugger_handle   = 0;

    default_project.breakpoints       = NULL;
    default_project.watchpoints       = NULL;

    default_project.trace_execution   = 0;
    default_project.trace_functions   = 0;
    default_project.trace_breakpoints = 0;
    default_project.trace_watchpoints = 0;
    default_project.trace_swis        = 0;

    default_project.line_numbers      = 0;
    default_project.cpp_names         = 1;

    initialised = true;
  }

  return NULL;
}

/**************************************************************/
/* newproject_set_up()                                        */
/*                                                            */
/* Set up a New project dialogue box from the given project   */
/* structure.                                                 */
/*                                                            */
/* Parameters: Object ID of dialogue box to fill in;          */
/*                                                            */
/*             Pointer to project structure to use.           */
/**************************************************************/

static _kernel_oserror * newproject_set_up(ObjectId o, project * use)
{
  /* Search path */

  RetError(utils_set_writeable_field(o,
                                     NewProject_CID_SearchPath,
                                     use->search_path,
                                     Limits_Writeable_General));

  /* Project name */

  RetError(utils_set_writeable_field(o,
                                     NewProject_CID_ProjectName,
                                     use->project_name,
                                     Limits_Writeable_General));

  /* Set up the option buttons */

  RetError(optionbutton_set_state(0,
                                  o,
                                  NewProject_CID_LineNumbers,
                                  use->line_numbers));

  RetError(optionbutton_set_state(0,
                                  o,
                                  NewProject_CID_CPPNames,
                                  use->cpp_names));

  return newproject_set_backend(o, use->debugger_name);
}

/**************************************************************/
/* newproject_to_be_shown()                                   */
/*                                                            */
/* Called before the New project dialogue box is shown.       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as a custom handler from Windows.c.                 */
/**************************************************************/

int newproject_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  char time[5];
  char name[Limits_Writeable_General];
  char path[Limits_Writeable_General]; /* Not Limits_OS_Pathname as this has to be written to and read from a writeable field */

  dprintf(("NPrj", "newproject_to_be_shown: Called\n"));

  if (opened)
  {
    dprintf(("NPrj", "newproject_to_be_shown: Already open\n"));
    return 0;
  }

  /* Self-initialisation */

  ChkError(newproject_initialise());

  /* Build the default project name */

  time[0] = 3;

  ChkError(_swix(OS_Word,
                 _INR(0,1),

                 14,
                 time));

  ChkError(_swix(Territory_ConvertDateAndTime,
                 _INR(0,4),

                 -1,
                 time,
                 name,
                 sizeof(name),
                 lookup_token("TimeFormat", 0)));

  name[sizeof(name) - 1] = '\0';

  /* Record this in the default project */

  free((void *) default_project.project_name);
  default_project.project_name = utils_strdup(name);

  /* Work out the CSD for an initial go at the search path, */
  /* if there's not one already set                         */

  if (default_project.search_path == NULL)
  {
    ChkError(_swix(OS_FSControl,
                   _INR(0,5),

                   37, /* Canonicalise path */
                   "@",
                   path,
                   0,
                   0,
                   sizeof(path)));

    path[sizeof(path) - 1] = '\0';
    if (strlen(path) < sizeof(path) - 1) strcat(path, ".");

    default_project.search_path = utils_strdup(path);
  }

  if (
       default_project.project_name == NULL ||
       default_project.search_path  == NULL
     )
  {
    ChkError(errors_frontend_error(fee_out_of_memory,
                                   "newproject_to_be_shown"));
  }

  /* Now copy the default settings to the current settings */

  ChkError(projects_copy_project(&current_project, &default_project, true));

  /* Set up the window contents */

  ChkError(newproject_set_up(idb->self_id, &current_project));

  /* Finished */

  opened = true;

  dprintf(("NPrj", "newproject_to_be_shown: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_hidden()                                        */
/*                                                            */
/* Called when the New project dialogue box is hidden.        */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as a custom handler from Windows.c.                 */
/**************************************************************/

int newproject_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("NPrj", "newproject_hidden: Called\n"));

  opened = false;

  dprintf(("NPrj", "newproject_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_ok()                                            */
/*                                                            */
/* Called when the OK function of the New Project dialogue    */
/* box is activated.                                          */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as an extra handler from Windows.c.                 */
/**************************************************************/

int newproject_ok(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  char prname [Limits_Writeable_General];
  char sepath [Limits_Writeable_General];
  char bename [Limits_BackEnd_Name];

  dprintf(("NPrj", "newproject_ok: Called\n"));

  /* This is a little inefficient as we're going to reread a lot of stuff */
  /* from the dialogue box, but it's a solid approach                     */

  ChkError(projects_copy_project(&default_project, &current_project, true));

  /* Read the project and debugger names and search path */

  ChkError(displayfield_get_value(0,
                                  idb->self_id,
                                  NewProject_CID_BEDisplay,
                                  bename,
                                  sizeof(bename),
                                  NULL));

  ChkError(writablefield_get_value(0,
                                   idb->self_id,
                                   NewProject_CID_ProjectName,
                                   prname,
                                   sizeof(prname),
                                   NULL));

  ChkError(writablefield_get_value(0,
                                   idb->self_id,
                                   NewProject_CID_SearchPath,
                                   sepath,
                                   sizeof(sepath),
                                   NULL));

  /* Copy them into the default project, first freeing the stuff */
  /* that would've been copied from the current project before.  */

  free((void *) default_project.project_name);
  free((void *) default_project.debugger_name);
  free((void *) default_project.search_path);

  default_project.project_name  = utils_strdup(prname);
  default_project.debugger_name = utils_strdup(bename);
  default_project.search_path   = utils_strdup(sepath);

  if (
       default_project.project_name  == NULL ||
       default_project.debugger_name == NULL ||
       default_project.search_path   == NULL
     )
  {
    ChkError(errors_frontend_error(fee_out_of_memory,
                                   "newproject_ok"));
  }



/// NOW call Projects.c and set up the project for real







  dprintf(("NPrj", "newproject_ok: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_cancel()                                        */
/*                                                            */
/* Called when the Cancel function of the New Project         */
/* dialogue box is activated.                                 */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as an extra handler from Windows.c.                 */
/**************************************************************/

int newproject_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("NPrj", "newproject_cancel: Called\n"));

  ChkError(newproject_set_up(idb->self_id, &default_project));
  ChkError(projects_copy_project(&current_project, &default_project, true));

  /* If a SELECT-click or a keyboard shortcut, hide the window */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    ChkError(toolbox_hide_object(0, idb->self_id));
  }

  dprintf(("NPrj", "newproject_cancel: Successful\n"));

  return 0;
}

/**************************************************************/
/* newproject_set_backend()                                   */
/*                                                            */
/* Set the backend displayed in the given New project         */
/* dialogue box.                                              */
/*                                                            */
/* Parameters: Object ID of the New project dialogue box;     */
/*                                                            */
/*             Pointer to a back-end name, NUL terminated.    */
/**************************************************************/

_kernel_oserror * newproject_set_backend(ObjectId window, const char * name)
{
  unsigned int     hdl;
  const debugger * d;

  dprintf(("NPrj", "newproject_set_backend: Called for &%08X with '%s'\n", window, name ? name : "<NULL>"));

  /* Get a handle to validate that the name is OK */

  RetError(bemanager_get_handle_from_name(name, &hdl));

//  /* If this is the same name, don't do anything else */
//
//  if (current_project.debugger_name != NULL && !strcmp(name, current_project.debugger_name))
//  {
//    dprintf(("NPrj", "newproject_set_backend: Name is the same - no change; exitting\n"));
//
//    return NULL;
//  }

  /* Update the display field */

  RetError(utils_set_display_field(window,
                                   NewProject_CID_BEDisplay,
                                   name,
                                   Limits_BackEnd_Name));

  /* This is a bit tacky, really, closing all the List dialogues. */
  /* It's a very safe approach nonetheless.                       */

  RetError(list_close_for_component(NewProject_CID_ObjectFiles));
  RetError(list_close_for_component(NewProject_CID_Breakpoints));
  RetError(list_close_for_component(NewProject_CID_Watchpoints));

  /* Update our record of the current project */

  free((void *) current_project.debugger_name);
  current_project.debugger_name = utils_strdup(name);

  if (current_project.debugger_name == NULL)
  {
    return errors_frontend_error(fee_out_of_memory,
                                 "newproject_set_backend");
  }

  /* Record the debugger handle */

  RetError(toolbox_set_client_handle(0,
                                     window,
                                     (void *) hdl));

  current_project.debugger_handle = hdl;

  /* Now deal with setting the window contents to an appropriate greyed/ungreyed state */

  RetError(bemanager_get_debugger(hdl, &d));

  RetError(set_gadget_state(window,
                            NewProject_CID_BEConfigure,
                            d->configure == NULL ? 1 : 0));

  RetError(set_gadget_state(window,
                            NewProject_CID_Breakpoints,
                            d->ab.breakpoints.set == NULL ? 1 : 0));

  RetError(set_gadget_state(window,
                            NewProject_CID_Watchpoints,
                            d->ab.watchpoints.set == NULL ? 1 : 0));

  dprintf(("NPrj", "newproject_set_backend: Successful\n"));

  return NULL;
}

/**************************************************************/
/* newproject_fill_list_with_objects()                        */
/*                                                            */
/* Callback function for List.c. Fill the scrolling list with */
/* object filenames.                                          */
/*                                                            */
/* Parameters: Object ID of the list dialogue box;            */
/*                                                            */
/*             Handle (not used).                             */
/**************************************************************/

_kernel_oserror * newproject_fill_list_with_objects(ObjectId list, unsigned int handle)
{
  unsigned int item;

  dprintf(("NPrj", "newproject_fill_list_with_objects: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  for (item = 0; item < current_project.number_of_objects; item++)
  {
    dprintf(("NPrj", "newproject_fill_list_with_objects: Adding index %d, '%s'\n", item, current_project.objects[item]));

    RetError(scrolllist_add_item(ScrollList_AddItem_MakeVisible,
                                 list,
                                 List_CID_ScrollList,
                                 current_project.objects[item],
                                 NULL,
                                 NULL,
                                 item));
  }

  dprintf(("NPrj", "newproject_fill_list_with_objects: Successful\n"));

  return NULL;
}

/**************************************************************/
/* newproject_read_list_of_objects()                          */
/*                                                            */
/* Callback function for List.c. Read a list of object        */
/* filenames from the scrolling list, performing validation.  */
/*                                                            */
/* Parameters: Object ID of the list dialogue box;            */
/*                                                            */
/*             Handle (not used).                             */
/**************************************************************/

_kernel_oserror * newproject_read_list_of_objects(ObjectId list, unsigned int handle)
{
  unsigned int bad   = 0;
  unsigned int items = list_count_items(list);
  unsigned int item;
  unsigned int type;
  char         text    [Limits_List_Item];

  dprintf(("NPrj", "newproject_read_list_of_objects: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  RetError(projects_remove_objects(&current_project, true));

  for (item = 0; item < items; item++)
  {
    RetError(scrolllist_get_item_text(0,
                                      list,
                                      List_CID_ScrollList,
                                      text,
                                      sizeof(text),
                                      item,
                                      NULL));

    text[sizeof(text) - 1] = '\0';

    dprintf(("NPrj", "newproject_read_list_of_objects: Read item %d, '%s'\n", item, text));

    RetError(_swix(OS_File,
                   _INR(0,1) | _OUT(0),

                   17, /* Read catalogue info for object, use no path */
                   text,

                   &type));

    if (type == 1)
    {
      /* Item is found, and is a file */

      dprintf(("NPrj", "newproject_read_list_of_objects: Adding item\n"));

      RetError(projects_add_object(&current_project, true, text));
    }
    else
    {
      /* Item is not found, is a directory, or is an image file */

      bad++;

      dprintf(("NPrj", "newproject_read_list_of_objects: Item type is %d (not a file) - bad count now %d\n", type, bad));
    }
  }

  /* Warn the user if anything was ignored */

  if (bad == 1)
  {
    dprintf(("NPrj", "newproject_read_list_of_objects: 1 item was skipped, raising appropriate message\n"));

    return errors_frontend_message("BadItem",
                                   0);
  }
  else if (bad > 1)
  {
    char number[20];

    dprintf(("NPrj", "newproject_read_list_of_objects: %d items were skipped, raising appropriate message\n", bad));

    sprintf(number, "%d", bad);

    return errors_frontend_message("BadItems",
                                   1,
                                   number);
  }

  /* Otherwise, finished cleanly */

  dprintf(("NPrj", "newproject_read_list_of_objects: Successful\n"));

  return NULL;
}

/**************************************************************/
/* newproject_fill_list_with_breakpoints()                    */
/*                                                            */
/* Callback function for List.c. Fill the scrolling list with */
/* breakpoint descriptors.                                    */
/*                                                            */
/* Parameters: Object ID of the list dialogue box;            */
/*                                                            */
/*             Handle (not used).                             */
/**************************************************************/

_kernel_oserror * newproject_fill_list_with_breakpoints(ObjectId list, unsigned int handle)
{
  breakpoint * b;
  char       * add;
  char         text [Limits_List_Item];

  dprintf(("NPrj", "newproject_fill_list_with_breakpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  for (b = current_project.breakpoints; b != NULL; b = b->next)
  {
    switch (b->type)
    {
      case breakpoint_type_function: add = Breakpoint_Tag_Function;    break;
      case breakpoint_type_address:  add = Breakpoint_Tag_Address;     break;
      case breakpoint_type_swi:      add = Breakpoint_Tag_SWI;         break;
      case breakpoint_type_line:     add = Breakpoint_Tag_Line;        break;
      case breakpoint_type_event:    add = Breakpoint_Tag_WimpEvent;   break;
      case breakpoint_type_service:  add = Breakpoint_Tag_ServiceCall; break;
      case breakpoint_type_upcall:   add = Breakpoint_Tag_UpCall;      break;
      default:                       add = NULL;                       break;
    }

    if (add != NULL)
    {
      StrNCpy0(text, add);

      if (strlen(add) + strlen(b->info) < sizeof(text))
      {
        strcat(text, b->info);

        RetError(scrolllist_add_item(ScrollList_AddItem_MakeVisible,
                                     list,
                                     List_CID_ScrollList,
                                     text,
                                     NULL,
                                     NULL,
                                     0));
      }
    }
  }

  dprintf(("NPrj", "newproject_fill_list_with_breakpoints: Successful\n"));

  return NULL;
}

/**************************************************************/
/* newproject_read_list_of_breakpoints()                      */
/*                                                            */
/* Callback function for List.c. Read a list of breakpoints   */
/* from the scrolling list.                                   */
/*                                                            */
/* Parameters: Object ID of the list dialogue box;            */
/*                                                            */
/*             Handle (not used).                             */
/**************************************************************/

_kernel_oserror * newproject_read_list_of_breakpoints(ObjectId list, unsigned int handle)
{
  unsigned int      bad   = 0;
  unsigned int      items = list_count_items(list);
  unsigned int      item;
  breakpoint_type   type;
  char              text    [Limits_List_Item];
  char            * textp;

  dprintf(("NPrj", "newproject_read_list_of_breakpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  RetError(projects_remove_breakpoints(&current_project, true));

  for (item = 0; item < items; item++)
  {
    RetError(scrolllist_get_item_text(0,
                                      list,
                                      List_CID_ScrollList,
                                      text,
                                      sizeof(text),
                                      item,
                                      NULL));

    text[sizeof(text) - 1] = '\0';

    dprintf(("NPrj", "newproject_read_list_of_breakpoints: Read item %d, '%s'\n", item, text));

    /* Work out the breakpoint type and increment the text pointer so */
    /* it doesn't include the type descriptor anymore.                */

    textp = text;

    if      (strncmp(text, Breakpoint_Tag_Function,    sizeof(Breakpoint_Tag_Function)    - 1) == 0) type = breakpoint_type_function, textp += sizeof(Breakpoint_Tag_Function)    - 1;
    else if (strncmp(text, Breakpoint_Tag_Address,     sizeof(Breakpoint_Tag_Address)     - 1) == 0) type = breakpoint_type_address,  textp += sizeof(Breakpoint_Tag_Address)     - 1;
    else if (strncmp(text, Breakpoint_Tag_SWI,         sizeof(Breakpoint_Tag_SWI)         - 1) == 0) type = breakpoint_type_swi,      textp += sizeof(Breakpoint_Tag_SWI)         - 1;
    else if (strncmp(text, Breakpoint_Tag_Line,        sizeof(Breakpoint_Tag_Line)        - 1) == 0) type = breakpoint_type_line,     textp += sizeof(Breakpoint_Tag_Line)        - 1;
    else if (strncmp(text, Breakpoint_Tag_WimpEvent,   sizeof(Breakpoint_Tag_WimpEvent)   - 1) == 0) type = breakpoint_type_event,    textp += sizeof(Breakpoint_Tag_WimpEvent)   - 1;
    else if (strncmp(text, Breakpoint_Tag_ServiceCall, sizeof(Breakpoint_Tag_ServiceCall) - 1) == 0) type = breakpoint_type_service,  textp += sizeof(Breakpoint_Tag_ServiceCall) - 1;
    else if (strncmp(text, Breakpoint_Tag_UpCall,      sizeof(Breakpoint_Tag_UpCall)      - 1) == 0) type = breakpoint_type_upcall,   textp += sizeof(Breakpoint_Tag_UpCall)      - 1;
    else
    {
      bad++;
      continue;
    }

    /* Is there any text left? If so, add it */

    if (strlen(textp) == 0)
    {
      bad++;
    }
    else
    {
      RetError(projects_add_breakpoint(&current_project, true, type, textp));
    }
  }

  /* Warn the user if anything was ignored */

  if (bad == 1)
  {
    dprintf(("NPrj", "newproject_read_list_of_objects: 1 item was skipped, raising appropriate message\n"));

    return errors_frontend_message("BadMisc",
                                   0);
  }
  else if (bad > 1)
  {
    char number[20];

    dprintf(("NPrj", "newproject_read_list_of_objects: %d items were skipped, raising appropriate message\n", bad));

    sprintf(number, "%d", bad);

    return errors_frontend_message("BadMiscs",
                                   1,
                                   number);
  }

  /* Otherwise, finished cleanly */

  dprintf(("NPrj", "newproject_read_list_of_breakpoints: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_fill_list_with_watchpoints(ObjectId list, unsigned int handle)
{
//  watchpoint   * w;
//  char         * add;
//  unsigned int   len;
//  char           text [Limits_List_Item];

  dprintf(("NPrj", "newproject_fill_list_with_watchpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

//  for (w = current_project.watchpoints; w != NULL; w = w->next)
//  {
//    if (w->variable) add = Watchpoint_Tag_Variable;
//    else             add = Watchpoint_Tag_Location;
//
//    StrNCpy0(text, add);
//
//    len = strlen(add);
//
//    if (len + 5 + w->read + w->write + w->anything < sizeof(text))
//    {
//      text[len++] = ' ';
//      text[len++] = Watchpoint_Tag_OpenByte;
//
//      if (w->read     == true) text[len++] = Watchpoint_Tag_ReadByte;
//      if (w->write    == true) text[len++] = Watchpoint_Tag_WriteByte;
//      if (w->anything == true) text[len++] = Watchpoint_Tag_AnyByte;
//
//      text[len++] = Watchpoint_Tag_CloseByte;
//      text[len++] = ':';
//      text[len++] = ' ';
//    }
//
//      if (strlen(add) + strlen(b->info) < sizeof(text))
//      {
//        strcat(text, b->info);
//
//        RetError(scrolllist_add_item(ScrollList_AddItem_MakeVisible,
//                                     list,
//                                     List_CID_ScrollList,
//                                     text,
//                                     NULL,
//                                     NULL,
//                                     0));
//      }
//    }
//  }

  dprintf(("NPrj", "newproject_fill_list_with_watchpoints: Successful\n"));

  return NULL;
}

/**************************************************************/
/*                                                            */
/*                                                            */
/*                                                            */
/**************************************************************/

_kernel_oserror * newproject_read_list_of_watchpoints(ObjectId list, unsigned int handle)
{
  dprintf(("NPrj", "newproject_read_list_of_watchpoints: Called for &%08X with &%08X\n", (unsigned int) list, handle));

  dprintf(("NPrj", "newproject_read_list_of_watchpoints: Successful\n"));

  return NULL;
}
