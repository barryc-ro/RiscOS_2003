/**************************************************************/
/* File:    Main.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: To run.                                           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 03-Apr-2000 (ADH): Adapted from Browse source.    */
/*          16-Oct-2000 (ADH): Adapted from PlugPlay source.  */
/*          18-Oct-2000 (ADH): Trace level stuff is now all   */
/*                             handled by DebugLib.           */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>
#include <tboxlibs/toolbox.h>
#include <tboxlibs/proginfo.h>

#include <URI.h>

#include "BEManager.h"
#include "Errors.h"
#include "FromROSLib.h"
#include "Global.h"
#include "Handlers.h"
#include "Menus.h"
#include "MiscDefs.h"
#include "RMA.h"
#include "ServMenu.h"
#include "UpCallMenu.h"
#include "Utils.h"
#include "Windows.h"

#include "Main.h"

/* Local compile-time options */

#undef WRITE_DUMP_FILE_ON_ERROR /* Define as '"<filename>"' for a dump file - see main */

/* Local functions */

static void initialise_app (void);
static void termination    (void);
static void catch_errors   (int signum);

/**************************************************************/
/* initialise_app()                                           */
/*                                                            */
/* Initialises application as a Toolbox task.                 */
/**************************************************************/

static void initialise_app(void)
{
  int module_version;

  errors_show(event_initialise(&idb));

  /* Register fundamental handlers and initialise as a Toolbox task */

  errors_show(event_register_message_handler(Wimp_MQuit, handle_messages, NULL));
  errors_show(event_register_toolbox_handler(-1, Toolbox_Error, report_toolbox_error, NULL));

  /* Check the Wimp version; for window managers of 3.8 and above, */
  /* declare a minimum version of 3.80 so borderless windows can   */
  /* still have tools. Otherwise, only ask for 3.1.                */

  _swix(Wimp_ReadSysInfo, _IN(0) | _OUT(0), 7, &module_version);

  if (module_version >= 387) nested_wimp = 1;
  else                       nested_wimp = 0;

  errors_show(toolbox_initialise(0,
                                nested_wimp ? WIMPMINH : WIMPMINL,
                                messages_list,
                                event_code_list,
                                task_dir,
                                &meb,
                                &idb,
                                &wimp_version,
                                &task_handle,
                                (void *) &sprite_block));

  /* Remember the application name */

  StrNCpy0(program_name,
           lookup_token("_TaskName",0));

  /* If the system variable 'PlugPlay$IssueDesktopCommand' is set to 'yes', */
  /* then the AcornURI and/or TaskModule modules were started in !Run and   */
  /* we must issue a *Desktop command to start their task components.       */

  {
    char combuf[96];

    sprintf(combuf, "If \"<PlugPlay$IssueDesktopCommand>\" = \"yes\" Then WimpTask Desktop\r\n");

    _swix(OS_CLI, /* Don't want to hear about any errors */
          _IN(0),

          combuf);
  }

  /* Initialise all of the back-end routines */

  errors_show(bemanager_initialise());

  /* Called before the application's Info box is shown */

  errors_show(event_register_toolbox_handler(-1, ProgInfo_AboutToBeShown, handle_show_info, NULL));

  /* Menu handlers. To add new menus, see Menus.c. */

  errors_show(menus_register_primary_handlers());

  /* Window handlers. To add new windows, see Windows.c. */

  errors_show(windows_register_primary_handlers());

  /* Wimp event handlers */

  errors_show(event_register_wimp_handler(-1, Wimp_EKeyPressed, handle_keys, NULL));

  /* General Wimp message handling */

  errors_show(event_register_message_handler(Wimp_MModeChange, handle_messages, NULL));
  errors_show(event_register_message_handler(Wimp_MDataLoad,   handle_messages, NULL));

  /* Initialise FromROSLib routines */

  wimpt_read();

  /* Initialise Utils.c routines */

  read_os_to_points();

  /* The Service [call] and UpCall menus opened from the Breakpoints  */
  /* dialogue box can get auto-deleted by the Toolbox when the window */
  /* closes. To stop this, we check if the relevant objects are       */
  /* shared objects, and if so, call toolbox_create_object on them    */
  /* once. This increments their usage count permanently to > zero,   */
  /* which stops the Toolbox ever deleting them. This means the slow  */
  /* process of rebuilding the menu will only happen if the timestamp */
  /* on the file changes at run-time or the application is shut down. */

  errors_show(utils_increment_usage(ServMenu_ObjectName));
  errors_show(utils_increment_usage(UpCallMenu_ObjectName));
}

#ifdef TRACE

  #include "Breakpoint.h"
  #include "FEStructs.h"
  #include "List.h"
  #include "Watchpoint.h"

  static bool main_compare_breakpoints (breakpoint * a, breakpoint * b);
  static bool main_compare_watchpoints (watchpoint * a, watchpoint * b);
  static void main_self_test           (void);

  /**************************************************************/
  /* main_compare_breakpoints()                                 */
  /*                                                            */
  /* Service function for main_self_test. Compares two          */
  /* breakpoint structures.                                     */
  /*                                                            */
  /* Parameters: Pointer to first breakpoint structure;         */
  /*                                                            */
  /*             Pointer to second breakpoint structure.        */
  /*                                                            */
  /* Returns:    true if the contents of both are equivalent,   */
  /*             else false.                                    */
  /**************************************************************/

  static bool main_compare_breakpoints(breakpoint * a, breakpoint * b)
  {
    if (a == NULL || b == NULL) errors_show(errors_frontend_error(fee_invalid_parameters,
                                                                  "main_compare_breakpoints"));

    if (a->type           != b->type)                     return false;
    if (a->for_trace_only != b->for_trace_only)           return false;

    if (a->info == NULL && b->info != NULL)               return false;
    if (a->info != NULL && b->info == NULL)               return false;

    if (a->info != NULL && strcmp(a->info, b->info) != 0) return false;

    return true;
  }

  /**************************************************************/
  /* main_compare_watchpoints()                                 */
  /*                                                            */
  /* Service function for main_self_test. Compares two          */
  /* watchpoint structures.                                     */
  /*                                                            */
  /* Parameters: Pointer to first watchpoint structure;         */
  /*                                                            */
  /*             Pointer to second watchpoint structure.        */
  /*                                                            */
  /* Returns:    true if the contents of both are equivalent,   */
  /*             else false.                                    */
  /**************************************************************/

  static bool main_compare_watchpoints(watchpoint * a, watchpoint * b)
  {
    if (a == NULL || b == NULL) errors_show(errors_frontend_error(fee_invalid_parameters,
                                                                  "main_compare_watchpoints"));

    if (a->variable != b->variable)                          return false;
    if (a->read     != b->read)                              return false;
    if (a->write    != b->write)                             return false;
    if (a->anything != b->anything)                          return false;

    if (a->name  == NULL && b->name  != NULL)                return false;
    if (a->name  != NULL && b->name  == NULL)                return false;
    if (a->value == NULL && b->value != NULL)                return false;
    if (a->value != NULL && b->value == NULL)                return false;

    if (a->name  != NULL && strcmp(a->name, b->name)   != 0) return false;
    if (a->value != NULL && strcmp(a->value, b->value) != 0) return false;

    return true;
  }

  /**************************************************************/
  /* main_self_test()                                           */
  /*                                                            */
  /* A debug-only self test routine built to run a few          */
  /* functions through some tests with visual inspection for    */
  /* the expected result.                                       */
  /**************************************************************/

  static void main_self_test(void)
  {
    /* Errors here are trace only, so not in Messages. Hence the token   */
    /* at the start is just any hacky thing that won't be there, forcing */
    /* the use of the text given after the colon.                        */

    char * fail = "not-token:Self test failed, cannot start.";

    dprintf(("", "main_self_test: Called\n"));
    _swix(Hourglass_On,0);

    /* Test the breakpoint string/struct conversions and dialogue box */
    /* set-up routine.                                                */

    {
      char         * s;
      char         * t;
      ObjectId       o;
      list_add_for   attached;
      unsigned int   itemcount = 1;
      breakpoint     b;
      breakpoint   * bl;

      dprintf(("", "main_self_test: Breakpoint systems\n"));

      errors_show(toolbox_create_object(0, "Breakpoint", &o));

      attached.parent            = NULL_ObjectId;
      attached.open_for          = NULL_ComponentId;
      attached.parent_hide_event = 0;
      attached.list_item         = -1;

      errors_show(bemanager_get_handle_from_name("Demo 2", &attached.debugger_handle));

      b.next = b.prev  = NULL;
      b.for_trace_only = false;

      /* We'll be doing the same thing several times, so lump it into a set */
      /* of hasty macros for easier overall reading.                        */

      #define MST_Prologue    errors_show(breakpoint_struct_to_string(&b, &s)); \
                              errors_show(breakpoint_string_to_struct(s, &bl)); \
                              errors_show(breakpoint_struct_to_string(bl, &t));

      #define MST_Dialogue(b) dprintf(("", "main_self_test:\0215 %03d '%s'\0217\n"   \
                                           "              :\0215 --- '" b "'\0217\n" \
                                           "              :\0215 Chk '%s'\0217\n", itemcount++, s, t));

      #define MST_Epilogue    if (!main_compare_breakpoints(&b, bl)) errors_show(errors_frontend_message(fail, 0));       \
                                                                                                                          \
                              StrNCpy0(attached.initial_text, s);                                                         \
                              if (breakpoint_set_up(o, &attached) != NULL) errors_show(errors_frontend_message(fail, 0)); \
                                                                                                                          \
                              breakpoint_free(bl);                                                                        \
                              free(s);                                                                                    \
                              free(t);

      /* The string in MST_Dialogue is printed to be manually checked against   */
      /* the generated data; since the generated information comes from Messges */
      /* any changes there would result in self-test fail were the check done   */
      /* in here and faulted automatically.                                     */

      b.info = "an_item_to_call";
      b.type = breakpoint_type_function;

      MST_Prologue
      MST_Dialogue("Function: an_item_to_call")
      MST_Epilogue

      b.info = "Mysterious_CallToModule";
      b.type = breakpoint_type_swi;

      MST_Prologue
      MST_Dialogue("SWI: Mysterious_CallToModule")
      MST_Epilogue

      b.info = "address_item";
      b.type = breakpoint_type_address;

      MST_Prologue
      MST_Dialogue("Address: address_item")
      MST_Epilogue

      b.info = "Service_Whatever";
      b.type = breakpoint_type_service;

      MST_Prologue
      MST_Dialogue("Service call: Service_Whatever")
      MST_Epilogue

      b.info = "Wimp_ENull";
      b.type = breakpoint_type_event;

      MST_Prologue
      MST_Dialogue("Wimp event: Wimp_ENull")
      MST_Epilogue

      b.info = "5920";
      b.type = breakpoint_type_line;

      MST_Prologue
      MST_Dialogue("Line: 5920")
      MST_Epilogue

      b.info = "UpCall_Callorama";
      b.type = breakpoint_type_upcall;

      MST_Prologue
      MST_Dialogue("UpCall: UpCall_Callorama")
      MST_Epilogue

      errors_show(toolbox_delete_object(0, o));

      #undef MST_Prologue
      #undef MST_Dialogue
      #undef MST_Epilogue
    }

    /* Test the watchpoint string/struct conversions and dialogue box */
    /* set-up routine.                                                */

    {
      char         * s;
      char         * t;
      ObjectId       o;
      list_add_for   attached;
      unsigned int   itemcount = 1;
      watchpoint     w;
      watchpoint   * wl;

      dprintf(("", "main_self_test: Watchpoint systems\n"));

      errors_show(toolbox_create_object(0, "Watchpoint", &o));

      attached.parent            = NULL_ObjectId;
      attached.open_for          = NULL_ComponentId;
      attached.parent_hide_event = 0;
      attached.list_item         = -1;

      errors_show(bemanager_get_handle_from_name("Demo 2", &attached.debugger_handle));

      w.next = w.prev = NULL;

      /* This all follows the same patterns as for the breakpoint tests */

      #define MST_Prologue    errors_show(watchpoint_struct_to_string(&w, &s)); \
                              errors_show(watchpoint_string_to_struct(s, &wl)); \
                              errors_show(watchpoint_struct_to_string(wl, &t));

      #define MST_Dialogue(b) dprintf(("", "main_self_test:\0215 %03d '%s'\0217\n"   \
                                           "              :\0215 --- '" b "'\0217\n" \
                                           "              :\0215 Chk '%s'\0217\n", itemcount++, s, t));

      #define MST_Epilogue    if (!main_compare_watchpoints(&w, wl)) errors_show(errors_frontend_message(fail, 0));       \
                                                                                                                          \
                              StrNCpy0(attached.initial_text, s);                                                         \
                              if (watchpoint_set_up(o, &attached) != NULL) errors_show(errors_frontend_message(fail, 0)); \
                                                                                                                          \
                              watchpoint_free(wl);                                                                        \
                              free(s);                                                                                    \
                              free(t);

      w.variable = true;
      w.name     = "a_variable";
      w.read     = true;
      w.write    = true;
      w.anything = true;
      w.value    = NULL;

      MST_Prologue
      MST_Dialogue("Variable (RWA): a_variable")
      MST_Epilogue

      w.variable = false;
      w.name     = "&3248000";

      MST_Prologue
      MST_Dialogue("Address (RWA): &3248000")
      MST_Epilogue

      w.read = false;

      MST_Prologue
      MST_Dialogue("Address (WA): &3248000")
      MST_Epilogue

      w.read  = true;
      w.write = false;

      MST_Prologue
      MST_Dialogue("Address (RA): &3248000")
      MST_Epilogue

      w.read     = true;
      w.write    = true;
      w.anything = false;
      w.value    = "245";

      MST_Prologue
      MST_Dialogue("Address (RW): &3248000, 245")
      MST_Epilogue

      w.read     = false;
      w.anything = false;

      MST_Prologue
      MST_Dialogue("Address (W): &3248000, 245")
      MST_Epilogue

      w.read     = true;
      w.write    = false;
      w.anything = false;

      MST_Prologue
      MST_Dialogue("Address (R): &3248000, 245")
      MST_Epilogue

      errors_show(toolbox_delete_object(0, o));

      #undef MST_Prologue
      #undef MST_Dialogue
      #undef MST_Epilogue
    }

    _swix(Hourglass_Off,0);
    dprintf(("", "main_self_test: Finished\n"));
  }

#endif

/**************************************************************/
/* termination()                                              */
/*                                                            */
/* Called by registration through the atexit function. Shuts  */
/* down core functions prior to the application exitting.     */
/**************************************************************/

void termination(void)
{
  dprintf(("Rout", "\0211termination\0217: Called\n"));

  if (taskmodule_ds_registered)
  {
    /* Not interested in any errors, if it fails we can't really */
    /* do anything about it at this stage.                       */

    _swix(TaskModule_DeRegisterService,
          _INR(0,2),

          0,
          0,
          task_handle);
  }

  rma_shutdown();

  dprintf(("Rout", "\0211termination\0217: Completed OK\n"));
}

/**************************************************************/
/* main()                                                     */
/*                                                            */
/* That which runs before all others.                         */
/**************************************************************/

int main(int argc, char * argv[])
{
  WimpPollBlock b;
  int           eventcode, time;
  int           argp = 1;

  #ifdef TRACE

    {
      const char   * dsysnm = SYSTEM "$DebugLevel";
      const char   * val    = "";
      unsigned int   all    = 0;
      debug_device   dev;

      /* Handle -d[ebug] CLI switch.                                */
      /*                                                            */
      /* This must be the first command line argument. The value it */
      /* takes is a comma separated list of text tokens:            */
      /*                                                            */
      /* Token  Purpose                                             */
      /* =====  =======                                             */
      /*                                                            */
      /* BEMe   Backend menu operations                             */
      /* BrkP   Breakpoint dialogue box operations                  */
      /* DyMe   Dynamic menu creation routines                      */
      /* Erro   Error generation and reporting                      */
      /* EvMe   Event menu operations                               */
      /* File   File operations (e.g. UpCall list reading)          */
      /* LiAd   List add dialogue box operations                    */
      /* LiDi   List dialogue box operations                        */
      /* LiMe   List menu operations                                */
      /* LMem   Low level memory tracing (mostly RMA)               */
      /* Menu   Generic menu handler                                */
      /* MMen   Main menu operations                                */
      /* MsgT   MessageTrans related messages                       */
      /* NPrj   New project dialogue box operations                 */
      /* Null   Null claim/release messages                         */
      /* Proj   Project management                                  */
      /* Rout   Routine start, poll, exit                           */
      /* SvMe   Service call menu operations                        */
      /* UCMe   UpCall menu operations                              */
      /* Wind   Generic window handler                              */
      /* WtcP   Watchpoint dialogue box operations                  */
      /*                                                            */
      /* All    Everything                                          */
      /*                                                            */
      /* A token value of "None" is reserved and must not be used.  */
      /*                                                            */
      /* For example, 'Run !RunImage -debug MsgT,Null %*0'.         */
      /*                                                            */
      /* All output, and selection of output items, is done through */
      /* DebugLib. The facilities are only available in TRACE       */
      /* builds. TRACE builds will also often feature extra error   */
      /* checking or self-test functions.                           */

      if (argc > argp + 1)
      {
        if (!strcmp(argv[argp],"-debug") || !strcmp(argv[argp],"-d"))
        {
          if (strstr(argv[argp + 1], "All")) val = "", all = 1;
          else                               val = argv[argp + 1];

          errors_show(_swix(OS_SetVarVal,
                            _INR(0,4),

                            dsysnm,
                            val,
                            strlen(val),
                            0,
                            4));

          argp += 2;
        }
      }

      if (all == 0 && *val == '\0')
      {
        errors_show(_swix(OS_SetVarVal,
                          _INR(0,4),

                          dsysnm,
                          "None",
                          4,
                          0,
                          4));
      }

      dev = TML_OUTPUT; // FILE_OUTPUT

      debug_initialise(/*"\0216"*/ SYSTEM /*"\0217"*/, "$.DDT2debug", dsysnm);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }

  #endif

  /* NB, don't forget to echo any changes here with the duplicate code */
  /* just below the setjmp call later.                                 */

  signal(SIGOSERROR, catch_errors); /* OS error            */
  signal(SIGILL,     catch_errors); /* Illegal instruction */
  signal(SIGSEGV,    catch_errors); /* Segment violation   */
  signal(SIGSTAK,    catch_errors); /* Stack overflow      */
  signal(SIGFPE,     catch_errors); /* FPE error           */

  /* Before initialisation, find out where we ran from - this */
  /* software can support different application names, so the */
  /* existance of a specific system variable cannot be relied */
  /* upon (with the exception of ROM builds).                 */

  {
    int    len;
    char * item;

    /* Work out what path to go through */

    #ifdef ROM

      item = "Resources:$.Resources.DDT2";
      len  = strlen(item);

    #else

      item = SYSTEM ":a.^"; /* Ick */
      len  = strlen(item);

    #endif

    /* Allocate the space, bomb out if it fails */

    task_dir = (malloc)(len + 1);

    if (!task_dir)
    {
      erb.errnum = Errors_Custom_Fatal;
      strcpy(erb.errmess, "There is insufficient free memory to start the application.");
      errors_show(&erb);
    }

    /* Copy the information and ensure it is terminated correctly */

    strncpy(task_dir, item, len);
    task_dir[len] = 0;
  }

  dprintf(("Rout", "\nmain: Initialising\n"));

  /* Now do the bulk of application initialisation */

  initialise_app();

  /* Ensure our shut down handlers are present */

  atexit(termination);

// This bit just avoids "argp not used" warnings. Remove it if there's any
// non-TRACE build command line handling going on.

  #ifndef TRACE
    (void) argp;
  #endif

//  dprintf(("Rout", "main: Handling CLI arguments...\n"));
//
//  /* Keep advancing argp if the arguments are dealt with;  */
//  /* only continue to check the arguments if we haven't    */
//  /* pushed argp past argc, the total number of arguments. */
//
//  while (argc > argp)
//  {
//    /* Handle -url (URL strings) */
//
//    if (argc > argp + 1 && (!strcmp(argv[argp],"-url") || !strcmp(argv[argp],"-uri") || !strcmp(argv[argp],"-u")))
//    {
//      char * url = argv[argp + 1];
//      int    ok  = urlutils_check_protocols(url);
//
//      dprintf(("Rout", "main: Handling -url CLI argument\n"));
//
//      if (ok) fullscreen_report_error(fullscreen_start(url, 0), true);
//
//      argp += 2;
//    }
//    else argp++;
//  }

  #ifdef TRACE
    main_self_test();
  #endif

  dprintf(("Rout", "main: Polling\n"));

  /* Long jump handler - most nasty or generally unexpected */
  /* errors will come back to here. The OS error abort      */
  /* handler jumps back here to deal with the error as we   */
  /* then have a clear stack; this is to avoid 'no stack    */
  /* for trap handler' errors caused by a SWI corrupting    */
  /* the value of R10.                                      */

  if (setjmp(env) == Main_FromCatchErrors)
  {
    char         * tok        = NULL;
    unsigned int * regdump    = NULL;
    unsigned int * os_regdump = NULL;
    char           pc[16];

    /* Sort out the register dump */

    _swix(OS_ChangeEnvironment,
          _INR(0,3) | _OUT(3),

          7, /* Call back */
          0,
          0,
          0,

          &regdump); /* Where the C library put the registers */

    _swix(OS_ChangeEnvironment,
          _INR(0,3) | _OUT(1),

          13, /* Exception registers */
          0,
          0,
          0,

          &os_regdump); /* Where *ShowRegs gets them from */

    /* Copy the C register dump into the OS space */

    if (regdump && os_regdump) memcpy(os_regdump, regdump, 4 * 16);

    /* Store a more sensible error in the error block 'erb' where possible. */

    #ifdef WRITE_DUMP_FILE_ON_ERROR

    {
      FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

      if (debug)
      {
        fprintf(debug,
                "Error '%s', code 0x%08x\n",
                (erb.errmess ? erb.errmess : "NULL"),
                erb.errnum);

        fprintf(debug,
                "regdump, os_regdump: %p, %p\n",
                regdump,
                os_regdump);

        fclose(debug);
      }
    }

    #endif

    switch (erb.errnum & 0x00ffffff)
    {
      case 0x000000: tok = "EZeros0"; break;
      case 0x000001: tok = "EZeros1"; break;
      case 0x000002: tok = "EZeros2"; break;
      case 0x000003: tok = "EZeros3"; break;
      case 0x000005: tok = "EZeros5"; break;
    }

    #ifdef WRITE_DUMP_FILE_ON_ERROR

    {
      FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

      if (debug)
      {
        if (!tok) fprintf(debug, "No error message found or no lookup done!\n");
        fclose(debug);
      }
    }

    #endif

    if (tok)
    {
      char * error;

      #ifdef WRITE_DUMP_FILE_ON_ERROR

      {
        FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

        if (debug)
        {
          fprintf(debug, "Token '%s'\n",tok);
          fclose(debug);
        }
      }

      #endif

      /* If we know the PC, put this in the message */

      if (!regdump) sprintf(pc, "&deaddead");
      else          sprintf(pc, "&%08X", os_regdump[15] &~ 0xfc000003);

      error = lookup_token(tok, 1, pc);

      #ifdef WRITE_DUMP_FILE_ON_ERROR

      {
        FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

        if (debug)
        {
          fprintf(debug, "String '%s'\n",error);
          fclose(debug);
        }
      }

      #endif

      /* If the message token wasn't found, use the OS error, */
      /* otherwise copy the new one into the error block.     */

      if (strcmp(error, "!")) StrNCpy0(erb.errmess, error);
    }

    /* Need to reinstall the signal handlers since the run-time */
    /* system will have removed them 'For Your Safety And       */
    /* Convenience'. Don't forget to keep this list up to date  */
    /* with the code near the top of the function.              */

    signal(SIGOSERROR, catch_errors); /* OS error            */
    signal(SIGILL,     catch_errors); /* Illegal instruction */
    signal(SIGSEGV,    catch_errors); /* Segment violation   */
    signal(SIGSTAK,    catch_errors); /* Stack overflow      */
    signal(SIGFPE,     catch_errors); /* FPE error           */

    erb.errnum = Errors_Custom_Normal; /* For 'Quit' as well as 'Continue' */

    errors_cont(&erb);
  }

  while (!quit)
  {
    /* What time is it? (For Wimp_PollIdle) */

    _swix(OS_ReadMonotonicTime,
          _OUT(0),

          &time);

    ChkError(event_poll_idle(&eventcode,
                             &b,
                             time + Main_TaskPollIdleGap,
                             NULL));
  }

  dprintf(("Rout", "\nmain: Calling exit()\n\n"));

  /* This will call the termination() function in passing */

  exit(EXIT_SUCCESS);
}

/**************************************************************/
/* catch_errors()                                             */
/*                                                            */
/* Catch OS errors and report them with the opportunity to    */
/* continue or quit (done inside main itself).                */
/*                                                            */
/* This is the last function in the file since it plays       */
/* around with stack checking, and you can't read the         */
/* previous state. If this was in the middle of the source    */
/* and someone wrote a #pragma above it, endless confusion    */
/* could otherwise arise as to why the instruction had no     */
/* effect on some of the functions here...                    */
/*                                                            */
/* Parameters: The signal number (ignored).                   */
/**************************************************************/

#pragma no_check_stack

static void catch_errors(int signum)
{
  (void) signum;

  /* Store the error locally */

  StrLastE;

  /* Go back to main to report the error */

  longjmp(env, Main_FromCatchErrors);

  /* Just in case... */

  exit(EXIT_FAILURE);
}
