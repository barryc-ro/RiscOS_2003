/**************************************************************/
/* File:    Watchpoint.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the Watchpoint dialogue box.               */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 10-Jan-2001 (ADH): Created from Breakpoint.c.     */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/gadgets.h>
#include <tboxlibs/ScrollList.h>

#include "BEManager.h"
#include "BEStructs.h"
#include "Errors.h"
#include "FEStructs.h"
#include "Global.h"
#include "Limit.h"
#include "List.h"
#include "Projects.h"
#include "Utils.h"

#include "Watchpoint.h"

/* Local variables */

static ObjectId window_for_focus = NULL_ObjectId;
static bool     nulls_claimed    = false;

/* Local functions */

static int               watchpoint_gain_focus       (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
static int               watchpoint_parent_hidden    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

static _kernel_oserror * watchpoint_set_for_section  (ObjectId o, const debugger * d);

/**************************************************************/
/* watchpoint_set_up()                                        */
/*                                                            */
/* Set up the Watchpoint dialogue box using a list_add_for    */
/* structure.                                                 */
/*                                                            */
/* Parameters: Object ID of the dialogue box;                 */
/*                                                            */
/*             Pointer to the list_add_for structure.         */
/**************************************************************/

_kernel_oserror * watchpoint_set_up(ObjectId o, list_add_for * attached)
{
  _kernel_oserror * e;
  const debugger  * d;
  debugger          temp;
  int               state;
  ComponentId       focus = NULL_ComponentId;
  watchpoint      * w     = NULL;


  dprintf(("WtcP", "watchpointset_up: Called with ID &%08X for &%08X\n", (int) o, (int) attached));

  if (attached == NULL)
  {
    return errors_frontend_error(fee_invalid_parameters,
                                 "watchpoint_set_up");
  }

  memset(&temp, 0, sizeof(temp));

  RetError(bemanager_get_debugger(attached->debugger_handle, &d));

  /* If "Add" isn't allowed, there's no way to set any break points at all, */
  /* so no point in allowing this dialogue to even view them - what's it    */
  /* going to view...?                                                      */

  if (d->ab.watchpoints.set == NULL)
  {
    errors_ret(errors_backend_error(attached->debugger_handle,
                                    bee_operation_not_supported));

    /* Ensure everything will be greyed out... */

    d = &temp;
  }

  /* First thing - grey/ungrey everything */

  state = d->ab.watchpoints.set     != NULL &&
          (
            d->ab.watchpoints.read  != 0 ||
            d->ab.watchpoints.write != 0
          )

          ?

          0 : 1;

  /* If we can't set anything, grey out the "Watch" region and "Add" / "OK" */

  RetError(set_gadget_state(o,
                            Watchpoint_CID_Variable,
                            state));

  RetError(set_gadget_state(o,
                            Watchpoint_CID_Location,
                            state));

  RetError(set_gadget_state(o,
                            Watchpoint_CID_WatchWriteable,
                            state));

  RetError(set_gadget_state(o,
                            Watchpoint_CID_Add,
                            state));

  /* If state is 0, the watch writeable is ungreyed - make sure it's given focus later */

  if (state == 0) focus = Watchpoint_CID_WatchWriteable;

  /* If we can, pre-select the read or write options */

  if (d->ab.watchpoints.read  != 0) RetError(optionbutton_set_state(0, o, Watchpoint_CID_ReadOf,  1));
  if (d->ab.watchpoints.write != 0) RetError(optionbutton_set_state(0, o, Watchpoint_CID_WriteOf, 1));

  /* "For" region items. We have to do this twice; once here for initial */
  /* consistency, once later after filling in with any initial text. The */
  /* initial text routines below validate the text on the basis of what  */
  /* things are or are not already greyed out in the window. This means  */
  /* we don't have to worry about the complex interactions between the   */
  /* back-end capabilities and front-end selections in anywhere other    */
  /* than this one place.                                                */

  RetError(watchpoint_set_for_section(o, d));

  /* Other action buttons */

//  state = d->ab.watchpoints.clear != NULL ? 0 : 1;
//
//  RetError(set_gadget_state(o,
//                            Watchpoint_CID_RemoveAll,
//                            state));
//
//  RetError(set_gadget_state(o,
//                            Watchpoint_CID_Remove,
//                            state));

  set_gadget_state(o, Watchpoint_CID_RemoveAll, 1);
  set_gadget_state(o, Watchpoint_CID_Remove,    1);

  /* Empty the writeable fields */

  RetError(utils_set_writeable_field(o,
                                     Watchpoint_CID_WatchWriteable,
                                     "",
                                     Limits_Writeable_General));

  RetError(utils_set_writeable_field(o,
                                     Watchpoint_CID_ForWriteable,
                                     "",
                                     Limits_Writeable_General));

  /* Second thing - deal with initial text */

  if (attached->initial_text != NULL && *attached->initial_text != '\0')
  {
    RetError(watchpoint_string_to_struct(attached->initial_text, &w));

    e = optionbutton_set_state(0, o, Watchpoint_CID_ReadOf,   w->read);     if (e != NULL) goto wsu_bail;
    e = optionbutton_set_state(0, o, Watchpoint_CID_WriteOf,  w->write);    if (e != NULL) goto wsu_bail;
    e = optionbutton_set_state(0, o, Watchpoint_CID_Anything, w->anything); if (e != NULL) goto wsu_bail;

    /* Set the name and value as appropriate */

    if (
         w->name  == NULL ||
         *w->name == '\0' ||
         (
           w->anything == false &&
           (
             w->value  == NULL ||
             *w->value == '\0'
           )
         )
       )
    {
      return errors_frontend_error(fee_invalid_parameters,
                                   "watchpoint_set_up");
    }

    e = writablefield_set_value(0,
                                o,
                                Watchpoint_CID_WatchWriteable,
                                w->name);

    if (e != NULL) goto wsu_bail;

    e = writablefield_set_value(0,
                                o,
                                Watchpoint_CID_ForWriteable,
                                w->value != NULL ? w->value : "");

    if (e != NULL) goto wsu_bail;

    /* Discard the temporary structure */

    watchpoint_free(w);

    /* Third thing, ensure any stuff in the "For" section really is greyed */
    /* or ungreyed as appropriate after any actions above as a catch-all.  */
    /* Should always be OK unless there's initial text (because this same  */
    /* function has already been called).                                  */

    RetError(watchpoint_set_for_section(o, d));

    /* Final sanity check - is whatever we selected actually greyed out? */

    {
      bool         error = false;
      unsigned int flags;

      if (w->read != 0)
      {
        RetError(gadget_get_flags(0, o, Watchpoint_CID_ReadOf, &flags));
        if (flags & Gadget_Faded) error = true;
      }

      if (error == false && w->write != 0)
      {
        RetError(gadget_get_flags(0, o, Watchpoint_CID_WriteOf, &flags));
        if (flags & Gadget_Faded) error = true;
      }

      if (error == false && w->anything != 0)
      {
        RetError(gadget_get_flags(0, o, Watchpoint_CID_Anything, &flags));
        if (flags & Gadget_Faded) error = true;
      }

      if (error) return errors_frontend_error(fee_invalid_parameters,
                                              "watchpoint_set_up");
    }
  }

  /* Need to give input focus? We can't just set it here, as the window */
  /* isn't actually open yet. Giving a default input focus will lead to */
  /* a "can't place focus anywhere" Toolbox error if all the writeables */
  /* are greyed out, which is why it needs to be set manually in the    */
  /* first place.                                                       */

  if (focus != NULL_ComponentId && nulls_claimed == false)
  {
    window_for_focus = o;
    nulls_claimed    = true;

    register_null_claimant(Wimp_ENull,
                           watchpoint_gain_focus,
                           (void *) focus);
  }

  /* Done */

  dprintf(("WtcP", "watchpointset_up: Successful\n"));

  return NULL;

wsu_bail:

  dprintf(("WtcP", "watchpointset_up: Internal error, bailing\n"));

  watchpoint_free(w);
  return e;
}

/**************************************************************/
/* watchpoint_gain_focus()                                    */
/*                                                            */
/* If you set up a window to gain focus in a gadget but all   */
/* the writeable fields linked to and including that gadget   */
/* are greyed, the Toolbox actually raises an error. If you   */
/* try and set input focus manually in a ToBeShown handler    */
/* the Toolbox raises another error, because the dialogue box */
/* isn't open at that point. Hence this null event handler.   */
/*                                                            */
/* Ick.                                                       */
/*                                                            */
/* Parameters are as standard for a Wimp event handler. The   */
/* 'handle' field should hold the component ID to put the     */
/* focus in, cast to void *, and the "window_for_focus"       */
/* static (see top of source file) should be set to the       */
/* relevant ID - this is OK, since you can only have focus in */
/* one window at a time.                                      */
/**************************************************************/

static int watchpoint_gain_focus(int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle)
{
  /* No error reporting in case the dialogue box has managed to hide itself by now */

  gadget_set_focus(0,
                   window_for_focus,
                   (ComponentId) handle);

  window_for_focus = NULL_ObjectId;
  nulls_claimed    = false;

  deregister_null_claimant(Wimp_ENull,
                           watchpoint_gain_focus,
                           handle);

  return 0;
}

/**************************************************************/
/* watchpoint_to_be_shown()                                   */
/*                                                            */
/* When the dialogue box is created it should have a          */
/* list_add_for structure attached as a client handle. This   */
/* contains initial text for the List add dialogue box's      */
/* writeable field.                                           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int watchpoint_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("WtcP", "watchpoint_to_be_shown: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("WtcP", "watchpoint_to_be_shown: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    ChkError(watchpoint_set_up(idb->self_id, attached));

    /* Watch the parent... */

    ChkError(event_register_toolbox_handler(attached->parent,
                                            attached->parent_hide_event,
                                            watchpoint_parent_hidden,
                                            (void *) idb->self_id));
  }

  dprintf(("WtcP", "watchpoint_to_be_shown: Successful\n"));

  return 0;
}

/**************************************************************/
/* watchpoint_hidden()                                        */
/*                                                            */
/* Called when the List add dialogue box is hidden.           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int watchpoint_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("WtcP", "watchpoint_hidden: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("WtcP", "watchpoint_hidden: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    /* Remove our watch on the parent */

    ChkError(event_deregister_toolbox_handler(attached->parent,
                                              attached->parent_hide_event,
                                              watchpoint_parent_hidden,
                                              (void *) idb->self_id));

    /* Free the attached list_add_for structure */

    free(attached);
    ChkError(toolbox_set_client_handle(0, idb->self_id, NULL));
  }

  dprintf(("WtcP", "watchpoint_hidden: Self-destructing\n"));

  ChkError(toolbox_delete_object(0, idb->self_id));

  dprintf(("WtcP", "watchpoint_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* watchpoint_parent_hidden()                                 */
/*                                                            */
/* Called when the List add dialogue box's parent is hidden.  */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* The 'handle' parameter should hold the object ID of the    */
/* List add dialogue box itself, since this event handler is  */
/* called on the parent, not on the List add dialogue box.    */
/**************************************************************/

static int watchpoint_parent_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  ObjectId self = (ObjectId) handle;

  dprintf(("WtcP", "watchpoint_parent_hidden: Called with self_id = &%08X\n", (unsigned int) self));

  /* Hide ourselves; the hidden handler does the rest */

  ChkError(toolbox_hide_object(0, self));

  dprintf(("WtcP", "watchpoint_parent_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* watchpoint_add()                                           */
/*                                                            */
/* Called when Add is activated for the List add dialogue     */
/* box.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int watchpoint_add(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  _kernel_oserror * e;

  list_add_for    * attached;
  ComponentId       selected;

  char              name  [Limits_Writeable_General];
  char              value [Limits_Writeable_General];
  int               read;
  int               write;
  int               anything;

  char            * listitem = NULL;

  dprintf(("WtcP", "watchpoint_add: Called\n"));

  /* Need to know what radio button is selected, whatever happens */

  ChkError(radiobutton_get_state(0,
                                 idb->self_id,
                                 Watchpoint_CID_Variable, /* Not interested in this specific one... */
                                 NULL,
                                 &selected)); /* ...That's what we really want */

  /* Read the option buttons */

  ChkError(optionbutton_get_state(0,
                                  idb->self_id,
                                  Watchpoint_CID_ReadOf,
                                  &read));

  ChkError(optionbutton_get_state(0,
                                  idb->self_id,
                                  Watchpoint_CID_WriteOf,
                                  &write));

  ChkError(optionbutton_get_state(0,
                                  idb->self_id,
                                  Watchpoint_CID_Anything,
                                  &anything));

  /* If both "write" and "read" are zero, consider this a Cancel operation. */

  if (read != 0 || write != 0)
  {
    watchpoint w;

    memset(&w, 0, sizeof(w));

    w.read     = read;
    w.write    = write;
    w.anything = anything;

    if (selected == Watchpoint_CID_Variable) w.variable = true;

    /* Must have a name string. */

    ChkError(writablefield_get_value(0,
                                     idb->self_id,
                                     Watchpoint_CID_WatchWriteable,
                                     name,
                                     sizeof(name),
                                     NULL));
    if (*name == '\0')
    {
      ChkError(errors_frontend_message("WtcPt1", 0));
    }
    else w.name = name;

    /* If "anything" is zero, must have a "for" string. */

    if (anything == 0)
    {
      ChkError(writablefield_get_value(0,
                                       idb->self_id,
                                       Watchpoint_CID_ForWriteable,
                                       value,
                                       sizeof(value),
                                       NULL));
      if (*value == '\0')
      {
        ChkError(errors_frontend_message("WtcPt2", 0));
      }
      else w.value = value;
    }

    ChkError(toolbox_get_client_handle(0,
                                       idb->self_id,
                                       (void *) (&attached)));

    dprintf(("WtcP", "watchpoint_add: Attached list_add_for is at &%08X\n", (unsigned int) attached));

    /* Assemble the item string. Must not use ChkError until freed */
    /* or the item will be leaked.                                 */

    ChkError(watchpoint_struct_to_string(&w, &listitem));

    dprintf(("WtcP", "watchpoint_add: Composite text is '%s'\n", listitem));

    if (attached && attached->parent != NULL_ObjectId)
    {
      if (attached->list_item >= 0)
      {
        /* We're open for a specific item in the list, so change its text */
        /* and update the attached list_add_for data                      */

        e = list_modify_item(attached->parent, attached->list_item, listitem);
        if (e != NULL) goto wa_bail;

        /* The dialogue box may not be closing (e.g. Adjust-click) so make */
        /* sure the initial text record is updated, otherwise a subsequent */
        /* Adjust-click on Cancel would behave strangely.                  */

        StrNCpy0(attached->initial_text, listitem);
      }
      else
      {
        /* We're open for no specific item, so add to the top */

        e = list_add_item(attached->parent, listitem);
        if (e != NULL) goto wa_bail;
      }
    }

    /* OK, ChkError's back in again after this */

    free(listitem);
  }

  /* Should we close the window? (Keyboard shortcut or SELECT pressed) */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    dprintf(("WtcP", "watchpoint_add: Closing window\n"));

    utils_restore_focus(idb->self_id);
    ChkError(toolbox_hide_object(0, idb->self_id));
  }

  dprintf(("WtcP", "watchpoint_add: Successful\n"));

  return 0;

wa_bail:

  dprintf(("WtcP", "watchpoint_add: Internal error, bailing\n"));

  free(listitem);
  ChkError(e);

  return 0;
}

/**************************************************************/
/* watchpoint_cancel()                                        */
/*                                                            */
/* Called when Cancel is activated for the List add dialogue  */
/* box.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int watchpoint_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("WtcP", "watchpoint_cancel: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("WtcP", "watchpoint_cancel: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  /* Should we close the window? (Keyboard shortcut or SELECT pressed) */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    dprintf(("WtcP", "watchpoint_cancel: Closing window\n"));

    utils_restore_focus(idb->self_id);
    ChkError(toolbox_hide_object(0, idb->self_id));
  }
  else
  {
    /* Not closing... Restore original dialogue box contents */

    dprintf(("WtcP", "watchpoint_cancel: Window is not closing, restoring original contents\n"));

    ChkError(watchpoint_set_up(idb->self_id, attached));
  }

  /* Finished */

  dprintf(("WtcP", "watchpoint_cancel: Successful\n"));

  return 0;
}

/**************************************************************/
/* watchpoint_option()                                        */
/*                                                            */
/* Called if a "For" section option button in the Watchpoint  */
/* dialogue box changes state.                                */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int watchpoint_option(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("WtcP", "watchpoint_anything: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("WtcP", "watchpoint_anything: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    const debugger * d;

    ChkError(bemanager_get_debugger(attached->debugger_handle, &d));
    ChkError(watchpoint_set_for_section(idb->self_id, d));
  }

  /* Finished */

  dprintf(("WtcP", "watchpoint_anything: Successful\n"));

  return 0;
}

/**************************************************************/
/* watchpoint_set_for_section()                               */
/*                                                            */
/* Set up the "For" section; called whenever options in this  */
/* area change, to grey/ungrey stuff as required.             */
/*                                                            */
/* Parameters: Object ID of the Watchpoint dialogue box;      */
/*                                                            */
/*             Pointer to the debugger struct associated with */
/*             it.                                            */
/**************************************************************/

static _kernel_oserror * watchpoint_set_for_section(ObjectId o, const debugger * d)
{
  int          read, write, anything;
  unsigned int combined;

  dprintf(("WtcP", "watchpoint_set_for_section: Called for object &%08X, debugger &%08X\n", (int) o, (int) d));

  RetError(optionbutton_get_state(0,
                                  o,
                                  Watchpoint_CID_ReadOf,
                                  &read));

  RetError(optionbutton_get_state(0,
                                  o,
                                  Watchpoint_CID_WriteOf,
                                  &write));

  RetError(optionbutton_get_state(0,
                                  o,
                                  Watchpoint_CID_Anything,
                                  &anything));

  /* What are the combined back-end cabilities for the given set of */
  /* read/write settings?                                           */

  if (read == 0 && write == 0) combined = 0;
  else                         combined = 0xffffffff;

  if (read  != 0) combined &= d->ab.watchpoints.read;
  if (write != 0) combined &= d->ab.watchpoints.write;

  dprintf(("WtcP", "watchpoint_set_for_section: Read = %d, write = %d, combined flags = &%08X\n", read, write, combined));

  /* Grey/ungrey stuff as required */

  if ((combined & Cap_Watchpoint_Anything) == 0)
  {
    RetError(optionbutton_set_state(0,
                                    o,
                                    Watchpoint_CID_Anything,
                                    0));

    RetError(set_gadget_state(o,
                              Watchpoint_CID_Anything,
                              1));
  }
  else
  {
    RetError(set_gadget_state(o,
                              Watchpoint_CID_Anything,
                              0));
  }

  if (anything != 0 || (combined & Cap_Watchpoint_Specific) == 0)
  {
    /* If we're greying out the writeable, make sure "Anything" is selected - */
    /* if possible.                                                           */

    if (anything == 0 && (combined & Cap_Watchpoint_Anything) != 0)
    {
      RetError(optionbutton_set_state(0,
                                      o,
                                      Watchpoint_CID_Anything,
                                      1));
    }

    RetError(set_gadget_state(o,
                              Watchpoint_CID_ForWriteable,
                              1));
  }
  else
  {
    RetError(set_gadget_state(o,
                              Watchpoint_CID_ForWriteable,
                              0));
  }

  dprintf(("WtcP", "watchpoint_set_for_section: Successful\n"));

  return NULL;
}

/**************************************************************/
/* watchpoint_free()                                          */
/*                                                            */
/* Free the contents of a given watchpoint structure and the  */
/* structure itself. Will deal with next and previous         */
/* pointers within itself, but callers must ensure that if    */
/* the item given is pointed to by a wider list pointer (e.g. */
/* a project structure), that structure is pointed to another */
/* item first.                                                */
/*                                                            */
/* Parameters: Pointer to the watchpoint structure to free.   */
/*             May be NULL, in which case the function does   */
/*             nothing.                                       */
/**************************************************************/

void watchpoint_free(watchpoint * w)
{
  if (w == NULL) return;

  free(w->name);
  free(w->value);

  if (w->prev != NULL) w->prev->next = w->next;
  if (w->next != NULL) w->next->prev = w->prev;

  free(w);
}

/**************************************************************/
/* watchpoint_struct_to_string()                              */
/*                                                            */
/* Convert the contents of a given watchpoint structure into  */
/* a string for use in dialogue boxes etc.                    */
/*                                                            */
/* String is of the form "<type> (<flags>): <name>, <value>". */
/* E.g. "Variable (RW): my_variable, 124" looks for a read or */
/* write of value 124 from variable "my_variable". Actual     */
/* content depends on the application's Messages file, so it  */
/* is unwise to store these strings in files as they wouldn't */
/* load back properly should the messages have changed -      */
/* unless the file contained the messages to use as well...   */
/*                                                            */
/* Parameters: Pointer to the watchpoint structure to read;   */
/*                                                            */
/*             Pointer to a char *, updated on exit with a    */
/*             pointer to the constructed string. This is     */
/*             allocated by malloc; the caller is responsible */
/*             for freeing it when no longer needed.          */
/**************************************************************/

_kernel_oserror * watchpoint_struct_to_string(const watchpoint * w, char ** name)
{
  unsigned int   count;
  char         * str;
  char           ob, rb, wb, ab, cb;

  dprintf(("WtcP", "watchpoint_struct_to_string: Called for &%08X\n", (unsigned int) w));

  if (
       (
         w       == NULL ||
         name    == NULL ||
         w->name == NULL
       )
       ||
       (
         w->anything == false &&
         (
           w->value == NULL ||
           strchr(w->name, ',') != NULL
         )
       )
     )
     return errors_frontend_error(fee_invalid_parameters,
                                  "watchpoint_struct_to_string");

  /* The lookup_token calls update the global 'tokens' buffer contents. */

  lookup_token("WPFlags:(RWA)",0,0);

  if (strlen(tokens) != 5) return errors_frontend_error(fee_invalid_parameters,
                                                        "watchpoint_struct_to_string WPFlags");

  ob = tokens[0];
  rb = tokens[1];
  wb = tokens[2];
  ab = tokens[3];
  cb = tokens[4];

  if (w->variable == false) lookup_token("WPLocation:Address",0,0);
  else                      lookup_token("WPVariable:Variable",0,0);

  /* Ready to calculate the length now. 'tokens' was filled in from the */
  /* last lookup_token calls above.                                     */

  count = 1                     + /* NUL at end            */
          strlen(tokens)        + /* <type>                */
          1                     + /* Space                 */
          1                     + /* 'ob' (Open byte)      */
          (w->read     ? 1 : 0) + /* 'rb' if for read      */
          (w->write    ? 1 : 0) + /* 'wb' if for write     */
          (w->anything ? 1 : 0) + /* 'ab' if for any value */
          1                     + /* 'cb' (Close byte)     */
          2                     + /* ": "                  */
          strlen(w->name)       +
          (w->anything == false ? 2 + strlen(w->value) : 0); /* ", " if a value is needed, plus the value string itself */

  /* Allocate space */

  str = malloc(count);
  if (str == NULL) return errors_frontend_error(fee_out_of_memory,
                                                "watchpoint_struct_to_string");

  /* Build it. First, the variable/location indicator */

  strcpy(str, tokens);
  count = strlen(str);
  str[count++] = ' ';

  /* Flags details */

  str[count++] = ob;

  if (w->read)     str[count++] = rb;
  if (w->write)    str[count++] = wb;
  if (w->anything) str[count++] = ab;

  str[count++] = cb;

  /* Separator for the name and possible value */

  str[count++] = ':';
  str[count++] = ' ';

  /* Name */

  strcpy(str + count, w->name);

  /* Value if appropriate */

  if (w->anything == false)
  {
    strcat(str + count, ", ");     /* Adding 'count' just means strcat has less to chew through */
    strcat(str + count, w->value); /* to find the NUL each time. Should give a tiny speedup.    */
  }

  /* Return the string */

  *name = str;

  dprintf(("WtcP", "watchpoint_struct_to_string: Successful\n"));

  return NULL;
}

/**************************************************************/
/* watchpoint_string_to_struct()                              */
/*                                                            */
/* Convert the contents of a given string from a dialogue     */
/* box etc. into a watchpoint structure.                      */
/*                                                            */
/* Parameters: Pointer to the string to parse;                */
/*                                                            */
/*             Pointer to a pointer to a watchpoint structure */
/*             updated with a pointer to a filled in item.    */
/*             The caller is responsible for freeing it with  */
/*             watchpoint_free.                               */
/**************************************************************/

_kernel_oserror * watchpoint_string_to_struct(const char * name, watchpoint ** w)
{
  char           ob, rb, wb, ab, cb;
  unsigned int   len;
  watchpoint   * l = NULL;

  dprintf(("WtcP", "watchpoint_string_to_struct: Called for '%s'\n", name != NULL ? name : "<NULL>"));

  if (name == NULL || w == NULL) goto wsts_params;

  /* Allocate the watchpoint structure */

  l = calloc(1, sizeof(watchpoint));

  if (l == NULL) return errors_frontend_error(fee_out_of_memory,
                                              "watchpoint_string_to_struct");

  /* The lookup_token calls update the global 'tokens' buffer contents. */

  lookup_token("WPFlags:(RWA)",0,0);

  if (strlen(tokens) != 5) return errors_frontend_error(fee_invalid_parameters,
                                                        "watchpoint_string_to_struct WPFlags");

  ob = tokens[0];
  rb = tokens[1];
  wb = tokens[2];
  ab = tokens[3];
  cb = tokens[4];

  lookup_token("WPLocation:Address",0,0);
  len = strlen(tokens);

  /* Read the item type */

  if (!strncmp(name, tokens, len))
  {
    l->variable = false;
    name += len;
  }
  else
  {
    lookup_token("WPVariable:Variable",0,0);
    len = strlen(tokens);

    if (!strncmp(name, tokens, len))
    {
      l->variable = true;
      name += len;
    }
    else goto wsts_params;
  }

  /* Read the flags; pre-increment used to take advantage of */
  /* evaluation order of 'or' items in conditionals          */

  if (
       *name     != ' ' ||
       *(++name) != ob  ||
       *(++name) == '\0'
     )
     goto wsts_params;

  if (*name == rb) l->read     = true, name++;
  if (*name == wb) l->write    = true, name++;
  if (*name == ab) l->anything = true, name++;

  if (
       *name     != cb  ||
       *(++name) != ':' ||
       *(++name) != ' ' ||
       *(++name) == '\0'
     )
     goto wsts_params;

  /* If the flags said 'anything' the rest is all name, else */
  /* part of it is name and part is value.                   */

  if (l->anything)
  {
    l->name = malloc(strlen(name) + 1);

    if (l->name == NULL)
    {
      free(l);
      return errors_frontend_error(fee_out_of_memory,
                                   "watchpoint_string_to_struct");
    }

    strcpy(l->name, name);
  }
  else
  {
    char * str = strchr(name, ',');

    if (str == NULL || *(str + 1) != ' ' || *(str + 2) == '\0') goto wsts_params;

    len = strlen(name) - strlen(str);
    l->name = malloc(len + 1);

    if (l->name == NULL)
    {
      free(l);
      return errors_frontend_error(fee_out_of_memory,
                                   "watchpoint_string_to_struct");
    }

    strncpy(l->name, name, len);
    l->name[len] = '\0';

    len = strlen(str + 2);
    l->value = malloc(len + 1);

    if (l->value == NULL)
    {
      free(l->name);
      free(l);
      return errors_frontend_error(fee_out_of_memory,
                                   "watchpoint_string_to_struct");
    }

    strcpy(l->value, str + 2);
    l->value[len] = '\0';
  }

  /* Return the structure */

  *w = l;

  dprintf(("WtcP", "watchpoint_string_to_struct: Successful\n"));

  return NULL;

wsts_params:

  dprintf(("WtcP", "watchpoint_string_to_struct: Invalid parameters\n"));

  if (l != NULL)
  {
    free(l->name);
    free(l->value);
    free(l);
  }

  return errors_frontend_error(fee_invalid_parameters,
                               "watchpoint_string_to_struct");

}
