/**************************************************************/
/* File:    DynaMenu.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Dynamic (run-time) menu creation.                 */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 17-Nov-2000 (ADH): Created from UpCallMenu.c.     */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/menu.h>

#include "Errors.h"
#include "File.h"
#include "Global.h"
#include "Menus.h"
#include "Utils.h"

#include "DynaMenu.h"

/**************************************************************/
/* dynamenu_build()                                           */
/*                                                            */
/* Dynamically build a menu from a configuration file.        */
/*                                                            */
/* Paramters: Object ID of the menu;                          */
/*                                                            */
/*            Component ID of the first menu entry, used as a */
/*            template for the others;                        */
/*                                                            */
/*            Pointer to a component ID updated on exit with  */
/*            the ID of the last item in the menu;            */
/*                                                            */
/*            Messages file token to look up to get filename  */
/*            of the configuration file to read;              */
/*                                                            */
/*            Optional pointer to a config *, which will be   */
/*            updated to point to the parsed file contents,   */
/*            and may be filled in on entry to avoid having   */
/*            to reparse the file. This allows cacheing. If   */
/*            you give NULL, the parsed details are held and  */
/*            freed automatically within the function.        */
/**************************************************************/

_kernel_oserror * dynamenu_build(ObjectId o, ComponentId template, ComponentId * final, const char * token, config ** rethead)
{
  _kernel_oserror * e;
  config          * head      = NULL;
  menus_entry       entry;
  ComponentId       last;
  bool              separator = false;
  config          * current;
  char              composite[Limits_Menu_Item];

  dprintf(("DyMe", "dynamenu_build: Called for &%08X\n", (int) o));

  if (
       final    == NULL             ||
       token    == NULL             ||
       *token   == '\0'             ||
       o        == NULL_ObjectId    ||
       template == NULL_ComponentId
     )
  {
    dprintf(("DyMe", "dynamenu_build: Invalid parameters\n"));

    return errors_frontend_error(fee_invalid_parameters,
                                 "dynamenu_build");
  }

  /* Read a full description of the template menu item - we always use */
  /* the first one in the menu for this.                               */

  RetError(menus_get_description(o,
                                 template,
                                 &entry));

  /* Read the configuration file if need be */

  _swix(Hourglass_Start,
        _IN(0),

        5);

  if (rethead == NULL || *rethead == NULL)
  {
    dprintf(("DyMe", "dynamenu_build: Reading configuration file...\n"));

    e = file_read_configuration(&head,
                                lookup_token(token, 0),
                                true);

    if (e != NULL)
    {
      _swix(Hourglass_Off, 0);
      return e;
    }
  }
  else head = *rethead;

  /* Get rid of all current entries */

  dprintf(("DyMe", "dynamenu_build: Deleting all existing entries...\n"));

  last = template;

  while (
          menu_remove_entry(0,
                            o,
                            last++)
          == NULL
        );

  /* Build the menu */

  dprintf(("DyMe", "dynamenu_build: Adding new entries...\n"));

  for (current = head; current != NULL; current = current->next)
  {
    /* Valid item? */

    if (
         current->fragment   != NULL &&
         current->parameter  != NULL &&
         *current->fragment  != '\0' &&
         *current->parameter != '\0'
       )
    {
      if (strcmp(current->fragment, "-")) /* "-" and "-" says "add separator" */
      {
        StrNCpy0(composite, current->parameter);

        /* "+3" below for comma, space, and terminating NUL at the end */

        if (strlen(composite) + 3 + strlen(current->fragment) < sizeof(composite))
        {
          strcat(composite, ", ");
          strcat(composite, current->fragment);

          entry.template.text     = composite;
          entry.template.max_text = strlen(composite) + 1;

          dprintf(("DyMe", "dynamenu_build: New entry text '%s'\n", composite));

          /* Does a separator follow? */

          if (separator)
          {
            dprintf(("DyMe", "dynamenu_build: Menu separator follows\n"));

            entry.template.flags |= Menu_Entry_DottedLine;
            separator = false;
          }
          else
          {
            entry.template.flags &= ~Menu_Entry_DottedLine;
          }

          /* Add the entry with the basic template. The file reader code will */
          /* have assembled the entries in reverse order following 'next'     */
          /* pointers, so in this case, we add each new item at the top.      */

          e = menu_add_entry(0,
                             o,
                             -1, /* At the start */
                             (char *) (&entry.template),
                             &*final);

          /* Set the rest of the details */

          if (e == NULL) e = menus_set_description(o, *final, &entry);
          if (e != NULL) goto dynamenu_build_exit;

          dprintf(("DyMe", "dynamenu_build: New component ID is &%08X\n", (int) *final));

          /* Get ready for the next item */

          entry.template.component_id++;
        }
      }
      else separator = true;
    }
  }

  /* Did we not add a thing...? */

  if (*final == NULL_ComponentId)
  {
    e = errors_frontend_error(fee_invalid_parameters,
                              "dynamenu_build");
  }
  else e = NULL;

dynamenu_build_exit:

  #ifdef TRACE
    if (e != NULL) dprintf(("DyMe", "dynamenu_build: Error, freeing &%08X\n", (int) head));
  #endif

  _swix(Hourglass_Off, 0);

  if (
       rethead == NULL ||
       (
         e        != NULL &&
         *rethead == NULL
       )
     )
  {
    file_free_configuration(head);
  }
  else if (
            rethead  != NULL &&
            *rethead == NULL
          )
  {
    *rethead = head;
  }

  #ifdef TRACE
    if (e != NULL) dprintf(("DyMe", "dynamenu_build: Returning error '%s'\n", e->errmess));
    else           dprintf(("DyMe", "dynamenu_build: Succssful\n"));
  #endif

  return e;
}
