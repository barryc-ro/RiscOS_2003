/**************************************************************/
/* File:    ListAdd.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the List add (edit item) dialogue box.     */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 26-Oct-2000 (ADH): Created from List.c.           */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/gadgets.h>
#include <tboxlibs/ScrollList.h>

#include "Errors.h"
#include "Limit.h"
#include "List.h"
#include "Global.h"
#include "Utils.h"

#include "ListAdd.h"

/* Local functions */

static int listadd_parent_hidden (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

/**************************************************************/
/* listadd_to_be_shown()                                      */
/*                                                            */
/* When the dialogue box is created it should have a          */
/* list_add_for structure attached as a client handle. This   */
/* contains initial text for the List add dialogue box's      */
/* writeable field.                                           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int listadd_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("LiAd", "listadd_to_be_shown: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("LiAd", "listadd_to_be_shown: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    ChkError(writablefield_set_value(0,
                                     idb->self_id,
                                     ListAdd_CID_Writeable,
                                     attached->initial_text));

    /* Watch the parent... */

    ChkError(event_register_toolbox_handler(attached->parent,
                                            attached->parent_hide_event,
                                            listadd_parent_hidden,
                                            (void *) idb->self_id));
  }

  dprintf(("LiAd", "listadd_to_be_shown: Successful\n"));

  return 0;
}

/**************************************************************/
/* listadd_hidden()                                           */
/*                                                            */
/* Called when the List add dialogue box is hidden.           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int listadd_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("LiAd", "listadd_hidden: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("LiAd", "listadd_hidden: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    /* Remove our watch on the parent */

    ChkError(event_deregister_toolbox_handler(attached->parent,
                                              attached->parent_hide_event,
                                              listadd_parent_hidden,
                                              (void *) idb->self_id));

    /* Free the attached list_add_for structure */

    free(attached);
    ChkError(toolbox_set_client_handle(0, idb->self_id, NULL));
  }

  dprintf(("LiAd", "listadd_hidden: Self-destructing\n"));

  ChkError(toolbox_delete_object(0, idb->self_id));

  dprintf(("LiAd", "listadd_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* listadd_parent_hidden()                                    */
/*                                                            */
/* Called when the List add dialogue box's parent is hidden.  */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* The 'handle' parameter should hold the object ID of the    */
/* List add dialogue box itself, since this event handler is  */
/* called on the parent, not on the List add dialogue box.    */
/**************************************************************/

static int listadd_parent_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  ObjectId self = (ObjectId) handle;

  dprintf(("LiAd", "listadd_parent_hidden: Called with self_id = &%08X\n", (unsigned int) self));

  /* Hide ourselves; the hidden handler does the rest */

  ChkError(toolbox_hide_object(0, self));

  dprintf(("LiAd", "listadd_parent_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* listadd_add()                                              */
/*                                                            */
/* Called when Add is activated for the List add dialogue     */
/* box.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int listadd_add(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;
  char           field[Limits_List_Item];

  dprintf(("LiAd", "listadd_add: Called\n"));

  /* Read the writeable field's text */

  ChkError(writablefield_get_value(0,
                                   idb->self_id,
                                   ListAdd_CID_Writeable,
                                   field,
                                   sizeof(field),
                                   NULL));

  dprintf(("LiAd", "listadd_add: Writeable field text is '%s'\n", field));

  /* If there is any text present... */

  if (*field)
  {
    ChkError(toolbox_get_client_handle(0,
                                       idb->self_id,
                                       (void *) (&attached)));

    dprintf(("LiAd", "listadd_add: Attached list_add_for is at &%08X\n", (unsigned int) attached));

    if (attached && attached->parent != NULL_ObjectId)
    {
      if (attached->list_item >= 0)
      {
        /* We're open for a specific item in the list, so change its text */
        /* and update the attached list_add_for data                      */

        ChkError(list_modify_item(attached->parent, attached->list_item, field));

        /* The dialogue box may not be closing (e.g. Adjust-click) so make */
        /* sure the initial text record is updated, otherwise a subsequent */
        /* Adjust-click on Cancel would behave strangely.                  */

        StrNCpy0(attached->initial_text, field);
      }
      else
      {
        /* We're open for no specific item, so add to the top */

        ChkError(list_add_item(attached->parent, field));
      }
    }
  }

  /* Should we close the window? (Keyboard shortcut or SELECT pressed) */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    dprintf(("LiAd", "listadd_add: Closing window\n"));

    utils_restore_focus(idb->self_id);
    ChkError(toolbox_hide_object(0, idb->self_id));
  }

  dprintf(("LiAd", "listadd_add: Successful\n"));

  return 0;
}

/**************************************************************/
/* listadd_cancel()                                           */
/*                                                            */
/* Called when Cancel is activated for the List add dialogue  */
/* box.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int listadd_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("LiAd", "listadd_cancel: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("LiAd", "listadd_cancel: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  /* Should we close the window? (Keyboard shortcut or SELECT pressed) */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    dprintf(("LiAd", "listadd_cancel: Closing window\n"));

    utils_restore_focus(idb->self_id);
    ChkError(toolbox_hide_object(0, idb->self_id));
  }
  else
  {
    char   current[Limits_List_Item];
    char * new = attached ? attached->initial_text : "";

    dprintf(("LiAd", "listadd_cancel: Window is not closing, restoring original text of '%s'\n", new));

    /* Not closing, so reset the writable (for Cancel etc.) */

    ChkError(writablefield_get_value(0,
                                     idb->self_id,
                                     ListAdd_CID_Writeable,
                                     current,
                                     sizeof(current),
                                     NULL));

    if (strcmp(current, new))
    {
      ChkError(writablefield_set_value(0,
                                       idb->self_id,
                                       ListAdd_CID_Writeable,
                                       new));
    }
  }

  /* Finished */

  dprintf(("LiAd", "listadd_cancel: Successful\n"));

  return 0;
}
