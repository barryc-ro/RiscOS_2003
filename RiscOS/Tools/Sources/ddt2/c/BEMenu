/**************************************************************/
/* File:    BEMenu.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the Backend menu.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Oct-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <string.h>

#include <kernel.h>

#include <tboxlibs/event.h>
#include <tboxlibs/toolbox.h>
#include <tboxlibs/menu.h>

#include "BEManager.h"
#include "Errors.h"
#include "Global.h"
#include "Limit.h"
#include "Menus.h"

#include "BEMenu.h"

/**************************************************************/
/* bemenu_to_be_shown()                                       */
/*                                                            */
/* Called when the Backend menu is about to be shown.         */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as a custom handler from Menus.c.                   */
/*                                                            */
/* Assumes:    That at least one back-end is available.       */
/**************************************************************/

int bemenu_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  menus_entry    entry;
  unsigned int   names;
  const char   * named;
  ComponentId    last;

  dprintf(("BEMe", "bemenu_to_be_shown: Called\n"));

  names = 0;
  named = NULL;

  /* Read a full description of the template menu item - we always use */
  /* the first one in the menu for this.                               */

  ChkError(menus_get_description(idb->self_id, BEMenu_CID_First, &entry));

  /* Now empty the menu of all entries */

  dprintf(("BEMe", "bemenu_to_be_shown: Deleting all existing entries...\n"));

  last = BEMenu_CID_First;

  while (
          menu_remove_entry(0,
                            idb->self_id,
                            last++)
          == NULL
        );

  /* Now add the new entries */

  dprintf(("BEMe", "bemenu_to_be_shown: Adding new entries...\n"));

  last = NULL_ComponentId;

  for (;;)
  {
    ChkError(bemanager_enumerate_names(&names, &named));

    if (named != NULL)
    {
      dprintf(("BEMe", "bemenu_to_be_shown: Enumerated item %d, '%s'\n", names, named));

      entry.template.text     = (char *) named;
      entry.template.max_text = strlen(named) + 1;

      /* Create the item from the basic template */

      ChkError(menu_add_entry(0,
                              idb->self_id,
                              last,
                              (char *) (&entry.template),
                              &last));

      /* Set the rest of the entry details up */

      ChkError(menus_set_description(idb->self_id, last, &entry));

      dprintf(("BEMe", "bemenu_to_be_shown: New component ID is &%08X\n", last));

      /* Get ready for the next item */

      entry.template.component_id++;
    }
    else break;
  }

  dprintf(("BEMe", "bemenu_to_be_shown: Successful\n"));

  return 1;
}

/**************************************************************/
/* bemenu_selection()                                         */
/*                                                            */
/* Called when a selection is made in the Backend menu.       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* Called as a custom handler from Menus.c.                   */
/**************************************************************/

int bemenu_selection(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  dprintf(("BEMe", "bemenu_selection: Called\n"));


  dprintf(("BEMe", "bemenu_selection: Successful\n"));

  return 1;
}
