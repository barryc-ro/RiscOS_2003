/**************************************************************/
/* File:    Breakpoint.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the Breakpoint dialogue box and provide    */
/*          breakpoint structure management functions.        */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 14-Nov-2000 (ADH): Created from ListAdd.c.        */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/gadgets.h>
#include <tboxlibs/ScrollList.h>

#include "BEManager.h"
#include "BEStructs.h"
#include "Errors.h"
#include "FEStructs.h"
#include "Limit.h"
#include "List.h"
#include "Global.h"
#include "Utils.h"

#include "Breakpoint.h"

/* Local variables */

static ObjectId window_for_focus = NULL_ObjectId;
static bool     nulls_claimed    = false;

/* The following array contents must match the order of items in the */
/* breakpoint_type enumeration defined in FEStructs.h, as code below */
/* uses the type as an index into the array.                         */

static const char * idents[] = {
                                 "BPFunction:Function",
                                 "BPAddress:Address",
                                 "BPSWI:SWI",
                                 "BPLine:Line",
                                 "BPWimpEvent:Wimp event",
                                 "BPServiceCall:Service call",
                                 "BPUpCall:UpCall"
                               };

/* Local functions */

static int               breakpoint_gain_focus       (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);
static int               breakpoint_parent_hidden    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

static _kernel_oserror * breakpoint_grey_from_radios (ObjectId self, ComponentId selected);

/**************************************************************/
/* breakpoint_set_up()                                        */
/*                                                            */
/* Set up the Breakpoint dialogue box using a list_add_for    */
/* structure.                                                 */
/*                                                            */
/* Parameters: Object ID of the dialogue box;                 */
/*                                                            */
/*             Pointer to the list_add_for structure.         */
/**************************************************************/

_kernel_oserror * breakpoint_set_up(ObjectId o, list_add_for * attached)
{
  const debugger * d;
  debugger         temp;
  ComponentId      def   = NULL_ComponentId;
  ComponentId      focus = NULL_ComponentId;
  int              state;

  dprintf(("BrkP", "breakpoint_set_up: Called with ID &%08X for &%08X\n", (int) o, (int) attached));

  if (attached == NULL)
  {
    return errors_frontend_error(fee_invalid_parameters,
                                 "breakpoint_set_up");
  }

  memset(&temp, 0, sizeof(temp));

  RetError(bemanager_get_debugger(attached->debugger_handle, &d));

  /* If "Add" isn't allowed, there's no way to set any break points at all, */
  /* so no point in allowing this dialogue to even view them - what's it    */
  /* going to view...?                                                      */

  if (d->ab.breakpoints.set == NULL)
  {
    errors_ret(errors_backend_error(attached->debugger_handle,
                                    bee_operation_not_supported));

    /* Ensure everything will be greyed out... */

    d = &temp;
  }

  /* First thing - grey/ungrey everything */

  state = d->ab.breakpoints.address == true ? 0 : 1;

  /* Function / address / SWI / line radio buttons */

  RetError(set_gadget_state(o,
                            Breakpoint_CID_Function,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_Address,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_Line,
                            state));

  if (state == 0) def = Breakpoint_CID_Function;

  state = d->ab.breakpoints.swi == true ? 0 : 1;

  RetError(set_gadget_state(o,
                            Breakpoint_CID_SWI,
                            state));

  if (state == 0 && def == NULL_ComponentId) def = Breakpoint_CID_SWI;

  /* Main writeable according to above radio button settings */

  RetError(set_gadget_state(o,
                            Breakpoint_CID_MainWriteable,
                            def != NULL_ComponentId ? 0 : 1));

  if (def != NULL_ComponentId) focus = Breakpoint_CID_MainWriteable;

  /* Wimp event */

  state = d->ab.breakpoints.event == true ? 0 : 1;

  RetError(set_gadget_state(o,
                            Breakpoint_CID_WimpEventRadio,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_WimpEventDisplay,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_WimpEventPopUp,
                            state));

  if (state == 0 && def == NULL_ComponentId) def = Breakpoint_CID_WimpEventRadio;

  /* Service call */

  state = d->ab.breakpoints.service == true ? 0 : 1;

  RetError(set_gadget_state(o,
                            Breakpoint_CID_ServiceCallRadio,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_ServiceCallWriteable,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_ServiceCallPopUp,
                            state));

  if (state == 0 && def == NULL_ComponentId)
  {
    def   = Breakpoint_CID_ServiceCallRadio;
    focus = Breakpoint_CID_ServiceCallWriteable;
  }

  /* UpCall */

  state = d->ab.breakpoints.upcall == true ? 0 : 1;

  RetError(set_gadget_state(o,
                            Breakpoint_CID_UpCallRadio,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_UpCallWriteable,
                            state));

  RetError(set_gadget_state(o,
                            Breakpoint_CID_UpCallPopUp,
                            state));

  if (state == 0 && def == NULL_ComponentId)
  {
    def   = Breakpoint_CID_UpCallRadio;
    focus = Breakpoint_CID_UpCallWriteable;
  }

  /* Action buttons */

//  state = d->ab.breakpoints.clear != NULL ? 0 : 1;
//
//  RetError(set_gadget_state(o,
//                            Breakpoint_CID_RemoveAll,
//                            state));
//
//  RetError(set_gadget_state(o,
//                            Breakpoint_CID_Remove,
//                            state));

  set_gadget_state(o, Breakpoint_CID_RemoveAll, 1);
  set_gadget_state(o, Breakpoint_CID_Remove,    1);

  RetError(set_gadget_state(o,
                            Breakpoint_CID_Add,
                            d->ab.breakpoints.set != NULL ? 0 : 1));

  /* Empty the writeable and display fields */

  RetError(utils_set_writeable_field(o,
                                     Breakpoint_CID_MainWriteable,
                                     "",
                                     Limits_Writeable_General));

  RetError(utils_set_display_field  (o,
                                     Breakpoint_CID_WimpEventDisplay,
                                     "",
                                     Limits_Breakpoint_WEDisplay));

  RetError(utils_set_writeable_field(o,
                                     Breakpoint_CID_ServiceCallWriteable,
                                     "",
                                     Limits_Breakpoint_SCWriteable));

  RetError(utils_set_writeable_field(o,
                                     Breakpoint_CID_UpCallWriteable,
                                     "",
                                     Limits_Breakpoint_UCWriteable));

  /* Second thing - deal with initial text */

  if (attached->initial_text == NULL || *attached->initial_text == '\0')
  {
    /* Is there a default radio button to select? */

    if (def == NULL_ComponentId)
    {
      /* Yikes, no. We shouldn't be open! */

      if (d != &temp) return errors_backend_error(attached->debugger_handle,
                                                  bee_operation_not_supported);
    }
    else
    {
      /* Select the default radio button */

      RetError(radiobutton_set_state(0, o, def, 1));
    }
  }
  else
  {
    _kernel_oserror * e = NULL;
    breakpoint      * b;
    unsigned int      flags;

    def = NULL_ComponentId;

    /* Build a temporary breakpoint structure from the initial text. Until */
    /* this is freed, return... must not be called - so no RetError.       */

    RetError(breakpoint_string_to_struct(attached->initial_text, &b));

    /* See if this is an item for the main writeable */

    switch (b->type)
    {
      case breakpoint_type_function: def = Breakpoint_CID_Function; break;
      case breakpoint_type_address:  def = Breakpoint_CID_Address;  break;
      case breakpoint_type_swi:      def = Breakpoint_CID_SWI;      break;
      case breakpoint_type_line:     def = Breakpoint_CID_Line;     break;
    }

    /* If it is, select the appropriate radio button and fill in the text */

    if (def != NULL_ComponentId)
    {
      focus = Breakpoint_CID_MainWriteable;

      /* Value of 'e' gets dealt with later on, below */

      e = utils_set_writeable_field(o,
                                    focus,
                                    b->info,
                                    Limits_Writeable_General);
    }

    /* Otherwise, deal with the Wimp event, service call and UpCall options */

    else if (b->type == breakpoint_type_event)
    {
      def = Breakpoint_CID_WimpEventRadio;

      e = utils_set_display_field(o,
                                  Breakpoint_CID_WimpEventDisplay,
                                  b->info,
                                  Limits_Breakpoint_WEDisplay);
    }
    else if (b->type == breakpoint_type_service)
    {
      def   = Breakpoint_CID_ServiceCallRadio;
      focus = Breakpoint_CID_ServiceCallWriteable;

      e = utils_set_writeable_field(o,
                                    focus,
                                    b->info,
                                    Limits_Breakpoint_SCWriteable);
    }
    else if (b->type == breakpoint_type_upcall)
    {
      def   = Breakpoint_CID_UpCallRadio;
      focus = Breakpoint_CID_UpCallWriteable;

      e = utils_set_writeable_field(o,
                                    focus,
                                    b->info,
                                    Limits_Breakpoint_UCWriteable);
    }

    /* Free the temporary structure and check if an error was raised */

    breakpoint_free(b);

    /* ...so, can now return any errors */

    if (e != NULL) return e;

    /* Nothing to select? Bad string. Else select the radio button. */

    if (def == NULL_ComponentId)
    {
      return errors_frontend_error(fee_invalid_parameters,
                                   "breakpoint_set_up");
    }
    else
    {
      RetError(radiobutton_set_state(0, o, def, 1));
    }

    /* Was whatever we just selected already greyed out? */

    RetError(gadget_get_flags(0, o, def, &flags));

    if (flags & Gadget_Faded)
    {
      return errors_frontend_error(fee_invalid_parameters,
                                   "breakpoint_set_up");
    }
  }

  /* Third thing (and this is the slightly hacky part), having already */
  /* ensured that unavailable feature related items are greyed, we     */
  /* also want to grey out anything not related to the selected radio, */
  /* because of the slightly odd UI mechanisms employed.               */

  RetError(breakpoint_grey_from_radios(o, def));

  /* Need to give input focus? We can't just set it here, as the window */
  /* isn't actually open yet. Giving a default input focus will lead to */
  /* a "can't place focus anywhere" Toolbox error if all the writeables */
  /* are greyed out, which is why it needs to be set manually in the    */
  /* first place.                                                       */

  if (focus != NULL_ComponentId && nulls_claimed == false)
  {
    window_for_focus = o;
    nulls_claimed    = true;

    register_null_claimant(Wimp_ENull,
                           breakpoint_gain_focus,
                           (void *) focus);
  }

  /* Done */

  dprintf(("BrkP", "breakpoint_set_up: Successful\n"));

  return NULL;
}

/**************************************************************/
/* breakpoint_gain_focus()                                    */
/*                                                            */
/* If you set up a window to gain focus in a gadget but all   */
/* the writeable fields linked to and including that gadget   */
/* are greyed, the Toolbox actually raises an error. If you   */
/* try and set input focus manually in a ToBeShown handler    */
/* the Toolbox raises another error, because the dialogue box */
/* isn't open at that point. Hence this null event handler.   */
/*                                                            */
/* Ick.                                                       */
/*                                                            */
/* Parameters are as standard for a Wimp event handler. The   */
/* 'handle' field should hold the component ID to put the     */
/* focus in, cast to void *, and the "window_for_focus"       */
/* static (see top of source file) should be set to the       */
/* relevant ID - this is OK, since you can only have focus in */
/* one window at a time.                                      */
/**************************************************************/

static int breakpoint_gain_focus(int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle)
{
  /* No error reporting in case the dialogue box has managed to hide itself by now */

  gadget_set_focus(0,
                   window_for_focus,
                   (ComponentId) handle);

  window_for_focus = NULL_ObjectId;
  nulls_claimed    = false;

  deregister_null_claimant(Wimp_ENull,
                           breakpoint_gain_focus,
                           handle);

  return 0;
}

/**************************************************************/
/* breakpoint_to_be_shown()                                   */
/*                                                            */
/* When the dialogue box is created it should have a          */
/* list_add_for structure attached as a client handle. This   */
/* contains initial text for the List add dialogue box's      */
/* writeable field.                                           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int breakpoint_to_be_shown(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("BrkP", "breakpoint_to_be_shown: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("BrkP", "breakpoint_to_be_shown: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    ChkError(breakpoint_set_up(idb->self_id, attached));

    /* Watch the parent... */

    ChkError(event_register_toolbox_handler(attached->parent,
                                            attached->parent_hide_event,
                                            breakpoint_parent_hidden,
                                            (void *) idb->self_id));
  }

  dprintf(("BrkP", "breakpoint_to_be_shown: Successful\n"));

  return 0;
}

/**************************************************************/
/* breakpoint_hidden()                                        */
/*                                                            */
/* Called when the List add dialogue box is hidden.           */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int breakpoint_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("BrkP", "breakpoint_hidden: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("BrkP", "breakpoint_hidden: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  if (attached != NULL)
  {
    /* Remove our watch on the parent */

    ChkError(event_deregister_toolbox_handler(attached->parent,
                                              attached->parent_hide_event,
                                              breakpoint_parent_hidden,
                                              (void *) idb->self_id));

    /* Free the attached list_add_for structure */

    free(attached);
    ChkError(toolbox_set_client_handle(0, idb->self_id, NULL));
  }

  dprintf(("BrkP", "breakpoint_hidden: Self-destructing\n"));

  ChkError(toolbox_delete_object(0, idb->self_id));

  dprintf(("BrkP", "breakpoint_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* breakpoint_parent_hidden()                                 */
/*                                                            */
/* Called when the List add dialogue box's parent is hidden.  */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/* The 'handle' parameter should hold the object ID of the    */
/* List add dialogue box itself, since this event handler is  */
/* called on the parent, not on the List add dialogue box.    */
/**************************************************************/

static int breakpoint_parent_hidden(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  ObjectId self = (ObjectId) handle;

  dprintf(("BrkP", "breakpoint_parent_hidden: Called with self_id = &%08X\n", (unsigned int) self));

  /* Hide ourselves; the hidden handler does the rest */

  ChkError(toolbox_hide_object(0, self));

  dprintf(("BrkP", "breakpoint_parent_hidden: Successful\n"));

  return 0;
}

/**************************************************************/
/* breakpoint_add()                                           */
/*                                                            */
/* Called when Add is activated for the List add dialogue     */
/* box.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int breakpoint_add(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  breakpoint        b;
  _kernel_oserror * e;
  list_add_for    * attached;
  char            * listitem;
  char              field[Limits_List_Item];
  ComponentId       selected, readfrom;

  dprintf(("BrkP", "breakpoint_add: Called\n"));

  /* Need to know what radio button is selected, whatever happens */

  ChkError(radiobutton_get_state(0,
                                 idb->self_id,
                                 Breakpoint_CID_Function, /* Not interested in this one of course... */
                                 NULL,
                                 &selected)); /* ...That's what we really want */

  /* If this is a keyboard shortcut, make life easier for the user; act as */
  /* if the relevant radio is selected depending upon where the caret is   */

  if (idb->self_component == NULL_ComponentId)
  {
    WimpGetCaretPositionBlock caret;
    int                       handle;

    /* This is hellagrim. Why can't the Toolbox just tell me where the */
    /* blimmin' caret is? Sigh.                                        */

    ChkError(wimp_get_caret_position(&caret));
    ChkError(window_get_wimp_handle(0, idb->self_id, &handle));

    if (handle == caret.window_handle && caret.icon_handle >= 0)
    {
      ObjectId    o_in;
      ComponentId c_in;

      ChkError(window_wimp_to_toolbox(0,
                                      caret.window_handle,
                                      caret.icon_handle,
                                      &o_in,
                                      &c_in));

      /* Since we've confirmed the window handles are the same, the object IDs */
      /* should not differ unless it's All Gone Horribly Wrong.                */

      if (o_in != idb->self_id)
      {
        ChkError(errors_frontend_error(fee_should_never_happen,
                                       "Toolbox->Wimp disagreed with Wimp->Toolbox",
                                       "breakpoint_add"));
      }

      switch (c_in)
      {
        case Breakpoint_CID_MainWriteable:
        {
          if (
               selected != Breakpoint_CID_Function &&
               selected != Breakpoint_CID_Address  &&
               selected != Breakpoint_CID_SWI      &&
               selected != Breakpoint_CID_Line
             )
          {
            /* Oh dear; we're in the top writeable but none of its radios are selected. */
            /* This should actually never happen, because of the grey-out code...       */

            #ifdef TRACE
              errors_ret(errors_frontend_error(fee_should_never_happen,
                                               "in top writeable with no top radios selected",
                                               "breakpoint_add"));
            #endif

            ChkError(errors_frontend_message("BrkPt1", 0));
          }
        }
        break;

        case Breakpoint_CID_ServiceCallWriteable: selected = Breakpoint_CID_ServiceCallRadio; break;
        case Breakpoint_CID_UpCallWriteable:      selected = Breakpoint_CID_UpCallRadio;      break;

        default:
        {
          ChkError(errors_frontend_error(fee_invalid_parameters,
                                         "breakpoint_add"));
        }
        break;
      }
    }
  }

  /* Work out what to read and what to assemble */

  switch (selected)
  {
    case Breakpoint_CID_Function:         readfrom = Breakpoint_CID_MainWriteable,        b.type = breakpoint_type_function; break;
    case Breakpoint_CID_Address:          readfrom = Breakpoint_CID_MainWriteable,        b.type = breakpoint_type_address;  break;
    case Breakpoint_CID_SWI:              readfrom = Breakpoint_CID_MainWriteable,        b.type = breakpoint_type_swi;      break;
    case Breakpoint_CID_Line:             readfrom = Breakpoint_CID_MainWriteable,        b.type = breakpoint_type_line;     break;
    case Breakpoint_CID_WimpEventRadio:   readfrom = Breakpoint_CID_WimpEventDisplay,     b.type = breakpoint_type_event;    break;
    case Breakpoint_CID_ServiceCallRadio: readfrom = Breakpoint_CID_ServiceCallWriteable, b.type = breakpoint_type_service;  break;
    case Breakpoint_CID_UpCallRadio:      readfrom = Breakpoint_CID_UpCallWriteable,      b.type = breakpoint_type_upcall;   break;

    default:
    {
      ChkError(errors_frontend_error(fee_invalid_parameters,
                                     "breakpoint_add"));

      return 0;
    }
    break;
  }

  /* Read the field */

  if (readfrom == Breakpoint_CID_WimpEventDisplay)
  {
    ChkError(displayfield_get_value(0,
                                    idb->self_id,
                                    readfrom,
                                    field,
                                    sizeof(field),
                                    NULL));
  }
  else
  {
    ChkError(writablefield_get_value(0,
                                     idb->self_id,
                                     readfrom,
                                     field,
                                     sizeof(field),
                                     NULL));
  }

  field[sizeof(field) - 1] = '\0';
  b.info = field;

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("BrkP", "breakpoint_add: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  /* Assemble the item string. Must not use ChkError until freed */
  /* or the item will be leaked.                                 */

  ChkError(breakpoint_struct_to_string(&b, &listitem));

  dprintf(("BrkP", "breakpoint_add: Composite text is '%s'\n", listitem));

  if (attached && attached->parent != NULL_ObjectId)
  {
    if (attached->list_item >= 0)
    {
      /* We're open for a specific item in the list, so change its text */
      /* and update the attached list_add_for data                      */

      e = list_modify_item(attached->parent, attached->list_item, listitem);
      if (e != NULL) goto ba_bail;

      /* The dialogue box may not be closing (e.g. Adjust-click) so make */
      /* sure the initial text record is updated, otherwise a subsequent */
      /* Adjust-click on Cancel would behave strangely.                  */

      StrNCpy0(attached->initial_text, listitem);
    }
    else
    {
      /* We're open for no specific item, so add to the top */

      e = list_add_item(attached->parent, listitem);
      if (e != NULL) goto ba_bail;
    }
  }

  /* Finished with the string */

  free(listitem);

  /* Should we close the window? (Keyboard shortcut or SELECT pressed) */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    dprintf(("BrkP", "breakpoint_add: Closing window\n"));

    utils_restore_focus(idb->self_id);
    ChkError(toolbox_hide_object(0, idb->self_id));
  }

  dprintf(("BrkP", "breakpoint_add: Successful\n"));

  return 0;

ba_bail:

  dprintf(("BrkP", "breakpoint_add: Internal error, bailing\n"));

  free(listitem);
  ChkError(e);

  return 0;
}

/**************************************************************/
/* breakpoint_cancel()                                        */
/*                                                            */
/* Called when Cancel is activated for the List add dialogue  */
/* box.                                                       */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int breakpoint_cancel(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  list_add_for * attached;

  dprintf(("BrkP", "breakpoint_cancel: Called\n"));

  ChkError(toolbox_get_client_handle(0,
                                     idb->self_id,
                                     (void *) (&attached)));

  dprintf(("BrkP", "breakpoint_cancel: Attached list_add_for is at &%08X\n", (unsigned int) attached));

  /* Should we close the window? (Keyboard shortcut or SELECT pressed) */

  if (idb->self_component == NULL_ComponentId || !adjust())
  {
    dprintf(("BrkP", "breakpoint_cancel: Closing window\n"));

    utils_restore_focus(idb->self_id);
    ChkError(toolbox_hide_object(0, idb->self_id));
  }
  else
  {
    /* Not closing... Restore original dialogue box contents */

    dprintf(("BrkP", "breakpoint_cancel: Window is not closing, restoring original contents\n"));

    ChkError(breakpoint_set_up(idb->self_id, attached));
  }

  /* Finished */

  dprintf(("BrkP", "breakpoint_cancel: Successful\n"));

  return 0;
}

/* Called when one of the radio buttons in the Breakpoint     */
/* dialogue box changes state.                                */
/*                                                            */
/* Parameters are as standard for a Toolbox event handler.    */
/**************************************************************/

int breakpoint_radios(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  int state;

  dprintf(("BrkP", "breakpoint_radios: Called\n"));

  /* Is this a selection? */

  ChkError(radiobutton_get_state(0,
                                 idb->self_id,
                                 idb->self_component,
                                 &state,
                                 NULL));

  /* If so, grey/ungrey stuff and move the caret as needed */

  if (state != 0) ChkError(breakpoint_grey_from_radios(idb->self_id, idb->self_component));

  /* Finished */

  dprintf(("BrkP", "breakpoint_radios: Successful\n"));

  return 0;
}

/**************************************************************/
/* breakpoint_grey_from_radios()                              */
/*                                                            */
/* Grey out items in the Breakpoint dialogue box according to */
/* the radio button selection state. Originally designed for  */
/* initial dialogue box set-up and for radio button selection */
/* events (so the caret is moved as required, too).           */
/*                                                            */
/* Parameters: Object ID of the Breakpoint dialogue box;      */
/*                                                            */
/*             Component ID of the selected radio.            */
/**************************************************************/

static _kernel_oserror * breakpoint_grey_from_radios(ObjectId self, ComponentId selected)
{
  unsigned int flags;
  ComponentId  focus = NULL_ComponentId;

  dprintf(("BrkP", "breakpoint_grey_from_radios: Called\n"));

  /* Can't select a greyed item - but that really should never happen */

  RetError(gadget_get_flags(0,
                            self,
                            selected,
                            &flags));

  if ((flags & Gadget_Faded) != 0) RetError(errors_frontend_error(fee_should_never_happen,
                                                                  "disabled item was selected",
                                                                  "breakpoint_grey_from_radios"));

  switch (selected)
  {
    default:
    {
      RetError(errors_frontend_error(fee_invalid_parameters,
                                     "breakpoint_grey_from_radios"));
    }
    break;

    case Breakpoint_CID_WimpEventRadio:
    break;

    case Breakpoint_CID_Function:
    case Breakpoint_CID_Address:
    case Breakpoint_CID_SWI:
    case Breakpoint_CID_Line:             focus = Breakpoint_CID_MainWriteable;        break;
    case Breakpoint_CID_ServiceCallRadio: focus = Breakpoint_CID_ServiceCallWriteable; break;
    case Breakpoint_CID_UpCallRadio:      focus = Breakpoint_CID_UpCallWriteable;      break;
  }

  /* Ungrey the target item and place an appropriate input focus. Order */
  /* is important - if you grey first, input focus can be lost as the   */
  /* Toolbox can be left briefly with no gadget to place the caret in.  */

  if (focus != NULL_ComponentId)
  {
    RetError(set_gadget_state(self, focus, 0));
    RetError(utils_place_focus(self, focus));

    /* Grey the Wimp display if we're using any writeable */

    RetError(set_gadget_state(self, Breakpoint_CID_WimpEventDisplay, 1));
  }
  else
  {
    RetError(set_gadget_state(self, Breakpoint_CID_WimpEventDisplay, 0));
    RetError(utils_place_focus(self, NULL_ComponentId));
  }

  /* Grey any unused writeable */

  if (focus != Breakpoint_CID_MainWriteable)        RetError(set_gadget_state(self, Breakpoint_CID_MainWriteable,        1));
  if (focus != Breakpoint_CID_ServiceCallWriteable) RetError(set_gadget_state(self, Breakpoint_CID_ServiceCallWriteable, 1));
  if (focus != Breakpoint_CID_UpCallWriteable)      RetError(set_gadget_state(self, Breakpoint_CID_UpCallWriteable,      1));

  /* Finished */

  dprintf(("BrkP", "breakpoint_grey_from_radios: Successful\n"));

  return NULL;
}

/**************************************************************/
/* breakpoint_free()                                          */
/*                                                            */
/* Free the contents of a given breakpoint structure and the  */
/* structure itself. Will deal with next and previous         */
/* pointers within itself, but callers must ensure that if    */
/* the item given is pointed to by a wider list pointer (e.g. */
/* a project structure), that structure is pointed to another */
/* item first.                                                */
/*                                                            */
/* Parameters: Pointer to the breakpoint structure to free.   */
/*             May be NULL, in which case the function does   */
/*             nothing.                                       */
/**************************************************************/

void breakpoint_free(breakpoint * b)
{
  if (b == NULL) return;

  free(b->info);

  if (b->prev != NULL) b->prev->next = b->next;
  if (b->next != NULL) b->next->prev = b->prev;

  free(b);
}

/**************************************************************/
/* breakpoint_struct_to_string()                              */
/*                                                            */
/* Convert the contents of a given breakpoint structure into  */
/* a string for use in dialogue boxes etc.                    */
/*                                                            */
/* String is of the form "<type>: <name>", e.g. "Line: 452".  */
/* Actual content depends on the application's Messages file, */
/* so it is unwise to store these strings in files as they    */
/* wouldn't load back properly should the messages have       */
/* changed - unless the file contained the messages to use as */
/* well...                                                    */
/*                                                            */
/* Parameters: Pointer to the breakpoint structure to read;   */
/*                                                            */
/*             Pointer to a char *, updated on exit with a    */
/*             pointer to the constructed string. This is     */
/*             allocated by malloc; the caller is responsible */
/*             for freeing it when no longer needed.          */
/**************************************************************/

_kernel_oserror * breakpoint_struct_to_string(const breakpoint * b, char ** name)
{
  unsigned int   count = 0;
  char         * str;

  dprintf(("BrkP", "breakpoint_struct_to_string: Called for &%08X\n", (unsigned int) b));

  if (
       b        == NULL           ||
       name     == NULL           ||
       b->info  == NULL           ||
       *b->info == '\0'           ||
       b->type  <  0              ||
       b->type  >= sizeof(idents)
     )
     return errors_frontend_error(fee_invalid_parameters,
                                  "breakpoint_struct_to_string");

  /* The lookup_token calls update the global 'tokens' buffer contents. */

  count = strlen(lookup_token(idents[b->type],0,0)) +
          2                                         + /* ": "   */
          strlen(b->info)                           + /* <info> */
          1;                                          /* NUL    */

  /* Allocate space */

  str = malloc(count);
  if (str == NULL) return errors_frontend_error(fee_out_of_memory,
                                                "breakpoint_struct_to_string");

  /* Build it */

  strcpy(str, tokens);
  count = strlen(str);
  str[count++] = ':';
  str[count++] = ' ';
  strcpy(str + count, b->info);

  /* Return the string */

  *name = str;

  dprintf(("BrkP", "breakpoint_struct_to_string: Successful\n"));

  return NULL;
}

/**************************************************************/
/* breakpoint_string_to_struct()                              */
/*                                                            */
/* Convert the contents of a given string from a dialogue     */
/* box etc. into a breakpoint structure.                      */
/*                                                            */
/* Parameters: Pointer to the string to parse;                */
/*                                                            */
/*             Pointer to a pointer to a breakpoint structure */
/*             updated with a pointer to a filled in item.    */
/*             The caller is responsible for freeing it with  */
/*             breakpoint_free.                               */
/**************************************************************/

_kernel_oserror * breakpoint_string_to_struct(const char * name, breakpoint ** b)
{
  unsigned int   len;
  unsigned int   index = 0;
  breakpoint   * l     = NULL;

  dprintf(("BrkP", "breakpoint_string_to_struct: Called for '%s'\n", name != NULL ? name : "<NULL>"));

  if (name == NULL || b == NULL) goto bsts_params;

  /* Allocate the breakpoint structure */

  l = calloc(1, sizeof(breakpoint));

  if (l == NULL) return errors_frontend_error(fee_out_of_memory,
                                              "breakpoint_string_to_struct");

  /* Read the item type. lookup_token calls update the global "tokens" buffer */

  while (index < sizeof(idents))
  {
    len = strlen(lookup_token(idents[index], 0, 0));

    if (!strncmp(name, tokens, len))
    {
      name    += len;
      l->type  = (breakpoint_type) index;
      break;
    }

    index++;
  }

  if (index == sizeof(idents)) return errors_frontend_error(fee_out_of_memory,
                                                            "breakpoint_string_to_struct");

  /* Skip the separator */

  if (
       *name     != ':' ||
       *(++name) != ' ' ||
       *(++name) == '\0'
     )
     goto bsts_params;

  /* The rest is the name information */

  l->info = malloc(strlen(name) + 1);

  if (l->info == NULL)
  {
    free(l);
    return errors_frontend_error(fee_out_of_memory,
                                   "breakpoint_string_to_struct");
  }

  dprintf(("BrkP", "breakpoint_string_to_struct: Name/info is '%s'\n", name));

  strcpy(l->info, name);

  /* This must always be set externally, if it's a breakpoint for tracing */

  l->for_trace_only = false;

  /* Return the structure */

  *b = l;

  dprintf(("BrkP", "breakpoint_string_to_struct: Successful\n"));

  return NULL;

bsts_params:

  dprintf(("BrkP", "breakpoint_string_to_struct: Invalid parameters\n"));

  if (l != NULL)
  {
    free(l->info);
    free(l);
  }

  return errors_frontend_error(fee_invalid_parameters,
                               "breakpoint_string_to_struct");
}
