/* > restool.c

 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef RISCOS
#include "swis.h"
#endif

#ifdef UNIX
#define const
#endif

#include "VersionNum"

#define BUF_SIZE	(16*1024)
#define SYNTAX		"Syntax: restool (merge|version) [<args>]\r\n"
#define SYNTAX_MERGE	"Syntax: restool merge <out> <in1> [<in2>]...\r\n"

static int mergefiles(int argc, const char *argv[])
{
    const char *outfile, *infile;
    FILE *out, *in;    

    if (argc < 2)
    {
	fprintf(stderr, SYNTAX_MERGE);
	return EXIT_FAILURE;
    }

    outfile = argv[0];
    if ((out = fopen(outfile, "wb")) != NULL)
    {
	int i;
	char *buf = malloc(BUF_SIZE);

	/* write header */
	memset(buf, 0, 12);
	memcpy(buf, "RESF", 4);
	buf[4] = 101;		/* version */
	buf[8] = 12;		/* offset to objects */

	/* fprintf(stderr, "Writing header\n"); */
	fwrite(buf, 12, 1, out);

	for (i = 1; i < argc; i++)
	{
	    infile = argv[i];

	    /* fprintf(stderr, "Opening '%s'\n", infile); */

	    if ((in = fopen(infile, "rb")) != NULL)
	    {
		/* skip header */
		fseek(in, 12, SEEK_SET);

		/* copy data */
		while (!feof(in) && !ferror(in) && !ferror(out))
		{
		    int read = fread(buf, 1, BUF_SIZE, in);
		    fwrite(buf, 1, read, out);
		}
		
		/* fprintf(stderr, "Closing '%s'\n", infile); */
		fclose(in);
	    }
	    else
	    {
	    	fprintf(stderr, "Error: Can't open '%s'\n", infile);
	    	exit(EXIT_FAILURE);
	    }
	}
	
	fclose(out);
#ifdef RISCOS
	_swix(OS_File, _INR(0,2), 18, outfile, 0xFAE);
#endif
    }
    else
    {
    	fprintf(stderr, "Error: Can't open '%s'\n", outfile);
    	exit(EXIT_FAILURE);
    }

    return EXIT_SUCCESS;
}

int main(int argc, const char *argv[])
{
    int r = EXIT_FAILURE;
    
    if (argc < 2)
    {
	fprintf(stderr, SYNTAX);
	return EXIT_FAILURE;
    }

    if (strcmp(argv[1], "merge") == 0)
    {
	r = mergefiles(argc - 2, argv + 2);
    }
    else if (strcmp(argv[1], "version") == 0)
    {
	printf("Restool: version " Module_MajorVersion " " Module_MinorVersion " [" Module_Date "]\n");
	r  = EXIT_SUCCESS;
    }
    else
    {
	fprintf(stderr, SYNTAX);
    }

    return r;
}

/* eof restool.c */
