/*
  Title:     ASD Table Decoder
  Copyright: (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
  $Revision$
  Checkin $Date$
  Revising $Author$
*/

#include <stdio.h>
#include "asdfmt.h"
#include "decasd.h"
#include "bytesex.h"

static char indent[16];
static int indent_level;

static char *area_start = NULL;

#define NO  0
#define YES 1

#define hv(v)         bytesex_hostval(v)

static void print_offset(p)
char *p;
{
  printf("%.6x%s ", p - area_start, indent);
}

static void print_simple_type(t)
int32 t;
{ char *s;
  switch (t)
  {
case TYPEVOID:     s = "void";           break;
case TYPESBYTE:    s = "signed char";    break;
case TYPESHALF:    s = "signed short";   break;
case TYPESWORD:    s = "signed int";     break;
case TYPEUBYTE:    s = "unsigned char";  break;
case TYPEUHALF:    s = "unsigned short"; break;
case TYPEUWORD:    s = "unsigned int";   break;
case TYPEFLOAT:    s = "float";          break;
case TYPEDOUBLE:   s = "double";         break;
case TYPELDOUBLE:  s = "long double";    break;
case TYPECOMPLEX:  s = "single complex"; break;
case TYPEDCOMPLEX: s = "double complex"; break;
case TYPEFUNCTION: s = "function";       break;
default:  fprintf(stderr, "*** ? type (%ld)", t);
          return;
  }
  fputs(s, stdout);
}

static void print_type(p)
int32 p;
{
  int32 t, ptrcount;
  p = hv(p);
  t = TYPE_TYPECODE(p);
  ptrcount = TYPE_PTRCOUNT(p);
  while (ptrcount--) putchar('*');
  if (t < 0)
    printf("type {%.6lx}", -t);
  else
    print_simple_type(t);
}

static void print_line(s, n)
char *s;
unsigned32 n;
{
  int32 charpos;
  n = hv(n);
  charpos = FILE_CHPOS(n);
  printf("%s at %ld", s, FILE_LINE(n));
  if (charpos != 0) printf(",%ld", charpos);
}

static void print_relocated_address(s, n, offset, optreloc)
char *s;
unsigned32 n;
char *offset;
int optreloc;
{ n = hv(n);
  printf("%s ", s);
  s = symbol_relocating(offset - area_start);
  if (s == 0) {
    printf("0x%lx", n);
    if (!optreloc) fprintf(stderr, "*** bad relocation");
  } else {
    if (n != 0) printf("0x%lx+", n);
    printf("%s", s);
  }
}

static void add_indent()
{ indent[indent_level++] = ' ';
  indent[indent_level++] = ' ';
  indent[indent_level] = 0;
}

static void remove_indent()
{ indent_level -= 2;
  indent[indent_level] = 0;
}

static int morethanonebit(n)
int32 n;
{
  return (n ^ (n & (-(int32)n))) != 0;
}

void set_debug_area_base(base)
char *base;
{
  area_start = base;
}

char *decasd_section(debugdata, debugend)
char *debugdata;
char *debugend;
{
  ItemSection *section = (ItemSection *)debugdata;
  int32 i, v;
  int scopesopen = 0;

  if (area_start == NULL) area_start = debugdata;  /* in case of abuse */

  indent_level = 0;
  indent[0] = 0;

  v = hv(section->id);
  if (asd_code_(v) != ITEMSECTION)
  { fprintf(stderr, "*** Format Error: Section expected at AREA offset %d\n",
           debugdata - area_start);
    return debugend;
  }
  print_offset((char *)&(section->id));
  printf("Section: length %ld\n", asd_len_(v));
  debugend = debugdata + hv(section->debugsize);

  if (section->lang == 0)
  { fprintf(stderr,
      "*** Low level (linker generated) debugging tables in AOF file\n");
    return debugend;
  }

  print_offset((char *)&section->lang);
  printf("    Language: ");
  switch (section->lang)
  {
case LANG_C:       printf("C\n"); break;
case LANG_PASCAL:  printf("Pascal\n"); break;
case LANG_FORTRAN: printf("ForTran\n"); break;
case LANG_ASM:     printf("Assembler\n"); break;
default:           printf("Unknown (%d)\n", section->lang);
   }

  print_offset((char *)&section->flags);
  printf("    Flags: %sline number info, %svariable info\n",
         FLAG_LINES(section->flags) ? "" : "no ",
         FLAG_VARS(section->flags) ? "" : "no ");
  print_offset((char *)&section->asdversion);
  printf("    Debugging table version: %d\n", section->asdversion);
  print_offset((char *)&section->codestart);
  print_relocated_address("    Code: address",
    section->codestart, (char *)&section->codestart, YES);
  printf(", size = 0x%lx\n", hv(section->codesize));
  print_offset((char *)&section->datastart);
  print_relocated_address("    Data: address",
    section->datastart, (char *)&section->datastart, YES);
  printf(", size = 0x%lx\n", hv(section->datasize));
  print_offset((char *)&section->fileinfo);
  printf("    File info offset = 0x%.6lx\n", hv(section->fileinfo.i));

  print_offset((char *)&section->debugsize);
  printf("    Section size = %ld\n", hv(section->debugsize));

  print_offset(section->n.name);
  printf("    Section name: \"%.*s\"\n",
    *(section->n.name), &section->n.name[1]);

  debugdata += asd_len_(v);

  while (debugdata < debugend)
  { v = hv(((ItemSection *)debugdata)->id);
    switch (asd_code_(v))
    {
    case ITEMSECTION:
      print_offset(debugdata);
      fprintf(stderr, "*** Misplaced section\n");
      break;
    case ITEMPROC:
      { ItemProc *item = (ItemProc *)debugdata;
        print_offset(debugdata);
        print_line("Proc", item->sourcepos);
        printf(": name %.*s: ", *(item->n.name), item->n.name+1);
        print_type(item->type);
        printf(": %ld arguments\n", hv(item->args));

        print_offset((char *)&item->startaddr);
        print_relocated_address("    Start address",
          item->startaddr, (char *)&item->startaddr, NO);
        print_relocated_address(", body",
          item->entry, (char *)&item->entry, NO);
        putchar('\n');

        print_offset((char *)&item->endproc);
        if (item->endproc.i == 0)
          printf("    Endproc = 0 => Label\n");
        else
          printf("    Endproc 0x%.6lx\n", hv(item->endproc.i));

        print_offset((char *)&item->fileentry);
        printf("    File entry 0x%.6lx\n", hv(item->fileentry.i));
      }
      scopesopen = 0;
      add_indent();
      break;
    case ITEMENDPROC:
      { ItemEndProc *item = (ItemEndProc *)debugdata;

        remove_indent();
        print_offset(debugdata);
        print_line("Endproc", item->sourcepos);
        print_relocated_address(": limit",
          item->endpoint, (char *)&item->endpoint, NO);
        putchar('\n');

        print_offset((char *)&item->fileentry.i);
        printf("    File entry 0x%.6lx\n", hv(item->fileentry.i));

        for (i = 0; i < hv(item->nreturns); i++)
        { print_offset((char *)&(item->retaddrs[i]));
          printf("    %s %ld", (i==0 ? "return point" : "            "), i);
          print_relocated_address("",
            item->retaddrs[i], (char *)&item->retaddrs[i], NO);
          putchar('\n');
        }
      }
      if (scopesopen != 0)
        fprintf(stderr, "*** scopes still open at endproc\n");
      break;
    case ITEMVAR:
      { ItemVar *item = (ItemVar *)debugdata;
        print_offset(debugdata);
        print_line("Var", item->sourcepos);
        printf(": name %.*s: ", *(item->n.name), item->n.name+1);
        print_type(item->type);
        v = hv(item->storageclass);
        switch (v)
        {
        case C_EXTERN:
          printf(": extern");
        case C_STATIC:
          if (v == C_STATIC) printf(": static");
          print_relocated_address(" at",
            item->location.address, (char *)&item->location, NO);
          putchar('\n');
          break;
        case C_VAR:
          printf(": Argument by reference (Pascal VAR argument) ");
        case C_AUTO:
          if (v == C_AUTO) printf(": auto ");
          printf("FP offset %ld\n", hv(item->location.offset));
          break;
        case C_REG:
          printf(": register ");
          v = hv(item->location.offset);
          if (v >= 24)
            fprintf(stderr, "*** ? register %ld\n", v);
          else if (v < 16)
            printf("R%ld\n", v);
          else
            printf("F%ld\n", v - 16);
          break;
        case C_FCARG:
          printf(": Fortran character argument");
        case C_FARG:
          if (v == C_FARG) printf(": Fortran argument");
          printf(" Argument list offset %ld\n", item->location.offset);
          break;
        default:
          fprintf(stderr, ": *** ? storage class %ld: ",
            hv(item->storageclass));
          printf("Offset / address = 0x%.6lx\n", hv(item->location.offset));
          break;
        }
      }
      break;
    case ITEMTYPE:
      { ItemType *item = (ItemType *)debugdata;
        print_offset(debugdata);
        printf("Type %.*s ", *(item->n.name), item->n.name+1);
        print_type(item->type);
        putchar('\n');
      }
      break;
    case ITEMSTRUCT:
      { ItemStruct *item = (ItemStruct *)debugdata;
        StructField *f = item->fieldtable;

        print_offset(debugdata);
        v = i = hv(item->fields);
        while (i != 0)
        { if (f->offset != 0) break;
          f = (StructField *)((char *)(f + 1) + (f->n.name[0] & ~3));
          i--;
        }
        if (i != 0 || v <= 1)
           printf("Struct: ");
        else
           printf("Union: ");

        printf("%ld fields, size 0x%lx\n", v, hv(item->size));

        f = item->fieldtable;
        for (i = 0; i < v; i++)
        { int nl = f->n.name[0];
          print_offset((char *)&f->offset);
          printf("    field %ld offset 0x%lx: name %.*s: ",
            i, hv(f->offset), nl, &f->n.name[1]);
          print_type(f->type);
          putchar('\n');
          f = (StructField *)((char *)(f + 1) + (nl & ~3));
        }
      }
      break;
    case ITEMENUMD:
      { ItemEnumD *item = (ItemEnumD *)debugdata;
        asd_EnumMember *m = item->nametable;

        print_offset(debugdata);
        printf("EnumD: ");
        print_type(item->type);
        printf(" %ld members\n", hv(item->count));

        for (i = 0; i < hv(item->count); i++)
        { int nl = m->n.name[0];
          print_offset((char *)&m->val);
          printf("    value 0x%lx: name %.*s\n", hv(m->val), nl, &m->n.name[1]);
          m = (asd_EnumMember *)((char *)(m + 1) + (nl & ~3));
        }
      }
      break;
    case ITEMENUMC:
      { ItemEnumC *item = (ItemEnumC *)debugdata;
        char *m = item->nt.nametable;

        print_offset(debugdata);
        printf("EnumC: ");
        print_type(item->type);
        printf(" %ld members\n", hv(item->count));

        for (i = 0; i < hv(item->count); i++)
        { int nl = m[0];
          print_offset(m);
          printf("    value %ld: name %.*s\n", hv(item->base)+i, nl, &m[1]);
          m += (nl + 4) & ~3;
        }
      }
      break;
    case ITEMARRAY:
      { ItemArray *item = (ItemArray *)debugdata;
        print_offset(debugdata);
        printf("Array: element size = %ld: ", hv(item->size));
        print_type(item->basetype);
        v = hv(item->flags);
        if ((v & ~0x3f) ||
            morethanonebit(v & 0x13) ||
            morethanonebit(v & 0x2c))
           printf(" *** ? flags 0x%lx\n", v);
        else {
          printf(" [");
          if (ARRAY_CONST_LBOUND(v))
            printf("%ld", hv(item->lowerbound.i));
          else
            putchar('?');
          if (ARRAY_CONST_UBOUND(v))
            printf("..%ld]\n", hv(item->upperbound.i));
          else
            printf("..?]\n");
          if (!ARRAY_CONST_LBOUND(v) &&
              !ARRAY_UNDEF_LBOUND(v)) {
            char *s = "FP offset";
            if (ARRAY_VAR_LBOUND(v))
              s = "var";
            printf("          %sVariable lower bound: %s %ld\n",
              indent, s, hv(item->lowerbound.o));
          }
          if (!ARRAY_CONST_UBOUND(v) &&
              !ARRAY_UNDEF_UBOUND(v)) {
            char *s = "FP offset";
            if (ARRAY_VAR_UBOUND(v))
              s = "var";
            printf("          %sVariable upper bound: %s %ld\n",
              indent, s, hv(item->upperbound.o));
          }
        }
      }
      break;
    case ITEMSUBR:
      { ItemSubrange *item = (ItemSubrange *)debugdata;
        int32 size = SUBRANGE_SIZE(hv(item->sizeandtype));
        print_offset(debugdata);
        printf("Subrange\n");
        print_offset((char *)&item->sizeandtype);
        printf("Byte size = %ld", size);
        if (!(size == 1 || size == 2 || size == 4))
          fprintf(stderr, "    *** Format error: Illegal byte size\n");
        printf("    Type = ");
        print_simple_type(SUBRANGE_TYPECODE(hv(item->sizeandtype)));
        putchar('\n');

        print_offset((char *)&item->lb);
        printf("    Lowerbound = %ld\n", hv(item->lb));
        print_offset((char *)&item->hb);
        printf("    Upperbound = %ld\n", hv(item->hb));
      }
      break;
    case ITEMSET:
      { ItemSet *item = (ItemSet *)debugdata;
        print_offset(debugdata);
        printf("Set: size %ld\n", hv(item->size));
      }
      break;
    case ITEMSCOPEBEGIN:
      { ItemScope *item = (ItemScope *)debugdata;
        print_offset(debugdata);
        print_relocated_address("Begin scope at",
          item->codeaddress, (char *)&item->codeaddress, NO);
        putchar('\n');
        scopesopen++;
        break;
      }
    case ITEMSCOPEEND:
      { ItemScope *item = (ItemScope *)debugdata;
        print_offset(debugdata);
        print_relocated_address("End scope at",
          item->codeaddress, (char *)&item->codeaddress, NO);
        putchar('\n');
        scopesopen--;
        break;
      }
    case ITEMFILEINFO:
      { ItemFileInfo *item = (ItemFileInfo *)debugdata;
        int reversing = bytesex_reversing();
        print_offset(debugdata);
        printf("File Info: length %ld\n", asd_len_(hv(item->id)));

        debugdata = (char *)(item->entries);
        while (1)
        { ItemFileEntry *entry = (ItemFileEntry *)debugdata;
          int32 *ptr;
          Fragment *frag;
          int32 nfrags;
          int table_version = section->asdversion;

          print_offset((char *)&entry->len);
          printf("Entry length = %ld", hv(entry->len));
          if (entry->len == 0)
          { printf(" => end of file info\n");
            break;
          }

          printf(": \"%.*s\" ", *entry->filename, entry->filename+1);
          printf("date 0x%.8lx ", hv(entry->date));
          ptr = (int32 *)((char *)(entry + 1) + (*(entry->filename) & ~3));
          nfrags = hv(*ptr++);
          printf("%ld fragments\n", nfrags);
          frag = (Fragment *)ptr;
          add_indent();
          for (i = 0; i < nfrags; i++)
          {
            unsigned char *lineinfo = frag->lineinfo,
                          *lineinfoend = (unsigned char *)frag + hv(frag->size);
            unsigned32 startaddr = hv(frag->codestart);
            int32 line = hv(frag->firstline);
            int statement = 1,
                charpos = 1;
            print_offset((char *)frag);
            printf("Fragment %ld (size %ld): ", i, hv(frag->size));
            printf("lines %ld to %ld\n",
              hv(frag->firstline), hv(frag->lastline));
            print_offset((char *)&frag->codestart);
            print_relocated_address("Code address",
              frag->codestart, (char *)&frag->codestart, NO);
            printf(", size 0x%lx\n", hv(frag->codesize));

            add_indent();
            while (lineinfo < lineinfoend)
            { unsigned codediff,
                       linediff;
              print_offset((char *)lineinfo);
              printf("0x%.6lx line %ld", startaddr, line);
              if (statement != 1)
                printf("/%1d", statement);
              else
                printf("  ");
              if (charpos != 1)
                printf(":%-2d", charpos);
              else
                printf("   ");
              if (lineinfo[0] == 0 && lineinfo[1] == 0)
              { linediff = ((asd_LineInfo_Long_1 *)lineinfo)->lineinc;
                codediff = ((asd_LineInfo_Long_1 *)lineinfo)->codeinc;
                if (reversing)
                { linediff = ((linediff & 255) << 8) | (linediff >> 8);
                  codediff = ((codediff & 255) << 8) | (codediff >> 8);
                }
                lineinfo += 6;
                charpos = 1;
                printf("  (L 0x%x %d)\n", codediff, linediff);
              }
              else if (table_version > 2 && lineinfo[0] == 0 && lineinfo[1] == Asd_LineInfo_Short_MaxLine+1)
              { linediff = ((asd_LineInfo_Long_2 *)lineinfo)->lineinc;
                codediff = ((asd_LineInfo_Long_2 *)lineinfo)->codeinc;
                charpos =  ((asd_LineInfo_Long_2 *)lineinfo)->newcol;
                if (reversing)
                { linediff = ((linediff & 255) << 8) | (linediff >> 8);
                  codediff = ((codediff & 255) << 8) | (codediff >> 8);
                  charpos = ((charpos & 255) << 8) | (charpos >> 8);
                }
                lineinfo += 8;
                printf("  (L2 0x%x %d %d)\n", codediff, linediff, charpos);
              }
              else
              { codediff = *lineinfo++;
                linediff = *lineinfo++;
                if (table_version > 2 && linediff > Asd_LineInfo_Short_MaxLine) {
                  charpos += linediff - Asd_LineInfo_Short_MaxLine - 1;
                  printf("  (S 0x%x :%d)\n", codediff, linediff - Asd_LineInfo_Short_MaxLine - 1);
                  linediff = 0;
                } else {
                  charpos = 1;
                  printf("  (S 0x%x %d)\n", codediff, linediff);
                }
              }
              line += linediff;
              statement += 1;
              if (linediff != 0) statement = 1;
              startaddr += codediff;
            }
            remove_indent();
            frag = (Fragment *)((int32)(lineinfoend + 3) & ~3L);
          }
          remove_indent();
          debugdata += hv(entry->len);
        }
        return debugend;
      }
    default:
      print_offset(debugdata);
      fprintf(stderr, "*** ? debugging item %ld\n",
          asd_code_(hv(((ItemSection *)debugdata)->id)));
    }
    v = hv(((ItemSection *)debugdata)->id);

    if (asd_len_(v) == 0)
    { fprintf(stderr, "*** Item length = 0\n");
      return debugend;
    }
    debugdata += asd_len_(v);
  }
  return debugend;
}
