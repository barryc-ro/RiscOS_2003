/************************************************************************/
/* File:    HTMLEscape.c                                                */
/* Purpose: Escape characters which are not allowed in HTML.            */
/*                                                                      */
/* Author:  Ben Laughton (mailto:BLaughton@acorn.com)                   */
/* History: 0.01  1998-09-16                                            */
/*                Created.                                              */
/*          0.02  1998-09-25                                            */
/*                BAL: Added memory to memory conversion.  Altered APIs */
/*                slightly to make them more consistent.                */
/************************************************************************/

/* Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.
 */


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */

#include "Main.h"
#include "HTMLEscape.h"
#include <time.h>


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define ESCAPE_SEQUENCE_LEN 6      /* Length of a character escape sequence */

#define TIME_CHECK_INTERVAL 1024   /* Number of characters to process before
                                    * checking time-slice.
                                    */

typedef union context_t
{
    const char *  mem_to_file;
    struct
    {
        const char *  in_s;
        char *        out_s;
    } mem_to_mem;
} context_t;

typedef union context_t *  esc_html_context;

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* This array specifies which charactes are to be escaped.  The character's
 * ASCII value is used as the index into the array.  A 0 means that no escaping
 * is necessary, a 1 means that the character must be escaped.  The numeric
 * entity is used as the escape sequence rather than the named entity because:
 * a) the HTML does not need to be human-friendly
 * b) it's dead easy to automatically generate the numeric entity, which saves
 *    having to store the named entity as well for each escaped character.
 */
static int  escape[] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 0 - 9 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 10 - 19 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 20 - 29 */
    0, 0, 0, 0,                      /* 30 - 33 */
    1,                               /* 34, Quotation mark */
    0, 0, 0,                         /* 35 - 37 */
    1,                               /* 38, Ampersand */
    0,                               /* 39 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 40 - 49 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 50 - 59 */
    1,                               /* 60, Less than */
    0,                               /* 61 */
    1,                               /* 62, Greater than */
    0, 0, 0, 0, 0, 0, 0,             /* 63 - 69 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 70 - 79 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 80 - 89 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 90 - 99 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 100 - 109 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 110 - 119 */
    0, 0, 0, 0, 0, 0, 0, 0           /* 120 - 127 */

/* We don't want this bit to be compiled in. */

#ifdef UTF8_HACK
    ,
    0, 0,                            /* 128 - 129 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 130 - 139 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 140 - 149 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 150 - 159 */
    1,                               /* 160, Nonbreaking space */
    1,                               /* 161, Inverted exclamation mark */
    1,                               /* 162, Cent sign */
    1,                               /* 163, Pound sign */
    1,                               /* 164, General currency sign */
    1,                               /* 165, Yen sign */
    1,                               /* 166, Broken vertical bar */
    1,                               /* 167, Section sign */
    1,                               /* 168, Umlaut */
    1,                               /* 169, Copyright */
    1,                               /* 170, Feminine ordinal */
    1,                               /* 171, Left angle quote */
    1,                               /* 172, Not sign */
    1,                               /* 173, Soft hyphen */
    1,                               /* 174, Registered trademark */
    1,                               /* 175, Macron accent */
    1,                               /* 176, Degree sign */
    1,                               /* 177, Plus or minus */
    1,                               /* 178, Superscript 2 */
    1,                               /* 179, Superscript 3 */
    1,                               /* 180, Acute accent */
    1,                               /* 181, Micro sign (Greek mu) */
    1,                               /* 182, Paragraph sign */
    1,                               /* 183, Middle dot */
    1,                               /* 184, Cedilla */
    1,                               /* 185, Superscript 1 */
    1,                               /* 186, Masculine ordinal */
    1,                               /* 187, Right angle quote */
    1,                               /* 188, Fraction one-fourth */
    1,                               /* 189, Fraction one-half */
    1,                               /* 190, Fraction three-fourths */
    1,                               /* 191, Inverted question mark */
    1,                               /* 192, Capital A, grave accent */
    1,                               /* 193, Capital A, accute accent */
    1,                               /* 194, Capital A, circumflex accent */
    1,                               /* 195, Capital A, tilde */
    1,                               /* 196, Capital A, umlaut */
    1,                               /* 197, Capital A, ring */
    1,                               /* 198, Capital AE ligature */
    1,                               /* 199, Capital C, cedilla */
    1,                               /* 200, Capital E, grave accent */
    1,                               /* 201, Capital E, accute accent */
    1,                               /* 202, Capital E, circumflex accent */
    1,                               /* 203, Capital E, umlaut */
    1,                               /* 204, Capital I, grave accent */
    1,                               /* 205, Capital I, accute accent */
    1,                               /* 206, Capital I, circumflex accent */
    1,                               /* 207, Capital I, umlaut */
    1,                               /* 208, Capital eth, Icelandic*/
    1,                               /* 209, Capital N, tilde*/
    1,                               /* 210, Capital O, grave accent */
    1,                               /* 211, Capital O, accute accent */
    1,                               /* 212, Capital O, circumflex accent */
    1,                               /* 213, Capital O, tidle */
    1,                               /* 214, Capital O, umlaut*/
    1,                               /* 215, Multiply sign */
    1,                               /* 216, Capital O, slash*/
    1,                               /* 217, Capital U, grave accent */
    1,                               /* 218, Capital U, accute accent */
    1,                               /* 219, Capital U, circumflex accent */
    1,                               /* 220, Capital U, umlaut */
    1,                               /* 221, Capital Y, accute accent */
    1,                               /* 222, Capital thorn, Icelandic */
    1,                               /* 223, Small sz ligature, German*/
    1,                               /* 224, Small a, grave accent */
    1,                               /* 225, Small a, accute accent */
    1,                               /* 226, Small a, circumflex accent */
    1,                               /* 227, Small a, tilde */
    1,                               /* 228, Small a, umlaut */
    1,                               /* 229, Small a, ring */
    1,                               /* 230, Small ae ligature */
    1,                               /* 231, Small c, cedilla */
    1,                               /* 232, Small e, grave accent */
    1,                               /* 233, Small e, accute accent */
    1,                               /* 234, Small e, circumflex accent */
    1,                               /* 235, Small e, umlaut */
    1,                               /* 236, Small i, grave accent */
    1,                               /* 237, Small i, accute accent */
    1,                               /* 238, Small i, circumflex accent */
    1,                               /* 239, Small i, umlaut */
    1,                               /* 240, Small eth, Icelandic*/
    1,                               /* 241, Small n, tilde*/
    1,                               /* 242, Small o, grave accent */
    1,                               /* 243, Small o, accute accent */
    1,                               /* 244, Small o, circumflex accent */
    1,                               /* 245, Small o, tidle */
    1,                               /* 246, Small o, umlaut*/
    1,                               /* 247, Division sign */
    1,                               /* 248, Small o, slash*/
    1,                               /* 249, Small u, grave accent */
    1,                               /* 250, Small u, accute accent */
    1,                               /* 251, Small u, circumflex accent */
    1,                               /* 252, Small u, umlaut */
    1,                               /* 253, Small y, accute accent */
    1,                               /* 254, Small thorn, Icelandic */
    1                                /* 255, Small y, umlaut */
#else
  /* This version is for Unicode */
    ,
    0, 0,                            /* 128 - 129 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 130 - 139 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 140 - 149 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 150 - 159 */
    0,                               /* 160, Nonbreaking space */
    0,                               /* 161, Inverted exclamation mark */
    0,                               /* 162, Cent sign */
    0,                               /* 163, Pound sign */
    0,                               /* 164, General currency sign */
    0,                               /* 165, Yen sign */
    0,                               /* 166, Broken vertical bar */
    0,                               /* 167, Section sign */
    0,                               /* 168, Umlaut */
    0,                               /* 169, Copyright */
    0,                               /* 170, Feminine ordinal */
    0,                               /* 171, Left angle quote */
    0,                               /* 172, Not sign */
    0,                               /* 173, Soft hyphen */
    0,                               /* 174, Registered trademark */
    0,                               /* 175, Macron accent */
    0,                               /* 176, Degree sign */
    0,                               /* 177, Plus or minus */
    0,                               /* 178, Superscript 2 */
    0,                               /* 179, Superscript 3 */
    0,                               /* 180, Acute accent */
    0,                               /* 181, Micro sign (Greek mu) */
    0,                               /* 182, Paragraph sign */
    0,                               /* 183, Middle dot */
    0,                               /* 184, Cedilla */
    0,                               /* 185, Superscript 1 */
    0,                               /* 186, Masculine ordinal */
    0,                               /* 187, Right angle quote */
    0,                               /* 188, Fraction one-fourth */
    0,                               /* 189, Fraction one-half */
    0,                               /* 190, Fraction three-fourths */
    0,                               /* 191, Inverted question mark */
    0,                               /* 192, Capital A, grave accent */
    0,                               /* 193, Capital A, accute accent */
    0,                               /* 194, Capital A, circumflex accent */
    0,                               /* 195, Capital A, tilde */
    0,                               /* 196, Capital A, umlaut */
    0,                               /* 197, Capital A, ring */
    0,                               /* 198, Capital AE ligature */
    0,                               /* 199, Capital C, cedilla */
    0,                               /* 200, Capital E, grave accent */
    0,                               /* 201, Capital E, accute accent */
    0,                               /* 202, Capital E, circumflex accent */
    0,                               /* 203, Capital E, umlaut */
    0,                               /* 204, Capital I, grave accent */
    0,                               /* 205, Capital I, accute accent */
    0,                               /* 206, Capital I, circumflex accent */
    0,                               /* 207, Capital I, umlaut */
    0,                               /* 208, Capital eth, Icelandic*/
    0,                               /* 209, Capital N, tilde*/
    0,                               /* 210, Capital O, grave accent */
    0,                               /* 211, Capital O, accute accent */
    0,                               /* 212, Capital O, circumflex accent */
    0,                               /* 213, Capital O, tidle */
    0,                               /* 214, Capital O, umlaut*/
    0,                               /* 215, Multiply sign */
    0,                               /* 216, Capital O, slash*/
    0,                               /* 217, Capital U, grave accent */
    0,                               /* 218, Capital U, accute accent */
    0,                               /* 219, Capital U, circumflex accent */
    0,                               /* 220, Capital U, umlaut */
    0,                               /* 221, Capital Y, accute accent */
    0,                               /* 222, Capital thorn, Icelandic */
    0,                               /* 223, Small sz ligature, German*/
    0,                               /* 224, Small a, grave accent */
    0,                               /* 225, Small a, accute accent */
    0,                               /* 226, Small a, circumflex accent */
    0,                               /* 227, Small a, tilde */
    0,                               /* 228, Small a, umlaut */
    0,                               /* 229, Small a, ring */
    0,                               /* 230, Small ae ligature */
    0,                               /* 231, Small c, cedilla */
    0,                               /* 232, Small e, grave accent */
    0,                               /* 233, Small e, accute accent */
    0,                               /* 234, Small e, circumflex accent */
    0,                               /* 235, Small e, umlaut */
    0,                               /* 236, Small i, grave accent */
    0,                               /* 237, Small i, accute accent */
    0,                               /* 238, Small i, circumflex accent */
    0,                               /* 239, Small i, umlaut */
    0,                               /* 240, Small eth, Icelandic*/
    0,                               /* 241, Small n, tilde*/
    0,                               /* 242, Small o, grave accent */
    0,                               /* 243, Small o, accute accent */
    0,                               /* 244, Small o, circumflex accent */
    0,                               /* 245, Small o, tidle */
    0,                               /* 246, Small o, umlaut*/
    0,                               /* 247, Division sign */
    0,                               /* 248, Small o, slash*/
    0,                               /* 249, Small u, grave accent */
    0,                               /* 250, Small u, accute accent */
    0,                               /* 251, Small u, circumflex accent */
    0,                               /* 252, Small u, umlaut */
    0,                               /* 253, Small y, accute accent */
    0,                               /* 254, Small thorn, Icelandic */
    0                                /* 255, Small y, umlaut */
#endif
};


static int  write_char_to_file (const int    c,
                                FILE *const  output_file);

static char *  write_char_to_mem (const int          c,
                                  char *             output_buff,
                                  const char *const  output_buff_end);

int  int_escape_html_mem_to_mem (const char *const   input_string,
                                   char *const         output_string,
                                   const size_t        output_size,
                                   const clock_t       t_slice,
                                   esc_html_context *  context);

int  int_escape_html_mem_to_file (const char *const   input_string,
                                    FILE *const         output_file,
                                    const clock_t       t_slice,
                                    esc_html_context *  context);

int  int_escape_html_file_to_file (FILE *const         input_file,
                                     FILE *const         output_file,
                                     const clock_t       t_slice,
                                     esc_html_context *  context);

/* -------------------------------------- VENEER FUNCTIONS -------------------------------------- */


/************************************************************************/
/* html_escape_memtomem                                                 */
/*                                                                      */
/* Function escapes the specified text into the supplied buffer.  Buffer*/
/* size is recommended to be sizeof(input) * 6.  Then all characters    */
/* can be escaped safely.                                               */
/*                                                                      */
/* Parameters: input       - input string.                              */
/*             output      - output string.                             */
/*             output_size - size of output string.                     */
/*                                                                      */
/* Returns:    0.                                                       */
/*                                                                      */
/************************************************************************/
int nb_html_escape_memtomem(const char *const input, char *const output, const size_t output_size)
{
  int			 rc = 0;
  esc_html_context	 context;

  context = NULL;
  while (rc = int_escape_html_mem_to_mem (input, output, output_size, 1, &context), rc == 0);

  return(rc);
}



/************************************************************************/
/* html_escape_memtofile                                                */
/*                                                                      */
/* Function escapes the specified text into the supplied file.          */
/*                                                                      */
/* Parameters: input       - input string.                              */
/*             output      - output file pointer                        */
/*                                                                      */
/* Returns:    0.                                                       */
/*                                                                      */
/************************************************************************/
int html_escape_memtofile(const char *const input, FILE *output)
{
  int			 rc = 0;
  esc_html_context	 context;

  context = NULL;
  while (rc = int_escape_html_mem_to_file(input, output, 1, &context), rc == 0);

  return(rc);
}


/************************************************************************/
/* html_escape_filetofile                                               */
/*                                                                      */
/* Function escapes the specified file into the supplied file.          */
/*                                                                      */
/* Parameters: input       - input file.                                */
/*             output      - output file.                               */
/*                                                                      */
/* Returns:    0.                                                       */
/*                                                                      */
/************************************************************************/
int html_escape_filetofile(FILE *input, FILE *output)
{
  int			 rc = 0;
  esc_html_context	 context;

  context = NULL;
  while (rc = int_escape_html_file_to_file(input, output, 1, &context), rc == 0);

  return(rc);
}


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/* Comments set to ===== so they don't get auto-included in BuildSHelp and BuildHTML :-) */

/*======================================================================*/
/* int_escape_html_mem_to_mem                                           */
/*                                                                      */
/* Process a 0 terminated sequence of chars, escaping characters which  */
/* are not allowed in HTML, writing the output to a buffer in memory.   */
/* On successful completion the output is 0 terminated.                 */
/*                                                                      */
/* Assumes:    A buffer of (string * 6) is really required to allow     */
/*             all characters in the sequence to be escaped.            */
/*                                                                      */
/* Parameters: input_string  - 0 terminating character input sequence.  */
/*             output_string - buffer to write output to.               */
/*             output_size   - size of buffer.                          */
/*             t_slice       - max amount of time allowed per call.     */
/*             context       - context from previous call.              */
/*                             (NULL for first)                         */
/*                                                                      */
/* Returns:    -1 (error), 0 (running), 1 (completed).                  */
/*                                                                      */
/*======================================================================*/
int  int_escape_html_mem_to_mem (const char *const  input_string,
                             char *const        output_string,
                             const size_t       output_size,
                             const clock_t      t_slice,
                             context_t **       context)
{
    int                rc = 0;
    const char *       in_s = input_string;
    char *             out_s = output_string;
    const char *const  out_end = output_string + output_size - 1;
    time_t             start_time = clock ();

    if (*context != NULL)
    {
        /* Continuation of a previous session */
        in_s    = (*context)->mem_to_mem.in_s;
        out_s   = (*context)->mem_to_mem.out_s;
    }
    else
    {
        /* New session */
        *context = malloc (sizeof (context_t));
        if (context == NULL)
        {
            rc = -1;
        }
        else
        {
            if (output_size > 0)
            {
                output_string[0] = 0;
                in_s             = input_string;
                out_s            = output_string;
            }
            else
            {
                rc = -1;
            }
        }
    }

    if (rc == 0)
    {
        int  count = 0;
        int  c;

        do
        {
            /* Every so often check if time slice has expired */
            if (++count % TIME_CHECK_INTERVAL == 0)
            {
                if (clock () - start_time < t_slice)
                {
                    (*context)->mem_to_mem.in_s  = in_s;
                    (*context)->mem_to_mem.out_s = out_s;
                    break;
                }
            }

            if ((c = *in_s++) == 0)
            {
                rc = 1;
            }
            else
            {
                out_s = write_char_to_mem (c,
                                           out_s,
                                           out_end);
                if (out_s == NULL)
                {
                    rc = -1;
                }
            }
        }
        while (rc == 0);
    }


    if (rc != 0)
    {
        /* Terminal condition */
        free (*context);
        *context = NULL;

        if (rc == 1)
        {
            /* Successful - put 0 terminator on end of output string */
            *out_s = 0;
        }
        else
        {
            /* Failure - make empty output string */
            output_string[0] = 0;
        }
    }

    return rc;
}



/*======================================================================*/
/* int_escape_html_mem_to_file                                          */
/*                                                                      */
/* Process a 0 terminated sequence of chars, escaping characters which  */
/* are not allowed in HTML, writing the output to an already opened file*/
/*                                                                      */
/* Parameters: input_string  - 0 terminating character input sequence.  */
/*             output        - FILE pointer to write output to.         */
/*             t_slice       - max amount of time allowed per call.     */
/*             context       - context from previous call.              */
/*                             (NULL for first)                         */
/*                                                                      */
/* Returns:    -1 (error), 0 (running), 1 (completed).                  */
/*                                                                      */
/*======================================================================*/
int  int_escape_html_mem_to_file (const char *const  input_string,
                              FILE *const        output_file,
                              const clock_t      t_slice,
                              context_t **       context)
{
    int           rc = 0;
    const char *  s = input_string;
    time_t        start_time = clock ();

    if (*context != NULL)
    {
        /* Continuation of previous session */
        s = (*context)->mem_to_file;
    }
    else
    {
        /* New session */
        *context = malloc (sizeof (context_t));
        if (*context == NULL)
        {
            rc = -1;
        }
        else
        {
            s = input_string;
        }
    }

    if (rc == 0)
    {
        int  count = 0;
        int  c;

        do
        {
            /* Every so often check if time slice has expired */
            if (++count % TIME_CHECK_INTERVAL == 0)
            {
                if (clock () - start_time < t_slice)
                {
                    (*context)->mem_to_file = s;
                    break;
                }
            }

            if ((c = *s++) == 0)
            {
                rc = 1;
            }
            else
            {
                rc = write_char_to_file (c,
                                         output_file);
            }
        }
        while (rc == 0);
    }

    if (rc != 0)
    {
        /* Terminal condition */
        free (*context);
        *context = NULL;
    }

    return rc;
}



/*======================================================================*/
/* int_escape_html_file_to_file                                         */
/*                                                                      */
/* Read characters from an already opened file, escaping the chars which*/
/* are not allowed in HTML, writing the output to an already opened file*/
/*                                                                      */
/* Parameters: input         - FILE pointer to read input from.         */
/*             output        - FILE pointer to write output to.         */
/*             t_slice       - max amount of time allowed per call.     */
/*             context       - context from previous call.              */
/*                             (NULL for first)                         */
/*                                                                      */
/* Returns:    -1 (error), 0 (running), 1 (completed).                  */
/*                                                                      */
/*======================================================================*/
int  int_escape_html_file_to_file (FILE *const    input_file,
                               FILE *const    output_file,
                               const clock_t  t_slice,
                               context_t **   context)
{
    int     c;
    int     rc = 0;
    int     count = 0;
    time_t  start_time = clock ();

    NB_UNUSED(context);
    /* In this case, the FILE pointers already take care of all the context
     * we need.
     */

    do
    {
        /* Every so often check if time slice has expired */
        if (++count % TIME_CHECK_INTERVAL == 0)
        {
            if (clock () - start_time < t_slice)
            {
                break;
            }
        }

        c = fgetc (input_file);
        if (c == EOF)
        {
            /* Could really be EOF or might be an error */
            if (ferror (input_file))
            {
                /* Error */
                rc = -1;
            }
            else
            {
                /* EOF - completed */
                rc = 1;
            }
        }
        else
        {
            rc = write_char_to_file (c,
                                     output_file);
        }
    }
    while (rc == 0);

    if (rc != 0)
    {
        /* Terminal condition */
        *context = NULL;
    }

    return rc;
}




/*======================================================================*/
/* write_char_to_file                                                   */
/*                                                                      */
/* Write a character to the output file, escaping it if necessary.      */
/*                                                                      */
/* Parameters: c           - character to write.                        */
/*             output_file - FILE pointer to write output to.           */
/*                                                                      */
/* Returns:    -1 (error), 0 (success).                                 */
/*                                                                      */
/*======================================================================*/
static int  write_char_to_file (const int    c,
                                FILE *const  output_file)
{
    int  rc = 0;

    /* Ensure that character is within allowed range */
    if (c >= (sizeof (escape) / sizeof (escape[0])))
    {
        rc = -1;
    }
    else
    {
        if (escape[c])
        {
            /* Character needs to be escaped, so write out numeric entity */
            if (fprintf (output_file,
                         "&#%03d;",
                         c) < 0)
            {
                rc = -1;
            }
        }
        else
        {
            /* Character doesn't need to be escaped, so write it out as is */
            if (fputc (c,
                       output_file) == EOF)
            {
                rc = -1;
            }
        }
    }

    return rc;
}



/*======================================================================*/
/* write_char_to_mem                                                    */
/*                                                                      */
/* Write a character to the output buffer, escaping it if necessary.    */
/*                                                                      */
/* Parameters: c           - character to write.                        */
/*             output_buff - buffer to write to.                        */
/*             output_end  - pointer to last byte in buffer.            */
/*                                                                      */
/* Returns:    NULL (failure), or pointer to next place to write to.    */
/*                                                                      */
/*======================================================================*/
static char *  write_char_to_mem (const int          c,
                                  char *             output_buff,
                                  const char *const  output_buff_end)
{
    /* Ensure that character is within allowed range */
    if (c >= (sizeof (escape) / sizeof (escape[0])))
    {
        output_buff = NULL;
    }
    else
    {
        if (escape[c])
        {
            /* Needs to be enough space for escape sequence and 0 terminator
             * on end of string.
             */
            if (output_buff + ESCAPE_SEQUENCE_LEN - 1 >= output_buff_end)
            {
                output_buff = NULL;
            }
            else
            {
                /* Character needs to be escaped, so write out numeric entity */
                if (sprintf (output_buff,
                             "&#%03d;",
                             c) != ESCAPE_SEQUENCE_LEN)
                {
                    output_buff = NULL;
                }
                else
                {
                    output_buff += ESCAPE_SEQUENCE_LEN;
                }
            }
        }
        else
        {
            /* Character doesn't need to be escaped, so write it out as is */
            if (output_buff < output_buff_end)
            {
                *output_buff++ = c;
            }
            else
            {
                output_buff = NULL;
            }
        }
    }

    return output_buff;
}
