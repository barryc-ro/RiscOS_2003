/************************************************************************/
/* File:    Main.c                                                      */
/* Purpose: Main file for Translator.                                   */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 17th February 1999                                */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */

#include "Main.h"
#include "Translate.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

Status_Info		 status;
static char		 error_buf[256];

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* print_help                                                           */
/*                                                                      */
/* Function prints out help information if the command params are       */
/* incorrect.                                                           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void print_help(void)
{
  printf("\nTranslate (%s, %s) Element 14 Ltd.\n", Module_MajorVersion, Module_Date);

  printf("\n  Utility to produce translations of components from supplied data.");
  printf("\n  Options:  -throwback   : Enable throwback reporting of errors.");
  printf("\n            -v           : Verbose output.");
  printf("\n            -marko       : Opening marker.");
  printf("\n            -markc       : Closing marker.");
  printf("\n            -htmlo       : HTML opening marker.");
  printf("\n            -htmlc       : HTML closing marker.");
  printf("\n            -m           : Mappings file.");
  printf("\n            -i           : Input file.");
  printf("\n            -o           : Output file.");
  printf("\n  Usage: translate {-throwback -v} -marko <mark> -markc <mark> -htmlo <mark>");
  printf("\n                   -htmlc <mark> -m <filename> -i <filename> -o <filename>\n");
}


/************************************************************************/
/* report_error                                                         */
/*                                                                      */
/* Function outputs the contents of 'text' to stdout, and if Throwback  */
/* is enabled and line_num != 0 a call to Throwback is sent too.        */
/*                                                                      */
/* Parameters: text     - text to place in stdout.                      */
/*             line_num - line number to report.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void report_error(int line_num, char *file, const char *format, ...)
{
  _kernel_swi_regs	 regs;
  va_list		 p;

  va_start (p, format);
  vsprintf (error_buf, format, p);
  va_end (p);

  if (line_num != 0)
  {
    if (status.throwback == true)
    {
      regs.r[0] = 2;
      regs.r[1] = NULL;
      regs.r[2] = (int) file;
      regs.r[3] = line_num;
      regs.r[4] = 0;
      regs.r[5] = (int) error_buf;

      _kernel_swi(DDEUtils_ThrowbackSend, &regs, &regs);
    }
    printf("ERROR in file '%s'\n  Line %d: %s\n", file, line_num, error_buf);
  }
  else
  {
    printf("ERROR: %s\n", error_buf);
  }
  status.clean_exit = false;
}


/************************************************************************/
/* reset_status                                                         */
/*                                                                      */
/* Function resets the status structure.                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void reset_status(void)
{
  status.throwback = false;
  status.verbose = false;
  status.open = NULL;
  status.close = NULL;
  status.html_open = NULL;
  status.html_close = NULL;
  status.mappings = NULL;
  status.input = NULL;
  status.output = NULL;

  status.input_fd = NULL;
  status.output_fd = NULL;
  status.msgtrans_buffer = NULL;

  status.line_counter = 0;
  status.good_trans = 0;
  status.good_normal = 0;
  status.good_html = 0;
  status.bad_trans = 0;

  status.clean_exit = true;
}


/************************************************************************/
/* free_status                                                          */
/*                                                                      */
/* Function free's the status structure.                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void free_status(void)
{
  if (status.open != NULL)
    free(status.open);
  if (status.close != NULL)
    free(status.close);
  if (status.html_open != NULL)
    free(status.html_open);
  if (status.html_close != NULL)
    free(status.html_close);
  if (status.mappings != NULL)
    free(status.mappings);
  if (status.input != NULL)
    free(status.input);
  if (status.output != NULL)
    free(status.output);
}


#ifdef DEBUGLIB
  /************************************************************************/
  /* debug_show_status                                                    */
  /*                                                                      */
  /* Function displays the contents of the status struct.                 */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void debug_show_status(void)
  {
    dprintf(("", "Status:\n"));
    dprintf(("", "Throwback:     %d\n", status.throwback));

    if (status.open != NULL)
      dprintf(("", "Open:          %s\n", status.open));
    if (status.close != NULL)
      dprintf(("", "Close:         %s\n", status.close));
    if (status.html_open != NULL)
      dprintf(("", "HTML_Open:     %s\n", status.html_open));
    if (status.html_close != NULL)
      dprintf(("", "HTML_Close:    %s\n", status.html_close));
    if (status.mappings != NULL)
      dprintf(("", "Mappings:      %s\n", status.mappings));
    if (status.input != NULL)
      dprintf(("", "Input:         %s\n", status.input));
    if (status.output != NULL)
      dprintf(("", "Output:        %s\n", status.output));
  }
#endif


/************************************************************************/
/* valid_parameters                                                     */
/*                                                                      */
/* Function checks to see if the parameters are valid.                  */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true (valid), false (invalid).                           */
/*                                                                      */
/************************************************************************/
bool valid_parameters(void)
{
  bool		 rc = true;	/* Will be set to false if there is a
  				   problem. */
  bool		 null_param = false;

  /* Open */
  if (status.open == NULL)
    rc = false;
  dprintf(("", "rc: %d\n", rc));
  /* Close */
  if (status.close == NULL)
    rc = false;
  dprintf(("", "rc: %d\n", rc));
  /* HTML Open */
  if (status.html_open == NULL)
    rc = false;
  dprintf(("", "rc: %d\n", rc));
  /* HTML Close */
  if (status.html_close == NULL)
    rc = false;
  dprintf(("", "rc: %d\n", rc));

  /* For the files we must ensure that they are valid filenames */

  /* Mappings */
  if (status.mappings == NULL)
  {
    dprintf(("", "Mappings NULL\n"));
    null_param = true;
    rc = false;
  }
  else
  {
    if (nb_file_exists(1, status.mappings, NULL, NULL) != NULL)
    {
      report_error(0, "", "File '%s' doesn't exist\n", status.mappings);
      dprintf(("", "Mappings doesn't exist\n"));
      rc = false;
    }
  }
  /* Input */
  if (status.input == NULL)
  {
    dprintf(("", "Input NULL\n"));
    null_param = true;
    rc = false;
  }
  else
  {
    if (nb_file_exists(1, status.input, NULL, NULL) != NULL)
    {
      report_error(0, "", "File '%s' doesn't exist\n", status.input);
      dprintf(("", "Input doesn't exist\n"));
      rc = false;
    }
  }
  /* Output file.  Don't check for it existing! */
  if (status.output == NULL)
  {
    dprintf(("", "Output NULL\n"));
    null_param = true;
    rc = false;
  }

  dprintf(("", "valid_params returning: %d\n", rc));

  if (null_param == true)
    print_help();

  return(rc);
}


/************************************************************************/
/* parameter_store_filename                                             */
/*                                                                      */
/* Function OS_FSControl 37's the filename and then stores it in the    */
/* specified variable.                                                  */
/*                                                                      */
/* Parameters: filename - location to store filename.                   */
/*             arg      - argument to check.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void parameter_store_filename(char **filename, char *arg)
{
  nb_canonicalise_path(filename, arg);
}


/************************************************************************/
/* parameter_store_marker                                               */
/*                                                                      */
/* Function GSTrans the marker and then stores it in the specified      */
/* variable.                                                            */
/*                                                                      */
/* Parameters: marker - location to store marker.                       */
/*             arg    - argument to check.                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void parameter_store_marker(char **marker, char *arg)
{
  _kernel_oserror	*er = NULL;
  char			*buffer = NULL;

  /* OK, call GSTrans with a whacking huge buffer. */
  er = nb_gstrans_string(&buffer, arg, 500);

  if (er == NULL)
  {
    /* Success.  Now lets move the string into something smaller. */
    nb_strcpy_malloc(marker, buffer);
    free(buffer);
  }
  else
  {
    printf("Invalid marker supplied\n");
  }
}


/************************************************************************/
/* parse_parameters                                                     */
/*                                                                      */
/* Function parses the supplied command line parameters and stores them */
/* as necessary, or returns false if incomplete or invalid.             */
/*                                                                      */
/* Parameters: argc/argv                                                */
/*                                                                      */
/* Returns:    true (valid), false (invalid).                           */
/*                                                                      */
/************************************************************************/
bool parse_parameters(int argc, char *argv[])
{
  int32		 counter = 0;
  bool		 unknown_encountered = false, rc = false;

  reset_status();

  /* Loop through the args and store them */
  dprintf(("", "Number of args: %d\n", argc));
  for (counter = 1; counter < argc; counter++)
  {
    dprintf(("", "Arg %d: %s\n", counter, argv[counter]));
    if (strncmp(argv[counter], "-", 1) == 0)
    {
      /* We have an argument.  We must now scan down through the possibilities, and
         assign as appropriate.
       */

      /* Throwback */
      if (nb_case_insensitive_strcmp(argv[counter], Arg_Throwback) == 0)
        status.throwback = true;

      /* Throwback */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_Verbose) == 0)
        status.verbose = true;

      /* Open comment marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_Open) == 0)
      {
        parameter_store_marker(&status.open, argv[counter+1]);
        dprintf(("", "Open marker\n"));
      }

      /* Close comment marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_Close) == 0)
      {
        parameter_store_marker(&status.close, argv[counter+1]);
        dprintf(("", "Close marker\n"));
      }

      /* HTML Open comment marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_HTMLOpen) == 0)
      {
        parameter_store_marker(&status.html_open, argv[counter+1]);
        dprintf(("", "HTML Open marker\n"));
      }

      /* HTML Close comment marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_HTMLClose) == 0)
      {
        parameter_store_marker(&status.html_close, argv[counter+1]);
        dprintf(("", "HTML Close marker\n"));
      }

      /* Mappings marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_Mappings) == 0)
      {
        parameter_store_filename(&status.mappings, argv[counter+1]);
        dprintf(("", "Mappings marker\n"));
      }

      /* Input File marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_Input) == 0)
      {
        parameter_store_filename(&status.input, argv[counter+1]);
        dprintf(("", "Input File marker\n"));
      }

      /* Output comment marker */
      else if (nb_case_insensitive_strcmp(argv[counter], Arg_Output) == 0)
      {
        parameter_store_filename(&status.output, argv[counter+1]);
        dprintf(("", "Output marker\n"));
      }

      /* Something */
      else
        unknown_encountered = true;
    }
  }

  if (unknown_encountered == false)
  {
    /* Must now validate the parameters */
    rc = valid_parameters();
  }

#ifdef DEBUGLIB
  debug_show_status();
#endif

  if ( (rc == false) || (unknown_encountered == true) )
    return(false);
  else
    return(true);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Main function                                                        */
/************************************************************************/
int main (int argc, char *argv[])
{
  /* Initialise ourselves with DebugLib */
  debug_initialise ("Translator", "ram::0.$.flibble", "");
  debug_output_device (DEBUGIT_OUTPUT);
  debug_atexit ();

  if (argc == 1)
  {
    status.clean_exit = false;
    print_help();
  }
  else
  {
    if (parse_parameters(argc, argv) == true)
    {
      dprintf(("", "Success!\n"));
      translate_file();
    }
    else
    {
      status.clean_exit = false;
    }
  }

  /* Clean up memory */
  free_status();

  if (status.clean_exit == true)
    return(EXIT_SUCCESS);
  else
    return(EXIT_FAILURE);
}
