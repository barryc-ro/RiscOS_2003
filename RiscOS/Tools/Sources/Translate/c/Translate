/************************************************************************/
/* File:    Translate.h                                                 */
/* Purpose: header file for Translate.c                                 */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 17th February 1999                                */
/*                Created.                                              */
/************************************************************************/

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Translate.h"
#include "HTMLEscape.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

static bool		add_zero;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* output_info                                                          */
/*                                                                      */
/* Function outputs details on what we are about to do.                 */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_info(void)
{
  if (status.verbose == true)
  {
    printf("Creating:    %s\n", status.output);
    printf("Source:      %s\n", status.mappings);
    printf("Template:    %s\n\n", status.input);
  }
}


/************************************************************************/
/* output_summary                                                       */
/*                                                                      */
/* Function outputs details on what we have done.                       */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_summary(void)
{
  if ( (status.verbose == true) || (status.clean_exit == false) )
  {
    printf("\nSummary:\n");
    printf("   Tokens translated:     %d (Normal %d, HTML %d)\n", status.good_trans,
           status.good_normal, status.good_html);
    printf("   Tokens NOT translated: %d\n\n", status.bad_trans);
  }
}


/************************************************************************/
/* setup_files                                                          */
/*                                                                      */
/* Function opens the three files in the appropriate manner.            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true (success), false (failure).                         */
/*                                                                      */
/************************************************************************/
bool setup_files(void)
{
  _kernel_oserror	*er = NULL;

  /* Attempt to open output file.  If this fails there isn't much point in continuing. */
  status.output_fd = fopen(status.output, "w+");

  if (status.output_fd == NULL)
  {
    report_error(0, "", "Unable to open '%s'\n", status.output);
    return(false);
  }

  /* Input file */
  status.input_fd = fopen(status.input, "r");

  if (status.input_fd == NULL)
  {
    report_error(0, "", "Unable to open '%s'\n", status.input);
    return(false);
  }

  /* Mappings file (via MessageTrans) */
  er = nb_messagetrans_open_file(0,status.mappings,&status.mappings_fd,&status.msgtrans_buffer);

  if (er != NULL)
  {
    /* Free up the buffer */
    if (status.msgtrans_buffer != NULL)
      free(status.msgtrans_buffer);
    status.msgtrans_buffer = NULL;

    return(false);
  }
  return(true);
}


/************************************************************************/
/* close_files                                                          */
/*                                                                      */
/* Function closes the two text files and the mappings file opened      */
/* via MessageTrans.                                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void close_files(void)
{
  int		 type;

  /* Close output file */
  fclose(status.output_fd);

  /* Set the filetype of the output file to whatever the input file was */
  nb_file_get_filetype(1, status.input, NULL, &type);
  nb_file_set_filetype(1, status.output, NULL, type);

  /* Close output file */
  fclose(status.output_fd);

  /* Close mappings file */
  if (status.msgtrans_buffer != NULL)
    nb_messagetrans_close_file(0, status.mappings_fd, status.msgtrans_buffer);
}


/************************************************************************/
/* translate_file                                                       */
/*                                                                      */
/* Function starts off the translation process.                         */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true (success), false (failure).                         */
/*                                                                      */
/************************************************************************/
bool translate_file(void)
{
  printf("Translator (%s, %s)\n", Module_MajorVersion, Module_Date);

  /* Open the files */
  if (setup_files() == true)
  {
    /* Proceed... */
    output_info();

    parse_input_file();

    close_files();

    output_summary();

    return(true);
  }
  else
  {
    status.clean_exit = false;
    return(false);
  }
}


/************************************************************************/
/* parse_input_file                                                     */
/*                                                                      */
/* Function parses the Input file, locates opening markers and          */
/* acts accordingly.                                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool parse_input_file(void)
{
  bool			 rc = false;
  char			*buffer = NULL;
  char			 c = 'a';
  char			 str[2];
  int			 size;

  add_zero = false;
  status.line_counter = 0;

  /* Play safe.  Allocate a buffer the size of the input file to store token in */
  size = nb_file_get_size(1, status.input, NULL);

  if ((buffer = malloc(size + 50)) == NULL)
  {
    rc = false;
  }
  else
  {
    buffer[0] = '\0';

    while(!feof(status.input_fd))
    {
      c = fgetc(status.input_fd);

      if (c == '\0')
        add_zero = true;

      str[0] = c;
      str[1] = '\0';

      /* Check to see if we have retrieved the EOF marker.  If we have don't copy it. */
      if (!feof(status.input_fd))
        strcat(buffer, str);

      /* If we are an EOL then increment line_counter and begin parsing line */
      if ( (c == 10) || (c == 13) || (c == 255) )
      {
        status.line_counter++;

        /* OK, now pass the string on to be parsed for markers. */
        if (parse_line(buffer) == false)
        {
          /* Buffer contained no markers, so just output it. */
          if ( (buffer[strlen(buffer)-1] == 10) && (add_zero == true) )
          {
            buffer[strlen(buffer)-1] = '\0';
            fprintf(status.output_fd, "%s", buffer);
            fputc(0, status.output_fd);
            fputc(10, status.output_fd);
          }
          else
          {
            fprintf(status.output_fd, "%s", buffer);
          }
        }
        add_zero = false;
        buffer[0] = '\0';
      }
    }
    free(buffer);
  }
  return(rc);
}


/************************************************************************/
/* match_markers                                                        */
/*                                                                      */
/* Function checks to see if the correct number of markers are on the   */
/* line.                                                                */
/*                                                                      */
/* Parameters: line   - line to check.                                  */
/*             open   - opening marker.                                 */
/*             close  - closing marker.                                 */
/*                                                                      */
/* Returns:    true (correct number), false (incorrect number).         */
/*                                                                      */
/************************************************************************/
bool match_markers(char *line, char *open, char *close)
{
  bool			 rc = false;

  if (strstr(line, open) != NULL)
  {
    if (strstr(line, close) != NULL)
    {
      rc = true;
    }
    else
    {
      report_error(status.line_counter, status.input, "Closing marker of type '%s' missing.",
                   close);
      rc = false;
    }
  }
  else
  {
    if (strstr(line, close) != NULL)
    {
      report_error(status.line_counter, status.input,
                   "Unmatched Closing marker of type '%s' detected.", close);
      rc = false;
    }
  }

  return(rc);
}


/************************************************************************/
/* parse_line                                                           */
/*                                                                      */
/* Function parses the supplied line of text and searches for markers.  */
/*                                                                      */
/* Parameters: line  - text to scan.                                    */
/*                                                                      */
/* Returns:    true (contains markers), false (no markers).             */
/*                                                                      */
/************************************************************************/
bool parse_line(char *line)
{
  bool			 rc = false;
  bool			 marker = false;
  bool			 html_marker = false;

  /* Look for Open markers */
  marker = match_markers(line, status.open, status.close);
  html_marker = match_markers(line, status.html_open, status.html_close);

  if ( (html_marker == false) && (marker == false) )
  {
    /* No markers found, so return */
    rc = false;
  }
  else
  {
    /* Markers to be dealt with */
    rc = true;
    find_markers(line);
  }
  return(rc);
}


/************************************************************************/
/* find_markers                                                         */
/*                                                                      */
/* Function scans the supplied string for markers.                      */
/*                                                                      */
/* Parameters: line  - text to scan.                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
bool find_markers(char *line)
{
  int			 counter = -1;
  int			 new_pos = 0;
  char			*tag = NULL;

  do
  {
    counter++;

    if (opening_marker(line, counter, status.open) == true)
    {
      new_pos = 0;
      if (marker_found(line, (counter + strlen(status.open)), status.open,status.close, &tag,
          &new_pos) == true)
      {
        substitute_token(tag, status.open, status.close, false);
      }
      counter = new_pos-1;
    }
    else if (opening_marker(line, counter, status.html_open) == true)
    {
      new_pos = 0;
      if (marker_found(line, (counter + strlen(status.open)), status.html_open, status.html_close,
                       &tag, &new_pos) == true)
      {
        substitute_token(tag, status.html_open, status.html_close, true);
      }
      counter = new_pos-1;
    }
    else
    {
      if ( (line[counter] == 10) && (add_zero == true) )
      {
        fputc(0, status.output_fd);
        fputc(10, status.output_fd);
        counter++;
      }
      else
      {
        fprintf(status.output_fd, "%c", line[counter]);
      }
    }
  }
  while (counter < (strlen(line)-1));

  return(true);
}



/************************************************************************/
/* opening_marker                                                       */
/*                                                                      */
/* Function determines if an opening marker begins at the point in the  */
/* string supplied.                                                     */
/*                                                                      */
/* Parameters: line      - string to check.                             */
/*             start_pos - starting position to check from.             */
/*             marker    - marker to check for.                         */
/*                                                                      */
/* Returns:    true (marker), false (not marker).                       */
/*                                                                      */
/************************************************************************/
bool opening_marker(char *line, int start_pos, char *marker)
{
  char			*buffer = NULL;
  int			 buf_size = 0;
  int			 pos = 0;
  int			 counter = 0;
  bool			 rc = false;

  /* Allocate a buffer as big as the marker */
  buf_size = strlen(marker);
  if ((buffer = malloc(buf_size + 2)) == NULL)
  {
    report_error(0, "", "ERROR: out of memory");
    return(false);
  }
  else
  {
    for (counter = start_pos; counter < (start_pos + buf_size); counter++)
    {
      buffer[pos] = line[counter];
      pos++;
    }
    buffer[pos] = '\0';

    if (strcmp(buffer, marker) == 0)
    {
      rc = true;
    }
    else
    {
      rc = false;
    }
  }
  free(buffer);
  return(rc);
}


/************************************************************************/
/* marker_found                                                         */
/*                                                                      */
/* Function scans the string from the point specified until an end      */
/* marker is found.  It then returns the found token, and the position  */
/* to continue outputting from.                                         */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
bool marker_found(char *line, int start_pos, char *open, char *marker, char **tag, int *new_pos)
{
  int			 buf_len = 0;
  int			 tag_count = 0;
  int			 end = 0;
  char			*tag_buf = NULL;
  bool			 found = false;
  bool			 finished = false;
  bool			 space_found = false;
  bool			 rc = false;
  int			 counter = 0;
  int			 found_count = 0;

  counter = start_pos -1;
  do
  {
    counter++;

    if (line[counter] == ' ')
    {
      space_found = true;
      finished = true;
    }
    else
    {
      if (opening_marker(line, counter, marker) == true)
      {
        found = true;
        finished = true;
        *new_pos = counter + strlen(marker);
      }
    }
  }
  while ( (counter < strlen(line)) && (finished == false) );

  if ( (found == false) || (space_found == true) )
  {
    /* An invalid token has been found */
    report_error(status.line_counter, status.input, "Closing marker of type '%s' missing.",
                 marker);

    /* We must output the rest of the line because of the screwup */
    fprintf(status.output_fd, "%s", open);

    for (found_count = start_pos; found_count < strlen(line); found_count++)
    {
      if ( (line[found_count] == 10) && (add_zero == true) )
      {
        fputc(0, status.output_fd);
        fputc(10, status.output_fd);
        found_count++;
      }
      else
      {
        fputc(line[found_count], status.output_fd);
      }
    }
    rc = false;
  }
  else
  {
    /* OK, we have a token.  Time to build it */
    buf_len = ( (*new_pos - start_pos) + 5);

    if ((tag_buf = malloc(buf_len + 1)) == NULL)
    {
      report_error(0, "", "Ran out of memory processing %s\n", status.input);
      return(false);
    }
    else
    {
      end = (*new_pos - (strlen(marker)));
      counter = -1;
      for (tag_count = start_pos; tag_count < end; tag_count++)
      {
        counter++;
        tag_buf[counter] = line[tag_count];
      }
      tag_buf[counter+1] = '\0';

      if (status.verbose == true)
        printf("Found Token: '%s'\n", tag_buf);

      *tag = tag_buf;
    }
    rc = true;
  }
  return(rc);
}


/************************************************************************/
/* substitute_token                                                     */
/*                                                                      */
/* Function takes the specified token and looks it up in the messages   */
/* file.  If present it is output, and true returned.  If not then      */
/* the original tag is output and an error raised.                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
bool substitute_token(char *token, char *open, char *close, bool html)
{
  bool			 rc = false;
  char			*result = NULL;

  if (lookup_token(token, &result) == true)
  {
    status.good_trans++;
    if (html == false)
    {
      status.good_normal++;
      fprintf(status.output_fd, "%s", result);
      free(result);
      rc = true;
    }
    else
    {
      status.good_html++;
      /* Must escape the html before outputting it. */
      html_escape_memtofile(result, status.output_fd);
    }
  }
  else
  {
    status.bad_trans++;
    fprintf(status.output_fd, "%s%s%s", open, token, close);
    report_error(status.line_counter, status.input, "Token '%s' cannot be translated.", token);
    rc = false;
  }
  return(rc);
}


/************************************************************************/
/* lookup_token                                                         */
/*                                                                      */
/* Function looks up the specified token in Mappings file.              */
/*                                                                      */
/* Parameters: token   - item to lookup.                                */
/*             result  - pointer to store result at.                    */
/*                                                                      */
/* Returns:    true (found), false (doesn't exit).                      */
/*                                                                      */
/************************************************************************/
bool lookup_token(char *token, char **result)
{
  bool			 rc = false;
  int			 len = 0;
  char			*buffer = NULL;

  len = nb_messagetrans_token_length(status.mappings_fd, token);

  if (len == 0)
  {
    /* Doesn't exist */
    rc = false;
  }
  else
  {
    if ((buffer = malloc(len + 10)) == NULL)
    {
      report_error(0, "", "Memory Exhausted looking up token '%s'", token);
      rc = false;
    }
    else
    {
      strncpy(buffer, nb_messagetrans_lookup(status.mappings_fd, token), len);
      buffer[len] = '\0';

      *result = buffer;

      rc = true;
    }
  }
  return(rc);
}


/************************************************************************/
/* add_zero_to_output                                                   */
/*                                                                      */
/* Function adds an ASCII 0 to the end of the supplied string and then  */
/* outputs to the supplied file pointer.                                */
/*                                                                      */
/* Parameters: file   - fp to output to.                                */
/*             str    - string to output with '\0' added.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void add_zero_to_output(FILE *file, char *buffer)
{
  if (buffer[strlen(buffer)-1] == 10)
  {
    buffer[strlen(buffer)-1] = '\0';
    fprintf(file, "%s", buffer);
    fputc(0, file);
    fputc(10, file);
  }
  else
  {
    fprintf(file, "%s", buffer);
  }
}
