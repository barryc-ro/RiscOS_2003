/* Change History:
 *
 *   IDJ: 21-Nov-91: changed obj_type to return directory for PC-partition
 *   IDJ: 30-Dec-94: removed arg limit (AQU-00456)
 *
 */

#include "VersionNum"

/* > c.diff - Paul's new thorts on longest common subsequences */

#define DEBUGGING 0

/*

Let the 2 sequences be a[1]...a[N]
                       b[1]...b[M]

Define Places[i] to be the set of items in seq. A that are equal to item
b[i]. This can be calculated in O(N+M), via a hash table.

Define CSS[j], the set of common subsequences starting at item b[j].

For each sequence k in CSS(j), let a[l] be the item corresponding to item
b[j]. Then sequence k has a corresponding sequence in CSS(j-1) iff a[l-1] in
Places(b[j-1]), (which is one longer, of course).

Hence we can consider all sequences by setting CSS(M)=Place(b[M]) and working
back through the file, increasing the length of all sequences in CSS(M) that
are still going (ie.the line above them is in the new Places() set), deleting
all sequences for which this is not true, and adding all the rest of Places()
as sequences of length 1.

As we delete them, we maintain knowledge of the longest.

So for each line i we do at most |Places(i)| + |Places(i+1)| operations,
hence total number of operations is of the order of

     M
     _
     >  | Places(i) |
     -
     1

Aho, Hopcroft, Ullman define this as 'p' and claim it is typically order n.
(worst case n^2, of course). I would claim that it's usually (n/K)^2, K some
fairly large number ~10-20, since there are usually (for source files anyway)
blank lines liberally scattered through the file.

In any case, the algorithm (used in the Unix 'diff' utility) they present is
p log n in time, and the one I have described is order p !

*/

#
#ifdef __STDC__
#  include <string.h>
#  include <stdlib.h>
#  define  DATE       __DATE__
#else
#  include <strings.h>
/* extern char *malloc(); */
#  define  DATE      Module_Date
#endif
#include <stdio.h>
#include <signal.h>
#include <ctype.h>
#include "kernel.h"
#include "CLX/host.h"
#include "CLX/dir.h"
#include "CLX/err.h"

#define  VSN     Module_MajorVersion
#define  BRIEF   "list differences between two text files"
#define  MINARGS 1
#define  SELF    "Diff"
#if DEBUGGING
#  define  OPTIONS "dDeEfFhHnlLNrRsStTxXzZ"
#  define  MAXARGS 8
#else
#  define  OPTIONS "dDeEfFhHnlLNrRsStTxX"
#  define  MAXARGS 7
#endif

#define  NEXT_ARG arg = (argc > (argno+1)) ? argv[++argno] : NULL

#define LINESEGSIZE   512       /* 512*512 lines should be enough */
#define MAXLEN        256
#define HASHSIZ       256       /* no need to keep it prime */

typedef struct entry_element {
  struct entry_element *next;
  char *name;
  int obj_type;
} entry_element, *entry_list;

struct section { struct { unsigned int top, len; } one, two; };
struct item { int line; struct item *next; };
static struct sequence {
  unsigned int line, len; struct sequence *next;
} *freelist = 0;
static struct bucket
{ int hashval;
  struct item *list;
  struct bucket *next;
  char text[1];                 /* in fact, as big as needed */
} *table[HASHSIZ];

typedef struct bucket *LineSeg[LINESEGSIZE];
typedef LineSeg *LineTable[LINESEGSIZE];
static LineTable *line_a, *line_b;
#define linea_(line) ((*(*line_a)[(line)/LINESEGSIZE])[(line)%LINESEGSIZE])
#define lineb_(line) ((*(*line_b)[(line)/LINESEGSIZE])[(line)%LINESEGSIZE])

static int crislf = 0;  /* Distinguish CR and LF by default */
static int equated = 0; /* Say if we equated any CR to LF */
static char *file1, *file2 = NULL;

static char *arg;
static int argno = 0;
static int tabsize = 0;
static int pad = 0;
static int structure = 0;
static int blanks = -1;
static int case_insensitive = 0;
static int fast = 0;
static int errors = 0;
static int large = 0;
static int different = 0;
#if DEBUGGING
static int debugging = 0;
#endif

static void diff_objects(char *, int, char *, int);

static char *my_malloc(int size)
{
  char *t = malloc(size);
  if (t==0) { err_fail("no more room"); ++errors; }
  return t;
}

static int maxline_too_big(unsigned maxline)
{
  if (maxline >= LINESEGSIZE*LINESEGSIZE)
  { err_report("too many source lines (> %u)", LINESEGSIZE*LINESEGSIZE);
    return 1;
  }
  return 0;
}

static void free_item(struct item *list)
{
  struct item *t;
  while (list != NULL) {
    t = list; list = list->next; free(t);
  }
}

static void free_sequence(struct sequence *list)
{
  struct sequence *t;
  while (list != NULL) {
    t = list; list = list->next; free(t);
  }
}

static void free_linetable(LineTable *t)
{
   int i;
   for (i = 0;  i < LINESEGSIZE;  ++i)
   { LineSeg *s = (*t)[i];
     free(s);
   }
   free(t);
}

static void free_tables()
{
  int i;
  for (i = 0; i < HASHSIZ; i++) {
    struct bucket *p = table[i];
    while (p != NULL) {
      struct bucket *temp;
      free_item(p->list);
      temp = p; p = p->next; free(temp);
    }
  }
  free_linetable(line_a);
  free_linetable(line_b);
  free_sequence(freelist);
}

static void merge(struct sequence *hd, int i, struct item *p,
           struct section *chunk, struct section *common)
{
  struct sequence *ls, *th, *atom;
  ls = hd;
  th = hd->next;
  /*printf("p %.8x th %.8x\n",p,th);*/
  while ( p || th ) {
    if ((p == 0) || ((th != 0) && (th->line>p->line + 1))) {
      /*
       * an existing sequence can't be continued the line above it isn't an
       * occurence of the current line - remove it, checking to see whether
       * it's longer than the current best.
       */
      ls->next = th->next;
      if (th->len>common->one.len) {
        common->two.len = common->one.len = th->len;
        common->two.top = i + 1;
        common->one.top = th->line;
      }
/*
      printf("removing sequence top %d, len %d\n", th->line, th->len);
*/
      th->next = freelist;
      freelist = th;
      th = ls->next;
    }
    else if (p->line < chunk->one.top)
      p = 0;
    else if (p->line >= chunk->one.top + chunk->one.len)
      /* the occurence of the current line is below the section we're
       * considering - skip it
       */
      p = p->next;
    else if ((th == 0) || (th->line < p->line + 1)) {
      /* an occurence of the current line is not part of an existing sequence,
       * add to the list of sequences.
       */
      if (freelist) {
        atom = freelist;
        freelist = freelist->next;
      } else {
        atom = (struct sequence *) my_malloc(sizeof(struct sequence));
        if (atom == NULL) return;
      }
      ls->next = atom;
      atom->next = th;
      atom->line = p->line;
      atom->len = 1;
      ls = atom;
/*
      printf("adding sequence top %d\n", p->line);
*/
      p = p->next;
    } else {
     /* sequence already on list, so move it's start up, and increment length */
      --th->line;
      ++th->len;
      ls = th;
/*
      printf("lengthening sequence top %d, len %d\n", th->line, th->len);
*/
      th = th->next;
      p = p->next;
    }
  }
/*
  printf("common file1: top %d len %d, file2: top %d len %d\n",
          common->one.top, common->one.len, common->two.top, common->two.len);
*/
}


static struct section lcs(struct section chunk)
{
  int i, errors_now;
  struct sequence hd;
  struct section common;
  hd.next = 0;
  common.one.len = common.two.len = 0;
  errors_now = errors;

  for (i = chunk.two.top + chunk.two.len - 1; i >= chunk.two.top; --i) {
    merge(&hd, i, lineb_(i)->list, &chunk, &common);
    if (errors != errors_now) return common;
  }
  merge(&hd, chunk.two.top - 1, NULL, &chunk, &common); /* end all sequences */
  return common;
}

static int difference(struct section chunk)
{
  struct section before, common, after;
  int changed, errors_now;

  if ((chunk.one.len == 0) && (chunk.two.len == 0)) return 0;

  if (chunk.one.len == 0) {
    if (chunk.one.top != 1)
      printf("after %s line %4d: %s",
              file1, chunk.one.top - 1, linea_(chunk.one.top - 1)->text);
    else
      printf("at start of %s\n", file1);
    for ( ; chunk.two.len > 0; ++chunk.two.top , --chunk.two.len)
      printf("add %s line %4d: %s",
              file2, chunk.two.top, lineb_(chunk.two.top)->text);
/*
    printf("add after file %s line %d, file %s line %d to %d\n",
            file1, chunk.one.top, file2, chunk.two.top, chunk.two.top + chunk.two.len);
*/
    return 1;
  }

  if (chunk.two.len == 0) {
    if (chunk.two.top != 1)
      printf("after %s line %4d: %s",
              file2, chunk.two.top - 1, lineb_(chunk.two.top - 1)->text);
    else
      printf("at start of %s\n", file2);
    for ( ; chunk.one.len > 0; ++chunk.one.top, --chunk.one.len)
      printf("remove %s line %4d: %s",
              file1, chunk.one.top, linea_(chunk.one.top)->text);

/*
    printf("remove line %d to %d from file %s\n",
            chunk.one.top, chunk.one.top + chunk.one.len, file1);
*/
    return 1;
  }

  if (chunk.one.len == chunk.two.len)
  {  unsigned len = chunk.one.len;
     unsigned l1 = chunk.one.top + len;
     unsigned l2 = chunk.two.top + len;
     while (len > 0)
     { --l1;  --l2;
       if (linea_(l1) != lineb_(l2)) break;
       --len;
     }
     if (len == 0) return 0;
  }

  errors_now = errors;
  common = lcs(chunk);
  if (errors != errors_now) return 0;

  if (common.one.len == 0) {
    printf("change %s, line %d to %d\n",
            file1, chunk.one.top, chunk.one.top + chunk.one.len - 1);
    for ( ; chunk.one.len > 0; ++chunk.one.top, --chunk.one.len)
      printf("  line %4d: %s", chunk.one.top, linea_(chunk.one.top)->text);
    printf("to %s, line %d to %d\n",
            file2, chunk.two.top, chunk.two.top + chunk.two.len - 1);
    for ( ; chunk.two.len > 0; ++chunk.two.top, --chunk.two.len)
      printf("  line %4d: %s", chunk.two.top, lineb_(chunk.two.top)->text);
/*
    printf("change file %s, line %d to %d to file %s, line %d to %d\n",
            file1, chunk.one.top, chunk.one.top + chunk.one.len,
            file2, chunk.two.top, chunk.two.top + chunk.two.len);
*/
    return 1;
  }

  before.one.top = chunk.one.top;
  before.one.len = common.one.top - chunk.one.top;
  before.two.top = chunk.two.top;
  before.two.len = common.two.top - chunk.two.top;;

  after.one.top = common.one.top + common.one.len;
  after.one.len = chunk.one.len - (after.one.top - chunk.one.top);
  after.two.top = common.two.top + common.two.len;
  after.two.len = chunk.two.len - (after.two.top - chunk.two.top);

  changed = difference(before);
  if (errors != errors_now) return 0;
  changed |= difference(after);
  return changed;
}

static char *rfgets(char *s, int n, FILE *stream)
{
  char *a = s;
  int col = 0;

  if (pad > 0)
    /*
     * because the tails of lines which overflow a line buffer are put into
     * the next line buffer, tab expansions may also be left over from the
     * previous line. The padding which did not fit on the previous line
     * must therefore be put at the start of this line.
     */
      for ( ; (n > 3) && (pad-- > 0) ; --n) *s++ = ' ';

  while (n > 2) {
    int ch = getc(stream);
    if (ch == EOF) {
      /* error or EOF */
      if (s == a) return NULL; /* no chars -> leave  */
      break;
    }
    switch (ch) {
      case '\0': /* turn zeros and ones into escaped zeros and ones */
      case '\1': *s++ = 1; ch += 1; --n; *s++ = ch; ++col; break;
      case '\r': /* line terminators */
      case '\n': *s++ = ch; *s = 0; return a;
      case '\t': if (tabsize) {
                   pad = tabsize - col % tabsize;
                   for ( ; (n > 2) && (pad-- > 0) ; --n) { *s++ = ' '; ++col; }
                   ++n; break;
                 }
                 /* else fall through to normal ch */
      default  : *s++ = ch; ++col; break;
    }
    --n;
  }
  *s = 0;
  return a;
}

static char next_ch(char **str, char last_ch)
{
  char ch = *(*str)++;
  if (ch == ' ') {
    if (blanks >= 0) {
      while (**str == ' ') (*str)++;
      switch (blanks) {
        case 0: ch = *(*str)++; break;
        case 1: return ' ';
        case 2: if (isalnum(**str) && isalnum(last_ch)) return ' ';
                else { ch = *(*str)++; break; }
      }
    } else return ' ';
  }
  if ((ch == '\r') && crislf) return '\n';
  if (isupper(ch) && case_insensitive) return tolower(ch);
  return ch;
}

static int hash(char *str)
{
  unsigned int h = 0;
  if (case_insensitive || crislf || (blanks >= 0)) {
    char ch = 0;
    while((ch = next_ch(&str, ch)) != 0) h = h * 37 + ch;
  } else
    while(*str) h = h * 37 + *str++;
  /* Finally ensure that h is fit for use in a table of size 2**N */
  h -= h >> 17;
  h += h >> 8;
  h -= h >> 5;
  return h;
}

static struct bucket *readline(FILE *stream)
{
  char line[MAXLEN];
  unsigned int h;
  struct bucket *chain;

  if (rfgets(line, MAXLEN, stream) == NULL) return NULL;

  h = hash(line);
  chain = table[h % HASHSIZ];
  while (chain) {
    if (h == chain->hashval) {
      if (case_insensitive || crislf || (blanks >= 0)) {
        char *l = line; char *t = chain->text;
        char last_t_ch = 0; char l_ch = 0; char t_ch = 0;
        int possible = 0; int save_crislf = crislf;

        crislf = 0;
        while((l_ch = next_ch(&l, l_ch)) != 0) {
          if ((t_ch = next_ch(&t, last_t_ch)) != l_ch) {
            if (t_ch != 0) possible = 1;
            break;
          } else last_t_ch = t_ch;
        }
        crislf = save_crislf;

        if (possible && crislf &&
           (((l_ch == '\r') ? '\n' : l_ch) == ((t_ch == '\r') ? '\n' : t_ch))) {
          ++equated; return chain;
        } else {
          if ((l_ch == 0) && (next_ch(&t, last_t_ch) == 0)) return chain;
        }
      } else
        if (strcmp(chain->text, line) == 0) return chain;
    }
    chain = chain->next;
  }

  chain = (struct bucket *) my_malloc(sizeof(struct bucket)-3+strlen(line));
  chain->next = table[h % HASHSIZ];
  table[h % HASHSIZ] = chain;
  chain->hashval = h;
  chain->list = NULL;
  strcpy(chain->text, line);
  return chain;
}

static int reada(FILE *stream)
{
  struct item *atom;
  unsigned int line = 1;
  unsigned int maxline = LINESEGSIZE-1;

  if ((line_a = (LineTable *) my_malloc(sizeof(LineTable))) == NULL) return 0;
  memset(line_a, 0, sizeof(LineTable));
  if (((*line_a)[0] =
       (LineSeg *)my_malloc(sizeof(LineSeg))) == NULL) return 0;

  while ((linea_(line) = readline(stream)) != NULL) {
    atom = (struct item *) my_malloc(sizeof(struct item));
    if (atom == NULL) return 0;
    atom->next = linea_(line)->list;
    linea_(line)->list = atom;
    atom->line = line;
    if (line == maxline) {
      maxline += LINESEGSIZE;
      if (maxline_too_big(maxline) ||
          ((*line_a)[maxline/LINESEGSIZE] =
           (LineSeg *)my_malloc(sizeof(LineSeg))) == NULL) return 0;
    }
    ++line;
  }
  return line - 1;
}

static int readb(FILE *stream)
{
  unsigned int line;
  unsigned int maxline = LINESEGSIZE-1;

  if ((line_b = (LineTable *) my_malloc(sizeof(LineTable))) == NULL) return 0;
  memset(line_b, 0, sizeof(LineTable));
  if (((*line_b)[0] =
       (LineSeg *)my_malloc(sizeof(LineSeg))) == NULL) return 0;

  for (line = 1; (lineb_(line) = readline(stream)) != NULL; ++line)
    if (line == maxline) {
      maxline += LINESEGSIZE;
      if (maxline_too_big(maxline) ||
          ((*line_b)[maxline/LINESEGSIZE] =
           (LineSeg *)my_malloc(sizeof(LineSeg))) == NULL) return 0;
    }
  return line - 1;
}

static void diff_files(char *arg1, char *arg2)
{
  FILE *stream1, *stream2;

  if (structure) {
    printf("\n'%s' and '%s' both exist\n", arg1, arg2);
    return;
  }
  printf("\nDiff files '%s' and '%s'\n", arg1, arg2);
  file1 = arg1; file2 = arg2;
  if ((stream1 = fopen(file1, "r")) == NULL) {
    err_report("couldn't open %s", file1); return;
  } else {
    if ((stream2 = fopen(file2, "r")) == NULL) {
      err_report("couldn't open %s", file2);
      fclose(stream1); return;
    }
  }

  if (fast) {
    int c1, c2;
    while (((c1 = getc(stream1)) == (c2 = getc(stream2))) && (c2 != EOF));
    printf("%s and %s ", file1, file2);
    puts((c1 == c2) ? "identical\n" : "different\n");
    if (c1 != c2) different = 1;
  } else {
    struct section whole;
    int j, errors_now;

    for(j = 0; j < HASHSIZ; ++j) table[j] = NULL;
    freelist = NULL; line_a = NULL; line_b = NULL;
    errors_now = errors;
    fseek(stream1, 0L, SEEK_SET);
    fseek(stream2, 0L, SEEK_SET);
    whole.one.top = whole.two.top = 1;
    whole.one.len = reada(stream1);
    if (errors_now == errors) whole.two.len = readb(stream2);
    if (errors_now == errors) {
      if (difference(whole) == 0) {
        printf("%s and %s ", file1, file2);
        puts((equated) ? "identical up to line terminators" : "identical");
      } else different = 1;
    }
    free_tables();
  }
  fclose(stream1); fclose(stream2);
}

static int ci_strcmp(const char *a, const char *b) /* case insensitive lexical comparison on strings */
{
  for (;;)
  {
    char c1,c2;
    if ((c1 = tolower(*a++)) != (c2 = tolower(*b++))) return c1 - c2;
    if (c1 == 0) return 0;     /* no need to check c2 */
  }
}

static entry_list enter_name_in(entry_list list, char *name, int entrytype)
/*
 * create and insert a record in an alphabetically descending list.
 * The list is descending because the names to go in the list will probably
 * be added alphabetically low to high order, therefore only 1 comparison
 * will be made for each entry.
 */
{
  entry_list start = list;
  entry_list prev = start;
  entry_list entry;

  entry = (entry_list) my_malloc(sizeof(entry_element));
  if (entry == NULL) err_fail("no more room");
  entry->name = (char *) my_malloc(strlen(name)+1);
  if (entry->name == NULL) err_fail("no more room");
  strcpy(entry->name, name);
  entry->obj_type = entrytype; entry->next = NULL;

  if (list != NULL) {
    while (list != NULL && ci_strcmp(name, list->name) < 0) {
      prev = list;
      list = list->next;
    }
    if (prev == list) { /* new head of list */
      entry->next = list;
      return entry;
    } else if (list == NULL) { /* new tail of list */
      prev->next = entry;
      return start;
    } else { /* insert between prev and list */
      prev->next = entry;
      entry->next = list;
      return start;
    }
  } else
    return entry;
}

static entry_list get_dir_entries(char *dir)
{
  dir_entry entry;
  entry_list list = NULL;
  dir_handle handle = dir_open(dir, NULL);
  if (handle == NULL) err_fail("couldn't open directory '%s'", dir);

  while(dir_next(handle, &entry))
  {
    list = enter_name_in(list, dir_entryname(entry), dir_entrytype(entry));
  }
  dir_close(handle);
  return list;
}

static void diff_dirs(char *d1, char *d2)
{
  entry_list this1, d1_entry_list, this2, d2_entry_list, prev1, prev2;
  char obj1[MAXLEN], obj2[MAXLEN];
  char *new_d1, *new_d2;
  int len;
  char sep_ch = host_dir_sep_char();

  this1 = d1_entry_list = get_dir_entries(d1);
  this2 = d2_entry_list = get_dir_entries(d2);
  prev1 = this1; prev2 = this2;
  strcpy(obj1, d1); len = strlen(d1); obj1[len++] = sep_ch; obj1[len] = 0;
  new_d1 = obj1 + len;
  strcpy(obj2, d2); len = strlen(d2); obj2[len++] = sep_ch; obj2[len] = 0;
  new_d2 = obj2 + len;
 /*
  * Whizz through the lists, if there is an entry in one list but not in
  * another then report the difference, and delete the entry from the list.
  * Then go through the now equal lists diffing the files or recursing for
  * directories.
  */

  printf("\nDiff directories '%s' and '%s'\n", d1, d2);

  while (this1 != NULL || this2 != NULL) {
    int comparison;
    if (this1 == NULL) comparison = -1;
    else if (this2 == NULL) comparison = 1;
    else comparison = ci_strcmp(this1->name, this2->name);

    if (comparison == 0) { /* obj exists in both dirs */
      prev1 = this1; this1 = this1->next;
      prev2 = this2; this2 = this2->next;
    } else {
      entry_list temp;
      if (comparison > 0) { /* obj exists in d1, but not d2 */
        printf("%s exists in %s, but not in %s\n", this1->name, d1, d2);
        temp = this1; this1 = this1->next; prev1->next = this1;
        if (temp == d1_entry_list) { d1_entry_list = this1; prev1 = this1; }
      } else { /* obj exists in d2, but not d1 */
        printf("%s exists in %s, but not in %s\n", this2->name, d2, d1);
        temp = this2; this2 = this2->next; prev2->next = this2;
        if (temp == d2_entry_list) { d2_entry_list = this2; prev2 = this2; }
      }
      free(temp->name); free(temp);
    }
  }

 /* All missing objects have been reported, now diff the two equal lists */
  this1 = d1_entry_list; this2 = d2_entry_list;
  while (this1 != NULL) {
    entry_list temp;
    strcpy(new_d1, this1->name); strcpy(new_d2, this2->name);
    diff_objects(obj1, this1->obj_type, obj2, this2->obj_type);
    temp = this1; this1 = this1->next; free(temp->name); free(temp);
    temp = this2; this2 = this2->next; free(temp->name); free(temp);
  }
}

static int exists(char *arg, int arg_type)
{
  if (arg == NULL) err_fail("missing file/directory name");
  if ((arg_type != DIR_DIR) && (arg_type != DIR_FILE))
    err_fail("'%s' does not exist", arg);
  return 1;
}

static int obj_type(char *obj)
{
  _kernel_osfile_block block;
  switch (_kernel_osfile(5, obj, &block)) {
    case 1:  return DIR_FILE;
    case 3:
    case 2:  return DIR_DIR;
    default: return DIR_NOTANENTRY;
  }
}

static void diff_objects(char *arg1, int arg1_type, char *arg2, int arg2_type)
{
  if (arg1_type != arg2_type) printf("'%s' and '%s' are different object types\n", arg1, arg2);
  else
    switch (arg1_type) {
      default:
      case DIR_FILE: diff_files(arg1, arg2); break;
      case DIR_DIR:  diff_dirs(arg1, arg2); break;
    }
}

static void handle_escape(int signo)
{
  signal(signo, handle_escape);
  exit(EXIT_FAILURE);
}

static void give_help()
{ char ch = host_dir_sep_char();
  fprintf(stderr, "\n%s vsn %s [%s] - %s\n", SELF, VSN, DATE, BRIEF);

  fprintf(stderr, "\n%s [options] file1 file2\n", SELF);
  fprintf(stderr, "%s [options] directory1 directory2\n", SELF);
  fprintf(stderr, "\nOptions:-\n");
  fprintf(stderr, "-d   show only the directory structure, no file diffs\n");
  fprintf(stderr, "-e   equate CR and LF\n");
  fprintf(stderr, "-f   fast diff, other options except '-d' ignored and no diffs reported\n");
  fprintf(stderr, "-l   handle large files better (but slower)\n");
  fprintf(stderr, "-n   no case sensitivity when comparing lines\n");
  fprintf(stderr, "-r   remove all spaces before comparing lines\n");
  fprintf(stderr, "-s   squash sequences of spaces to one space\n");
  fprintf(stderr, "-t   as for '-r', but '-s' when between two alphanumeric characters\n");
  fprintf(stderr, "-x   expand tabs to spaces (tab stops at multiples of 8)\n");
  fprintf(stderr, "-Xn  expand tabs to spaces (tab stops at multiples of n)\n");
  fprintf(stderr, "\nExamples:-\n");
  fprintf(stderr, "     %s -d old new\n", SELF);
  fprintf(stderr, "     %s -e old%csource new%csource\n", SELF, ch, ch);
  fprintf(stderr, "     %s -ntx old%cPascal%csources new%cPascal%csources\n", SELF, ch, ch, ch, ch);
  fprintf(stderr, "     %s -f old%cbinaries new%cbinaries\n", SELF, ch, ch);
  exit(EXIT_SUCCESS);
}

static void initialise()
{
  signal(SIGINT, handle_escape);
  err_init(SELF);
  host_init();
  dir_init();
}

int main(int argc, char **argv)
{
  int j;
  char *arg1 = NULL; char *arg2 = NULL;
  int arg1_type, arg2_type;
  initialise();

  /* parse help or identify args */
  for (j = 1;  j < argc;  ++j) {
    arg = argv[j];
    if (ci_strcmp("-help", arg) == 0 || ci_strcmp("-h", arg) == 0) {
      give_help();
    }
  }

  if (argc < (MINARGS+1)) err_fail("missing arguments");

  /* parse args */
  while ((NEXT_ARG) != NULL) {
    if (arg[0] == '-') {
      /* option */
      int opt = 1; int this_arg = argno;
      while ((argno == this_arg) && (arg[opt] != 0)) {
        if (strchr(OPTIONS, arg[opt]) == NULL) err_fail("unknown option '%c'", arg[opt]);
        else {
          switch (arg[opt]) {
            case 'd':
            case 'D': structure = 1; break;
            case 'e':
            case 'E': crislf = 1; break;
            case 'f':
            case 'F': fast = 1; break;
            case 'l':
            case 'L': large = 1; break;
            case 'n':
            case 'N': case_insensitive = 1; break;
            case 'r':
            case 'R': if (blanks > 0) err_fail("'-r', '-t' and '-s' are mutually exclusive options");
                      else blanks = 0;
                      break;
            case 's':
            case 'S': if ((blanks == 0) || (blanks == 2)) err_fail("'-r', '-t' and '-s' are mutually exclusive options");
                      else blanks = 1;
                      break;
            case 't':
            case 'T': if ((blanks == 0) || (blanks == 1)) err_fail("'-r', '-t' and '-s' are mutually exclusive options");
                      else blanks = 2;
                      break;
            case 'x':
            case 'X': tabsize = 0;
                      if (isdigit(arg[++opt]))
                        while (isdigit(arg[opt]))
                          tabsize = tabsize*10 + (arg[opt++] - '0');
                      else tabsize = 8;
                      --opt; break;
#if DEBUGGING
            case 'z':
            case 'Z': { int cont = 1;
                        while ((arg[opt] != 0) && cont) {
                          switch (arg[opt])  {
                            case 'd': case 'D': dir_debug(debugging); break;
                            case 'z': case 'Z': ++debugging; break;
                            default: cont = 0; break;
                          }
                          ++opt;
                        }
                        opt--;
                      }
                      break;
#endif

          }
        }
        opt++;
      }
    } else {
      if (arg1 == NULL) arg1 = arg;
      else
        if (arg2 == NULL) arg2 = arg;
        else err_fail("too many file/directory arguments");
    }
  }

  arg1_type = obj_type(arg1); arg2_type = obj_type(arg2);
  if (exists(arg1, arg1_type) && exists(arg2, arg2_type))
    diff_objects(arg1, obj_type(arg1), arg2, obj_type(arg2));
  if (errors > 0) return (1);
  return (different * 2);
}

