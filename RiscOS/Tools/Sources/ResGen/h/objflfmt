/*
  Title:        Acorn Object Format
  Status:       C Library Extension
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision$  EN 27-Apr-89
*/

/*
 * This header defines the essential structure of Acorn Object Format (AOF).
 */

#ifndef __objflfmt_h
#define __objflfmt_h

#ifndef int32
#  define int32 long int
#endif

#define  OBJ_HEAD      "OBJ_HEAD"
#define  OBJ_AREA      "OBJ_AREA"
#define  OBJ_IDFN      "OBJ_IDFN"
#define  OBJ_SYMT      "OBJ_SYMT"
#define  OBJ_STRT      "OBJ_STRT"

#define  AOF_RELOC     0xc5e2d080
#define  AOF_IMAGE1    0xc5e2d081
#define  AOF_IMAGE2    0xc5e2d083
#define  AOF_IMAGE3    0xc5e2d087

#define  AOF_VERSION   150

#define  AOF_ABSAT     0x01
#define  AOF_CODEAT    0x02
#define  AOF_COMDEFAT  0x04
#define  AOF_COMREFAT  0x08
#define  AOF_0INITAT   0x10
#define  AOF_RONLYAT   0x20
#define  AOF_PICAT     0x40
#define  AOF_DEBUGAT   0x80

typedef struct {
   int32 area_name;         /* idx in the string table of the area's name */
   char  area_AL, area_AT;  /* area alignment and attributes              */
   char  area_spare[2];
   int32 area_size;         /* Byte size of area - a multiple of 4        */
   int32 area_nrelocs;      /* no of relocation directivs in this area    */
   int32 area_base;         /* base address of an absolute area.          */
} aof_area;

typedef struct {
   int32 aof_type;          /* the object module type - usually AOF_RELOC */
   int32 aof_vsn;           /* usually AOF_VERSION                        */
   int32 aof_nareas;        /* the number of areas in this AOF file       */
   int32 aof_nsyms;         /* the number of symbols in this AOF file     */
   int32 aof_entryarea;     /* the index of the area containing the entry */
   int32 aof_entryoffset;   /* point, and its offset in the area, or 0, 0 */
   aof_area aof_areas[1];
} aof_header;

#define  REL_PCREL     1

typedef struct {
    int32 rel_offset;      /* offset in area of field to be relocated   */
unsigned  rel_sid:16,      /* index of symbol in SYMT w.r.t. relocating */
          rel_FT:2,        /* field type: 00=>byte, 01=>short, 10=>long */
          rel_R:1,         /* relocation type: pc relative if 1.        */
          rel_A:1,         /* if R==0, relocate rel (A==0 ? area : sym) */
          rel_spare:11,
          rel_type2:1;
} aof_reloc1;

typedef struct {
    int32 rel_offset;      /* offset in area of field to be relocated        */
unsigned  rel_sid:24,      /* index of symbol/area in SYMT w.r.t. relocating */
          rel_FT:2,        /* field type: 00=>byte, 01=>short, 10=>long      */
          rel_R:1,         /* relocation type: pc relative if 1.             */
          rel_A:1,         /* if R==0, relocate rel (A==0 ? area : sym)      */
          rel_spare:3,
          rel_type2:1;
} aof_reloc2;

#define  SYM_LOCALDEFAT    0x01
#define  SYM_REFAT         0x02
#define  SYM_GLOBALDEFAT   0x03
#define  SYM_REFDEFMASK    0x03
#define  SYM_ABSAT         0x04
#define  SYM_NOCASEAT      0x08
#define  SYM_WEAKAT        0x10
#define  SYM_STRONGAT      0x20
#define  SYM_COMMONAT      0x40

typedef struct {
    int32 sym_name;        /* offset in string table of symbol's name   */
    char  sym_AT;          /* symbol's attributes.                      */
    char  sym_spare[3];
    int32 sym_value;       /* the symbol's 'value'.                     */
    int32 sym_areaname;    /* index in STRT of name of area containing  */
                           /* the definition of this symbol, else 0.    */
} aof_symbol;

#endif
