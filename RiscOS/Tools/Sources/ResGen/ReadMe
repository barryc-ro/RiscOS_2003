The ResGen tool
---------------

ResGen is a tool for creating resource file data in a form suitable for
use by ResourceFS from a set of input files and corresponding resource
file names.

The format of the ResGen command is:

ResGen <Area name> <Object file> { <Binary file> <Resource file> }

<Area name> is the name of an AOF AREA in which the resource file data is
to be placed. A function of this name is exported as an external symbol which
can be used in C or assembler code to access the resource data.

<Object file> is the name of the object output file to be produced.

<Binary file> is the name of a file to be included in the resource file
data.

<Resource file> is the name within the ResourceFS which is used by the
application to refer to a file within the resource file data.

A <viafile> is a file containing a list of <Binary file> <Resource file> pairs
one per line. This may be used for convenience or to circument the 256
character command line length limit.

Example usage in C
------------------

...

extern int resourcefsfiles(void);

#define ADFSPATH  "ADFSFiler$Path"
#define FILERPATH "Resources:$.Resources.ADFSFiler."

OS_ErrorBlock *init(char *envstr, int instantiation, WorkSpace **r12)
{
    ...
    s = ADFSPATH;
/* Set up ADFSFiler$Path variable which may be changed by user to point to
 * a different messages file.
 */
    if (!xos_readvarval(s, 0, -1, 0, 0))
        xos_setvarval(s, FILERPATH, sizeof(FILERPATH), 0, 0);
/* Register the block of data generated by the ResGen tool with the ResourceFS.
 * This will create a file "Resources:Resources.ADFSFiler.Messages" which
 * contains the message data.
 *
 * 'resourcefsfiles' is a function which returns the address of the resource
 * data.
 */
    xresourcefs_registerfiles(resourcefsfiles());
    ...
}

...


Extract from MakeFile to build resources
----------------------------------------

...

filer: o.adfsfiler o.messages o.lib
    link -m -o ADFSFiler o.filer o.messages o.lib

o.messages: m.messages
    resgen resourcefsfiles o.messages m.messages Resources.ADFSFiler.Messages

...

The ModGen tool
---------------

ModGen is a tool for creating a Resources module (like the UK Messages module)
from a set of input files and corresponding resource file names.

The format of the ModGen command is:

ModGen <Filename> <Title> <Help> <Version> { <Binary file> <Resource file> |
-via <viafile> }

<Filename> is the filename in which the generared module is to be placed.

<Title> is the module title string. This should consist of ASCII alphanumeric
characters only and should be less than 16 characters long.

<Help> is the modules help string without the version and date information.
This may contain any non control characters including spaces. It should be
less than 16 characters long.

<Version> is the modules version number, this should be of the form V.VV

<Binary file>, <Resource file> and <viafile> are as for ResGen.

Examples
--------

ModGen Tools Tools "Tools Cache" 1.00 %.cc library.cc %.objasm library.objasm
%.link library.link
RMLoad Tools
Set Run$Path Resources:$.Library.,<Run$Path>

ModGen Messages Messages "UK Messages" 0.09 -via msglist

The BinAof Tool
---------------

BinAof is a tool for creating an AOF object file from a binary data file. This
AOF file can then be linked with C / ObjAsm code.

The format of the BinAof comand is:

BinAOF <binary file> <object file> <area name> <symbol> { <option> }

Options: -C : Put the binary data in a CODE area
         -D : Put the binary data in a DATA area (default)
         -RW : Mark the area as READ WRITE
         -RO : Mark the area as READ ONLY (default)

<Binary file> is the name of the binary file to be placed in <object file>.

<Object file> is the name of the object output file to be produced.

<Area name> is the name of an AOF AREA in which the binary file is to be
placed.

<symbol> is the root of a pair of symbols to be exported defined the start
and limit (end + 1) of the data. These symbols can be used in C to access
the data. The symbols exported are <symbol>__base and <symbol>__limit.

Examples:

BinAof !Palette o.!Palette BinAof$$data palette -D -RO
BinAof Templates o.Templates BinAof$$data templates

*** IMPORTANT NOTES ***

The symbols define the base and limit of the data area, when referenced
ordinarily in C they will refernce the *contents* of the object at that
address. To get the actual address you must take the address of the symbols
as defined in C.

*** VERY IMPORTANT ***

If the data is placed in a READ ONLY area (as it is by default) *DO NOT*
compile code which references these symbols with the -zm flag. This will result
in the wrong address being calculated.

If you need to access READ ONLY BinAof'd data from code which must be compiled
-zm you must create a separate C source containing two functions which return
the address and compile this single source without -zm. This can then be linked
with the rest of your code compiled -zm.

For example:

extern int palette__base, palette__limit;

int data_base(void)
{
    return (int)&palette__base;
}

int data_limit(void)
{
    return (int)&palette__limit;
}

The BinAsm Tool
---------------

BinAsm is a tool for creating assembler input data from a binary file. This
data may be include in an ObjAsm / AAsm assembly using the GET directive.

The format of the BinAsm command is:

BinASM <Binary infile> <ASM outfile>

<Binary infile> is the name of the binary input file.

<ASM outfile> is the resultant assembler output file.
