#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "objflfmt.h"

static void *check_malloc(int n)
{
    void *b;

    if (!n) return "";
    b = malloc(n);
    if (!b) {
        fprintf(stderr, "Out of memory\n");
        exit(1);
    }
    return b;
}

#define malloc(n) check_malloc(n)

#define IDFNSTR "BinAOF Version 1.00"

static FILE *open_chunkfile(char *name, int numchunks, int maxchunks)
{
    FILE *f;
    int hdr[3];

    f = fopen(name, "wb");
    if (!f) {
        fprintf(stderr, "Error opening %s for output", name);
        exit(1);
    }
    hdr[0] = 0xc3cbc6c5;
    hdr[1] = maxchunks;
    hdr[2] = numchunks;
    fwrite(hdr, sizeof(int), 3, f);
    return f;
}

static int write_entry(FILE *f, char *s, int offset, int size)
{
   int chunk_entry[4];

   size = (size + 3) & ~3;
   strcpy((char *)chunk_entry, s);
   chunk_entry[2] = offset;
   chunk_entry[3] = size;
   fwrite(chunk_entry, sizeof(int), 4, f);
   return offset + size;
}

static void write_data(FILE *f, void *data, int size)
{
    int z = 0;

    fwrite(data, size, 1, f);
    if (size & 3)
        fwrite(&z, 4 - (size & 3), 1, f);
}

static void write_word(FILE *f, int w)
{
    fwrite(&w, sizeof(int), 1, f);
}

static void write_head(FILE *f, int area_size, int area_flags)
{
    aof_header hdr;

    hdr.aof_type = AOF_RELOC;
    hdr.aof_vsn = 200;
    hdr.aof_nareas = 1;
    hdr.aof_nsyms = 3;
    hdr.aof_entryarea = 0;
    hdr.aof_entryoffset = 0;
    hdr.aof_areas[0].area_name = 4;
    hdr.aof_areas[0].area_AL = 2;
    hdr.aof_areas[0].area_AT = area_flags;
    hdr.aof_areas[0].area_spare[0] = 0;
    hdr.aof_areas[0].area_spare[1] = 0;
    hdr.aof_areas[0].area_size = area_size;
    hdr.aof_areas[0].area_nrelocs = 0;
    hdr.aof_areas[0].area_base = 0;
    write_data(f, &hdr, sizeof(hdr));
}

static void write_symbol(FILE *f, int name_ptr, int value)
{
    aof_symbol sym;

    sym.sym_name = name_ptr;
    sym.sym_AT = 3;
    sym.sym_spare[0] = 0;
    sym.sym_spare[1] = 0;
    sym.sym_spare[2] = 0;
    sym.sym_value = value;
    sym.sym_areaname = 4;
    write_data(f, &sym, sizeof(sym));
}

int main(int argc, char **argv)
{
    char *infile_buffer, *symbuff;
    char *resfile, *outfile, *symbol, *areaname;
    int size, strt_size;
    FILE *f;
    _kernel_osfile_block b;
    int offset;
    int area_flags;

    if (argc < 5) {
        fprintf(stderr, "Usage: BinAOF <binary file> <object file> <area name> <symbol> { <option> }\n");
        fprintf(stderr, "Options: -C : Put the binary data in a CODE area\n");
        fprintf(stderr, "         -D : Put the binary data in a DATA area (default)\n");
        fprintf(stderr, "         -RW : Mark the area as READ WRITE\n");
        fprintf(stderr, "         -RO : Mark the area as READ ONLY (default)\n");
        exit(1);
    }
    resfile = *++argv;
    outfile = *++argv;
    areaname = *++argv;
    symbol = *++argv;
    area_flags = AOF_RONLYAT;
    while (*++argv) {
        if (**argv == '-') {
            switch(tolower((*argv)[1])) {
                case 'c':
                    area_flags |= AOF_CODEAT;
                    break;
                case 'd':
                    area_flags &= ~AOF_CODEAT;
                    break;
                case 'r':
                    switch(tolower((*argv)[2])) {
                        case 'o':
                            area_flags |= AOF_RONLYAT;
                            break;
                        case 'w':
                            area_flags &= ~AOF_RONLYAT;
                            break;
                        default:
                            fprintf(stderr, "Unrecognised flag %s\n", *argv);
                            exit(1);
                    }
                    break;
                default:
                    fprintf(stderr, "Unrecognised flag %s\n", *argv);
                    exit(1);
            }
        } else {
            fprintf(stderr, "Illegal parameter %s\n", *argv);
        }
    }
    if (_kernel_osfile(17, resfile, &b) != 1) {
        fprintf(stderr, "Error opening %s\n", resfile);
        exit(1);
    }
    size = (b.start + 3) & ~3;
    infile_buffer = malloc(size);
    symbuff = malloc(strlen(symbol) + 1 + 7);
    b.load = (int)infile_buffer;
    b.exec = 0;
    if (_kernel_osfile(16, resfile, &b) != 1) {
        fprintf(stderr, "Error reading %s\n", resfile);
        exit(1);
    }
    f = open_chunkfile(outfile, 5, 5);
    offset = (3 + 4 * 5) * 4;
    offset = write_entry(f, "OBJ_IDFN", offset, sizeof(IDFNSTR));
    offset = write_entry(f, "OBJ_HEAD", offset, (6 + 5 * 1) * 4);
    offset = write_entry(f, "OBJ_AREA", offset, size);
    offset = write_entry(f, "OBJ_SYMT", offset, sizeof(aof_symbol) * 3);
    strt_size = ((strlen(areaname) + 3 + 1) & ~3) +
                ((strlen(symbol) + 6 + 3 + 1) & ~3) +
                ((strlen(symbol) + 7 + 3 + 1) & ~3);
    offset = write_entry(f, "OBJ_STRT", offset, strt_size + 4);
    write_data(f, IDFNSTR, sizeof(IDFNSTR));
    write_head(f, size, area_flags);
    write_data(f, infile_buffer, size);
    write_symbol(f, 4, 0);
    write_symbol(f, 4 + (strlen(areaname) + 3 + 1) & ~3, 0);
    write_symbol(f, 4 + ((strlen(areaname) + 3 + 1) & ~3) +
                        ((strlen(symbol) + 6 + 3 + 1) & ~3), size);
    write_word(f, strt_size + 4);
    write_data(f, areaname, strlen(areaname) + 1);
    strcpy(symbuff, symbol);
    strcat(symbuff, "__base");
    write_data(f, symbuff, strlen(symbuff) + 1);
    strcpy(symbuff, symbol);
    strcat(symbuff, "__limit");
    write_data(f, symbuff, strlen(symbuff) + 1);
    if (fclose(f) == EOF) {
        fprintf(stderr, "Error writing %s\n", outfile);
        exit(1);
    }
    return 0;
}
