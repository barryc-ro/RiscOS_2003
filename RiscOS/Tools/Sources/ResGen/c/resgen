/* resgen.c
 *
 *
 *  Copyright (c) 1999 by Pace Micro Technology plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *                      PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <locale.h>
#include <time.h>
#include <ctype.h>

#ifdef __riscos
#  define int32 size_t
#  include "kernel.h"
#  include "swis.h"
#endif

#include "VersionNum"

/* These header files are supplied by the CLX library */
#include "host.h"
#include "bytesex.h"
#include "wholefls.h"
#include "chunkfls.h"
#include "aof.h"
#include "filestamp.h"

static const char *program;

#define IDFNSTR "resgen " Module_FullVersion " [" Module_Date "]"

typedef struct ResFile {
        struct ResFile *next;
        char *infile;
        char *resfile;
} ResFile;

/* Allocate memory dynamically, but never return if the allocation fails.
 * On exit, requested memory has been allocated
 */
static void *check_malloc(size_t n)
{
        void *b = malloc(n);

        if (!b) {
                fprintf(stderr, "%s: Out of memory (unable to allocate %u bytes)\n", program, n);
                exit(EXIT_FAILURE);
        }

        return b;
}

enum {
        arg_PROGRAM,
        arg_OUTAREA,
        arg_OUTFILE,
        arg_BINFILE,
        arg_RESFILE,
        arg_MINUSVIA = arg_BINFILE,
        arg_VIAFILE
};

typedef struct {
        int32   next;
        int32   load;
        int32   exec;
        int32   size;
        int32   attr;
} resourcefs_header;

#define  ADD_R0_PC    0xE28F0000u
#define  MOV_PC_LR    0xE1A0F00Eu
#define  MOVS_PC_LR   0xE1B0F00Eu

typedef struct {
        int     adr;
        int     movs;
} code_fragment;

static union filehdr {
        struct {
                int32  cf_magic;                /* identifies this as a chunk file */
                int32  cf_maxchunks;            /* the size of the following array */
                int32  cf_numchunks;            /* The number of used entries..    */
                cf_entry cf_chunks[8];          /* ... actually as many as needed  */
                /* Must be followed by symbol - offsetof relies on this            */
                /* The rest of these are actually part of the data section         */
                aof_symbol symbol;              /* The symbol name                 */
                aof_header header;              /* The OBJ_HEAD chunk              */
                char   idfn[(sizeof(IDFNSTR) + 3) & ~3]; /* Creator program name   */

                /* The following must appear LAST as the data is appended here     */
                code_fragment area_code;        /* The code at the top of the AREA */
        } h;
        cf_header header;
} filehdr = {
        {
                CF_MAGIC,
                sizeof(filehdr.h.cf_chunks) / sizeof(*filehdr.h.cf_chunks),
                0,
                {
                        { "" },
                },
                {
                        4, /* offset of symbol text in string table */
                        SYM_GLOBALDEFAT,
                        0, /* value of symbol */
                        4, /* index of area name in STRT */
                },
                {
                        AOF_RELOC,
                        AOF_VERSION,
                        1, /* number of areas */
                        1, /* number of symbols */
                        0, 0, /* no entry address/offset */
                        { /* Area 1 (the one and only) */
                                4, /* offset into STRT of area name */
                                AOF_CODEAT | AOF_RONLYAT | 2,
                                0, /* size of area - filled in later */
                                0, /* no relocations */
                                0, /* no base address */
                        }
                },
                IDFNSTR,
                {
                        ADD_R0_PC,
                        MOVS_PC_LR
                }
        }
};

static struct {
        const char *remove_file;
        FILE *close_file;

} actions_atexit = {
        NULL,
        NULL
};

/* Default to 32-bit code.  Change comment, and initialise this to 0 to swap to 26 bit (and change help) */
static unsigned32 area_extra_flags = AOF_32bitAT;

static void callback_atexit(void)
{
        /* Close and delete the output fie unless the entire creation operation
         * was successful (before a successful exit, pointers are reset to NULL)
         */
        if (actions_atexit.close_file != NULL) {
                fclose(actions_atexit.close_file);
        }
        if (actions_atexit.remove_file != NULL) {
                remove(actions_atexit.remove_file);
        }
}

static void init_sex(void)
{
        /* Determine sex of machine.  Relies on memory encoding of integers */
        union {
                char c[sizeof(unsigned int)];
                unsigned int i;
        } gross_ugly_hack;
        gross_ugly_hack.i = 1;
        /* If that statement sets c[0], this is little endian and we don't need
         * sexing.  Only need sexing if we are big endian */
        bytesex_reverse(gross_ugly_hack.c[0] != 1);
}

/* Reverse an array of int32 (c specified in *bytes*)
 * Does nothing if running on little-endian machines,
 * otherwise all words in array are byte-reversed.
 */
static void reverse_header(void *mh, size_t c)
{
        int32 *p = mh;
        c >>= 2;
        while (c-- > 0) {
                *p = bytesex_hostval(*p);
                ++p;
        }
}

static void resgen_write_word(FILE *f, int32 w)
{
        w = bytesex_hostval(w);
        fwrite(&w, sizeof(w), 1, f);
}

static void resgen_die_missing_filename(const char *binary)
{
        fprintf(stderr, "Missing resource file for '%s'\n", binary);
        exit(EXIT_FAILURE);
}

static void resgen_die(const char *fmt, ...)
{
        va_list ap;

        fprintf(stderr, "%s: ", program);
        va_start(ap, fmt);
        vfprintf(stderr, fmt, ap);
        va_end(ap);
        fputc('\n', stderr);
        exit(EXIT_FAILURE);
}

static void align_fputs(const char *string, size_t length, FILE *f)
{
        size_t ptr;

        for (ptr=0; ptr<length; ++ptr) {
                fputc(string[ptr], f);
        }
        do {
                fputc('\0', f);
        } while (++ptr & 3);
}

#ifndef __riscos
static size_t resgen_derive_filetype(const char *filename)
{
        char *comma = strrchr(filename, ',');
        size_t type;
        int count = -1;

        if (comma && sscanf(comma+1, "%x%n", &type, &count) > 0 && count == 3) {
                return type;
        }
        return 0xFFF;
}

static void resgen_time_t_to_riscos(TimeStamp ts, int32 *load, int32 *exec)
{
        /* convert a time_t (seconds from 1 Jan 1970 00:00:00 UTC) to a RISC OS
         * date/time stamp (centiseconds from 1 Jan 1900 00:00:00 UTC)
         * The "load address" attribute used by RISCOS is equal to 0xFFFtttdd, where
         * ttt is a 12-bit file type and dd is bits 32..39 of the time stamp. This is
         * defined as the number of centiseconds since 01-Jan-1900.
         *
         * DOS and UNIX deal (in the main) with time as the number of seconds since
         * 01-Jan-1970, which is to be RISCOS time 0x33 6E99 6A00.  Hence the conversion
         * is relatively simple.   RISCOS time = 336E996A00h + 100*UNIX time
         */
        int32 t_hi, t_lo;

        t_hi = 0x336E99 + (ts >> 16) * 100;
        t_lo = 0x6A00 + (ts & 0xFFFF) * 100;

        *load = (*load & ~0xFF) | ((t_hi + (t_lo >> 16)) >> 16);
        *exec = (t_hi << 16) + t_lo;
}
#endif

static void resgen_copy_file_information(FILE *f, int32 length, char *filename, const char *resfile)
{
        resourcefs_header h;
        const size_t namelen = strlen(resfile);

#ifdef __riscos
        _kernel_oserror *e = _swix(OS_File, _INR(0,1)|_OUTR(2,5), 5, filename,
                &h.load, &h.exec, &h.size, &h.attr);
        if (e) {
                resgen_die("%s\n", e->errmess);
        }
#else
        TimeStamp ts;

        h.attr = 3;
        h.size = length;
        h.exec = 0;
        h.load = 0xFFF00000 | (resgen_derive_filetype(filename) << 8);
        ts = filestamp_get(filename);
        if (ts != -1) {
                resgen_time_t_to_riscos(ts, &h.load, &h.exec);
        }
#endif
        h.next = sizeof(h) + ((namelen + 4) & ~3) + 4 + ((length + 3) & ~3);
        if (bytesex_reversing()) reverse_header(&h, sizeof(h));
        fwrite(&h, 1, sizeof(h), f);
        align_fputs(resfile, namelen, f);
        resgen_write_word(f, length + 4);
}

static ResFile **resgen_add_file(ResFile **pres, const char *load, const char *resfile, int32 *totalsize)
{
        ResFile *r;
        const size_t extra = strlen(resfile) + 1;
        int32 objsize;

        r = *pres = check_malloc(sizeof(*r) + extra + strlen(load) + 1);
        r->next = NULL;
        r->resfile = (char *) (r+1);
        r->infile = r->resfile + extra;
        strcpy(r->resfile, resfile);
        strcpy(r->infile, load);

        objsize = wf_filesize(r->infile);
        if (objsize == -1) {
                resgen_die("Unable to read length of file %s\n", load);
        }

        *totalsize += ((objsize + 3) & ~3) + 4 + sizeof(resourcefs_header) + ((strlen(r->resfile) + 4) & ~3);

        return &r->next;
}

static char *resgen_skip_spaces(char *ptr, char *eob)
{
        while (ptr < eob && isspace(*ptr)) {
                ++ptr;
        }

        return ptr == eob ? NULL : ptr;
}

static char *resgen_skip_string(char *ptr, char *eob)
{
        while (ptr < eob && !isspace(*ptr)) {
                ++ptr;
        }

        return ptr;
}

static ResFile **resgen_process_via(ResFile **pres, char *filename, int32 *total)
{
        int32 size;
        char *buffer, *ptr, *eobuffer;

        size = wf_filesize(filename);
        if (size == -1) {
                fprintf(stderr, "%s: unable to read size of via file %s\n", program, filename);
                exit(EXIT_FAILURE);
        }
        if (size == 0) {
                fprintf(stderr, "%s: warning: empty via file %s\n", program, filename);
                return pres;
        }

        buffer = check_malloc(size + 1);

        if (wf_load(filename, buffer, size) == -1) {
                fprintf(stderr, "%s: unable to load via file %s\n", program, filename);
                exit(EXIT_FAILURE);
        }

        eobuffer = buffer + size;
        *eobuffer = '\0'; /* Ensure a zero terminator */

        for (ptr = buffer; ptr < eobuffer; ) {
                char *binfile = resgen_skip_spaces(ptr, eobuffer);

                if (binfile) {
                        ptr = resgen_skip_string(binfile, eobuffer);
                        *ptr++ = '\0';
                        if (ptr < eobuffer) {
                                char *resfile = resgen_skip_spaces(ptr, eobuffer);
                                if (resfile == NULL) {
                                        resgen_die_missing_filename(binfile);
                                }
                                else {
                                        ptr = resgen_skip_string(resfile, eobuffer);
                                        *ptr++ = '\0';
                                        pres = resgen_add_file(pres, binfile, resfile, total);
                                }
                        }
                }
                else {
                        break; /* WTF? */
                }
        }

        free(buffer);
        return pres;
}

static void resgen_write_header(FILE *f)
{
        const size_t size = sizeof(filehdr);
        reverse_header(&filehdr.h, size);
        fwrite(&filehdr.h, 1, size, f);
        reverse_header(&filehdr.h, size);
}

static int32 resgen_write_chunk_entry(const char *key, int32 offset, int32 size)
{
        cf_entry *e;

        e = &filehdr.h.cf_chunks[filehdr.h.cf_numchunks++];
        if (filehdr.h.cf_numchunks >= sizeof(filehdr.h.cf_chunks) / sizeof(*filehdr.h.cf_chunks)) {
                resgen_die("Internal error: too many chunks in output");
        }
        /* Align sizes */
        size = (size + 3) & ~3;
        (void) memcpy(&e->cfe_key[0], key, CF_KEYSIZE);
        /* Reverse this so that when the final header reverse is done,
         * it comes out the right way around again
         */
        reverse_header(&e->cfe_key[0], sizeof(e->cfe_key));

        e->cfe_offset = offset;
        e->cfe_size = size;

        return offset + size;
}

enum warning_flags {
        warn_ZERO_LENGTH_FILES = 1
};

static void resgen_banner(void)
{
        static int banner_shown = 0;

        if (!banner_shown++) {
                fprintf(stderr, "%s " Module_FullVersion " [" Module_Date "]\n", program);
        }
}

static void resgen_newline(void)
{
        fputc('\n', stderr);
}

static void resgen_usage(void)
{
        fputs("Syntax: ", stderr);
        fputs(program, stderr);
        fputs(" <area name> <output file> [<local file> <ResourceFS name> | -via <viafile>]\n", stderr);
}

static void resgen_help(void)
{
        resgen_banner();
        resgen_newline();
        resgen_usage();
        fputs("\nOptions:\n\n"
                "-help          Display this information\n"
                "-26bit         Function uses APCS-R\n"
                "-32bit         Function uses APCS 3/32 (default)\n"
                "-w<options>    Suppress warnings:\n"
                "               -wa     Suppress zero length file warning\n\n",
                stderr);
}

static void resgen_check_args(int argc)
{
        if (argc < 3) {
                resgen_banner();
                resgen_newline();
                resgen_usage();
                exit(EXIT_FAILURE);
        }
}


int main(int argc, char *argv[])
{
        const char *outfile, *outarea;
        int opt;
        int32 total = 0, offset = offsetof(union filehdr, h.symbol);
        ResFile *res = NULL, **pres = &res;
        FILE *f;
        int warnings = 0;

        host_init();
        program = strrchr(argv[arg_PROGRAM], host_dir_sep_char());
        program = program ? program+1 : argv[arg_PROGRAM];
        init_sex();
        atexit(callback_atexit);

        for (opt = arg_PROGRAM + 1; opt < argc; ++opt) {
                const char *arg = argv[opt];
                if (*arg++ != '-') break;
                ++argv;
                --argc;
                if (strcmp(arg, "help") == 0) {
                        resgen_help();
                        exit(EXIT_SUCCESS);
                }
                else if (tolower(*arg) == 'w') {
                        ++arg;
                        if (!*arg) {
                                warnings = -1;
                        }
                        else for (;*arg;++arg) {
                                char c = tolower(*arg);
                                if (isalpha(c)) {
                                        warnings |= 1<<(c - 'a');
                                }
                        }
                }
                else if (strcmp(arg, "32bit") == 0) {
                        area_extra_flags |= AOF_32bitAT;
                }
                else if (strcmp(arg, "26bit") == 0) {
                        area_extra_flags &= ~AOF_32bitAT;
                }
                else if (*arg == '-') {
                        /* Special marker for end of options - allows you to have names
                         * starting with - characters
                         */
                        break;
                }
                else {
                        fprintf(stderr, "%s: Unrecognised flag '%s'\n", program, arg);
                        exit(EXIT_FAILURE);
                }
        }

        resgen_check_args(argc);

        outfile = argv[arg_OUTFILE];
        outarea = argv[arg_OUTAREA];

        for (opt = arg_BINFILE; opt < argc; ++opt) {
                const char *arg = argv[opt];
                if (*arg == '-') {
                        if (*++arg == 'v') {
                                if (++opt >= argc) {
                                        resgen_die_missing_filename(arg);
                                }
                                pres = resgen_process_via(pres, argv[opt], &total);
                        }
                        else {
                                fprintf(stderr, "%s: Unrecognised flag '%s'\n", program, arg);
                                exit(EXIT_FAILURE);
                        }
                }
                else {
                        if (++opt >= argc) {
                                resgen_die_missing_filename(arg);
                        }
                        pres = resgen_add_file(pres, arg, argv[opt], &total);
                }
        }

        if (res == NULL) {
                fprintf(stderr, "Warning: No resource files specified\n");
        }

        /* Add space for the two instructions of code, and the 4 bytes of terminator data at end of data */
        total += sizeof(code_fragment) + 4;

        f = fopen(outfile, "wb");
        if (!f) {
                fprintf(stderr, "%s: Unable to open output file %s\n", program, outfile);
                exit(EXIT_FAILURE);
        }

        actions_atexit.close_file = f;
        actions_atexit.remove_file = outfile;

        /* Construct the chunk declarations */
        resgen_write_chunk_entry(OBJ_SYMT, offsetof(union filehdr, h.symbol), sizeof(filehdr.h.symbol));
        resgen_write_chunk_entry(OBJ_IDFN, offsetof(union filehdr, h.idfn), sizeof(IDFNSTR));
        resgen_write_chunk_entry(OBJ_HEAD, offsetof(union filehdr, h.header), sizeof(filehdr.h.header));
        offset = resgen_write_chunk_entry(OBJ_AREA, offsetof(union filehdr, h.area_code), total);
        resgen_write_chunk_entry(OBJ_STRT, offset, 5 + strlen(outarea));
        filehdr.h.header.aof_areas[0].area_size = total;
        filehdr.h.header.aof_areas[0].area_attributes |= area_extra_flags;
        if (area_extra_flags & AOF_32bitAT) {
		/* 32-bit APCS - do not restore flags from LR */
                filehdr.h.area_code.movs = MOV_PC_LR;
        }

        /* Reverse the ID string so that it gets re-reversed properly when data is saved */
        reverse_header(&filehdr.h.idfn[0], sizeof(filehdr.h.idfn));

        /* Write out the header - then write the ResourceFS data, then the string table */
        resgen_write_header(f);


        for (; res; res=res->next) {
                int32 infile_length = wf_filesize(res->infile);
                void *filebuf;

                if (infile_length == -1) {
                        resgen_die("Unable to read length of '%s'", res->infile);
                }
                if (infile_length == 0) {
                        if (!(warnings & warn_ZERO_LENGTH_FILES)) {
                                fprintf(stderr, "Warning: zero length file: '%s'\n", res->infile);
                        }
                }

                resgen_copy_file_information(f, infile_length, res->infile, res->resfile);

                /* avoid malloc(0) because that exhibits implementation dependent behaviour */
                filebuf = malloc(infile_length ? infile_length : 1);
                if (filebuf == NULL) {
                        /* Probably too big - copy by parts */
                        FILE *in = fopen(res->infile, "rb");
                        if (in == NULL) {
                                resgen_die("Unable to open file '%s'", res->infile);
                        }
                        else {
                                char buffer[BUFSIZ];

                                for (;;) {
                                        size_t count = fread(buffer, 1, sizeof(buffer), in);
                                        if (count > 0) {
                                                fwrite(buffer, 1, count, f);
                                                continue;
                                        }
                                        break;
                                }
                                fclose(in);
                        }
                }
                else {
                        if (wf_load(res->infile, filebuf, infile_length) == -1) {
                                resgen_die("Unable to load file '%s'", res->infile);
                        }
                        else {
                                fwrite(filebuf, 1, infile_length, f);
                        }
                        free(filebuf);
                }

                while (infile_length & 3) {
                        fputc('\0', f);
                        ++infile_length;
                }
        }

        /* Terminate the ResourceFS chain - this is the last word in OBJ_AREA */
        resgen_write_word(f, 0);

        resgen_write_word(f, (strlen(outarea) + 5 + 3) & ~3);
        align_fputs(outarea, strlen(outarea), f);

        if (fclose(f) == EOF) {
                resgen_die("Unable to write output file %s", outfile);
        }

        actions_atexit.remove_file = NULL;
        actions_atexit.close_file = NULL;

        /* It worked! */
        return 0;
}
