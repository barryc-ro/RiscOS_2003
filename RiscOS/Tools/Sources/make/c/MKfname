/* Title:   MKfname.c
 * Purpose: filename processing
 * Author:  IDJ
 * History: 17-Jul-90: IDJ: created
 *          26-Apr-91: IDJ: made filename cmp case-insensitive
 *
 *          Re-release
 *          08-Nov-91: IDJ: fixed MKfname_contract calculation when whole of
 *                          prefix matches start of full filename, but the
 *                          "prefix" part is not a directory eg:
 *                          filename == $.foolib.lib
 *                          prefix   == $.foo
 *                          released version would turn filename into
 *                          @.lib.lib !!!!!!
 *          
 *          24-Jan-92: IDJ: corrected above bug-fix!
 */


/* NOTE: IDJ 17-Jul-90
 *       Here we expand/contract filenames.  Remember that filenames are always
 *       relative to blah when the makefile is in blah.makefile (ie the prefix)
 *       Full pathnames are contracted to something relative to @ (the notional
 *       'current' directory).
 *
 */

#include <string.h>
#include <stdio.h>

#include "werr.h"

#include "bool.h"
#include "utils.h"

#include "MKfname.h"

extern void MKfname_contract(char *result, char *full_pathname, char *prefix)
{
   int len_full = strlen(full_pathname);
   int len_prefix = strlen(prefix);

   if (!strcmp(full_pathname, prefix))
   {
      result[0] = '@'; result[1] = 0;
   }
   else if (strstr(full_pathname, prefix) == full_pathname
            && full_pathname[len_prefix] == '.')     
   {
      /* --- whole prefix matches --- */
      sprintf(result, "@%s", (len_full > len_prefix+1)?&full_pathname[len_prefix]:"");
   }
   else   /* --- see how much matches --- */
   {
      int save_pos = 0, pos = 0, num_hats = 1, i;
      BOOL same = TRUE;

      /* --- repeatedly scan to dot --- */
      /* NB they can't be exactly the same cos of strstr test above! */
      do
      {
         if (prefix[pos] == '.') save_pos = pos;
         if (full_pathname[pos] != prefix[pos] || full_pathname[pos] == 0 || prefix[pos] == 0)
             same = FALSE;
         pos++;
      } while(same == TRUE);
                                                                                
      /* --- bale out if no match at all --- */
      if (save_pos == 0)
      {
         strcpy(result, full_pathname);
         return;
      }
 
      /* --- now we have found where they match to, so now calc num. hats --- */
      pos = save_pos+1;
      while (prefix[pos] != 0)
      {
         if (prefix[pos++] == '.') num_hats++;
      }
      strcpy(result, "@");
      for (i=0; i<num_hats; i++) strcat(result, ".^");
      strcat(result, &full_pathname[save_pos]);
   }  
}


extern void MKfname_expand(char *result, char *contracted_filename, char *prefix)
{
   int num_hats = 0, pos = 0, num_dots = 0;

   /* --- check if filename needs to be expanded at all!! --- */
   if (contracted_filename[0] != '@')
   {
      strcpy(result, contracted_filename);
      return;
   }

   /* --- count number of hats --- */
   while (contracted_filename[pos] != 0)
   {
      if (contracted_filename[pos++] == '^') num_hats++;
   }

   /* --- backtrack in prefix by num hats --- */
   strcpy(result, prefix);
   pos = strlen(prefix);
   while (num_dots < num_hats && pos >= 0)
   {
      if (result[pos] == '.')
      {
          num_dots++;
          result[pos] = 0;
      }
      pos--;
   }

   /* --- put in rest of filename --- */
   if (cistrcmp(contracted_filename, "@"))
   {
      pos = 0;
      while (contracted_filename[pos] == '@' || contracted_filename[pos] == '.' ||contracted_filename[pos] == '^')
      {
         pos++;
      }
      strcat(result, ".");
      strcat(result, &contracted_filename[pos]);
   }
}
