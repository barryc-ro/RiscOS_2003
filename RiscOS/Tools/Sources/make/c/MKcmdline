/* Title:   MKcmdline.c
 * Purpose: Build an amu cmdline
 * Author:  IDJ
 * History: 13-Jul-90: IDJ: created
 *          06-Mar-91: IDJ: added interactive help
 *
 *          Re-release started (30-Oct-91 IDJ)
 *          31-Oct-91: IDJ: changed call to Mktask_request_taskwindow (DDE-0746)
 *                          Note: in this case we can't lock the project but then
 *                          this case is probably the user's fault(?)
 *
 */

#include <string.h>

#include "dbox.h"
#include "help.h"

#include "global.h"
#include "types.h"
#include "MKtask.h"

#include "MKcmdline.h"

#define MKcmdline_IContinue  2
#define MKcmdline_IIgnore    3
#define MKcmdline_INoExec    4
#define MKcmdline_ISilent    5

#define MKcmdline_ICmdLine   0
#define MKcmdline_IReRun     1

extern void MKcmdline_build(char *cmd, char *makefile, char *target_name, int options, BOOL user_defined_target)
{
   strcpy(cmd, "amu -f ");
   if (makefile != 0) strcat(cmd, makefile);
   strcat(cmd, " ");
   strcat(cmd, " -desktop ");
   if (options & MKcmdline_Continue) strcat(cmd, "-k ");
   if (options & MKcmdline_Ignore)   strcat(cmd, "-i ");
   if (options & MKcmdline_NoExec)   strcat(cmd, "-n ");
   if (options & MKcmdline_Silent)   strcat(cmd, "-s ");
   if (target_name != 0) 
   {
       if (!user_defined_target) strcat(cmd, "@.");
       strcat(cmd, target_name);
   }
}


extern void MKcmdline_setoptions(MKproject *p)
{
   dbox d;
   dbox_field field;

   d = dbox_new("SetUp");
   if (d == 0) return;
   dbox_raw_eventhandler(d, help_dboxrawevents, "SETUP");

   dbox_show(d);

   /* --- set up initial state --- */
   dbox_setnumeric(d, MKcmdline_IContinue, p->make_flags & MKcmdline_Continue);
   dbox_setnumeric(d, MKcmdline_IIgnore, p->make_flags & MKcmdline_Ignore);
   dbox_setnumeric(d, MKcmdline_INoExec, p->make_flags & MKcmdline_NoExec);
   dbox_setnumeric(d, MKcmdline_ISilent, p->make_flags & MKcmdline_Silent);

   while (TRUE)
   {
      field = dbox_fillin(d);

      if (field == MKcmdline_IContinue)
      {
          p->make_flags ^= MKcmdline_Continue;
          dbox_setnumeric(d, MKcmdline_IContinue, p->make_flags & MKcmdline_Continue);
      }
      else if (field == MKcmdline_IIgnore)
      {
          p->make_flags ^= MKcmdline_Ignore;
          dbox_setnumeric(d, MKcmdline_IIgnore, p->make_flags & MKcmdline_Ignore);
      }
      else if (field == MKcmdline_INoExec)
      {
          p->make_flags ^= MKcmdline_NoExec;
          dbox_setnumeric(d, MKcmdline_INoExec, p->make_flags & MKcmdline_NoExec);
      }
      else if (field == MKcmdline_ISilent)
      {
          p->make_flags ^= MKcmdline_Silent;
          dbox_setnumeric(d, MKcmdline_ISilent, p->make_flags & MKcmdline_Silent);
      }
      else break;
   }      

   dbox_dispose(&d);
}


static void MKcmdline__show_dbox(char *cmdline)
{
   dbox d;
   char newcmdline[MAXCMDLINE];
 
   d = dbox_new("CmdLine");
   if (d == 0) return;

   dbox_setfield(d, MKcmdline_ICmdLine, cmdline);
   dbox_raw_eventhandler(d, help_dboxrawevents, "CMDLINE");
   dbox_show(d);

   while (TRUE) 
   {
      if (dbox_fillin(d) == MKcmdline_IReRun)
      {
         /* --- rerun the cmd --- */
         dbox_getfield(d, MKcmdline_ICmdLine, newcmdline, MAXCMDLINE);
         MKtask_request_taskwindow(newcmdline, 0);

         /* --- only close dbox if non-ADJUST click --- */
         if (!dbox_persist())
         {
            dbox_dispose(&d);
            break;
         }
      }
      else
         break;
   } 
}


extern void MKcmdline_show_cmdrun(MKoutputwin *out)
{
   char *cmdline = MKtask_get_cmdline(out);

   if (cmdline != 0)
       MKcmdline__show_dbox(cmdline);
}
