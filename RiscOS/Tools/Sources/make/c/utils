/* Title:    utils.c
 * Purpose:  general utility functions
 * Author:   IDJ
 * History:  5-Jul-90: IDJ: Created
 *
 */

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "template.h"
#include "dbox.h"
#include "werr.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "MKmem.h"

#include "utils.h"

extern void do_insert(dbox d, int icn, char *filename)
{
   wimp_icon ii;
   char *buffer;
   wimp_caretstr caret;

   wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), icn, &ii));
   buffer = MKmem_alloc(ii.data.indirecttext.bufflen);
   buffer[0] = 0;

   /* --- get existing text and check for overflow --- */
   dbox_getfield(d, icn, buffer, ii.data.indirecttext.bufflen);
   if (strlen(buffer) + strlen(filename) >= ii.data.indirecttext.bufflen)
   {
      werr(FALSE, msgs_lookup("utils1:Insufficient space in writable icon"));
      return;
   }

   if (buffer[0] != 0) strcat(buffer, " ");
   strcat(buffer, filename);
   dbox_setfield(d, icn, buffer);

   /* --- put caret at end of icon (if already in this icon) --- */
   wimp_get_caret_pos(&caret);
   if (caret.w == dbox_syshandle(d) && caret.i == icn)
   {
      caret.index = strlen(buffer);
      wimp_set_caret_pos(&caret);
   }
   MKmem_free(buffer);
}

extern int cistrcmp(const char *s1, const char *s2)
{
  int ch1, ch2;
  for (;;) {
    ch1 = *s1++;  ch2 = *s2++;
    /* care here for portability... don't rely on ANSI spec */
    if (isupper(ch1)) ch1 = tolower(ch1);
    if (isupper(ch2)) ch2 = tolower(ch2);
    if (ch1 != ch2) return ch1-ch2;
    if (ch1 == 0) return 0;
  }
}

extern void add_char(char *s, char c)
{
   int len = strlen(s);

   s[len] = c;
   s[len+1] = '\0';
}


extern BOOL delete_file(char *filename)
{
   _kernel_swi_regs r;

   if (filename == 0) return TRUE;  /* play it safe !! */

   r.r[0] = 27;             /* wipe object */
   r.r[1] = (int)filename;  /* temp. filename */
   r.r[3] = 0x2;            /* force */
   r.r[4] = r.r[5] = r.r[6] = r.r[7] = 0;

   return (_kernel_swi(OS_FSControl, &r, &r) == 0); 
}


extern BOOL rename_file(char *from, char *to)
{
   _kernel_swi_regs r;

   r.r[0] = 25;             /* rename */
   r.r[1] = (int)from;
   r.r[2] = (int)to; 

   return (_kernel_swi(OS_FSControl, &r, &r) == 0); 
}


extern BOOL copy_with_delete(char *from, char *to)
{
   _kernel_swi_regs r;

   r.r[0] = 26;             /* copy object */
   r.r[1] = (int)from;   
   r.r[2] = (int)to;    
   r.r[3] = 0x42;           /* force/delete-source-after */

   return (_kernel_swi(OS_FSControl, &r, &r) == 0); 
}


extern wimp_icon *icon_num_to_pointer(char *dbox_name, int icon_number)
{
   template *t;
   wimp_wind *w;

   t = template_find(dbox_name);
   w = &t->window;
   return (((wimp_icon *)(w + 1)) + icon_number);
}

extern int fieldlength(wimp_w w, wimp_i i)
{
   wimp_icon wi;
   int len = 0;

   wimpt_noerr(wimp_get_icon_info(w, i, &wi));
   while (wi.data.indirecttext.buffer[len] >=32) len++;

   return len;
}

extern void set_caret(wimp_w w, wimp_i i)
{
   wimp_caretstr c;
   c.i = i;
   c.x = 0;
   c.y = 0;
   c.height = -1;
   c.w = w;
   c.index = fieldlength(w, i);
   wimpt_noerr(wimp_set_caret_pos(&c));
}


extern BOOL getaline(FILE *fp, char *line)
{
   int c;
   
   while ((c = fgetc(fp)) != '\n' && c != EOF)
      *line++ = c;

   *line = '\0';
   return (c == EOF);
}


extern void stralloc(char **dst, char *src)
{
   if (src == 0) 
       *dst = 0;
   else
      if ((*dst = MKmem_alloc(strlen(src)+1)) != 0)
           strcpy(*dst, src);
}


extern void get_prefix(char **prefix, char *filename)
{
   int pos, i=0;

   pos = strlen(filename)-1;
   while (filename[pos] != '.' && pos > 0) pos--;
   *prefix = MKmem_alloc(pos+1);
   while (i < pos)
   {
      (*prefix)[i] = filename[i];
      i++;
   } 
   (*prefix)[i] = 0;
}


extern void set_type(char *filename, int type)
{
   _kernel_swi_regs r;

   r.r[0] = 18;   /* set file type */
   r.r[1] = (int)filename;
   r.r[2] = type;
   _kernel_swi(OS_File, &r, &r);  
}
