/* -> c.Dlist
 * Title:       Dlist - doubly-linked lists
 * Author:      IDJ (converted from MJJ)
 *              Copyright (C) 1990 Acorn Computers Limited
 * History:     IDJ: 12-Mar-91: fix to dlist_add for empty list.
 */

#include <stdio.h>
#include "h.dlist"

typedef struct listrec * ListPtr;

struct listrec
{
  ListPtr next;
  ListPtr prev;
};

#define next_(p) (((ListPtr)p)->next)
#define prev_(p) (((ListPtr)p)->prev)


void *dlist_add(void *listhead, void *newelement)
{
   next_(newelement) = listhead;
   prev_(newelement) = 0;
   if (listhead != 0) prev_(listhead) = newelement;
   return newelement;
}

void *dlist_addend(void *listhead, void *newelement)
{
   void *t, *tf;

   next_(newelement) = NULL;
   prev_(newelement) = NULL;
   if (!listhead) return newelement;
   t = listhead;
   do
   {
     tf = next_(t);
     if (!tf) break;
     t = tf;
   } while (1);
   next_(t) = newelement;
   prev_(newelement) = t;

   return listhead;
}

void *dlist_remove(void *listhead, void *element)
{
void *t, *tf;

   if (!listhead) return NULL;
   if (listhead == element)
   {
        if (next_(listhead)) prev_(next_(listhead)) = NULL;
        return next_(listhead);
   }
   t = listhead;
   do
   {
     tf = next_(t);
     if (!tf) return listhead;
     if (tf == element)
     {
       /* match - remove it */
       next_(t) = next_(tf);
       if (next_(tf)) prev_(next_(tf)) = t;
       return listhead;
     };
     t = tf; /* onto next */
   } while (1);
}

