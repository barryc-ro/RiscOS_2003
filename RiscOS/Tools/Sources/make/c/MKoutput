/* Title:   MKoutput.c
 * Purpose: to display make's textual output
 * Author:  IDJ
 * History: 5-Jul-90: IDJ: created
 *          6-Mar-91: IDJ: added interactive help
 *          4-Apr-91: IDJ: made more robust against running out of memory
 *          4-Apr-91: IDJ: handle too many windows better
 *          4-Apr-91: IDJ: made output windows joined at the close box
 *          09-Apr-91: IDJ: pause before asking whether to close task
 *          11-Apr-91: IDJ: fixed resize on scroll bug
 *
 *          Re-release started 30-Oct-91
 *          30-Oct-91: IDJ: fixed DDE-0837. On close of text output window
 *                          unregister the event handler for that window.
 *                          Also fixed a potential bug re: window handle of
 *                          window to be closed on close event after
 *                          displaying conformation dbox!
 *          14-Nov-91: IDJ: set pause/continue buttons correctly when pausing
 *                          due to out of memory or close window
 *
 */

#include <time.h>
#include <string.h>
#include <stdlib.h>
#include "swis.h"

#include "dbox.h"
#include "wimp.h"
#include "flex.h"
#include "template.h"
#include "wimpt.h"
#include "event.h"
#include "menu.h"
#include "win.h"
#include "msgs.h"
#include "bbc.h"
#include "werr.h"
#include "saveas.h"
#include "os.h"
#include "dboxquery.h"
#include "help.h"

#include "global.h"
#include "types.h"
#include "utils.h"
#include "MKmem.h"
#include "MKinfo.h"
#include "MKtask.h"
#include "MKtxtwin.h"
#include "MKmenus.h"
#include "MKoptions.h"
#include "slist.h"
#include "bool.h"

#include "MKoutput.h"

#define  MAXNAME  256
#define  INITLINES (1024/sysfont_height)
#define  TEXTBUFSIZ (8*1024)    

/* flags */
#define  OF_SUMMARY      0x00000001
#define  OF_TEXT         0x00000002
#define  OF_EXTENT_SET   0x00000004

/* dbox icons */
#define  MKoutput_IIcon          1
#define  MKoutput_IAbort         2
#define  MKoutput_IPauseContinue 3
#define  MKoutput_INlines        4
#define  MKoutput_ITime          5

#define OFFSETY  48
#define MINY    (-200)
static int MKoutput__starty = 0;
static int MKoutput__basedboxy0 = 0;
static int MKoutput__basedboxy1 = 0;
static MKoutputwin *MKoutput__windows = 0;


/* ----------------------------------------- window titles -------------------------------- */

extern void MKoutput_settitles(MKoutputwin *out, int flags)
{
   char title_string[MAXNAME];

   /* --- always start with the application name --- */
   strcpy(title_string, msgs_lookup("MKmenus1:Make"));
   add_char(title_string, ' ');
   add_char(title_string, '(');

   switch(flags)
   {
      case TF_Running:
        strcat(title_string, msgs_lookup("MKoutpt1:Running"));
        dbox_setfield(out->summary_d, MKoutput_IPauseContinue, msgs_lookup("MKoutpt7:Pause"));
        break;

      case TF_Aborted:
        strcat(title_string, msgs_lookup("MKoutpt2:Aborted"));
        break;

      case TF_Paused:
        strcat(title_string, msgs_lookup("MKoutpt3:Paused"));
        dbox_setfield(out->summary_d, MKoutput_IPauseContinue, msgs_lookup("MKoutpt6:Continue"));
        break;

      case TF_Completed:
        strcat(title_string, msgs_lookup("MKoutpt4:Completed"));
        break;

      default:
        break;
   }

   add_char(title_string, ')');
   win_settitle(out->text_w, title_string);
   win_settitle(dbox_syshandle(out->summary_d), title_string);
}


/* ---------------------------------------- event handlers -------------------------------- */

static BOOL MKoutput__OK_to_close(MKoutputwin *out)
{
   int flags = MKtask_getflags(out);

   if (!(flags & (TF_Completed|TF_Aborted)))
      return (dboxquery(msgs_lookup("MKoutpt5:Task active: abort and close?")) == dboxquery_YES);

   return TRUE;
}


static void MKoutput_text_handler(wimp_eventstr *e, void *handle)
{
   MKoutputwin *s = (MKoutputwin *)handle;

   switch(e->e)
   {
      case wimp_ESCROLL:
        MKtxtwin_scroll(&e->data.scroll.o, e->data.scroll.x, e->data.scroll.y);
        break;

      case wimp_ECLOSE:
        {
           wimp_mousestr m;
           wimp_w w = e->data.o.w;

           wimp_get_point_info(&m);
           if ((m.bbits & wimp_BRIGHT) != 0)
           {           
              wimpt_noerr(wimp_close_wind(w));
              s->flags &= ~OF_TEXT;
              s->flags |= OF_SUMMARY;
              MKoutput_show(s);
           }
           else
           {
              /* --- pause task and ask if OK --- */
              int flags = MKtask_getflags(s);
              BOOL start_it_again = FALSE;

              if (!(flags & (TF_Completed|TF_Aborted|TF_Paused)))
              {
                 MKtask_pause(s);
                 MKoutput_settitles(s, TF_Paused);
                 start_it_again = TRUE;
              }

              if (MKoutput__OK_to_close(s))
              {
                 wimpt_noerr(wimp_close_wind(w));
                 MKtask_abort_and_dispose(s);
              }
              else
              {
                 if (start_it_again)
                 {
                    MKtask_continue(s);
                    MKoutput_settitles(s, TF_Running);
                 }
              }
           }
        }
        break;

      case wimp_EOPEN:
        MKtxtwin_open(&e->data.o);
        break;

      case wimp_EREDRAW:
         {
           wimp_redrawstr r;
           BOOL more;
           r.w = e->data.o.w;
           wimpt_noerr(wimp_redraw_wind(&r, &more));
           MKtxtwin_refresh(&r, more, s->buffer, s->line_offsets, s->nlines);
         }
        break;

      default:
        break;
   }
}


static void MKoutput_summary_handler(dbox summary, void *handle)
{
   MKoutputwin *s = (MKoutputwin *)handle;

   switch(dbox_get(summary))
   {
      case MKoutput_IAbort:
        MKtask_abort(s);
        MKoutput_settitles(s, TF_Aborted);
        break;

      case MKoutput_IPauseContinue:
        {
           int flags = MKtask_getflags(s);
           if (flags & TF_Running)
           {
              MKtask_pause(s);
              MKoutput_settitles(s, TF_Paused);
              dbox_setfield(summary, MKoutput_IPauseContinue, msgs_lookup("MKoutpt6:Continue"));
           }
           else
           {
              MKtask_continue(s);
              MKoutput_settitles(s, TF_Running);
              dbox_setfield(summary, MKoutput_IPauseContinue, msgs_lookup("MKoutpt7:Pause"));
           }
        }
        break;

      case dbox_CLOSE:
        {
           wimp_mousestr m;

           wimp_get_point_info(&m);
           if ((m.bbits & wimp_BRIGHT) != 0)
           {
              /* --- hide dialogue box, and zoom to big --- */
              wimpt_noerr(wimp_close_wind(dbox_syshandle(summary)));
              s->flags &= ~OF_SUMMARY;
              s->flags |= OF_TEXT;
              MKoutput_show(s);
           }
           else
           {
              /* --- pause task and ask if OK --- */
              int flags = MKtask_getflags(s);
              BOOL start_it_again = FALSE;

              if (!(flags & (TF_Completed|TF_Aborted|TF_Paused)))
              {
                 MKtask_pause(s);
                 MKoutput_settitles(s, TF_Paused);
                 start_it_again = TRUE;
              }

              if (MKoutput__OK_to_close(s))
              {
                 wimpt_noerr(wimp_close_wind(dbox_syshandle(summary)));
                 MKtask_abort_and_dispose(s);
              }
              else
              {
                 if (start_it_again)
                 {
                    MKtask_continue(s);
                    MKoutput_settitles(s, TF_Running);
                 }
              }
           }
        }
        break;

      default:
        /* shouldn't be any others */
        break;
   }
}


extern void MKoutput_fadefields(MKoutputwin *out)
{
   if (out->summary_d != 0)
   {
      dbox_fadefield(out->summary_d, MKoutput_IAbort);
      dbox_fadefield(out->summary_d, MKoutput_IPauseContinue);
   }
}


/* ------------------------------------- saving text output -------------------------------- */

extern BOOL MKoutput_saveproc(char *filename, void *handle)
{
   MKoutputwin *out = (MKoutputwin *)handle;
   os_filestr file;
   int block[2];
   os_error *e;

   /* --- just save to file --- */

   block[0] = 3;           /* read CMOS clock */
   os_word(14, &block);

   file.action = 0;        /* save */
   file.name = filename;
   file.loadaddr = 0xffffff00 + (block[1] & 0xff);
   file.execaddr = block[0];
   file.start = (int)&out->buffer[0];
   file.end = (int)&out->buffer[out->bufsize];
   if ((e = os_file(&file)) != 0)
       werr(FALSE, e->errmess);

   return e==0;
}


/* ---------------------------------- output state manipulation ---------------------------- */

static void MKoutput__text_setextent(MKoutputwin *out)
{
   /* --- only reset the extent if it needs to be made bigger than initial size --- */
   if (out->nlines+1 > out->initlines)
   {
      wimp_redrawstr r;

      r.w = out->text_w;
      r.box.x0 = 0;
      r.box.x1 = out->text_t->window.ex.x1;
      r.box.y1 = 0;
      out->yextent = r.box.y0 = -(out->nlines * sysfont_height);
      wimpt_noerr(wimp_set_extent(&r));
   }
}


static void MKoutput__text_invalidateline(wimp_w w, wimp_wstate *ws, int line)
{
   wimp_redrawstr r;
   
   r.w = w;
   r.box.x0 = ws->o.x;
   r.box.x1 = ws->o.x + ws->o.box.x1 - ws->o.box.x0;
   r.box.y1 = - (line * sysfont_height);
   r.box.y0 = - (line * sysfont_height) - sysfont_height + 1;
   wimpt_noerr(wimp_force_redraw(&r));  
}


static BOOL MKoutput__atbottom(wimp_wstate *ws, MKoutputwin *out)
{
   return (ws->o.box.y1 - ws->o.box.y0 == ws->o.y - out->yextent);
}


extern void MKoutput_addtobuffer(MKoutputwin *out, int msgsize, char *msgtext)
{
   int oldsize = out->bufsize, oldlines = out->nlines;

   /* --- extend the flex buffer --- */
   if (out->buffer == 0)
   {
      if (flex_alloc((flex_ptr)&out->buffer, TEXTBUFSIZ) == 0)
      {
         werr(FALSE, msgs_lookup("MKoutpt8:No more memory for output display"));

         /* --- pause the task --- */
         MKtask_pause(out);
         MKoutput_settitles(out, TF_Paused);
         return;
      }
   }  
   else
   {
      if (oldsize + msgsize >= flex_size((flex_ptr)&out->buffer))
      {
         if (flex_extend((flex_ptr)&out->buffer, oldsize+TEXTBUFSIZ) == 0)
         {
            werr(TRUE, msgs_lookup("MKoutpt8:No more memory for output display"));

            /* --- pause the task --- */
            MKtask_pause(out);
            MKoutput_settitles(out, TF_Paused);
            return;
         }
      }
   } 
   out->bufsize += msgsize;

   /* --- insert the text (counting lines) --- */
   if (!MKtxtwin_linecount(msgsize, msgtext, &out->nlines, &out->line_offsets, out->bufsize))
   {
      werr(TRUE, msgs_lookup("MKoutpt8:No more memory for output display"));

      /* --- pause the task --- */
      MKtask_pause(out);
      MKoutput_settitles(out, TF_Paused);
      return;
   }
   memcpy(out->buffer+oldsize, msgtext, msgsize);

   dbox_setnumeric(out->summary_d, MKoutput_INlines, out->nlines); 

   /* --- now see if a text window is displayed --- */
   {
      int i;
      wimp_wstate ws;
      BOOL scrollbar_at_bottom = FALSE;

      wimpt_noerr(wimp_get_wind_state(out->text_w, &ws));
      scrollbar_at_bottom = MKoutput__atbottom(&ws, out);

      /* --- first grow the extent --- */
      MKoutput__text_setextent(out);

      /* --- invalidate the newly arrived lines --- */
      for (i=oldlines; i<out->nlines; i++)
          MKoutput__text_invalidateline(out->text_w, &ws, i);
      
      /* --- if we're at the 'bottom' scroll the text --- */
      if (scrollbar_at_bottom)
      {
          /* --- only open it if text window picked --- */
          if (out->flags & OF_TEXT)
          {
             ws.o.y -= (out->nlines - oldlines)*sysfont_height;
             MKtxtwin_open(&ws.o);
          }
      }
   }
}


extern void MKoutput_show(MKoutputwin *out)
{
   wimp_wstate this_ws, other_ws;
   wimp_redrawstr r;
   int flags;

   if (out->flags & OF_SUMMARY)
   {
      wimpt_noerr(wimp_get_wind_state(dbox_syshandle(out->summary_d), &this_ws));
      wimpt_noerr(wimp_get_wind_state(out->text_w, &other_ws));
   }
   else  /* OF_TEXT */
   {
      wimpt_noerr(wimp_get_wind_state(out->text_w, &this_ws));
      wimpt_noerr(wimp_get_wind_state(dbox_syshandle(out->summary_d), &other_ws));
   }

   /* --- for the dbox, set text of pause/continue appropriately --- */
   if (out->flags & OF_SUMMARY)
   {
      flags = MKtask_getflags(out);
      dbox_setfield(out->summary_d, MKoutput_IPauseContinue, (flags & TF_Running)?msgs_lookup("MKoutpt7:Pause"):msgs_lookup("MKoutpt6:Continue"));
   }
   else
      this_ws.o.y = out->yextent + (this_ws.o.box.y1 - this_ws.o.box.y0);

   if (!(out->flags & OF_EXTENT_SET))
   {
      /* --- first set the initial extent (of the text window) --- */
      out->initlines = (out->text_t->window.box.y1 - out->text_t->window.box.y0)/sysfont_height;
      r.w = out->text_w;
      r.box.x0 = 0;
      r.box.x1 = out->text_t->window.ex.x1;
      out->yextent = r.box.y0 = -(out->initlines * sysfont_height) /*-(out->text_t->window.box.y1 - out->text_t->window.box.y0)*/;
      r.box.y1 = 0;
      wimpt_noerr(wimp_set_extent(&r));

      out->flags |= OF_EXTENT_SET;
   }

   /* --- and open the window --- */
   this_ws.o.behind = -1;
   this_ws.o.box.x1 = other_ws.o.box.x0 + (this_ws.o.box.x1 - this_ws.o.box.x0);
   this_ws.o.box.y0 = other_ws.o.box.y1 - (this_ws.o.box.y1 - this_ws.o.box.y0);
   this_ws.o.box.x0 = other_ws.o.box.x0;
   this_ws.o.box.y1 = other_ws.o.box.y1;
   wimpt_noerr(wimp_open_wind(&this_ws.o)); 
}


/* ------------------------------ creating/deleting output states -------------------------- */

extern void MKoutput_dispose(MKoutputwin *out)
{
   /* --- delete the windows --- */
   /* IDJ: 30-Oct-91: remove event handler on deletion of window */
   if (out->text_w != 0)
   {
      wimpt_noerr(wimp_delete_wind(out->text_w));
      win_register_event_handler(out->text_w, (win_event_handler)0, 0);
   }
   if (out->summary_d != 0)
      dbox_dispose(&out->summary_d);

   /* --- delete the text window template copy --- */
   if (out->text_t != 0)
   {
      /* NB use free, because template.c has used malloc */
      if (out->text_t->workspacesize != 0)
          free(out->text_t->workspace);
      free(out->text_t);
   }

   /* --- now the buffer, and time details --- */
   if (out->buffer != 0)
      flex_free((flex_ptr)&out->buffer);
   if (out->line_offsets != 0)
      flex_free((flex_ptr)&out->line_offsets);
   if (out->time_run != 0)
      MKmem_free(out->time_run); 

   /* --- and unlink it from the list --- */
   MKoutput__windows = slist_remove(MKoutput__windows, (void *)out);

   /* --- ... and finally free it --- */
   MKmem_free(out);
}


extern MKoutputwin *MKoutput_new(void)
{
   MKoutputwin *new = MKmem_alloc(sizeof(MKoutputwin));
   time_t tim;
   template *t;
   os_error *err = 0;

   if (new != 0)
   {
      /* --- initialise --- */
      new->flags = (MKoptions_getoptions() & MKoptions_Text)?OF_TEXT:OF_SUMMARY;
      new->text_t = 0;
      new->text_w = 0;
      new->summary_d = 0;
      new->buffer = 0;
      new->line_offsets = 0;
      new->nlines = 0;
      new->bufsize = 0;
 
      /* --- save the time it was run --- */
      new->time_run = MKmem_alloc(sizeof("hh:mm:ss")+1);
      tim = time(0);
      strftime(new->time_run, sizeof("hh:mm:ss")+1, "%H:%M:%S", localtime(&tim));

      /* --- ... and add it into the list of output states --- */
      MKoutput__windows = slist_add(MKoutput__windows, (void *)new);

      /* --- take copy of template (so we can change title) --- */
      new->text_t = template_copy(template_find("Output"));

      /* --- and create a text window (registering handlers) --- */
      new->text_t->window.box.y0 += MKoutput__starty;
      new->text_t->window.box.y1 += MKoutput__starty;
      t = template_find("Summary");
      t->window.box.y0 = MKoutput__basedboxy0 + MKoutput__starty;
      t->window.box.y1 = MKoutput__basedboxy1 + MKoutput__starty;
      MKoutput__starty -= OFFSETY;
      if (MKoutput__starty < MINY) MKoutput__starty = 0;
      err = wimp_create_wind(&new->text_t->window, &new->text_w);
      wimpt_complain(err);
      if (err)
      {
         MKoutput_dispose(new);
         return 0;
      }
      win_register_event_handler(new->text_w, MKoutput_text_handler, (void *)new);
      event_attachmenumaker(new->text_w, MKmenus_text_maker, MKmenus_text_proc, (void *)new);

      /* --- create a summary dialogue box --- */
      /* NB. we don't need to cache the template, 'cos dbox does it for us */
      /* --- create dbox and register handlers --- */
      new->summary_d = dbox_new("Summary");
      if (new->summary_d == 0) 
      {
         MKoutput_dispose(new);
         return 0;          
      }
      dbox_eventhandler(new->summary_d, MKoutput_summary_handler, (void *)new);
      dbox_raw_eventhandler(new->summary_d, help_dboxrawevents, "SUMMARY");
      event_attachmenumaker(dbox_syshandle(new->summary_d), MKmenus_summary_maker, MKmenus_summary_proc, (void *)new);

      /* --- set time icon field of dbox --- */
      dbox_setfield(new->summary_d, MKoutput_ITime, new->time_run);

      /* --- set numlines output to zero --- */
      dbox_setnumeric(new->summary_d, MKoutput_INlines, 0);

      /* --- say it is running --- */
      MKoutput_settitles(new, TF_Running);
   }

   return new;     
}

extern void MKoutput_init(void)
{
   template *t;

   t = template_find("Summary");
   MKoutput__basedboxy0 = t->window.box.y0;
   MKoutput__basedboxy1 = t->window.box.y1;
}
