/* Title:   MKtools.c
 * Purpose: Creating and maintaining tool lists
 * Author:  IDJ
 * History: 11-Jul-90: IDJ: created
 *          04-Mar-91: IDJ: added create/delete toolflags directory fns.
 *          12-Mar-91: IDJ: MKtools extension searching routine now returns tool pointer
 *          10-May-91: IDJ/MCl: fixed MKTools_create_directory (num_entries)
 *
 */                

#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "res.h"
                  
#include "global.h"
#include "types.h" 
#include "slist.h"
#include "utils.h"
#include "MKmem.h"
#include "MKproject.h"

#include "MKtools.h"

static MKtool *MKtools__list = 0;

extern MKtool *MKtools_add(MKtool *head, char *toolname, char *extension, char *flags, char *conversion, char *description, char *setup)
{
   MKtool *new;

   new = MKmem_alloc(sizeof(MKtool));
   stralloc(&new->name, toolname);
   stralloc(&new->extension, extension);
   stralloc(&new->flags, flags);
   stralloc(&new->conversion, conversion);
   stralloc(&new->description, description);
   stralloc(&new->setup, setup);

   head = slist_addend(head, (void *)new);

   return head;
}


extern MKtool *MKtools_remove_all(MKtool *head)
{
   MKtool *t;

   while (head != 0)
   {
      t = head;

      if (t->name) MKmem_free(t->name);
      if (t->extension) MKmem_free(t->extension);
      if (t->flags) MKmem_free(t->flags);
      if (t->conversion) MKmem_free(t->conversion);
      if (t->description) MKmem_free(t->description);
      if (t->setup) MKmem_free(t->setup);

      head = slist_remove(head, t);
      MKmem_free(t);
   }

   return head;
}


extern MKtool *MKtools_find(MKtool *head, int entry)
{
   MKtool *p = head;
   int count;

   for (count = 0; count < entry; count++)
   {
      if (p == 0) break; 
      p = p->next;
   }
   return p;
}


extern MKtool *MKtools_find_named(MKtool *head, char *name)
{
   MKtool *p = head;

   while (p != 0)
   {              
      if (!cistrcmp(p->name, name)) break;
      p = p->next;
   }
   return p;
}


extern MKtool *MKtools_read_list(void)
{
   /* --- the tools file holds entries of the form: --- */
   /* ---   tool name <NL>                          --- */
   /* ---   extension <NL>                          --- */
   /* ---   make defaults <NL>                      --- */
   /* ---   conversion rule <NL>                    --- */
   /* ---   description file <NL>                   --- */

   FILE *fp;
   char name[MAXFILENAME];
   char extension[MAXFILENAME];
   char flags[MAXFILENAME];
   char conversion[MAXFILENAME];
   char description[MAXFILENAME];
   char setup[MAXFILENAME];
   
   if ((fp = res_openfile("choices.tools", "r")) == 0) return 0;

   while (!feof(fp))
   {
      name[0] = extension[0] = flags[0] = conversion[0] = description[0] = 0;
      if (getaline(fp, name) == TRUE) break;
      if (getaline(fp, extension) == TRUE) break;
      if (getaline(fp, flags) == TRUE) break;
      if (getaline(fp, conversion) == TRUE) break;
      if (getaline(fp, description) == TRUE) break;
      if (getaline(fp, setup) == TRUE) break;

      MKtools__list = MKtools_add(MKtools__list, 
                                  (name[0] != 0)?name:0, 
                                  (extension[0] != 0)?extension:0, 
                                  (flags[0] != 0)?flags:0, 
                                  (conversion[0] != 0)?conversion:0,
                                  (description[0] != 0)?description:0, 
                                  (setup[0] != 0)?setup:0);
   }

   fclose(fp);

   return MKtools__list;
}

extern MKtool *MKtools_copy_list(void)
{
   MKtool *existingp = MKtools__list, *newp = 0, *newlist = 0;

   while (existingp != 0)
   {
      newp = MKmem_alloc(sizeof(MKtool));

      stralloc(&newp->name, existingp->name);
      stralloc(&newp->extension, existingp->extension);
      stralloc(&newp->flags, existingp->flags);
      stralloc(&newp->conversion, existingp->conversion);
      stralloc(&newp->description, existingp->description);
      stralloc(&newp->setup, existingp->setup);

      newlist = slist_addend(newlist, (void *)newp);

      existingp = existingp->next;
   }
  
   return newlist; 
}


extern char *MKtools_tool_list(MKproject *p)
{
   MKtool *t;
   int len = 0;
   char *buffer;

   /* --- first count space needed --- */
   t = p->tool_list;
   while (t != 0)
   {
      len += strlen(t->name)+1;   /* +1 for ',' or \0 */
      t = t->next;
   }

   if (len == 0) return 0;

   buffer = MKmem_alloc(len);
   buffer[0] = 0;

   /* --- now fill the buffer with comma-separated list of projects --- */
   t = p->tool_list;
   while (t != 0)
   {
      strcat(buffer, t->name);
      if (t->next != 0)
         add_char(buffer, ',');
      t = t->next;
   }

   return buffer;
}

extern MKtool *MKtools_has_extension(char *filename)
{
   char *extension, *p, *afterdot = 0, *beforedot = 0; 
   MKtool *t = MKtools__list;
   BOOL finished = FALSE;

   /* --- extract the 'extension' string (to determine language) --- */
   p = filename + strlen(filename);
   while (p != filename && !finished)
   {
      if (*p == '.')
      {
         if (afterdot == 0) afterdot = p;
         else
         {
             beforedot = p;
             finished = TRUE;
         }
      }

      p--;
   }

   /* --- if filename has not got at least two dots, then it ain't got an extension --- */
   if (afterdot == 0 || beforedot == 0) return 0;

   extension = MKmem_alloc(afterdot-beforedot);
   strncpy(extension, beforedot+1, afterdot-beforedot-1);
   extension[afterdot-beforedot-1] = 0;
   /* assert: extension is nul-terminated */

   /* --- look for this extension in the tools list --- */
   while (t != 0)
   {
      if (!cistrcmp(extension, t->extension))
         break;
      t = t->next;
   }

   MKmem_free(extension);
   return t;
}


extern void MKtools_newoptions(MKmsg_cmdline *msg)
{
   MKproject *p = (MKproject *)msg->handle;
   MKtool *t = MKtools_find_named(p->tool_list, msg->application_name);

   /* --- get rid of old options and bring in the new --- */
   if (t->flags) MKmem_free(t->flags);
   stralloc(&t->flags, msg->cmdline);

   /* --- mark project as modified --- */
   if (!(p->flags & PF_Modified))
   {
      p->flags |= PF_Modified;
      MKproject_settitle(p);
   }    
}


extern void MKtools_create_directory(char *projname)
{
   char dir_name[MAXFILENAME] = TOOLSPATH;
   _kernel_swi_regs r;

   strncat(dir_name, projname, MAXFILENAME-1);
   r.r[0] = 0x8;   /* create directory */
   r.r[1] = (int)dir_name;
   r.r[4] = 0;     /* dft num entries */
   _kernel_swi(OS_File, &r, &r);
}


extern void MKtools_delete_directory(char *projname)
{
   char dir_name[MAXFILENAME] = TOOLSPATH;
   _kernel_swi_regs r;

   if (projname == 0) return;  /* just in case ! */
   strncat(dir_name, projname, MAXFILENAME-1);
   r.r[0] = 27;   /* wipe */
   r.r[1] = (int)dir_name;
   r.r[3] = 0x2;  /* force */
   _kernel_swi(OS_FSControl, &r, &r);
}
