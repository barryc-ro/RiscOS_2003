/* Title:    MKmenus.c
 * Purpose:  Menu handling
 * Author:   IDJ
 * History:  5-Jul-90: IDJ: created
 *           04-Mar-91: IDJ: added parameter to *FrontEnd_SetUp to give choices filename
 *           12-Mar-91: IDJ: fix to put added targets on front of list
 *           14-Mar-91: IDJ: added prompt to remove toolflags for project as well
 *           15-Mar-91: Prompt for quit when tasks running
 *           16-Apr-91: IDJ: stop quit when tasks running
 *           30-Apr-91: IDJ: bring member list window to front
 *
 */

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "menu.h"
#include "event.h"
#include "dbox.h"
#include "msgs.h"
#include "saveas.h"
#include "dboxquery.h"
#include "werr.h"

#include "global.h"
#include "types.h"
#include "MKinfo.h"
#include "MKmem.h"
#include "utils.h"
#include "MKtask.h"
#include "MKoutput.h"
#include "MKproject.h"
#include "MKoptions.h"
#include "MKcmdline.h"
#include "MKtools.h"
#include "MKtargets.h"
#include "MKsources.h"
#include "MKexit.h"
#include "MKmembers.h"
#include "DDESWIs.h"

#include "MKmenus.h"

/* main menu */
#define MKmenus_MInfo          1
#define MKmenus_MOptions       2
#define MKmenus_MOpen          3
#define MKmenus_MQuit          4

/* options menu */
#define MKmenus_MAutoRun       1
#define MKmenus_MDisplay       2

/* display menu */
#define MKmenus_MText          1
#define MKmenus_MSummary       2

/* project menu */
#define MKmenus_MMakeOptions   1
#define MKmenus_MTouch         2
#define MKmenus_MListMembers   3
#define MKmenus_MAddTarget     4
#define MKmenus_MRemoveTarget  5
#define MKmenus_MRemoveProject 6
#define MKmenus_MToolOptions   7

/* the display windows */
#define  MKmenus_MCmdLine      2
#define  MKmenus_MSave         3
#define  MKmenus_MAbort        4
#define  MKmenus_MPause        5
#define  MKmenus_MContinue     6


static menu MKmenus__main_menu = 0;
static menu MKmenus__text_menu = 0;
static menu MKmenus__summary_menu = 0;
static menu MKmenus__display_menu = 0;
static menu MKmenus__options_menu = 0;


/* -------------------------------------- text output menu ----------------------------------- */


static void MKmenus__text_setflags(MKoutputwin *s)
{
   int flags = MKtask_getflags(s);

   menu_setflags(MKmenus__text_menu, MKmenus_MAbort, 0, flags & (TF_Completed|TF_Aborted));
   menu_setflags(MKmenus__text_menu, MKmenus_MPause, 0, flags & (TF_Paused|TF_Completed|TF_Aborted));
   menu_setflags(MKmenus__text_menu, MKmenus_MContinue, 0, !(flags & TF_Paused) || (flags & (TF_Completed|TF_Aborted)));
}


extern menu MKmenus_text_maker(void *handle)
{
   MKoutputwin *s = (MKoutputwin *)handle;

   if (MKmenus__text_menu == 0)
   {
      MKmenus__text_menu = menu_new(msgs_lookup("MKmenus1:Make"),msgs_lookup("MKmenus2:>Info,>Cmd Line,>Save,Abort,Pause,Continue"));
   }

   MKmenus__text_setflags(s);
   return MKmenus__text_menu;
}


extern void MKmenus_text_proc(void *handle, char *hit)
{
   MKoutputwin *s = (MKoutputwin *)handle;

   switch(hit[0])
   {
      case MKmenus_MInfo:
        MKinfo();
        break;

      case MKmenus_MCmdLine:
        if (hit[1] != 0)
           MKcmdline_show_cmdrun(s);
        break;

      case MKmenus_MSave:
        saveas(0xfff, msgs_lookup("MKmenus3:Textfile"), s->bufsize, MKoutput_saveproc, 0, 0, s);
        break;

      case MKmenus_MAbort:
        MKtask_abort(s);
        MKoutput_settitles(s, TF_Aborted);
        break;

      case MKmenus_MPause:
        MKtask_pause(s);
        MKoutput_settitles(s, TF_Paused);
        break;

      case MKmenus_MContinue:
        MKtask_continue(s);
        MKoutput_settitles(s, TF_Running);
        break;

      default:
        break;
   }
}


/* ----------------------------------------- summary dbox menu ------------------------------- */

extern menu MKmenus_summary_maker(void *handle)
{
   IGNORE(handle);

   if (MKmenus__summary_menu == 0)
   {
      MKmenus__summary_menu = menu_new(msgs_lookup("MKmenus1:Make"),msgs_lookup("MKmenus4:>Info,>Cmd Line,>Save"));
   }

   return MKmenus__summary_menu;
}


extern void MKmenus_summary_proc(void *handle, char *hit)
{
   MKoutputwin *s = (MKoutputwin *)handle;

   switch(hit[0])
   {
      case MKmenus_MInfo:
        MKinfo();
        break;

      case MKmenus_MCmdLine:
        if (hit[1] != 0)
            MKcmdline_show_cmdrun(s);
        break;

      case MKmenus_MSave:
        saveas(0xfff, msgs_lookup("MKmenus3:Textfile"), s->bufsize, MKoutput_saveproc, 0, 0, s);
        break;

      default:
        break;
   }
}


/* ------------------------------------ project menu --------------------------------------- */

extern menu MKmenus_project_maker(void *handle)
{
   MKproject *p = (MKproject *)handle;
   menu sub;
   char *buffer;

   if (!event_is_menu_being_recreated())
   {
      if (p->project_m != 0)
         menu_dispose(&p->project_m, TRUE);
      p->project_m = menu_new(p->project_name, msgs_lookup("MKmenus5:>Make options,Touch,List members,>Add target,Remove target,Remove project,Tool options"));
      buffer = MKtools_tool_list(p);
      if (buffer != 0)
      {
         sub = menu_new(msgs_lookup("MKmenus6:Set options:"), buffer);
         menu_submenu(p->project_m, MKmenus_MToolOptions, sub);
         MKmem_free(buffer);
      }
   }

   return p->project_m;
}


extern void MKmenus_project_proc(void *handle, char *hit)
{
   MKproject *p = (MKproject *)handle;

   switch(hit[0])
   {
      case MKmenus_MMakeOptions:
         if (hit[1] != 0)
            MKcmdline_setoptions(p);
         break;

      case MKmenus_MTouch:
         MKsources_touch_dbox(p);
         break;

      case MKmenus_MListMembers:
         if (p->current_target->type == TT_User)
         {
            werr(FALSE, msgs_lookup("MKmenus7:Can't do this operation on a user-defined target"));
         }
         else
            MKmembers_list(p, TRUE);
         break;

      case MKmenus_MAddTarget:
         if (hit[1] != 0)
             MKtargets_new(p);
         break;

      case MKmenus_MRemoveTarget:
         if (p->current_target->type == TT_User)
         {
            werr(FALSE, msgs_lookup("MKmenus7:Can't do this operation on a user-defined target"));
         }
         else
         {
            MKtarget *t = p->current_target;

            if (MKtargets_change_target(p))
            {
               p->target_list = MKtargets_remove(p->target_list, t);

               /* --- and mark project as modified --- */
               p->flags |= PF_Modified;
               MKproject_settitle(p);
            }
         }
         break;

      case MKmenus_MRemoveProject:
         if (!(p->flags & PF_Modified) || (p->flags & PF_Modified) &&
                                           dboxquery(msgs_lookup("MKmenus8:Project has been modified but not saved: remove?")) == dboxquery_YES)
         {
            if (dboxquery(msgs_lookup("MKmenus15:Do you want to remove the toolflags files for this project?")) == dboxquery_YES)
               MKproject_remove_project(p, TRUE);
            else
               MKproject_remove_project(p, FALSE);
         }
         break;

      case MKmenus_MToolOptions:
         if (hit[1] != 0)
         {
            MKtool *t;
            char cmd[MAXCMDLINE];
            char choices_file[MAXFILENAME];

            /* --- find the appropriate tool entry --- */
            t = MKtools_find(p->tool_list, hit[1]-1);

            /* --- ensure that environment vars. set up and do *FrontEnd_SetUp --- */
            if (t->setup != 0)
            {
               sprintf(choices_file, TOOLSPATH"%s.%s", p->project_name, t->name);
               sprintf(cmd, "*Run %s %s %s %d %d %s", t->setup, t->name, t->description, wimpt_task(), (int)p, choices_file);
               wimpt_noerr(wimp_starttask(cmd));
            }
            else
            {
               wimp_msgstr msg;

               /* --- no setup file, so broadcast a wimp msg --- */
               msg.hdr.action = (wimp_msgaction) MSG_FrontEnd_CmdlineRequest;
               msg.hdr.size = 256;
               msg.hdr.your_ref = 0;
               msg.data.words[0] = (int)p;
               strcpy(&msg.data.chars[4], t->name);
               wimpt_noerr(wimp_sendmessage(wimp_ESEND, &msg, 0));
            }
         }
         break;

      default:
         break;
   }
}


/* -------------------------------------- main menu ---------------------------------------- */

static void MKmenus__main_setflags(char *buffer)
{
   int options = MKoptions_getoptions();

   menu_setflags(MKmenus__main_menu, MKmenus_MOpen, 0, buffer==0);
   menu_setflags(MKmenus__options_menu, MKmenus_MAutoRun, options & MKoptions_AutoRun, 0);
   menu_setflags(MKmenus__display_menu, MKmenus_MText, options & MKoptions_Text, 0);
   menu_setflags(MKmenus__display_menu, MKmenus_MSummary, options & MKoptions_Summary, 0);
}


extern menu MKmenus_main_maker(void *handle)
{
   menu sub_open;
   char *buffer = 0;

   IGNORE(handle);

   buffer = MKproject_project_list();

   if (!event_is_menu_being_recreated())
   {
      if (MKmenus__main_menu != 0)
          menu_dispose(&MKmenus__main_menu, TRUE);

      MKmenus__main_menu = menu_new(msgs_lookup("MKmenus1:Make"), msgs_lookup("MKmenus9:>Info,Options,Open,Quit"));
      MKmenus__options_menu = menu_new(msgs_lookup("MKmenus10:Options"), msgs_lookup("MKmenus11:Auto Run,Display"));
      MKmenus__display_menu = menu_new(msgs_lookup("MKmenus12:Display"), msgs_lookup("MKmenus13:Text,Summary"));
      menu_submenu(MKmenus__options_menu, MKmenus_MDisplay, MKmenus__display_menu);
      menu_submenu(MKmenus__main_menu, MKmenus_MOptions, MKmenus__options_menu);


      if (buffer != 0)
      {
         sub_open = menu_new(msgs_lookup("MKmenus14:Projects:"), buffer);
         menu_submenu(MKmenus__main_menu, MKmenus_MOpen, sub_open);
      }
   }

   MKmenus__main_setflags(buffer);

   if (buffer != 0) MKmem_free(buffer);

   return MKmenus__main_menu;
}

#if FALSE

static BOOL MKmenus__mayquit(void)
{
   return (dboxquery(msgs_lookup("MKmenus16:Task(s) active: are you sure you want to quit?")) == dboxquery_YES);
}

#endif


extern void MKmenus_main_proc(void *handle, char *hit)
{
   IGNORE(handle);

   switch(hit[0])
   {
      case MKmenus_MInfo:
        MKinfo();
        break;

      case MKmenus_MOptions:
        switch(hit[1])
        {
           case MKmenus_MAutoRun:
              MKoptions_toggleoptions(MKoptions_AutoRun);
              break;

           case MKmenus_MDisplay:
              if (hit[2] != 0)
                  MKoptions_toggleoptions(MKoptions_Text|MKoptions_Summary);
              break;

           default:
              break;
        }
        break;

      case MKmenus_MOpen:
        if (hit[1] != 0)
        {
           MKproject *p = MKproject_find_numbered(hit[1]-1);
           if (p != 0)
              MKproject_open(p);
        }
        break;

      case MKmenus_MQuit:
        if (MKtask_anyactive())
        {
           werr(FALSE, msgs_lookup("MKmenus16:Can't quit with tasks running"));
        }
        else
           MKexit_quit();
        break;

      default:
        break;
   }
}

