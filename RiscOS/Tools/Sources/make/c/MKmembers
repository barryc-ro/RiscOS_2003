/* Title:   MKmembers.c
 * Purpose: Creating and maintaining member lists for targets
 * Author:  IDJ
 * History: 17-Sep-90: IDJ: created
 *          04-Apr-91: IDJ: made more robust against running out of memory
 *          16-Apr-91: IDJ: remove inf loop when unknown memebr type on remove all
 *          30-Apr-91: IDJ: made safer when out of windows
 *
 */

#include <string.h>

#include "flex.h"
#include "win.h"
#include "werr.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "utils.h"
#include "slist.h"
#include "MKmem.h"
#include "MKfname.h"
#include "MKtargets.h"
#include "MKtxtwin.h"
#include "MKsources.h"

#include "MKmembers.h"



extern MKmember *MKmembers_add_source(MKmember *head, MKsource *s)
{
   MKmember *new, *m;

   /* --- see if source already in this member list --- */
   m = head;
   while (m != 0)
   {
      if (m->type == MF_Source && m->data.source == s)
         return head;
      m = m->next;
   }

   /* --- allocate a new source member, and set source field --- */
   new = MKmem_alloc(sizeof(MKmember));
   new->type = MF_Source;
   new->data.source = s;

   /* --- increment usage for the source --- */
   MKsources_usage_inc(s);

   /* --- add it to the end of the list --- */
   head = slist_addend(head, new);

   return head;
}


extern MKmember *MKmembers_remove_source(MKmember *head, MKsource *s)
{
   MKmember *m;

   /* --- search for source in member list --- */
   m = head;
   while (m != 0)
   {
      if (m->type == MF_Source && m->data.source == s) break;
      m = m->next;
   }
   if (m == 0) return head;

   /* --- decrement usage for the source --- */
   MKsources_usage_dec(m->data.source);

   /* --- remove from list --- */
   head = slist_remove(head, m);

   /* --- free allocated space --- */
   MKmem_free(m);

   return head;
}


extern MKmember *MKmembers_add_object(MKmember *head, char *filename)
{
   MKmember *new, *m;

   /* --- see if object already in this member list --- */
   m = head;
   while (m != 0)
   {
      if (m->type == MF_Object && !cistrcmp(m->data.object_name, filename))
         return head;
      m = m->next;
   }

   /* --- allocate a new object member --- */
   new = MKmem_alloc(sizeof(MKmember));
   new->type = MF_Object;
   stralloc(&new->data.object_name, filename);

   /* --- add it to end of list --- */
   head = slist_addend(head, new);

   return head;
}


extern MKmember *MKmembers_remove_object(MKmember *head, char *filename)
{
   MKmember *m;

   /* --- search for object in member list --- */
   m = head;
   while (m != 0)
   {
      if (m->type == MF_Object && !cistrcmp(m->data.object_name, filename)) break;
      m = m->next;
   }
   if (m == 0) return head;

   /* --- free filename --- */
   MKmem_free(m->data.object_name);

   /* --- remove from the list --- */
   head = slist_remove(head, m);

   /* --- free space for member --- */
   MKmem_free(m);

   return head;
}


extern MKmember *MKmembers_add_tempname(MKmember *head, char *name)
{
   MKmember *new;

   /* --- allocate space for new member --- */
   new = MKmem_alloc(sizeof(MKmember));
   new->type = MF_Tempname;
   stralloc(&new->data.temp_name, name);

   /* --- add it to member list --- */
   head = slist_addend(head, new);

   return head;
}


extern MKmember *MKmembers_remove_all(MKmember *head)
{

   while (head != 0)
   {
      if (head->type == MF_Object)
      {
         head = MKmembers_remove_object(head, head->data.object_name);
      }
      else if (head->type == MF_Source)
      {
         head = MKmembers_remove_source(head, head->data.source);
      }
      else
         head = slist_remove(head, head);
   }

   return head;
}


static void MKmembers__delete_window(MKmembers_listwindow *w)
{
   wimp_close_wind(w->w);
   wimp_delete_wind(w->w);
   if (w->buffer) flex_free((flex_ptr)&w->buffer);
   if (w->line_offsets) flex_free((flex_ptr)&w->line_offsets);
   w->w = 0;
   MKmem_free(w->copy_t);
   w->copy_t = 0;
   w->buffer = 0;
   w->nlines = 0;
}


static void MKmembers__handler(wimp_eventstr *e, void *handle)
{
   MKmembers_listwindow *w = (MKmembers_listwindow *)handle;

   switch(e->e)
   {
      case wimp_ESCROLL:
        MKtxtwin_scroll(&e->data.scroll.o, e->data.scroll.x, e->data.scroll.y);
        break;

      case wimp_ECLOSE:
        MKmembers__delete_window(w);
        break;

      case wimp_EOPEN:
        MKtxtwin_open(&e->data.o);
        break;

      case wimp_EREDRAW:
         {
           wimp_redrawstr r;
           BOOL more;
           r.w = e->data.o.w;
           wimpt_noerr(wimp_redraw_wind(&r, &more));
           MKtxtwin_refresh(&r, more, w->buffer, w->line_offsets, w->nlines);
         }
        break;

      default:
        break;
   }
}


static int MKmembers__make_list(MKmember *list, char **buffer, char *prefix)
{
   int space = 0;

   while (list != 0)
   {
      if (buffer != 0)
      {
         if (list->type == MF_Source)
         {
             MKfname_expand(*buffer+strlen(*buffer), list->data.source->filename, prefix);
         }
         else
         {
             /* object file */
             MKfname_expand(*buffer+strlen(*buffer), list->data.object_name, prefix);
         }

         add_char(*buffer, '\n');
      }
      else
      {
         if (list->type == MF_Source)
         {
             char expanded_filename[MAXFILENAME];

             MKfname_expand(expanded_filename, list->data.source->filename, prefix);
             space += strlen(expanded_filename)+1;
         }
         else
         {
             char expanded_filename[MAXFILENAME];

             /* object file */
             MKfname_expand(expanded_filename, list->data.object_name, prefix);
             space += strlen(expanded_filename)+1;
         }
      }

      list = list->next;
   }

   return space;
}


extern void MKmembers_list(MKproject *p, BOOL bring_to_front)
{
   int space = 0, i;
   wimp_wstate ws;
   wimp_redrawstr r;
   char title[MAXFILENAME];
   MKmembers_listwindow *w = &p->current_target->members_window;
   int oldlines = w->nlines;

   /* --- count space needed for list --- */
   space = MKmembers__make_list(p->current_target->members, 0, p->prefix);
   if (space == 0) return;

   if (w->copy_t == 0)
   {
      /* --- create window --- */
      w->copy_t = template_copy(template_find("ListMembers"));
      if (wimpt_complain(wimp_create_wind(&w->copy_t->window, &w->w)))
      {
         MKmem_free(w->copy_t);
         w->copy_t = 0;
         return;
      }
   }

   if (w->buffer == 0)
   {
      w->nlines = 0;

      win_register_event_handler(w->w, MKmembers__handler, (void *)w);
      if (flex_alloc((flex_ptr)&w->buffer, space) == 0)
      {
         werr(FALSE, msgs_lookup("MKmbers3:No space to display member list"));
         MKmembers__delete_window(w);
         return;
      }
      w->buffer[0] = 0;
      for (i = 0; i < flex_size((flex_ptr)&w->buffer); i++) w->buffer[i] = 0;

      /* --- copy in text of member list --- */
      MKmembers__make_list(p->current_target->members, &w->buffer, p->prefix);

      /* --- set up line offsets --- */
      if (!MKtxtwin_linecount(space, w->buffer, &w->nlines, &w->line_offsets, flex_size((flex_ptr)&w->buffer), &w->last_char))
      {
         werr(FALSE, msgs_lookup("MKmbers3:No space to display member list"));
         MKmembers__delete_window(w);
         return;
      }

      /* --- set the extent --- */
      r.w = w->w;
      r.box.x0 = 0;
      r.box.x1 = w->copy_t->window.ex.x1;
      r.box.y1 = 0;
      r.box.y0 = -(w->nlines * sysfont_height);
      wimpt_noerr(wimp_set_extent(&r));

      /* --- set window title bar --- */
      sprintf(title, msgs_lookup("MKmbers2:Member list for %s"), p->current_target->name);
      win_settitle(w->w, title);
   }

   /* --- force a redraw on the whole window --- */
   r.w = w->w;
   r.box.x0 = 0;
   r.box.x1 = w->copy_t->window.ex.x1;
   r.box.y1 = 0;
   r.box.y0 = -(((w->nlines>oldlines)?w->nlines:oldlines) * sysfont_height);
   wimpt_noerr(wimp_force_redraw(&r));

   /* --- ... and show the window */
   wimpt_noerr(wimp_get_wind_state(w->w, &ws));
   if (bring_to_front) ws.o.behind = -1;
   MKtxtwin_open(&ws.o);
}
