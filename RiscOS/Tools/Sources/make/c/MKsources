/* Title:   MKsources.c
 * Purpose: Creating and maintaining source lists
 * Author:  IDJ
 * History: 11-Jul-90: IDJ: created
 *          06-Mar-91: IDJ: fixed object filename to be relative to makefile
 *          12-Mar-91: IDJ: added tool pointer to MKsources_add
 *          15-Mar-91: IDJ: close touch dbox when done
 *          17-Apr-91: IDJ: now touch any named file
 *          10-May-91: IDJ: always insert into Files icon on drag
 *
 */

#include <string.h>

#include "flex.h"
#include "win.h"
#include "dbox.h"
#include "xferrecv.h"
#include "help.h"

#include "global.h"
#include "types.h"
#include "utils.h"
#include "slist.h"
#include "MKmem.h"
#include "MKfname.h"
#include "MKtargets.h"
#include "MKtxtwin.h"
#include "MKmembers.h"

#include "MKsources.h"

#define MKsources_Touch_IOK    0
#define MKsources_Touch_IFiles 1
#define MKsources_Touch_IAll   2

extern MKsource *MKsources_add(MKsource *head, char *filename, MKtool *t)
{
   MKsource *new;

   /* --- first see if it's already there --- */
   new = MKsources_find(head, filename);

   if (new == 0)
   {
      /* --- not found so make a new one in the source list --- */
      new = MKmem_alloc(sizeof(MKsource));
      stralloc(&new->filename, filename);
      new->usage = 0;
      new->make_using = t;

      head = slist_addend(head, (void *)new);
   }

   return head;
}


extern void MKsources_usage_inc(MKsource *s)
{
   s->usage++;
}


extern void MKsources_usage_dec(MKsource *s)
{
   s->usage--;
}


extern MKsource *MKsources_remove(MKsource *head, MKsource *s)
{
#ifdef DEBUG
   werr(FALSE, "removing source - target %x", t);
   werr(FALSE, "removing source - source %x", s);
   werr(FALSE, "removing source - name %s", s->filename);
#endif

   if (s->usage <= 0)
   {
      head = slist_remove(head, (void *)s);

      if (s->filename) MKmem_free(s->filename);
      MKmem_free(s);
   }

   return head;
}


extern MKsource *MKsources_remove_all(MKsource *head)
{
   MKsource *s;

   while (head != 0)
   {
      s = head;
      if (s->filename) MKmem_free(s->filename);
      head = slist_remove(head, s);
      MKmem_free(s);
   }

   return head;
}


extern MKsource *MKsources_find(MKsource *head, char *filename)
{
   MKsource *p = head;

   while (p != 0)
   {
      if (!cistrcmp(p->filename, filename))
         break;
      p = p->next;
   }
   return p;
}


extern void MKsources_build_object_name(char *object, char *source)
{
   char leafname[MAXFILENAME];
   char *p;

   strcpy(object, "@.o.");

   /* --- extract leafname --- */
   p = source + strlen(source);
   while(*p != '.' && p > source) p--;
   strcpy(leafname, p+1);

   strcat(object, leafname);
}


static void MKsources__touch(char *contracted_filename, char *prefix)
{
   char cmdbuf[MAXCMDLINE];

   if (contracted_filename[0] != 0)
   {
      sprintf(cmdbuf, "%%stamp ");
      MKfname_expand(cmdbuf+strlen(cmdbuf), contracted_filename, prefix);
      wimpt_complain(os_cli(cmdbuf));
   }
}


static void MKsources__touch_all(MKsource *p, char *prefix)
{
   while (p != 0)
   {
      MKsources__touch(p->filename, prefix);
      p = p->next;
   }
}


static BOOL MKsources__touch_raw_handler(dbox d, void *event, void *handle)
{
   wimp_eventstr *e = (wimp_eventstr *)event;
   char *filename;

  (void) handle;

   if (e->e == wimp_ESENDWANTACK || e->e == wimp_ESEND)
   {
       if (e->data.msg.hdr.action == wimp_MDATALOAD)
       {
          xferrecv_checkinsert(&filename);
          xferrecv_insertfileok();
          do_insert(d, MKsources_Touch_IFiles, filename);
          return TRUE;
       }
       else if (e->data.msg.hdr.action == wimp_MHELPREQUEST)
          return help_dboxrawevents(d, event, "TOUCH");
   }

   return FALSE;
}


static void MKsources__touch_handler(dbox d, void *handle)
{
   MKproject *p = (MKproject *)handle;

   switch(dbox_get(d))
   {
      case dbox_CLOSE:
         dbox_dispose(&d);
         break;

      case MKsources_Touch_IOK:
         {
            char *startp, *endp, *endbuf;
            wimp_icon wi;
            BOOL finished = FALSE;

            /* --- get at Files icon data --- */
            wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), MKsources_Touch_IFiles, &wi));

            /* --- process file list --- */
            startp = endp = wi.data.indirecttext.buffer;
            if (*startp < 32) return;
            endbuf = wi.data.indirecttext.buffer + wi.data.indirecttext.bufflen;
            while (!finished)
            {
               char filename[MAXFILENAME];

               if (startp != endp) startp = endp+1;
               while (startp < endbuf && *startp <= 32) startp++;
               endp = startp;
               while (*endp > 32) endp++;
               if (endp == startp) break;
               if (*endp < 32) finished = TRUE;
               *endp = 0;
               MKfname_contract(filename, startp, p->prefix);
               MKsources__touch(filename, p->prefix);
               if (finished == FALSE) *endp = ' ';
            }
         }
         dbox_dispose(&d);
         break;

      case MKsources_Touch_IAll:
         MKsources__touch_all(p->source_list, p->prefix);
         dbox_dispose(&d);
         break;

      default:
         break;
   }
}


extern void MKsources_touch_dbox(MKproject *p)
{
   dbox d;

   d = dbox_new("Touch");
   dbox_showstatic(d);
   dbox_eventhandler(d, MKsources__touch_handler, (void *)p);
   dbox_raw_eventhandler(d, MKsources__touch_raw_handler, 0);
}
