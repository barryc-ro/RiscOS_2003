/* Title:   MKmakefile.c
 * Purpose: to read/write a makefile for a project
 * Author:  IDJ
 * History: 16-Jul-90: IDJ: created
 *          18-Dec-90: IDJ: final targets now go <toolname> <flags> <member list>
 *          11-Mar-91: IDJ: makefile now has no conversion rules section
 *                          but understands $@ and $< and replaces these with
 *                          target and source names respectively.
 *          27-Mar-91: IDJ: attempt to make more robust when invalid makefile is given
 *          17-Apr-91: IDJ: improved parsing of user-editable targets containing :'s
 *          26-Apr-91: IDJ: made strcmp into cistrcmp
 *
 */

#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#include "werr.h"
#include "msgs.h"

#include "global.h"
#include "types.h"
#include "bool.h"
#include "utils.h"
#include "MKsources.h"
#include "MKmem.h"
#include "MKtools.h"
#include "MKsources.h"
#include "MKmembers.h"
#include "MKtargets.h"
#include "MKproject.h"
#include "MKfname.h"

#include "DDEswis.h"

#include "MKmakefile.h"

#define MAXLINELEN 80
#define MAXSTRLEN  256

/* Memo: IDJ 19-Sep-90: The Makefile format is determined by !Make, so we are very
 *                      strict about parsing the file.  In particular, the blank
 *                      line separating sections is significant!!!!
 */

static int ch = 0, lastch = 0;
static FILE *in;


static void getch(void)
{
   lastch = ch;
   ch = getc(in);
   if (ch == '\\')
   {
      ch = getc(in);
      if (ch == '\n')
          ch = getc(in);
      else
      {
          ungetc(ch, in);
          ch = '\\';
      }    
   }
}


static void skip_spaces(void)
{
   while ((ch != EOF) && (ch == ' ' || ch == '\t')) getch();
}


static void skip_whitespace(void)
{
   while ((ch != EOF) && (ch == ' ' || ch == '\n' || !isprint(ch))) getch();
}


static void skip_one_newline(void)
{
   if (ch == '\n')
   {
      getch();
   }
}


static void get_string(char *s, int max_len, int extra_terminator, BOOL skip_initial_spaces)
{
  int j = 0;
  if (skip_initial_spaces) skip_spaces();
  while ((ch >= ' ') && (ch != extra_terminator) && (ch != EOF) || ch == '\t')
  {
    if (j < max_len) s[j++] = ch;
    getch();
  }
  if (j >= max_len) j = max_len -1;
  s[j] = 0;

  /* --- if it's the terminator then skip it --- */
  if ((ch < ' ') || (ch == extra_terminator)) getch();
}


static BOOL check_active_comment(const char *comment)
{
   char string[MAXSTRLEN];

   skip_whitespace();

   /* --- check for active comment --- */
   get_string(string, MAXSTRLEN, 0, TRUE);
   if (cistrcmp(string, comment)) return FALSE;

   skip_one_newline();

   return TRUE;
}


static BOOL MKmakefile__projectname(MKproject *p)
{
   char string[MAXSTRLEN];

   skip_whitespace();
   get_string(string, MAXSTRLEN, ':', TRUE);
   if (cistrcmp(string, AC_projectname)) return FALSE;

   /* --- get project name --- */
   get_string(string, MAXSTRLEN, 0, TRUE);
   if (string[0] == 0) return FALSE;
   if (p->project_name) MKmem_free(p->project_name);
   stralloc(&p->project_name, string);
   
   return TRUE;
}


static BOOL MKmakefile__toolflags(MKproject *p)
{
   char string[MAXSTRLEN];
   char *s;
   MKtool *t;

   if (check_active_comment(AC_toolflags) == FALSE) return FALSE;

   /* --- set flags for each tool in list --- */
   while (TRUE)
   {
      /* --- get the tool name --- */
      get_string(string, MAXSTRLEN, '=', TRUE);
      if (string[0] == 0) break;
      if ((s = strstr(string, "flags")) == 0) return FALSE;
      *s = 0;
      t = MKtools_find_named(p->tool_list, string);

      /* --- get the flags --- */ 
      get_string(string, MAXSTRLEN, 0, TRUE);

      /* --- enter into tool list --- */
      if (string[0] != 0 && t != NULL)
      {
         if (t->flags) MKmem_free(t->flags);
         stralloc(&t->flags, string);
      }
   }

   return TRUE;
}


static BOOL MKmakefile__targets(MKproject *p)
{
   char string[MAXSTRLEN];
   MKtarget *t;
   int i;

   if (check_active_comment(AC_targets) == FALSE) return FALSE;
                               
   while (TRUE)
   {
      /* --- get the target name (stripping off '@.') --- */
      get_string(string, MAXSTRLEN, ':', TRUE);
      if (string[0] == 0 || strstr(string, "@.") != string) break;
      for (i=0; i<strlen(string)-1; i++) string[i] = string[i+2];

      /* --- make a new target for project p --- */
      p->target_list = MKtargets_addend(p->target_list, string, 0, TT_Maintained);
      t = MKtargets_find(p->target_list, string);
      if (t == 0) return FALSE;

      /* --- get the list of dependencies --- */
      while (TRUE)
      {
         skip_spaces();           /* NB ch == \n when there is no continuation mark */
         if (ch == '\n') break;   /* yuk */

         get_string(string, MAXSTRLEN, ' ', TRUE);

         /* NOTE just throw them away here - the member list comes next!! */
      }

      /* --- get the tool name used to make it and toolflags --- */
      skip_one_newline();
      get_string(string, MAXSTRLEN, ' ', TRUE);    /* toolname */
      if (string[0] == 0) return FALSE;
      if (t->toolname) MKmem_free(t->toolname);
      stralloc(&t->toolname, string);
      get_string(string, MAXSTRLEN, ' ', TRUE);    /* toolflags */
      if (string[0] == 0) return FALSE;

      /* --- get the list of objects --- */
      while (TRUE)
      {
         skip_spaces();
         if (ch == '\n') break;   /* yuk */

         get_string(string, MAXSTRLEN, ' ', TRUE);

         /* --- we don't know yet whether it's made from a source file,
                or is an external object file, so just store filename --- */
         if (string[0] != 0) 
             t->members = MKmembers_add_tempname(t->members, string);
      }
      skip_one_newline();
   }

   return TRUE;
}


static BOOL MKmakefile__usereditable(MKproject *p)
{
   char string[MAXSTRLEN];
   BOOL starting = FALSE;

   if (check_active_comment(AC_usereditable) == FALSE) return FALSE;
                                 
   while (!feof(in))
   {
      get_string(string, MAXSTRLEN, 0, FALSE);

      if (!cistrcmp(string, AC_statics))
      {
         skip_one_newline();
         break;
      }

      /* --- see if it is a user-defined target --- */
      if (!isspace(string[0]))
      {
         char *cp = string;

         while (*cp != 0)
         {
           if (*cp == ':' && (isspace(*(cp+1)) || *(cp+1) == ';' || *(cp+1) == 0)) 
              break;
           cp++;
         }

         if (*cp == ':')
         {
            *cp = 0;    /* zap the ':' */
            p->target_list = MKtargets_addend(p->target_list, string, 0, TT_User);
            *cp = ':';  /* ...and put it back again */
         }
      }

      /* --- put the last char back in the string (yuk) --- */
      if (lastch < ' ') {int l = strlen(string); string[l++]=lastch; string[l] = 0;}

      starting = (p->user_editable == 0);
      /* --- grow the user-editable part --- */
      if ((p->user_editable = realloc(p->user_editable, ((!starting)?strlen(p->user_editable):0)+strlen(string)+1)) == 0)
      {
         werr(FALSE, msgs_lookup("MKmkfile1:No space to read whole makefile"));
         return FALSE;
      }
      else
      {
         if (strlen(string))
         {
            if (starting) 
               strcpy(p->user_editable, string);
            else
               strcat(p->user_editable, string);
         }
      }
   }

   if (feof(in)) return FALSE;

   return TRUE;
}


static BOOL MKmakefile__statics(MKproject *p)
{
   char string[MAXSTRLEN];
   MKsource *s;
   MKtarget *t;
   MKmember *m;

   /* NB active comment has already been read by usereditable reader function */

   while (TRUE)
   {
      char source_name[MAXFILENAME];

      /* --- get the object name --- */
      get_string(string, MAXSTRLEN, ':', FALSE);
      if (string[0] == 0) break;

      /* --- get the source name --- */
      get_string(string, MAXSTRLEN, 0, TRUE);
      if (string[0] == 0) return FALSE;

      /* --- add the source name to source list --- */
      MKfname_contract(source_name, string, p->prefix);
      p->source_list = MKsources_add(p->source_list, source_name, MKtools_has_extension(source_name));

      /* --- throw away the command to make it --- */
      get_string(string, MAXSTRLEN, 0, TRUE);
      if (string[0] == 0) return FALSE;
   }

   /* --- now fix up each target's member list --- */
   /* --- what we do is:
               for each target
                   for each member
                       check to see if it is an obect filename made from a source filename
                           if so point at the entry in the source list
                           else keep filename as it is
      --- */

   t = p->target_list;
   while (t != 0)
   {  
      if (t->type == TT_Maintained)
      {
      m = t->members;
         while (m != 0)
         {
            char object[MAXFILENAME];

            if (m->type == MF_Tempname)
            {
               s = p->source_list;
               while (s != 0)
               {
                  MKsources_build_object_name(object, s->filename);
                  if (!cistrcmp(object, m->data.temp_name))
                  {
                      /* --- it was an object file made from a source file --- */
                      m->type = MF_Source;
                      MKmem_free(m->data.temp_name);
                      m->data.source = s;
                      s->usage++;
                      break;
                  }

                  s = s->next;
               }

               if (s == 0)
               {
                  /* --- must be an external object file (leave name as it is) --- */
                  m->type = MF_Object;
                  /* NB due to union m->data.object and temp_name are the same, so do nothing */
               }
            }
            else
               werr(TRUE, msgs_lookup("MKmkfile2:Internal error: non-temp filename in member list"));

            m = m->next;
         }
      }

      t = t->next;
   }

   return TRUE;
}


static BOOL MKmakefile__dynamics(MKproject *p)
{
   char string[MAXSTRLEN];
   BOOL starting = FALSE;

   if (check_active_comment(AC_dynamics) == FALSE) return FALSE;

   while (!feof(in))
   {
      get_string(string, MAXSTRLEN, '\n', TRUE);
      string[strlen(string)+1] = 0;
      string[strlen(string)] = '\n';

      /* --- grow the dynamic part --- */ 
      if (string[0] == 0) break;
      starting = (p->dynamic == 0);
      if ((p->dynamic = realloc(p->dynamic, ((!starting)?strlen(p->dynamic):0)+strlen(string)+1)) == 0)
      {
         werr(FALSE, msgs_lookup("MKmkfile1:No space to read whole makefile"));
         return FALSE;
      }
      else
      {
         if (strlen(string))
         {
            if (starting)
               strcpy(p->dynamic, string);
            else
               strcat(p->dynamic, string);
         }
      }
   }

   return TRUE;
}


extern BOOL MKmakefile_parse(MKproject *p, char *makefile)
{
   /* --- open the makefile --- */
   if ((in = fopen(makefile, "r")) == 0)
   {
      werr(FALSE, msgs_lookup("MKmkfile3:Can't open %s for reading"), makefile);
      return FALSE;
   }

   ch = lastch = 0;
   /* --- check for each section, if any missing this aint a project --- */
   if (MKmakefile__projectname(p) == FALSE){ fclose(in); return FALSE; }
   if (MKmakefile__toolflags(p) == FALSE){ fclose(in); return FALSE; }
   if (MKmakefile__targets(p) == FALSE){ fclose(in); return FALSE; }
   if (MKmakefile__usereditable(p) == FALSE){ fclose(in); return FALSE; }
   if (MKmakefile__statics(p) == FALSE){ fclose(in); return FALSE; }
   if (MKmakefile__dynamics(p) == FALSE){ fclose(in); return FALSE; }

   fclose(in);

   return TRUE;
}


extern BOOL MKmakefile_reparse(MKproject *p)
{
   char string[MAXSTRLEN];

   /* --- open the makefile --- */
   if ((in = fopen(p->makefile, "r")) == 0)
   {
      werr(FALSE, msgs_lookup("MKmkfile3:Can't open %s for reading"), p->makefile);
      return FALSE;
   }

   /* --- reparse user-editable and dynamic sections of makefile --- */
   ch = lastch = 0;

   /* --- skip 'til we find target section (and read over it) --- */
   while (!feof(in))
   {
      get_string(string, MAXSTRLEN, 0, TRUE);
      if (!cistrcmp(string, AC_targets)) break;
   }
   while (!feof(in))
   {
      get_string(string, MAXSTRLEN, 0, TRUE);
      if (string[0] == 0) break;
   }

   /* --- and read user-editable section again --- */
   if (p->user_editable)
   {
      /* --- first free up any old space used --- */
      MKmem_free(p->user_editable);
      p->target_list = MKtargets_remove_user_defined(p->target_list);
      p->user_editable = 0;
   }
   if (MKmakefile__usereditable(p) == FALSE){ fclose(in); return FALSE; }

   /* --- now skip static dependencies section --- */
   while(!feof(in))
   {
      get_string(string, MAXSTRLEN, 0, TRUE);
      if (string[0] == 0) break;
   }

   /* --- ... and read in new dynamics --- */
   if (p->dynamic)
   {
      MKmem_free(p->dynamic);
      p->dynamic = 0;
   }   
   if (MKmakefile__dynamics(p) == FALSE){ fclose(in); return FALSE; }

   fclose(in);

   return TRUE;
}


static void MKmakefile__write_members(MKmember *m, int *nchars, FILE *fp)
{
   /* --- go through member list to get dependencies --- */
   while (m != 0)
   {                   
      char object[MAXFILENAME];

      if (m->type == MF_Source)
          MKsources_build_object_name(object, m->data.source->filename);

      *nchars += (m->type == MF_Source)?(strlen(object)+1):((strlen(m->data.object_name)+1));
   
      /* --- check if we need to create a continuation line --- */
      if (*nchars >= MAXLINELEN)
      {
         *nchars = 1;
         fprintf(fp, "\\\n        ");
      }

      fprintf(fp, "%s ", (m->type == MF_Source)?object:m->data.object_name);
          
      m = m->next;
   }
}


extern BOOL MKmakefile_write(MKproject *p, BOOL read_first)
{
   FILE *fp;
   MKtool *tools;
   MKtarget *t;
   MKsource *sources;
   char object[MAXFILENAME];
   int nchars = 0;

   if (p->makefile == 0) return FALSE;

   /* --- first reparse the makefile to establish new user-editable and dynamic sections (!) --- */
   if (read_first)
       if (MKmakefile_reparse(p) == FALSE) return FALSE;
  
   if ((fp = fopen(p->makefile, "w")) == 0) return FALSE;

   /* --- # Project name:   <project name> --- */
   fprintf(fp, ACFormat_projectname, p->project_name);

   /* --- # Toolflags:   <flags for each tool> --- */
   fprintf(fp, ACFormat_toolflags);
   tools = p->tool_list;
   while (tools != 0)
   {
      fprintf(fp, "%sflags = ", tools->name);
      if (tools->flags) fprintf(fp, "%s", tools->flags);
      fprintf(fp, "\n");
      tools = tools->next;
   }

   /* --- # Final targets:  <list of final targets> --- */
   fprintf(fp, ACFormat_targets);
   t = p->target_list;
   while (t != 0)
   {  
      if (t->type == TT_Maintained)
      {
         fprintf(fp, "@.%s:   ", t->name);
         nchars = strlen(t->name)+strlen("@.:   ");

         /* --- output members list --- */
         MKmakefile__write_members(t->members, &nchars, fp);

         /* --- now output the action to make this target --- */
         fprintf(fp, "\n        %s $(%sflags) ", t->toolname, t->toolname);
         nchars = 2*strlen(t->toolname)+10+strlen("$(flags)");
         MKmakefile__write_members(t->members, &nchars, fp);

         fprintf(fp,"\n");
      }

      t = t->next;
   }

   /* --- # User-editable dependencies:  <untouched block>  --- */
   fprintf(fp, ACFormat_usereditable);
   if (p->user_editable != 0) 
      fprintf(fp, "%s", p->user_editable);
   else
      fprintf(fp, "\n\n");

   /* --- # Static dependencies:  <list of object:source pairs> --- */
   fprintf(fp, ACFormat_statics);
   sources = p->source_list;
   while(sources != 0)
   {
      MKtool *t = sources->make_using;
      char *conv;

      MKsources_build_object_name(object, sources->filename);
      fprintf(fp, "%s:   %s\n", object, sources->filename);

      /* --- get the tool used to make this object from this source --- */ 
      fprintf(fp, "        ");
      conv = t->conversion;
      while (*conv != 0)
      {
         if (*conv != '$')
            fputc(*conv, fp);
         else
         {
            if (*(conv+1) == '@')        /* target name */
            {
               fputs(object, fp);
               conv++;
            }
            else if (*(conv+1) == '<')   /* source name */
            {
               fputs(sources->filename, fp);
               conv++;
            }
            else fputc(*conv, fp);
         }

         conv++;
      }
      fprintf(fp, "\n");

      sources = sources->next;
   }

   /* --- # Dynamic dependencies:  <untouched block> --- */
   fprintf(fp, ACFormat_dynamics);
   if (p->dynamic != 0) fprintf(fp, "%s", p->dynamic);

   fclose(fp);

   /* --- now stamp the file of makefile type --- */
   set_type(p->makefile, FileType_Makefile);

   /* --- ... and say it is no longer modified --- */
   p->flags &= ~PF_Modified;
   MKproject_settitle(p);

   return TRUE;
}
