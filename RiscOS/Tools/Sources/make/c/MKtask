/* Title:   MKtask.c
 * Purpose: running multiple tasks under the task window module
 * Author:  IDJ
 * History: 5-Jul-90: IDJ: created (from srcedit)
 *          21-Feb-91: IDJ: send escape to terminate make job instead
 *                          of 'morite' message
 *          04-Apr-91: IDJ: check for failed output state creation
 *
 *          Re-release started (30-Oct-91 IDJ)
 *          31-Oct-91: IDJ: lock/unlock projects to fix bug DDE-0746
 *                          ie makefile can be corrupted if two makes
 *                          going on same project, or save during
 *                          project making!
 *
 */

/*
 * IDJ: 31-May-90
 * A word of explanation for the uninitiated:
 *     1. When we go: *taskwindow "cmd" -quit -wimpslot <n>K
 *        -task <task_id> -txt <txt_id>, the new task window
 *        module starts us up as a task. Note that task id is
 *        our id (not our child's) and txt id is some pointer
 *        into app. workspace.
 *
 *     2. We first get back the child's wimp task-id in a wimp
 *        message (MKtask_ego).  The first word of data is the
 *        "txt" pointer which we use to identify the appropriate
 *        entry in our list of states.
 *
 *     3. Whenever our child produces VDU output, the task window
 *        module intercepts it, and sends it to us in wimp
 *        messages (MKtask_output). NB first word of data gives length
 *        of output!
 *
 *     4. Since we have said "-quit", as soon as the task window module
 *        stops running the task it exits its CLI state and sends us
 *        a dying message (MKtask_morio).  We thus know when the task
 *        has stopped!
 *
 */


#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "flex.h"
#include "os.h"
#include "event.h"
#include "werr.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "msgs.h"
#include "dbox.h"

#include "global.h"
#include "types.h"
#include "utils.h"
#include "slist.h"
#include "bool.h"
#include "MKmem.h"
#include "MKoutput.h"
#include "MKproject.h"

#include "MKtask.h"

#define round(i) (((i)+3) & 0xfffffffc)
#define ESCAPE  '\x1b'


static MKtask_state *states = NULL;


static os_error * MKtask__sendmessage(MKtask_action action, wimp_t dest, MKtask_data * data)
{
   wimp_msgstr msg;

   msg.hdr.your_ref = 0; /* Not ACK */
   msg.hdr.action = (wimp_msgaction) action;
   if (data)
   {
     int size = data->size;
     msg.hdr.size = round(24 + size);
     memcpy(&msg.data, data, 4);
     if (size) memcpy(&msg.data.chars[4], data->data, size);
   } else msg.hdr.size = 20;
   return wimp_sendmessage(wimp_ESEND, &msg, dest);
}


static MKtask_state *findstatefromtask(wimp_t task)
{
   MKtask_state *s = states;

   while (s)
   {
     if (s->child == task) return s;
     s = s->next;
   }
   return NULL;
}

static MKtask_state *findstatefromtxt(MKoutputwin *t)
{
   MKtask_state *s = states;

   while (s)
   {
     if (s->output == t) return s;
     s = s->next;
   }
   return NULL;
}


extern os_error *MKtask_sendchar(MKoutputwin *t, char c)
{
   MKtask_state *s = findstatefromtxt(t);

   if (s != 0)
   {
      MKtask_data data;

      data.size = 1;
      data.data = &c;   /* this is disgusting */
      return MKtask__sendmessage(MKtask_input, s->child, &data);
   }

   return 0;
}

static void MKtask__dispose(MKtask_state *s)
{
   if (s->cmdline != 0) free(s->cmdline);

   /* --- get rid of any saveas box --- */
   if (s->saveas != 0)
   {
      dbox_hide(s->saveas);
      dbox_dispose(&s->saveas);
   }

   /* --- free output state --- */
   MKoutput_dispose(s->output);

   /* IDJ: 31-Oct-91: unlock project (bug fix DDE-0746) */
   MKproject_unlock(s->project);

   /* --- ... and bid it farewell --- */
   states = slist_remove(states, s);
   free(s);
}


static void MKtask__taskdying(MKtask_state *s)
{
   if (!(s->flags & TF_Aborted))
   {
      s->flags &= ~(TF_Running|TF_Aborted|TF_Paused);
      s->flags |= TF_Completed;
      MKoutput_settitles(s->output, TF_Completed);
   }

   /* --- set dbox fields to faded when finished --- */
   MKoutput_fadefields(s->output);

   /* IDJ: 31-Oct-91: unlock project (bug fix DDE-0746) */
   MKproject_unlock(s->project);

   /* --- is it marked for total demise? (ie is its window closed?) --- */
   if (s->flags & TF_Dead)
      MKtask__dispose(s);
}


static BOOL MKtask__bkg_events(wimp_eventstr *e, void *handle)
{
   MKtask_state  *s;

   handle = handle;

   switch(e->e)
   {
     case wimp_ESEND:
        switch (e->data.msg.hdr.action)
        {
          case MKtask_output:

             s = findstatefromtask(e->data.msg.hdr.task);
             if (s) MKoutput_addtobuffer(s->output, e->data.msg.data.words[0], &e->data.msg.data.chars[4]);
             return TRUE;

          case MKtask_morio:   /* alas, poor task...... */

             s = findstatefromtask(e->data.msg.hdr.task);
             if (s)
             {
                if (s->output->bufsize > 0 && s->output->buffer[s->output->bufsize-1] != '\n')
                {
                   /* --- force display of last dying gasps --- */
                   MKoutput_addtobuffer(s->output, 1, "\n");
                }
                MKtask__taskdying(s);
             }
             return TRUE;

          case MKtask_ego:

             /* --- child has started, store its task-id --- */
             /* --- first word of msg holds "txt" --- */
             s = findstatefromtxt((void *)(e->data.msg.data.words[0]));
             if (s) s->child = e->data.msg.hdr.task;
             return TRUE;

          default:
             return FALSE;
        }

     default:
        return FALSE;
   }
   return FALSE;
}


extern char *MKtask_get_cmdline(MKoutputwin *t)
{
   MKtask_state *s = findstatefromtxt(t);

   return (s != 0)?s->cmdline:0;
}


extern void MKtask_abort(MKoutputwin *t)
{
   MKtask_state *s = findstatefromtxt(t);

   if (s)
   {
      if (s->flags & TF_Paused) MKtask_continue(t);  /* so it can get the escape! */
      s->flags &= ~(TF_Running|TF_Paused|TF_Completed);
      s->flags |= TF_Aborted;
      if (s->child)
      {
         wimpt_noerr(MKtask_sendchar(t, ESCAPE));
#if FALSE
         wimpt_noerr(MKtask__sendmessage(MKtask_morite, s->child, NULL));
#endif
      }
   }
}


extern void MKtask_abort_and_dispose(MKoutputwin *t)
{
   MKtask_state *s = findstatefromtxt(t);

   if (s)
   {
      /* --- if it's already aborted, just remove its state, otherwise,
             mark it as dead and let the die handler deal with disposal --- */
      if (s->flags & (TF_Aborted|TF_Completed))
         MKtask__dispose(s);
      else
      {
         if (s->child)
         {
            if (s->flags & TF_Paused) MKtask_continue(t);  /* so it can get the escape! */
            wimpt_noerr(MKtask_sendchar(t, ESCAPE));
#if FALSE
            wimpt_noerr(MKtask__sendmessage(MKtask_morite, s->child, NULL));
#endif
         }
         s->flags |= TF_Dead;

         /* IDJ: 30-Oct-91: unlock project (just in case) bugfix DDE-0746 */
         MKproject_unlock(s->project);
      }
   }
}


extern void MKtask_pause(MKoutputwin *t)
{
   MKtask_state *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Aborted|TF_Running|TF_Completed);
      s->flags |= TF_Paused;
      if (s->child)
         wimpt_noerr(MKtask__sendmessage(MKtask_suspend, s->child, NULL));
   }
}


extern void MKtask_continue(MKoutputwin *t)
{
   MKtask_state *s = findstatefromtxt(t);

   if (s)
   {
      s->flags &= ~(TF_Aborted|TF_Paused|TF_Completed);
      s->flags |= TF_Running;
      if (s->child)
         wimpt_noerr(MKtask__sendmessage(MKtask_resume, s->child, NULL));
   }
}


extern void MKtask_killalltasks(void)
{
   MKtask_state *s = states;
   while (s)
   {
     if (s->child && !(s->flags & (TF_Aborted|TF_Completed)))
     {
        wimpt_noerr(MKtask_sendchar(s->output, ESCAPE));
#if FALSE
        wimpt_noerr(MKtask__sendmessage(MKtask_morite, s->child, NULL));
#endif
     }

     s = s->next;
   }
}


extern int MKtask_getflags(MKoutputwin *w)
{
   MKtask_state *s = findstatefromtxt(w);

   return (s)?s->flags:0;
}


extern BOOL MKtask_anyactive(void)
{
   MKtask_state *s = states;

   while (s != 0)
   {
      if (!(s->flags & (TF_Completed|TF_Aborted)))
          return TRUE;
      s = s->next;
   }

   return FALSE;
}


extern void MKtask_request_taskwindow(char *cmd, MKproject *p)
{
   char taskcmd[MAXCMDLINE];
   MKtask_state *s;
   MKoutputwin *output;
   os_error *e;

   /* --- check that a make is not going for this project --- */
   /* IDJ: 31-Oct-91: bug fix DDE-0746 */
   if (p != 0 && MKproject_islocked(p))
   {
      werr(FALSE, msgs_lookup("MKprj14:Can't do this operation because a Make job is currently running for this project"));
      return;
   }

   /* --- don't bother if taskwindow not around --- */
   if ((e = os_cli("RMEnsure TaskWindow 0")) != 0)
   {
        werr(FALSE, msgs_lookup("MKtask1:Task window not active"));
        return;
   }

   /* --- create new state --- */
   s = MKmem_alloc(sizeof(MKtask_state));

   s->child = 0; /* Don't know child taskid yet */
   s->saveas = 0;
   s->flags = TF_Running;
   s->cmdline = 0;
   stralloc(&s->cmdline, cmd);
   /* IDJ: 31-Oct-91: added to allow project locking (to fix DDE-0746) */
   s->project = p;

   /* --- create new associated text/summary window --- */
   output = MKoutput_new();
   s->output = output;
   if (s->output == 0)
   {
      MKmem_free(s->cmdline);
      MKmem_free(s);
      return;
   }

   /* --- add it to the list of states --- */
   states = slist_add(states, s);

   /* --- run in a task window --- */
   strncpy(taskcmd, "*taskwindow \"", MAXCMDLINE);
   strncat(taskcmd, cmd, MAXCMDLINE);
   add_char(taskcmd, '"');
   strncat(taskcmd, " -quit ", MAXCMDLINE);
   strncat(taskcmd, " -name Make_task", MAXCMDLINE);
   strncat(taskcmd, " -task &", MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%x", wimpt_task());
   strncat(taskcmd, " -txt &", MAXCMDLINE);
   sprintf((taskcmd+strlen(taskcmd)), "%x", (int)(s->output));
   wimpt_noerr(wimp_starttask(taskcmd));

   /* --- display an output window --- */
   MKoutput_show(output);

   /* IDJ: 31-Oct-91: lock the project - bugfix DDE-0746 */
   MKproject_lock(s->project);
   /* assert: it can always be unlocked now by closing the output window */
}


extern void MKtask_init(void)
{
   win_add_unknown_event_processor(MKtask__bkg_events, 0);
}
