/* Title:   MKtargets.c
 * Purpose: Creating and maintaining target lists
 * Author:  IDJ
 * History: 11-Jul-90: IDJ: created
 *          24-Jan-91: IDJ: fix to assign zero to member list when creating new target
 *                          (previously not working for user-defined targets)
 *                          and remove members only for maintained targets,
 *                          when removing a target.
 *          05-Mar-91: IDJ: check for no target or tool name given
 *          06-Mar-91: IDJ: added interactive help
 *          12-Mar-91: IDJ: new targets on front of list
 *          26-Apr-91: IDJ: made strcmp into cistrcmp
 *          30-Apr-91: IDJ: copied template set to zero
 *
 */                

#include <string.h>

#include "dbox.h"
#include "werr.h"
#include "msgs.h"
#include "help.h"
#include "flex.h"
                  
#include "global.h"
#include "types.h"
#include "utils.h" 
#include "slist.h"
#include "dlist.h"
#include "MKmem.h"
#include "MKtools.h"
#include "MKproject.h"
#include "MKmembers.h"

#include "MKtargets.h"

#define MKtargets_IOK       0
#define MKtargets_ITarget   1
#define MKtargets_ITool     2


extern BOOL MKtargets_change_target(MKproject *p)
{
   /* --- check we can change target --- */
   if (p->current_target == 0) return FALSE;
   if (p->current_target->next == 0 && p->current_target->prev == 0)
   {
      werr(FALSE, msgs_lookup("MKtarg1:Can't remove only target"));
      return FALSE;
   }

   /* --- try up then down list --- */
   if (p->current_target->prev != 0)
      p->current_target = p->current_target->prev;
   else
      p->current_target = p->current_target->next;

   /* --- reset the dialogue box --- */
   MKproject_reset_target(p);

   return TRUE;
}


static MKtarget *MKtargets__create(char *targetname, char *toolname, int type)
{
   MKtarget *new;

   new = MKmem_alloc(sizeof(MKtarget));
   stralloc(&new->name, targetname);
   new->type = type;
   new->members = 0;
   if (type == TT_Maintained)
   {
      if (toolname) 
          stralloc(&new->toolname, toolname);
      else
          new->toolname = 0;
      new->members_window.copy_t = 0;
      new->members_window.w = 0;
      new->members_window.buffer = 0;
      new->members_window.line_offsets = 0;
      new->members_window.nlines = 0;
   }

   return new;
}


extern MKtarget *MKtargets_addend(MKtarget *head, char *targetname, char *toolname, int type)
{
   MKtarget *new;

   new = MKtargets__create(targetname, toolname, type);

   head = dlist_addend(head, (void *)new);

   return head;
}


extern MKtarget *MKtargets_add(MKtarget *head, char *targetname, char *toolname, int type)
{
   MKtarget *new;

   new = MKtargets__create(targetname, toolname, type);

   head = dlist_add(head, (void *)new);

   return head;
}


extern MKtarget *MKtargets_remove(MKtarget *head, MKtarget *t)
{
   MKmem_free(t->name);
   if (t->type == TT_Maintained)
       t->members = MKmembers_remove_all(t->members);
   head = dlist_remove(head, (void *)t);
   MKmem_free(t);

   return head;
}


extern MKtarget *MKtargets_remove_all(MKtarget *head)
{
   while (head != 0)
   {
      head = MKtargets_remove(head, head);
   }

   return head;
}


extern MKtarget *MKtargets_remove_user_defined(MKtarget *head)
{
   MKtarget *t = head, *save_t;

   while (t != 0)
   {
      save_t = t->next;

      if (t->type == TT_User)
         head = MKtargets_remove(head, t);
      
      t = save_t;
   }

   return head;
}


extern MKtarget *MKtargets_find(MKtarget *head, char *targetname)
{
   MKtarget *p = head;

   while (p != 0)
   {
      if (!cistrcmp(p->name, targetname))
         break;
      p = p->next;
   }
   return p;
}


extern BOOL MKtargets_member_list_showing(MKtarget *t)
{
   return ((t != 0 && t->members_window.copy_t != 0)?TRUE:FALSE);
}


extern void MKtargets_refresh_member_list(MKtarget *t, MKproject *p)
{
   if (t != 0 && t->members_window.copy_t != 0)
   {
      /* --- delete the old member list --- */
      flex_free((flex_ptr)&t->members_window.buffer);
      flex_free((flex_ptr)&t->members_window.line_offsets);
      t->members_window.buffer = 0;
      t->members_window.line_offsets = 0;

      MKmembers_list(p, FALSE);
   }
}


extern void MKtargets_new(MKproject *p)
{
   dbox d;
   wimp_icon wi;
   char *target_buf, *tool_buf;

   d = dbox_new("NewTarget");
   if (d == 0) return;
   dbox_raw_eventhandler(d, help_dboxrawevents, "NEWTARG");
   dbox_show(d);

   while(TRUE)
   {
      if (dbox_fillin(d) == MKtargets_IOK)
      {
         /* --- get target and tool names --- */
         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), MKtargets_ITarget, &wi));
         target_buf = MKmem_alloc(wi.data.indirecttext.bufflen);
         dbox_getfield(d, MKtargets_ITarget, target_buf, wi.data.indirecttext.bufflen);
         if (target_buf[0] == 0)
         {
             werr(FALSE, msgs_lookup("MKtarg2:Target has not been given a name"));
             MKmem_free(target_buf);
             continue;
         }

         wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), MKtargets_ITool, &wi));
         tool_buf = MKmem_alloc(wi.data.indirecttext.bufflen);
         dbox_getfield(d, MKtargets_ITool, tool_buf, wi.data.indirecttext.bufflen);
         if (tool_buf[0] == 0)
         {
             werr(FALSE, msgs_lookup("MKtarg3:Tool name not given for this target"));
             MKmem_free(target_buf);
             MKmem_free(tool_buf);
             continue;
         }

         p->target_list = MKtargets_add(p->target_list, target_buf, tool_buf, TT_Maintained);

         /* --- mark project as modified --- */
         p->flags |= PF_Modified;
         MKproject_settitle(p);

         MKmem_free(target_buf);
         MKmem_free(tool_buf);

         if (!dbox_persist())
             break;
      }
      else
         break;
   }

   dbox_dispose(&d);
}
