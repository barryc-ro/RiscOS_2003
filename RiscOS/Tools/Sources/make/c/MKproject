/* Title:   MKproject.c
 * Purpose: Creating and maintaining projects
 * Author:  IDJ
 * History: 10-Jul-90: IDJ: created
 *          16-Jan-91: IDJ: Makefile always written (and re-read) on Save click
 *          05-Mar-91: IDJ: rt-click on arrows reverses direction of target change
 *          06-Mar-91: IDJ: added interactive help
 *          12-Mar-91: IDJ: new targets added to front of list
 *          14-Mar-91: IDJ: announce when removing incorrect projects
 *          04-Apr-91: IDJ: ask about unsaved modified makefiles
 *          16-Apr-91: IDJ: bring new project box to front on left click
 *          25-Apr-91: IDJ: fixed displacement of project dboxes
 *          26-Apr-91: IDJ: made makefile name and proj name comparison case-insensitive
 *          30-Apr-91: IDJ: made safer when out of windows
 *
 *          Re-release started (30-Oct-91  IDJ)
 *          30-Oct-91: IDJ: added MKproject_lock and MKproject_unlock
 *          31-Oct-91: IDJ: added MKproject_islocked
 *
 */

#include <string.h>
#include <stdio.h>

#include "wimp.h"
#include "wimpt.h"
#include "dbox.h"
#include "event.h"
#include "werr.h"
#include "msgs.h"
#include "xferrecv.h"
#include "xfersend.h"
#include "win.h"
#include "res.h"
#include "visdelay.h"
#include "help.h"
#include "dboxquery.h"

#include "global.h"
#include "types.h"
#include "utils.h"
#include "slist.h"
#include "MKmenus.h"
#include "MKmem.h"
#include "MKsources.h"
#include "MKtargets.h"
#include "MKtools.h"
#include "MKcmdline.h"
#include "MKtask.h"
#include "MKmakefile.h"
#include "MKmembers.h"
#include "MKfname.h"

#include "MKproject.h"

/* "new" dbox */
#define MKproject_IMakefile  2
#define MKproject_IOK        3
#define MKproject_IName      6
#define MKproject_ITarget    8
#define MKproject_ITool     10

/* "project" dbox */
#define MKproject_IMake        0
#define MKproject_IInsert      1
#define MKproject_IInsertOK    2
#define MKproject_IRemove      3
#define MKproject_IRemoveOK    4
#define MKproject_ITargets     5
#define MKproject_ITargetUp    6
#define MKproject_ITargetDown  7
#define MKproject_ISave       11

/* y coords of where to open project dbox */
#define OFFSETY  (48)
#define MINY    (-200)
static int MKproject__basedboxy0 = 0;
static int MKproject__basedboxy1 = 0;
static int MKproject__starty = 0;

static MKproject *MKproject__list = 0;
static dbox       MKproject__new_d = 0;


/* ------------------------------------ maintaining projects ------------------------------- */

extern void MKproject_lock(MKproject *p)
{
   if (p != 0) p->flags |= PF_Locked;
}

extern void MKproject_unlock(MKproject *p)
{
   if (p != 0) p->flags &= ~PF_Locked;
}

extern BOOL MKproject_islocked(MKproject *p)
{
   return ((p != 0) && (p->flags & PF_Locked));
}

extern MKproject *MKproject_find_named(char *name)
{
   MKproject *p;

   p = MKproject__list;

   while (p != 0)
   {
      if (!cistrcmp(p->project_name, name)) break;
      p = p->next;
   }

   return p;
}


extern void MKproject_reset_target(MKproject *p)
{
   if (p->current_target)
      dbox_setfield(p->project_d, MKproject_ITargets, p->current_target->name);
}


extern void MKproject_settitle(MKproject *p)
{
   char *tit_buf;

   /* --- set the window title --- */
   tit_buf = MKmem_alloc(strlen(msgs_lookup("MKprj1:Project: "))+strlen(p->project_name)+((p->flags & PF_Modified)?3:1));
   strcpy(tit_buf, msgs_lookup("MKprj1:Project: "));
   strcat(tit_buf, p->project_name);
   if (p->flags & PF_Modified) strcat(tit_buf, " *");
   win_settitle(dbox_syshandle(p->project_d), tit_buf);
   MKmem_free(tit_buf);
}


static void MKproject__targetup(MKproject *p, dbox d)
{
   MKtarget *t = p->current_target;

   if (t != 0)
   {
      if (t->prev != 0)
      {
         t = t->prev;
         p->current_target = t;
         dbox_setfield(d, MKproject_ITargets, t->name);
      }
   }
}


static void MKproject__targetdown(MKproject *p, dbox d)
{
   MKtarget *t = p->current_target;

   if (t != 0)
   {
      if (t->next != 0)
      {
         t = t->next;
         p->current_target = t;
         dbox_setfield(d, MKproject_ITargets, t->name);
      }
   }
}


static void MKproject__project_events(dbox d, void *handle)
{
   MKproject *p = (MKproject *)handle;
   dbox_field field;

   switch(field = dbox_get(d))
   {
      case dbox_CLOSE:
         dbox_hide(d);
         break;

      case MKproject_IMake:
         {
            char cmd[MAXCMDLINE];

            /* --- do an amu --- */
            if ((p->current_target->type == TT_Maintained && p->current_target->members != 0) || p->current_target->type == TT_User)
            {
               if (p->flags & PF_Modified) MKmakefile_write(p, TRUE);
               MKcmdline_build(cmd, p->makefile, p->current_target->name, p->make_flags, p->current_target->type == TT_User);
               MKtask_request_taskwindow(cmd, p);
            }
            else
               werr(FALSE, msgs_lookup("MKprj2:Current target has no members to make"));
         }
         break;

      case MKproject_ISave:
         /* IDJ: 31-Oct-91: check project not locked (DDE-0746) */
         if (MKproject_islocked(p))
         {
            werr(FALSE, msgs_lookup("MKprj14:Can't do this operation because a Make job is currently running for this project"));
         }
         else
            MKmakefile_write(p, TRUE);
         break;

      case MKproject_IInsertOK:
      case MKproject_IRemoveOK:
         /* --- insert/remove source(s) into/from the project --- */
         {
            char *startp, *endp, *endbuf;
            wimp_icon wi;
            BOOL finished = FALSE;
            char filename[MAXFILENAME];

            /* --- check it is a maintained target --- */
            if (p->current_target->type == TT_User)
            {
               werr(FALSE, msgs_lookup("MKmenus7:Can't do this operation on a user-defined target"));
               return;
            }

            /* --- process source file list --- */
            wimpt_noerr(wimp_get_icon_info(dbox_syshandle(d), (field==MKproject_IInsertOK)?MKproject_IInsert:MKproject_IRemove, &wi));
            startp = endp = wi.data.indirecttext.buffer;
            if (*startp < 32) return;
            endbuf = wi.data.indirecttext.buffer + wi.data.indirecttext.bufflen;
            while (!finished)
            {
               MKtool *t;  /* point at tool used to make source */

               /* --- get next filename --- */
               if (startp != endp) startp = endp+1;
               while (startp < endbuf && *startp <= 32) startp++;
               endp = startp;
               while (*endp > 32) endp++;
               if (endp == startp) break;
               if (*endp < 32) finished = TRUE;
               *endp = 0;

               /* --- process it as either source or object depending on 'extension' --- */
               MKfname_contract(filename, startp, p->prefix);
               if ((t = MKtools_has_extension(startp)) != 0)
               {
                   /* --- it is a source file --- */
                   if (field == MKproject_IInsertOK)
                   {
                      MKsource *s;

                      p->source_list = MKsources_add(p->source_list, filename, t);
                      s = MKsources_find(p->source_list, filename);
                      p->current_target->members = MKmembers_add_source(p->current_target->members, s);
                   }
                   else  /* MKproject_IRemoveOK */
                   {
                      MKsource *s = MKsources_find(p->source_list, filename);
                      if (s)
                      {
                         p->current_target->members = MKmembers_remove_source(p->current_target->members, s);
                         p->source_list = MKsources_remove(p->source_list, s);
                      }
                   }
               }
               else
               {
                  /* --- it is an object file --- */
                   if (field==MKproject_IInsertOK)
                       p->current_target->members = MKmembers_add_object(p->current_target->members, filename);
                   else
                       p->current_target->members = MKmembers_remove_object(p->current_target->members, filename);
               }

               /* --- ... and put back the space we just zapped --- */
               if (finished == FALSE) *endp = ' ';
            }

            /* --- blank down the icon --- */
            dbox_setfield(d, (field==MKproject_IInsertOK)?MKproject_IInsert:MKproject_IRemove, "");

            /* --- update any member list for this target (if showing ) --- */
            if (MKtargets_member_list_showing(p->current_target))
            {
               MKtargets_refresh_member_list(p->current_target, p);
            }

            /* --- ... and mark project as modified --- */
            if (!(p->flags & PF_Modified))
            {
               p->flags |= PF_Modified;
               MKproject_settitle(p);
            }
         }
         break;

      case MKproject_ITargetUp:
         {
            wimp_mousestr m;

            wimp_get_point_info(&m);
            if (m.bbits & wimp_BLEFT)
               MKproject__targetup(p, d);
            else if (m.bbits & wimp_BRIGHT)
               MKproject__targetdown(p, d);
         }
         break;

      case MKproject_ITargetDown:
         {
            wimp_mousestr m;

            wimp_get_point_info(&m);
            if (m.bbits & wimp_BLEFT)
               MKproject__targetdown(p, d);
            else if (m.bbits & wimp_BRIGHT)
               MKproject__targetup(p, d);
         }
         break;

      default:
         break;
   }
}


static BOOL MKproject__project_rawevents(dbox d, void *event, void *handle)
{
   wimp_eventstr *e = (wimp_eventstr *)event;
   IGNORE(handle);

   switch(e->e)
   {
      case wimp_ESEND:
      case wimp_ESENDWANTACK:
         if (e->data.msg.hdr.action == wimp_MDATALOAD)
         {
            wimp_i icon = e->data.msg.data.dataload.i;

            if (icon == MKproject_IInsert || icon == MKproject_IRemove)
            {
               char *filename;

               /* --- add filename to icon contents --- */
               xferrecv_checkinsert(&filename);
               xferrecv_insertfileok();
               do_insert(d, icon, filename);

               return TRUE;
            }
         }
         else if (e->data.msg.hdr.action == wimp_MHELPREQUEST)
                 return help_dboxrawevents(d, event, "PROJECT");
         break;

      default:
         break;
   }

   return FALSE;
}


extern void MKproject_save_makefiles(void)
{
   MKproject *p = MKproject__list;

   while (p != 0)
   {
      if (p->flags & PF_Modified)
      {
         char msg[80];

         sprintf(msg, msgs_lookup("MKprj12:Project %s modified, but not saved: do you want to save it?"), p->project_name);
         if (dboxquery(msg) == dboxquery_YES)
            MKmakefile_write(p, TRUE);
      }
      p = p->next;
   }
}


extern MKproject *MKproject_read_list(void)
{
   FILE *fp;
   MKproject *p = 0;
   char name[MAXCMDLINE];
   char makefile[MAXCMDLINE];

   if ((fp = res_openfile("choices.projects", "r")) == 0) return 0;

   while (!feof(fp))
   {
      if (getaline(fp, name) == TRUE) break;
      if (getaline(fp, makefile) == TRUE) break;
      if ((p = MKproject_create_project(makefile)) == 0) return 0;
      stralloc(&p->project_name, name);
   }

   fclose(fp);

   return p;
}


extern BOOL MKproject_write_list(void)
{
   MKproject *p = MKproject__list;
   FILE *fp;

   if ((fp = res_openfile("choices.projects", "w")) == 0) return FALSE;

   while (p != 0)
   {
      fprintf(fp, "%s\n", p->project_name);
      fprintf(fp, "%s\n", p->makefile);
      p = p->next;
   }

   fclose(fp);

   return TRUE;
}


/* -------------------------------------- opening projects --------------------------------- */


extern MKproject *MKproject_find_numbered(int number)
{
   MKproject *p = MKproject__list;

   for (; number > 0 && p != 0; number--) p = p->next;

   return p;
}


extern MKproject *MKproject_open(MKproject *p)
{
   wimp_wstate ws;
   BOOL is_a_proj, new_proj = FALSE;

   wimpt_noerr(wimp_get_wind_state(dbox_syshandle(p->project_d), &ws));

   /* --- parse the makefile here (if not already parsed) --- */
   if ((new_proj = !(p->flags & PF_Open)) != FALSE)
   {
      visdelay_begin();
      is_a_proj = MKmakefile_parse(p, p->makefile);
      visdelay_end();

      if (is_a_proj == FALSE)
      {
         /* --- although of type makefile, this aint a project matey --- */
         werr(FALSE, msgs_lookup("MKprj11:Format of makefile is incorrect - removing project"));
         MKproject_remove_project(p, FALSE);
         return 0;
      }
      else if (MKproject_find_named(p->project_name) != p)
      {
         werr(FALSE, msgs_lookup("MKprj3:A project called '%s' already exists"), p->project_name);
         MKproject_remove_project(p, FALSE);
         return 0;
      }
      else
         p->flags |= PF_Open;

      /* --- create directory to hold its toolflags --- */
      MKtools_create_directory(p->project_name);

      dbox_showstatic(p->project_d);
   }
   else
   {
      if (ws.flags & wimp_WOPEN)
      {
         ws.o.behind = -1;
         wimpt_noerr(wimp_open_wind(&ws.o));
      }
      else
         dbox_showstatic(p->project_d);
   }

   /* --- fill in dbox from project details --- */
   p->current_target = p->target_list;
   if (p->target_list != 0)
   {
      dbox_setfield(p->project_d, MKproject_ITargets, p->current_target->name);
   }

   /* --- set the window title --- */
   MKproject_settitle(p);

   /* --- now we open the dbox again, offset this time if new project --- */
   if (new_proj)
   {
      char cmd[MAXCMDLINE];
      wimp_eventstr *e;

      /* --- open the directory containing the makefile --- */
      sprintf(cmd, "Filer_OpenDir %s", p->prefix);
      os_cli(cmd);
      /* KLUDGE - loop polling wimp, so that filer gets in as current app
         and creates its window on upcall, before we re-open our window on top */
      event_setmask((wimp_emask) (event_getmask() & ~wimp_EMNULL));
      do {
            event_process();
            e = wimpt_last_event();
      } while (e->e != wimp_ENULL);
      event_setmask((wimp_emask) (event_getmask() | wimp_EMNULL));

      /* --- reopen our window on top --- */
      ws.o.behind = -1;
      wimpt_noerr(wimp_open_wind(&ws.o));
   }

   return p;
}


extern char *MKproject_project_list(void)
{
   MKproject *p;
   int len = 0;
   char *buffer;

   /* --- first count space needed --- */
   p = MKproject__list;
   while (p != 0)
   {
      len += strlen(p->project_name)+1;   /* +1 for ',' or \0 */
      p = p->next;
   }

   if (len == 0) return 0;

   buffer = MKmem_alloc(len);
   buffer[0] = 0;

   /* --- now fill the buffer with comma-separated list of projects --- */
   p = MKproject__list;
   while (p != 0)
   {
      strcat(buffer, p->project_name);
      if (p->next != 0)
         add_char(buffer, ',');
      p = p->next;
   }

   return buffer;
}


extern MKproject *MKproject_find(char *makefile)
{
   MKproject *p;

   p = MKproject__list;

   while (p != 0)
   {
      if (!cistrcmp(p->makefile, makefile)) break;
      p = p->next;
   }

   return p;
}

/* --------------------------------------- removing projects ------------------------------- */

extern void MKproject_remove_project(MKproject *p, BOOL delete_toolflags_directory)
{
   /* --- delete toolflags directory --- */
   if (delete_toolflags_directory && p->project_name != 0)
       MKtools_delete_directory(p->project_name);

   /* --- free all space associated with the project --- */
   if (p->project_name != 0) MKmem_free(p->project_name);
   if (p->makefile != 0) MKmem_free(p->makefile);
   if (p->prefix != 0) MKmem_free(p->prefix);
   if (p->project_d != 0) dbox_dispose(&p->project_d);
   if (p->project_m != 0) menu_dispose(&p->project_m, TRUE);
   if (p->user_editable != 0) MKmem_free(p->user_editable);
   if (p->dynamic != 0) MKmem_free(p->dynamic);

   /* --- remove the copy of the tool list --- */
   p->tool_list = MKtools_remove_all(p->tool_list);

   /* --- remove the target list --- */
   p->target_list = MKtargets_remove_all(p->target_list);

   /* --- remove the source list --- */
   p->source_list = MKsources_remove_all(p->source_list);

   /* --- ... and free it from the list --- */
   MKproject__list = slist_remove(MKproject__list, (void *)p);
   MKmem_free(p);
}


/* -------------------------------------- creating new projects ---------------------------- */


extern MKproject *MKproject_create_project(char *makefile)
{
   MKproject *new;
   template *t;

   /* --- allocate space --- */
   new = MKmem_alloc(sizeof(MKproject));

   /* --- create a dbox for it (with menu maker and event handlers) --- */
   t = template_find("Project");
   t->window.box.y0 = MKproject__basedboxy0 + MKproject__starty;
   t->window.box.y1 = MKproject__basedboxy1 + MKproject__starty;
   MKproject__starty -= OFFSETY;
   if (MKproject__starty < MINY) MKproject__starty = 0;
   new->project_d = dbox_new("Project");
   if (new->project_d == 0)
   {
      werr(FALSE, msgs_lookup("MKprj13:Unable to create project -- not enough space (or too many windows)"));
      MKmem_free(new);
      return 0;
   }
   dbox_eventhandler(new->project_d, MKproject__project_events, new);
   dbox_raw_eventhandler(new->project_d, MKproject__project_rawevents, new);
   event_attachmenumaker(dbox_syshandle(new->project_d), MKmenus_project_maker, MKmenus_project_proc, (void *)new);

   /* --- set up initial state --- */
   stralloc(&new->makefile, makefile);
   get_prefix(&new->prefix, makefile);
   new->flags = 0;
   new->make_flags = 0;
   new->project_m = 0;
   new->project_name = 0;
   new->user_editable = 0;
   new->dynamic = 0;
   new->tool_list = 0;
   new->current_target = 0;
   new->target_list = 0;
   new->source_list = 0;

   /* --- take a copy of the main tool list --- */
   new->tool_list = MKtools_copy_list();

   /* --- and add it to the list --- */
   MKproject__list = slist_addend(MKproject__list, (void *)new);

   return new;
}


static BOOL MKproject__save_project(char *makefile, void *handle)
{
   MKproject *p;
   int len = 0;
   dbox d = (dbox)handle;
   char target_name[MAXFILENAME], tool_name[MAXFILENAME];

   if (!xfersend_file_is_safe())
   {
      werr(FALSE, msgs_lookup("MKprj4:Projects cannot be saved to another application"));
      return FALSE;
   }

   /* --- save the makefile name --- */
   if (strlen(makefile) > 0)
   {
      /* --- create a new project struct --- */
      if ((p = MKproject_create_project(makefile)) == 0) return FALSE;
   }
   else
   {
      werr(FALSE, msgs_lookup("MKprj5:Project has empty Makefile field"));
      return FALSE;
   }

   /* --- save project name --- */
   len = fieldlength(dbox_syshandle(d), MKproject_IName);
   if (len > 0)
   {
      MKproject *pp;

      p->project_name = MKmem_alloc(len+1);
      dbox_getfield(d, MKproject_IName, p->project_name, len);

      /* --- check if project with this name exists --- */
      pp = MKproject_find_named(p->project_name);
      if (pp != 0 && pp != p)
      {
         werr(FALSE, msgs_lookup("MKprj6:A project with this name already exists"));
         MKproject_remove_project(p, FALSE);
         return FALSE;
      }

      /* --- create directory to hold its toolflags --- */
      MKtools_create_directory(p->project_name);
   }
   else
   {
      werr(FALSE, msgs_lookup("MKprj7:Project has empty Name field"));
      MKproject_remove_project(p, FALSE);
      return FALSE;
   }

   /* --- create initial target list --- */

   /* --- get the target name --- */
   len = fieldlength(dbox_syshandle(d), MKproject_ITarget);
   if (len > 0)
   {
      dbox_getfield(d, MKproject_ITarget, target_name, len);
   }
   else
   {
      werr(FALSE, msgs_lookup("MKprj8:Project has empty Target field"));
      MKproject_remove_project(p, FALSE);
      return FALSE;
   }

   /* --- get the tool name --- */
   len = fieldlength(dbox_syshandle(d), MKproject_ITool);
   if (len > 0)
   {
      dbox_getfield(d, MKproject_ITool, tool_name, len);
   }
   else
   {
      werr(FALSE, msgs_lookup("MKprj9:Project has empty Tool field"));
      MKproject_remove_project(p, FALSE);
      return FALSE;
   }

   p->target_list = MKtargets_add(p->target_list, target_name, tool_name, TT_Maintained);
   p->current_target = p->target_list;

   /* --- write out the makefile --- */
   if (MKmakefile_write(p, FALSE) == FALSE) return FALSE;

   /* --- and close the dialogue box --- */
   dbox_dispose(&d);
   MKproject__new_d = 0;

   /* --- ... and finally open the box (rather than taking the money!) --- */
   p->flags |= PF_Open;
   MKproject_open(p);

   return TRUE;
}


static void MKproject__newdbox_events(dbox d, void *handle)
{
   char makefile[MAXFILENAME];

   IGNORE(d);

   switch(dbox_get(d))
   {
      case dbox_CLOSE:
         dbox_hide(d);
         dbox_dispose(&d);
         MKproject__new_d = 0;
         break;

      case MKproject_IOK:
         {
            dbox_getfield(d, MKproject_IMakefile, makefile, MAXFILENAME);
            /* Check for name with no "." in it, and complain if so. */
            {
               int i = 0;
               BOOL dot = FALSE;
               while ((!dot) && makefile[i] != 0) dot = makefile[i++] == '.';

               if (! dot)
               {
                  werr(FALSE, msgs_lookup("MKprj10:To save, drag the icon to a directory viewer."));
                  break;
               }
             }

             if (MKproject__save_project(makefile, handle) == FALSE)
                return;
         }
         break;

      default:
         break;
   }
}


static BOOL MKproject__newdbox_rawevents(dbox d, void *event, void *handle)
{
   wimp_eventstr *e = (wimp_eventstr *)event;
   char filename[MAXFILENAME];

   switch (e->e)
   {
      case wimp_EBUT:
         if (e->data.but.m.bbits == wimp_BDRAGLEFT)
         {
            /* --- saving makefile --- */
            dbox_getfield(d, MKproject_IMakefile, filename, MAXFILENAME);
            xfersend(0xfe1, filename, /* kludge */ 1, MKproject__save_project, 0, 0, e, handle);
            return TRUE;
         }

      case wimp_ESEND:
      case wimp_ESENDWANTACK:
         if (e->data.msg.hdr.action == wimp_MHELPREQUEST)
             return help_dboxrawevents(d, event, "NEWPROJ");

      default:
         return FALSE;
   }

   return FALSE;
}


extern void MKproject_new(void)
{
   wimp_wstate ws;

   /* --- create/show "new project" dialogue box --- */
   if (MKproject__new_d == 0)
   {
       MKproject__new_d = dbox_new("NewProject");
       if (MKproject__new_d == 0) return;

      /* --- register event handlers --- */
      dbox_eventhandler(MKproject__new_d, MKproject__newdbox_events, MKproject__new_d);
      dbox_raw_eventhandler(MKproject__new_d, MKproject__newdbox_rawevents, MKproject__new_d);
   }

   wimpt_noerr(wimp_get_wind_state(dbox_syshandle(MKproject__new_d), &ws));
   if (ws.flags & wimp_WOPEN)
   {
      ws.o.behind = -1;
      wimpt_noerr(wimp_open_wind(&ws.o));
   }
   else
   {
      dbox_showstatic(MKproject__new_d);
      dbox_setfield(MKproject__new_d, MKproject_IMakefile, "Makefile");
   }

   set_caret(dbox_syshandle(MKproject__new_d), MKproject_IName);
}


extern void MKproject_init(void)
{
   template *t;

   t = template_find("Project");
   MKproject__basedboxy0 = t->window.box.y0;
   MKproject__basedboxy1 = t->window.box.y1;
}
