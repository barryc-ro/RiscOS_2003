/* Title:   MKtask.h
 * Purpose: running multiple tasks under the task window module
 * Author:  IDJ
 * History: 5-Jul-90: IDJ: created
 *
 *          Re-release started (30-Oct-91 IDJ)
 *          31-Oct-91: IDJ: added project field to MKtask_state for locking/unlocking
 *          31-Oct-91: IDJ: added project parameter to request taskwindow
 *
 */

#ifndef __MKtask_h
#define __MKtask_h

#ifndef __os_h
#include "os.h"
#endif

#ifndef __wimpt_h
#include "wimpt.h"
#endif

#ifndef __bool_h
#include "bool.h"
#endif

#ifndef __types_h
#include "types.h"
#endif


#define TaskModuleSWI 0x808C0

typedef enum 
{
      MKtask_input   = TaskModuleSWI,      /* Parent has input for child */
      MKtask_output  = TaskModuleSWI + 1,  /* Child has output for parent */
      MKtask_ego     = TaskModuleSWI + 2,  /* Child tells parent its name */
      MKtask_morio   = TaskModuleSWI + 3,  /* Child dies */
      MKtask_morite  = TaskModuleSWI + 4,  /* Parent kills child */
      MKtask_newtask = TaskModuleSWI + 5,  /* External agent requests task window */
      MKtask_suspend = TaskModuleSWI + 6,  /* Parent halts child */
      MKtask_resume  = TaskModuleSWI + 7   /* Parent continues child */
} MKtask_action;

typedef struct
{
      int    size;
      char * data;
} MKtask_data;


typedef struct state 
{
   struct state        *next;
   wimp_t               child;       /* The taskid of the child */
   MKoutputwin          *output;     /* The associated text/summary object */
   MKproject            *project;    /* The associated project (for locking) */
   dbox                 saveas;      /* The dbox used for saving file output */
   char                *cmdline;     /* which was used to run tool */
   int                  flags;       /* suspended/aborted etc */
   struct
   {
       int              ty;
       int              size;
   } result;                         /* output file details */
} MKtask_state;


extern char *MKtask_get_cmdline(MKoutputwin *t);
extern void MKtask_continue(MKoutputwin *t);
extern void MKtask_pause(MKoutputwin *t);
extern void MKtask_abort(MKoutputwin *t);
extern void MKtask_abort_and_dispose(MKoutputwin *t);
extern void MKtask_killalltasks(void);
extern int  MKtask_getflags(MKoutputwin *w);
extern BOOL MKtask_anyactive(void);
extern void MKtask_request_taskwindow(char taskcmd[], MKproject *p);
extern void MKtask_init(void);
extern os_error *MKtask_sendchar(MKoutputwin *t, char c);

#endif
