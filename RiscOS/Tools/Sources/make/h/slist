/* -> h.Slist
 * Title:       Slist - singly-linked lists
 * Author:      JGT (converted from MJJ)
 *              Copyright (C) 1988 Acorn Computers Limited
 */

#ifndef __slist_h
#define __slist_h

/* This is a generic package for handling singly-linked lists. The critical
 assumption is that the first item of a record to be added to the list is used
 as the link field. e.g.

 TYPE
   ListPtr = POINTER TO ListRec;
   ListRec = RECORD
     next: ListPtr;    (* 'Slist' can be used to chain 'ListRec' items *)
     ...blah blah...   (* on their 'next' field because it is the first *)
   END;                (* field in the record *)
  
*/

extern void *slist_add(void *listhead, void *newelement);
/* Adds 'newelement' to the front of the list whose head is 'listhead'
   Returns new value of listhead. */

extern void *slist_addend(void *listhead, void *newelement);
/* Adds 'newelement' to the end of the list whose head is 'listhead'.
   The link field of 'newelement' is set to NIL
   Returns new value of listhead. */

extern void *slist_remove(void *listhead, void *element);
/* Removes 'element' from the list whose head is 'listhead'
   Returns new value of listhead. */

extern void *slist_joinend(void *listhead, void *newlist);
/* Adds the list headed by 'newlist' to the end of 'listhead'
   Returns new value of listhead. */

#endif

