#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"

#include "softload.h"
#include "VersionNum"

#define PARANOID

/* Global data */
page_t image_pages=0, slot_pages=0;
addr_t image=0, target_paddr=0;
addr_t *vpage_to_paddr=0;

/* Options data */
static char *imagefile;
static addr_t loadaddr=0;
static char *progname;
static int flags=0;

void fatal_error(const char *str, _kernel_oserror *err) {
  fprintf(stderr, "Fatal error 0x%x during %s: %s\n",
          err->errnum, str, err->errmess);
  exit(1);
}

static void allocate_image(size_t image_size) {
  size_t slot_size;
  
  image_pages=(page_t)((image_size+PAGE_SIZE-1)>>PAGE_SHIFT);
  /* Slot=Image+Map+Indirection */
  slot_pages=image_pages+((image_pages+PAGE_WORDS-1)/PAGE_WORDS)+2;
  slot_size=(size_t)(slot_pages<<PAGE_SHIFT);
#ifndef VERBOSE
  printf("Allocating %d pages (%d bytes) for %d page image\n", slot_pages,
         slot_size, image_pages);
#endif
  image=(addr_t)malloc(slot_size+PAGE_SIZE-4);
  if(!image) {
    fprintf(stderr, "Not enough memory to load image.\n");
    exit(1);
  };
  image=END_OF_PAGE(image);
}

static void usage(void) {
  printf("Softload "Module_MajorVersion" ("Module_Date")\n");
  printf("Usage: %s [options] <image>\n"
         "  -a <address>  Load a specified address.\n"
         "" , progname);
  exit(0);
}

static void badopt(const char *msg) {
  if(msg)
    fprintf(stderr, "%s: %s\n", progname, msg);
  fprintf(stderr, "Use -h for help.\n");
  exit(1);
}

static void parse_options(int argc, char **argv) {
  int i;
  char *optarg;

  for(i=1; i<argc && argv[i][0]=='-'; i++) {
    /* Chack for '--' */
    if(argv[i][1]=='-') {
      if(argv[i][2])
        badopt("Long options not supported.");
      /* Eat option and exit loop. */
      i++;
      break;
    }
    switch(argv[i][1]) {
    case 'a':
      if(argv[i][2]) {
        optarg=argv[i]+2;
      } else if(++i<argc) {
        optarg=argv[i];
      } else {
        badopt("Option -a requires an argument.");
      }
      if(*optarg==0) {
        badopt("Bad number for option -a.");
      }
      loadaddr=(addr_t)strtoul(optarg, &optarg, 16);
      if(*optarg) {
        badopt("Bad number for option -a.");
      };
      break;
    case 'c':
      if(argv[i][2]) {
        optarg=argv[i]+2;
      } else if(++i<argc) {
        optarg=argv[i];
      } else {
        badopt("Option -c requires an argument.");
      }
      if(*optarg==0) {
        badopt("Bad number for option -c.");
      }
      loadaddr=(addr_t)strtoul(optarg, &optarg, 16);
      if(*optarg) {
        badopt("Bad number for option -c.");
      };
      printf("isram(0x%.8x)=%d\n", loadaddr, isram(loadaddr));
      exit(0);
    case 'd':
      flags|=START_FLAG_DEBUG;
      break;
    case 'h':
      usage();
      break;
    default:
      fprintf(stderr, "%s: Unknown option: '%s'.\n", progname, argv[i]);
      badopt(NULL);
      break;
    } /* Switch */
  } /* for */
  if(i!=argc-1) {
    fprintf(stderr, "Softload "Module_MajorVersion" ("Module_Date")\n");
    fprintf(stderr, "Usage: %s [options] <image-file>\n", progname);
    badopt(NULL);
  }
  imagefile=argv[i];
}

/* Softload the image specified. */
int main(int argc, char **argv) {
  addr_t **soft_page_table;
  page_t i;
  addr_t code_page;
  FILE *f;
  size_t image_size, read_size;

  progname=strrchr(argv[0], '.');
  progname=progname?progname+1:argv[0];

  parse_options(argc, argv);

  f=fopen(imagefile, "rb");
  if(!f) {
    fprintf(stderr, "Failed to open file '%s'\n", imagefile);
    exit(1);
  };
  
  /* Allocate enough space for the image. */
  if(fseek(f, 0, SEEK_END)) {
    fprintf(stderr, "Failed to seek to end of '%s'\n", imagefile);
    exit(1);
  }
  image_size=(size_t)ftell(f);
  allocate_image(image_size);
  rewind(f);

  /* Find a target physical address. */
  target_paddr=find_image_paddr(loadaddr);

  /* Read the memory map. */
  vpage_to_paddr=read_memmap(image, slot_pages);

  /* Create the page tables */
  soft_page_table=create_soft_page_table();

  /* Get a page for code. */
  code_page=(addr_t)pop_free_page();
  if(!code_page) {
    fprintf(stderr, "Oops.  No page for code.\n");
    exit(1);
  };

  /* Throw away free pages. */  
  for(i=0; pop_free_page();)
    i++;
  if(i)
    printf("Odd.  There were %d spare pages.\n", i);

  printf("Reading %d pages from '%s' to 0x%.8x\n", image_pages, imagefile,
         target_paddr);
  /* Do a paranoia check. */
#ifdef PARANOID
  for(i=0; i<image_pages; i++) {
    addr_t page=get_page_vaddr(soft_page_table, i);
    *(int*)page=i;
  }
  
  for(i=0; i<image_pages; i++) {
    addr_t page=get_page_vaddr(soft_page_table, i);
    if(*(int*)page!=i) {
      printf("Bad page 0x%.5x at 0x%.8x\n", i, page);
      *(int*)page=i;
    }
  }
#endif

  /* Now load the image into the pages. */
  read_size=read_file(soft_page_table, f);
  fclose(f);
  if(read_size<image_size) {
    fprintf(stderr, "Unexpected end of file '%s'\n", imagefile);
    exit(1);
  } else if(read_size>image_size) {
    fprintf(stderr, "Expected end of file '%s'\n", imagefile);
    exit(1);
  }

  /* Convert page table to physical addresses. */
  soft_page_table=convert_page_table(soft_page_table);
  /* Convert the code page to physical address */
  code_page=vpage_to_paddr[(code_page-image)>>PAGE_SHIFT];

  printf("start_new(%.8x, %p, %.8x, %.8x\n",
         code_page, soft_page_table, target_paddr, flags);
#if 0
  {
    time_t tm=time(NULL);
    while(time(NULL)-tm < 10)
      /* Nothing */;
  }
#endif

  /* Set it going. */
  start_new(code_page, soft_page_table, target_paddr, flags);
  return 0;
}
