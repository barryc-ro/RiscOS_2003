#include <stdlib.h>
#include <stdio.h>
#include "swis.h"

#include "softload.h"

/* Manipulate the soft page tables. */
void set_page_vaddr(addr_t **table, page_t page, addr_t vaddr) {
  page_t index=page/PAGE_WORDS;
  page_t sub_index=page%PAGE_WORDS;
  addr_t *sub_table=table[index];
  if(!sub_table) {
    page_t i;
    table[index]=sub_table=pop_free_page();
    if(!sub_table) {
      fprintf(stderr, "Oops.  No free page for memory map.\n");
      exit(1);
    }
    for(i=0; i<PAGE_WORDS; i++)
      sub_table[i]=0;
  }
  sub_table[sub_index]=vaddr;
}

addr_t get_page_vaddr(addr_t **table, page_t page) {
  page_t index=page/PAGE_WORDS;
  page_t sub_index=page%PAGE_WORDS;
  
  return table[index]?table[index][sub_index]:0;
}

/* Convert all virtual addresses in the table to physical address. */
addr_t **convert_page_table(addr_t **table) {
  page_t index, sub_index, vpage;

  for(index=0; index<PAGE_WORDS; index++) {
    addr_t *sub_table=table[index];
    if(sub_table) {
      for(sub_index=0; sub_index<PAGE_WORDS; sub_index++) {
        addr_t vaddr=sub_table[sub_index];
        if(vaddr) {
          sub_table[sub_index]=vpage_to_paddr[(vaddr-image)>>PAGE_SHIFT];
        };
      };
      vpage=(((addr_t)sub_table)-image)>>PAGE_SHIFT;
      table[index]=(addr_t *)vpage_to_paddr[vpage];
    };
  };
  return (addr_t **)vpage_to_paddr[(((addr_t)table)-image)>>PAGE_SHIFT];
}

/* Uses memory at image as temporary space. */
addr_t *read_memmap(addr_t image, page_t npages) {
  memmap_t *p=(void*)image;
  page_t i;
  addr_t *res;
  _kernel_swi_regs r;
  _kernel_oserror *err;
  
  res=malloc(npages*sizeof(void*));
  if(!res) {
    fprintf(stderr, "Not enough memory for map.\n");
    exit(1);
  };

  for(i=0; i<npages; i++) {
    p[i].vaddr=image+(i<<PAGE_SHIFT);
  }

  r.r[0]=0x2200; /* Convert from logical address to physical address. */
  r.r[1]=image;
  r.r[2]=npages;
  err=_kernel_swi(OS_Memory, &r, &r);
  if(err)
    fatal_error("OS_Memory(0xA00)", err);

  for(i=0; i<npages; i++) {
    res[i]=p[i].paddr;
  };
  return res;
}

static page_t vpage_to_ipage(page_t vpage) {
  addr_t paddr=vpage_to_paddr[vpage];
  page_t res;
  res=(paddr-target_paddr)>>PAGE_SHIFT;
  if(res>=image_pages)
    return (page_t)-1; /* Page not part of image. */
  return res;
}

addr_t **create_soft_page_table(void) {
  addr_t **soft_page_table;
  page_t i;

  /* Put free pages on the free list. */
  for(i=0; i<slot_pages; i++) {
    if(vpage_to_ipage(i)>=image_pages) /* Free page */
      push_free_page((void*)(image+(i<<PAGE_SHIFT)));
  }
  
  /* Allocate the main page table */
  soft_page_table=pop_free_page();
  if(!soft_page_table) {
    fprintf(stderr, "Oops.  No soft page table\n");
    exit(1);
  };
  
  /* Blank the page table. */
  for(i=0; i<PAGE_WORDS; i++)
    soft_page_table[i]=0;
  
  /* Fill in addresses of target pages */
  for(i=0; i<slot_pages; i++) {
    page_t ipage=vpage_to_ipage(i);
    if(ipage<image_pages) {
#ifdef VERBOSE
      printf("Found page 0x%x in slot 0x%x vaddr=0x%.5x\n",
             ipage, i, image+i*PAGE_SIZE);
#endif
      set_page_vaddr(soft_page_table, ipage, image+(i<<PAGE_SHIFT));
    }
  }
  
  /* Put in free pages for those not allocated */
  for(i=0; i<image_pages; i++) {
    /* Get the virtual address of this page. */
    addr_t page=get_page_vaddr(soft_page_table, i);
    if(!page) {
#ifdef VERBOSE
      printf("Allocating free page for offset 0x%.5x\n", i*PAGE_SIZE);
#endif
      page=(addr_t)pop_free_page();
      if(!page) {
        fprintf(stderr, "Oops.  No free page for image page 0x%x\n", i);
        exit(1);
      };
      set_page_vaddr(soft_page_table, i, page);
    }
#ifdef PARANOID
    if(page&0xfff) {
      printf("Page not aligned at offset 0x%.5x\n", i*PAGE_SIZE);
    } else {
      page_t ipage=vpage_to_ipage((page-image)>>PAGE_SHIFT)
      /* Is the page part of the target? */
      if(ipage<image_pages) {
        if(ipage!=i)
          printf("Page for offset 0x%.5x is vaddr=0x%.8x slot=0x%.5x"
                 " pageno=0x%.5x\n",
                 i*PAGE_SIZE, page, (page-image)>>PAGE_SHIFT,
                 ipage);
      } else {
        /* Do a sanity check on the virtual address. */
        if((page-image)>>PAGE_SHIFT>=slot_pages)
          printf("Bogus page for offset 0x%.5x.  vaddr=0x%.8x slot=0x%.5x\n",
                 i*PAGE_SIZE, page, (page-image)>>PAGE_SHIFT);
      }
    }
#endif
  }
  return soft_page_table;  
}
