#include <stdlib.h>
#include <stdio.h>
#include "swis.h"

#include "softload.h"

#define PHYS_MAP 0

#if PHYS_MAP
static const char *const type_names[]={
  "Not Present",
  "DRAM",
  "VRAM",
  "ROM",
  "I/O",
  "(5)",
  "(6)",
  "(7)"
};

static void phys_map(unsigned int *map, page_t npages) {
  page_t page;
  int old_type=-1;

  for(page=0; page<npages; page++) {
    int type=(map[page/8]>>(4*(page%8)))&7;
    if(type!=old_type) {
      printf("%.8x: %s\n", page<<PAGE_SHIFT, type_names[type]);
      old_type=type;
    }
  }
  printf("%.8x: end\n", page<<PAGE_SHIFT);
}

#endif

/* Walk through physical memory table, and find DRAM slot. */
static page_t find_dram_slot(unsigned int *map, page_t npages,
                             addr_t loadaddr)
{
  page_t page, dram_start=loadaddr>>PAGE_SHIFT;
  if(loadaddr & (PAGE_SIZE-1)) {
    fprintf(stderr, "Load address must be page aligned.\n");
    exit(1);
  }
  
  /* Walk through the map. */
  for(page=dram_start; page<npages; page++) {
    int type=(map[page/8]>>(4*(page%8)))&7;
    if(type==1) { /* DRAM */
      /* Have we found enough DRAM (including this page)?  Stop searching. */
      if(page+1-dram_start>=image_pages &&
         (loadaddr==0 || (loadaddr>>PAGE_SHIFT)==dram_start))
        return dram_start;
    } else {
      /* Did we find any DRAM?  Let the user know. */
      if(dram_start<page)
        printf("Found 0x%x bytes of DRAM at 0x%.8x\n",
               (page-dram_start)*PAGE_SIZE,
               dram_start*PAGE_SIZE);
      /* Maybe DRAM starts at the next megabyte boundary.  This value of
       * dram_start is only checked if it does.  Images must be loaded
       * at 1M boundaries (unless the user knows better). */
      dram_start=(page+0x100)&~0xff;
    }
  }
  /* Did we find any DRAM?  Let the user know. */
  if(dram_start<page)
    printf("Found 0x%x bytes of DRAM at 0x%.8x\n", (page-dram_start)*PAGE_SIZE,
           dram_start*PAGE_SIZE);
  return -1;  
}

static void softloaded_check(unsigned int *map, page_t npages) {
  addr_t image_addr;
  page_t i, start, len;
  image_addr=readw(L1PT+0x038);
  if(image_addr&3!=2) {
    fprintf(stderr, "Warning: Current OS not section mapped.\n");
    return;
  };
  image_addr&=0xfff00000;
  if(!isram(PHYSADDR(image_addr)))
    return;

  len=(readw((addr_t*)0x03800060)+PAGE_SIZE-1)>>PAGE_SHIFT;
  printf("Softloaded OS size: 0x%x pages @ 0x%.8x\n", len, image_addr);
  start=image_addr>>PAGE_SHIFT;
  for(i=0; i<len && i+start<npages; i++) {
    page_t index=(start+i)/8;
    page_t shift=4*((start+i)%8);
    int type=(map[index]>>shift)&7;
    /* Change None to DRAM */
    if(type==0)
      map[index]|=(1<<shift);
  }
}

/* Find DRAM slot large enough for image.  Uses image as workspace. */
addr_t find_image_paddr(addr_t loadaddr) {
  _kernel_swi_regs r;
  _kernel_oserror *err;
  unsigned int *map, *ws;
  size_t map_size;
  size_t page_size;
  addr_t image_ppage;

  /* Determine size of physical memory table. */
  r.r[0]=6;
  err=_kernel_swi(OS_Memory, &r, &r);
  if(err)
    fatal_error("OS_Memory(6)", err);

  map_size=r.r[1];
  page_size=r.r[2];
  /* Check page size, since we're here. */
  if(page_size!=PAGE_SIZE) {
    fprintf(stderr, "Page size wrong.  %d!=%d.\n", page_size, PAGE_SIZE);
    exit(1);
  }

  /* Attempt to use image as workspace. */
  if(map_size>image_pages*page_size) {
    /* Allocate a region if image isn't large enough. */
    map=ws=malloc((map_size+sizeof(*map)-1)&~sizeof(*map));
    if(!ws) {
      fprintf(stderr, "Not enough memory for physical address map.\n");
      exit(1);
    }
  } else {
    ws=0;
    map=(unsigned int *)image;
  }

  /* Read the physical memory map. */
  r.r[0]=7; /* Reason code - read physical memory map. */
  r.r[1]=(int)map; /* Space for table. */
  err=_kernel_swi(OS_Memory, &r, &r);
  if(err)
    fatal_error("OS_Memory(7)", err);

#if PHYS_MAP
  phys_map(map, map_size*2);
#endif

  /* Update table with softloaded image */
  softloaded_check(map, map_size*2);
  
  /* Find a DRAM slot in the table. */
  image_ppage=find_dram_slot(map, map_size*2, loadaddr);

  /* Free memory if we allocated it. */
  if(ws)
    free(ws);

  /* Did we find a slot? */
  if(image_ppage==(page_t)-1) {
    if(loadaddr) {
      fprintf(stderr, "Not enough DRAM for image at 0x%.8x.\n", loadaddr);
    } else {
      fprintf(stderr, "Not enough contiguous DRAM for image.\n");
    }
    exit(1);
  };
  return image_ppage*page_size;
}
