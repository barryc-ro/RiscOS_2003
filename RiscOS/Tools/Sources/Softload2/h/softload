#ifndef SOFTLOAD_H
#define SOFTLOAD_H

#include <stdio.h>
#include "kernel.h"

typedef unsigned int addr_t;
typedef unsigned int page_t;

typedef struct memmap {
  page_t  page;
  addr_t  vaddr;
  addr_t  paddr;
} memmap_t;

#define PAGE_SHIFT 12
#define PAGE_SIZE (1<<PAGE_SHIFT)
#define END_OF_PAGE(p) (((addr_t)(p)+PAGE_SIZE-1)&~(PAGE_SIZE-1))
#define PAGE_WORDS (PAGE_SIZE/sizeof(unsigned long))

#define L1PT ((addr_t *)0x02c0c000)
#define PHYSADDR(a) (0x80000000+(addr_t)a)

/* main.c */
void fatal_error(const char *str, _kernel_oserror *err);

/* freelist.c */
void push_free_page(void *addr);
void *pop_free_page(void);

/* pagemap.c */
void set_page_vaddr(addr_t **table, page_t page, addr_t vaddr);
addr_t get_page_vaddr(addr_t **table, page_t page);
addr_t **convert_page_table(addr_t **table);
page_t *read_memmap(addr_t image, page_t npages);
addr_t **create_soft_page_table(void);

/* physmem.c */
addr_t find_image_paddr(addr_t loadaddr);

/* fileio.c */
size_t read_file(addr_t **soft_page_table, FILE *f);

/* utils.s */
addr_t readw(addr_t *addr);
int isram(addr_t addr);

/* startnew.s */
void start_new(addr_t codepage, addr_t **regions, addr_t imageaddr, int flags);
#define START_FLAG_DEBUG 1

/* Global data */
extern page_t image_pages, slot_pages;
extern addr_t image;
extern addr_t *vpage_to_paddr;
extern addr_t target_paddr;

#endif
