		GET	Hdr:ListOpts
		GET	Hdr:Machine.<Machine>
		$GetMEMM
		$GetCPU
		$GetIO
		GET	s.Copro15ops
		GET	Hdr:Macros
		GET	Hdr:System
		GET	Hdr:Proc

pp_base		* &030109e0
pp_data		* 0
pp_status	* 4
pp_ctrl		* 8
pp_ecr		* &1008

		MACRO
$label		SetLEDS	$tmp1, $tmp2, $val
$label		MOV	$tmp1, #IOMD_Base
		MOV	$tmp2, $val
		STRB	$tmp2, [$tmp1, #IOMD_CLINES]
		MEND

; Keyboard command structure.
		GBLA	KeyNum
KeyNum		SETA	0

		MACRO
$label		Key	$num
$label		ROUT
KEY_$KeyNum	CMP	r0, #$num
KeyNum		SETA	KeyNum+1
		BNE	KEY_$KeyNum
		MEND
		
		MACRO
$label		EndKeys
$label
KEY_$KeyNum
		MEND

		EXPORT	Debug
		EXPORT	cache_flush
		IMPORT	|reloc$$Base|
		IMPORT	|reloc$$Limit|

		AREA	|reloc|, CODE

cache_flush	; Flush caches and TLBs
		ARM_read_ID r0
		AND	r0, r0, #&F000
		CMP	r0, #&8000			;ARM 8?
		CMPNE	r0, #&A000			;or StrongARM?
		MCRNE	ARM_config_cp, 0, R0, ARM67_cacheflush_reg, C0, 0
		MCRNE	ARM_config_cp, 0, R0, ARM67_TLBflush_reg, C0, 0
		MOVNE	pc, lr

		; We need to flush the cache as we're running on a
		; strongARM.  Find 32k region to clean cache on.  Use the
		; section we're running from.
		ADR	r0, cache_flush			; Already page aligned
		BIC	r0, r0, #&ff00			; Align down to 64k
20		LDR	r1, [r0], #32
		TST	r0, #&8000			; 32k bit set?
		BNE	%BT20

		MCR	ARM_config_cp, 0, R0, ARM8A_cache_reg, C7, 0
		MCR	ARM_config_cp, 0, R0, ARM8A_TLB_reg, C7, 0
		MCR	ARM_config_cp, 0, R0, ARM8A_cache_reg, C10, 4
		MOV	pc, lr

; Process user commands
Debug		ROUT
		STR	r13, old_r13		; Store old stack
		ADRL	r13, stack_top

		STMDB	r13!, {r0-pc}		; Dump registers
		mrs	r7, CPSR		; Store status registers
		mrs	r6, SPSR
		BIC	r8, r7, #&1f		; Mask current mode
		ORR	r8, r8, #&d3		; SVC mode, disable FIQ & INT
		msr	CPSR, r8
		msr	SPSR, r8

		LDR	r0, old_r13		; Get old r13
		LDR	r1, Intercept_off	; Get intercept address
		STR	r0, [r13, #13*4]	; Put r13 back on stack
		CMP	r1, #0			; Is breakpoint set?
		STREQ	lr, [r13, #15*4]	; No?  Put lr in pc
		ADRNE	r2, Debug		; Yes? Get address of entry
		ADDNE	r1, r1, r2		; and relocate bp address
		STRNE	r1, [r13, #15*4]	; Put break-point address in pc

		STMDB	r13!, {r6, r7}

		BL	cache_flush

		MOV	r4, r13			; Current data register

		BL	IO_Init

Debug_Loop	SetLEDS	r8, r9, #&f9		; Both LEDs off
		ADR	r0, Prompt
		BL	SendString
		BL	RecvByte

		SetLEDS	r8, r9, #&fd		; Green only

; Return
		Key	'g'			; 'G'
		BL	cache_flush
		LDMIA	r13!, {r6, r7}
		msr	CPSR, r7
		msr	SPSR, r6
		LDMIA	r13, {r0-pc}		; Return

; Set data register
		Key	's'			; 'S'
		BL	GetInt
		BNE	Err
		MOV	r4, r0
		B	Debug_Loop

; Read word
		Key	'r'			; 'R'
		BL	GetInt
		BNE	Err
		LDR	r4, [r0]
		B	Debug_Loop

; Write word
		Key	'w'			; 'W'
		BL	GetInt
		BNE	Err
		STR	r4, [r0]
		B	Debug_Loop

; Get Key
		Key	'k'			; 'K'
		BL	RecvByte
		MOV	r4, r0
		B	Debug_Loop

; View data register
		Key	'v'			; 'V'
		MOV	r0, r4
		BL	SendInt
		B	Debug_Loop

; Original value of data register (stack address)
		Key	'o'			; 'O'
		MOV	r4, sp
		B	Debug_Loop

; Insert breakpoint
		Key	'i'			; 'I'
		BL	GetInt
		BNE	Err

		LDR	r1, Intercept_off	; Get old address and contents
		ADR	r2, Debug
		TEQ	r1, #0
		ADD	r1, r1, r2
		LDR	r2, Intercept_word
		STRNE	r2, [r1]		; Restore old value
		MOVNE	r1, #0
		STRNE	r1, Intercept_off

		TST	r0, #3			; Make sure it's word aligned
		BNE	Err

		LDR	r2, [r0], #8		; Store old word, adjusting
		STR	r2, Intercept_word	; PC at the same time.

		ADR	r3, Debug		; Get entry address
		SUB	r2, r3, r0		; Get offset to debug entry
		MOV	r2, r2, ASL #6		; Clear top bits
		ADD	r1, r0, r2, ASR #6	; Get destination address

		CMP	r1, r3			; Check it's right
		BNE	Err			; If not, raise an error

		MOV	r2, r2, LSR #8		; Shift into lowest 24 bits
		ORR	r2, r2, #&EA000000	; Branch instruction
		STR	r2, [r0, #-8]!		; Store in location
		SUB	r0, r0, r3		; Relocate with entry
		STR	r0, Intercept_off	; Mark breakpoint active
		B	Debug_Loop
		
; Relocate image
		Key	'l'			; 'L'
		BL	GetInt
		BNE	Err

		LDR	r1, Intercept_off	; Restore breakpoint word
		ADR	r2, Debug
		TEQ	r1, #0
		ADD	r1, r1, r2
		LDRNE	r2, Intercept_word
		MOVNE	r3, #0
		STRNE	r2, [r1]
		STRNE	r3, Intercept_off	; Mark breakpoint as inactive

		ADR	r1, |reloc$$Base|	; Move this page
		ADD	r2, r1, #&1000		; Stop address
		SUB	r3, r0, r1		; Get offset

10		LDR	r5, [r1], #4
		CMP	r1, r2
		STR	r5, [r0], #4
		BNE	%BT10

		ADD	r13, r13, r3		; Adjust stack pointer
		ADR	r0, Debug_Loop		; Get address in old copy
		ADD	pc, r0, r3		; Adjust for offset and go

; ALT - protected key sequences
		Key	'R'			; ALT
		BL	RecvByte
		MOV	r1, #MMUC_P:OR:MMUC_D	; Turn MMU off
		SetCop	r1, CR_Control, EQ
		MOV	pc, #0			; Branch through zero
		; Else fall through

; End of key list - any other key is an error
		EndKeys
Err		ADR	r0, Error_message
		BL	SendString
		B	Debug_Loop

Error_message	= 10, 13, "Error!", 0

IO_Init		LDR	r2, =pp_ecr
		LDR	r1, =pp_base
		MOV	r0, #&34
		STRB	r0, [r1, r2]
		MOV	r0, #&04
		STRB	r0, [r1, #pp_ctrl]
		MOV	r0, #0
		STRB	r0, [r1, #pp_data]
		MOV	pc, lr

; Receive a byte to r0 (wait for it to arrive)
RecvByte	ROUT
		LDR	r1, =pp_base

		; Wait for the strobe to clear
10		LDRB	r2, [r1, #pp_status]
		TST	r2, #&40
		BEQ	%BT10

		; Write strobe - slctin low = read
		MOV	r2, #&25
		STRB	r2, [r1, #pp_ctrl]

		; Wait for the ACK
20		LDRB	r2, [r1, #pp_status]
		TST	r2, #&40
		BNE	%BT20

		; Read the data
		LDRB	r0, [r1, #pp_data]

		; Release the strobe
		MOV	r2, #&4
		STRB	r2, [r1, #pp_ctrl]

		MOV	pc, lr

; Send a byte in r0 - preserves r3
SendByte	ROUT
		LDR	r1, =pp_base

		; Wait for the strobe to clear
10		LDRB	r2, [r1, #pp_status]
		TST	r2, #&40
		BEQ	%BT10

		; Write the data
		STRB	r0, [r1, #pp_data]

		; Write strobe - slctin high = write
		MOV	r2, #&0d
		STRB	r2, [r1, #pp_ctrl]

		; Wait for the ACK
20		LDRB	r2, [r1, #pp_status]
		TST	r2, #&40
		BNE	%BT20

		; Release the strobe
		MOV	r2, #&4
		STRB	r2, [r1, #pp_ctrl]

		MOV	pc, lr

; Send a string in r0
SendString	Entry
		MOV	r3, r0			; Store string pointer
10		LDRB	r0, [r3], #1
		TEQ	r0, #0
		EXIT	EQ
		BL	SendByte
		B	%BT10

; Send an integer in r0
SendInt		Entry	"r4, r5"
		MOV	r3, r0			; Store value
		ADR	r4, Hex
		MOV	r5, #8
10		MOV	r1, r3, LSR #28
		MOV	r3, r3, LSL #4
		LDRB	r0, [r4, r1]
		BL	SendByte
		SUBS	r5, r5, #1
		BNE	%BT10
		EXIT

; Receive a digit from the user.
; Returns:
;	r0 = Digit (0-F)
;	r0 = 1<<31 + Code
GetDigit	Entry
		BL	RecvByte
		MOV	r2, r0
		ADR	r1, Hex
		MOV	r0, #0
10		LDRB	r3, [r1, r0]
		CMP	r2, r3
		EXIT	EQ
		ADD	r0, r0, #1
		TST	r0, #&10
		BEQ	%BT10
		ORR	r0, r2, #1:SHL:31
		EXIT

Hex		= '0', '1', '2', '3', '4', '5', '6', '7'
		= '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'

; Wait for the user to type a number.
; Returns:
;	EQ => r0 = number
;	NE => Bad number
GetInt		Entry	"r4"
		MOV	r4, #1
10		BL	GetDigit
		TST	r0, #1:SHL:31
		EXIT	NE
		ORRS	r4, r0, r4, LSL #4
		BCC	%BT10
		MOV	r0, r4
		TST	r0, #0			; Set Z bit
		EXIT

Prompt		= 10, 13, "Debug: ", 0

; Static data for debug routines.

old_r13		& 0
Intercept_off	& 0
Intercept_word	& 0

stack_base	% 1024
stack_top	% 0

		END
