		GET	Hdr:ListOpts
		GET	Hdr:Machine.<Machine>
		$GetMEMM
		$GetCPU
		$GetIO
		GET	s.Copro15ops
		GET	Hdr:Macros
		GET	Hdr:System
		GET	Hdr:Proc

		MACRO
$label		SetLEDS	$tmp1, $tmp2, $val
$label		MOV	$tmp1, #IOMD_Base
		MOV	$tmp2, $val
		STRB	$tmp2, [$tmp1, #IOMD_CLINES]
		MEND

		EXPORT	Debug
		EXPORT	cache_flush
		IMPORT	|reloc$$Base|
		IMPORT	|reloc$$Limit|

		AREA	|reloc|, CODE, READONLY

; Keyboard command structure.
		GBLA	KeyNum
KeyNum		SETA	0

		MACRO
$label		Key	$num
$label		ROUT
KEY_$KeyNum	CMP	r0, #$num
KeyNum		SETA	KeyNum+1
		BNE	KEY_$KeyNum
		MEND
		
		MACRO
$label		EndKeys
$label
KEY_$KeyNum
		MEND

cache_flush	; Flush caches and TLBs
		ARM_read_ID r0
		AND	r0, r0, #&F000
		CMP	r0, #&8000			;ARM 8?
		CMPNE	r0, #&A000			;or StrongARM?
		MCRNE	ARM_config_cp, 0, R0, ARM67_cacheflush_reg, C0, 0
		MCRNE	ARM_config_cp, 0, R0, ARM67_TLBflush_reg, C0, 0
		MOVNE	pc, lr

		; We need to flush the cache as we're running on a
		; strongARM.  Find 32k region to clean cache on.  Use the
		; section we're running from.
		ADR	r0, cache_flush			; Already page aligned
		BIC	r0, r0, #&ff00			; Align down to 64k
20		LDR	r1, [r0], #32
		TST	r0, #&8000			; 32k bit set?
		BNE	%BT20

		MCR	ARM_config_cp, 0, R0, ARM8A_cache_reg, C7, 0
		MCR	ARM_config_cp, 0, R0, ARM8A_TLB_reg, C7, 0
		MCR	ARM_config_cp, 0, R0, ARM8A_cache_reg, C10, 4
		MOV	pc, lr

; Process user commands
Debug		ROUT
		STR	r13, old_r13		; Store old stack
		ADR	r13, |reloc$$Base|	; Start of page
		ADD	r13, r13, #&1000

		STMDB	r13!, {r0-pc}		; Dump registers
		mrs	r7, CPSR		; Store status registers
		mrs	r6, SPSR
		BIC	r8, r7, #&1f		; Mask current mode
		ORR	r8, r8, #&d3		; SVC mode, disable FIQ & INT
		msr	CPSR, r8
		msr	SPSR, r8

		LDR	r0, old_r13		; Get old r13
		LDR	r1, Intercept_off	; Get intercept address
		STR	r0, [r13, #13*4]	; Put r13 back on stack
		CMP	r1, #0			; Is breakpoint set?
		STREQ	lr, [r13, #15*4]	; No?  Put lr in pc
		ADRNE	r2, Debug		; Yes? Get address of entry
		ADDNE	r1, r1, r2		; and relocate bp address
		STRNE	r1, [r13, #15*4]	; Put break-point address in pc

		STMDB	r13!, {r6, r7}

		BL	cache_flush

		MOV	r4, r13			; Current data register

Debug_Loop	SetLEDS	r8, r9, #&f9		; Both LEDs off
Debug_NoLED	BL	RecvByte

		SetLEDS	r8, r9, #&fd		; Green only

; Return
		Key	&34			; 'G'
		BL	cache_flush
		LDMIA	r13!, {r6, r7}
		msr	CPSR, r7
		msr	SPSR, r6
		LDMIA	r13, {r0-pc}		; Return

; Set data register
		Key	&1b			; 'S'
		BL	GetInt
		BNE	Err
		MOV	r4, r0
		B	Debug_Loop

; Read word
		Key	&2d			; 'R'
		BL	GetInt
		BNE	Err
		LDR	r4, [r0]
		B	Debug_Loop

; Write word
		Key	&1d			; 'W'
		BL	GetInt
		BNE	Err
		STR	r4, [r0]
		B	Debug_Loop

; Get Key
		Key	&42			; 'K'
		BL	RecvByte
		MOV	r4, r0
		B	Debug_Loop

; Output data register bits
		Key	&22			; 'X'
		BL	GetDigit
		MOVS	r0, r0, LSL #1		; Shift digit left 1
		BCS	Err
		MOV	r0, r4, LSR r0		; Move to bits 0 & 1
		AND	r0, r0, #&3		; Mask bits
		MOV	r0, r0, LSL #1
		ORR	r0, r0, #&f9
		SetLEDS	r8, r9, r0
		B	Debug_NoLED

; View data register
		Key	&2a			; 'V'
		MOV	r5, #IOMD_Base
		LDR	r5, [r5, #IOMD_VIDINIT]
		BIC	r5, r5, #&e0000000	; Get the base of screen memory
		ORR	r5, r5, #&80000000	; in physical space
		MOV	r6, #0

		ADD	r5, r5, #7
10		SUB	r0, r5, r6, ASR #2
		MOV	r1, r4, ASR r6
		BL	PutDigit
		ADD	r6, r6, #4

		TST	r6, #&20
		BEQ	%BT10
		
		B	Debug_Loop

; Original value of data register (stack address)
		Key	&44			; 'O'
		MOV	r4, sp
		B	Debug_Loop

; Insert breakpoint
		Key	&43			; 'I'
		BL	GetInt
		BNE	Err

		LDR	r1, Intercept_off	; Get old address and contents
		ADR	r2, Debug
		TEQ	r1, #0
		ADD	r1, r1, r2
		LDR	r2, Intercept_word
		STRNE	r2, [r1]		; Restore old value
		MOVNE	r1, #0
		STRNE	r1, Intercept_off

		TST	r0, #3			; Make sure it's word aligned
		BNE	Err

		LDR	r2, [r0], #8		; Store old word, adjusting
		STR	r2, Intercept_word	; PC at the same time.

		ADR	r3, Debug		; Get entry address
		SUB	r2, r3, r0		; Get offset to debug entry
		MOV	r2, r2, ASL #6		; Clear top bits
		ADD	r1, r0, r2, ASR #6	; Get destination address

		CMP	r1, r3			; Check it's right
		BNE	Err			; If not, raise an error

		MOV	r2, r2, LSR #8		; Shift into lowest 24 bits
		ORR	r2, r2, #&EA000000	; Branch instruction
		STR	r2, [r0, #-8]!		; Store in location
		SUB	r0, r0, r3		; Relocate with entry
		STR	r0, Intercept_off	; Mark breakpoint active
		B	Debug_Loop
		
; Relocate image
		Key	&4b			; 'L'
		BL	GetInt
		BNE	Err

		LDR	r1, Intercept_off	; Restore breakpoint word
		ADR	r2, Debug
		TEQ	r1, #0
		ADD	r1, r1, r2
		LDRNE	r2, Intercept_word
		MOVNE	r3, #0
		STRNE	r2, [r1]
		STRNE	r3, Intercept_off	; Mark breakpoint as inactive

		ADR	r1, |reloc$$Base|	; Move this page
		ADD	r2, r1, #&1000		; Stop address
		SUB	r3, r0, r1		; Get offset

10		LDR	r5, [r1], #4
		CMP	r1, r2
		STR	r5, [r0], #4
		BNE	%BT10

		ADD	r13, r13, r3		; Adjust stack pointer
		ADR	r0, Debug_Loop		; Get address in old copy
		ADD	pc, r0, r3		; Adjust for offset and go

; ALT - protected key sequences
		Key	&11			; ALT
		BL	RecvByte
		CMP	r0, #&76		; Escape
		MOVEQ	r1, #MMUC_P:OR:MMUC_D	; Turn MMU off
		SetCop	r1, CR_Control, EQ
		MOVEQ	pc, #0			; Branch through zero
		; Else fall through

; End of key list - any other key is an error
		EndKeys
Err		SetLEDS	r8, r9, #&fb		; Red only
		B	Debug_NoLED

; Write digit r1 at address r0
PutDigit	Entry
		AND	r1, r1, #&f		; Mask digit
		MOV	r1, r1, LSL #3
		ADR	r2, FONT		; Get address of font
10		LDRB	r3, [r2, r1]		; Get font byte
		ADD	r1, r1, #1
		STRB	r3, [r0], #&50
		TST	r1, #&7
		BNE	%BT10
		EXIT
		
; Receive a byte to r0 (wait for it to arrive)
RecvByte	ROUT
		MOV	r1, #IOMD_Base
		; Wait for a byte to arrive
10		LDRB	r0, [r1, #IOMD_KBDCR]
		TST	r0, #IOMD_KBDCR_RxF
		BEQ	%BT10
		; Get the byte
		LDRB	r0, [r1, #IOCSERRX]
		; Ignore byte after &f0 (key release)
		CMP	r0, #&f0
		MOVNE	pc, lr

		; Wait till byte arrives.
20		LDRB	r0, [r1, #IOMD_KBDCR]
		TST	r0, #IOMD_KBDCR_RxF
		BEQ	%BT20
		; Read it.
		LDRB	r0, [r1, #IOCSERRX]
		B	%BT10

; Receive a digit from the user.
; Returns:
;	r0 = Digit (0-F)
;	r0 = 1<<31 + Code
GetDigit	Entry
		BL	RecvByte
		MOV	r2, r0
		ADR	r1, HexKeys
		MOV	r0, #0
10		LDRB	r3, [r1, r0]
		CMP	r2, r3
		EXIT	EQ
		ADD	r0, r0, #1
		TST	r0, #&10
		BEQ	%BT10
		ORR	r0, r2, #1:SHL:31
		EXIT

HexKeys		= &45, &16, &1E, &26, &25, &2e, &36, &3d
		= &3e, &46, &1c, &32, &21, &23, &24, &2b

; Wait for the user to type a number.
; Returns:
;	EQ => r0 = number
;	NE => Bad number
GetInt		Entry	"r4"
		MOV	r4, #1
10		BL	GetDigit
		TST	r0, #1:SHL:31
		EXIT	NE
		ORRS	r4, r0, r4, LSL #4
		BCC	%BT10
		MOV	r0, r4
		TST	r0, #0			; Set Z bit
		EXIT

; Static data for debug routines.

old_r13		& 0
Intercept_off	& 0
Intercept_word	& 0

; The font.  The least significant bit goes to the left.
FONT
FONT_0		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_01100110
		= 2_01100110
		= 2_01100110
		= 2_00111100
		= 2_00000000

FONT_1		= 2_00000000
		= 2_00011000
		= 2_00011110
		= 2_00011000
		= 2_00011000
		= 2_00011000
		= 2_01111110
		= 2_00000000

FONT_2		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_01100000
		= 2_00110000
		= 2_00011000
		= 2_01111110
		= 2_00000000

FONT_3		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_00110000
		= 2_01100000
		= 2_01100110
		= 2_00111100
		= 2_00000000

FONT_4		= 2_00000000
		= 2_00110000
		= 2_00111000
		= 2_00110110
		= 2_01111110
		= 2_00110000
		= 2_00110000
		= 2_00000000

FONT_5		= 2_00000000
		= 2_01111110
		= 2_00000110
		= 2_00111110
		= 2_01100000
		= 2_01100110
		= 2_00111100
		= 2_00000000

FONT_6		= 2_00000000
		= 2_00111100
		= 2_00000110
		= 2_00111110
		= 2_01100110
		= 2_01100110
		= 2_00111100
		= 2_00000000

FONT_7		= 2_00000000
		= 2_01111110
		= 2_01100000
		= 2_00110000
		= 2_00011000
		= 2_00011000
		= 2_00011000
		= 2_00000000

FONT_8		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_00111100
		= 2_01100110
		= 2_01100110
		= 2_00111100
		= 2_00000000

FONT_9		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_01100110
		= 2_01111100
		= 2_01100000
		= 2_00111100
		= 2_00000000

FONT_A		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_01100110
		= 2_01111110
		= 2_01100110
		= 2_01100110
		= 2_00000000

FONT_B		= 2_00000000
		= 2_00011110
		= 2_00110110
		= 2_00011110
		= 2_00110110
		= 2_01100110
		= 2_00111110
		= 2_00000000

FONT_C		= 2_00000000
		= 2_00111100
		= 2_01100110
		= 2_00000110
		= 2_00000110
		= 2_01100110
		= 2_00111100
		= 2_00000000

FONT_D		= 2_00000000
		= 2_00011110
		= 2_00110110
		= 2_01100110
		= 2_01100110
		= 2_00110110
		= 2_00011110
		= 2_00000000

FONT_E		= 2_00000000
		= 2_01111110
		= 2_00000110
		= 2_00011110
		= 2_00000110
		= 2_00000110
		= 2_01111110
		= 2_00000000

FONT_F		= 2_00000000
		= 2_01111110
		= 2_00000110
		= 2_00011110
		= 2_00000110
		= 2_00000110
		= 2_00000110
		= 2_00000000

		END
