		GET	Hdr:ListOpts
		GET	Hdr:Machine.<Machine>
		$GetMEMM
		$GetCPU
		$GetIO
		GET	s.Copro15ops
		GET	Hdr:Macros
		GET	Hdr:System
		GET	Hdr:Services
		GET	Hdr:Proc

		EXPORT	start_new
		IMPORT	|reloc$$Base|
		IMPORT	|reloc$$Limit|
		IMPORT	Debug
		IMPORT	cache_flush

		GBLL	Payload_Test
Payload_Test	SETL	{FALSE}

		AREA	|C$$Code|, CODE, READONLY

; void start_new(addr_t codepage, addr_t **regions, addr_t startaddr,
;                int flags);
start_new
		; Set mode 0
		SWI	OS_WriteI+22
		SWI	OS_WriteI+0
		; Enter SVC
		SWI	OS_EnterOS
		TEQP	PC, #&FC000003		; Interrupts off
		MOV	r0,r0

		STMFD	r13!, {r0,r1}
		MOV	r1, #Service_PreReset	; issue Service_PreReset
		SWI	XOS_ServiceCall		; to turn off h/w
		LDMFD	r13!, {r4,r5}
		MOV	r6, r2
		MOV	r7, r3
		; Parameters are now in r4-r7

		TEQP	PC, #&FC000003		; just in case
		MOV	r0, r0

		; Flush caches and TLBs
		ARM_read_ID r0
		AND	r0,r0,#&F000
		CMP	r0,#&8000	;ARM 8?
		CMPNE	r0,#&A000	;or StrongARM?
		MCRNE	ARM_config_cp, 0, R0, ARM67_cacheflush_reg, C0, 0
		MCRNE	ARM_config_cp, 0, R0, ARM67_TLBflush_reg, C0, 0
		MCREQ	ARM_config_cp, 0, R0, ARM8A_cache_reg, C7, 0
		MCREQ	ARM_config_cp, 0, R0, ARM8A_TLB_reg, C7, 0
		MCREQ	ARM_config_cp, 0, R0, ARM8A_cache_reg, C10, 4

		; Map in the section containing the code page.  This must
		; not be in application space...  (But ROM is in the first
		; 32M so we should be fine.)
		; Get L1PT entry address
		LDR	r3, =&02c0c000		; Address of L1 Page table
		MOV	r0, r4, ASR #20		; L1PT entry number

		; Section map the block containing the page at it's
		; physical address.
		LDR	r1, =(AP_None*L1_APMult):OR:L1_U:OR:L1_B:OR:L1_Section
		ORR	r1, r1, r0, ASL #20	; Add address
		STR	r1, [r3, r0, ASL #2]	; Store in L1PT

		; Copy code (corrupt r0, r1, r2, r4)
		; r8 = target - source
		LDR	r0, =|reloc$$Base|	; Source begin
		LDR	r1, =|reloc$$Limit|	; Source end
		SUB	r8, r4, r0		; Calculate target offset
		ADD	r13, r4, #&c00		; Setup stack 3k into page

10		LDR	r2, [r0], #4
		CMP	r0, r1
		STR	r2, [r4], #4
		BNE	%BT10

		; Enter 32-bit mode
		LDR	r3, mmu_control1
		LDR	r4, mmu_control2
		SetCop	r3, CR_Control		; Enter 32-bit mode

		mrs	r0, CPSR
		BIC	r0, r0, #&1f		; Blank mode bits
		ORR	r0, r0, #&13		; SVC32 mode
		msr	CPSR, r0
		msr	SPSR, r0

		; Get page mask
		LDR	r12, =&fff

		LDR	lr, =copy_image
		ADD	lr, lr, r8		; Add offset
		; Flush the cache and return to copy_image
		B	cache_flush

mmu_control1
		& MMUC_M:OR:MMUC_C:OR:MMUC_W:OR:MMUC_P:OR:MMUC_D:OR:\
		MMUC_L:OR:MMUC_F
mmu_control2
		& MMUC_P:OR:MMUC_D

; Relocated code
		AREA	|reloc|, CODE

copy_image
		; r4 = MMU Control register
		; r5 = Regions
		; r6 = Start address
		; r7 = Debug flag
		SetCop	r4, CR_Control		; Turn MMU off
		STMDB	r13!, {r6}		; Store the start address
	
		; r0 = address in second level table
		; r5 = address in top level table
		; r6 = destination address of page
		; lr = source address of page

		LDR	r0, [r5], #4
40		TST	r0, r0			; Zero marks end of list.
		BEQ	%FT60

		LDR	lr, [r0], #4		; Get target page

		TST	r0, r12			; End of page?
		LDREQ	r0, [r5], #4		; Get next page

		TST	lr, lr			; Zero marks end of list.
		BEQ	%FT60

		CMP	lr, r6			; Skip this page if address
		ADDEQ	r6, r6, #&1000		; is correct.
		BEQ	%BT40

		; Copy the page from lr to r6
50		LDMIA	lr!, {r1-r4,r8-r11}	; Get some words
		TST	lr, r12			; End of page yet?
		STMIA	r6!, {r1-r4,r8-r11}	; Store the words
		BNE	%BT50			; Repeat if not end of page.

		B	%BT40

60		LDMIA	r13!, {r0}		; Restore start address
 [ Payload_Test
		! 1, "Check the payload test"
		MOV	r3, lr
		MOV	r4, #0
70		LDR	r1, [r3], #4
		CMP	r4, r1
		ADD	r4, r4, #1
		BLNE	Debug
		CMP	r3, r2
		BNE	%BT70
 ]
		LDR	r3, [r0]		; Load 1st instruction of ROM
		AND	r2, r3, #&FF000000	; image
		TEQ	r2, #&EA000000		; is it a branch
		BEQ	go			; It's safe.

; check for LDR PC, [PC, +/-#x]
; CCCC 01IP UBWL nnnn dddd oooo oooo oooo
; 1110 0101 x001 1111 1111 xxxx xxxx xxxx
; C=condition code
; I=Immediate
; P=Pre-index(1)/Post-index(0)
; U=Up(1)/Down(0)
; B=Byte(1)/Word(0)
; W=Write back(1)/no write back(0)
; L=Load(1)/Store(0)
; n=Base register
; d=Destination register
; o=Offset

		MOV	r4, r3, LSR #12
		LDR	r5, LDRPCInst
		ORR	r4, r4, #1 :SHL: (23-12); Set U bit
		TEQ	r4, r5

endlessloop	BLNE	Debug
		BNE	endlessloop		; not either, so stuck
		EOR	r3, r3, r4, LSL #12	; get offset, and up/down bit
		TST	r3, #1 :SHL: 23		; NE => bit was 0, so -ve
		RSBNE	r3, r3, #1 :SHL: 23	; get rid of bit 23 and negate
		ADD	r3, r3, #8		; offset in ROM we're reading
		LDR	r3, [r0, r3]		; could point to hi- or lo- ROM
		MOV	r3, r3, LSL #(32-21)	; keep only ROM offset bits
		ADD	r0, r0, r3, LSR #(32-21); add image base address

go		TST	r7, #1
		BLNE	Debug
		MOV	pc, r0

LDRPCInst
		DCD	&E59FF

	END
