amu
===

A Make Utility.  Sources in RiscOS/Tools/Sources/amu
See Acorn C/C++ Manual for further documentation.

Contents:
  Changes since amu 5.06


Changes since version 5.06 are:

The debugging CLI option (-x) now does something useful.  It echoes all macro
definitions that occur, all targets, dependents and rules.  This can be very
useful for tracking down problems with makefiles.

A new "include" directive is understood.  If a line of the Makefile starts
with the word "include", then the single word parameter following that is
taken to be a filename whose contents should be logically inserted in the
Makefile at that point (ie. just like the C preprocessor's #include).  This
means that common makefile fragments can be abstracted out of individual
component makefiles, thus simplifying and standardising the build structure.

Macro handling has been fixed to the extent that nested macros now work, plus
the first rule in the Makefile (specifically, the first rule after any macro
definition) can be defined in terms of a macro.  In fact, see the section
on GNU extensions below because a lot of the macro stuff has changed.

Extension-less files are no longer run through the rule inference checks
(stops obscure errors for targets with no filename extensions)

-D options added - displays the reasons for executing commands AND executes
the commands (cf. -n)


GNU Extensions
==============

Some GNU extensions have been added:

:= does simply extended macro definition (the value is macro expanded there
and then - forward references do not work, cf. = which does recursively
expanded macro definition which does permit forward references).

?= does conditional assignment - only assigns if the macro is not yet
defined.  Macro must not exist at all previously - empty values stop this
assignment from occurring.

A very basic form of substitution is supported:  ${VAR:search=replace}. 
search and replace are simple strings, and the construct represents the value
of the VAR macro with all occurrences of 'search' replaced by 'replace'.  The
more advanced % substitutions are not supported (but may be soon).  General
substitutions (GNU's patsubst) or "functions" will not be supported.

Macro assignment override is supported with the 'override' directive - this
demotes CLI definitions below Makefile definitions.


--sbrodie, 28/02/2001
