amu
===

A Make Utility.  Sources in RiscOS/Tools/Sources/amu
See Acorn C/C++ Manual for further documentation.

Contents:
  New options (since version 5.06)
  Bug fixes
  GNU Extensions
  Macro Priority
  Debugging options



New options (since version 5.06)
================================

-D options added - displays the reasons for executing commands AND executes
the commands (cf. -n)

-n displays the commands that would have been executed even if the makefile
contains .SILENT and even if the command has a @ prefix.

-o no longer outputs the message reminding you to *EXEC the output file.

-E enables macro definition priority compatibility with amu 5.00 (see 
   section on Macro Priority below)

-e enables environment macro override (see section on Macro Priority below)




Bug fixes
=========

Macro handling has been fixed.  The first rule in the Makefile (specifically,
the first rule after any macro definition) can be defined in terms of a
macro.  In fact, see the section on GNU extensions below because a lot of the
macro stuff has changed.

Extension-less files are no longer run through the rule inference checks
(stops obscure errors for targets with no filename extensions)



GNU Extensions
==============

Some GNU extensions have been added:

Macros
------

(Also see Directives and Macro Priority sections)

:= does simply extended macro definition (the value is macro expanded there
and then - forward references do not work, cf. = which does recursively
expanded macro definition which does permit forward references).

?= does conditional assignment - only assigns if the macro is not yet
defined.  Macro must not exist at all previously - empty values stop this
assignment from occurring.

+= adds to a macro's definition.  Whether the value is expanded before being
appended depends on whether the variable being altered is simply and
recursively expanded (undefined variables default to recursively expanded).


Directives
----------

Macro assignment override is supported with the 'override' directive - this
allows you to modify macro definitions made on the command-line, which are
otherwise immutable (also see Macros and Macro Priority sections)

A new "include" directive is understood.  If a line of the Makefile starts
with the word "include", then the parameters following it are taken to be
filenames whose contents should be logically inserted in the Makefile at that
point (ie. just like the C preprocessor's #include).  This means that common
makefile fragments can be abstracted out of individual component makefiles,
thus simplifying and standardising the build structure. You can use
".include" instead.  Preceding include/.include with a hyphen suppresses any
file not found errors from arguments to the include directive.


Functions and substitutions
---------------------------

Basic substitutions are supported:  ${VAR:search=replace}.  search and
replace are simple strings, and the construct represents the value of the VAR
macro with all occurrences of 'search' replaced by 'replace'.  The more
advanced % substitutions are also supported.

Some "functions" are supported: e.g. "$(sort one two three)" will expand to
"one three two".  Functions supported are: words, word, wordlist, firstword,
strip, sort, subst, patsubst, findstring, filter, filter-out,
addsuffix, addprefix, join, origin.


Macro priority
==============

Macro definitions do NOT always take effect any more.  The macro priority
system mirrors that used by GNU make.  Each macro has an origin (which is
returned by the origin function) as does each attempted definition.  If the
existing definition is higher priority, the definition does NOT succeed. 
This can lead to odd-looking, but correct, behaviour.  By default, the rank
(from highest to lowest priority) is:

  override, command line, environment override, file, environment,
  automatic, default, undefined.

An important side-effect of this is macros defined on the command-line now
OUTRANK those defined in the makefile.  This can cause unexpected behavioural
changes to the unwary.  If the makefile really wants to beat the CLI
definition, it must use the override directive.  Note that += is affected by
this protection too - you cannot add to a CLI macro unless you use the
override directive.

To aid compatibility with makefiles written for earlier versions of amu, a
new command-line option -E is supported.  This changes the ranking system to
more closely mirror that employed by amu 5.06.  However, using this option
does not prevent the environment being searched for undefined macros.  This alternative rank is:

  override, file, command line, automatic, default, environment override,
  environment, undefined.


Aside: There is a peculiar behaviour of GNU make which is mirrored by amu
with regard to environment override macros.  If -e is in effect (environment
overrides makefile), then the origin of a macro that has come from the
environment will be just "environment" until another definition is attempted
in the makefile.  At *that* point, the macro's origin is boosted up to
"environment override", but not before.  This is not a bug.


Debugging Options
=================

The debugging CLI option (-x) now does something useful. This can be very
useful for tracking down problems with makefiles.  It is actually a bitfield,
-x1 sets level 1, -x2 sets level 2, -x4 sets level 3, -x6 sets levels 2 and
3.  The level assignments are:

1: CLI processing, dependency tree creation & command list assignments
2: Macro processing, pattern substitutions etc.
3: 
4: command execution
5: command expansion of patterns ($* $< $? etc.)
6: makefile data structure internal debugging
7: low-level internal debugging


--sbrodie, 13/06/2001
