amu
===

A Make Utility.  Sources in RiscOS/Tools/Sources/amu
See Acorn C/C++ Manual for further documentation.

Contents:
  Changes since amu 5.06


Changes since version 5.06 are:

The debugging CLI option (-x) now does something useful.  It echoes all macro
definitions that occur, all targets, dependents and rules.  This can be very
useful for tracking down problems with makefiles.  It is actually a bitfield,
-x1 sets level 1, -x2 sets level 2, -x4 sets level 3, -x6 sets levels 2 and
3.  Level 2 stuff handles the macro processor, the rest is level 1.  Very
low-level debug is level 7.

A new "include" directive is understood.  If a line of the Makefile starts
with the word "include", then the parameters following it are taken to be
filenames whose contents should be logically inserted in the Makefile at that
point (ie. just like the C preprocessor's #include).  This means that common
makefile fragments can be abstracted out of individual component makefiles,
thus simplifying and standardising the build structure. You can use
".include" instead.  Preceding include/.include with a hyphen suppresses any
file not found errors from those makefiles.

Macro handling has been fixed.  The first rule in the Makefile (specifically,
the first rule after any macro definition) can be defined in terms of a
macro.  In fact, see the section on GNU extensions below because a lot of the
macro stuff has changed.

Extension-less files are no longer run through the rule inference checks
(stops obscure errors for targets with no filename extensions)

-D options added - displays the reasons for executing commands AND executes
the commands (cf. -n)

-n displays the commands that would have been executed even if the makefile
contains .SILENT.


GNU Extensions
==============

Some GNU extensions have been added:

:= does simply extended macro definition (the value is macro expanded there
and then - forward references do not work, cf. = which does recursively
expanded macro definition which does permit forward references).

?= does conditional assignment - only assigns if the macro is not yet
defined.  Macro must not exist at all previously - empty values stop this
assignment from occurring.

Basic substitutions are supported:  ${VAR:search=replace}.  search and
replace are simple strings, and the construct represents the value of the VAR
macro with all occurrences of 'search' replaced by 'replace'.  The more
advanced % substitutions are also supported.

Some "functions" are supported: e.g. "$(sort one two three)" will expand to
"one three two".  Functions supported are: words, word, wordlist, firstword,
strip, sort, subst, patsubst, findstring, filter, filter-out,
addsuffix, addprefix, join, origin.

Macro assignment override is supported with the 'override' directive - this
allows you to modify macro definitions made on the command-line, which are
otherwise immutable.


--sbrodie, 14/05/2001
