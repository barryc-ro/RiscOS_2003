amu
===

Author: S Brodie
Date:   13 June 2001

This tool is A Make Utility - formerly Acorn Make Utility.  See the
Acorn C/C++ manual for details about usage, and also docs.amu for the
changes since then.


Implementation Notes
--------------------

The main data structures of amu are:

 Makefile, Line, LinePart, HashTable.
 
Makefile represents the information about all the files that are being read
to find rules; Line represents a single logical line of a Makefile; LinePart
represents a substring representing part of the text of a logical line. 
HashTable is used to hold the macro assignments, and some other miscellaneous
information.

A Makefile holds meta information about the data, including filename, size of
the file, offset to the DDE dynamic dependency magic comment and a pointer to
a list of Line objects.

Line objects hold meta information about a logical line including line
number, offset of the line in the file, and a pointer to a list of LinePart
objects.

LinePart objects hold simple C strings.

It is important to note that most data structures are used twice: once during
makefile loading, then again during makefile parsing.  There are several
useful utility routines in readmk.c that process entire lines of data, or
lists of LinePart objects.  These are used during makefile load, but are also
used when parsing and executing rules.  Some routines will allocate a pseudo
Line object (with alloc_line) or LinePart object and pass them to these
routines so that the code can be re-used.  One example of this is the parsing
of function macros.  Once a macro invocation has been determined to be a
function call, the rest of the arguments are parsed into a LinePart list,
macro expanded and passed on to the function handlers.

Errors and warnings are issued by amu_err_fail and amu_err_report instead
of directly to the CLX err code so that we can dump out the nested
Makefile structure information to give full context of where the error
was detected.



amu's flow of control is:

  initialise;
  parse_cli_arguments;
  read_top_level_makefile;
  execute_pre_build_rules;
  process_targets;
  execute_post_build_rules;
  exit;


Macro System
------------

The macro system employed is much more sophisticated than early versions of
amu.  Macros are given a rank to help determine which definitions take
priority.  The macro database is held in a hash table.  The key is the macro
name (case-INsensitive - different to GNU make!) and the associated value is
a pointer to a MacroVar data structure, which holds the ranking information
about the variable and the recursively/simply expanded flag as well as the
value assigned.

One important implementation detail is that looking up a macro can never
fail.  If an attempt is made to lookup a macro (lookup_macro function) and
the macro is not found in the hash table, then a definition is created and
entered into the hash table and that new definition is returned.  The new
value is taken from the environment is a matching environment variable can be
found (and origin is set to "environment"), otherwise it is an empty value
and the origin is set to "undefined".  New definitions created this way are
always recursively expanded.  This is done to simplify the rank comparison
and avoid needing to check for null pointers all over the place.  It also
means that amu does not need to emunerate all environment variables to prime
the macro table as it can insert the values "just in time", thus saving start
up time and memory resource.

When attempting a macro definition, the current setting is looked up first.
As noted above, this will have the side-effect of creating the macro as an
undefined or environment macro if the macro name is not already in the hash
table.  The rank of the existing setting is compared with the rank of the new
definition.  If the new definition has EQUAL or GREATER rank, then the new
definition replaces the old one (hence an automatically generated "undefined"
macro always loses the rank comparison)

  
==END==
