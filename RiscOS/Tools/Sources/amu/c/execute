/*
 * AMU (execute.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/*
 * This source contains the support functions for executing commands on the host system.
 * This file contains all the host-dependent functionality that otherwise resides in the
 * main code for this program.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <limits.h>

/* CLX */
#include "err.h"
#include "filestamp.h"
#include "wholefls.h"
#include "hash.h"
#include "fname.h"

/* Local */
#include "amu.h"
#include "parse.h"
#include "macros.h"
#include "md.h"
#include "functions.h"
#include "patterns.h"
#include "readmk.h"
#include "utility.h"
#include "execute.h"

/* Host-dependent */
#include "kernel.h"

/* This routine executes a single command and returns its return code */
static int try_command(char *cmdtxt, int flags)
{
  int rc = 0;
  if (strlen(cmdtxt) > CMDLENLIM && !dde_extended_cmdline()) {
    putc('\n', stderr);
    amu_err_fail("command too long (must be shorter than %d chars)\n%s\n\n", CMDLENLIM, cmdtxt);
  }
  else {
    char *last_sys_rc = getenv("Sys$ReturnCode");
    if (last_sys_rc == NULL) last_sys_rc = "";
    _kernel_setenv("AMU$ReturnCode", last_sys_rc);
    _kernel_setenv("Sys$ReturnCode", "0");
    amu_debug(DEBUGGING4, "Execute: %s\n", cmdtxt);
    md_start_cmd();
    rc = system(cmdtxt);
    switch (rc) {
      case 0:
        /* Command ran successfully. */
        break;
      case _kernel_ERROR:
        amu_err_report("*** %s ***\n", _kernel_last_oserror()->errmess);
        break;
      default:
        amu_err_report("*** %sexit (%u) ***\n", flags & IGNORE_RC ? "ignored non-zero ":"", rc);
        break;
    }
    md_end_cmd();
  }

  return rc;
}

/* This routine executes possibly several "shell" commands.  It understands that ';' is a
 * command separator and spits each command in turn to try_command().  It need not worry
 * about macros - they have all been expanded.  It destroys 'cmdtxt'.
 */
int try_commands(char *cmdtxt, int flags)
{
  int rc;
  char *etxt;
  bool in_quotes = false;

  for (etxt = cmdtxt; ; ++etxt) {
    if (*etxt == '\"') in_quotes = !in_quotes;
    if (!*etxt || (!in_quotes && *etxt == ';')) {
      const bool more_commands = *etxt != 0;
      *etxt = '\0';
      rc = try_command(cmdtxt, flags);
      if ((rc == 0 || (flags & IGNORE_RC)) && more_commands) {
        cmdtxt = etxt + 1;
      }
      else {
        break;
      }
    }
    if (cmdtxt == etxt && isspace(*etxt)) ++cmdtxt;
  }

  return rc;
}
