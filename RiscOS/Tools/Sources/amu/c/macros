/*
 * AMU (macros.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/*
 * This source file contains the code for processing macro expansions.
 * It provides only a few APIs which are responsible for expanding
 * macros and returning the resulting expansion.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

/* CLX */
#include "err.h"
#include "filestamp.h"
#include "wholefls.h"
#include "hash.h"
#include "fname.h"

/* Local */
#include "amu.h"
#include "parse.h"
#include "macros.h"
#include "functions.h"
#include "patterns.h"
#include "readmk.h"
#include "utility.h"


/* This forward declaration is required for a mutually-recursive pair of functions */
static char *macroise_aux(char *, bool functions_too, int recurse_count);

/* Matching bracket characters */
static const char macro_matching_terminator(const char starting)
{
  return (starting == '(') ? ')' : '}';
}

/* This function takes a left substring, a newly malloced middle substring, and a right substring.  It
 * allocates a single block containing all three concatenated.  It frees the new middle substring.  It
 * frees the left_substring IF the boolean free_left_substring was true.  It returns the new data block.
 */
static char *macroise_insert_string(char *left_substring, char *new_string, char *right_substring, bool free_left_substring)
{
  char *data = Strdup_spare(left_substring, strlen(new_string) + strlen(right_substring));

  strcat(data, new_string);
  strcat(data, right_substring);
  free(new_string);
  if (free_left_substring) free(left_substring);
  return data;
}

/* Skip through a function parameter list */
static char *skip_chars_to(char *arg, char terminator1, char terminator2)
{
  while (*arg != terminator1 && *arg != terminator2) {
    if (*arg == '$' && (arg[1] == '{' || arg[1] == '(')) {
      /* Nested macro - need to search ONLY for more macros or closing bracket */
      const char closer = macro_matching_terminator(arg[1]);
      arg = skip_chars_to(arg + 2, closer, '\0');
    }
    if (*arg) ++arg; else break;
  }

  return arg;
}

/* This routine is responsible for creating the list of arguments to a function.
 * It recognises the end of the arguments by the matching bracket character.  The
 * address of the character after the matching bracket character is stored in
 * after_bracket.  Note that we are permitted to destroy 'arg' in the process.
 */
static LinePart *make_function_args(char *arg, char matching_bracket, char **after_bracket)
{
  Line *l = alloc_line();
  LinePart *lp;
  char skip_char = '\0';
  char *thisarg;

  while (*arg && (*arg == skip_char || *arg != matching_bracket)) {
    char term, *ws;
    lp = append_new_line_part(l);
    if (*arg == skip_char) ++arg;
    thisarg = arg;
    arg = skip_chars_to(arg, matching_bracket, ',');
    term = *arg;
    *arg = '\0';
    for (ws = arg; ws > thisarg && isspace(ws[-1]); --ws) ;;
    if (ws != thisarg) *ws = '\0';
    lp->data = Strdup(thisarg);
    *arg = term;
    skip_char = (*arg == ',') ? *arg : '\0';
  }

  if (*arg == matching_bracket) ++arg;
  *after_bracket = arg;

  lp = l->firstpart;
  free(l);
  return lp;
}

/* This utility routine is responsible for creating the list of arguments to ifeq/ifneq.
 * This is more complicated that the function arguments, because we have to recognise so
 * many different styles of parameter :-(
 *
 * ifeq (a,b)     ifeq "a" "b"     ifeq "a" 'b'    ifeq 'a' "b"    ifeq 'a' 'b'
 *
 * The address of the character after the matching bracket character is stored in
 * after_args.  Note that we are permitted to destroy 'arg' in the process.
 */
LinePart *make_conditional_args(char *arg, char **after_args)
{
  Line *l = alloc_line();
  LinePart *lp;
  char *thisarg;

  if (*arg == '(') {
    /* This one is easy - it works just like function parameters thank goodness */
    return make_function_args(arg+1, ')', after_args);
  }

  while (*arg) {
    char term, *ws;

    if (*arg != '\'' && *arg != '\"') {
      amu_err_fail("syntax error: conditional parameters must use function style or be quoted");
    }

    lp = append_new_line_part(l);
    term = *arg++;
    thisarg = arg;
    arg = skip_chars_to(thisarg, term, '\0');
    if (*arg != term) {
      amu_err_fail("syntax error: mismatched quote (%c) characters", term);
    }
    *arg = '\0';
    for (ws = arg; ws > thisarg && isspace(ws[-1]); --ws) ;;
    *ws = '\0';
    lp->data = Strdup(thisarg);
    ++arg;
    while (isspace(*arg)) ++arg;
  }

  *after_args = arg;

  lp = l->firstpart;
  free(l);
  return lp;
}

/* This function calls the named 'func' processing function and passes it the specified
 * args, having issued a fatal error if there are less than the minimum required parameters,
 * and issuing a warning if there are more than the maximum.
 */
static char *replace_function(LinePart *args, const function_table *func)
{
  static const function_table *active_functions[FUNCDEPTH];
  static int active_function_count;
  LinePart *lp;
  int argc;
  const bool m = fn_macroise_parameters(func);

  active_functions[active_function_count++] = func;
  if (active_function_count == FUNCDEPTH) {
    amu_err_fail("functions nested too deeply while processing '%s' (maximum depth is %i)", fn_name(func), FUNCDEPTH);
  }

  for (argc = 0, lp = args; lp; lp = lp->next) {
    ++argc;
    amu_debug(DEBUGGING7, "Counting parameters (%i) '%s'", argc, lp->data);
    if (m) {
      macroise_free(&lp->data, true);
    }
  }

  /* Once we get here, we dont care - it's the macroise call that can cause the recursion */
  --active_function_count;

  if (argc < fn_minargs(func)) {
    amu_err_fail("not enough parameters to function '%s' (needs at least %i) ", fn_name(func), fn_minargs(func));
  }

  /* This maybe ought to be an error, but at least it is harmless */
  if (argc > fn_maxargs(func)) {
    amu_err_report("ignoring superfluous parameters to function '%s' (needs at most %i) ", fn_name(func), fn_maxargs(func));
  }

  amu_debug(DEBUGGING7, "Executing: %s", fn_name(func));
  return fn_execute(args, func);
}

/* Evaluate the given macro.  This routine will abort the program if it detects an attempt to
 * expand a recursive macro.  It will also detect a cycle of macro expansions and should report
 * the primary definition that has caused the cycle.
 */
static char *replace_macro(char *macro, bool functions_too, int recurse_count)
{
  /* static variable used to record the active macros for the cycle detection code */
  static MacroVar *active_macros[MACRODEPTH];

  /* autmatic variables */
  MacroVar *mv;
  char *colon, *equals = NULL, *result;
  pattern_substitution sub, rep;
  int i;

  amu_debug(DEBUGGING2, "replace_macro(%s)", macro);

  /* Was this a straight textual replacement or a complicated substitution? */
  colon = strchr(macro, ':');
  if (colon) {
    *colon = '\0';
    mv = lookup_macro(macro);
    *colon = ':';
    equals = strchr(colon + 1, '=');
    if (!equals) {
      amu_err_fail("invalid macro substitution (%s)", colon + 1);
    }
  }
  else {
    mv = lookup_macro(macro);
  }

  /* Recursion check - every time we look up a value, we push it onto a stack of values and
   * check for duplicates.  This allows us to detect *which* macro is causing the cycle and
   * help the user.  Previously, amu just used to throw its hands up in horror and exit.
   */
  for (i = 0; i < recurse_count; ++i) {
    if (active_macros[i] == mv) {
      amu_err_fail("macros nested too deeply (possibly a recursive definition involving '%s')", macro);
    }
  }
  active_macros[i] = mv;
  if (++recurse_count >= MACRODEPTH) {
    amu_err_fail("macros nested too deeply (maximum depth is %i)", recurse_count);
  }

  amu_debug(DEBUGGING2, "Before substitutions: '%s'", mv->value);

  /* If we are going to need to call the substitution functions, create the substitution data
   * structure *first* so we can repair any changes we made to it before expanding the macros.
   * [ NOTE: Actually, this shouldn't matter since we forbid self-referential macros. ]
   */
  if (colon) {
    Line *l = alloc_line();

    *equals = '\0';
    patterns_analyse_pattern(colon+1, &sub);
    patterns_analyse_pattern(equals+1, &rep);
    *equals = '=';
    equals = Strdup(mv->value);
    result = macroise_aux(equals, functions_too, recurse_count);
    if (equals != result) free(equals);
    append_new_line_part(l)->data = result;
    resplit_line(l, rlr_words);
    patterns_process_line_part_list(l->firstpart, &sub, &rep);
    result = rejoin_words(l->firstpart);
    deallocate_line(l);
    patterns_destroy_substitution(&sub);
    patterns_destroy_substitution(&rep);
  }
  else {
    equals = Strdup(mv->value);
    result = macroise_aux(equals, functions_too, recurse_count);
    if (equals != result) free(equals);
  }

  amu_debug(DEBUGGING2, "After substitutions: '%s'", result);

  return result;
}

static char *macroise_aux(char *data, bool functions_too, int recurse_count)
{
  bool changed_flag = false; /* = true if we malloced 'data' in this function */
  char *cp;
  char *first_macro, matching_bracket;

  while ((cp = strchr(data, '$')) != NULL) {
    first_macro = NULL;
    matching_bracket = '\0';

    while (*cp) {
      if (*cp == '$') {
        if (cp[1] == '(' || cp[1] == '{') {
          matching_bracket = macro_matching_terminator(cp[1]);
          first_macro = cp;
        }
      }
      else if (*cp == matching_bracket) {
        /* Found a macro to substitute */
        *first_macro = '\0'; /* terminate left substring */
        first_macro += 2; /* point at macro name */
        *cp++ = '\0'; /* terminate macro name, point at right substring */
        data = macroise_insert_string(data, replace_macro(first_macro, functions_too, recurse_count), cp, changed_flag);
        changed_flag = true;
        break;
      }
      else if (first_macro && isspace(*cp)) {
        /* Found a function call to substitute?  We must interrupt the parse here because we
         * may not want to be substituting the rest of the macro function arguments, depending
         * on what the function actually is.  Split the macro arguments up and invoke the
         * functions.
         */
        if (functions_too) {
          const function_table *func;
          char *func_name = first_macro + 2;

          *cp = '\0';
          func = fn_lookup(func_name);
          *cp = ' ';

          if (func) {
            /* Process the arguments and invoke the function */
            LinePart *lp;
            char *right_substring;

            *first_macro = '\0';
            while (isspace(*cp)) ++cp;
            lp = make_function_args(cp, matching_bracket, &right_substring);
            data = macroise_insert_string(data, replace_function(lp, func), right_substring, changed_flag);
            changed_flag = true;
            /* Free the temporary line list we created */
            while (lp) {
              LinePart *next = lp->next;
              free(lp->data);
              free(lp);
              lp = next;
            }
            break;
          }
        }
        else {
          /* If we're not expanding functions right now, don't do anything except skip along to the
           * terminator character.
           */
          cp = skip_chars_to(cp, matching_bracket, '\0');
          first_macro = NULL;
          matching_bracket = '\0';
        }
      }
      ++cp;
    }

    if (!*cp) break;
  }

  return data;
}

/* This routine performs any macro substitution on string '*old_data', returning true if it
 * changed the data in any way, false if it did not.  In ALL cases, it writes '*old_data'
 * with the new string pointer.  It does not free the old string (caller does that based
 * on the boolean result.  If 'functions_too' is true, then function calls are expanded
 * too - this is required to avoid substituting functions until the point of use - a little
 * noted detail in the GNU make documentation!
 */
bool macroise(char **old_data, bool functions_too)
{
  char *const new_data = macroise_aux(*old_data, functions_too, 0);
  const bool changed_flag = (*old_data != new_data);

  *old_data = new_data;
  return changed_flag;
}

/* Same as macroise, but frees *old_data if it has been changed */
bool macroise_free(char **old_data, bool functions_too)
{
  char *const new_data = macroise_aux(*old_data, functions_too, 0);
  const bool changed_flag = (*old_data != new_data);

  if (changed_flag) free(*old_data);

  *old_data = new_data;
  return changed_flag;
}


/* A routine to explicitly expand a single macro (recursively).  This is used when we need
 * to be careful not to replace all the macros in the line as we are still attempting
 * to determine what is actually on the line.
 *
 * 'buffer' is a malloced buffer that will be deallocated and reallocated to contain
 * the answer.  'ms' is the address of the '$' character within buffer that we are
 * expanding.  functions *MUST* always be expanded.
 */
char *macroise_this(char *buffer, char *ms)
{
  char *pterminator;

  pterminator = skip_chars_to(ms+2, '\0', macro_matching_terminator(ms[1]));
  if (*pterminator) *pterminator++ = '\0'; /* find the right substring, terminating macro invocation */
  *ms = '\0'; /* terminate the left substring (buffer) */

  /* concatenate the old prefix, the new result (and free both), and the old suffix. */
  return macroise_insert_string(buffer, replace_macro(ms+2, true, 0), pterminator, true);
}
