/*
 * AMU (md.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 */

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <ctype.h>
#include <stddef.h>
#include <stdbool.h>

#include "amu.h"
#include "md.h"

#ifndef DDE

/* All these functions do NOTHING unless the DDE macro is defined */

void md_delete(void) { }
void md_start_cmd(void) { }
void md_end_cmd(void) { }
void md_merge(Makefile *mf) { (void) mf; }
int  md_check_magic_string(const char *data) { (void) data; return 1; }
int  dde_extended_cmdline(void) { return 0; }
void dde_prefix_used(void) { }
void dde_prefix_init(char *fname) { (void) fname; }

#else

#include "kernel.h"
#include "swis.h"

/* From CLX */
#include "hash.h"
#include "filestamp.h"
#include "fname.h"
#include "host.h"
#include "err.h"
#include "wholefls.h"

/* Local headers */
#include "VersionNum"

#define  VERSION          Module_FullVersion
#define  DATE             Module_Date
#define  SELFNAME         "AMU"


#define DEPENDENCY_FILE "!Depend"
#define COMMENT_DYNAMIC_DEPENDENCIES "# Dynamic dependencies:"

typedef struct Dependency_File_List {
    struct Dependency_File_List *next;
    char depend_file_contents[1];
} Dependency_File_List;

typedef struct Target_List {
    struct Target_List *next;
    char name[1];
} Target_List;

static Dependency_File_List *depend_list = 0;
static int prefix_used;

static TimeStamp md_time;

static int md_cistrcmp(char *s, char *t)
{
    for ( ; (*s | 0x20) == (*t | 0x20); s++, t++)
        if (!*s)
            return 0;
    return 1;
}

void md_end_cmd(void)
{
  Dependency_File_List *depend_file, *old_depend_file;
  char *s, *cs, *target, *ds;
  int d, f, c;
  TimeStamp t0;

  t0 = filestamp_get(DEPENDENCY_FILE);
  if (t0 != FILESTAMP_NEVER && t0 >= md_time) { {
      int32 size = wf_filesize(DEPENDENCY_FILE);
      depend_file = malloc(sizeof(Dependency_File_List) + (size_t)size + 1);
      if (!depend_file) err_fail("out of memory");
      if (wf_load(DEPENDENCY_FILE, depend_file->depend_file_contents, size)<0)
        err_fail("unable to read dependency file " DEPENDENCY_FILE);
      depend_file->depend_file_contents[size] = 0;
      s = depend_file->depend_file_contents;
      d = f = 0;
      while (1) {
          while (isspace(*s)) s++;
          if (!*s) break;
          target = s;
          while ((c = *s) != 0 && c != ':' && !isspace(c)) s++;
          if (s == target || c != ':') {
              f = 0;
              break;
          }
          s++;
          while (isspace(*s) && *s != '\n') s++;
          cs = s;
          while (*s && !isspace(*s)) s++;
          if (cs == s) {
              d -= s - target + 1;
              f = 1;
          } else {
              while (*s && *s != '\n') {
                  while (isspace(*s) && *s != '\n') s++;
                  if (*s && !isspace(*s)) {
                      d += cs - target + 1;
                      f = 1;
                      while (*s && !isspace(*s)) s++;
                  }
              }
          }
      }
      if (f) {
          old_depend_file = depend_file;
          size += d;
          depend_file = malloc(sizeof(Dependency_File_List) + (size_t)size);
          if (!depend_file) err_fail("out of memory");
          s = old_depend_file->depend_file_contents;
          ds = depend_file->depend_file_contents;
          while (1) {
              while (isspace(*s)) s++;
              if (!*s) {
                  *ds = 0;
                  break;
              }
              target = s;
              while ((c = *s) != 0 && c != ':' && !isspace(c)) s++;
              s++;
              while (isspace(*s) && *s != '\n') s++;
              cs = s;
              while (*s && !isspace(*s)) s++;
              if (cs != s) {
                  memcpy(ds, target, s - target);
                  ds += s - target;
                  *ds++ = '\n';
                  while (*s && *s != '\n') {
                      while (isspace(*s) && *s != '\n') s++;
                      if (*s && !isspace(*s)) {
                          memcpy(ds, target, cs - target);
                          ds += cs - target;
                          while (*s && !isspace(*s))
                              *ds++ = *s++;
                          *ds++ = '\n';
                      }
                  }
              }
          }
          free(old_depend_file);
      }
      depend_file->next = depend_list;
      depend_list = depend_file;
    }
  }
}

/* An aesthetic improvement (IMHO).  Join all the lines for the same
 * target dependency so you get one-line per target, instead of (potentially)
 * hundreds.
 */
static void md_flatten(char *p)
{
  char *tgt = p;
  size_t tgt_len, total = strlen(p) + 1;
  char *d = p;

  /* First of all, find the target name.  Need to find a colon followed by
   * whitespace (because it could be a fully-qualified RISC OS pathname)
   */
  for (;;) {
    p = strchr(d, ':');
    if (!p) return;
    if (isspace(p[1])) break;
    d=p+1;
  }

  tgt_len = p - tgt;

  /* Now look for EOL characters and just shift the entire remaining buffer
   * up to concatenate the lines.  Not the greatest of algorithms, but it
   * is good enough for the task in hand.
   */
  while (*p) {
    /* Find EOL */
    while (*p && *p++ != '\n') ;;
    d = p - 1;
    /* Last dependency?  Finished */
    if (!*p) break;
    /* Paranoia check: target name still matches? (should never not match!) */
    if (strncmp(p, tgt, tgt_len) != 0) break;
    p += tgt_len;
    /* More paranoia */
    if (*p++ != ':') break;
    while (*p && isspace(*p)) p++;
    /* Blat the EOL with a space, then shift the buffer up */
    *d++ = ' ';
    memmove(d, p, total - (p - tgt));
    /* Start next search with the first dependency we just moved */
    p = d;
  }
  /* I hate TABs in Makefiles which aren't indicative of commands ... */
  while ((tgt = strchr(tgt, '\t')) != NULL) *tgt++ = ' ';
}

static void merge_dependencies(Makefile *mf)
{
    Dependency_File_List *dl;
    Target_List *tl, *nt;
    char *target, *fcp, *s, *ac;
    char c;
    FILE *f;
    long size;
    long seek_target;
    bool write_initial_newline = false;

    if (depend_list) {
        dl = depend_list;
        tl = 0;
        do {
            fcp = dl->depend_file_contents;
            while (1) {
                while (isspace(*fcp)) fcp++;
                if (!*fcp) break;
                target = fcp;
                while ((c = *fcp) != 0 && c != ':' && !isspace(c)) fcp++;
                if (fcp == target) err_fail("null target in " DEPENDENCY_FILE);
                if (c != ':') err_fail("':' expected after target in " DEPENDENCY_FILE);
                *fcp = 0;
                nt = tl;
                while (nt) {
                    if (!md_cistrcmp(target, nt->name))
                        break;
                    nt = nt->next;
                }
                if (!nt) {
                    nt = malloc(sizeof(Target_List) + (fcp - target));
                    if (!nt) err_fail("out of memory");
                    strcpy(nt->name, target);
                    nt->next = tl;
                    tl = nt;
                }
                *fcp++ = c;
                while (*fcp && *fcp != '\n') fcp++;
            }
            dl = dl->next;
        } while (dl);

        if (wf_filesize(mf->name) != mf->file_size) {
          err_report("%s has been edited since %s was invoked!  "
                     "Ignoring dynamic dependency file.", mf->name, amu);
          return;
        }

        if (mf->dynamic_dependencies_magic_comment) {
          /* Shit - need to reload the makefile now and re-parse it simply from
           * mf->dynamic_dependencies_magic_comment->file_position onwards.
           */
          char *const contents = safe_malloc((size_t) mf->file_size + 1);

          if (wf_load(mf->name, contents, mf->file_size)) {
            err_report("Unable to re-read makefile '%s'", mf->name);
            return;
          }

          contents[mf->file_size] = '\0';
          seek_target = mf->dynamic_dependencies_magic_comment->file_position;
          ac = contents + seek_target;

          fcp = ac;
          while (*fcp && *fcp++ != '\n'); /* Skip the magic comment itself */
          for (;;) {
            while (isspace(*fcp)) fcp++;
            if (!*fcp) break;
            target = fcp;
            while ((c = *fcp) != 0 && c != ':' && !isspace(c)) fcp++;
            if (fcp == target) err_fail("null target in Makefile");
            if (c != ':') err_fail("':' expected after target in Makefile");
            *fcp = 0;
            nt = tl;
            while (nt) {
              if (!md_cistrcmp(target, nt->name)) break;
              nt = nt->next;
            }
            *fcp = c;
            while (*fcp && *fcp++ != '\n');
            if (nt) {
              s = target;
              while ((*s++ = *fcp++) != 0) ;;
              fcp = target;
            }
          }
          free(contents);
        }
        else {
          seek_target = mf->file_size;
          write_initial_newline = true;
        }

        if ((f = fopen(mf->name, "r+")) == NULL) {
          err_report("Error opening %s for update", mf->name);
          return;
        }

        if (fseek(f, seek_target, SEEK_SET)) {
          (void) fclose(f);
          err_report("Error writing dynamic dependencies to %s", mf->name);
          return;
        }

        if (write_initial_newline) fputc('\n', f);
        fputs(COMMENT_DYNAMIC_DEPENDENCIES "\n", f);

        for (dl = depend_list; dl; dl = dl->next) {
            md_flatten(dl->depend_file_contents);
            fputs(dl->depend_file_contents, f);
       };

        size = ftell(f);
        if (fclose(f) || size < 0) {
          err_fail("Error writing dynamic dependencies to %s", mf->name);
        }
        wf_truncate(mf->name, size);
    }
}

void md_start_cmd(void)
{
    md_time = filestamp_now();
}

void md_delete(void)
{
    remove(DEPENDENCY_FILE);
}

void md_merge(Makefile *mf)
{
  if (depend_list) {
    merge_dependencies(mf);
  }
}

int md_check_magic_string(const char *data)
{
  return (strcmp(data, COMMENT_DYNAMIC_DEPENDENCIES) == 0);
}

#define DDEUtils_Prefix    0x42580
#define DDEUtils_GetCLSize 0x42583

static int desktop_prefix = 0;
static int exit_handler = 0;

int dde_extended_cmdline(void)
{
  return _swix(DDEUtils_GetCLSize, 0) == NULL;
}

static void dde_exit(void)
{
    _kernel_swi_regs r;

    md_delete();

    if (desktop_prefix) {
        r.r[0] = 0;
        _kernel_swi(DDEUtils_Prefix, &r, &r);
    }
}

void dde_prefix_init(char *fname)
{
    char *s, *p, *t;
    char c;
    char prefix[1024];

    if (!_swix(OS_FSControl, _INR(0,5), 37, fname, prefix, 0, 0, sizeof(prefix)))
    {  char *ldot = strrchr(prefix, dir_sep);
       if (ldot)
       {  *ldot=0;
          define_macro("MAKEFILEDIR", prefix, false, true, false);
       }
    }

    if (desktop_prefix) {
        if (!exit_handler && atexit(dde_exit)) {
            err_report("Can't install atexit handler");
            exit(1);
        }
        exit_handler = 1;
        s = fname;
        p = t = prefix;
        while ((c = *t++ = *s++) > ' ')
            if (c == ':' || c == '.')
                p = t - 1;
        *p = 0;
        _swix(DDEUtils_Prefix, _IN(0), prefix);
    }

}

void dde_prefix_used(void)
{
  prefix_used = 1;
}

#endif /* DDE */
