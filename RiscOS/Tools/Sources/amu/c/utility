/*
 * AMU (utility.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/*
 * This source contains the basic functions callable from makefile macros.
 * The table of available functions is at the end of this file.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <limits.h>

/* CLX */
#include "err.h"
#include "filestamp.h"
#include "wholefls.h"
#include "hash.h"
#include "fname.h"

/* Local */
#include "amu.h"
#include "parse.h"
#include "macros.h"
#include "md.h"
#include "functions.h"
#include "patterns.h"
#include "readmk.h"
#include "utility.h"



/* Safe malloc: never returns failure */
void *safe_malloc(const size_t size)
{
  void *result = malloc(size);
  if (!result) {
    err_fail("memory allocation failure - increase available memory");
  }
  return result;
}

/* Safe realloc: never returns failure */
void *safe_realloc(void *data, const size_t size)
{
  void *result = realloc(data, size);
  if (!result) {
    err_fail("memory allocation failure - increase available memory");
  }
  return result;
}

/* Duplicate string into newly allocated block, but ensure 'extra' bytes are
 * allocated past the end of the string.  Never returns failure.
 */
char *Strdup_spare(const char *s, const size_t extra)
{
  const size_t slen = strlen(s) + 1;
  return memcpy(safe_malloc(slen+extra), s, slen);
}

/* String duplication - never returns failure */
char *Strdup(const char *s)
{
  const size_t slen = strlen(s) + 1;
  return memcpy(safe_malloc(slen), s, slen);
}

/* Given the address of the tail link pointer, fill it in with the new
 * object, and return the new tail link pointer.
 */
StringList **sl_new_append(StringList **newp, const char *txt)
{
  StringList *p;
  const size_t txt_len = strlen(txt);
  p = safe_malloc(sizeof(**newp) + txt_len);
  (void) memcpy(p->txt, txt, txt_len + 1);
  *newp = p;
  p->next = NULL;
  return &p->next;
}

/* Add a string to the head of a list */
StringList * sl_new_prepend(StringList *oldp, const char *txt)
{
  StringList *p;

  (void) sl_new_append(&p, txt);
  p->next = oldp;
  return p;
}

void sl_free_list(StringList *sl)
{
  while (sl) {
    StringList *next = sl->next;
    free(sl);
    sl = next;
  }
}

char *sl_join_list(StringList *sl)
{
  char *new_data, *ptr;
  size_t length;
  StringList *lp;

  for (length = 0, lp = sl; lp; lp = lp->next) {
    length += strlen(lp->txt) + 1;
  }

  if (length == 0) {
    new_data = Strdup("");
  }
  else {
    ptr = new_data = safe_malloc(length);

    for (lp = sl; lp; lp = lp->next) {
      if (lp != sl) {
        *ptr++ = ' ';
      }
      ptr = strchr(strcpy(ptr, lp->txt), '\0');
    }
  }

  return new_data;
}
