/*
 * AMU (patterns.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/*
 * This source contains the utility functions for pattern analysis and application.
 * It is used by the macro substitutor and the patsubst function implementation.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <limits.h>

/* CLX */
#include "err.h"
#include "filestamp.h"
#include "wholefls.h"
#include "hash.h"
#include "fname.h"

/* Local */
#include "amu.h"
#include "parse.h"
#include "macros.h"
#include "functions.h"
#include "patterns.h"
#include "utility.h"

/* This routine is the core processor for the pattern matcher - it takes a pattern
 * and a string to match.  If the string satisfies the pattern, the length of the stem
 * is stored in 'stem_length' and the function returns true.
 *
 * If the string does not satisfy the pattern, then the function returns false.
 */
bool patterns_match_word(char *s, pattern_substitution *p, int *stem_length)
{
  const size_t s_len = strlen(s);

  amu_debug(DEBUGGING3, "Compare '%s' with '%s' + '%s'", s, p->pre, p->post);

  /* First try some quick mathematical sanity checks */
  if (s_len < p->pre_len + p->post_len) return false;

  if (p->pre_len > 0) {
    if (memcmp(p->pre, s, p->pre_len) != 0) return false;
  }

  if (p->post_len > 0) {
    if (memcmp(p->post, s + s_len - p->post_len, p->post_len) != 0) return false;
  }

  /* the prefix and postfix matches, so how long was the rest of it? */
  *stem_length = s_len - p->pre_len - p->post_len;
  return true;
}


/* Destroy a pattern substitution description */
void patterns_destroy_substitution(pattern_substitution *p)
{
  amu_debug(DEBUGGING2, "delete_substitution");
  free(p->data);
}


/* This function analyses a pattern so we can avoid reprocessing it all the
 * time when applying it tfor a match.  note that the data structure will be
 * filled in, and data may be allocated, so you have to dispose of it carefully.
 * 'p' is not altered across the call, but may be altered within it.
 */
void patterns_analyse_pattern(char *p, pattern_substitution *pd)
{
  char *pc, *found = NULL;

  /* We are always going to copy the data, so might as well work on the copy */
  pc = pd->data = Strdup(p);

  while ((pc = strchr(pc, '%')) != NULL) {
    /* Now we need to check if it was escaped ... */

    if (pc == pd->data || pc[-1] != '\\' /* not preceded by a \ character */ ||
       (pc != pd->data+1 && pc[-2] == '\\') /* Preceded by \\ - so not an escape */) {
      if (found) {
        amu_err_fail("pattern %s contains multiple '%%' characters", p);
      }
      else {
        /* We must keep going so that we can unescape any other '%' characters */
        found = pc++;
      }
    }
    else {
      /* Was an escape, so remove the escape and keep going */
      memmove(pc - 1, pc, strlen(pc)+1);
      /* pc is now the character after the original '%', so is correct for next iter */
    }
  }

  if (!found) {
    /* A simple substitution - rewrite it as if it were %foo */
    pd->pre_len = 0;
    pd->post = pd->data;
    pd->pre = strchr(pd->data, '\0');
    pd->post_len = pd->pre - pd->data;
  }
  else {
    pd->pre = pd->data;
    pd->pre_len = found - pd->data;
    *found++ = '\0';
    pd->post = found;
    pd->post_len = strlen(pd->post);
  }
}


/* Perform a replacement into a newly allocated block */
static char *patterns_replace(char *data, pattern_substitution *p, int stem_length)
{
  char *const result = safe_malloc(stem_length + p->pre_len + p->post_len + 1);

  if (p->pre_len > 0) {
    memcpy(result, p->pre, p->pre_len);
  }

  memcpy(result + p->pre_len, data, stem_length);

  if (p->post_len > 0) {
    memcpy(result + p->pre_len + stem_length, p->post, p->post_len);
  }

  result[p->pre_len + stem_length + p->post_len] = '\0';
  return result;
}



/* This function applies the substitution to each item in the LinePart
 * list 'lp'.  Note that each entry in the list must be a single word.
 * (ie. probably ought to have been created by resplit_line(..., rlr_words)
 * The data pointers in each entry may be updated - old data pointers will
 * be freed.
 */
void patterns_process_line_part_list(LinePart *lp,
  pattern_substitution *search, pattern_substitution *replace)
{
  for (; lp; lp = lp->next) {
    int stem;

    if (patterns_match_word(lp->data, search, &stem)) {
      char *data = lp->data;
      lp->data = patterns_replace(lp->data + search->pre_len, replace, stem);
      free(data);
    }
  }
}
