/*
 * AMU (parse.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/*
 * This source contains the makefile parser - it interprets the data structures
 * created in readmk.c and generates the dependency tree.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

/* CLX */
#include "err.h"
#include "filestamp.h"
#include "wholefls.h"
#include "hash.h"
#include "fname.h"

/* Local */
#include "amu.h"
#include "parse.h"
#include "macros.h"
#include "md.h"
#include "readmk.h"
#include "utility.h"

/* A hash table containing the names of Makefiles already included
 * The associated value is the filename.  This is used to track
 * self-including makefiles.
 */
static HashTable inc_tab;

/* A hash table containing the names of the nodes in the tree.
 * The associated values are Node structure pointers.
 */
static HashTable node_tab;

/* The directories containing files we are interested in.  This is held
 * to permit filestamps to be read efficiently.
 */
static HashTable dir_tab;

/* The macros.  The values associated with each entry are a MacroVar structure. */
static HashTable tag_tab;

/* nodep is a list of all nodes in the system; nodeq is the address into which new
 * nodes should be written.
 */
static Node *nodep, **nodeq;

/* dotnodep is a list of all .nodes in the system; dotnodeq is the address into which new
 * .nodes should be written.
 */
static Node *dotnodep, **dotnodeq;

/* macro_origin_str is the string table oorresponding to the macro_origin enum in parse.h
 * Do not change these names just because you feel like it - they are used as the return
 * values for the origin() function and must be these strings exactly.
 *
 * MUST KEEP THIS UP TO DATE WITH THE ENUMS.
 */
static char *macro_origin_str[] = {
  "undefined",
  "default",
  "environment",
  "environment override",
  "file",
  "command line",
  "override",
  "automatic",
};

/* This is the ranking list - highest to lowest priority.  This ordering is the default
 * rank.
 */
static const macro_origin default_org_rank[] = {
  org_override,
  org_command_line,
  org_environment_override,
  org_file,
  org_environment,
  org_automatic,
  org_default,
  org_undefined
};
/* This is the ranking list - highest to lowest priority.  This ordering was that effectively
 * employed by amu 5.00.
 */
static const macro_origin amu_5_00_org_rank[] = {
  org_override,
  org_file,
  org_command_line,
  org_automatic,
  org_default,
  org_environment_override,
  org_environment,
  org_undefined
};
static const macro_origin *org_rank;


/* This access function is used to obtain the list of all the nodes in the parse tree */
Node *get_node_list(void)
{
  return nodep;
}

/* A simple function to add a node to the list of nodes */
static Node *add_node_to_list(Node *n)
{
  *nodeq = n;
  nodeq = &n->next;
  return n;
}

/* This access function is used to obtain the list of all the .nodes in the parse tree */
Node *get_dot_node_list(void)
{
  return dotnodep;
}

/* A simple function to add a node to the list of .nodes */
static Node *add_dot_node_to_list(Node *n)
{
  *dotnodeq = n;
  dotnodeq = &n->next;
  return n;
}

/* Attempt to resolve a makefile filename against the search path, returning a malloc'ed
 * block containing the full filename.  If the file is not found on the search path, the
 * passed value is returned (duplicated).
 */
static char *include_resolve_name(char *name)
{
  const size_t name_len = strlen(name) + 1;
  size_t filename_len = FILENAME_MAX;
  char *filename = safe_malloc(filename_len + name_len);

  include_search_path *i;

  for (i = &include_dirs; i; i = i->next) {
    const size_t path_len = strlen(i->txt);
    if (path_len > filename_len) {
      free(filename);
      filename_len = path_len;
      filename = safe_malloc(filename_len + name_len);
    }
    memcpy(filename, i->txt, path_len);
    memcpy(filename + path_len, name, name_len);
    if (wf_filesize(filename) != -1) break;
  }

  if (!i) {
    strcpy(filename, name);
  }

  return safe_realloc(filename, strlen(filename) + 1);
}

/* Open a new makefile (root makefile or an included one) and prepare it for parsing
 * It takes a copy of the name.
 */
void push_include(char *name, const bool reporting_errors)
{
  HashId h;

  /* Allocates returned buffer via malloc */
  name = include_resolve_name(name);
  amu_debug(DEBUGGING3, "Resolved makefile name is %s", name);

  /* Prevent multiple inclusion */
#ifndef PERMIT_MULTIPLE_INCLUSION
  if (hash_lookup(inc_tab, name, &h))
  {
    amu_err_report("Re-inclusion of %s", hash_value(inc_tab, h));
    return;
  }
#endif

  /* Store this filename in the hash table */
  hash_enter(inc_tab, name, &h);
  hash_assoc(inc_tab, h, name);

  /* Too deeply nested? (run out of space in our array) */
  if (in.idx >= (INCLUDEDEPTH-1))
  {
    amu_err_fail("include file invocations nested too deeply (> %u)", INCLUDEDEPTH-1);
  }

  amu_debug(DEBUGGING, "loading sub-makefile %s", name);

  if (load_makefile(&in.file[++in.idx], name)) {
    in.state.mf = in.file[in.idx];
    in.state.l  = NULL;
    in.state.mf->lineno = 0;
  }
  else if (reporting_errors) {
    char *error = in.file[in.idx--] ? "error reading makefile" : "out of memory reading makefile";
    amu_err_fail(error, name);
  }
  else {
    --in.idx;
  }
}

/* Return the origin of a variable - for debugging or the origin function */
char *get_origin(char *cp)
{
  return macro_origin_str[lookup_macro(cp)->origin];
}

/* Returns true if the rank of o1 is equal or higher than that of o2 */
static bool is_origin_higher_priority(macro_origin o1, macro_origin o2)
{
  int rank1 = -1, rank2 = -1;
  const macro_origin *org;

  for (org = org_rank; rank1 == -1 || rank2 == -1; ++org) {
    if (*org == o1) rank1 = org - org_rank;
    if (*org == o2) rank2 = org - org_rank;
  }

  return (rank1 <= rank2);
}

/* Enter a macro into the macro table - unless the definition is prevented by an earlier
 * definition that takes priority.  The definition will not be made unless 'org' outranks the
 * existing definition of the variable.  If a variable does not exist, its rank is org_undefined
 * (the lowest rank) and so is always permitted.
 */
void define_macro(char *name, const char *value, bool expanded, macro_origin org)
{
  HashId h;
  int existed;
  MacroVar *mv;

  existed = !hash_enter(tag_tab, name, &h);
  mv = existed ? hash_value(tag_tab, h) : safe_malloc(sizeof(*mv));

  if (existed) {
    /* If we are running with -e and the existing variable came from the environment, bump its
     * priority up to environment override.  This strategy for late changes in rank for variables taken
     * from the environment is based on empirical testing with GNU make's origin function.
     */
    if (mv->origin == org_environment && amu_flags & amuflag_ENVIRONMENT_OVERRIDE) {
      mv->origin = org_environment_override;
    }

    /* Is the new value high enough priority? */
    if (!is_origin_higher_priority(org, mv->origin)) {
      amu_debug(DEBUGGING2, "REDEFINE: **BLOCKED** %s is pri '%s', this def was pri '%s' ",
        name, macro_origin_str[mv->origin], macro_origin_str[org]);
      return;
    }

    free(mv->value);
  }
  else {
    hash_assoc(tag_tab, h, mv);
  }

  mv->expanded = expanded;
  mv->origin = org;
  mv->value = Strdup(value);

  amu_debug(DEBUGGING2, "DEFINE: %s with pri '%s' as %s", name, macro_origin_str[org], value);
}


/* Look up a macro in the macro table (tag_tab).  If it isn't found, try looking in the
 * environment, and put it into the macro table.  If we still haven't found it, create it
 * as an empty definition with a rank of org_undefined so future definitions will set it,
 * but we can guarantee a non-NULL return from this function.  NOTE that it also means we
 * don't continually look up the same (non-existant) environment variables, so we get
 * consistency and better performance.
 */
MacroVar *lookup_macro(char *name)
{
  HashId h;

  if (!hash_lookup(tag_tab, name, &h))
  {
    /* Enter this environment variable into the macro table, marking it as
     * indelible if we are using environment override.
     */
    const char *const env = getenv(name);
    define_macro(name, env ? env : "", true, env ? org_environment : org_undefined);

    if (!hash_lookup(tag_tab, name, &h)) {
      /* Still not defined?  Internal mistake.  Goodbye! */
      amu_err_fail("internal inconsistency error in macro table");
    }
  }

  return hash_value(tag_tab, h);
}


/* Enter the directories mentioned in 's' into the directory hash table.  This is used
 * to optimise the timestamp reading.
 */
static void accumulate_dirname(char *s)
{
  char *e;
  HashId h;

  if ((e = strrchr(s, dir_sep)) == NULL) {
    s = strchr(s, '\0');
  }
  else {
    *e = '\0';
  }

  if (hash_enter(dir_tab, s, &h)) {
    dirs = sl_new_prepend(dirs, s);
  }
  if (e) *e = dir_sep;
}

/* Find the Node representing 's' and return it.  If there is no such node, create it. */
Node *find_node(char *s)
{
  HashId h;
  Node *n;
  char buf[NAMELEN];

  amu_debug(DEBUGGING5, "find_node(%s)", s);

  if (s[0] != '.') s = real_file_name(s, buf, NAMELEN);
  if (hash_enter(node_tab, s, &h))
  {
    n = safe_malloc(sizeof(Node) + strlen(s) + 1);
    if (s[0] != '.') {
      /* omit 'special' nodes */
      add_node_to_list(n);
    }
    else {
      add_dot_node_to_list(n);
    }
    n->next = NULL;
    n->name = (char *) (n + 1);
    strcpy(n->name, s);
    n->file = &(n->name);
    n->cmds = NULL;
    n->depends_on = NULL;
    n->time = FILESTAMP_NEVER;
    n->flags = 0;
    hash_assoc(node_tab, h, n);
    if (s[0] != '.') accumulate_dirname(s);
  }
  else n = (Node *) hash_value(node_tab, h);
  return n;
}

static Link *make_link(Link *tail, Node *n)
{
  Link *lk = safe_malloc(sizeof(*lk));

  lk->node = n;
  lk->link= tail;

  return lk;
}

/* Add a dependecy for 'target' on 'src'. */
void make_depend(Node *target, Node *src)
{
  if ((src->flags & IS_COLONCOLON) &&
      (target->depends_on != NULL) &&
      (target->flags & HAS_CLONES) == 0)
  {
    amu_err_report("%s '::' rule clashes with earlier ':' rule", target->name);
  }
  else if ((target->flags & HAS_CLONES) &&
             (src->name != target->name))
  {
    amu_err_report("%s ':' rule clashes with earlier '::' rule", target->name);
  }
  else
  {
    src->flags |= IS_DEPENDED_ON;
    target->depends_on = make_link(target->depends_on, src);
  }
}

static Node *clone_node(n)
Node *n;
{
  Node *clone;

  clone = safe_malloc(sizeof(*clone));
  add_node_to_list(clone);
  clone->next = NULL;
  clone->name = n->name;
  clone->file = n->file;
  clone->cmds = NULL;
  clone->depends_on = NULL;
  clone->time = FILESTAMP_NEVER;
  clone->flags = IS_COLONCOLON;
  make_depend(n, clone);
  n->flags |= HAS_CLONES;
  return clone;
}

/* Determine whether the string pointed to by cp is a known directive, and return its enum code if so */
static Directive amu_decode_directive(char *cp)
{
  static const struct {
    char *text;
    Directive d;
  } directives[] = {
    { ".INCLUDE"   , directive_include },
    { "INCLUDE"    , directive_include },
    { ".-INCLUDE"  , directive_include_no_error },
    { "-INCLUDE"   , directive_include_no_error },
    { "OVERRIDE"   , directive_override },
    { NULL         , not_a_directive }
  }, *d;

  for (d = directives; d->text; ++d) {
    if (hash_cistrcmp(cp, d->text) == 0) break;
  }

  return d->d;
}

/* Determine whether the string pointed to by cp is a known conditional keyword, and return its
 * enum code if so
 */
static Conditional amu_decode_conditional(char *cp)
{
  static const struct {
    char *text;
    Conditional c;
  } conditionals[] = {
    { "ifeq"     , cond_ifeq },
    { "ifneq"    , cond_ifneq },
    { "ifdef"    , cond_ifdef },
    { "ifndef"   , cond_ifndef },
    { "else"     , cond_else },
    { "endif"    , cond_endif },
    { NULL       , not_a_conditional }
  }, *c;

  for (c = conditionals; c->text; ++c) {
    if (hash_cistrcmp(cp, c->text) == 0) break;
  }

  return c->c;
}

/* We have had enough of the top Makefile - get rid of it.
 * NOTE: if in.idx == 0, then this was the top-level Makefile,
 * and we need it to hang around in in.state.mf so that we can
 * do the dynamic dependency work on it.  This is OK because once
 * in.idx gets back to -1, no more parsing will occur and in.state.mf
 * won't be touched.
 */
static void pop_makefile(void)
{
  if (in.idx > 0) {
    in.state.mf = in.file[--in.idx];
    in.state.l = NULL;
  }
  else {
    in.idx = -1;
  }
}

/* Move on to the next line in the Makefile.  This function handles the state of reaching the
 * end of a makefile and returning to the one which included it.  Reaching the end of the top-level
 * makefile is a persistent EOF condition, flagged by setting in.state.l to NULL.
 *
 * This function must NOT be called directly, only via set_next_line() please.
 */
static void do_set_next_line(void)
{
  if (in.idx < 0) {
    /* Persistent EOF condition */
    in.state.l = NULL;
    return;
  }

  if (!in.state.l) {
    /* We haven't already parsed a line from this Makefile, get one. */
    in.state.l = in.state.mf->lines;
    ++in.state.mf->lineno;
    if (!in.state.l) {
      /* The Makefile was empty, pop it and try again */
      pop_makefile();
      do_set_next_line();
    }
  }
  else {
    /* We had already read a line, get the next line, throwing away the previous line data (leaking it) */
    in.state.l = in.state.mf->lines = in.state.l->next;
    ++in.state.mf->lineno;
    if (!in.state.l) {
      /* but we've reached the end of the file, pop it, return to previous */
      pop_makefile();
      do_set_next_line();
    }
  }
}

/* This function handles the processing of 'else' conditional statements.
 * Return value as for set_next_line_check_cond().
 */
static bool parse_process_else(ConditionalMode m)
{
  switch (m) {
    case condmode_waiting_for_else:
      /* We've found the else clause of the 'if' statement we were looking for - */
      in.cond[in.cond_idx] = condmode_executing_else_branch;
      break;

    case condmode_executing_if_branch:
      /* We've found the else clause which terminates the text-if-true part of the cond */
      in.cond[in.cond_idx] = condmode_waiting_for_endif;
      break;

    case condmode_waiting_for_endif:
      /* Looks like we were waiting for an endif, so ignore this clause */
      break;

    default:
      amu_err_fail("'else' unexpected");
      break;
  }

  return false;
}

/* This function handles the processing of 'endif' conditional statements.
 * Return value as for set_next_line_check_cond().
 */
static bool parse_process_endif(ConditionalMode m)
{
    if (m == condmode_executing) {
      amu_err_fail("'endif' unexpected");
    }
    else {
      /* End of conditional - pop it */
      --in.cond_idx;
    }

    return false;
}

/* Evaluate the condition in the light of 'c'.
 * Return true if the condition was met, false otherwise.
 */
static bool eval_condition(Conditional c, Line *l)
{
  if (c == cond_ifdef || c == cond_ifndef) {
    /* cond_ifdef is true if macro exists and has non-empty value, false otherwise,
     * cond_ifndef is (not conf_ifdef).  Note sneaky use of XOR to flip the result.
     */
    return (*(lookup_macro(l->firstpart->data))->value == '\0' ^ (c == cond_ifdef));
  }
  else {
    /* need to parse arg one and arg two, expand both, then compare */
    bool strings_match;
    char *after_args;
    LinePart *lp = make_conditional_args(l->firstpart->data, &after_args);

    /* Some validation of the arguments ... */
    if (lp->next == NULL || lp->next->next != NULL) {
      amu_err_fail("syntax error: too few/too many arguments to condition: 2 are required");
    }
    if (*after_args) {
      amu_err_fail("syntax error: extra characters after condition arguments");
    }

    (void) macroise_free(&lp->data, true);
    (void) macroise_free(&lp->next->data, true);

    strings_match = (strcmp(lp->data, lp->next->data) == 0);
    deallocate_linepart_list(lp);

    return (c == cond_ifneq) ^ strings_match;
  }

  return true;
}

/* This function examines a newly read line and determines whether it should be skipped or not
 * It returns true if the line should be passed on through the parser, false if it should be
 * swallowed without trace.
 */
static bool set_next_line_check_cond(void)
{
  char *eos, *sol, *comment, temp;
  Conditional c;
  ConditionalMode m;
  bool executing;

  /* Skip to first non-whitespace character or end-of-line */
  for (eos = in.state.l->firstpart->data; isspace(*eos); ++eos) ;;
  /* Skip to first whitespace character or end-of-line */
  for (sol = eos; *eos && !isspace(*eos); ++eos) ;;

  temp = *eos;
  *eos = '\0';
  c = amu_decode_conditional(sol);
  *eos = temp;

  /* Determine whether we are currently executing commands or not */
  m = (in.cond_idx < 0) ? condmode_executing : in.cond[in.cond_idx];

  /* Check the current condition and return true or false depending on our current state */
  executing = (m == condmode_executing ||
               m == condmode_executing_if_branch ||
               m == condmode_executing_else_branch);

  if (c == not_a_conditional) {
    /* then our state is unchanged */
    return executing;
  }

  /* Here, we know that we have a statement involved in a conditional.  We need to check whether
   * we are currently executing, what terminators we are looking for etc. (if any!)
   *
   * We MUST return false after this point to force the looping to continue to read the
   * next line and not let it through to the parser.
   */

  /* Get rid of any comments so we can validate no extra rubbish on the lines */
  comment = strchr(sol, '#');
  if (comment) *comment = '\0';

  if (c == cond_else) {
    return parse_process_else(m);
  }

  if (c == cond_endif) {
    return parse_process_endif(m);
  }

  if (in.cond_idx + 1 == CONDDEPTH) {
    amu_err_fail("conditionals nested too deeply (max depth is %i)", CONDDEPTH);
  }

  /* So, it must be the start of a new conditional block */
  if (!executing) {
    /* We weren't currently executing these commands, so just push another
     * flag to wait for endifs to the stack.
     */
    in.cond[++in.cond_idx] = condmode_waiting_for_endif;
  }
  else {
    /* Skip along to find the parameters then - we need to evaluate this conditional */
    while (isspace(*eos)) ++eos;
    /* Ditch the entire line contents up to here - we know what they were */
    strip_trailing_whitespace(memmove(in.state.l->firstpart->data, eos, strlen(eos) + 1));

    executing = eval_condition(c, in.state.l);
    in.cond[++in.cond_idx] = executing ? condmode_executing_if_branch : condmode_waiting_for_else;
  }

  return false;
}

/* This is the routine that clients should call - it takes care of the skipping of switched
 * out parts of conditionals.
 */
static void set_next_line(void)
{
  do {
    do_set_next_line();
  } while (in.state.l && !set_next_line_check_cond());
}

/* Like a std::string::iterator.  A character iterator for cp over *plp.
 * Behaviour is undefined if you iterate past plp->end()
 */
static char *cp_iterator(char *cp, LinePart **plp)
{
  ++cp;
  while (!*cp && (*plp)->next) {
    *plp = (*plp)->next;
    cp = (*plp)->data;
  }

  return cp;
}

/* Effectively, strchr() over a list of LineParts.
 * On entry, *pop holds the LinePart to start the search from.
 * On exit, *plp holds the LinePart containing the matched char or NULL if no match
 * Returns the address of the matched char in *plp.
 */
static char *lp_strchr(LinePart **plp, const char c)
{
  char *result = NULL;

  for (result = NULL; *plp; *plp = (*plp)->next) {
    result = strchr((*plp)->data, c);
    if (result) break;
  }

  return result;
}

/* Split up the includes and include each file.  Note that when we parse the include files,
 * we insert them into a list by adding new items at the front.  Then we walk the list and
 * push the included files *backwards* onto the include stack.  Thus when the stack is
 * repeatedly popped, the files come off in the *right* (i.e. left-to-right) order.
 *
 * Note that we don't bother to copy the filename out of the line buffer - there is no need.
 */
static void amu_parse_includes(Line *l, bool generate_errors)
{
  LinePart *lp;
  include_file *includes = NULL;

  resplit_line(l, rlr_words);
  for (lp = l->firstpart; lp; lp = lp->next) {
    includes = sl_new_prepend(includes, lp->data);
  }

  while (includes) {
    include_file *const next = includes->next;
    push_include(includes->txt, generate_errors);
    free(includes);
    includes = next;
  }
}

/* This function is passed a string buffer of a complete line (*pcp) in a Makefile and asked to
 * identify its type: blank line, macro definition, dependency, command or directive.
 * Comments must have been removed.  *pcp must not be NULL.  It fills in first_interesting_character
 * with the first interesting character on the line:
 *   blank -> unused (f_i_c char* is corrupted though)
 *   macro_definition -> first character of assignment token (*pcp = first character of macro name)
 *   dependency -> first character of ':' or '::' assignee
 *   command -> first character of command
 *   directive -> first parameter of directive (*dp = directive found)
 *
 * On exit, *dp contains the directive type or not_a_directive if no directive was found.  This permits
 * a return value of linetype_macro_definition with *dp containing directive_override to control the
 * macro assignment rules.
 *
 * This routine WILL free *pcp and replace it with a newly malloced block if it sees fit.
 */
static LineType identify_line_type(char **pcp, char **first_interesting_character, Directive *dp)
{
  LineType result = linetype_blank;
  bool leading_spaces = false;
  char last_ch = ' ';
  char *cp = *pcp;

  *dp = not_a_directive;

  leading_spaces = isspace(*cp);
  if (leading_spaces) {
    do {
      ++cp;
    } while (isspace(*cp));
  }

  if (leading_spaces || !*cp) {
    if (*cp) result = linetype_command;
  }
  else {
    char *first_non_ws = cp;
    while (*cp) {
      if (*cp == '=') {
        /* Macro assignment */
        if (cp == *pcp) {
          /* This is the first character!! */
          amu_err_fail("attempt to define a macro with no name");
        }
        result = linetype_macro_definition;
        if (strchr(":?.+", last_ch)) {
          --cp;
        }
        break;
      }
      else if (*cp == '$' && (cp[1] == '(' || cp[1] == '{')) {
        /* Buggerit - we need to expand this because it's permitted to be a dependency + command
         * all combined.  Note that we *can* reallocate *pcp and reset everything up carefully.
         */
        const size_t prefix_len = cp - *pcp;

        *pcp = macroise_this(*pcp, cp);
        cp = (first_non_ws = *pcp) + prefix_len;
        /* We must *continue* here, because we need to re-interpret this (*cp) character
         * last_ch will be correct, and we have remembered to reset first_non_ws, *pcp and cp.
         */
        continue;
      }
      else if (*cp == ':') {
        if (cp[1] == '=') {
          /* Macro assignment - let this character go, we'll see the = on the next iteration */
        }
        else if (!(amu_flags & amuflag_UNIX_NAMES) && (
          (cp[1] == ':' && cp[2] && !isspace(cp[2]) && cp[2] != ';') ||
          (cp[1] != ':' && cp[1] && !isspace(cp[1]) && cp[1] != ';'))) {
          /* Take a chance on this being a RISC OS pathname (unless we saw .UNIXNAMES) and
           * either ::<not EOS, not whitespace, not semicolon> or
           *        :<not colon, not EOS, not whitespace, not semicolon>
           */
        }
        else {
          /* Must be a dependency declaration - note we have no demacroise the dependees yet */
          result = linetype_dependency;
          break;
        }
      }
      else if (isspace(*cp) && !isspace(last_ch)) {
        /* Found a whitespace character immediately after some non-whitespace chars (ie. end of a string)
         * Look for a directive or a conditional.
         */
        last_ch = *cp;
        *cp = '\0';
        *dp = amu_decode_directive(first_non_ws);
        *cp = last_ch;
        if (*dp != not_a_directive) {
          /* skip further whitespace */
          while (isspace(*cp)) {
            ++cp;
          }
          if (!*cp) {
            result = linetype_blank;
            break;
          }

          /* Obliterate the directive, and shift the rest of the buffer down */
          cp = memmove(*pcp, cp, strlen(cp) + 1);

          if (*dp == directive_override) {
            /* We don't want the recursive call to clobber *dp, so we pass a dummy Directive */
            Directive dummy_directive;
            result = identify_line_type(pcp, first_interesting_character, &dummy_directive);
            if (result != linetype_macro_definition) {
              amu_err_fail("invalid override directive");
            }

            cp = *first_interesting_character;
          }
          else {
            result = linetype_directive;
          }
          break;
        }
      }
      else {
        result = linetype_pending;
      }
      last_ch = *cp++;
    }
  }

  *first_interesting_character = cp;
  return result;
}

char *strip_trailing_whitespace(char *cp)
{
  char *last_non_ws = strchr(cp, '\0');

  while (last_non_ws > cp && isspace(last_non_ws[-1])) {
    --last_non_ws;
  }

  *last_non_ws = '\0';
  return cp;
}

/* Note that a pointer returned from this function cannot be passed to free()
 * because if it has changed, it will no longer point to the malloced block.
 */
char *strip_leading_whitespace(char *cp)
{
  while (isspace(*cp)) ++cp;
  return cp;
}

static void process_directive(Line *l, Directive d)
{
  /* override has already been filtered out and passed to process_macro_definition,
   * so the only existing directives are include and -include, so optimise:
   */
  set_next_line();
  --in.state.mf->lineno;
  amu_parse_includes(l, d == directive_include);
}

static void process_macro_definition(Line *l, char *op, bool overriding)
{
  /* Now we check for a macro definition:   'name' '[<whitespace>]' '[:?+]=.*' ...
   * 'op' points at the first character of the assignment operator.
   * 'l->firstpart->data' points to the name of the macro.
   * overriding is true if the 'override' keyword was present.
   */
  const macro_origin org = overriding ? org_override : org_file;
  const char actual_op = *op;
  char *name = l->firstpart->data;
  char *const old_ptr = l->firstpart->data;
  bool execute_assign;
  void *free_me = NULL;

  MacroVar *mv;
  bool expanded;

  /* Terminate the macro name, strip trailing spaces from it - so we can look it up */
  if (*op != '=') *op++ = '\0';
  *op++ = '\0';
  strip_trailing_whitespace(name);
  /* Reset line data to be the value of the macro (name is safely stored in 'name') */
  strip_trailing_whitespace(op);
  l->firstpart->data = strip_leading_whitespace(op);

  /* Look up the existing value of the macro.  Note that this will *create* the macro if it
   * doesn't exist (either from the environment, or as the "undefined macro with empty value",
   * so we can rely on it succeeding.
   */
  mv = lookup_macro(name);
  expanded = mv->expanded;
  execute_assign = true;

  switch (actual_op) {
    default:
      break;
    case '.': /* Backward compatibility for very old amu only */
    case '?':
      execute_assign = (mv->origin == org_undefined);
      break;
    case ':':
      macroise(&l->firstpart->data, false);
      expanded = true;
      break;
    case '+':
      if (mv->origin == org_undefined || mv->expanded) {
        macroise(&l->firstpart->data, false);
        expanded = true;
      }
      if (mv->origin != org_undefined) {
        const size_t exp_len = strlen(l->firstpart->data) + 2 /* space separator and zero terminator */;
        l->firstpart->data = strcat(strcat(Strdup_spare(mv->value, exp_len), " "), l->firstpart->data);
        free_me = l->firstpart->data;
      }
      break;
  }

  if (execute_assign) {
    define_macro(name, l->firstpart->data, expanded, org);
  }

  l->firstpart->data = old_ptr;
  free(free_me);
}

/* Look for and delete comments after offering them to the magic string checker */
static void process_comment(Line *l)
{
  LinePart *lp;
  char *cp;

  /* Look for a magic comments first - these need to be kept specially */
  lp = l->firstpart;
  cp = lp->data;
  if (*cp == '#') {
    if (md_check_magic_string(lp->data)) {
      in.state.mf->dynamic_dependencies_magic_comment = l;
    }
  }
  else {
    cp = lp_strchr(&lp, '#');
  }

  if (cp) {
    *cp = '\0';      /* Get rid of it */
    lp->next = NULL; /* and any other line parts */
  }
}

/* Add the given command to the list to execute, but filter out blank lines */
static void add_command(char *text, Cmd **next, Cmd ***nextp)
{
  char *const text_of_command = strip_leading_whitespace(text);

  if (*text_of_command) {
    *nextp = sl_new_append(next, text_of_command);
  }
}

/* This routine returns NULL if it has handled the target, otherwise a node. */
static Node *process_special_target(char *target, LinePart *dependencies)
{
  /* Special target ... anything starting with a dot */
  Node *n = NULL;

  if (hash_cistrcmp(target, ".SILENT") == 0) {
    amu_flags |= SILENT;
  }
  else if (hash_cistrcmp(target, ".IGNORE") == 0) {
    amu_flags |= IGNORE_RC;
  }
  else if (hash_cistrcmp(target, ".PHONY") == 0) {
    n = find_node(target);
  }
  else if (hash_cistrcmp(target, ".UNIXNAMES") == 0) {
    amu_flags |= amuflag_UNIX_NAMES;
  }
  else if (hash_cistrcmp(target, ".DEFAULT") == 0) {
    default_rule = n = find_node(target);
  }
  else if (hash_cistrcmp(target, ".INIT") == 0) {
    init_rule = n = find_node(target);
    init_rule->flags |= PHONY;
    make_depend(find_node(".PHONY"), n);
  }
  else if (hash_cistrcmp(target, ".DONE") == 0) {
    done_rule = n = find_node(target);
    done_rule->flags |= PHONY;
    make_depend(find_node(".PHONY"), n);
  }
  else if (hash_cistrcmp(target, ".FAILED") == 0) {
    failed_rule = n = find_node(target);
    failed_rule->flags |= PHONY;
    make_depend(find_node(".PHONY"), n);
  }
  else if (hash_cistrcmp(target, ".SUFFIXES") == 0) {
    suffixes = n = find_node(target);
    if (!dependencies) {
      /* Delete earlier suffixes */
      suffixes->depends_on = NULL;
    }
  }
  else {
    Link *lk;
    char *dest_suffix = strchr(target + 1, '.');

    if (!dest_suffix) {
      amu_err_fail("mal-formed suffix rule");
    }

    for (lk = suffixes ? suffixes->depends_on : NULL; lk && !n; lk = lk->link) {
      if (strcmp(dest_suffix, lk->node->name) == 0) {
        /* Found the target suffix in the list of suffixes */
        n = find_node(target);
        make_depend(lk->node, n);
      }
    }

    if (!n) {
      amu_err_report("rule mentions non-suffix '%s'", dest_suffix);
    }
  }

  return n;
}

static void process_dependency(Line *l, char *colon)
{
  /* Before exiting, this routine *MUST* make sure it has called set_next_line() appropriately.
   * The act of calling that function is deferred by build_graph() for dependency lines explicitly
   * because this routine needs to read the subsequent command lines until a non-command line is
   * found.  When this routine exits, in.state.l will be pointing at the next line to process
   * already,
   */
  bool double_colon = false;
  LinePart *targets = NULL;
  LinePart *dependencies = NULL;
  LinePart *lp;
  Line *tl;
  Cmd *cmds = NULL, **next_cmd = &cmds;
  char *dependees;
  char *cp;

  *colon++ = '\0';
  /* Now, l->firstpart->data is the purely whitespace separated target list */
  resplit_line(l, rlr_words);
  /* Targets is never duplicated - remember that! But nothing else will change l->firstpart */
  targets = l->firstpart;

  double_colon = (*colon == ':');
  if (double_colon) ++colon;
  dependees = Strdup(strip_leading_whitespace(strip_trailing_whitespace(colon)));
  /* Above expression ensures that dependees points to dependee list string (or ';' or '\0') */

  /* Now we need to carefully macro expand 'colon' until we hit end of line or a semicolon */
  for (cp = dependees; *cp != ';' && *cp != '\0';) {
    if (*cp == '$' && (cp[1] == '(' || cp[1] == '{')) {
      const size_t prefix_len = cp - dependees;
      dependees = macroise_this(dependees, cp);
      cp = dependees + prefix_len;
    }
    else {
      ++cp;
    }
  }

  /* Mark off the initial command if we have one (cp points to it, or NULL if there's no command) */
  if (*cp == ';') {
    /* Terminate dependees, add the command to the command list */
    *cp++ = '\0';
    /* Store command (note: will not do it if the command is only whitespace) */
    add_command(cp, next_cmd, &next_cmd);
    (void) strip_trailing_whitespace(dependees);
  }
  else {
    cp = NULL;
  }

  if (*dependees) {
    /* There were some dependees - split them up nicely. */
    tl = alloc_line();
    lp = append_new_line_part(tl);
    lp->data = dependees;
    resplit_line(tl, rlr_words);
    dependencies = tl->firstpart;
  }
  else {
    /* There were not any dependees */
    dependencies = NULL;
    tl = NULL;
  }

  /* Read commands */
  for (set_next_line(); in.state.l; set_next_line()) {
    char *cp;

    process_comment(in.state.l);
    lp = in.state.l->firstpart;
    cp = cp_iterator(lp->data - 1, &lp);
    if (!isspace(*cp)) {
      /* Not another command here - exit out the loop */
      break;
    }

    /* We know we are a command, so flatten everything out properly - DO NOT MACROISE YET */
    sanitise_line(in.state.l, slr_flatten_leading_spaces);
    add_command(in.state.l->firstpart->data, next_cmd, &next_cmd);
  }

  /* Right, we have parsed everything - now to store it in the node tree.
   *
   * targets is a list of targets
   * dependencies is a list of the dependencies of those targets
   * double_colon is true if we need to clone the nodes
   * cmds is the list of commands to bring the targets up to date w.r.t. the dependencies.
   *
   */

  for (lp = targets; lp; lp = lp->next) {
    char *target = lp->data;
    Node *n;

    if (*target == '.') {
      n = process_special_target(target, dependencies);
    }
    else {
      n = find_node(target);
      if (double_colon) {
        n = clone_node(n);
      }
    }

    if (n) {
      LinePart *dl;
      for (dl = dependencies; dl; dl = dl->next) {
        amu_debug(DEBUGGING, "adding dependency for %s on '%s'", n->name, dl->data);
        make_depend(n, find_node(dl->data));
      }
    }

    if (n && cmds) {
      if (amu_flags & DEBUGGING3) {
        Cmd *c;
        amu_debug(DEBUGGING3, "Assign commands to node %p (%s):", n, n->name);
        for (c=cmds; c; c=c->next) amu_debug(DEBUGGING3, "  %s", c->txt);
      }
      if (n->cmds) {
        amu_err_report("'%s' already has commands (new commands ignored)", n->name);
      }
      else {
        n->cmds = cmds;
      }
    }
  }

  if (tl) deallocate_line(tl);
}

/* This is the main routine for parsing the makefile descriptions.  It reads the data structures
 * line by line (set_next_line() will retrieve the next line of data, handling sub-makefiles and
 * the like all transparently) and determines their semantics and dispatches the lines to the
 * appropriate handler routines.
 */
void build_graph(void)
{
  LinePart *lp;
  LineType type;
  Directive d;
  char *cp;

  set_next_line();

  /* Keep reading stuff whilst there is stuff to read */
  while (in.state.l) {
    /* We are looking for: comments, macros, dependency declarations */
    process_comment(in.state.l);

    /* Reset to start of line; flatten it (we know we're not a command here) */
    sanitise_line(in.state.l, slr_flatten);
    lp = in.state.l->firstpart;
    /* Guaranteed to have one single string now (lp->data) */
    if (lp->next) amu_err_fail("fatal internal error: failed to rejoin parts");

    /* Perform initial parse of the line; lp->data possibly updated too */
    type = identify_line_type(&lp->data, &cp, &d);
    amu_debug(DEBUGGING4, "Line is %s (%s)",
      type == linetype_blank ? "blank" :
      type == linetype_pending ? "unrecognised (pending)" :
      type == linetype_macro_definition ? "a macro definition" :
      type == linetype_dependency ? "a dependency specification" :
      type == linetype_command ? "command" : "directive",
      lp->data);

    switch (type) {
      case linetype_blank:
        set_next_line();
        break;
      case linetype_macro_definition:
        process_macro_definition(in.state.l, cp, d == directive_override);
        set_next_line();
        break;
      case linetype_dependency:
        process_dependency(in.state.l, cp);
        /* no set_next_line() - process_dependency will have already done that! */
        break;
      case linetype_directive:
        in.state.l->firstpart->data = cp;
        macroise(&in.state.l->firstpart->data, true);
        process_directive(in.state.l, d);
        set_next_line();
        break;
      case linetype_command:
        amu_err_fail("Command unexpected at this line (no preceding dependency)");
        break;
      case linetype_pending:
        amu_err_fail("Unrecognised line - missing ':' or '::' ?");
        break;
    }
  }
}

void expand_vpath(void)
{
  HashId h;
  char *s;
  UnparsedName un;
  char buf[NAMELEN];
  if (hash_lookup(tag_tab, "VPATH", &h))
  {
    Line *l = alloc_line();
    LinePart *lp = make_new_line_part(l->nextpart, -1);
    MacroVar *mv = hash_value(tag_tab, h);

    if (!mv->expanded) {
      lp->data = mv->value;
      macroise(&lp->data, true);
    }
    else {
      lp->data = Strdup(mv->value);
    }
    resplit_line(l, rlr_words);

    vpathbuf = (char *) malloc(NAMELEN);
    for (lp = l->firstpart; lp; lp = lp->next) {
      fname_parse(lp->data, fname_suffixes, &un);
      fname_unparse(&un, FNAME_AS_NAME, buf, NAMELEN);
      vpaths = sl_new_prepend(vpaths, buf);
      s = strchr(vpaths->txt, '\0');
      *s++ = un.pathsep;
      *s = '\0';
    }

    free(l->firstpart);
    free(l);
  }
}

void make_default_suffixes(void)
{
  /* Create the default suffix list from fname_suffixes */
  char *slist, *s;
  int n;
  char buf[NAMELEN];
  suffixes = find_node(".SUFFIXES");
  slist = fname_suffixes;
  buf[0] = '.';
  for (;;)
  { while (isspace(*slist)) ++slist;
    if (*slist == 0) break;
    s = slist;
    while (*s && !isspace(*s)) ++s;
    n = s - slist;
    strncpy(buf+1, slist, n);
    buf[n+1] = 0;
    suffixes->depends_on = make_link(suffixes->depends_on, find_node(buf));
    slist = s;
  }
}

void parse_initialise(void)
{
  node_tab = hash_cinew(NODETABSZ);
  inc_tab = hash_cinew(TAGTABSZ);
  dir_tab = hash_cinew(TAGTABSZ);
  tag_tab = hash_cinew(TAGTABSZ);
  nodep = NULL;
  nodeq = &nodep;
  dotnodep = NULL;
  dotnodeq = &dotnodep;
  org_rank = default_org_rank;
}

void parse_reinstate_amu_5_00_org_rank(void)
{
  org_rank = amu_5_00_org_rank;
}
