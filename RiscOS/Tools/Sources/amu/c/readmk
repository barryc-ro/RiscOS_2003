/*
 * AMU (readmk.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/*
 * This source file contains the code to read a makefile into memory.
 * It constructs a Makefile object, consisting of a list of Lines each of which
 * consists of a list of LineParts.  Routines are provided for flattening lists
 * of LineParts into a single LinePart, splitting a LinePart list into a many
 * entries each with a single word in them and dumped the data structure for debugging.
 *
 * When loading a makefile, line joining sequences (\ at end of line) are elided and
 * the lines are joined back together.
 *
 * This file supports a unit test: cc -IC:CLX readmk.c C:CLX.o.clxlib -DDEBUG
 * See the main() function at the end of this file for details.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

/* CLX */
#include "err.h"
#include "filestamp.h"

/* Local */
#include "amu.h"
#include "parse.h"
#include "readmk.h"
#include "utility.h"


/* Due to the way lines are stored, this is NOT an absolute limit on the length
 * of any one line - it is merely a convenient internal temporary buffer size
 */
#define LINEBUFFERSIZE 1024

Line *alloc_line(void)
{
  Line *newline = safe_malloc(sizeof(*newline));

  /* Initialise the fields */
  newline->next = NULL;
  newline->makefile = NULL;
  newline->lineno = 0;
  newline->firstpart = NULL;
  newline->nextpart = &newline->firstpart;
  newline->file_position = 0L;

  return newline;
}

static Line *make_new_line(Makefile *mf)
{
  Line *newline = alloc_line();

  /* Link to makefile */
  *mf->nextline = newline;
  mf->nextline = &newline->next;

  /* Initialise the other fields */
  newline->makefile = mf;
  newline->lineno = mf->lineno;
  newline->file_position = ftell(mf->f);
  if (mf->lookahead && mf->lookahead != EOF) {
    --newline->file_position;
  }

  return newline;
}

Line *clone_line_no_lineparts(Line *l)
{
  Line *newline = safe_malloc(sizeof(*newline));

  /* Clone whole thing, then fix up differences */
  *newline = *l;

  newline->next = NULL;
  newline->firstpart = NULL;
  newline->nextpart = &newline->firstpart;

  return newline;
}

extern LinePart *insert_line_part(LinePart *lp)
{
  LinePart *newlinepart = safe_malloc(sizeof(*newlinepart));

  /* Initialise other fields */
  newlinepart->lineno = lp->lineno;
  newlinepart->data = NULL;
  newlinepart->next = lp->next;
  lp->next = newlinepart;

  return newlinepart;
}

LinePart *make_new_line_part(LinePart **next, int lineno)
{
  LinePart *newlinepart = safe_malloc(sizeof(*newlinepart));

  /* Link to line */
  *next = newlinepart;

  /* Initialise other fields */
  newlinepart->lineno = lineno;
  newlinepart->data = NULL;
  newlinepart->next = NULL;

  return newlinepart;
}

extern LinePart *append_new_line_part(Line *l)
{
  LinePart *result = make_new_line_part(l->nextpart, l->lineno);
  l->nextpart = &result->next;
  return result;
}

static LinePart *commit_line_part(Makefile *mf, Line *l, LinePart *lp, char *buffer)
{
  /* Commit active line part */
  lp->data = Strdup(buffer);
  /* Construct new line part */
  lp = append_new_line_part(l);
  if (mf) {
    lp->lineno = ++mf->lineno;
  }

  return lp;
}

/* This routine does the hard work of reading in the Makefile.  It constructs the
 * Line list, and the LinePart lists within each Line object, and stores them in
 * the Makefile object with enough information to allow the position of any text
 * string in the original Makefile to be re-located within the file (e.g. so that
 * magic comments like "# Dynamic dependencies:" can be located for truncation.
 */
static Line *read_next_line(Makefile *mf)
{
  Line *line;
  LinePart *part;
  char *cp, *ep;
  int eol;
  char buffer[LINEBUFFERSIZE];

  /* cp is our roving pointer through the line buffer, ep is the high water mark */
  cp = buffer;
  ep = &buffer[sizeof(buffer)] - 1;

  /* eol holds 0 usually or the value of an EOL character just seen (\r or \n). This
   * is used so that \r\n and \n\r and \n and \r line termination is acceptable (or
   * a mixture!)  If eol is non-zero when a non-EOL character is read, then the eol
   * did indicate an end-of-line, so the character must be put back (into lookahead)
   * and the previous line committed, and a new line started.
   */
  eol = 0;

  if (mf->lookahead == EOF) {
    return NULL;
  }

  /* Start a new line and line part in that line */
  line = make_new_line(mf);
  part = make_new_line_part(line->nextpart, line->lineno);
  line->nextpart = &part->next;

  for (;;) {
    int c;

    if (mf->lookahead) {
      c = mf->lookahead;
      mf->lookahead = 0;
    }
    else {
      mf->file_size = ftell(mf->f);
      c = getc(mf->f);
    }
    *cp++ = c;

    if (c == EOF) {
      if (eol) {
        /* Pending EOL in buffer already */
        --cp;
      }
      *--cp = 0;
      mf->lookahead = c;
      break;
    }
    else if (c == '\n' || c == '\r') {
      /* First one of these we've seen?  Remember it and continue reading */
      if (eol == 0) {
        eol = c;
        continue;
      }

      if (eol == c) {
        /* A duplicate EOL - that means that the first EOL was a real EOL */
        mf->lookahead = c;
      }

      /* A two character EOL (or one with lookahead) - treat as '\n' */
      cp -= 2;
      *cp = 0;

      if (cp != &buffer[0] && cp[-1] == '\\') {
        /* Found a trailing \ on a line?  Overwrite \ with space, commit the part,
         * and start a new one (commit_line_part returns the new part)
         */
        cp[-1] = ' ';
        part = commit_line_part(mf, line, part, buffer);
        cp = buffer;
        continue;
      }

      break;
    }
    else {
      /* Normal character */
      if (eol) {
        /* We had stored a pending EOL which must be committed */

        /* Push this new character away and pretend we never read it */
        mf->lookahead = c;
        --cp;

        /* Point at the EOL character */
        --cp;

        /* Was the previous character a \ indicating a line join? */
        if (cp != &buffer[0] && cp[-1] == '\\') {
          /* Continuation line */
          cp[-1] = ' ';
          *cp = '\0';
          part = commit_line_part(mf, line, part, buffer);
          cp = buffer;
          eol = 0;
        }
        else {
          *cp = '\0';
          break;
        }
      }
      if (cp == ep) {
        /* Buffer overflow - commit this part of the line, and continue on */
        *--cp = '\0';
        part = commit_line_part(mf, line, part, buffer);
        --part->lineno;
        --mf->lineno;
        cp = buffer;
        *cp++ = c;
      }

      /* Translate all control characters to spaces */
      if (c < ' ') cp[-1] = ' ';
    }
  }

  /* Commit final fragment of the line */
  part->data = Strdup(buffer);
  ++mf->lineno;

  return line;
}

/* This routine will attempt to split up a Line into multiple LinePart objects
 * based on separator strings.  This is used to split the input into words.
 *
 * If why == rlr_keep_whitespace, whitespace groupings are retained.
 * If why == rlr_line_data, macro and target separations are made too
 *
 * This routine leaves the entry l->firstpart intact and allocates completely
 * new data structure which it overwrites into l->firstpart/l->nextpart
 */
void resplit_line(Line *l, resplit_line_reason why)
{
  Line *nl = clone_line_no_lineparts(l);
  LinePart *nlp = make_new_line_part(nl->nextpart, nl->lineno);
  LinePart *lp;
  char *cp, *sp;
  size_t space_count = 0;
  size_t char_count = 0;

  nlp->lineno = l->lineno;
  nl->nextpart = &nlp->next;

  for (lp = l->firstpart; lp; lp = lp->next) {
    for (sp = cp = lp->data; *cp; ++cp) {
      const char this_p = *cp;
      if (isspace(this_p)) {
        if (char_count) {
          *cp = '\0';
          nlp = commit_line_part(NULL, nl, nlp, sp);
          nlp->lineno = lp->lineno;
          *cp = this_p;
          sp = cp;
          char_count = 0;
        }
        ++space_count;
      }
      else {
        if (space_count) {
          if (why != rlr_words) {
            *cp = '\0';
            nlp = commit_line_part(NULL, nl, nlp, sp);
            nlp->lineno = lp->lineno;
            *cp = this_p;
          }
          sp = cp;
          space_count = 0;
        }
        ++char_count;
      }
    }

    /* Commit the last bit of the fragment */
    if (why == rlr_words && space_count) {
      if (nlp != nl->firstpart) {
        for (lp = nl->firstpart; lp->next != nlp; lp = lp->next) ;;
        lp->next = NULL;
        nl->nextpart = &lp->next;
      }
      else {
        nlp->data = Strdup("");
      }
    }
    else {
      nlp->data = Strdup(sp);
    }

    space_count = 0;
    char_count = 0;
  }

  l->firstpart = nl->firstpart;
  l->nextpart = nl->nextpart;
}

/* This routine is a special case of sanitising a line, where we want to flatten
 * a list generated by resplit_line(..., rlr_words) into a single string of single
 * space separated entries.  It returns the new buffer.  It does not destroy the
 * passed list.
 */
char *rejoin_words(LinePart *first)
{
  char *new_data, *ptr;
  size_t length;
  LinePart *lp;

  for (length = 0, lp = first; lp; lp = lp->next) {
    length += strlen(lp->data) + 1;
  }

  if (length == 0) {
    new_data = Strdup("");
  }
  else {
    ptr = new_data = safe_malloc(length);

    for (lp = first; lp; lp = lp->next) {
      if (lp != first) {
        *ptr++ = ' ';
      }
      strcpy(ptr, lp->data);
      ptr = strchr(ptr, '\0');
    }
  }

  return new_data;
}

/* This routine will deallocate a complete LinePart list, including freeing the
 * data blocks.
 */
void deallocate_linepart_list(LinePart *lp)
{
  while (lp) {
    LinePart *next;
    free(lp->data);
    next = lp->next;
    free(lp);
    lp = next;
  }
}

/* This routine will deallocate a line object and all its lineparts. */
void deallocate_line(Line *l)
{
  deallocate_linepart_list(l->firstpart);
  free(l);
}

/* Open a new makefile, filling in the handle in *ptr and returning it on success.
 * On failure to open the file, *ptr is the allocated handle and NULL is returned.
 */
static Makefile *open_makefile(Makefile **ptr, const char *filename)
{
  Makefile *mf = (*ptr = malloc(sizeof(**ptr)));
  if (mf) {
    mf->name = Strdup(filename);
    mf->lines = NULL;
    mf->nextline = &mf->lines;
    mf->lineno = 1;
    mf->next = NULL;
    mf->dynamic_dependencies_magic_comment = NULL;
    mf->lookahead = 0;
    mf->f = fopen(filename, "r");
    if (!mf->f) {
      fprintf(stderr, "%s: would not open\n", filename);
      mf = NULL; /* only a minor leak - caller could free this (and name) */
    }
  }

  return mf;
}

/* Used for debugging the Makefile reader */
static void display(Makefile *m)
{
  Line *l;
  printf("%s (%#06lx)\n", m->name, m->file_size);
  for (l = m->lines; l; l = l->next) {
    LinePart *lp;

    for (lp = l->firstpart; lp; lp = lp->next) {
      printf(" (%#6lx %4d) >>%s<<", l->file_position, lp->lineno, lp->data);
      if (lp != l->firstpart && !*lp->data) err_fail("Empty linepart");
    }
    putc('\n', stdout);
  }
}

/* Look for where any buffer overflows occurred, and rejoin the buffers.  Doing this
 * afterwards makes it easier to do as we know the sizes of the buffers completely.
 * We can recognise buffer overflows because they appear as LinePart objects with the
 * same line number appearing next to each other in a part list.
 *
 * This routine can deallocate some of the LineParts, but NEVER the first part.  It
 * is critical that it does not do this so that it can be called by routines for which
 * the first part is very important (the code in functions.c for example)
 */
void sanitise_line(Line *l, sanitise_line_reason why)
{
  LinePart *lp, *next_lp;
  const bool flatten = (why != slr_rejoin_line);

  for (lp = l->firstpart; lp && lp->next; lp = next_lp) {
    const bool line_numbers_match = (lp->lineno == lp->next->lineno);
    const bool strip_spaces = (!line_numbers_match && why == slr_flatten_leading_spaces);

    if (flatten || line_numbers_match) {
      const char *tail = lp->next->data + (strip_spaces ? strspn(lp->next->data, " ") : 0);
      const size_t tail_len = strlen(tail);
      const size_t lp_len = strlen(lp->data);
      char *data = Strdup_spare(lp->data, tail_len);
      LinePart *following;

      memcpy(data + lp_len, tail, tail_len);
      data[lp_len + tail_len] = '\0';
      following = lp->next->next;
      free(lp->data);
      free(lp->next->data);
      free(lp->next);
      lp->next = following;
      lp->data = data;
      next_lp = l->firstpart;
    }
    else {
      next_lp = lp->next;
    }
  }
}

static void sanitise(Makefile *m)
{
  Line *l;

  for (l = m->lines; l; l = l->next) {
    sanitise_line(l, slr_rejoin_line);
  }
}

Makefile *load_makefile(Makefile **ptr, const char *filename)
{
  Makefile *mf;

  if ((mf = open_makefile(ptr, filename)) != NULL) {
    while (read_next_line(mf)) ;;
    fclose(mf->f);
    sanitise(mf);
    if (amu_flags & DEBUGGING4) display(mf);
    mf->lineno = 0;
    mf->lookahead = 0;
    /* File is now ready to be parsed */
  }

  return mf;
}

#ifdef DEBUG
/* Test program - always looks for file Makefile in the current directory */
int amu_flags = 0;
int main(void)
{
  Makefile *mf;
  Line *l;

  load_makefile(&mf, "Makefile");

  for (l = mf->lines; l; l = l->next) {
    sanitise_line(l, slr_flatten);
  }

  display(mf);
  return 0;
}
#endif
