/*
 * AMU (macros.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

#ifndef macros_h_included
#define macros_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* Functions */

/* This routine performs any macro substitution on string '*old_data', returning true if it
 * changed the data in any way, false if it did not.  In ALL cases, it writes '*old_data'
 * with the new string pointer.  It does not free the old string (caller does that based
 * on the boolean result.  If 'functions_too' is true, then function calls are expanded
 * too - this is required to avoid substituting functions until the point of use - a little
 * noted detail in the GNU make documentation!
 */
extern bool macroise(char ** /*old data*/, bool functions_too);

/* Same as macroise, but frees *old_data if it has been changed */
extern bool macroise_free(char ** /*old data*/, bool functions_too);

/* A routine to explicitly expand a single macro (recursively).  This is used when we need
 * to be careful not to replace all the macros in the line as we are still attempting
 * to determine what is actually on the line.
 *
 * 'buffer' is a malloced buffer that will be deallocated and reallocated to contain
 * the answer.  'ms' is the address of the '$' character within buffer that we are
 * expanding.  functions *MUST* always be expanded.
 */
extern char *macroise_this(char *buffer, char *ms);


/* This utility routine is responsible for creating the list of arguments to ifeq/ifneq.
 * It recognises (,) and both types of quotes as delimiters.
 * The address of the character after the matching bracket character is stored in
 * after_args.  Note that we are permitted to destroy 'arg' in the process.
 */
extern LinePart *make_conditional_args(char *arg, char **after_args);

#ifdef __cplusplus
}
#endif
#endif
