/*
 * AMU (parse.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

#ifndef parse_h_included
#define parse_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* Some of the global implementation limits */
#define  NAMELEN        128
#define  MACRODEPTH      64     /* Maximum nesting of macro invocations */
#define  FUNCDEPTH       64     /* Maximum nesting of function invocations */
#define  CONDDEPTH        8     /* Maximum nesting of conditionals */
#define  CMDLENLIM      255     /* imposed by RISC OS / Arthur, worse luck */
#define  INCLUDEDEPTH    64     /* Limit on nesting of included sub-makefiles */

/* These are base size values for hash tables - they are not absolute limits on entries
 * but performance will suffer the smaller these values are.
 */
#define  NODETABSZ      509     /* hash table size for node table */
#define  TAGTABSZ       257     /* size of hash table for macros */

/* Next, some types for representing the node tree */

/* Makefiles contain five types of non-empty lines and this enumeration is used
 * to identify what is what within the makefile
 */
typedef enum {
  linetype_blank,
  linetype_pending,          /* not blank, but there's something there */
  linetype_macro_definition,
  linetype_dependency,
  linetype_command,
  linetype_directive
} LineType;

/* Return value for amu_is_directive() identifying which directive (if any) was found.
 */
typedef enum {
  not_a_directive,
  directive_include,
  directive_include_no_error,
  directive_override
} Directive;

/* Return value for amu_is_conditional() identifying which conditional (if any) was found.
 */
typedef enum {
  not_a_conditional,
  cond_ifeq,
  cond_ifneq,
  cond_ifdef,
  cond_ifndef,
  cond_else,
  cond_endif
} Conditional;

/* This is used to record the conditional state of parsing */
typedef enum {
  condmode_executing,             /* Executing these lines unconditionally */
  condmode_executing_if_branch,   /* An 'else' means we switch to waiting for endif */
  condmode_executing_else_branch, /* An 'endif' means we just pop the cond stack */
  condmode_waiting_for_else,      /* Waiting to find an 'else' at our nesting level */
  condmode_waiting_for_endif      /* Waiting to find an 'endif' at our nesting level */
} ConditionalMode;

/* Makefile represents the entire file.  Some members (lineno & lookahead) are
 * used in two places: firstly during the actual loading of the Makefile; secondly
 * during the parsing of the Makefile
 */
struct Makefile {
  Makefile *next;
  char *name;
  Line *lines;
  Line **nextline;
  Line *dynamic_dependencies_magic_comment;
  FILE *f;
  int lineno;
  int lookahead;
  long file_size;
};

struct Line {
  Line *next;
  Makefile *makefile;
  int lineno;
  long file_position;
  LinePart *firstpart;
  LinePart **nextpart;
};

struct LinePart {
  LinePart *next;
  int lineno;
  char *data;
};

/* A useful utility class - txt is array 4 because it rounds up the structure size
 * to a likely boundary, plus we must have enough space to append single characters
 * when using this structure for the include path list and vpath list.
 */
typedef struct StringList {
  struct StringList *next;
  char txt[4];
} StringList;

typedef struct Node Node;
typedef struct Link Link;
typedef struct MacroVar MacroVar;

/* A list of nodes */
struct Link {
  struct Link *link;
  struct Node *node;
};

/* A list of commands to be executed to bring a target up-to-date */
typedef StringList Cmd;

/* A list of included makefiles */
typedef StringList include_file;

/* Store the include path entries for resolving names of included Makefiles */
typedef StringList include_search_path;
extern include_search_path include_dirs;

/* Store the directories in a convenient list instead of an array - no more limit! */
typedef StringList DirList;
extern DirList *dirs;

/* Store the VPATH entries in a convenient list instead of an array - no more limit! */
typedef StringList VpathList;
extern VpathList *vpaths;
extern size_t longest_vpath;

/* The targets requested by the user */
typedef StringList TargetList;

/* The main structure used to track state during parsing.  The cond & file arrays are
 * stacks (indexed by idx and cond_idx respectively).  'state' holds the information
 * about the current file and line being processed.  The state structure must ONLY be
 * updated by set_next_line() and the functions it calls to ensure that the state is
 * kept consistent and the conditionals are processed properly.
 *
 * NOTE: watch initialisation of this type in amu.c if you change the fields in here
 */
typedef struct {
  int idx;
  int cond_idx;
  struct {
    Makefile        *mf;
    Line            *l;
  } state;
  ConditionalMode cond[CONDDEPTH];
  Makefile *file[INCLUDEDEPTH];
} Makefile_Stack;
extern Makefile_Stack in;

/* A node in the node tree, used to record details of a target and/or dependee.
 * Holds all the information required to process the target.
 */
struct Node {
  Node *next;
  int flags;
  TimeStamp time;
  Link *depends_on;
  Cmd  *cmds;
  char *name;
  char **file;
};

/* These are the flags for Node.flags: */
#define  PROCESSED        1     /* Set if a node is up to date */
#define  VISITED          2     /* Used by cycle-detection code */
#define  MARKED           4     /* --- ditto ------------------ */
#define  IS_COLONCOLON   16     /* marks a '::' rule node */
#define  HAS_CLONES      32     /* if multiple targets... */
#define  UPTODATE        64     /* when node is up to date... */
#define  IS_DEPENDED_ON 128     /* when something depends on the node... */
#define  CMDS_FAILED    256     /* if cmds, or dependee cmds, have failed */
#define  CMDS_EXECUTED  512     /* set if the node's cmds have been executed */
#define  HAS_TIMESTAMP 1024     /* set if node has timestamp */
#define  PHONY         2048     /* Set if a node represents a phony target */


/* The origin of a macro - keep the string table up to date with this list!! */
typedef enum {
  org_undefined,
  org_default,
  org_environment,
  org_environment_override,
  org_file,
  org_command_line,
  org_override,
  org_automatic
} macro_origin;
/* Changed macro_origin?  Have you updated the string table in parse.c too? */


/* A macro value.  expanded is true if the value has already been fully expanded
 * and false if it has not.  origin is where the def came from.  value is always
 * a malloced value (even if origin == org_undefined).
 */
struct MacroVar {
  bool expanded;
  macro_origin origin;
  char *value;
};

/* Some global variables */
typedef struct {
  Node *suffixes;
  Node *default_rule;
  Node *init_rule;
  Node *done_rule;
  Node *failed_rule;
  Node *phony;
} special_nodes;
extern special_nodes special_targets;

extern char *fname_suffixes;

/* Functions */
extern void build_graph(void);
extern void parse_initialise(void);
extern void expand_vpath(void);
extern void make_default_suffixes(void);
extern void push_include(char *name, const bool reporting_errors);
extern Node *find_node(char *);
extern Node *get_node_list(void);
extern Node *get_dot_node_list(void);
extern void make_depend(Node *target, Node *src);
extern MacroVar *lookup_macro(char *name);
extern char *strip_trailing_whitespace(char *cp);
extern char *strip_leading_whitespace(char *cp);

/* Returns the origin of macro name supplied.  This will be a read-only string constant */
extern const char *get_origin(char *);

/* This macro will enter a macro definition.  The origin is important as it will be used to
 * determine the return value of the origin function and whether the macro definition is
 * actually obeyed or not.  The 'value' is copied away safely.  'expanded' is stored so
 * that any future += assignments can be done correctly.
 */
extern void define_macro(char *name, const char *value, bool expanded, macro_origin org);

/* This function is called to switch the macro ranking system to be compatible with
 * old legacy versions of amu.  It is effected by the -E CLI option.
 */
extern void parse_reinstate_amu_5_00_org_rank(void);

#ifdef __cplusplus
}
#endif
#endif
