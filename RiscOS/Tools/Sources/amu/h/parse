/*
 * AMU (parse.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

#ifndef parse_h_included
#define parse_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* First, some shared utility functions */

/* Next some of the global constants */
#define  MAXDIRS        512     /* IDJ:18-Oct-94:bug-fix AQU-00041: was 100 */
#define  MAXVPATHS      100     /* VPATH elements */
#define  NODETABSZ      257     /* hash table size for node table */
#define  MAXTARGETS     100
#define  TAGTABSZ       127     /* size of hash table for macros */
#define  FALSE            0
#define  TRUE             1
#define  NAMELEN        128
#define  CMDLEN        2048
#define  MACROLEN     16384     /* IDJ:18-Oct-94:bug-fix AQU-00041: was 1024 */
#define  MACRODEPTH      64
#define  FUNCDEPTH       64
#define  CMDLENLIM      255     /* imposed by RISC OS / Arthur, worse luck */
#define  INCLUDEDEPTH    64     /* Limit on nesting of included sub-makefiles */
#define  SUBSTDEPTH       2     /* Maximum of one substitution in force at once */


/* Next, some types for representing the node tree */

typedef struct StringList {
  void *next;
  char txt[1];
} StringList;

typedef struct Node Node;
typedef struct Link Link;
typedef struct Cmd Cmd;
typedef struct MacroVar MacroVar;
typedef struct include_file include_file;

/* A list of nodes */
struct Link {
  struct Link *link;
  struct Node *node;
};

/* A list of commands to be executed to bring a target up-to-date */
struct Cmd {
  struct Cmd *next;
  char txt[1];
};

/* A list of included makefiles */
struct include_file {
  include_file *next;
  char *txt;
};

/* Store the include path entries for resolving names of included Makefiles */
typedef struct include_search_path {
  struct include_search_path *next;
  char path[4];
} include_search_path;
extern include_search_path include_dirs;

/* Handle inclusion of sub-makefiles */
typedef struct {
  int idx;
  struct {
    Makefile *mf;
    Line     *l;
  } state;
  Makefile *file[INCLUDEDEPTH];
} Makefile_Stack;
extern Makefile_Stack in;

/* A node in the node tree, used to record details of a target and/or dependee.
 * Holds all the information required to process the target.
 */
struct Node {
  Node *next;
  int flags;
  TimeStamp time;
  Link *depends_on;
  Cmd  *cmds;
  char *name;
  char **file;
};

/* These are the flags for Node.flags: */
#define  PROCESSED        1     /* Set if a node is up to date */
#define  VISITED          2     /* Used by cycle-detection code */
#define  MARKED           4     /* --- ditto ------------------ */
#define  IS_COLONCOLON   16     /* marks a '::' rule node */
#define  HAS_CLONES      32     /* if multiple targets... */
#define  UPTODATE        64     /* when node is up to date... */
#define  IS_DEPENDED_ON 128     /* when something depends on the node... */
#define  CMDS_FAILED    256     /* if cmds, or dependee cmds, have failed */
#define  CMDS_EXECUTED  512     /* set if the node's cmds have been executed */
#define  HAS_TIMESTAMP 1024     /* set if node has timestamp */
#define  PHONY         2048     /* Set if a node represents a phony target */


/* A macro value.  expanded is true if the value has already been fully expanded
 * and false if it has not.
 */
struct MacroVar {
  bool expanded;
  bool strong;
  char *value;
};

/* This structure represents a textual substitution e.g. ${VAR:%.o=%.od} */
typedef struct {
  char *pre;
  char *post;
  int pre_len;
  int post_len;
  int has_percents;
  char *pop;
} pattern_substitution;

/* The table of patterns is used to remember which patterns are in force. */
typedef struct {
  int idx;
  int pop_pending;
  pattern_substitution patterns[1];
} pattern_table;


/* Some global variables */
extern Node *suffixes;
extern Node *default_rule;
extern Node *init_rule;
extern Node *done_rule;
extern Node *failed_rule;
extern char *vpathbuf;
extern int n_dirs, n_vpaths;
extern char *fname_suffixes;
extern char **dirs, **vpaths;
extern int strong_definitions;

/* Functions */
extern void build_graph(void);
extern void parse_initialise(void);
extern void expand_vpath(void);
extern void make_default_suffixes(void);
extern void push_include(char *name, const bool reporting_errors);
extern Node *find_node(char *);
extern Node *get_node_list(void);
extern Node *get_dot_node_list(void);
extern void make_depend(Node *target, Node *src);
extern MacroVar *lookup_macro(char *name);
extern char *strip_trailing_whitespace(char *cp);
extern char *strip_leading_whitespace(char *cp);


/* Functions in amu.c */
extern char *real_file_name(char s[], char *buf, int maxlen);

#ifdef __cplusplus
}
#endif
#endif
