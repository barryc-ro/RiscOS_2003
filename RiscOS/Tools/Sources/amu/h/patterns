/*
 * AMU (patterns.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

#ifndef patterns_h_included
#define patterns_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* This structure represents a textual substitution e.g. ${VAR:%.o=%.od} would
 * be represented by two of these structures: one for the LHS, one for the RHS.
 * The lengths are cached for speed.
 */
typedef struct {
  char *data;
  char *pre;
  char *post;
  int pre_len;
  int post_len;
} pattern_substitution;

/* Functions */

/* Free up any extra member associated with 'p' - ** p is NOT freed! ** */
extern void patterns_destroy_substitution(pattern_substitution *p);

/* Analyse 'p' as a search or replacement string for a patsubst-style
 * pattern replacement.  'pd' is filled in with all the details required
 * by other patterns_* functions to process the pattern.  Any data allocated
 * by this routine will be freed by passing the pattern to the above
 * function.
 */
extern void patterns_analyse_pattern(char *p, pattern_substitution *pd);

/* This function applies the substitution to each item in the LinePart
 * list 'lp'.  Note that each entry in the list must be a single word.
 * (ie. probably ought to have been created by resplit_line(..., rlr_words))
 * The data pointers in each entry may be updated - old data pointers will
 * be freed.
 */
extern void patterns_process_line_part_list(LinePart *lp,
  pattern_substitution *search, pattern_substitution *replace);

/* This routine is the core processor for the pattern matcher - it takes a pattern
 * and a string to match.  If the string satisfies the pattern, the length of the stem
 * is stored in 'stem_length' and the function returns true (and p->pre_len is the
 * offset in 's' of the stem).
 *
 * If the string does not satisfy the pattern, then the function returns false.
 */
extern bool patterns_match_word(char *s, pattern_substitution *p, int *stem_length);

#ifdef __cplusplus
}
#endif
#endif
