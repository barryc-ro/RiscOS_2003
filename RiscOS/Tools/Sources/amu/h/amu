/*
 * AMU (amu.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

#ifndef amu_h_included
#define amu_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* These are the core types used to represent makefiles */
typedef struct Makefile Makefile;
typedef struct LinePart LinePart;
typedef struct Line Line;

/* A global variable holding the character representing a directory path separator */
extern const int dir_sep;

/* amu_flags bitfield values: some are option flags, others are state, some are both */
enum {
  amuflag_TOUCHING             = (1<<0) ,   /* amu -t */
  state_HAS_CYCLES             = (1<<1) ,   /* Set if a cyclic dependency is detected */
  IGNORE_RC                    = (1<<2) ,   /* Amu -i, .IGNORE */
  CONTINUE                     = (1<<3) ,   /* Amu -k */
  NO_ACTION                    = (1<<4) ,   /* Amu -n */
  SILENT                       = (1<<5) ,   /* Amu -s, .SILENT */
  amuflag_UNIX_NAMES           = (1<<6) ,   /* set by .UNIXNAMES - doesn't do anything!! */
  state_CMDS_OUTPUT            = (1<<7) ,   /* set if any cmds have been sent to 'out' */
  STATE_REASONS                = (1<<8) ,   /* State reasons without -n */
  amuflag_ENVIRONMENT_OVERRIDE = (1<<9) ,   /* Environment variables override file macros */

  /* The debugging values must be last, well out of the way */
  DEBUGSHIFT                   = 24,
  DEBUGGING                    = (1<<24),   /* set if debugging */
  DEBUGGING2                   = (1<<25),   /* very detailed debugging */
  DEBUGGING3                   = (1<<26),   /* very very detailed debugging */
  DEBUGGING4                   = (1<<27),   /* etc. */
  DEBUGGING5                   = (1<<28),   /* etc. */
  DEBUGGING6                   = (1<<29),   /* etc. */
  DEBUGGING7                   = (1<<30)    /* etc. */
};

#pragma check_printf_formats
extern void amu_debug(int, const char *, ...);
extern void amu_err_report(const char *fmt, ...);
extern void amu_err_fail(const char *fmt, ...);
#pragma -v0

/* Generates the real filename for a node */
extern char *real_file_name(char s[], char *buf, int maxlen);

#ifdef __cplusplus
}
#endif
#endif
