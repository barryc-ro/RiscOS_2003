/*
 * AMU (functions.h)
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

#ifndef functions_h_included
#define functions_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* The opaque type representing a function implementation */
typedef struct function_table function_table;

/* Functions */

/* This routine looks up the specified name and returns an opaque
 * pointer identifying the function to the other APIs listed here
 * or NULL if the name is unknown.
 */
extern const function_table *fn_lookup(char *name);

/* Invokes the specified function with the given parameter list.
 * the LinePart list will be freed by the caller - the callee
 * may, however, modify the list provided it is consistent on
 * exit.
 */
extern char *fn_execute(LinePart *, const function_table *);

/* Return the minimum and maximum number of arguments that a
 * function can accept (for simple validations)
 */
extern int fn_minargs(const function_table *);
extern int fn_maxargs(const function_table *);

/* Return true if the function always wants all its parameters to
 * have been expanded through the macro expansion engine, or
 * false if the function will do that itself (if necessary).  This
 * is used by 'if' to avoid expanding both then and else clauses.
 */
extern bool fn_macroise_parameters(const function_table *);

/* Return the name of the function - primarily for debugging */
extern char *fn_name(const function_table *);

/* Lookup a numeric parameter in the current call() expansion */
extern MacroVar *fn_parameter(int);

#ifdef __cplusplus
}
#endif
#endif
