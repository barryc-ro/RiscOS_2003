/*
  Title:        Chunk File Decoder
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision$  LDS 13-Jul-89
*/

#define DEBUGGING 0

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>


#include "kernel.h"
#include "chunkfls.h"
#include "chunkfmt.h"
#include "host.h"
#include "err.h"
#include "hash.h"

#include "VersionNum"
#define  DATE       Module_Date
#define  VSN        Module_FullVersion
#define  SELF       "deccf"
#define  BRIEF      "decode Acorn Chunk Files"
#define  OK         0
#define  BAD        1

static int deccf(f, name)
FILE *f;
char *name;
{
  int j, size;
  ChunkFile *cf, cf_rec;
  cf_header *h;
  cf_entry *cfe;
  char buf[CF_KEYSIZE+1];

  cf = cf_open(f, &cf_rec);
  size = (int) cf_headersize(cf);
  h = cf_readheader(cf, malloc(size), size);

  if (h == NULL) {
    err_report("%s is not a chunk file", name);
    return BAD;
  }

  printf("\nChunk file %s, max chunks = %lu, used chunks = %lu\n\n",
         name, h->cf_maxchunks, h->cf_numchunks);

  buf[CF_KEYSIZE] = 0;
  for (j = 0, cfe = h->cf_chunks;  j < h->cf_maxchunks;  ++j, ++cfe) {
    if (cfe->cfe_offset > 0) {
      strncpy(buf, cfe->cfe_key, CF_KEYSIZE);
      printf("        %-8s    offset = %7lu    size = %7lu\n",
             buf, cfe->cfe_offset, cfe->cfe_size);
    }
  }
  free(h);
  return OK;
}

static void handle_escape(int signo)
{
  signal(signo, handle_escape);
  exit(EXIT_FAILURE);
}

static void give_help()
{
  fprintf(stderr, "\n%s vsn %s [%s] - %s\n", SELF, VSN, DATE, BRIEF);
  fprintf(stderr, "\n%s file [file...]\n", SELF);
  fprintf(stderr, "\nExample:-\n");
  if (host_system() == _kernel_SPRINGBOARD) {
    fprintf(stderr, "      %s myprog.aof test.o\n", SELF);
  } else {
    fprintf(stderr, "      %s aof.myprog o.test\n", SELF);
  }
  exit(EXIT_SUCCESS);
}

int main(argc, argv)
int argc;
char *argv[];
{
  int j, nf, rc;
  char *arg;
  FILE *cf;

  signal(SIGINT, handle_escape);
  (void) host_init();
  err_init(SELF);

  /* parse help or identify args */
  for (j = 1;  j < argc;  ++j) {
    arg = argv[j];
    if (hash_cistrcmp("-help", arg) == 0 || hash_cistrcmp("-h", arg) == 0)
      give_help();
  }

  nf = 0;
  rc = OK;
  for (j = 1;  j < argc;  ++j) {
    arg = argv[j];
    if (arg[0] != '-') {
      cf = fopen(arg, "rb");
      if (cf == NULL) err_report("can't open %s", arg);
      else {
        if (deccf(cf, arg) != OK) rc = BAD;
        fclose(cf); ++nf;
      }
    } else
      err_report("unrecognised flag option %s (ignored)", arg);
  }
  if (nf == 0) err_fail("missing file argument(s)");
  return rc;
}
