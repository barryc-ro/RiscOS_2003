/*
 * objsize: print the code, data and debug sizes of an AOF object module
 *          or ALF library module.
 * Copyright (C) Acorn Computers Ltd., 1988.
 */

#include <stdio.h>
#include <signal.h>
#include <kernel.h>
#include <stdlib.h>
#include <string.h>

#include "chunkfmt.h"
#include "chunkfls.h"
#include "aof.h"
#include "wholefls.h"
#include "maxalloc.h"
#include "libflfmt.h"
#include "host.h"
#include "err.h"
#include "hash.h"

#include "wildcard.h"
#include "VersionNum"

#define  MAXSIZE      0x100000
#define  SELF         "objsize"
#define  VSN          Module_FullVersion         /* /107 */
#define  BRIEF        "shows code/data/debug sizes of ALF/AOF files"
#ifdef   Module_Date
#define  DATE         Module_Date
#elif defined(__STDC__)
#define  DATE         __DATE__
#else
#define  DATE         "Apr  9 1991"
#endif
#define  OK           0
#define  BAD          1

#define  YES          1
#define  NO           0

#ifndef int32
#  define int32 long int
#endif

static char *object;
static int32 object_size, total_code, total_data, total_debug;
static int32 total_lib_code, total_lib_data, total_lib_debug;

static int process_member(lib_cfh, e)
cf_header *lib_cfh;
lib_direntry *e;
{
  int32 code, data, debug;
  int j, idx;
  aof_header *h;
  aof_area   *a;
  cf_header *cfh;
  char *name, *member;

  name = e->lib_entry;
  member = object + (lib_cfh->cf_chunks[e->lib_chunkidx].cfe_offset);
  cfh = (cf_header *)member;

  if (cfh->cf_magic != CF_MAGIC) {
    err_report("member %lu (%s) is not a chunk file", e->lib_chunkidx, name);
    return BAD;
  }

  idx = cf_index(cfh, OBJ_HEAD);
  if (idx < 0) {
    err_report("can't find OBJ_AREA chunk of member %lu (%s)", e->lib_chunkidx, name);
    return BAD;
  }

  h = (aof_header *) (member + cfh->cf_chunks[idx].cfe_offset);
  code = data = debug = 0;
  for (j = 0, a = h->aof_areas;  j < h->aof_nareas;  ++j, ++a) {
    if (a->area_attributes & AOF_CODEAT) {
      code += a->area_size;
    } else if (a->area_attributes & AOF_DEBUGAT) {
      debug += a->area_size;
    } else if (!(a->area_attributes & AOF_COMREFAT)) {
      data += a->area_size;
    }
  }
  if (strlen(name) > 30)
    printf("%s -\n%30s", name, "");
  else
    printf("%-30s", name);
  printf("%12lu%12lu%12lu\n", code, data, debug);
  total_lib_code += code;  total_lib_data += data;  total_lib_debug += debug;
  return OK;
}

static int last_was_object;

static int process(file)
char *file;
{
  int32 size, code, data, debug;
  cf_header *cfh;
  int j, idx;
  aof_header *h;
  aof_area   *a;
  char *lib_diry;
  lib_direntry *e;

  size = wf_filesize(file);
  if (size <= 0) {
    err_report("file %s doesn't exist?", file);
    return BAD;
  }
  if (size > object_size) {
    err_report("not enough memory to process %s", file);
    err_report("(need %lu bytes, but only got %lu bytes)", size, object_size);
    return BAD;
  }
  if (wf_load(file, object, size) != 0) {
    err_report("failed to load %s", file);
    return BAD;
  }
  cfh = (cf_header *)object;
  if (cfh->cf_magic == CF_MAGIC) {/* chunk file */
    if ((idx = cf_index(cfh, LIB_DIRY)) != -1) { /* library file */
      int rc = OK;
      lib_diry = object + cfh->cf_chunks[idx].cfe_offset;
      size = cfh->cf_chunks[idx].cfe_size;
      total_lib_code = total_lib_data = total_lib_debug = 0;
      last_was_object = NO;
      printf("\nLibrary file %s\n", file);
      printf("Library member                   code-size   data-size   debug-size\n");
      for (idx = 0;  idx < 65536; ++idx) {
        e = lib_libentry(lib_diry, size, idx, IGNORE_VOID_ENTRIES);
        if (e == NULL) break;
        if (process_member(cfh, e) != OK) rc = BAD;
      }
      printf("%-30s%12lu%12lu%12lu\n", "Library Total:",
             total_lib_code, total_lib_data, total_lib_debug);
      total_code += total_lib_code;
      total_data += total_lib_data;
      total_debug += total_lib_debug;
      return rc;
    } else if ((idx = cf_index(cfh, OBJ_HEAD)) != -1) { /* object file */
      if (!last_was_object) {
          printf("\nObject file                      code-size   data-size   debug-size\n");
          last_was_object = YES;
      }
      h = (aof_header *) (object + cfh->cf_chunks[idx].cfe_offset);
      code = data = debug = 0;
      for (j = 0, a = h->aof_areas;  j < h->aof_nareas;  ++j, ++a) {
        if (a->area_attributes & AOF_CODEAT) {
          code += a->area_size;
        } else if (a->area_attributes & AOF_DEBUGAT) {
          debug += a->area_size;
        } else if (!(a->area_attributes & AOF_COMREFAT)) {
          data += a->area_size;
        }
      }
      if (strlen(file) > 30)
        printf("%s -\n%30s", file, "");
      else
        printf("%-30s", file);
      printf("%12lu%12lu%12lu\n", code, data, debug);
      total_code += code;  total_data += data;  total_debug += debug;
      return OK;
    }
  }

  err_report("%s isn't an AOF or library file\n", file);
  last_was_object = NO;
  return BAD;
}

static int nf;

static int call_process(char *name, void *context, dir_entry entry) {
  entry = entry; context = context;
  nf++;
  return process(name) == BAD ? -1 : 0;
}

static void handle_escape(int signo)
{
  signal(signo, handle_escape);
  exit(EXIT_FAILURE);
}

static void give_help()
{
  fprintf(stderr, "\n%s vsn %s [%s] - %s\n", SELF, VSN, DATE, BRIEF);
  fprintf(stderr, "\n%s file [file...]  (file may contain wildcard characters)\n", SELF);
  fprintf(stderr, "\nExamples:-\n");
  if (host_system() == _kernel_SPRINGBOARD) {
    fprintf(stderr, "      %s ansilib.o\n", SELF);
    fprintf(stderr, "      %s myobject.o test1.o lib1.o\n", SELF);
  } else {
    fprintf(stderr, "      %s o.ansilib\n", SELF);
    fprintf(stderr, "      %s o.myobject o.test1 o.lib1\n", SELF);
  }
  exit(EXIT_SUCCESS);
}

int main(argc, argv)
int argc;
char *argv[];
{
  int j, rc;
  char *arg;

  signal(SIGINT, handle_escape);
  (void) host_init();
  err_init(SELF);

  /* parse help or identify args */
  for (j = 1;  j < argc;  ++j) {
    arg = argv[j];
    if (hash_cistrcmp("-help", arg) == 0 || hash_cistrcmp("-h", arg) == 0)
      give_help();
  }

  object_size = MAXSIZE;
  object = maxalloc(&object_size);
  if (object == NULL) err_fail("failed to get any working memory");

  nf = 0;
  rc = OK;
  last_was_object = NO;
  for (j = 1;  j < argc;  ++j) {
    arg = argv[j];
    if (arg[0] != '-') {
      if (!wild_carded(arg)) {
        nf++;
        if (process(arg) != OK) rc = BAD;
      } else {
        if (wild_enumerate(arg, call_process, 0, WILD_LEAF_MATCHES_ONLY) < 0)
            rc = BAD;
      }
    } else err_report("unrecognised flag option %s (ignored)", arg);
  }
  if (nf == 0) err_fail("missing file argument(s)");
  else if (nf > 1) {
    printf("\n%-24s%12lu%12lu%12lu\n", "Total (of all files):", total_code, total_data, total_debug);
  }
  return rc;
}
