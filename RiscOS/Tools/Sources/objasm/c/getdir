/* -> getdir.c
 * Title: Handle Get and related directives
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#ifdef __GNUC__
#  include <unistd.h>
#endif


#include "options.h"
#ifdef BINARY_INCLUDES
#  include "code.h"            /* added by NRaine */
#endif


#include "asm.h"
#include "condasm.h"
#include "constant.h"
#include "errors.h"
#include "expr.h"
#include "getdir.h"
#include "getline.h"
#include "globvars.h"
#include "cli.h"
#include "listing.h"
#include "macrotyp.h"
#include "nametyp.h"
#include "store.h"
#include "message.h"

#include "hostdep.h"

static char mnoteLine[MaxLineLength+1];

void GetDir(char *line, CARDINAL *lineIndex)
{
  StructureStackElement s;
#ifdef DEBUG
  fprintf(stderr,"GetDir called\n");
#endif
  if (exception) return;
  s.type = GetSSET;
  s.u.file.inputMode = fileReadMode;
  switch (s.u.file.inputMode) {
    case WholeFileLoad:
    s.u.file.u.storePointer = pointerInFile;
    s.u.file.fileStart = fileStore;
    s.u.file.fileLen = fileSize;
    break;

    case ByteStream:
    s.u.file.u.fileOffset = (CARDINAL)ftell(inputStream);
    inputStreamExists = FALSE;
    fclose(inputStream);
#ifdef DEBUG
    fprintf(stderr,"Closed %s 1\n",currentFileName);
#endif
  }; /* case */
  s.u.file.fileName.length = strlen(currentFileName);
  s.u.file.fileName.key = (char *) mymalloc((size_t)(s.u.file.fileName.length) + 1);
  strcpy(s.u.file.fileName.key, currentFileName);
  s.u.file.lineNumber = lineNumber;
  if (!Stack(s)) {
    free(s.u.file.fileName.key);
    exception = FileNotFound;
    return;
  }; /* if */
  ListLine();
  /*Now go into the new files*/
#ifdef HOST_IS_RISCOS
  /* IDJ: 11-Jan-95: bug-fix AQU-00038 - allow path vars in GETs (yuk!!) */
  {
      char g[MaxLineLength+1];
      char *pointer = (line + *lineIndex);
      int index = 0;

      while (!isWhiteSpace(*pointer) && *pointer != CR) g[index++] = *(pointer++);
      g[index] = NULL;
      if (strchr(g, ':') != NULL)
      {
          strcpy(currentFileName, g);
      }
      else
          CopyFileName(line + *lineIndex);
  }    
#else
  CopyFileName(line + *lineIndex);
#endif
  while (line[*lineIndex] != CR) (*lineIndex)++;
  do {} while (!(((pass == 1) && P1File(TRUE)) ||
               ((pass == 2) && P2File(TRUE))));
  /*Now go back to the old file*/
  (void) Unstack(&s);
  if (s.type != GetSSET) Report(FatalError,getdir_getdir_struct_mismatch);
  fileReadMode = s.u.file.inputMode;
  memcpy(currentFileName, s.u.file.fileName.key,
      (size_t)(s.u.file.fileName.length));
  currentFileName[s.u.file.fileName.length] = 0;
  set_error_filename(currentFileName);
  /*And throw away the space*/
  free(s.u.file.fileName.key);
  /*Avoid stack thinking there's a left over GET*/
  s.type = ConditionalSSET;
  (void) Stack(s);
  (void) Unstack(&s);
  switch(s.u.file.inputMode) {
    case WholeFileLoad:
    pointerInFile = s.u.file.u.storePointer;
    fileStore = s.u.file.fileStart;
    fileSize = s.u.file.fileLen;
    break;

    case ByteStream:
#ifdef DEBUG
    fprintf(stderr,"Trying to reopen %s\n",currentFileName);
#endif
    inputStream = fopen(currentFileName, "r");
    inputStreamExists = TRUE;
    if ((inputStream == NULL) || ferror(inputStream)) {
      Report(AsmError,getdir_getdir_unreopenable,currentFileName);
      exception = FileNotFound;
      return;
    };
    fseek(inputStream, s.u.file.u.fileOffset, SEEK_SET);
  }; /* case */
  lineNumber = s.u.file.lineNumber;
  inFile = TRUE;
  if (exception == FileNotFound)
  { Report(AsmError,getdir_getdir_bad_get_or_inc);
    exception = None;
  }
} /* End GetDir */

void WendDir(void)
{
  StructureStackElement s;

  if (!Unstack(&s)) return;
  if (s.type != WhileSSET) {
    if (s.type != ConditionalSSET) (void) Stack(s);
    Report(AsmError,errors_StructErr);
    exception = StackErr;
    return;
  }

  if (notSkipping) {
    lineNumber = s.u.whileEl.lineNumber;
    if ((fileReadMode == WholeFileLoad) || (macroLevel != 0))
      pointerInFile = s.u.whileEl.pointer;
    else
      fseek(inputStream, (int)s.u.whileEl.pointer, SEEK_SET);
  } else {
    notSkipping = s.u.whileEl.notSkipping;
    nextListState = s.u.whileEl.state;
    if (((1 << ListPC) & nextListState) && !((1 << ListPC) && listStatus)) {
      listStatus |= 1 << ListPC;
      ListLineNumber();
    }
  }
}

void CheckStack(void)
/* Check that END and LNK don't occur inside conditionals */
{ StructureStackElement s;
  if (GetTopOfStack(&s) && (s.type == WhileSSET || s.type == ConditionalSSET))
      Report(AsmError, getdir_checkstack_unmatched);
}

BOOLEAN MexitDir(void)
{
  StructureStackElement s;

  if (macroLevel == 0) {
    Report(AsmError,errors_NoMacro);
    return TRUE;
  }
  do {
    if (!Unstack(&s)) return TRUE;
    switch (s.type) {
      case ConditionalSSET:
      notSkipping = s.u.condEl.notSkipping;
/*      else Report(FatalError,getdir_mexitdir_missing_if); */
      break;

      case WhileSSET:
      notSkipping = s.u.condEl.notSkipping;
/*      else Report(FatalError,getdir_mexitdir_missing_while); */
      break;

      case MacroSSET:
      break;

      case GetSSET:
      Report(FatalError,getdir_mexitdir_extra_get);

    }
    if (s.type == MacroSSET) break; /* Subtle difference in meaning for EXIT */
  } while (1);

  lineNumber = s.u.macro.lineNumber;
  nextListState = s.u.macro.state;
  macroLevel--;
  if ((macroLevel != 0) || (s.u.macro.inputMode == WholeFileLoad))
    pointerInFile = s.u.macro.u.storePointer;
  ExitMacro();
  if (!((1 << ListMendPC) & listStatus)) CancelLineList();
  return FALSE;
}

BOOLEAN MendDir(void)
{
  StructureStackElement s;

  if (macroLevel == 0) {
    Report(AsmError,errors_NoMacro);
    return TRUE;
  }
  if (!Unstack(&s)) return TRUE;
  if (s.type != MacroSSET) {
    Report(AsmError,errors_BadMEND);
    while (s.type != MacroSSET)
    {   if (s.type == WhileSSET)
            notSkipping = s.u.whileEl.notSkipping;
        else if (s.type == ConditionalSSET)
            notSkipping = s.u.condEl.notSkipping;
        (void) Unstack(&s);
    }
  }
  lineNumber = s.u.macro.lineNumber;
  nextListState = s.u.macro.state;
  macroLevel--;
  if ((macroLevel != 0) || (s.u.macro.inputMode == WholeFileLoad))
    pointerInFile = s.u.macro.u.storePointer;
  ExitMacro();
  if (!((1 << ListMendPC) & listStatus)) CancelLineList();
  return FALSE;
}

#ifdef BINARY_INCLUDES

/**** Added by NRaine ****/

FILE *OpenBinFile(char *pointer)
{
  CARDINAL index = 0;
  char tempFileName[MaxLineLength+1];
  FILE * input;

  while (!isWhiteSpace(*pointer) && (*pointer != CR)) {
    tempFileName[index++] = *(pointer++);
  };
  tempFileName[index] = NULL;

  input = fopen(tempFileName, "r");

  if ((input == NULL) || ferror(input)) {
    char buffer[MaxLineLength+50];
    sprintf(buffer,getdir_openbinfile_not_found,tempFileName);
    Report(AsmError,buffer);
    exception = FileNotFound;
    return NULL;
  }

  return(input);
} /* End OpenBinFile */

void GetBin1(char *line, CARDINAL *lineIndex)
{
  FILE *input = OpenBinFile(line + *lineIndex);
  if (input==NULL) return;
  while (line[*lineIndex] != CR) (*lineIndex)++;

  fseek(input, 0, SEEK_END);
  programCounter += (CARDINAL)ftell(input);
  fclose(input);
}

#define BinBufferSize 4096

void GetBin2(char *line, CARDINAL *lineIndex)
{
  char binbuffer[BinBufferSize];
  FILE *input = OpenBinFile(line + *lineIndex);
  int fileptr,filesize;

  if (input==NULL) return;
  while (line[*lineIndex] != CR) (*lineIndex)++;

  fseek(input, 0, SEEK_END);
  filesize = (int)ftell(input);
  fseek(input, 0, SEEK_SET);

  for (fileptr=0;fileptr<filesize;fileptr+=BinBufferSize) {
    register int size = filesize-fileptr;
    if (size > BinBufferSize) size = BinBufferSize;
    fread(binbuffer, 1, size, input);
    CodeBuffer(binbuffer,size);
  }
  fclose(input);
}
#endif /* BINARY_INCLUDES */

/* End getdir.c */
