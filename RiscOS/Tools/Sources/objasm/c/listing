/* -> listing.c
 * Title:  Pretty listing stuff
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include "hostdep.h"
#include "constant.h"
#include "errors.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#include "listing.h"
#include "nametyp.h"
#ifndef AAsm
#  include "aofvars.h"
#endif
#include "p1line.h"
#include "message.h"
#include "vars.h"
#include <stdio.h>
#include <string.h>

typedef int Hex; /* [0..15] */

/*
  newLine used for options to print command,
  and also buffered output line for printing
*/
static char newLine[2*MaxLineLength+1];
static CARDINAL linePosition;

#define PCStart       6
#define CodeStart     (PCStart + 9)
#define TextStart     (CodeStart + 9)
#define OpcodeStart   (TextStart + 8)
#define OperandStart  (OpcodeStart + 8)
#define CommentStart  (OperandStart + 12)
#define MaxFields     6

static void PutCh(char ch)
{
  if (ch != 0) newLine[linePosition++] = ch;
}

static void Tab(CARDINAL position)
{
  while (linePosition < position) PutCh(Space);
}

void ListLine(void)
{
  if (printState && ((1 << ListPC) & listStatus)) PrintLine();
}

static void WriteComment(CARDINAL *i)
{
  CARDINAL tempPosition,
           length;
#ifdef AAsm
  if (currentLinePointer[*i] != CommentSymbol)
#else
  if (((currentLinePointer[*i] != CommentSymbol) &&
       (input_style == ObjAsmIS)) ||
      ((currentLinePointer[*i] != AtSymbol) &&
       (input_style == AsIS)))
#endif
  { /*This is the silly line format case*/
    while (currentLinePointer[*i] != CR) PutCh(currentLinePointer[(*i)++]);
    PutLine();
  } else {
    if (linePosition <= TextStart) tempPosition = TextStart;
    else {
      tempPosition = CommentStart;
      PutCh(Space);
    }; /* if */
    Tab(tempPosition);
    if (linePosition > CommentStart) {
      length = 0;
      while (currentLinePointer[*i + length] != CR) length++;
      if ((linePosition + length > maxCols) &&
        (tempPosition + length <= maxCols)) {
        PutLine();
        Tab(CommentStart);
      }; /* if */
    }; /* if */
    do {
      while (linePosition < maxCols) {
        if (currentLinePointer[*i] == CR) break;
        PutCh(currentLinePointer[(*i)++]);
      }; /* while */
      if (linePosition < maxCols) break;
        /* The previous break was meant to leave the loop */
      PutLine();
      Tab(tempPosition);
    } while (1);
  }
} /* End WriteComment */

static void WriteField(CARDINAL position, BOOLEAN allowSpace,
                       CARDINAL *i)
{
  CARDINAL spaces;
  BOOLEAN  quoted = FALSE;
  /*Get to right position*/
  Tab(position);
  while ((!quoted && (!TermCheck(currentLinePointer[*i]) ||
    (allowSpace && (isWhiteSpace(currentLinePointer[*i]))))) ||
    (quoted && (currentLinePointer[*i] != CR))) {
    if (isWhiteSpace(currentLinePointer[*i])) {
      spaces = 0;
      while (isWhiteSpace(currentLinePointer[*i + spaces])) spaces++;
      if ((currentLinePointer[*i + spaces] == CR) || (!quoted &&

#ifdef AAsm
        (currentLinePointer[*i + spaces] == CommentSymbol)))
#else
        (((currentLinePointer[*i + spaces] == CommentSymbol) &&
          (input_style == ObjAsmIS)) ||
         ((currentLinePointer[*i + spaces] == AtSymbol) &&
          (input_style == AsIS)))))
#endif
      { i += spaces;
        return;
      }
      do PutCh(currentLinePointer[(*i)++]);
      while (isWhiteSpace(currentLinePointer[*i]));
    } else {
      PutCh(currentLinePointer[*i]);
      if (currentLinePointer[*i] == Quotes) quoted = !quoted;
      (*i)++;
    }; /* if */
  }; /* while */
  while (isWhiteSpace(currentLinePointer[*i])) (*i)++;
} /* End WriteField */

void PrintLine(void)
{
  CARDINAL i = 0;
  char *pendingDiagnostic;
  if (!linePrinted) {
    if (TextStart >= maxCols) {
      /*This is the silly line format case*/
      if (linePosition > TextStart) PutLine();
      else Tab(TextStart);
      while (currentLinePointer[i] != CR) PutCh(currentLinePointer[i++]);
    } else {
      /*This is the sensible case*/
      if (linePosition > TextStart && !isWhiteSpace(currentLinePointer[i]))
        PutLine();
      do {
#ifdef AAsm
        if ((currentLinePointer[i] == CommentSymbol)
#else
        if (((currentLinePointer[i] == CommentSymbol) &&
             (input_style == ObjAsmIS)) ||
            ((currentLinePointer[i] == AtSymbol) &&
             (input_style == AsIS))
#endif
          || (OpcodeStart >= maxCols)) break;
        /*Write out the label*/
        WriteField(TextStart, FALSE, &i);
        if ((currentLinePointer[i] == CR) ||
#ifdef AAsm
          (currentLinePointer[i] == CommentSymbol)
#else
          (((currentLinePointer[i] == CommentSymbol) &&
            (input_style == ObjAsmIS)) ||
           ((currentLinePointer[i] == AtSymbol) &&
            (input_style == AsIS)))
#endif
          || (OperandStart >= maxCols)) break;
        /*We have an opcode*/
        if (linePosition >= OpcodeStart) PutLine();
        WriteField(OpcodeStart, FALSE, &i);
        if ((currentLinePointer[i] == CR) ||
#ifdef AAsm
          (currentLinePointer[i] == CommentSymbol)
#else
          ((currentLinePointer[i] == CommentSymbol) ||
           ((currentLinePointer[i] == AtSymbol) &&
            (input_style == AsIS)))
#endif
          || (CommentStart >= maxCols)) break;
        /*We have an operand*/
        if (linePosition >= OperandStart) PutLine();
        WriteField(OperandStart, TRUE, &i);
      } while (1);
      if (currentLinePointer[i] != CR) WriteComment(&i);
    }; /* if */
    PutLine();
  }; /* if */
  linePrinted = TRUE;
  linePosition = 0;
  if ((pendingDiagnostic = PendingDiagnostic()) != NULL)
    lprintf("%s",pendingDiagnostic);
#ifdef HOST_IS_RISCOS
  if (PollEscape()) abortFlag = TRUE;
#endif
} /* End PrintLine */

static void PutChs(char *chs)
{
  while (*chs != 0) PutCh(*chs++);
}

void ListLineNumber(void)
{
  if (printState && ((1 << ListPC) & listStatus)) PrintLineNumber();
}

void PrintLineNumber(void)
{ char buf[8];
  if (linePosition > 0) PutLine();
  sprintf(buf, "%5lu ", lineNumber);
  PutChs(buf);
}

static void PutHexCh(Hex hex)
{
  PutCh((hex >= 10) ? hex - 10 + 'A' : hex + '0');
}

void ListRegValue(CARDINAL reg)
{
  if (((1 << ListPC) & listStatus) && printState) {
    PutChs("       ");
    PutHexCh((Hex)reg);
    PutCh(Space);
  }
}

void ListAddress(void)
{
  if (printState && ((1 << ListPC) & listStatus)) PrintAddress();
}

static void PutHexCardinal(CARDINAL w)
{ char buf[12];
  sprintf(buf, "%.8lX", w);
  PutChs(buf);
}

static void PutHexHalfword(CARDINAL h)
{ char buf[8];
  sprintf(buf, "%.4lX", h & 0xffff);
  PutChs(buf);
}

void PrintAddress(void)
{
  Tab(PCStart);
  PutHexCardinal(programCounter);
  PutCh(Space);
}

void ListWordValue(CARDINAL w)
{
  if (printState && ((1 << ListPC) & listStatus)) {
    if (linePosition >= TextStart) PutLine();
    Tab(CodeStart);
    PutHexCardinal(w);
    PutCh(Space);
  }; /* if */
}

void ListHalfwordValue(CARDINAL h)
{
  if (printState && ((1 << ListPC) & listStatus)) {
    if (linePosition >= TextStart) PutLine();
    Tab(CodeStart);
    PutHexHalfword(h);
    PutCh(Space);
  }; /* if */
}

void ListByteValue(char b)
{
  if (printState && ((1 << ListPC) & listStatus)) {
    if (linePosition >= TextStart) PutLine();
    Tab(CodeStart);
    PutHexCh(b / 0x10);
    PutHexCh(b % 0x10);
    PutCh(Space);
  }; /* if */
}

void ListBoolValue(BOOLEAN b)
{
  if (printState && ((1 << ListPC) & listStatus)) {
    PutChs((b) ? listing_listbool_true : listing_listbool_false);
    PutChs("    ");
  }; /* if */
}

static void EscapeWriteCh(char c)
{
  unsigned char ch = (unsigned char) c;
  if ((ch >= Space) && (ch < Del)) PutCh(ch);
  else if (ch == Del) PutChs("|?");
  else if (ch == SplitLine) PutCh(Space);
  else if (ch > Del) {
    PutChs("|!");
    EscapeWriteCh(ch - 0x80);
  } else {
    PutCh('|');
    PutCh(ch + 0x40);
  }; /* if */
} /* End EscapeWriteCh */

void ListStringValue(Name string)
{
  CARDINAL i;
  if (printState && ((1 << ListPC) & listStatus)) {
    for (i = 1; i <= string.length; i++) {
      if (linePosition >= MaxLineLength - 4) PutLine();
      Tab(CodeStart);
      EscapeWriteCh(string.key[i - 1]);
    }; /* for */
  }; /* if */
} /* End ListStringValue */

void InitLineList(void)
{
  linePosition = 0;
}

void PutLine(void)
{
  if (linePosition != 0) {
    PutCh(CR);
    newLine[linePosition] = 0;
    lprintf("%s",newLine);
    linePosition = 0;
  }
}

void CancelLineList(void)
{
  listStatus &= ~(1 << ListPC);
  linePosition = 0; /*Re-initialise line buffer*/
} /* End CancelLineList */

/* End listing.c */
