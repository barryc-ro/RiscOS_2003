/* -> tables.c
 * Title: The symbol tables stuff for all symbols
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 * RCS $Revision$
 */

#ifndef AAsm
#  include "code.h"
#endif
#include "errors.h"
#include "globvars.h"
#include "nametyp.h"
#include "stats.h"
#include "store.h"
#include "tables.h"
#include "message.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


SymbolPointer symbolTable[MaxSymbol];

/*
Ordering of the above types in Symbol.Status:
bits   0-1: SymbolDefinitionType
bit  11-12: VariableSymbolType (relevant only for variable symbols)
bits 12-13: FixedSymbolType
bits 14-17: FixedSymbolRegister
bits 18-19: SymbolDefinitionStatus
bit     20: SymbolReferenceState
bit     21: SymbolMayForceLiteral
*/

static BOOLEAN initialised = FALSE;

static SymbolName SymbolHash(Name name)
{
  CARDINAL hash = 0,
           j = 5;
  int32    i,
           end;

  if (name.length < 5) { j = name.length; }; /* if */
  for (i= 0; i < j; i++) { hash = hash*2 + name.key[i]; };
  end = name.length - j;
  for (i = name.length-1; i >= end; i--) {
    hash = hash*2 + name.key[i];
  }; /* for */
  return (hash + name.length) % MaxSymbol;
} /* End Hash */

void InitSymbolTable(void)
{
  CARDINAL i;

  if (initialised) {
    for (i = 0; i < MaxSymbol; i++) { Remove(symbolTable[i]); };
  };
  for (i = 0; i < MaxSymbol; i++) { symbolTable[i] = NULL; };
  initialised = TRUE;
} /* End InitSymbolTable */

static void InsertSymbol(SymbolPointer *symbolPointer, Name name, 
                         Status flags)
{
  *symbolPointer = (SymbolPointer) mymalloc(sizeof(**symbolPointer));
  /*Produce a new instance of a symbol*/
  (*symbolPointer)->u = flags;
  (*symbolPointer)->link = NULL;               /*End of chain*/
  (*symbolPointer)->defPtr = NULL;             /*No cross reference stuff yet*/
  (*symbolPointer)->usePtr = NULL;
  (*symbolPointer)->key.length = name.length;  /*Length of expected symbol*/
  (*symbolPointer)->key.key = (char *)mymalloc((size_t)(name.length));
                                               /*Get the store for it*/
  memcpy((*symbolPointer)->key.key, name.key, (size_t)(name.length));
  (*symbolPointer)->length = 0;
  memset(&((*symbolPointer)->aOFData), 0, sizeof(AOFData));
  (*symbolPointer)->aOFData.symbolId = SymbolIdUnset; /* Uninitialised */
} /* End InsertSymbol */

static void Lookup(Name name, SymbolPointer *result, BOOLEAN insert, 
                   Status status)
/*
Do the standard lookup, returning the first matching symbol.
If the symbol is not found and insert is TRUE it is inserted into the table
with all attributes set to status.
*/
{
  CARDINAL   j,
             k;
  SymbolName hash = SymbolHash(name);
  char      *s1;

  *result = symbolTable[hash];/*Get the first one*/
  if ((*result == NULL) && insert) {
    InsertSymbol(&symbolTable[hash], name, status);
    *result = symbolTable[hash];
    AddAccess(1);
    return;
  };
  j = 0;
  k = name.length;
  s1 = name.key;
  do {
    if (*result == NULL) { AddAccess(j); return; };
    /*
    See if the test name is the same as the current symbol,
    and chain if not
    */
    j++;
    if ((k == (*result)->key.length) &&
      (memcmp(s1, (*result)->key.key, (size_t)k) == 0))
      return;
    if (((*result)->link == NULL) && insert) {
      InsertSymbol(&(*result)->link, name, status);
      *result = (*result)->link;
      AddAccess(j+1);
      return;
    }; /* if */
    *result = (*result)->link;/*Step to next in chain*/
  } while (1); /* loop */
} /* End Lookup */

static SymbolPointer define_register(Name name, RegisterType regType)
{
  SymbolPointer result;
  Status        status;
  BOOLEAN       isnew;
  /*Lookup and insert if not there*/
  status.status = 0;

  Lookup(name, &result, FALSE, status);
  isnew = (result == NULL);
  status.s.sdt = RegisterNameSDT;
  status.s.sds = DefinedSDS;
  status.s.rt = regType;
  Lookup(name, &result, TRUE, status);
  if (result->u.s.sdt == RegisterNameSDT) {
     result->length = 0;
     if (isnew) result->value.card = (CARDINAL)-1; /* allow re-definition */
     return result;
  } else {
     /*Symbol was there but wrong type*/
    return NULL;
  }
} /* End define_register */

SymbolPointer DefineReg(Name name)
{
  return define_register(name, IntRT);
}

SymbolPointer DefineFPReg(Name name)
{
  return define_register(name, RealRT);
}

SymbolPointer DefineCoprocReg(Name name)
{
  return define_register(name, CopRRT);
}

SymbolPointer DefineCoprocName(Name name)
{
  return define_register(name, CopNRT);
}

SymbolPointer LookupFixed(Name name, BOOLEAN reference)
{
  SymbolPointer result;
  Status        status;

  /*Lookup and insert if not there*/
  status.status = 0;
  status.s.sdt = FixedSDT;
  Lookup(name, &result, TRUE, status);
  if (result->u.s.sdt == FixedSDT) {
    if (reference) {
      result->u.s.srs = ReferencedSRS;
    }; /* if */
    return result;
  } else {
    /*Symbol was there but wrong type*/
    return NULL;
  };
} /* End LookupFixed */

SymbolPointer LookupRef(Name name, BOOLEAN reference)
/*Lookup a reference without inserting into the table*/
{
  SymbolPointer result;
  Status        status;

  status.status = 0;
  Lookup(name, &result, FALSE, status);
  if (reference && (result != NULL)) {
    result->u.s.srs = ReferencedSRS;
  }; /* if */
  return result;
} /* End LookupRef */


SymbolPointer LookupExternal(Name name)
{
  SymbolPointer result = NULL;
#ifndef AAsm
  Status        status;
  status.status = 0;
  status.s.sdt = ExternalSDT;
  Lookup(name, &result, TRUE, status);
  result->length = 0;
  result->value.card = 0;
#endif
  return result;
} 

SymbolPointer DefineGlobalA(Name name)
{
  SymbolPointer result;
  Status        status;

  status.status = 0;
  /*Lookup and insert if not there*/
  status.s.sdt = VariableSDT;
  status.s.sds = DefinedSDS;
  status.s.vst = ArithmeticVST;
  Lookup(name, &result, TRUE, status);
  if ((result->u.s.sdt == VariableSDT) && (result->u.s.vst == ArithmeticVST)) {
     result->length = 0;
     result->value.card = 0;
     return result;
  } else {
     /*Symbol was there but wrong type*/
     return NULL;
  };
} /* End DefineGlobalA */

SymbolPointer DefineGlobalL(Name name)
{
  SymbolPointer result;
  Status        status;

  /*Lookup and insert if not there*/
  status.status = 0;
  status.s.sdt = VariableSDT;
  status.s.sds = DefinedSDS;
  status.s.vst = LogicalVST;
  Lookup(name, &result, TRUE, status);
  if ((result->u.s.sdt == VariableSDT) && (result->u.s.vst == LogicalVST)) {
     result->length = 0;
     result->value.bool = FALSE;
     return result;
  } else {
     /*Symbol was there but wrong type*/
     return NULL;
  };
} /* End DefineGlobalL */

SymbolPointer DefineGlobalS(Name name)
{
  SymbolPointer result;
  Status        status;

  /*Lookup and insert if not there*/
  status.status = 0;
  Lookup(name, &result, FALSE, status);
  if (result == NULL) {
    status.s.sdt = VariableSDT;
    status.s.sds = DefinedSDS;
    status.s.vst = StringVST;
    Lookup(name, &result, TRUE, status);
    result->length = 0;
    result->value.ptr = (NamePointer) mymalloc(sizeof(*result->value.ptr));
    result->value.ptr->length = 0;
    result->value.ptr->key = NULL;
    result->value.ptr->maxLength = 0;
    return result;
  } else if ((result->u.s.sdt == VariableSDT) &&
    (result->u.s.vst == StringVST)) {
    result->length = 0;
    result->value.ptr->length = 0;
    return result;
  } else {
   /*Symbol was there but wrong type*/
   return NULL;
   };
} /* End DefineGlobalS */

SymbolPointer LookupGlobalA(Name name)
{
  SymbolPointer result;
  Status        status;

  status.status = 0;
  Lookup(name, &result, FALSE, status);
  if ((result != NULL) && (result->u.s.sdt == VariableSDT) &&
     (result->u.s.vst == ArithmeticVST)) {
     result->length = 0;
     return result;
  } else {
     /*Symbol was there but wrong type*/
     return NULL;
  }; /* if */
} /* End LookupGlobalA */

SymbolPointer LookupGlobalL(Name name)
{
  SymbolPointer result;
  Status        status;

  status.status = 0;
  Lookup(name, &result, FALSE, status);
  if ((result != NULL) && (result->u.s.sdt == VariableSDT) &&
     (result->u.s.vst == LogicalVST)) {
     result->length = 0;
     return result;
  } else {
     /*Symbol was there but wrong type*/
     return NULL;
  }; /* if */
} /* End LookupGlobalL */

SymbolPointer LookupGlobalS(Name name)
{
  SymbolPointer result;
  Status        status;

  status.status = 0;
  Lookup(name, &result, FALSE, status);
  if ((result != NULL) && (result->u.s.sdt == VariableSDT) &&
     (result->u.s.vst == StringVST)) {
     result->length = 0;
     return result;
  } else {
     /*Symbol was there but wrong type*/
     return NULL;
  }; /* if */
} /* End LookupGlobalS */

void AddImports(void)
/* In as mode mark all undefined symbols as externals */
{
#ifndef AAsm
  int i;
  for (i = 0; i < MaxSymbol; i++) {
    SymbolPointer symbol_pointer = symbolTable[i];
    while (symbol_pointer != NULL) {
      if ((symbol_pointer->u.s.sdt == FixedSDT) &&
        (symbol_pointer->u.s.sds == UndefinedSDS)) {
        symbol_pointer->u.s.sdt = ExternalSDT;
        symbol_pointer->value.bool = FALSE; /* Not weak */
        if (symbol_pointer->aOFData.symbolId == SymbolIdUnset) {
          AddSymbol(symbol_pointer);
        }
      }
      symbol_pointer = symbol_pointer->link;
    }
  }
#endif
}

void PutImplicitImports(void)
/* In as export all the symbols that were undefined. Called end of pass 2 */
{
#ifndef AAsm
  int i;
  for (i = 0; i < MaxSymbol; i++) {
    SymbolPointer symbol_pointer = symbolTable[i];
    while (symbol_pointer != NULL) {
      if ((symbol_pointer->u.s.sdt == ExternalSDT) &&
        (symbol_pointer->u.s.at == NoneAT)) {
        AddSymbolToTable(symbol_pointer, symbol_pointer->key, TRUE,
          symbol_pointer->value.bool);
        symbol_pointer->u.s.at = ExportedAT;
      }; /* if */
      symbol_pointer = symbol_pointer->link;
    }
  }
#endif /* not AAsm */
}

static void SetImplicitCPUReg(char *name, CARDINAL value)
{
  Name          reg_name;
  SymbolPointer sym;
  reg_name.key = name;
  reg_name.length = strlen(name);
  sym = DefineReg(reg_name);
  if (sym == NULL)
    Report(AsmError,errors_RegSymExists);
  else
    sym->value.card = value;
}

static void SetImplicitFPReg(char *name, CARDINAL value)
{
  Name          reg_name;
  SymbolPointer sym;
  reg_name.key = name;
  reg_name.length = strlen(name);
  sym = DefineFPReg(reg_name);
  if (sym == NULL)
    Report(AsmError,errors_RegSymExists);
  else
    sym->value.card = value;
}

static void SetImplicitCoprocReg(char *name, CARDINAL value)
{
  Name          reg_name;
  SymbolPointer sym;
  reg_name.key = name;
  reg_name.length = strlen(name);
  sym = DefineCoprocReg(reg_name);
  if (sym == NULL)
    Report(AsmError,errors_RegSymExists);
  else
    sym->value.card = value;
}

static void SetImplicitCoprocName(char *name, CARDINAL value)
{
  Name          reg_name;
  SymbolPointer sym;
  reg_name.key = name;
  reg_name.length = strlen(name);
  sym = DefineCoprocName(reg_name);
  if (sym == NULL)
    Report(AsmError,errors_RegSymExists);
  else
    sym->value.card = value;
}

void SetImplicitRegisters(void)
/* Setup as style register names */
{
  int r;
  static char r_names[] = "\
r0\0\0r1\0\0r2\0\0r3\0\0r4\0\0r5\0\0r6\0\0r7\0\0\
r8\0\0r9\0\0r10\0r11\0r12\0r13\0r14\0r15";

  static char R_names[] = "\
R0\0\0R1\0\0R2\0\0R3\0\0R4\0\0R5\0\0R6\0\0R7\0\0\
R8\0\0R9\0\0R10\0R11\0R12\0R13\0R14\0R15";

  static char p_names[] = "\
p0\0\0p1\0\0p2\0\0p3\0\0p4\0\0p5\0\0p6\0\0p7\0\0\
p8\0\0p9\0\0p10\0p11\0p12\0p13\0p14\0p15";

  static char c_names[] = "\
c0\0\0c1\0\0c2\0\0c3\0\0c4\0\0c5\0\0c6\0\0c7\0\0\
c8\0\0c9\0\0c10\0c11\0c12\0c13\0c14\0c15";

  static char f_names[] = "\
f0\0\0f1\0\0f2\0\0f3\0\0f4\0\0f5\0\0f6\0\0f7\0";

  static char F_names[] = "\
F0\0\0F1\0\0F2\0\0F3\0\0F4\0\0F5\0\0F6\0\0F7\0";

  static char u_names[] = "\
a1\0\0a2\0\0a3\0\0a4\0\0\
v1\0\0v2\0\0v3\0\0v4\0\0v5\0\0v6\0\0\
sl\0\0fp\0\0ip\0\0sp\0";

/* Vanilla cpu register names */
  for (r = 0;  r < 16;  ++r)
  { SetImplicitCPUReg(r_names+(r*4), r);
    SetImplicitCPUReg(R_names+(r*4), r);
  }
  SetImplicitCPUReg("lr", 14);
  SetImplicitCPUReg("LR", 14);
  SetImplicitCPUReg("pc", 15);
  SetImplicitCPUReg("PC", 15);

/* Floating point coproc register names */
  for (r = 0;  r < 8;  ++r)
  { SetImplicitFPReg(f_names+(r*4), r);
    SetImplicitFPReg(F_names+(r*4), r);
  }

/* Predefined co-processor names */
  for (r = 0;  r < 16;  ++r)
    SetImplicitCoprocName(p_names+(r*4), r);

/* Predefined co-processor register names */
  for (r = 0;  r < 16;  ++r)
    SetImplicitCoprocReg(c_names+(r*4), r);

/* The APCS_U/R/3 cpu register names */
  if (reentrant)
  { strcpy(u_names + 9*4, "sb");  /* r9 == v6 taken for sb */
    if (!sw_stack_check) strcpy(u_names + 10*4, "v6");
  }
  else
    if (!sw_stack_check) strcpy(u_names + 10*4, "v7");

  if (callingStandard != APCS_None)
  { for (r = 0;  r < (sizeof(u_names)+3)/4;  ++r)
      SetImplicitCPUReg(u_names+(r*4), r);
    if (nofp)
    { nofp = 11;
      SetImplicitCPUReg("v8", nofp);               /* v8/ip */
    }
  }
}
/* End SetImplicitRegisters */

static void RemoveContext(OccPtr occ)
/* Clear out the context information for one symbol occurrence */
{
  OccPtr next;
  while (occ != NULL) {
    if ((occ->context == File) && (occ->u.file.length != 0)) {
      free(occ->u.file.key);
    }; /* if */
    next = occ->newContext;
    free(occ);
    occ = next;
  }; /* while */
} /* End RemoveContext */

static void RemoveOcc(OccStartPtr occ)
/* Clear out a chain of occurrences for a symbol */
{
  OccStartPtr next;
  while (occ != NULL) {
    RemoveContext(occ->occ);
      /* Get rid of the context chain for the occurrence*/
    next = occ->next;
    free(occ);
    occ = next;
  }; /* while */
} /* End RemoveOcc */

void Remove(SymbolPointer symbolPointer)
/*Clear out remains of previous assembly*/
{
  SymbolPointer temp;
  while (symbolPointer != NULL) {
    /*Get rid of pointed to object*/
    temp = symbolPointer->link;

    /*Get rid of reference chains*/
    RemoveOcc(symbolPointer->defPtr);
    RemoveOcc(symbolPointer->usePtr);

    /*Now get rid of current object*/

    /*First the Name part*/
    free(symbolPointer->key.key);

    /*Now possible string part*/
    if ((symbolPointer->u.s.sdt == VariableSDT) &&
       (symbolPointer->u.s.vst == StringVST)) {
       if (symbolPointer->value.ptr->maxLength != 0) {
         free(symbolPointer->value.ptr->key);
       }; /* if */
       free(symbolPointer->value.ptr);
    }; /* if */

    /*Now the record*/
    free(symbolPointer);
    symbolPointer = temp;
  }; /* while */
} /* End Remove */

/* End tables.c */
