/* -> initdir.c
 * Title: Directive initialisation
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#ifndef AAsm
#  include "aof.h"
#endif
#include "constant.h"
#include "errors.h"
#include "globvars.h"
#include "initdir.h"
#include "store.h"
#include "vars.h"
#include "message.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef enum {
  NoCheck,
  NoLabNoExp,
  NoLabExp,
  LabNoExp,
  LabExp,
  OptLabExp,
  OptLabNoExp
  } SyntaxType;

typedef struct DirectiveEntry {
  Name            key;
  DirectiveNumber value;
} DirectiveEntry;

#define DirTabSize (sizeof(AllDirectives)/sizeof(DirectiveEntry))

BOOLEAN allowDirInCond[TDUMMY];

#ifndef AAsm
typedef struct AreaEntry {
  Name     name;
  CARDINAL value;
} AreaEntry;

#define MaxAreaName 15

BOOLEAN disallowDirOutsideArea[TDUMMY];
#endif

static BOOLEAN doneInit = FALSE;
static signed char dirChars[256];

static DirectiveEntry AllDirectives[] = {
  {{5,"ALIGN"}, TALIGN,},
#ifndef AAsm
  {{3,"AOF"}, TAOF},
#endif
#ifndef AAsm
  {{4,"AOUT"}, TAOUT},
#endif
  {{4,"AREA"}, TAREA},
  {{6,"ASSERT"}, TASSERT},
#ifdef BINARY_INCLUDES
  {{3,"BIN"}, TGETBIN},
#endif
  {{2,"CN"}, TCN},
  {{6,"CODE16"}, TCODE16},
  {{6,"CODE32"}, TCODE32},
  {{2,"CP"}, TCP},
  {{4,"DATA"}, TDATA},
  {{3,"DCB"}, TEQUAL},
  {{3,"DCD"}, TAMP},
  {{4,"DCDO"}, TDCDO},
  {{4,"DCFD"}, TDCFD},
  {{4,"DCFS"}, TDCFS},
  {{3,"DCI"}, TDCI},
  {{3,"DCW"}, TDCW},
  {{4,"ELSE"}, TELSE},
  {{3,"END"}, TEND},
  {{5,"ENDIF"}, TFI},
#ifndef AAsm
  {{5,"ENTRY"}, TENTRY},
#endif
  {{3,"EQU"}, TSTAR},
#ifndef AAsm
  {{6,"EXPORT"}, TEXPORT},
#endif
#ifndef AAsm
  {{6,"EXTERN"}, TIMPORT},
#endif
  {{5,"FIELD"}, THASH},
  {{2,"FN"}, TFN},
  {{4,"GBLA"}, TGBLA},
  {{4,"GBLL"}, TGBLL},
  {{4,"GBLS"}, TGBLS},
  {{3,"GET"}, TGET},
#ifndef AAsm
  {{6,"GLOBAL"}, TEXPORT},
#endif
  {{2,"IF"}, TIF},
#ifndef AAsm
  {{6,"IMPORT"}, TIMPORT},
#endif
#ifdef BINARY_INCLUDES
  {{6,"INCBIN"}, TGETBIN},
#endif
  {{7,"INCLUDE"}, TGET},
  {{4,"INFO"}, TMNOTE},
#ifndef AAsm
  {{4,"KEEP"}, TKEEP},
#endif
  {{4,"LCLA"}, TLCLA},
  {{4,"LCLL"}, TLCLL},
  {{4,"LCLS"}, TLCLS},
#ifdef AAsm
  {{5,"LEADR"}, TLEADR},
#endif
#ifndef AAsm
  {{4,"LEAF"}, TLEAF},
#endif
  {{3,"LNK"}, TLNK},
  {{5,"LTORG"}, TLTORG},
  {{5,"MACRO"}, TMACRO},
  {{3,"MAP"}, THAT},
  {{4,"MEND"}, TMEND},
  {{5,"MEXIT"}, TMEXIT},
  {{4,"NOFP"}, TNOFP},
  {{3,"OPT"}, TOPT},
  {{3,"ORG"}, TORG},
  {{5,"RLIST"}, TRLIST},
  {{2,"RN"}, TRN},
  {{4,"ROUT"}, TROUT},
  {{4,"SETA"}, TSETA},
  {{4,"SETL"}, TSETL},
  {{4,"SETS"}, TSETS},
  {{5,"SPACE"}, TPERC},
#ifndef AAsm
  {{6,"STRONG"}, TSTRONG},
#endif
  {{4,"SUBT"}, TSUBTTL},
  {{3,"TTL"}, TTTL},
  {{4,"WEND"}, TWEND},
  {{5,"WHILE"}, TWHILE}
};

static SyntaxType     syntax[TDUMMY];

#ifndef AAsm
static AreaEntry      areaNames[MaxAreaName];
static SyntaxType     as_syntax[] = {
  /* Listing directives */
  NoLabExp,   /*AsTitle*/
  NoLabNoExp, /*AsListOff*/
  NoLabNoExp, /*AsListOn*/
  NoLabNoExp, /*AsListFull*/
  NoLabNoExp, /*AsPage*/
  /* Segment directives */
  NoLabNoExp, /*AsText*/
  NoLabNoExp, /*AsData*/
  NoLabNoExp, /*AsBss*/
  NoLabNoExp, /*AsEven*/
  NoLabNoExp, /*AsOdd*/
  NoLabExp,   /*AsAlign*/
  NoLabNoExp, /*AsPool*/
  /* Identifier control */
  LabExp,     /*AsEqu*/
  LabExp,     /*AsRequ*/
  NoLabExp,   /*AsGlobal*/
  NoLabExp,   /*AsCommon*/
  /* Fp and Coproc stuff */
  LabExp,     /*AsFequ*/
  LabExp,     /*AsCequ*/
  LabExp,     /*AsPequ*/
  /* Space allocation and value planting */
  NoLabExp,   /*AsSpace*/
  NoLabExp,   /*AsAscii*/
  NoLabExp,   /*AsAsciz*/
  NoLabExp,   /*AsByte*/
  NoLabExp,   /*AsShort*/
  NoLabExp,   /*AsLong*/
  NoLabExp,   /*AsFloat*/
  NoLabExp,   /*AsDouble*/
  NoLabExp,   /*AsExtend*/
  NoLabExp,   /*AsPacked*/
};
/* Extensions to allow as style operation */
signed char asToObj[AsDummy] = {
  /* Listing directives */
  TTTL,         /* AsTitle */
  TStyleChange, /* AsListOff */
  TStyleChange, /* AsListOn */
  TStyleChange, /* AsListFull */
  TStyleChange, /* AsPage */
  /* Segment directives */
  TStyleChange, /* AsText */
  TStyleChange, /* AsData */
  TStyleChange, /* AsBss */
  TStyleChange, /* AsEven */
  TStyleChange, /* AsOdd */
  TALIGN,       /* AsAlign */
  TLTORG,       /* AsPool */
  /* Identifier control */
  TSTAR,        /* AsEqu */
  TRN,          /* AsRequ */
  TEXPORT,      /* AsGlobal */
  TStyleChange, /* AsCommon */
  /* Fp and Coproc stuff */
  TFN,          /* AsFequ */
  TCN,          /* AsCequ */
  TCP,          /* AsPequ */
  /* Space allocation and value planting */
  TPERC,        /* AsSpace */
  TStyleChange, /* AsAscii */
  TStyleChange, /* AsAsciz */
  TEQUAL,       /* AsByte */
  TDCW,         /* AsShort */
  TAMP,         /* AsLong */
  TDCFS,        /* AsFloat */
  TDCFD,        /* AsDouble */
  TStyleChange, /* AsExtend */
  TStyleChange  /* AsPacked */
};

char as_directive_alignment[] = {
  1, /* AsTitle */
  1, /* AsListOff */
  1, /* AsListOn */
  1, /* AsListFull */
  1, /* AsPage */
  /* Segment directives */
  1, /* AsText */
  1, /* AsData */
  1, /* AsBss */
  1, /* AsEven */
  1, /* AsOdd */
  1, /* AsAlign */
  4, /* AsPool */
  /* Identifier control */
  1, /* AsEqu */
  1, /* AsRequ */
  1, /* AsGlobal */
  1, /* AsCommon */
  /* Fp and Coproc stuff */
  1, /* AsFequ */
  1, /* AsCequ */
  1, /* AsPequ */
  /* Space allocation and value planting */
  1, /* AsSpace */
  1, /* AsAscii */
  1, /* AsAsciz */
  1, /* AsByte */
  2, /* AsShort */
  4, /* AsLong */
  4, /* AsFloat */
  4, /* AsDouble */
  4, /* AsExtend */
  4, /* AsPacked */
};
static struct ad {
  char name[8];
  short value;
} asDirNames[] = {
        "align",        AsAlign,
        "ascii",        AsAscii,
        "asciz",        AsAsciz,
        "bss",          AsBss,
        "byte",         AsByte,
        "ceq",          AsCequ,
        "comm",         AsCommon,
        "data",         AsData,
#ifdef  TARGET_HAS_COFF
        "def",          AsDef,
        "dim",          AsDim,
#endif
        "double",       AsDouble,
#ifdef  TARGET_HAS_COFF
        "endef",        AsEndef,
#endif
        "equ",          AsEqu,
        "even",         AsEven,
        "extend",       AsExtend,
        "feq",          AsFequ,
#ifdef  TARGET_HAS_COFF
        "file",         AsFile,
#endif
        "float",        AsFloat,
        "global",       AsGlobal,
        "globl",        AsGlobal,
#ifdef  TARGET_HAS_COFF
        "line",         AsLine,
#endif
        "list",         AsListOn,
        "listall",      AsListFull,
#ifdef  TARGET_HAS_COFF
        "ln",           AsLn,
#endif
        "long",         AsLong,
        "nolist",       AsListOff,
        "odd",          AsOdd,
        "packed",       AsPacked,
        "page",         AsPage,
        "peq",          AsPequ,
        "pool",         AsPool,
        "req",          AsRequ,
#ifdef  TARGET_HAS_COFF
        "scl",          AsScl,
#endif
        "short",        AsShort,
#ifdef  TARGET_HAS_COFF
        "size",         AsSize,
#endif
        "space",        AsSpace,
#ifdef  TARGET_HAS_COFF
        "tag",          AsTag,
#endif
        "text",         AsText,
        "title",        AsTitle,
#ifdef  TARGET_HAS_COFF
        "type",         AsType,
        "val",          AsVal,
#endif
        "word",         AsLong
};

#endif

#ifndef AAsm
static void InitAreaEntry(char *chars, CARDINAL answer, CARDINAL index)
{
  if (index >= MaxAreaName) Report(FatalError,initdir_initareaentry_bad);
  areaNames[index].value = answer;
  areaNames[index].name.length = strlen(chars);
  areaNames[index].name.key = (char *) mymalloc((size_t)(areaNames[index].name.length));
  memcpy(areaNames[index].name.key, chars,
     (size_t)(areaNames[index].name.length));
} /* End InitAreaEntry */
#endif

void InitDirectives(void)
/*
Initialise the directive name table
*/
{
  CARDINAL i;
  if (doneInit) return;
  for (i=0; i<DirTabSize-1; i++) {
    if (strcmp(AllDirectives[i].key.key,AllDirectives[i+1].key.key)>=0) {
      fprintf(stderr,initdir_initdirectives_err,
        i,AllDirectives[i].key.key,i+1,AllDirectives[i+1].key.key);
    }
  }
#ifndef AAsm
  InitAreaEntry("ABS", AOF_ABSAT, 0);
  InitAreaEntry("REL", 0, 1);
  InitAreaEntry("PIC", AOF_PICAT, 2);
  InitAreaEntry("CODE", AOF_CODEAT, 3);
  InitAreaEntry("DATA", 0, 4);
  InitAreaEntry("READONLY", AOF_RONLYAT, 5);
  InitAreaEntry("COMDEF", AOF_COMDEFAT, 6);
  InitAreaEntry("COMMON", AOF_COMREFAT, 7);
  InitAreaEntry("NOINIT", AOF_0INITAT, 8);
  InitAreaEntry("A32bit", AOF_32bitAT, 9);
  InitAreaEntry("REENTRANT", AOF_REENTAT, 10);
  InitAreaEntry("FP3", AOF_FP3AT, 11);
  InitAreaEntry("BASED", AOF_BASEDAT, 12);
  InitAreaEntry("HALFWORD", AOF_HWORDAT, 13);
  InitAreaEntry("INTERWORK", AOF_INTERAT, 14);
#endif
  doneInit = TRUE;
} /* End InitDirectives */

BOOLEAN OneCharacterDirective(char *line,
  CARDINAL        *lineIndex,
  DirectiveNumber *directiveNumber)
/*
  Spot one character directives and return TRUE or FALSE
  Put the directive number in directiveNumber.
  lineIndex is returned past the directive if successful,
  otherwise before it
*/
{
  char ch;
#ifndef AAsm
  if (line[*lineIndex] == Dot)
  { *directiveNumber = TStyleChange;
    return TRUE;
    /* Indicate we've found a style changing directive */
  }
#endif
  if (!termin[line[*lineIndex+1]]) return FALSE;
  ch = line[*lineIndex];
  if (dirChars[ch] >= 0) {
    *directiveNumber = (DirectiveNumber) dirChars[ch];
    (*lineIndex)++;/*Past directive*/
    while (isWhiteSpace(line[*lineIndex])) (*lineIndex)++;
    return TRUE;
  }
  return FALSE;
} /* End OneCharacterDirective */

BOOLEAN NameDirective(DirectiveNumber *directiveNumber, Name name)
/*
  Spot name directives and return the number
  lineIndex is returned past the directive if successful,
  otherwise before it
*/
{
  CARDINAL i,lb=0,ub=DirTabSize;
  int32 cmp;
  char *nptr=name.key, *iptr;
#ifdef CASE_INSENSITIVE_DIRECTIVES
  char chs[8];
  int ch;
  i = name.length;
  if (i > 1 && i <= 7)
  { while (i > 0)
    { --i;
      ch = name.key[i];
      if (islower(ch)) ch = toupper(ch);
      chs[i] = ch;
    }
    name.key = chs;
  }
#endif
  /* Now name contains the suspected directive */
  /* Do a binary chop on the ordered array of DirectiveEntries */
  while (lb!=ub) {
    i=(lb+ub)/2;
    iptr=AllDirectives[i].key.key;
    if ((cmp=(int32)nptr[0]-(int32)iptr[0])==0) {
      CARDINAL len=AllDirectives[i].key.length;
      if (name.length>len) len=name.length;
      cmp=strncmp(nptr+1,iptr+1,(int)len-1);
    }
    if (cmp==0) {
      *directiveNumber=AllDirectives[i].value;
      return TRUE;
    }
    if (cmp<0)  ub=i;
    else        lb=i+1;
  }
  return FALSE;
} /* End NameDirective */

#ifndef AAsm
BOOLEAN AreaAttrName(char *line, CARDINAL *index, CARDINAL *result)
{
  Name     name;
  CARDINAL i,
           oldIndex;

  while (isWhiteSpace(line[*index])) (*index)++;
  oldIndex = *index;
  if (SymbolTest(line, index, &name)) {
    while (isWhiteSpace(line[*index])) { (*index)++; }; /* while */
    for (i = 0; i < MaxAreaName; i++) {
      if (areaNames[i].name.length == name.length) {
        if (memcmp(name.key, areaNames[i].name.key,(size_t)(name.length)) == 0)
        { *result = areaNames[i].value;
          return TRUE;
        }
      }
    }  /* for */
  }
  *index = oldIndex;
  return FALSE;
} /* End AreaAttrName */

BOOLEAN AsNameDirective(AsDirectiveNumber *directiveNumber, Name name)
{
  CARDINAL size = sizeof(asDirNames)/sizeof(struct ad), /* Table size */
           lower = 0,
           higher = size,
           mid;
  int      rc;
  for (;;) {
    if (lower >= higher) return FALSE;
    mid = (lower + higher)/2;
    rc = memcmp(asDirNames[mid].name, name.key, (size_t)(name.length));
    if ((rc == 0) && (asDirNames[mid].name[name.length] == 0)) {
      /* We've found the directive I believe */
      *directiveNumber = (AsDirectiveNumber) asDirNames[mid].value;
      return TRUE;
    };
    if (rc < 0) lower = mid+1; else higher = mid;
  }
}
#endif

BOOLEAN DirectiveSyntax(DirectiveNumber number, char ch, BOOLEAN symbolFound)
/*
  Returns true <=> directive syntax ok
  otherwise false and error message already produced
*/
{
  switch (syntax[number]) {
    case NoLabNoExp:
    case LabNoExp:
    case OptLabNoExp:
    if ((ch != CommentSymbol) && (ch != CR)) {
      Report(AsmError,errors_SynAfterDir);
      return FALSE;
    }; /* if */
    /*No check if expression expected*/
  };
  switch (syntax[number]) {
    case NoLabNoExp:
    case NoLabExp:
    if (symbolFound) {
      Report(AsmError,errors_IllLineStart);
      return FALSE;
    }; /* if */
    break;

    case LabNoExp:
    case LabExp:
    if (!symbolFound) {
      Report(AsmError,errors_LabMiss);
      return FALSE;
    }; /* if */

    /*Doesn't matter whether we have a symbol or not*/
  }; /* case */
  return TRUE;
} /* End DirectiveSyntax */

#ifndef AAsm
BOOLEAN AsDirectiveSyntax(AsDirectiveNumber number,
  char ch,
  BOOLEAN symbolFound)
{
  switch (as_syntax[number]) {
    case NoLabNoExp:
    case LabNoExp:
    case OptLabNoExp:
    if ((ch != AtSymbol) && (ch != CommentSymbol) && (ch != CR)) {
      Report(AsmError,errors_SynAfterDir);
      return FALSE;
    }; /* if */
    /*No check if expression expected*/
  };
  switch (as_syntax[number]) {
    case NoLabNoExp:
    case NoLabExp:
    if (symbolFound) {
      Report(AsmError,errors_IllLineStart);
      return FALSE;
    }; /* if */
    break;

    case LabNoExp:
    case LabExp:
    if (!symbolFound) {
      Report(AsmError,errors_LabMiss);
      return FALSE;
    }; /* if */

    /*Doesn't matter whether we have a symbol or not*/
  }; /* case */
  return TRUE;
} /* End AsDirectiveSyntax */
#endif

void Init_InitDir(void)
{
  CARDINAL i;
  for (i = 0; i <= 255; i++) dirChars[i] = TStyleChange;
  dirChars['['] = TIF;
  dirChars['|'] = TELSE;
  dirChars[']'] = TFI;
  dirChars['!'] = TMNOTE;
  dirChars['#'] = THASH;
  dirChars['*'] = TSTAR;
  dirChars['='] = TEQUAL;
  dirChars['%'] = TPERC;
  dirChars['&'] = TAMP;
  dirChars['^'] = THAT;
#ifndef AAsm
  for (i = 0; i < MaxAreaName; i++) areaNames[i].name.length = 0;
#endif
  for (i = TIF; i < TDUMMY; i++) {
    allowDirInCond[i] = FALSE;
#ifndef AAsm
    disallowDirOutsideArea[i] = FALSE;
#endif
  };
  allowDirInCond[TIF] = TRUE;
  allowDirInCond[TELSE] = TRUE;
  allowDirInCond[TFI] = TRUE;
  allowDirInCond[TEND] = TRUE;
  allowDirInCond[TWHILE] = TRUE;
  allowDirInCond[TWEND] = TRUE;
  allowDirInCond[TMACRO] = TRUE;
  allowDirInCond[TMEND] = TRUE;
#ifndef AAsm
  disallowDirOutsideArea[TEQUAL] = TRUE;
  disallowDirOutsideArea[TPERC] = TRUE;
  disallowDirOutsideArea[TAMP] = TRUE;
  disallowDirOutsideArea[TDCDO] = TRUE;
  disallowDirOutsideArea[TROUT] = TRUE;
  disallowDirOutsideArea[TALIGN] = TRUE;
  disallowDirOutsideArea[TLTORG] = TRUE;
  disallowDirOutsideArea[TDCW] = TRUE;
  disallowDirOutsideArea[TDCI] = TRUE;
  disallowDirOutsideArea[TDCFS] = TRUE;
  disallowDirOutsideArea[TDCFD] = TRUE;
  disallowDirOutsideArea[TENTRY] = TRUE;
  disallowDirOutsideArea[TSTRONG] = TRUE;
  disallowDirOutsideArea[TDATA] = TRUE;
#endif
  syntax[TIF] = NoLabExp;
  syntax[TELSE] = NoLabNoExp;
  syntax[TFI] = NoLabNoExp;
  syntax[TMNOTE] = NoLabExp;
  syntax[THASH] = OptLabExp;
  syntax[TSTAR] = LabExp;
  syntax[TEQUAL] = OptLabExp;
  syntax[TPERC] = OptLabExp;
  syntax[TDCW] = OptLabExp;
  syntax[TAMP] = OptLabExp;
  syntax[TDCDO] = OptLabExp;
  syntax[TDCI] = OptLabExp;
  syntax[THAT] = NoLabExp;
  syntax[TEND] = NoCheck;
  syntax[TLNK] = NoCheck;
  syntax[TGET] = NoLabExp;
#ifdef BINARY_INCLUDES
  syntax[TGETBIN] = NoLabExp;    /* added by NRaine */
#endif
  syntax[TORG] = NoLabExp;
  syntax[TOPT] = NoLabExp;
  syntax[TTTL] = NoLabExp;
  syntax[TSUBTTL] = NoLabExp;
  syntax[TRN] = LabExp;
  syntax[TFN] = LabExp;
  syntax[TCN] = LabExp;
  syntax[TCP] = LabExp;
  syntax[TWHILE] = NoLabExp;
  syntax[TWEND] = NoLabNoExp;
  syntax[TMACRO] = NoLabNoExp;
  syntax[TMEXIT] = NoLabNoExp;
  syntax[TMEND] = NoLabNoExp;
  syntax[TGBLA] = NoLabExp;
  syntax[TGBLL] = NoLabExp;
  syntax[TGBLS] = NoLabExp;
  syntax[TLCLA] = NoLabExp;
  syntax[TLCLL] = NoLabExp;
  syntax[TLCLS] = NoLabExp;
  syntax[TSETA] = LabExp;
  syntax[TSETL] = LabExp;
  syntax[TSETS] = LabExp;
  syntax[TASSERT] = NoLabExp;
  syntax[TROUT] = OptLabNoExp;
  syntax[TALIGN] = NoLabExp;
  syntax[TCODE16] = NoLabNoExp;
  syntax[TCODE32] = NoLabNoExp;
  syntax[TLTORG] = NoLabNoExp;
#ifdef AAsm
  syntax[TLEADR] = NoLabExp;
#else
  syntax[TIMPORT] = NoLabExp;
  syntax[TEXPORT] = NoLabExp;
  syntax[TKEEP] = NoLabExp;
  syntax[TLEAF] = NoLabExp;
  syntax[TDATA] = LabNoExp;
  syntax[TAREA] = NoLabExp;
  syntax[TENTRY] = NoLabNoExp;
#endif
  syntax[TDCFS] = OptLabExp;
  syntax[TDCFD] = OptLabExp;
  syntax[TNOFP] = NoLabNoExp;
  syntax[TRLIST] = LabExp;
}

/* End initdir.c */
