/* -> symdump.c
 * Title:  Symbol table printing
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#ifndef AAsm
#  include "code.h"
#endif
#include "constant.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#ifdef HOST_IS_RISCOS
#  include "osdepend.h"
#endif
#include "nametyp.h"
#include "occur.h"
#include "stats.h"
#include "store.h"
#include "symdump.h"
#include "tables.h"
#include "vars.h"
#include "message.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

typedef enum {
  DAlpha,
  DNumeric,
  DSymbol,
  DHelp,
  DQuit,
  DDummy
  } DumpCommand;

typedef BOOLEAN Comparator(SymbolPointer, SymbolPointer);

typedef BOOLEAN AllowSymbol(Status);

typedef SymbolPointer *SymbolArray;

static CARDINAL CountTable(SymbolPointer *symbolTable)
/*Count the total number of entries in a symbol table*/
{
  CARDINAL      index,
                count = 0;
  SymbolPointer symbolPointer;

  for (index = 0; index < MaxSymbol; index++) {
    symbolPointer = symbolTable[index];
    while (symbolPointer != NULL) {
      count++;
      symbolPointer = symbolPointer->link;
    }; /* while */
  }; /* while */
  return count;
} /* End CountTable */

static void SetCTitle(char *t)
{
  Name name;

  name.length = strlen(t);
  name.key = t;
  SetTitle(name);
} /* End SetCTitle */

#ifndef AAsm
static void SetupTable(SymbolArray array, AllowSymbol *allows, CARDINAL *length,
    BOOLEAN area,  CARDINAL areaNum)
{
#else
static void SetupTable(SymbolArray array, AllowSymbol *allows, CARDINAL *length)
{
#endif
/*Set up the array of symbols to be sorted*/
  CARDINAL i;
  SymbolPointer symbolPointer;

  *length = 0;
  for (i = 0; i < MaxSymbol; i++) {
    symbolPointer = symbolTable[i];
    while (symbolPointer != NULL) {
#ifndef AAsm
      if (allows(symbolPointer->u) &&
        (!area || (symbolPointer->area == areaNum))) {
#else
      if (allows(symbolPointer->u)) {
#endif
        array[(*length)++] = symbolPointer;
      };
      symbolPointer = symbolPointer->link;
    }; /* while */
  };
} /* End SetupTable */

static void Sort(SymbolArray data, CARDINAL length, 
                 Comparator *precedes)
{
  CARDINAL      step,
                i,
                j,
                k;
  SymbolPointer x;

  if (length == 0) { return; };
  step = length;
  do {
    step = (step + 2) / 3;
    for (i = step+1; i <= length; i++) {
      j = i-1;
      do {
        if (j <= step-1) { break; };
        k = j - step;
        if (precedes (data[k], data[j])) { break; };
        x = data[j];
        data[j] = data[k];
        data[k] = x;
        j = k;
      } while (1);
    };
  } while (step > 1);
} /* End Sort */

static void SetCSubtitle(char *t)
{
  Name name;

  name.length = strlen(t);
  name.key = t;
  SetSubtitle(name);
} /* End SetCSubtitle */

static void print_xref_table(SymbolArray table, CARDINAL length, 
                       char *subtitle)
{
  CARDINAL i,
           j;

  PageModeOn();
  SetCSubtitle(subtitle);
  for (i = 0; i < length; i++) {
    for (j = 0; j < table[i]->key.length; j++) lprintf("%c",table[i]->key.key[j]);
    lprintf(" %08lX\n",table[i]->value.card);
    PrintResults(table[i]);
    lprintf("\n");
  }; /* for */
} /* End print_xref_table */

#ifndef AAsm
static void sort_xref_table(SymbolArray table, AllowSymbol *allows, 
    Comparator *precedes, char *subtitle, BOOLEAN area)
{
#else
static void sort_xref_table(SymbolArray table, AllowSymbol *allows,
    Comparator *precedes, char *subtitle)
{
#endif
  CARDINAL length;
#ifndef AAsm
  CARDINAL areaNum,
           total = (area) ? totalAreas : 1;
  for (areaNum = 1; areaNum <= total; areaNum++) {
    SetupTable(table, allows, &length, area, areaNum);
    if (length == 0) { continue; };
#else
  {
    SetupTable(table, allows, &length);
    if (length == 0) { return; };
#endif
    Sort(table, length, precedes);
    print_xref_table(table, length, subtitle);
    if (length != 1)
      lprintf(symdump_xref_table_symbols,length);
    else
      lprintf(symdump_xref_table_symbol);
  };
} /* End sort_xref_table */

static BOOLEAN AllowRelocatable(Status status)
{
  return (status.s.sdt == FixedSDT) && (status.s.fst == RelocatableFST);
} /* End AllowRelocatable */

static BOOLEAN AllowAbsolute(Status status)
{
  return (status.s.sdt == FixedSDT) && (status.s.fst == AbsoluteFST);
} /* End AllowAbsolute */

static BOOLEAN AllowRegisterRelative(Status status)
{
  return (status.s.sdt == FixedSDT) && (status.s.fst == RegisterRelativeFST);
} /* End AllowRegisterRelative */

#ifndef AAsm
static BOOLEAN AllowExternal(Status status)
{
  return (status.s.sdt == ExternalSDT);
} /* End AllowExternal */
#endif

static BOOLEAN AlphaCompare(SymbolPointer a, SymbolPointer b)
/*Compare the names of two symbols*/
{
  CARDINAL i;
  Name c, d;

  c = a->key;  d = b->key;
  i = 0;
  do {
    if (i >= c.length) { return TRUE; };
    if ((i >= d.length) || (c.key[i] > d.key[i])) { return FALSE; };
    if (c.key[i] < d.key[i]) { return TRUE; };
    i++;
  } while (1);
} /* End AlphaCompare */

void xref_table(void)
/* Handle the -xref -quit option */
{
  SymbolArray tempTable;
  CARDINAL    size = CountTable(symbolTable);
  if (size == 0) {
    lprintf("%s",symdump_xref_table_no_syms);
  } else {
    tempTable = (SymbolArray) mymalloc((size_t)size * sizeof(SymbolPointer));
    SetCTitle(symdump_xref_table_alpha);
#ifndef AAsm
    sort_xref_table(tempTable, AllowRelocatable, AlphaCompare,
      symdump_xref_table_reloc, TRUE);
    sort_xref_table(tempTable, AllowAbsolute, AlphaCompare,
      symdump_xref_table_abs, FALSE);
    sort_xref_table(tempTable, AllowRegisterRelative, AlphaCompare,
      symdump_xref_table_reg_rel, FALSE);
    sort_xref_table(tempTable, AllowExternal, AlphaCompare,
      symdump_xref_table_extern, FALSE);
#else
    sort_xref_table(tempTable, AllowRelocatable, AlphaCompare,
      symdump_xref_table_reloc);
    sort_xref_table(tempTable, AllowAbsolute, AlphaCompare,
      symdump_xref_table_abs);
    sort_xref_table(tempTable, AllowRegisterRelative, AlphaCompare,
      symdump_xref_table_reg_rel);
#endif
    if (size!=1)
      lprintf(symdump_xref_table_symtabs,size);
    else
      lprintf(symdump_xref_table_symtab);
    PageModeOff();
    free(tempTable);
  }
}

/* End symdump.c */
