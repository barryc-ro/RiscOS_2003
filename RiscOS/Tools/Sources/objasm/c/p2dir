/* -> p2dir.c
 * Title:  Pass 2 directive handler
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include "hostdep.h"
#ifndef AAsm
#  include "aof.h"
#  include "asm.h"
#  include "aofvars.h"
#  include "tokens.h"
#endif
#include "code.h"
#include "condasm.h"
#include "constant.h"
#include "errors.h"
#include "expr.h"
#include "exprtyp.h"
#include "formatio.h"
#include "fpio.h"
#include "getdir.h"
#include "getline.h"
#include "globvars.h"
#include "initdir.h"
#include "listing.h"
#include "literals.h"
#include "locallab.h"
#include "macrotyp.h"
#include "nametyp.h"
#include "p1line.h"
#include "p2dir.h"
#include "store.h"
#include "tables.h"
#include "vars.h"
#include "message.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

static char mnoteLine[MaxLineLength+1];

static void CancelListForCond(void)
{
  if (!((1 << ListCondPC) & listStatus)) CancelLineList();
} /* End CancelListForCond */

static void CancelListForSet(void)
{
  if (!((1 << ListSETPC) & listStatus)) CancelLineList();
} /* End CancelListForSet */

BOOLEAN P2Directive(char *line, BOOLEAN *wasLink,
                    BOOLEAN
        *passEnded, char **linkPointer)
/*
The returned value indicates error OR handled (i.e. was directive)
*/
{
  CARDINAL              lineIndex,
                        i,
                        value;
  Name                  name,
                        string;
#ifndef AAsm
  SymbolPointer         eSymbolPointer;
#endif
  SymbolPointer         symbolPointer;
  BOOLEAN               symbolFound,
#ifndef AAsm
                        label_found = FALSE,
                        local_label_found = FALSE,
#endif
                        ifBool,
                        defined;
  DirectiveNumber       directiveNumber;
#ifndef AAsm
  AsDirectiveNumber     as_dir_num;
#endif
  OperandType           operandType;
  StructureStackElement s;
  NamePointer           namePointer;
  ReadResponse          readResponse;

  lineIndex = 0;
  symbolFound =  SymbolTest(line, &lineIndex, &name);
#ifndef AAsm
  if (!isWhiteSpace(line[lineIndex])) {
    if (symbolFound) {
      if ((line[lineIndex] != Colon) || (input_style != AsIS) ||
      (!isWhiteSpace(line[lineIndex]))) {
        lineIndex++;
        return FALSE;
      };
      if (input_style == AsIS && line[lineIndex]==Colon) lineIndex++;
      label_found = TRUE;
    } else {
      /* May be local label in as style */
      if (isdigit(*line)) {
        (void) DecimalNumber(line, &lineIndex);
        if ((line[lineIndex] == Colon) && (isWhiteSpace(line[lineIndex])) &&
          (input_style == AsIS)) {
          lineIndex++;
          local_label_found = TRUE;
        } else {
          /* No it's not! */
          if (line[lineIndex]==Colon) lineIndex++;
          return FALSE;
        }; /* if */
      } else {
        return FALSE;
      };
    };
  }; /* if */
  lineIndex++; while (isWhiteSpace(line[lineIndex])) lineIndex++;
#else
  if ((!isWhiteSpace(line[lineIndex])) || AllComment(line, &lineIndex)) return FALSE;
#endif

  /*Now we should be pointing at the directive name*/
  if (OneCharacterDirective(line, &lineIndex, &directiveNumber)
    || (DirTest(line, &lineIndex, &string) &&
        NameDirective(&directiveNumber, string))) {
#ifndef AAsm
    /*
     * Here we've spotted a directive.
     * This implies ObjAsm format or as format.
     */
    if (directiveNumber == TStyleChange) {
      if (input_style == ObjAsmIS) {
        return FALSE;
        /* . is a bad directive in established ObjAsm style */
      } else {
        lineIndex++;
        /* Now we must look for the as type directive */
        if (DirTest(line, &lineIndex, &string) &&
          AsNameDirective(&as_dir_num, string)) {
          int alignment = as_directive_alignment[as_dir_num];
          if (alignment != 1)
            while ((programCounter % alignment) != 0) CodeByte(0);
          if (local_label_found) {
            value = 0;
            LabelDef(line, &value);
          };
          if ((directiveNumber =
               (DirectiveNumber) asToObj[as_dir_num]) == TStyleChange)
          {
            switch (as_dir_num) {
              /* Listing directives */
              case AsListOff:
              nextListState &= ~(1 << ListSETPC);
              break;

              case AsListOn:
              nextListState |= 1 << ListSETPC;
              break;

              case AsListFull:
              /* What does this mean? */
              break;

              case AsPage:
              if ((1 << ListPC) & listStatus) {
                ListLine();
                PageThrow();
              }; /* if */
              break;

  /* Segment directives */
              case AsText:
              case AsData:
              case AsBss:
              switch (segment_type) {
                case CodeST:
                code_size = programCounter;
                break;
                case DataST:
                data_size = programCounter;
                break;
                case BssST:
                bss_size = programCounter;
              };
              switch (as_dir_num) {
                case AsText:
                programCounter = code_size;
                area_is_code = TRUE;
                noInitArea = FALSE;
                segment_type = CodeST;
                break;
                case AsData:
                programCounter = data_size;
                area_is_code = FALSE;
                noInitArea = FALSE;
                segment_type = DataST;
                break;
                case AsBss:
                programCounter = bss_size;
                area_is_code = FALSE;
                noInitArea = TRUE;
                segment_type = BssST;
              };
              areaNumber = segment_type;
              break;

/* These two irrelevant on ARM */
              case AsEven:
              case AsOdd:
              break;

  /* Identifier control */
              case AsCommon:
              /* What's this mean? */
              break;

  /* Space allocation and value planting */
              case AsAscii:
              /* Plant ascii string */
              case AsAsciz:
              /* Plant ascii string zero terminated */
              StringExpr(line, &lineIndex, &string);
              for (i = 0; i < string.length; i++) CodeByte(string.key[i]);
              if (as_dir_num == AsAsciz) CodeByte(0);
              break;

              case AsExtend:
              /* Plant FP extended number. Is this allowed? */
              break;

              case AsPacked:
              /* Plant FP packed number. Is this allowed? */
              break;

              default:
              case AsTitle:
              case AsAlign:
              case AsPool:
              case AsEqu:
              case AsRequ:
              case AsGlobal:
              case AsFequ:
              case AsCequ:
              case AsPequ:
              case AsSpace:
              case AsByte:
              case AsShort:
              case AsLong:
              case AsFloat:
              case AsDouble:
              Report(FatalError,p1dir_p1dir_unexpected);
            };
            goto check_for_more_lines;
          };
        } else {
          return TRUE;
        }; /* if */
      }; /* if */
    } else {
      if (input_style == AsIS) {
        return FALSE;
        /*
         * All ObjAsm directives currently considered bad within as.
         * This may change if we decide to extend as to allow
         * some sensible features to be added, such as conditional
         * assembly, assembly time variables etc.
         */
      }; /* if */
    }; /* if */
#endif
  } else {
    return FALSE;
  }; /* if */
  if (notSkipping || allowDirInCond[directiveNumber]) {
/*
    TRY
*/
    switch (directiveNumber) {
      case TIF:
      s.type = ConditionalSSET;
      s.u.condEl.state = listStatus; /* Stack listing status */
      s.u.condEl.notSkipping = notSkipping;
      if (notSkipping) {
        if (!LogicalExpr(line, &lineIndex))
        { notSkipping = FALSE;
          if (terseState) nextListState &= ~(1 << ListPC);
        }
      } else {
        while (line[lineIndex] != CR) lineIndex++;
      }
      if (!Stack(s)) break;
      CancelListForCond();
      break;

      case TELSE:
      if (!Unstack(&s)) break;
      if (s.type != ConditionalSSET) {
        if (s.type != WhileSSET) Stack(s);
        Report(AsmError,errors_StructErr);
        exception = StackErr;
        break;
      }
      Stack(s); /* put it back */
      if (notSkipping) {
        notSkipping = FALSE;
        if (terseState) nextListState &= ~(1 << ListPC);
      } else if (s.u.condEl.notSkipping) {
        notSkipping = TRUE;
        if ((1 << ListPC) & s.u.condEl.state) nextListState |= (1 << ListPC);
      }
      CancelListForCond();
      break;

      case TFI:
      if (!Unstack(&s)) break;
      if (s.type != ConditionalSSET) {
        if (s.type != WhileSSET) Stack(s);
        Report(AsmError,errors_StructErr);
        exception = StackErr;
        break;
      }
      nextListState = s.u.condEl.state;
      notSkipping = s.u.condEl.notSkipping;
      if (((1 << ListPC) & nextListState) && !((1 << ListPC) & listStatus)) {
        listStatus |= 1 << ListPC;
        ListLineNumber();
      }
      CancelListForCond();
      break;

      case TMNOTE:
      ListLine();
      value = ConstantExpr(line, &lineIndex, FALSE, &defined);
      lineIndex++;
      StringExpr(line, &lineIndex, &name);
      memcpy(mnoteLine, name.key, (size_t)(name.length));
      mnoteLine[name.length] = 0;
      Report(ReportInfo,mnoteLine);
      break;

      case THASH:
      value = ConstantExpr(line, &lineIndex, FALSE, &defined);

      switch (variableCounter.type) {
        case FixedVCT:
        ListWordValue(variableCounter.u.offset);
        variableCounter.u.offset += value;
        break;

        case RelativeVCT:
        ListWordValue(variableCounter.u.relativeVC.offset);
        variableCounter.u.relativeVC.offset += value;

      }; /* case */
      break;

      case TSTAR:
#ifndef AAsm
      if ((input_style == AsIS) && (line[lineIndex] == CurlyBra)) {
        goto try_rlist;
      };
#endif
      value =
          NotStringExpr(line, &lineIndex, &i, &operandType, FALSE, &defined);
      if (errorFound) return TRUE;
      ListWordValue(value);
      symbolPointer = LookupRef(name, FALSE);
      if (symbolPointer->u.s.sds == DefinedSDS) return TRUE;
      if (errorFound) {
        symbolPointer->u.s.sds = UndefinableSDS;
        return TRUE;
      }; /* if */
      symbolPointer->value.card = value;
      switch (operandType) {
        case ConstantOT:
        symbolPointer->u.s.fst = AbsoluteFST;
        break;

        case PCRelOT:
        symbolPointer->u.s.fst = RelocatableFST;
        break;

        case RegRelOT:
        symbolPointer->u.s.fst = RegisterRelativeFST;
        symbolPointer->u.s.fsr = (BITFIELD) i;
      }; /* case */
      symbolPointer->u.s.sds = DefinedSDS;
      symbolPointer->length = 0;
      break;

      case TEQUAL:
      if (symbolFound && ((symbolPointer=LookupRef(name,FALSE))!=0)) {
        if ((keepingAll && symbolPointer->u.s.at==NoneAT) ||
                           symbolPointer->u.s.at==KeptAT) {
          AddSymbolToTable(symbolPointer, name, FALSE, FALSE);
          symbolPointer->u.s.at = KeptAT;
        }
      }
      do {
        value = StringOrConstantExpr(line, &lineIndex, FALSE, &operandType);
        if (errorFound) return TRUE;
        switch (operandType) {
          case ConstantOT:
          if (value >= 0x100) {
            Report(AsmError,errors_ImmValRange,value);
            return TRUE;
          }; /* if */
          CodeByte((int)value & 0xff);
          break;

          case StringOT:
          namePointer = (NamePointer)value;
          i = 0;
          while (i < namePointer->length) CodeByte(namePointer->key[i++]);

        }; /* case */
        if (line[lineIndex] != Comma) { break; }; /* if */
        lineIndex++;
      } while (1); /* loop */
      break;

      case TPERC:
      if (symbolFound && ((symbolPointer=LookupRef(name,FALSE))!=0)) {
        if ((keepingAll && symbolPointer->u.s.at==NoneAT) ||
                           symbolPointer->u.s.at==KeptAT) {
          AddSymbolToTable(symbolPointer, name, FALSE, FALSE);
          symbolPointer->u.s.at = KeptAT;
        }
      }
      value = ConstantExpr(line, &lineIndex, FALSE, &defined);
      while (value-- != 0) { CodeByte(0); };
      break;

      case TDCW:
      if (symbolFound && ((symbolPointer=LookupRef(name,FALSE))!=0)) {
        if ((keepingAll && symbolPointer->u.s.at==NoneAT) ||
                           symbolPointer->u.s.at==KeptAT) {
          AddSymbolToTable(symbolPointer, name, FALSE, FALSE);
          symbolPointer->u.s.at = KeptAT;
        }
      }
      /*Now handle value to be output */
      if (programCounter & 1) CodeByte(0);
      do {
        value = ConstantExpr(line, &lineIndex, FALSE, &defined);
        if (errorFound) return TRUE;
        if (value >= 0x10000) {
          Report(AsmError,errors_ImmValRange,value);
          return TRUE;
        }
        if (target_is_big_endian)
        { CodeByte(((int)value >> 8) & 255);
          CodeByte((int)value & 255);
        }
        else
        { CodeByte((int)value & 255);
          CodeByte(((int)value >> 8) & 255);
        }
        if (line[lineIndex] != Comma) break;
        lineIndex++;
      } while (1);
      break;

      case TAMP:
      if (symbolFound && ((symbolPointer=LookupRef(name,FALSE))!=0)) {
        if ((keepingAll && symbolPointer->u.s.at==NoneAT) ||
                           symbolPointer->u.s.at==KeptAT) {
          AddSymbolToTable(symbolPointer, name, FALSE, FALSE);
          symbolPointer->u.s.at = KeptAT;
        }
      }
      /*Now handle value to be output */
      while ((programCounter % 4) != 0) CodeByte(0);
      do {
#ifndef AAsm
        eSymbolPointer = ExternalExpr(line, &lineIndex, &value);
        /* Just use first one for the moment */
        if (eSymbolPointer == NULL) {
          value = ConstantOrAddressExpr(line, &lineIndex, &operandType, FALSE,
            &defined);
          if ((operandType == PCRelOT))
          { Relocation reloc;
            if (output_style == AofOS)
            { /* Now done with type 2 relocations */
              reloc.aof_reloc.rel_offset = (int32)programCounter;
              reloc.aof_reloc.rel_flags = REL_TYPE2 | REL_LONG |
                (areaNumber - 1L);
                /* Note inconsistent use of area number */
            }
            else
            { int a[2];
              a[0] = 0; a[1] = 0;
              memcpy(&reloc, a, 8); /* Ensure all fields clear first */
              reloc.aout_reloc.r_address = programCounter;
              reloc.aout_reloc.r_symbolnum = (area_is_code) ? N_TEXT : N_DATA;
                /* No symbol involved, but state area to relocate from */
              reloc.aout_reloc.r_length = 2; /* long */
              reloc.aout_reloc.r_pcrel = 0;  /* No PC relocation needed */
              reloc.aout_reloc.r_extern = 0; /* Don't use symbol */
              reloc.aout_reloc.r_neg = 0;
              /*
               * Now if this is a value within the data area it needs
               * a_text adding in to make it relative to the entire output
               */
              if (!area_is_code) value += (CARDINAL)aout_header.a_text;
            }
            PutReloc(reloc);
          }
        }
        else
        { Relocation reloc;
          if (output_style == AofOS)
          { /* Now done with type 2 relocations */
            reloc.aof_reloc.rel_offset = (int32)programCounter;
            reloc.aof_reloc.rel_flags = REL_TYPE2 | REL_LONG |
              ((eSymbolPointer->u.s.sdt == ExternalSDT) ?
               (REL_A | (eSymbolPointer->aOFData.symbolId & 0xffffff)) :
               (eSymbolPointer->area - 1L));
              /* Note inconsistent use of area number */
          }
          else
          { int a[2];
            a[0] = 0;  a[1] = 0;
            memcpy(&reloc, a, 8); /* Ensure all fields clear first */
            reloc.aout_reloc.r_address = programCounter;
            if (eSymbolPointer->u.s.sdt == ExternalSDT) {
              reloc.aout_reloc.r_symbolnum =
                 (int)(eSymbolPointer->aOFData.symbolId);
              reloc.aout_reloc.r_length = 2; /* long */
              reloc.aout_reloc.r_pcrel = 0;  /* No PC relocation needed */
              reloc.aout_reloc.r_extern = 1; /* Use symbol */
            } else {
              reloc.aout_reloc.r_length = 2; /* long */
              reloc.aout_reloc.r_pcrel = 0;  /* No PC relocation needed */
              reloc.aout_reloc.r_extern = 0; /* Don't use symbol */
              if (input_style == ObjAsmIS) {
                aof_area *dec = GetArea(eSymbolPointer->area);
                reloc.aout_reloc.r_symbolnum =
                    (dec->area_attributes & AOF_CODEAT) ? N_TEXT :
                        (dec->area_attributes & AOF_0INITAT) ? N_BSS : N_DATA;
                /*
                 * Now if this is a value within the data or bss areas it needs
                 * a_text or a_text+a_data adding in to make it relative
                 * to the entire output.
                 */
                if (!(dec->area_attributes & AOF_CODEAT)) {
                  value += (CARDINAL)aout_header.a_text;
                  if (dec->area_attributes & AOF_0INITAT) value +=
                    (CARDINAL)aout_header.a_data;
                }; /* if */
              } else {
                reloc.aout_reloc.r_symbolnum = (eSymbolPointer->area == CodeST)
                  ? N_TEXT : (eSymbolPointer->area == DataST) ? N_DATA : N_BSS;
                /*
                 * Now if this is a value within the data or bss areas it needs
                 * a_text or a_text+a_data adding in to make it relative
                 * to the entire output.
                 */
                if (eSymbolPointer->area != CodeST) {
                  value += (CARDINAL)aout_header.a_text;
                  if (eSymbolPointer->area != DataST) value +=
                  (CARDINAL)aout_header.a_data;
                }
              }
            }
            reloc.aout_reloc.r_neg = 0;
          }
          PutReloc(reloc);
        }
#else
        value = ConstantExpr(line, &lineIndex, FALSE, &defined);
#endif
        if (errorFound) return TRUE;
        CodeDataWord(value);
        if (line[lineIndex] != Comma) break;
        lineIndex++;
      } while (1);
      break;

      case THAT:
      value =
        ConstantOrAddressExpr(line, &lineIndex, &operandType, FALSE, &defined);
      switch (operandType) {
        case ConstantOT:
        if (line[lineIndex] == Comma) {
          lineIndex++;
          i = RegisterExpr(line, &lineIndex);
          variableCounter.type = RelativeVCT;
          variableCounter.u.relativeVC.reg = i;
          variableCounter.u.relativeVC.offset = value;
        } else {
          variableCounter.type = FixedVCT;
          variableCounter.u.offset = value;
        }; /* if */
        break;

        case PCRelOT:
        variableCounter.type = RelativeVCT;
        variableCounter.u.relativeVC.reg = 15;
        variableCounter.u.relativeVC.offset = value;
      }; /* case */
      break;

      case TEND:
      *passEnded = TRUE;
      break;

      case TLNK:
      *wasLink = TRUE;
      *linkPointer = line + lineIndex;
      break;

      case TGET:
      GetDir(line, &lineIndex);
      break;

#ifdef BINARY_INCLUDES
      case TGETBIN:                   /* added by NRaine */
      GetBin2(line, &lineIndex);
      break;
#endif

      case TORG:
      programCounter = ConstantExpr(line, &lineIndex, FALSE, &defined);
#ifndef AAsm
      programCounter &= ~3;
#endif
      asmMode = AbsoluteAM;
      break;

      case TOPT:
      value = ConstantExpr(line, &lineIndex, FALSE, &defined);
      i = value % 4;
      if (i == 1) nextListState |= 1 << ListPC;
      else if (i == 2) nextListState &= ~(1 << ListPC);
      i = value / 4;
      if ((i & 1) && ((1 << ListPC) & listStatus)) {
        ListLine();
        PageThrow();
      }; /* if */
      if (i & 2) lineNumber = 0;
      i = i / 4;
      if ((i % 4) == 1) nextListState |= 1 << ListSETPC;
      else if ((i % 4) == 2) nextListState &= ~(1 << ListSETPC);
      i = i / 4;
      if ((i % 4) == 1) nextListState |= 1 << ListMacExpPC;
      else if ((i % 4) == 2) nextListState &= ~(1 << ListMacExpPC);
      i = i / 4;
      if ((i % 4) == 1) nextListState |= 1 << ListMacCallPC;
      else if ((i % 4) == 2) nextListState &= ~(1 << ListMacCallPC);
      i = i / 16;
      if ((i % 4) == 1) nextListState |= 1 << ListCondPC;
      else if ((i % 4) == 2) nextListState &= ~(1 << ListCondPC);
      i = i / 4;
      if ((i % 4) == 1) nextListState |= 1 << ListMendPC;
      else if ((i % 4) == 2) nextListState &= ~(1 << ListMendPC);
      i = i / 4;
      if ((i % 4) == 1) nextListState |= 1 << ListOptsPC;
      else if ((i % 4) == 2) nextListState &= ~(1 << ListOptsPC);
      if (!((1 << ListOptsPC) & listStatus)) CancelLineList();
      break;

      case TTTL:
      while (isWhiteSpace(line[lineIndex])) lineIndex++;
      value = lineIndex;
      while (line[lineIndex] != CR) lineIndex++;
      name.length = lineIndex - value;
      name.key = line + value;
      SetTitle(name);
      break;

      case TSUBTTL:
      while (isWhiteSpace(line[lineIndex])) lineIndex++;
      value = lineIndex;
      while (line[lineIndex] != CR) lineIndex++;
      name.length = lineIndex - value;
      name.key = line + value;
      SetSubtitle(name);
      break;

      case TRN:
      case TCN:
      case TCP:
      case TFN:
      ListRegValue(ConstantExpr(line, &lineIndex, FALSE, &defined));
      break;

      case TWHILE:
      s.type = WhileSSET;
      s.u.whileEl.lineNumber = lineNumber-1;
      s.u.whileEl.pointer = oldPointerInFile;
      s.u.whileEl.state = listStatus;
      s.u.whileEl.notSkipping = notSkipping;
      if (!Stack(s)) break;
      if (notSkipping) {
        if (!LogicalExpr(line, &lineIndex)) {
          notSkipping = FALSE;
          if (terseState) nextListState &= ~(1 << ListPC);
        }
      } else {
        while (line[lineIndex] != CR) lineIndex++;
      }
      CancelListForCond();
      break;

      case TWEND:
      WendDir();
      if (exception != None) break;
      CancelListForCond();
      break;

      case TMACRO:
      inMacroDef = TRUE;
      do {
        ListLine();
        ifBool = GetLine(&line, FALSE);
        if (exception == EndOfInput) break;
        InitLineList();
        ListLineNumber();
        ListAddress();
        lineIndex = 0;
        if ((!AllComment(line, &lineIndex)) && (lineIndex != 0) &&
          DirTest(line, &lineIndex, &name) &&
          NameDirective(&directiveNumber, name) &&
          AllComment(line, &lineIndex) && (directiveNumber == TMEND)) break;
      } while (1); /* loop */
      inMacroDef = FALSE;
      break;

      case TMEXIT:
      if (MexitDir() && exception == None) return TRUE;
      break;

      case TMEND:
      if (MendDir() && exception == None) return TRUE;
      break;

      case TGBLA:
      ifBool = SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupGlobalA(name);
      symbolPointer->value.card = 0;/*Re-initialise value*/
      symbolPointer->u.s.p2d = 1;
      CancelListForSet();
      break;

      case TGBLL:
      ifBool = SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupGlobalL(name);
      symbolPointer->value.bool = FALSE;/*Re-initialise value*/
      symbolPointer->u.s.p2d = 1;
      CancelListForSet();
      break;

      case TGBLS:
      ifBool = SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupGlobalS(name);
      symbolPointer->value.ptr->length = 0;
      symbolPointer->u.s.p2d = 1;
      CancelListForSet();
      break;

      case TLCLA:
      ifBool = SymbolTest(line, &lineIndex, &name);
      symbolPointer = DefineLocalA(name);
      symbolPointer->value.card = 0;/*Re-initialise value*/
      symbolPointer->u.s.p2d = 1;
      CancelListForSet();
      break;

      case TLCLL:
      ifBool = SymbolTest(line, &lineIndex, &name);
      symbolPointer = DefineLocalL(name);
      symbolPointer->value.bool = FALSE;/*Re-initialise value*/
      symbolPointer->u.s.p2d = 1;
      CancelListForSet();
      break;

      case TLCLS:
      ifBool = SymbolTest(line, &lineIndex, &name);
      symbolPointer = DefineLocalS(name);
      symbolPointer->value.ptr->length = 0;
      symbolPointer->u.s.p2d = 1;
      CancelListForSet();
      break;

      case TSETA:
      value = ConstantExpr(line, &lineIndex, FALSE, &defined);
      symbolPointer = LookupLocalA(name);
      if (symbolPointer == NULL) symbolPointer = LookupGlobalA(name);
      symbolPointer->value.card = value;
      ListWordValue(value);
      CancelListForSet();
      break;

      case TSETL:
      ifBool = LogicalExpr(line, &lineIndex);
      symbolPointer = LookupLocalL(name);
      if (symbolPointer == NULL) symbolPointer = LookupGlobalL(name);
      symbolPointer->value.bool = ifBool;
      ListBoolValue(ifBool);
      CancelListForSet();
      break;

      case TSETS:
      StringExpr(line, &lineIndex, &string);
      symbolPointer = LookupLocalS(name);
      if (symbolPointer == NULL) symbolPointer = LookupGlobalS(name);
      ListStringValue(string);
      symbolPointer->value.ptr->length = string.length;
      if (string.length > symbolPointer->value.ptr->maxLength) {
        if (symbolPointer->value.ptr->maxLength > 0)
          free(symbolPointer->value.ptr->key);
        symbolPointer->value.ptr->key = (char *) mymalloc((size_t)(string.length));
        symbolPointer->value.ptr->maxLength = string.length;
      }; /* if */
      if (string.length > 0)
        memcpy(symbolPointer->value.ptr->key, string.key,
            (size_t)(string.length));
      CancelListForSet();
      break;

      case TASSERT:
      if (!(AssertExpr(line, &lineIndex, FALSE, &defined) || errorFound)) {
        Report(AsmError,p1dir_p1dir_assert_failed);
      }; /* if */
      break;

      case TROUT:
      while ((programCounter % 4) != 0) CodeByte(0);
      symbolPointer = (symbolFound) ? LookupFixed(name, FALSE) : NULL;
      NewRoutine(symbolPointer);
      break;

      case TALIGN:
      value = (AllComment(line, &lineIndex)) ? 4 :
        ConstantExpr(line, &lineIndex, FALSE, &defined);
      if (line[lineIndex] == Comma) {
        lineIndex++;
        i = ConstantExpr(line, &lineIndex, FALSE, &defined);
      } else i = 0;
      /*Now align*/
#ifndef AAsm
      if (input_style == AsIS) {
        i = value;
        value = 4;
      }; /* if */
#endif
      while ((programCounter - i) % value != 0) CodeByte(0);
      break;

      case TLTORG:
      LiteralOrg();
      break;

#ifndef AAsm
      case TIMPORT:
#ifdef HOST_IS_RISCOS
      if (absolute_flag)
          return TRUE;
#endif
      (void) SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupRef(name, FALSE);
      if (symbolPointer->u.s.at == NoneAT) {
        AddSymbolToTable(symbolPointer, name, TRUE, symbolPointer->value.bool);
        symbolPointer->u.s.at = ExportedAT;
      }; /* if */
      break;

      case TEXPORT:
#ifdef HOST_IS_RISCOS
      if (absolute_flag)
          return TRUE;
#endif
      for (;;)
      { (void) SymbolTest(line, &lineIndex, &name);
        symbolPointer = LookupRef(name, FALSE);
        if (symbolPointer!=NULL) {
          if ((symbolPointer->u.s.sds != DefinedSDS) &&
              ((input_style == ObjAsmIS) ||
              (symbolPointer->u.s.sds != UndefinedSDS))) {
            Report(AsmError,errors_UnDefExp);
            return TRUE;
          }
          if (symbolPointer->u.s.at == ExportAT) {
            AddSymbolToTable(symbolPointer, name, TRUE, FALSE);
            symbolPointer->u.s.at = ExportedAT;
          }
        }
        if (AllComment(line, &lineIndex)) break;
        lineIndex++; while (line[lineIndex] == Space) lineIndex++;
      }
      break;

      case TSTRONG:
#ifdef HOST_IS_RISCOS
      if (absolute_flag)
          return TRUE;
#endif
      (void) SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupRef(name, FALSE);
      { aof_symbol *sy = &extern_symbolTable[symbolPointer->aOFData.symbolId];
        sy->sym_value = programCounter;
        sy->sym_name = symbolPointer->aOFData.stringPosition;
        sy->sym_AT = 0;
        sy->sym_AT |= SYM_STRONGAT | SYM_REFAT | SYM_LOCALDEFAT;
        if (asmMode == AbsoluteAM) {
          sy->sym_AT |= SYM_ABSAT;
        }
        sy->sym_areaname = GetAreaName(areaNumber);
      };
      i = symbolPointer->aOFData.stringPosition;
      memcpy(stringTable+i, name.key, (size_t)(name.length));
      stringTable[i+name.length] = 0;
      break;

      case TKEEP:
#ifdef HOST_IS_RISCOS
      if (absolute_flag)
          return TRUE;
#endif
      if (AllComment(line, &lineIndex)) {
        return TRUE;
      }
      /* fall through */
      case TLEAF:
      (void)  SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupRef(name, FALSE);
      if (symbolPointer->u.s.sds != DefinedSDS) {
        Report(AsmError,errors_UnDefExp);
        return TRUE;
      }
      if (symbolPointer->u.s.at == NoneAT) {
        AddSymbolToTable(symbolPointer, name, FALSE, FALSE);
        symbolPointer->u.s.at = KeptAT;
      }
      break;

      case TAREA:
      (void)  SymbolTest(line, &lineIndex, &name);
      symbolPointer = LookupFixed(name, FALSE);
      if (areaNumber != 0)
      { LiteralOrg();
        CodeEnd();
        if (output_style == AofOS) RelocEnd();
      }
      AddAreaDeclaration(symbolPointer, 0, 0);
      /* Fix up the start value of the Area Name symbol if an ABSOLUTE area */
      if (currArea->dec.area_attributes & AOF_ABSAT) {
        symbolPointer->value.card=currArea->dec.area_base;
      }
      RelocInit();
      areaNumber++;
      if (symbolPointer->u.s.at == NoneAT) {
        AddSymbolToTable(symbolPointer, name, FALSE, FALSE);
        symbolPointer->u.s.at = KeptAT;
      }
      if (asmMode != AbsoluteAM) programCounter = 0;
      NewRoutine(symbolPointer);
      break;

#else
      case TLEADR:
      value = ConstantExpr(line, &lineIndex, FALSE, &defined);
      if (errorFound) return TRUE;
      loadAddress = value;
      break;

      case TAREA:
      /* ignore */
      break;
#endif

      case TDCFS:
      /*Now handle value to be output */
      while ((programCounter % 4) != 0) CodeByte(0);
      do {
        readResponse = Read(line, &lineIndex, Single, &value, &i);
        CodeWord(value);
        while (isWhiteSpace(line[lineIndex])) lineIndex++;
        if (line[lineIndex] != Comma) break;
        lineIndex++;
      } while (1);
      break;

      case TDCFD:
      /*Now handle value to be output */
      while ((programCounter % 4) != 0) CodeByte(0);
      do {
        readResponse = Read(line, &lineIndex, Double, &value, &i);
        while (isWhiteSpace(line[lineIndex])) lineIndex++;
        CodeWord(value);
        CodeWord(i);
        if (line[lineIndex] != Comma) break;
        lineIndex++;
      } while (1);
      break;

      case TRLIST:
#ifndef AAsm
try_rlist:
#endif
      while (isWhiteSpace(line[lineIndex])) lineIndex++;
      value = RegisterListExpr(line, &lineIndex);
      ListWordValue(value);
      break;

/*
      case TNOFP:
      case TENTRY:
      case TAOUT:
      case TAOF:
      break;
*/
      case TNOOP:
      CodeWord(0xe1a00000);   /* MOV r0, r0 */
      break;
    };
    if (exception != None) {
/*
      if ((exception == EndOfInput) || (exception == StackUnderflow))
        exception = FileNotFound;
      else if ((exception == StackOverflow) || (exception == StackErr)) {
        UnwindToGet();
        exception = FileNotFound;
      };
*/
      return TRUE;
    };
  }; /* if */
#ifndef AAsm
check_for_more_lines:
  (void)AllComment(line, &lineIndex);
  end_of_line = lineIndex;
#endif
  return TRUE;
} /* End P2Directive */

/* End p2dir.c */
