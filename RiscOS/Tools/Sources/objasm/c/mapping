/* -> mapping.c
 * Title:  Handle mapping symbols
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include "globvars.h"
#include "aofvars.h"
#include "mapping.h"
#include "aof.h"
#include "bytesex.h"
#include "asm.h"
#include "code.h"
#include "store.h"
#include <stdio.h>
#include <stdlib.h>

/* All work done on pass 2. Unlike ELF, which puts all the mapping symbols
 * at the start of the table, we're sticking the mapping symbols at the
 * end.
 */

#define MapAttrChunkSize 512

static char current_region;

typedef struct mapchunk {
  struct mapchunk *next;
  aof_symbol syms[MapAttrChunkSize];
} mapchunk;

static mapchunk *mapSymTable, *chunk;
static aof_symbol *symp;

static int sym;

void MapInit(void)
{
  current_region = 0;
}

/* The names are quietly tacked on to the end of the string table */
static int32 GetMapName(char r)
{
  static int32 string[26];

  if (r < 'a' || r > 'z') return 0;

  if (string[r - 'a'] == 0)
  {
    string[r - 'a'] = stringOffset;
    stringTable[stringOffset++] = '$';
    stringTable[stringOffset++] = r;
    stringTable[stringOffset++] = 0;
  }
  return string[r - 'a'];
}

int MapMaxStringSize(void)
{
  return 26*3;
}

int MapSymbols(void)
{
  return sym;
}

void MapDumpSymbols(FILE *f)
{
  mapchunk *c = mapSymTable;
  int n;

  while ((n = sym < MapAttrChunkSize ? sym : MapAttrChunkSize) != 0) {
    mapchunk *next;
    if (bytesex_reversing) {
      unsigned i = 0;
      while (i < (n * sizeof(aof_symbol))/sizeof(unsigned32)) {
        unsigned32 a = bytesex_hostval(((unsigned32 *)c->syms)[i++]);
        fwrite(&a, sizeof(unsigned32), 1, f);
      };
    } else
      /*********More work required here */
      fwrite(c->syms, sizeof(aof_symbol), n, f);
    sym -= n;
    next = c->next;
    free(c);
    c = next;
  }

  mapSymTable = chunk = NULL;
}

static void NewMappingSymbol(char r)
{
  aof_symbol *sy;
  unsigned32 at;

  if (sym++ % MapAttrChunkSize == 0) {
    mapchunk *c = mymalloc(sizeof(mapchunk));
    if (chunk)
      chunk->next = c;
    else
      mapSymTable = c;
    chunk = c;
    chunk->next = NULL;
    symp = &chunk->syms[0];
  }

  sy = symp++;

  at = SYM_DEFAT;
  if (currArea->dec.area_attributes & AOF_ABSAT) at |= SYM_ABSAT;
  if (r == 'd' || r == 'f') at |= SYM_DATAAT;
  else if (current_region == 't') at |= SYM_THUMBAT;

  sy->sym_name = GetMapName(r);
  sy->sym_AT = at;
  sy->sym_value = programCounter;
  sy->sym_areaname = GetAreaName(areaNumber);
}

static void MapRegion(char r)
{
  if (r != current_region)
  {
    current_region = r;
    NewMappingSymbol(r);
    //printf("$%c: %08lX\n", r, programCounter);
  }
}

void MapData(void)
{
  MapRegion('d');
}

void MapThumb(void)
{
  MapRegion('t');
}

void MapARM(void)
{
  MapRegion('a');
}

void MapThumbBranchLong(void)
{
  MapThumb(); /* For neatness, put any "$t" before "$b" */
  NewMappingSymbol('b');
}

/* End mapping.c */
