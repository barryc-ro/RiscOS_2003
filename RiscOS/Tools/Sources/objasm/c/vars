/* -> vars.c
 * Title:   The string variable handling stuff
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include "constant.h"
#include "errors.h"
#include "getline.h"
#include "globvars.h"
#include "macrotyp.h"
#include "nametyp.h"
#ifndef AAsm
#   include "aofvars.h"
#endif
#include "tables.h"
#include "vars.h"
#include "message.h"

#include <stdio.h>
#include <string.h>
#include <ctype.h>

BOOLEAN termin[256];

static char substLine[MaxLineLength+1];  /* rely on trailing NUL... */

#define IN_COMMENT  256   /* not a valid char... */

char *SubstituteString(char *string)
/*Substitute the string variables in an input line*/
{
  CARDINAL      i = 0,
                j = 0,
                l,
                m;
  char         *line = substLine,
                ch,
                stringValue[8];
  Name          name;
  SymbolPointer symbolPointer;
  StringName    stringName;
  int32         k;
  int           quoted = 0;

  if (string[0] == '*') return string;   /* all comment */

  while (ch = string[i], ch != CR) {
    if (ch != Dollar || quoted == IN_COMMENT) {
      if (ch == quoted)
          quoted = 0;
      else if (quoted == 0)
      {   if (ch == '\'' || ch == '\"')
              quoted = ch;
          else if (ch == CommentSymbol)
              quoted = IN_COMMENT;
      }
      line[j++] = ch;
      i++;
      if (j >= MaxLineLength) {
        Report(AsmError,errors_SubstLong);
        exception = EndOfInput;
        return line;
      }
      if (ch == Bar) {
        do {
          ch = string[i++];
          line[j++] = ch;
          if (j >= MaxLineLength) {
            Report(AsmError,errors_SubstLong);
            exception = EndOfInput;
            return line;
          }
        } while ((ch != Bar) && (ch != CR));
        if (ch == CR) { i--; j--; }; /* if */
      }
    } else {
      k = i++; /* past $*/
      if (string[i] == Dollar) {
        line[j++] = Dollar;/*contract*/
        i++;
        if (j >= MaxLineLength) {
          Report(AsmError,errors_SubstLong);
          exception = EndOfInput;
          return line;
        }; /* if */
      } else if (SymbolTest(string, &i, &name)) {
        symbolPointer = LookupLocal(name);
        if (symbolPointer == NULL) symbolPointer = LookupRef(name, TRUE);
        if ((symbolPointer != NULL) &&
          (symbolPointer->u.s.sdt == VariableSDT)) {
          /* Here we substitute */
          if (pass == 2 && !symbolPointer->u.s.p2d)
              Report(AsmError, errors_SubstNoPreDec);
          stringName.key = stringValue;
          if (symbolPointer->u.s.vst == ArithmeticVST) {
            stringName.length = 8;
            l = symbolPointer->value.card;
            for (k = 7; k >= 0; k--) {
              m = l % 0x10;
              l /= 0x10;
              stringValue[k] = (int)((m >= 10) ? m + 'A' - 10 : m + '0');
            }; /* for */
          } else if (symbolPointer->u.s.vst == LogicalVST) {
            strcpy(stringValue, (symbolPointer->value.bool) ? "T" : "F");
            stringName.length = 1;
          } else if (symbolPointer->u.s.vst == StringVST)
            stringName = *symbolPointer->value.ptr;
          if (stringName.length > 0) {
            for (k = 0; k < stringName.length; k++) {
              line[j++] = stringName.key[k];
              if (j >= MaxLineLength) {
                Report(AsmError,errors_SubstLong);
                exception = EndOfInput;
                return line;
              }
            }
          }
          /*allow terminating dot*/
          if (string[i] == Dot) i++;
        } else {
          /*Not a string symbol*/
          for (l = k; l < i; l++) {
            line[j++] = string[l];
            if (j >= MaxLineLength) {
              Report(AsmError,errors_SubstLong);
              exception = EndOfInput;
              return line;
            }
          }
        }
      } else {
        /*No symbol found*/
        line[j++] = Dollar;
        if (j >= MaxLineLength) {
          Report(AsmError,errors_SubstLong);
          exception = EndOfInput;
          return line;
        }
      }
    }
  }
  line[j] = CR;
  return line;
}

#undef IN_COMMENT

BOOLEAN SymbolTest(char *string, CARDINAL *index, Name *retSymbol)
/*Discover a symbol in line and return it in retSymbol*/
{
  char    *sy = string + *index;
  char     ch = *sy;

  if (!isalpha(ch) && ch != UnderLine)
  { /* Doesn't start with alphabetic, or underline so must be free format */
    if ((ch != Bar) || (sy[1] == Bar) || (sy[1] == CR)) return FALSE;
    sy++;
    while ((*sy != Bar) && (*sy != CR)) sy++;
    if (*sy == Bar)
    { sy++;
      retSymbol->length = (CARDINAL)(sy - string) - 2 - *index;
      retSymbol->key = string + *index + 1;
      *index = sy - string;
      return TRUE;
    }
    return FALSE;
  }
  sy++;
  while (isalnum(*sy) || (*sy == UnderLine)) sy++;
  retSymbol->key = string + *index;
  retSymbol->length = sy - retSymbol->key;
  *index = sy - string;
  return TRUE;
}

BOOLEAN DirTest(char *line, CARDINAL *index, Name *name)
/* Like symbol test but less stringent */
{
/*
  CARDINAL new = *index;

  name->key = line + new;
  if (termin[line[new]]) return FALSE;
  new++;
  while (!(termin[line[new]])) new++;
  name->length = new - *index;
  while (isWhiteSpace(line[new])) new++;
  *index = new;
  return TRUE;
*/
  line = line+*index;
  name->key = line;
  if (termin[*line]) return FALSE;
  line++;
  while (!(termin[*line])) line++;
  name->length = line - name->key;
  while (isWhiteSpace(*line)) line++;
  *index += line - name->key;
  return TRUE;
} /* End DirTest */

void Init_Variables(void)
{
  CARDINAL i;
  for (i = 0; i <= 255; i++) termin[i] = FALSE;
  termin[0] = TRUE;
  termin[CR] = TRUE;
  termin[Space] = TRUE;
  termin[SplitLine] = TRUE;
  termin[CommentSymbol] = TRUE;
}

/* End vars.c */
