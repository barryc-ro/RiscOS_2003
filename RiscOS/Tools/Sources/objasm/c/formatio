/* -> formatio.c
 * Title:  Produce formatted listings
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include <ctype.h>
#include <stdio.h>
#ifdef __STDC__
#  include <stdarg.h>
#  include <string.h>
#else
#  include <varargs.h>
#  include <strings.h>
#endif

#include "formatio.h"
#include "hostdep.h"    /* for DefaultCols, etc., via options.h, hostdep.h */
#include "constant.h"
#include "getline.h"
#include "globvars.h"
#include "nametyp.h"
#include "message.h"
#include "errors.h"
#include "fname.h"

char *currentLinePointer;
CARDINAL maxCols = DefaultCols,
        maxRows = DefaultRows;
static CARDINAL currCols,
        currRows,
        page;
static BOOLEAN  paging;
static char title[MaxLineLength+1] = "",
        subtitle[MaxLineLength+1] = "";

static FILE *listingStream = NULL;

void Init_FormatIO(void)
{
  listingStream = stdout;
}

BOOLEAN SetListingFile(char *fileName) {
  FILE *f;
  UnparsedName un;
  fname_parse(fileName,"s o",&un);
  if (un.elen==1 && (strcmp("s",un.extn)==0 || strcmp("o",un.extn)==0)) {
    Report(ReportInfo,cli_listfile_is_src_or_obj,fileName);
    return FALSE;
  }
  f=fopen(fileName, "w");
  if (f == NULL)  {
    Report(ReportInfo,cli_getinterface_list_open_fail,fileName);
    return FALSE;
  } else {
    listingStream = f;
    return TRUE;
  }
}

void PageModeOn(void)
/*Initialise the output stream*/
{
  page = 0;/*Ready to increment*/
  PageThrow();
  paging = TRUE;
} /* End PageModeOn */

void PageModeOff(void)
{
  paging = FALSE;
} /* End PageModeOff */

static void NewLine(void)
{
  fputc('\n', listingStream);
}

void PageThrow(void)
{
  currRows = maxRows;/*New page required*/
} /* End PageThrow */

static void WriteCh(char ch)
/* Write a character to the printed output stream
 * dealing with paper size considerations
 */
{
  CARDINAL index;
  if ((currRows == maxRows) && paging) {
    page++;
    fputc(FF, listingStream);
    PageThrow();
    fprintf(listingStream,formatio_writech_header,page);
      /*Now output the title*/
    index = 0;
    while ((index <= MaxLineLength) && (title[index] != '\0'))
      fprintf(listingStream, "%c", title[index++]);
    NewLine();
    index = 0;
    while ( (index <= MaxLineLength) && (subtitle[index] != '\0'))
      fputc(subtitle[index++], listingStream);
    NewLine();  NewLine();
    currRows = 7;
    currCols = 0;
  };
  if ((ch == CR) || (ch == LF)) {
    NewLine();
    if (paging) {
      currRows++;
      currCols = 0;
    };
  } else {
    if (paging) {
      if (currCols < maxCols) {
        fputc(ch, listingStream);
        currCols++;
      } else {
        WriteCh(CR);/*Wrap*/
        WriteCh(ch);
      }; /* if */
    } else fputc(ch, listingStream);
  }; /* if */
} /* End WriteCh */

void lprintf(char *fmt, ...)
{
  va_list ap;
  char buffer[MaxLineLength];
  int i;

  va_start(ap, fmt);
  vsprintf(buffer, fmt, ap);
  va_end(ap);

  for (i=0; buffer[i]!=0; i++) WriteCh(buffer[i]);
}

void SetTitle(Name t)
{
  CARDINAL index = 0;

  while (index < t.length) {
    title[index] = t.key[index];
    index++;
  }; /* while */
  if (index <= MaxLineLength) title[index] = '\0';
} /* End SetTitle */

void SetSubtitle(Name t)
{
  CARDINAL index = 0;

  while (index < t.length) {
    subtitle[index] = t.key[index];
    index++;
  }; /* while */
  if (index <= MaxLineLength) subtitle[index] = '\0';
} /* End SetSubtitle */

/* End formatio.c */
