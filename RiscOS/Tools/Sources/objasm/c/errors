/* -> errors.c
 * Title:  Error messages and error handling
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#ifdef HOST_IS_RISCOS
#include "osdepend.h"
#endif
#include "hostdep.h"
#include "errors.h"
#include "asm.h"
#include "condasm.h"
#include "constant.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#include "cli.h"
#include "listing.h"
#include "formatio.h"
#include "message.h"
#include <stdio.h>
#include <stdlib.h>
#ifdef __STDC__
#  include <stdarg.h>
#  include <string.h>
#else
#  include <varargs.h>
#  include <strings.h>
#endif

BOOLEAN  errorFound,
         noWarn,
         linePrinted;

CARDINAL totalErrors;
CARDINAL totalWarnings;

#define  MaxErrors  50            /* Give up after this number of errors */

static char diagnostic_buffer[MaxLineLength+1];
static char *pendingDiagnostic;


#ifdef __CC_NORCROFT
extern int _vfprintf(FILE *, char *, va_list);
#endif

char *PendingDiagnostic(void)
{ char *s = pendingDiagnostic;
  if (s != NULL)
  { pendingDiagnostic = NULL;
    s = diagnostic_buffer;
  }
  return s;
}

static void eprintf(char *fmt, ...)
{
  va_list ap;

  va_start(ap, fmt);
#ifdef __CC_NORCROFT
  _vfprintf(stderr, fmt, ap);
#else
  vfprintf(stderr, fmt, ap);
#endif
  va_end(ap);
}

static void ErrorLine(void)
/*Give the error line and file name*/
{
  CARDINAL line;
  StructureStackElement s;

  if (!inFile) return;
  InitErrorAccess(); /*Get ready to interrogate the structure stack*/
  line = lineNumber;
  while (NextMacroElement(&s))
  { eprintf(errors_errorline_format1,
        line, (int)(s.u.macro.name.length), s.u.macro.name.key);
    fputc('\n',stderr);
    line = s.u.macro.lineNumber;
  }
  eprintf(errors_errorline_format2, line, currentFileName); fputc('\n',stderr);
  ReportAllGetLines();
}

static void ShowInputLine(void)
{ char *s;
  if (inFile)
  { fprintf(stderr,errors_showinputline_f1,lineNumber,programCounter);
    s = currentLinePointer;
    while (*s != CR) fputc(*s++, stderr);
  }
  fputc('\n', stderr);
}


/* ReportWarning: Counts as a warning
 * AsmError:      Counts as an error
 * ReportInfo:    Does not count as an error or warning, does not show location
 * FatalError:    Counts as an error and terminates the assembly
 */
void Report(ReportType type, char *fmt, ...)
{
  va_list ap;
  char *s;
#ifdef HOST_IS_RISCOS
  char throwback_buffer[256];
#endif

  if (type==ReportWarning) {
    ++totalWarnings;
    if (noWarn) return;
  }

  switch (type) {
    case ReportWarning: eprintf(errors_warning_warning); break;
    case AsmError:      eprintf(errors_errorreport_error); break;
    case ReportInfo:    break;
    case FatalError:    eprintf(errors_diagnose_fatal); break;
  }

  va_start(ap, fmt);
#ifdef __CC_NORCROFT
  _vfprintf(stderr, fmt, ap);
#else
  vfprintf(stderr, fmt, ap);
#endif
  va_end(ap);

#ifdef HOST_IS_RISCOS
  va_start(ap, fmt);
  vsprintf (throwback_buffer, fmt, ap);
  if (type==ReportWarning || type==AsmError || type == FatalError) {
      int level;

      level = (type == ReportWarning)?0:(type == AsmError)?1:2;
      throwback_start();
      throwback_send_error(error_filename(), (int)lineNumber, throwback_buffer, level);
  }
  va_end(ap);
#endif

  va_start(ap, fmt);
  pendingDiagnostic = s = diagnostic_buffer;
  strcpy(s, "***** ");
  vsprintf(s+6, fmt, ap);
  strcat(s, "\n");
  va_end(ap);
                      
  if (type!=ReportInfo) {
    ErrorLine();
    ShowInputLine();
  } else fputc('\n',stderr);
                   
  if (type==AsmError || type==FatalError) {
    errorFound = TRUE;
    ++totalErrors;
    if (totalErrors > MaxErrors || type==FatalError) {
      eprintf(asm_asm_terminated); fputc('\n',stderr);
      ListLine();               /* close down listing neatly, if there is one */
      TellErrorsAndWarnings();
      exit(8);

    }
  }
}

void TellErrorsAndWarnings(void)
{
  if (totalErrors == 0 && totalWarnings == 0) return;
  eprintf(errors_telleandw_f1,
    totalErrors,   (totalErrors != 1) ? errors_telleandw_errors : errors_telleandw_error,
    totalWarnings, (totalWarnings != 1) ? errors_telleandw_warns : errors_telleandw_warn,
    (noWarn && totalWarnings > 0) ? errors_telleandw_suppressed : "");
  fputc('\n',stderr);
}

/* End errors.c */
