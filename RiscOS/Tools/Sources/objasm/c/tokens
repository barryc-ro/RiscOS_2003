/* -> tokens.c
 * Title: Expression element tokenisation
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include <ctype.h>
#include <string.h>
#include <stdio.h>

#include "options.h"
#ifndef AAsm
#  include "aofvars.h"
#endif

#include "constant.h"
#include "errors.h"
#include "exprtyp.h"
#include "exprstor.h"
#include "getline.h"
#include "globvars.h"
#include "locallab.h"
#include "macrotyp.h"
#include "nametyp.h"
#include "occur.h"
#include "p1line.h"
#include "tables.h"
#include "tokens.h"
#include "vars.h"
#include "message.h"

typedef enum {
  PCWO,
  AtWO,
  OptWO,
  TrueWO,
  FalseWO,
  ConfigWO,              /* 26/32 bit */
  ReentWO,               /* reentrant / not reentrant */
  EndianWO,
  ArchWO,
  DummyWO
  } WordOperand;

#define intofxdigit(ch) ((ch) <= '9')  ? (ch) & 0x0fl : ((ch) & 0x0fl) + 9
#define intofdigit(ch) (ch) - '0'
#define isodigit(ch) isdigit(ch) && (ch <= '7')

static BOOLEAN initialised = FALSE;
static Name operatorTable[ODummy+1],
            operandTable[DummyWO+1];
static char charLine[MaxLineLength+1];

#define MAXCARD 0xFFFFFFFFL

static CARDINAL decimal_number(char *line, CARDINAL *index)
/*
Read a decimal number off the input line,
returning index past the number.
Assumes it is currently pointing at a valid decimal digit.
*/
{
  CARDINAL value = 0;
  char     ch = line[*index];
  while (isdigit(ch)) {
    if ((MAXCARD - ch - '0') / 10L < value) {
      Report(AsmError,errors_DecOver);
      return 0;
    }; /* if */
    value = value*10 + ch - '0';
    (*index)++;
    ch = line[*index];
  };
  return value;
}

CARDINAL HexNumber(char *line, CARDINAL *index)
/*
Read a decimal number off the input line,
returning index past the number and terminating padding.
Assumes it is currently pointing past the &
*/
{
  CARDINAL value = 0,
           oldIndex = *index;
  char     ch = line[*index] | 0x20;
  while (isxdigit(ch)) {
     if (value & 0xF0000000) {
        Report(AsmError,errors_HexOver);
        return 0;
     }; /* if */
     value = value*16;
     value += (int)(intofxdigit(ch));
     (*index)++;
     ch = line[*index] | 0x20;
  }; /* while */
  if (*index == oldIndex) {
     Report(AsmError,errors_BadHex);
  };
  return value;
} /* End HexNumber */

CARDINAL DecimalNumber(char *line, CARDINAL *index)
/*
 * Read a number, which may begin 0x or 0X followed by Hex digits
 */
{ int x;
  if (line[*index] == '0')
  { ++(*index);
    if ((x = line[*index]) == 'x' || x == 'X')
    { ++(*index);
      return HexNumber(line, index);
    }
  }
  return decimal_number(line, index);
}

static BOOLEAN lex_string_char(char *line, CARDINAL *index, char *where)
/* read a possibly escaped (with backslash (\)) character for a           */
/* character or string literal.  If read succeeds result is placed in     */
/* where. Result is 1 if succeeds, 0 if null escape read */
{
    int ch = line[*index];
    if (ch == '\\' && c_escapes)
        switch (ch = line[++(*index)])
    {
case 'a':       ch = BELL;      break;  /* attn (otherwise known as bell) */
case 'b':       ch = '\b';      break;  /* backspace                      */
case 'f':       ch = FF;        break;  /* form feed                      */
case 'n':       ch = '\n';      break;  /* newline                        */
case 'r':       ch = CR;        break;  /* carriage return                */
case 't':       ch = '\t';      break;  /* (horizontal) tab               */
case 'v':       ch = VT;        break;  /* vertical tab                   */

case '\\':      ch = '\\';      break;  /* backslash                      */
case '\'':      ch = '\'';      break;  /* single quote mark              */
case '\"':      ch = '\"';      break;  /* double quote mark              */
case '?':       ch = '?';       break;  /* '?' in case \?\?\? is needed   */

case 'x':
        {   BOOLEAN ovfl = 0;
            int32 escch, resultch;
            if (!isxdigit(ch = line[++(*index)]))
            {   Report(AsmError,errors_BadEscape);
                ch = 'x';
                goto return_ch;       /* "\xg" -> "xg": any better ideas? */
            }
            escch = (int32)(intofxdigit(ch));
            /* ANSI (3rd review draft) say any any number of digits.      */
            while (isxdigit(line[++(*index)]))
            {   if (((escch << 4) >> 4) != escch) ovfl = 1;
                escch = (escch<<4) + (int32)(intofxdigit(line[*index]));
            }
            resultch = escch & 0xff;
            if (ovfl || escch != resultch)    /* constraint violation     */
              Report(AsmError,errors_BadEscape);
            *where = (char)resultch;          /* never translate!         */
            return 1;
        }

case '0':       case '1':
case '2':       case '3':               /* octal escapes                  */
case '4':       case '5':
case '6':       case '7':
/* This code is simpler than that for \x since 3 digits make overflow hard */
                ch = intofdigit(ch);
                if (isodigit(line[++(*index)]))  /* second & third digits  */
                {   ch = (ch<<3) + intofdigit(line[*index]);
                    if (isodigit(line[++(*index)])) {
                      ch = (ch<<3) + intofdigit(line[*index]);
                      ++(*index);
                    }; /* if */
                }
                if (ch & ~255)                     /* constraint violation */
                    Report(AsmError,errors_BadEscape);
            *where = ch;                       /* never translate!         */
            return 1;

/* note that the sequence \<nl> (but not \<space><nl>) is now removed at
   all possible occasions by the preprocessor.   However, code for handling
   such situations is left here so that \<space><nl> is removed with just a
   warning message.
   Moreover we have to take care that (e.g.) \\<nl><nl> gives an error.
*/
case ' ':
case '\t':      Report(AsmError,errors_BadEscape);

/* If I see \<space> I generate a warning message. I then skip over any
 * following whitespace, up to one newline.  Thus the effect is that
 * \(space|tab)*(nl|) are ignored just as \nl.
 */
           do ++(*index); while ((line[*index]==' ') || (line[*index]=='\t'));
           if (line[*index] == '\n') ++(*index);
case '\n': /* drop through.  note no nextchar() here so read_string()
              will give an error message. */
           return 0;

default:  Report(AsmError,errors_BadEscape);
          break;      /* i.e. treat unknown escape "\Q" as "Q"            */
    }
    ++(*index);
    /* note the next line translates all chars except \ooo and \xooo */
return_ch:
    *where = ch;
    return 1;
}

char *GetString(char *line, CARDINAL *index, CARDINAL *length)
/*
Get a string from inline.
It is assumed that the opening " has been skipped
*/
{
  char     ch,
          *string;

  *length = 0;
  for (;;) {
    ch = line[*index];
    if (ch == CR) {
      Report(AsmError,errors_MissQuote);
      return charLine;
    };
    if (ch != Quotes) {
      if (!lex_string_char(line, index, charLine+*length)) return charLine;
        /* Returns false if error detected and reported */
    } else if (line[*index+1] != Quotes) {
      (*index)++; /* Point beyond closing quote */
      ExprStore_alloc(&string, *length);/*Get a string to put it in*/
      if (*length != 0) {
        memcpy(string, charLine, (size_t)(*length));
      }; /* if */
      return string;
    } else {
      charLine[*length] = Quotes;
      *index += 2;
    };
    (*length)++;
  };
} /* End GetString */

Operator GetWordOperator(char *line, CARDINAL *index)
/*
Read a word type operator
i.e.One delimited by colons
*/
{
  Name     name;
  CARDINAL value;

  if (SymbolTest(line, index, &name) &&
     ((isWhiteSpace(line[*index])) || (line[*index] == Colon)) &&
     NameLookup(operatorTable, name, FALSE, &value, ODummy)) {
     (*index)++;
     return (Operator) value;
  };
  Report(AsmError,errors_BadOp);
  return ODummy;
} /* End GetWordOperator */

static void PCOperand(EStackEntry *result)
{
  asmModeSet = TRUE;
  if (asmMode == RelocatableAM) {
    result->u.operand.operandType = PCRelOT;
    result->u.operand.u.pLabel = programCounter;
  } else {
    result->u.operand.operandType = ConstantOT;
    result->u.operand.u.constant = programCounter;
  }; /* if */
  result->type = OperandEST;
} /* End PCOperand */

static void AtOperand(EStackEntry *result)
{
  CARDINAL i;

  result->type = OperandEST;
  switch (variableCounter.type) {
    case FixedVCT:
    result->u.operand.operandType = ConstantOT;
    result->u.operand.u.constant = variableCounter.u.offset;
    break;

    case RelativeVCT:
    result->u.operand.operandType = RegRelOT;
    result->u.operand.u.regRel.offset = variableCounter.u.relativeVC.offset;
    for (i = 0; i <= 15; i++) result->u.operand.u.regRel.registers[i] = 0;
    result->u.operand.u.regRel.registers[variableCounter.u.relativeVC.reg] = 1;
  }; /* case */
} /* End AtOperand */

static void GetWordOperand(char *line, CARDINAL *index, EStackEntry *result)
/*
Read a word type operand
i.e.One delimited by curly brackets
*/
{
  Name     name;
  CARDINAL value;
  if (SymbolTest(line, index, &name) && (line[*index] == CurlyKet) &&
    NameLookup(operandTable, name, FALSE, &value, ODummy)) {
    (*index)++;
    switch (value) {
       case PCWO:
       PCOperand(result);
       break;

       case AtWO:
       AtOperand(result);
       break;

       case OptWO:
       result->type = OperandEST;
       result->u.operand.operandType = ConstantOT;
       if ((1 << ListPC) & listStatus) {
         result->u.operand.u.constant = pass - 1L + (2L - pass) * 1024;
       } else {
         result->u.operand.u.constant = (pass - 1L) * 2 + (2L - pass) * 2048;
       }; /* if */
       if ((1 << ListCondPC) & listStatus) {
         result->u.operand.u.constant += 4096;
       } else {
         result->u.operand.u.constant += 8192;
       }; /* if */
       if ((1 << ListSETPC) & listStatus) {
         result->u.operand.u.constant += 16;
       } else {
         result->u.operand.u.constant += 32;
       }; /* if */
       if ((1 << ListMacExpPC) & listStatus) {
         result->u.operand.u.constant += 64;
       } else {
         result->u.operand.u.constant += 128;
       }; /* if */
       if ((1 << ListMacCallPC) & listStatus) {
         result->u.operand.u.constant += 256;
       } else {
         result->u.operand.u.constant += 512;
       }; /* if */
       break;

       case TrueWO:
       case FalseWO:
       case ReentWO:
       result->type = OperandEST;
       result->u.operand.operandType = LogicalOT;
       result->u.operand.u.bool =
           (value == ReentWO) ? reentrant : (TrueWO == value);
       break;

       case ConfigWO:
       result->type = OperandEST;
       result->u.operand.operandType = ConstantOT;
       result->u.operand.u.constant = pc_is_32bit ? 32L : 26L;
       break;

       case EndianWO:
       result->type = OperandEST;
       result->u.operand.operandType = StringOT;
       result->u.operand.u.string.length = strlen(
           result->u.operand.u.string.key =
               target_is_big_endian ? "big" : "little");
       break;

       case ArchWO:
       result->type = OperandEST;
       result->u.operand.operandType = StringOT;
       switch (cpu_version) {
         case cpu_1:             result->u.operand.u.string.key = "1";    break;
         case cpu_2:             result->u.operand.u.string.key = "2";    break;
         case cpu_2a:            result->u.operand.u.string.key = "2a";   break;
         case cpu_3:             result->u.operand.u.string.key = "3";    break;
         case cpu_3+cpu_M:       result->u.operand.u.string.key = "3M";   break;
         case cpu_4:             result->u.operand.u.string.key = "4xM";  break;
         case cpu_4+cpu_M:       result->u.operand.u.string.key = "4";    break;
         case cpu_4+cpu_T:       result->u.operand.u.string.key = "4TxM"; break;
         case cpu_4+cpu_T+cpu_M: result->u.operand.u.string.key = "4T";   break;
         case cpu_5:             result->u.operand.u.string.key = "5xM";  break;
         case cpu_5+cpu_M:       result->u.operand.u.string.key = "5";    break;
         case cpu_5+cpu_T:       result->u.operand.u.string.key = "5TxM"; break;
         case cpu_5+cpu_T+cpu_M: result->u.operand.u.string.key = "5T";   break;
         default: Report(AsmError,errors_UnkOp); break;
       }
       result->u.operand.u.string.length =
                                strlen(result->u.operand.u.string.key);
       break;
    }
  } else {
    Report(AsmError,errors_UnkOp);
  }
}

void Token(char *line, CARDINAL *index, EStackEntry *result, BOOLEAN *defined)
{
/*Get a token in the general form returning it in result*/
  char          ch,
                topDigit;
  CARDINAL      length,
                i,
                base;
  Name          name;
  NamePointer   namePointer;
  SymbolPointer symbolPointer;

  *defined = TRUE; /*Assume will be defined*/
  result->type = OperatorEST;/*Assume we're getting an operator*/
  if (AllComment(line, index)) {
    result->u.operater = STTop;
    return;
  };
  ch = line[*index];
  if (isdigit(ch)) {
    /*Handle number*/
#ifndef AAsm
    CARDINAL old_index = *index;
    char     temp[MaxLineLength+2];
#endif
    result->type = OperandEST;
    result->u.operand.operandType = ConstantOT;
    if (line[*index+1] == UnderLine) {
      /*Handle based integer*/
      topDigit = ch;
      base = (CARDINAL)ch - '0';
      *index += 2;
      ch = line[*index];
      result->u.operand.u.constant = 0;
      if ((ch < '0') || (ch >= topDigit)) {
        Report(AsmError,errors_BadBaseNum);
        return;
      }; /* if */
      do {
        (*index)++;
        if ((MAXCARD - ch + '0') / base < result->u.operand.u.constant) {
          Report(AsmError,errors_NumOver);
          return;
        }; /* if */
        result->u.operand.u.constant =
          result->u.operand.u.constant*base + ch - '0';
        ch = line[*index];
      } while ((ch >= '0') && (ch < topDigit)); /* repeat */
    } else {
#ifndef AAsm
      result->u.operand.u.constant = DecimalNumber(line, index);
      /* Now be a bit careful about as style local label references */
      if (input_style == AsIS) {
        ch = line[*index];
        if ((ch == 'b') || (ch == 'f')) {
          CARDINAL area;
          *temp = ch;
          (*index)++;
          memcpy(temp+1, line+old_index, (size_t)(*index - old_index - 1));
          temp[*index-old_index] = CR;
          old_index = 0;
          result->u.operand.operandType = PCRelOT;
          result->u.operand.u.pLabel =
            LabelUse(temp, &old_index, defined, &area);
          if ((input_style == AsIS) && (area != areaNumber)) *defined = FALSE;
          /* Just fault it if in wrong segment */
        }
      }
#else
      result->u.operand.u.constant = DecimalNumber(line, index);
#endif
    }
  }
  else if ( (isalpha(ch)
             || ch == UnderLine
#ifndef AAsm
             || ch == Bar && input_style == ObjAsmIS
#endif
             ) && SymbolTest(line, index, &name))
  {
    result->type = OperandEST;
    symbolPointer = LookupLocal(name);
    if (symbolPointer == NULL) {
      symbolPointer = LookupRef(name, TRUE);
    }; /* if */
    if (symbolPointer == NULL) {
      symbolPointer = LookupFixed(name, TRUE);
    }; /* if */
    AddUse(symbolPointer);
    if (symbolPointer->u.s.sds != DefinedSDS) {
      *defined = FALSE;
      result->u.operand.operandType = UnDefOT;
    } else {
      switch (symbolPointer->u.s.sdt) {
        case FixedSDT:
        switch (symbolPointer->u.s.fst) {
          case RelocatableFST:
#ifndef AAsm
          if (symbolPointer->area != areaNumber) {
            Report(AsmError,errors_ExtAreaSym);
            return;
          }
#endif
          if (asmMode == RelocatableAM) {
            result->u.operand.operandType = PCRelOT;
            result->u.operand.u.pLabel = symbolPointer->value.card;
          } else {
            result->u.operand.operandType = ConstantOT;
            result->u.operand.u.constant = symbolPointer->value.card;
          }
          break;

          case AbsoluteFST:
          case RegisterListFST:
          result->u.operand.operandType = ConstantOT;
          result->u.operand.u.constant = symbolPointer->value.card;
          break;

          case RegisterRelativeFST:
          result->u.operand.operandType = RegRelOT;
          for (i = 0; i <= 15; i++)
            result->u.operand.u.regRel.registers[i] = 0;
          result->u.operand.u.regRel.registers[symbolPointer->u.s.fsr] = 1;
          result->u.operand.u.regRel.offset = symbolPointer->value.card;
          result->u.operand.u.regRel.based = symbolPointer->u.s.bt;

        }; /* case */
        break;

#ifndef AAsm
        case ExternalSDT:
        Report(AsmError,errors_ExtNotVal);
        *defined = FALSE;
        break;
#endif

        case VariableSDT:
        switch (symbolPointer->u.s.vst) {
          case ArithmeticVST:
          result->u.operand.operandType = ConstantOT;
          result->u.operand.u.constant = symbolPointer->value.card;
          break;

          case LogicalVST:
          result->u.operand.operandType = LogicalOT;
          result->u.operand.u.bool = symbolPointer->value.bool;
          break;

          case StringVST:
          result->u.operand.operandType = StringOT;
          namePointer = symbolPointer->value.ptr;
          if ((namePointer != NULL) &&
            (namePointer->length != 0)) {
            result->u.operand.u.string.length = namePointer->length;
            ExprStore_alloc(&result->u.operand.u.string.key, namePointer->length);
            memcpy(result->u.operand.u.string.key, namePointer->key,
              (size_t)(namePointer->length));
            /*String variables are not very efficient!*/
          } else {
            result->u.operand.u.string.length = 0;/*The null string*/
            result->u.operand.u.string.key = NULL;
          }; /* if */

        }; /* case */
        break;

        case RegisterNameSDT:
        result->u.operand.operandType = ConstantOT;
        result->u.operand.u.constant = symbolPointer->value.card;

      }; /* case */
    }; /* if */
  } else {
    (*index)++;
    switch (ch) {
      case '"':
      result->type = OperandEST;
      result->u.operand.operandType = StringOT;
      result->u.operand.u.string.key = GetString(line, index, &length);
      result->u.operand.u.string.length = length;
      break;

      case Quote:
      result->type = OperandEST;
      result->u.operand.operandType = ConstantOT;
      result->u.operand.u.constant = line[*index];
      if ((line[*index] == CR) || (line[++(*index)] != Quote)) {
        Report(AsmError,errors_MissQuote);
      } else {
        (*index)++;
      }; /* if */
      break;

      case '%':
#ifndef AAsm
      if (input_style == AsIS)
      { result->u.operater = STTop;
        (*index)--;
      } else
#endif
      { CARDINAL area;
        result->type = OperandEST;
        if (asmMode == RelocatableAM) {
          result->u.operand.u.pLabel = LabelUse(line, index, defined, &area);
          result->u.operand.operandType = PCRelOT;
        } else {
          result->u.operand.u.constant = LabelUse(line, index, defined, &area);
          result->u.operand.operandType = ConstantOT;
        }
      }  /* if */
      break;

      case '&':
#ifndef AAsm
      if ((input_style == AsIS) && (isWhiteSpace(line[(*index + 1)]))) {
        result->u.operater = BAnd;
        break;
      }
#endif
      result->type = OperandEST;
      result->u.operand.operandType = ConstantOT;
      result->u.operand.u.constant = HexNumber(line, index);
      break;

      case '(':
      result->u.operater = Bra;
      break;

      case ')':
      result->u.operater = Ket;
      break;

      case '*':
      result->u.operater = Star;
      break;

      case '+':
      result->u.operater = Plus;/*Could be unary*/
      break;

      case '-':
      result->u.operater = Minus;/*Could be unary*/
      break;

      case '/':
      if (line[*index] == '=') {
        (*index)++;
        result->u.operater = NotEquals;
      } else {
        result->u.operater = Slash;
      }; /* if */
      break;

      case ':':
      result->u.operater = GetWordOperator(line, index);
      if (result->u.operater == Defined) {
        result->type = OperandEST;
        result->u.operand.operandType = LogicalOT;
        result->u.operand.u.bool = 0;
        (void) AllComment(line, index);
        if (!SymbolTest(line, index, &name)) {
          Report(AsmError,errors_NoSym);
          return;
        }; /* if */
        symbolPointer = LookupRef(name, FALSE);
        if ((symbolPointer != NULL) &&
          (symbolPointer->u.s.sdt != VariableSDT)) {
          Report(AsmError,errors_WrongSy);
          return;
        }; /* if */
        result->u.operand.u.bool = (symbolPointer == NULL) ? FALSE :
          (pass == 1) ? TRUE : symbolPointer->u.s.p2d;
      }; /* if */
      break;

      case '<':
      ch = line[*index];
      if (ch == '=') {
        result->u.operater = LessEquals;
        (*index)++;
      } else if (ch == '>') {
        result->u.operater = NotEquals;
        (*index)++;
      } else if (ch == '<') {
        result->u.operater = Shl;
        (*index)++;
      } else {
        result->u.operater = Less;
      }; /* if */
      break;

      case '=':
      result->u.operater = OpEquals;
      break;

      case '>':
      ch = line[*index];
      if (ch == '<') {
        (*index)++;
        result->u.operater = NotEquals;
      } else if (ch == '=') {
        (*index)++;
        result->u.operater = GreaterEquals;
      } else if (ch == '>') {
        result->u.operater = Shr;
        (*index)++;
      } else {
        result->u.operater = Greater;
      }; /* if */
      break;

      case '?':
      result->type = OperandEST;
      result->u.operand.operandType = ConstantOT;
      result->u.operand.u.constant = 0;
      (void) AllComment(line, index);
      if (!SymbolTest(line, index, &name)) {
        Report(AsmError,errors_NoSym);
        return;
      }; /* if */
      symbolPointer = LookupLocal(name);
      if (symbolPointer == NULL) {
        symbolPointer = LookupRef(name, TRUE);
      }; /* if */
      if (symbolPointer == NULL) {
        symbolPointer = LookupFixed(name, TRUE);
      }; /* if */
      AddUse(symbolPointer);
      if (symbolPointer->u.s.sds != DefinedSDS) {
        *defined = FALSE;
      } else {
        result->u.operand.u.constant = symbolPointer->length;
      }; /* if */
      break;

      case '{':
      GetWordOperand(line, index, result);
      break;

      case '.':
      PCOperand(result);
      break;

      case '@':
      AtOperand(result);
      break;

#ifndef AAsm
      case '|':
      result->u.operater = BOr;
      break;

#endif
      case '~':
      result->u.operater = BNot;
      break;

      default:
      result->u.operater = STTop;
      (*index)--;
    }; /* case */
  }; /* if */
} /* End Token */

void InitTokens(void)
/*Initialise the word token table*/
{
  Operator    i;
  WordOperand j;
  if (!initialised) {
    for (i = STBot; i <= ODummy; i = (Operator)(i+1))
        operatorTable[i].length = 0;
    CopyName(LAnd, "LAND", operatorTable);
    CopyName(LOr, "LOR", operatorTable);
    CopyName(LEor, "LEOR", operatorTable);
    CopyName(Ror, "ROR", operatorTable);
    CopyName(Rol, "ROL", operatorTable);
    CopyName(Shr, "SHR", operatorTable);
    CopyName(Shl, "SHL", operatorTable);
    CopyName(BAnd, "AND", operatorTable);
    CopyName(BEor, "EOR", operatorTable);
    CopyName(BOr, "OR", operatorTable);
    CopyName(Left, "LEFT", operatorTable);
    CopyName(Right, "RIGHT", operatorTable);
    CopyName(Cc, "CC", operatorTable);
    CopyName(Mod, "MOD", operatorTable);
    CopyName(LNot, "LNOT", operatorTable);
    CopyName(BNot, "NOT", operatorTable);
    CopyName(Len, "LEN", operatorTable);
#ifdef BINARY_INCLUDES
    CopyName(FLoad, "FLOAD", operatorTable);           /* added by NRaine */
    CopyName(FExec, "FEXEC", operatorTable);           /* added by NRaine */
    CopyName(FSize, "FSIZE", operatorTable);           /* added by NRaine */
    CopyName(FAttr, "FATTR", operatorTable);           /* added by NRaine */
#endif
    CopyName(Chr, "CHR", operatorTable);
    CopyName(Str, "STR", operatorTable);
    CopyName(Base, "BASE", operatorTable);
    CopyName(Index, "INDEX", operatorTable);
    CopyName(Defined, "DEF", operatorTable);
    CopyName(ODummy, "||", operatorTable);
    for (j = PCWO; j <= DummyWO; j = (WordOperand)(j+1))
        operandTable[j].length = 0;
    CopyName(PCWO, "PC", operandTable);
    CopyName(AtWO, "VAR", operandTable);
    CopyName(OptWO, "OPT", operandTable);
    CopyName(TrueWO, "TRUE", operandTable);
    CopyName(FalseWO, "FALSE", operandTable);
    CopyName(ConfigWO, "CONFIG", operandTable);
    CopyName(ReentWO, "REENTRANT", operandTable);
    CopyName(EndianWO, "ENDIAN", operandTable);
    CopyName(ArchWO, "ARCHITECTURE", operandTable);
    CopyName(DummyWO, "||", operandTable);
    initialised = TRUE;
  }; /* if */
} /* End InitTokens */

/* End tokens.c */
