/* -> asm.c
 * Title: Top level assembly routine
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "hostdep.h"          /* which includes options.h... */

#ifndef AAsm
#  include "aofvars.h"
#  include "aout.h"
#  include "asdsupp.h"
#endif

#include "asm.h"
#include "bytesex.h"
#include "code.h"
#include "condasm.h"
#include "constant.h"
#include "errors.h"
#include "fname.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#include "initdir.h"
#include "cli.h"
#include "listing.h"
#include "literals.h"
#include "locallab.h"
#include "macrotyp.h"
#include "nametyp.h"
#include "opcode.h"
#include "p1dir.h"
#include "p2dir.h"
#include "p1line.h"
#include "p2line.h"
#include "stats.h"
#include "store.h"
#include "tables.h"
#include "message.h"

typedef struct CacheRecord *Cache;

typedef struct CacheRecord {
  Cache next;
  char *name;
  struct PathElement *path;
  Name  data;
} CacheRecord; /* record */

#ifdef HOST_ALLOWS_SOURCE_FROM_STDIN
static BOOLEAN from_stdio = FALSE;
#endif

char currentFileName[MaxLineLength+1],
     codeFileName[MaxLineLength+1];
BOOLEAN  inputStreamExists = FALSE;
static Cache cache = NULL;

static char filename_for_errors[MaxLineLength+1];

#ifndef AAsm
aof_symbol *extern_symbolTable = NULL;
struct nlist *aout_symbolTable = NULL;
char       *stringTable;
#endif

BOOLEAN inFile;
char   *fileStore;
FILE   *codeStream = NULL,
       *inputStream;
BOOLEAN inputStreamExists;

static CARDINAL cacheSize = 0;

#define MaxCache    0x800000 /* 8 Mbytes */


typedef struct PathElement
{   struct PathElement *link;      /* sometimes a stack; sometimes a queue */
    char   name[2];         /* to allow for a trailing separator and a NUL */
} PathElement;

typedef struct PreDefine
{   struct PreDefine *link;
    char line[2];                                 /* to allow for CR + NUL */
} PreDefine;

static PathElement *path_hd, *path_tl;

static void translate_fname(const char *file, UnparsedName *un, char *new_file)
{
    fname_parse(file, FNAME_SUFFIXES, un);
    fname_unparse(un, FNAME_AS_NAME, new_file, MaxLineLength+1);
}

static void translate_path(const char *file, UnparsedName *un, char *new_file)
{
    fname_parse(file, FNAME_SUFFIXES, un);
    fname_unparse(un, FNAME_AS_PATH, new_file, MaxLineLength+1);
}

static PathElement *mk_path_element(PathElement *link, char *name)
{ PathElement *p;
  int length;

  length = strlen(name);
  p = (PathElement *) mymalloc(length + sizeof(PathElement));
  p->link = link;
  strcpy(p->name, name);

  return p;
}

/*
 * Set the include path.
 */
extern void AddIncludePath(const char *path)
{
  PathElement *p;
  UnparsedName unparse;
  int ch;
  char new_path[MaxLineLength+1];
  char path_element[MaxLineLength+1];

  for (ch = *path;  ch != 0;)
  {   /* one or more path elements joined by commas... */
      int length = 0;
      while (ch != ',' && ch != 0)
      {   if (length < MaxLineLength) path_element[length++] = ch;
          ch = *(++path);
      }
      if (ch == ',') ch = *(++path);
      path_element[length] = 0;
      translate_path(path_element, &unparse, new_path);
      /* Add a new path element at the END of the list. */
      p = mk_path_element(NULL, new_path);
      if (path_hd == NULL)
          path_tl = path_hd = p;
      else
          path_tl = (path_tl->link = p);
  }
}

/*
 * Stack GET/LNK path name.
 */

static void push_path_element(PathElement *q)
{
    q->link=path_hd;
    path_hd=q;
}

static void push_path(char *path)
{
    UnparsedName unparse;
    char new_path[MaxLineLength+1];
#ifdef FEATURE_KANDR_INCLUDE
    if (feature & FEATURE_KANDR_INCLUDE) return;
#endif
    translate_fname(path, &unparse, new_path);
    new_path[unparse.un_pathlen] = 0;
    push_path_element(mk_path_element(path_hd, new_path));
}

static void pop_path_element(void)
{
    PathElement *p;
#ifdef FEATURE_KANDR_INCLUDE
    if (feature & FEATURE_KANDR_INCLUDE) return;
#endif
    /* pop the 1st path element off the path stack
     */
    if (path_hd) {
      p=path_hd->link;
      free(path_hd);
      path_hd=p;
    }
    if (path_hd==NULL) path_tl=NULL;
}

static void FinishFile(void)
{
  pop_path_element();
  if (inputStreamExists) {
    inFile = FALSE;
    inputStreamExists = FALSE;
    fclose(inputStream);
  }; /* if */
} /* End FinishFile */

static PreDefine *pd_hd, *pd_tl;

extern void AddPreDefine(const char *line)
{ char *s;
  int l = strlen(line);
  PreDefine *p = (PreDefine *) mymalloc(sizeof(PreDefine) + l);
  p->link = NULL;
  strcpy(p->line, line);
  p->line[l++] = CR;
  p->line[l] = 0;
  for (s = p->line;  *s != CR;  ++s)
    if (*s == '\376') *s = ' ';                  /* sop to DOS CLIs... */
  if (pd_hd == NULL)
    pd_hd = pd_tl = p;
  else
    pd_tl = (pd_tl->link = p);
}

static void DoPreDefines(void)
{ PreDefine *p = pd_hd, *prev;
  while (p != NULL)
  { if (!P1Directive(p->line, NULL, NULL, NULL))
      Report(ReportInfo,asm_dopredefines_bad,p->line);
    prev = p;
    p = p->link;
    free(prev);
  }
}

static void RemoveCache(void)
{
  Cache c = cache,
        d;

  while (c != NULL) {
    free(c->name);
    free(c->data.key);
    d = c->next;
    free(c);
    c = d;
  }; /* while */
  cache = NULL;
  cacheSize = 0;
} /* End RemoveCache */

static void FinishAsm(BOOLEAN delete_code)
/*Clear up after an assembly*/
{
  if (codeStream) {
#ifdef AAsm
    CodeEnd();
#endif
    fflush(codeStream); /* Check it's all written */
    if (ferror(codeStream)) Report(AsmError,errors_CodeError); /* Then check for errors */
    fclose(codeStream);
    codeStream = NULL;
    if (delete_code) remove(codeFileName);
#ifdef AAsm
# ifdef HOST_IS_RISCOS
    else if (!(stamp || module) || (asmModeSet && (asmMode == AbsoluteAM)))
      SetLoadAndExec(loadAddress);
    else StampModule(module);
# endif
#else
    free(extern_symbolTable);
    free(aout_symbolTable);
    free(stringTable);
#endif
  }
  FinishFile();
  RemoveCache();
  PageModeOff();
#ifdef HOST_IS_RISCOS
  throwback_end();
#endif
} /* End FinishAsm */

void Asm(char *fileName)
/*
 * Run an assembly starting at file fileName (HOST_IS_RISCOS case)
 * Run an assembly to file fileName (unix case)
 * input file picked up from interface
 */
{
  char     firstFileName[MaxLineLength+1];
  Name     defaultTitle;
  char     defString[1];
  int      len;
  UnparsedName un;

  *filename_for_errors = 0;
  inFile = FALSE;
  asmModeSet = FALSE;
  asmMode = RelocatableAM;
#ifdef AAsm
  CodeInit();
#else
  P1InitAreas();
  stringOffset = 4;
  symbolId = 0;
  output_style_set = FALSE;
  output_style =
#ifdef TARGET_HAS_AOUT
  ADotOutOS;
#endif
#ifdef TARGET_HAS_AOF
  AofOS;
#endif
  input_style_set = FALSE;
  input_style = INPUT_STYLE;
  textareas = 0;
  dataareas = 0;
  bssareas = 0;
#endif /* not AAsm */
  Init();
  inputStreamExists = FALSE;
  /*First check that the file name is given, and prompt if not*/
  defString[0] = NULL;
  defaultTitle.length = 1;
  defaultTitle.key = defString;
  if (!InputFile(firstFileName)) {
#ifdef HOST_ALLOWS_SOURCE_FROM_STDIN
    *firstFileName = 0;
    from_stdio = TRUE;
#else
    Report(FatalError,asm_asm_noinput);
    return;
#endif
  }
  /* fix up the output file name */
  { char temp[MaxLineLength+1];
    strcpy(temp, fileName);
    len = strlen(temp) - 1;
    if (len >= 0 && temp[len] == CR) temp[len] = 0;
    translate_fname(temp, &un, codeFileName);
#ifndef AAsm
    asdsupp_section_name(un.root, un.rlen);
#endif
  }
  /*Now initialise the assembly*/
  InitSymbolTable();
  InitDirectives();
  InitOpcode();
  InitMacroTable();
  SetImplicitRegisters();
#ifndef AAsm
  asdsupp_free_section_list();
#endif
  if (printState) PageModeOn();
  nextListState = (1 << ListCondPC) | (1 << ListSETPC) |
    (1 << ListMacExpPC) | (1 << ListMacCallPC);
  nextListState &= ~(1 << ListPC);
  SetTitle(defaultTitle);
  SetSubtitle(defaultTitle);
  totalErrors = totalWarnings = 0;
  LiteralAsmStart();
  allowFP = TRUE;
  hadFP = FALSE;
#ifndef AAsm
  keepingAll = make_debug ? TRUE : FALSE;
#endif

  /*Now pass 1*/
  pass = 1;
  InitLocalLabels();
  InitStructureStack();
#ifndef AAsm
  header.aof_nareas = 0;
  header.aof_entryarea = 0; /* Default state */
#endif
  translate_fname(firstFileName, &un, currentFileName);
#ifdef HOST_IS_RISCOS
  set_first_file(currentFileName);
#endif
  /* Now output dependency information if requested */
  put_dependency_info(codeFileName, NULL);
#ifdef AAsm
  loadAddress = 0;
#else
  areaNumber = 0;
  last_pc = 0;
#endif
  programCounter = 0;
  InitLineList();
#ifdef HOST_IS_RISCOS
  if (absolute_flag)
  {
      P1Directive ("        AREA   |ABS$$BLOCK|, CODE\r", NULL, NULL, NULL);
  }
#endif
  DoPreDefines();
  do {
#ifdef HOST_IS_RISCOS
    if (PollEscape()) {FinishAsm(FALSE);  return;}
#endif
  } while (!P1File(FALSE));
  if (exception == FileNotFound) exception = None; /* Can ignore it now */
  if (totalErrors > 0)
  { FinishAsm(FALSE);
    Report(ReportInfo,asm_asm_terminated);
    TellErrorsAndWarnings();
    return;
  }
#ifndef AAsm
  if ((areaNumber != 0) && (input_style == ObjAsmIS))
  { currArea->dec.area_size =
      (((int32)programCounter + 3) & ~3) - currArea->dec.area_base;
    if (make_debug) {
      asdsupp_section_end(currArea->dec.area_size, lineNumber);
      asdsupp_declare_debug_area();
    }; /* No need for debug area if no other areas! */
  }
  input_style_set = TRUE; /* If not set already! */
  if (!output_style_set) {
    output_style_set = TRUE;
  } else if ((output_style == AofOS) && (input_style == AsIS)) {
    Report(FatalError,asm_asm_incompatible_styles);
  }
  if (input_style == AsIS) AddImports();
#endif
  close_dependency_file();
  (void) PendingDiagnostic(); /* clear pending diags before Pass2 listing */

  /*Now pass 2*/

  SetTitle(defaultTitle);
  SetSubtitle(defaultTitle);
  inFile = FALSE;
  pass = 2;
#ifndef AAsm
  if (output_style == AofOS) {
    header.aof_type = AOF_RELOC;
    header.aof_vsn = AOF_VERSION;
    header.aof_nareas = areaNumber;
    header.aof_nsyms = symbolId;
  } else {
    int i;
    if (input_style == AsIS) switch (segment_type) {
      case CodeST:
      code_size = programCounter;
      break;
      case DataST:
      data_size = programCounter;
      break;
      case BssST:
      bss_size = programCounter;
    };
    code_size = (code_size + 3) & ~3; /* Align code end suitably */
    data_size = (data_size + 3) & ~3; /* Align data end suitably */
    bss_size = (bss_size + 3) & ~3;   /* Align bss end suitably */
    aout_header.a_magic = OMAGIC;
    aout_header.a_text = (input_style == AsIS) ? code_size : 0;
    aout_header.a_data = (input_style == AsIS) ? data_size : 0;
    aout_header.a_bss = (input_style == AsIS) ? bss_size : 0;
    aout_header.a_trsize = 0;
    aout_header.a_drsize = 0;
    aout_header.a_entry = header.aof_entryoffset;
    if (input_style == ObjAsmIS)
      for (i = 1; i <= areaNumber; i++)
    { aof_area *dec = GetArea(i);
      if (dec->area_attributes & AOF_CODEAT) {
        aout_header.a_text = dec->area_size;
      } else if (dec->area_attributes & AOF_0INITAT) {
        aout_header.a_bss = dec->area_size;
      } else {
        aout_header.a_data = dec->area_size;
      };
    } /* for */
    aout_header.a_syms = (int32)symbolId * sizeof(struct nlist);
    if (input_style == AsIS) RelocInit();
  }
#endif
  InitLocalLabels();
  InitStructureStack();
  nextListState = (1 << ListCondPC) | (1 << ListSETPC) |
    (1 << ListMacExpPC) | (1 << ListMacCallPC) | (1 << ListPC);
#ifdef HOST_IS_RISCOS
  if (PollEscape()) { FinishAsm(FALSE); return; }
#endif
  programCounter = 0;
#ifndef AAsm
  areaNumber = 0;
  P2InitAreas();
#endif
  translate_fname(firstFileName, &un, currentFileName);
  codeStream = fopen(codeFileName, "wb");
  if ((codeStream != NULL) && (!ferror(codeStream)))
  {
#ifndef AAsm
    if (output_style == AofOS) {
      extern_symbolTable = (aof_symbol *)
                           mymalloc((size_t)symbolId*sizeof(aof_symbol));
    } else {                             
      aout_symbolTable = (struct nlist *)
                         mymalloc((size_t)symbolId*sizeof(struct nlist));
    }; /* if */
    /* Round up to word boundary */
    stringTable = (char *) mymalloc((size_t)(stringOffset+3) & ~3);
    *(int32 *)stringTable = bytesex_hostval(stringOffset); /* Save the length */
    DumpHeader();
    CodeInit();
#endif
#ifdef HOST_IS_RISCOS
    if (absolute_flag)
    {
        P2Directive ("        AREA   |ABS$$BLOCK|, CODE\r", NULL, NULL, NULL);
    }
#endif
    do {
#ifdef HOST_IS_RISCOS
      if (PollEscape()) { FinishAsm(TRUE); return; }
#endif
    } while (!P2File(FALSE));
    if (exception == FileNotFound) exception = None;
    /* Can ignore it now */
  }
  else
    Report(AsmError,errors_CantOpenCode);
  PutLine();
  if (totalErrors > 0)
  { FinishAsm(TRUE);
    Report(ReportInfo,asm_asm_terminated);
    TellErrorsAndWarnings();
    return;
  }

#ifndef AAsm
  PutImplicitImports();
  CodeEnd();
  RelocEnd();
  if (make_debug && areaNumber != 0 && output_style == AofOS) {
    AddAreaDeclaration(NULL, 0, 0);
    /* Advance along the chain */
    RelocInit();
    /* Prepare to add debug area */
    asdsupp_write_debug_area(codeStream);
    RelocEnd();
    /* Add associated relocations */
  };
  DumpAreaDecs();
  DumpSymbolTable();
  DumpStringTable();
#endif
  FinishAsm(FALSE);
  TellErrorsAndWarnings();
} /* End Asm */

static BOOLEAN StoreAvailable(char **p, CARDINAL request)
/*
Will one day determine if storage manager has enough store to allow current
allocation without screwing up later.
*/
{
  if ((cacheSize + request) <= maxCache) {
    /*For the moment always assume we will succeed*/
    *p = (char *) mymalloc((size_t)request);
    cacheSize += request;
    return TRUE;
  };
  return FALSE;
} /* End StoreAvailable */

static BOOLEAN FileInCache(char *file, Cache *c)
{
  CARDINAL i;

  for (*c=cache; *c!=NULL; *c=(*c)->next) {
    for (i=0; file[i]==(*c)->name[i] && file[i]!=0; i++);
    if (file[i]==(*c)->name[i]) return TRUE; /* Only if both 0 */
  }
  return FALSE;
}

/* This returns either a cache entry or a file pointer, or if the file
 * won't open, neither.  The input filename (to be translated and
 * written back is currentFileName.
 */
static void path_open(FILE **fp, Cache *c, char *pathName, char *fileOut)
{
  UnparsedName unparse;
  PathElement *p, nullp;

  *fp=NULL; *c=NULL; /* Indicate failure by default */
  translate_fname(currentFileName, &unparse, fileOut);

#ifdef DEBUG
  fprintf(stderr,"Path =");
  for (p=path_hd;p!=NULL;p=p->link)
    fprintf(stderr," '%s'",p->name);
  fprintf(stderr,"\n");
#endif

  if (!(unparse.type & FNAME_ROOTED)) {
    p = path_hd;      /* For a non rooted filename use the path stack */
  } else {
    nullp.link=NULL;  /* For a rooted filename make a null path stack */
    nullp.name[0]=NULL; /* ie. no prefix path, and proceed */
    p=&nullp;
  }

  while (p != NULL) {
    char current[MaxLineLength+1];
    /* Fail if the path + filename is too long */
    if (strlen(fileOut) + strlen(p->name) > MaxLineLength) return;
    strcpy(current, p->name);
    strcat(current, fileOut);
#ifdef DEBUG
    fprintf(stderr, "Trying %s - ", current);
#endif
    if (FileInCache(current,c)==TRUE ||     /* It's in the cache ! */
        (*fp=fopen(current, "r")) != 0 ) {  /* It can be opened  ! */
      push_path(current);
      if (pass == 1) put_dependency_info(NULL, current);
#ifdef DEBUG
      if (*fp!=NULL) fprintf(stderr,"OK (opened file)\n");
      else           fprintf(stderr,"OK (in cache)\n");
#endif
      strcpy(pathName,p->name);
      strcpy(currentFileName,current); /* Rewrite currentFileName as full path */
      return;
    }
#ifdef DEBUG
    fprintf(stderr,"Failed\n");
#endif
    p = p->link;
  }
  push_path(""); /* sacrifice to subsequent pop_path from FinishFile */
  return; /* failed */
}

#ifdef HOST_ALLOWS_SOURCE_FROM_STDIN
    typedef struct buffer *Buff;
    typedef struct buffer {
      Buff next;
      char data[1025];
    };

static int StashChar( int ch, struct buffer** currentBuffer, int* i )
{
  int newBuffer = 0;
  (*currentBuffer)->data[(*i)++] = ch;
  if(*i == 1024) {
    (*currentBuffer)->next = (Buff)mymalloc( sizeof( struct buffer ) );
    (*currentBuffer)->data[1024] = 0;
    (*i) = 0;
    newBuffer = 1;
    (*currentBuffer) = (*currentBuffer)->next;
  } /*if*/
  return( newBuffer );
}
#endif

static BOOLEAN LoadFile(void)
{
  CARDINAL localSize;
  CARDINAL bytesRead;
  Cache    c;
  char    *s, pathUsed[MaxLineLength+1], translatedFileName[MaxLineLength+1];

  inputStreamExists = FALSE;
  fileReadMode = WholeFileLoad;
#ifdef HOST_ALLOWS_SOURCE_FROM_STDIN
  /* Here we handle input from stdin */
  if( from_stdio ) {
    Buff buffer = (Buff) mymalloc(sizeof(struct buffer)),
         temp   = buffer;
    int  i = 0, j = 0, ch, hadNL;

    hadNL = 0;
    for (;;)
    { ch = getc(stdin);
      if (feof(stdin) || ferror(stdin)) break;
      if (ch == '\n' || ch == CR) hadNL = 1; else hadNL = 0;
      j += StashChar( ch, &temp, &i );
    }
    if (!hadNL) j += StashChar( CR, &temp, &i );
    if (ferror(stdin)) {
      Report(ReportInfo,asm_loadfile_error_stdin);
      exit(1);
    }
    temp->data[i] = 0;
    /* Now we've read it all, add it to the cache */
    localSize = 1024*j+i;
    c = (Cache) mymalloc(sizeof(*c));
    c->data.key = (char *) mymalloc(localSize);
    c->data.length = localSize;
    c->name = (char *) mymalloc(1);
    *c->name = 0;
    c->next = cache;
    cache = c;
    /* cache entry set up, now add the data */
    s = c->data.key;
    temp = buffer;
    for (i = 0; i <= j; i++) {
      strcpy(s, temp->data);
      s += 1024;
      temp = temp->next;
      free(buffer);
      buffer = temp;
    }
    from_stdio = FALSE;
  }
#endif
  path_open(&inputStream,&c,pathUsed,translatedFileName);
  /* 'Open' file, either file or cache entry */
  if (c) { /* It's in the cache */
    fileStore = c->data.key;
    fileSize = c->data.length;
    pointerInFile = fileStore;
    inFile = TRUE;
    set_error_filename(translatedFileName);
    lineNumber = 0;
    return TRUE;
  }
  /* We opened a file as it wasn't in the cache */
  if ((inputStream == NULL) || ferror(inputStream)) {
    inFile = FALSE;
    Report(AsmError,asm_loadfile_open_fail,currentFileName);
    exception = FileNotFound;
    return FALSE;
  }
  inputStreamExists = TRUE;
  fseek(inputStream, 0, SEEK_END); /* Find out the file length */
  localSize = (CARDINAL)ftell(inputStream);
  fseek(inputStream, 0, SEEK_SET); /* Go to the start of the file */

  if (!(caching && StoreAvailable(&s, localSize+1)))
    fileReadMode = ByteStream;     /* Don't put in in the cache */
  else {                           /* Do add file to cache */
    c = (Cache) mymalloc(sizeof(*c));
    c->data.key = s;
    c->data.length = localSize;
    c->name = (char *) mymalloc(strlen(pathUsed) + strlen(translatedFileName) + 1);
    strcpy(c->name, pathUsed);         /* Set the name in the cache record */
    strcpy(c->name+strlen(pathUsed),translatedFileName); /* to the path + name */
    c->next = cache;
    c->path = path_hd;
    cache = c;
    /* fread might legally read less than localSize bytes, eg. PC */
    bytesRead = fread(s, 1, (size_t)localSize, inputStream);
    if (ferror(inputStream)) {
      inputStreamExists = FALSE;
      fclose(inputStream);
      Report(AsmError,asm_loadfile_not_all_loaded,currentFileName);
      exception = FileNotFound;
      return FALSE;
    }
    /* Silently force trailing CR... */
    if (s[bytesRead] != '\n' && s[bytesRead] != CR) s[bytesRead] = CR;
    /* Close the file */
    inputStreamExists = FALSE;
    fclose(inputStream);
    fileStore = s;
    fileSize = bytesRead;
    pointerInFile = fileStore;
  }
  /* Where the file starts */
  inFile = TRUE;
  set_error_filename(translatedFileName);
  lineNumber = 0;
  return TRUE;
}

void CopyFileName(char *pointer)
/*
  Get the new file name to be linked to
  and put it in currentFileName.
  If we are working in desktop mode,
  prepend the desktop directory prefix.
*/
{
  char    *f = currentFileName;
  char     g[MaxLineLength+1];
  UnparsedName un;
  CARDINAL index = 0;

  while (!isWhiteSpace(*pointer) && *pointer != CR) g[index++] = *(pointer++);
  g[index] = NULL;
  fname_parse(g, FNAME_SUFFIXES, &un);
  *f = 0;
#ifdef HOST_IS_RISCOS
  if (is_desktop() && !(un.type & FNAME_ROOTED)) strcpy(f, desk_dir());
#endif
  fname_unparse(&un, FNAME_AS_NAME, f + strlen(f), MaxLineLength+1);
}

BOOLEAN P1File(BOOLEAN stream)
/*
 * DO the first pass, returning TRUE if END directive encountered.
 * Stream is used to indicate whether this is a top level file or not.
 * The name is an anachronism.
 */
{
  char    *linkPointer;
  BOOLEAN wasLink,
          ended = FALSE;

  if (LoadFile()) {
    if (!stream) LiteralFileStart();
    macroLevel = 0;
    do {
      ended = P1LineHandler(&linkPointer, &wasLink);
#ifndef AAsm
      if (programCounter > last_pc && !macroLevel) {
        if (currArea && (currArea->dec.area_attributes & AOF_CODEAT)) {
          asdsupp_line_end(programCounter - last_pc, lineNumber);
        }
        last_pc = programCounter;
      };
#endif
      if (exception) break;
      ListLine();
    } while (!(ended || wasLink));
  };
  FinishFile();
  /* Check for exceptions leaving bad stacks */
  if (exception == EndOfInput || exception == StackOverflow ||
    exception == StackErr) {
    UnwindToGet();
  };
  /* Now convert all exceptions to one common one */
  if (exception) {
    exception = FileNotFound;
    return TRUE;
  };
  if (wasLink) CopyFileName(linkPointer);
  if (!stream) LiteralFileEnd();
  return ended;
} /* End P1File */

BOOLEAN P2File(BOOLEAN stream)
/*Do the second pass, returning TRUE if END directive encountered*/
{
  char    *linkPointer;
  BOOLEAN wasLink,
          ended = FALSE;
  if (LoadFile()) {
    if (!stream) LiteralFileStart();
    macroLevel = 0;
    do {
      ended = P2LineHandler(&linkPointer, &wasLink);
      if (exception) break;
      ListLine();
    } while (!(ended || wasLink));
  };
  FinishFile();
  /* Check for exceptions leaving bad stacks */
  if (exception == EndOfInput || exception == StackOverflow ||
    exception == StackErr) {
    UnwindToGet();
  };
  /* Now convert all exceptions to one common one */
  if (exception) {
    exception = FileNotFound;
    return TRUE;
  };
  if (wasLink) CopyFileName(linkPointer);
  if (!stream) LiteralFileEnd();
  return ended;
} /* End P2File */

void Init_Asm(void)
{
  maxCache = MaxCache;
  callingStandard = APCS_U;  /* by default */
  path_hd = path_tl = mk_path_element(NULL, "");
#ifdef INCLUDE_DOT_ON_INCLUDE_PATH
  path_hd = mk_path_element(path_tl, "");
#endif
  pd_hd = pd_tl = NULL;
  noWarn = FALSE;
}

char *error_filename(void)
{
  return filename_for_errors;
}

void set_error_filename(char *filename)
{
  strcpy(filename_for_errors, filename);
#ifndef AAsm
  if (pass == 1) asdsupp_new_file(filename, lineNumber);
#endif
}

/* End asm.c */
