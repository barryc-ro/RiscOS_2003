/* -> cli.c
 * Title:  Command line decoding
 * Copyright (C) 1991-92 Advanced RISC Machines Limited. All rights reserved.
 * RCS $Revision$
 */

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#include "hostdep.h"           /* which also includes options.h... */

#ifndef AAsm
#  include "aofvars.h"
#endif

#include "asm.h"
#include "bytesex.h"
#include "chunkfmt.h"
#include "constant.h"
#include "errors.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#include "cli.h"
#include "version.h"
#include "prgname.h"
#include "message.h"
#include "fname.h"
#include "store.h"

static char input[MaxLineLength+1],
            output[MaxLineLength+1];

static BOOLEAN gotinput = FALSE,
               gotoutput = FALSE,
               gotlisting = FALSE,
               got_endianness = FALSE;

#ifdef HOST_IS_RISCOS
static char desktop_dir[256],
            desktop_relative_dir[256];

static BOOLEAN desktop = FALSE;
#endif

static FILE *depend_file = NULL;
static FILE *via_file = NULL;
static char *errors_file = NULL;

static struct {
    int32 id[2];
    unsigned char size,
                  toolid,
                  bytesex,
                  pc_is_32bit,
                  sw_stack_check,
                  maxCols,
                  maxRows,
                  cpu_version;
} patchable_config = {
/* an identifying "string" (but defined as a pair of word values to enable
   target bytesex to be identified by the patching tool
 */
   { ((((((long)'x' << 8) | 'c') << 8) | 'o') << 8) | 'n',
     ((((((long)'f' << 8) | 'i') << 8) | 'g') << 8) | 'x'
   },
   sizeof(patchable_config),
   2,               /* Assembler                */
#ifdef TARGET_IS_LITTLE_ENDIAN
   1+               /* byte sex == 1 */
#endif
#ifdef TARGET_IS_BIG_ENDIAN
   2+               /* byte sex == 2 */
#endif
   0,               /* host byte-sex by default */
   PC_IS_32BIT,
   SW_STACK_CHECK,
   255, 255,         /* default rows and cols as built-in */
   0x30              /* Default cpu is ARMv3 */
};

static const char cpu_list[][8] =
{
    /* One byte for cpuversion value, followed by string */
    "\x10 1",
    "\x20 2",
    "\x28 2a",
    "\x30 3",
    "\x31 3M",
    "\x41 4",
    "\x43 4T",
    "\x40 4xM",
    "\x42 4TxM",
    "\x51 5",
    "\x53 5T",
    "\x50 5xM",
    "\x52 5TxM",
    "\x30 ARM6",
    "\x30 ARM7",
    "\x31 ARM7M",
    ""
};

#ifdef HOST_IS_RISCOS
char *desk_dir(void)
{
  return desktop_dir;
}

BOOLEAN is_desktop(void)
{
  return desktop;
}
#endif

static int cistrcmp(const char *s1, const char *s2)
/* Case insensitive string compare */
{
  char ch1,
       ch2;
  do {
    ch1 = toupper(*s1++);
    ch2 = toupper(*s2++);
    if ((ch1 == ch2) && (ch1 == 0)) return 0;
  } while (ch1 == ch2);
  return (ch1 < ch2) ? -1 : 1;
}


#ifdef HOST_IS_RISCOS

static void Usage(char *self)
{
  char myname[32];

  (void) program_name(self, myname, sizeof(myname));
  printf(cli_usage_part1b,myname,myname);

  printf(cli_acorn_usage);
}


#else   /* HOST_IS_RISCOS */

static void Usage(char *self)
{
  char myname[32];
#ifdef HOST_WANTS_NO_BANNER
  printf(aasm_main_banner, AsmType, AsmName, Version, Special, Module_Date);
#endif
  (void) program_name(self, myname, sizeof(myname));
#ifdef AAsm
  printf(cli_usage_part1a);
#else
  printf(cli_usage_part1b,myname,myname);
#endif
  printf(cli_usage_part2a);
  printf(cli_usage_part2b);  /* split up for mac */
  printf(cli_usage_part3);
  printf(cli_usage_part4);
#ifndef AAsm
  printf(cli_usage_part5);
#endif
  printf(cli_usage_part6);
#ifdef HOST_IS_RISCOS
  printf(cli_usage_part7);
#ifdef AAsm
  printf(cli_usage_part8);
#endif
  printf(cli_usage_part9);
#endif
  printf(cli_usage_part10);
}

#endif  /* HOST_IS_RISCOS */

static void which_endian(void)
{ int rc;
  int32 which_end = (TRUE << 24) | 0x00ffff00 | FALSE;
  rc = *((unsigned char *)&which_end);
  if (!got_endianness)
  { got_endianness = TRUE;
    target_is_big_endian = rc;
  }
  bytesex_reverse(rc != target_is_big_endian);
}

static int matches(char *s, int l, char *key)
{   int ch;
/*
 *  Return 1 if key matches a substring of the 1st l chars of s; else 0.
 */
    for(; l > 0 && *key != 0;  --l)
    {   ch = *s;
        if (isupper(ch)) ch = tolower(ch);
        if (ch != *key) return 0;
        ++key;
        ++s;
    }
    return 1;
}

static void set_calling_standard_from(char *arg)
{   char *s;
    int ch = arg[0];
    int l;

    if (isupper(ch)) ch = tolower(ch);
    callingStandard =
/*  No longer support APCS 2 options               */
/*  ch == 'r' || ch == 'u' || ch == '2' ? APCS_U : */
        ch == '3' ? APCS_3 : APCS_None;

    if (ch != '3' && ch !='n') {
      Report(ReportInfo,cli_set_apcs_assumed_none);
      return;
    }

    for (s = arg;  *s != 0 && *s != '/';  ++s);

    for (;;)
    {   arg = s + 1;
        if (*s == '/') s = arg;
        while (*s != 0 && *s != '/') ++s;
        if ((l = (s - arg)) <= 0) return;
        if (matches(arg, l, "reent"))
            reentrant = TRUE;
        else if (matches(arg, l, "32bit"))
            pc_is_32bit = TRUE;
        else if (matches(arg, l, "26bit"))
            pc_is_32bit = FALSE;
        else if (matches(arg, l, "swst"))
            sw_stack_check = TRUE;
        else if (matches(arg, l, "nosw"))
            sw_stack_check = FALSE;
        else if (matches(arg, l, "nofp"))
            nofp = (CARDINAL)-1;
        else
            Report(ReportInfo,cli_set_calling_standard_unrec,l,arg);
    }
}

BOOLEAN GetInterface(int argc, char *argv[], char *fileName)
{
  int   i, error = 0;
  char *arg;
  char **ext_argv;
  char *listfile_ptr=0;
#ifdef HOST_IS_RISCOS
  *desktop_dir = 0;
  *desktop_relative_dir = 0;
#endif
  if (patchable_config.bytesex)
  { got_endianness = TRUE;
    target_is_big_endian = (patchable_config.bytesex == 2);
  }
  pc_is_32bit = patchable_config.pc_is_32bit;
  cpu_version = patchable_config.cpu_version;
  sw_stack_check = patchable_config.sw_stack_check;
  if (patchable_config.maxCols != 255)
    maxCols = patchable_config.maxCols;
  if (patchable_config.maxRows != 255)
    maxRows = patchable_config.maxRows;

  if (argc <= 1)
  { which_endian();
    Usage(argv[0]);
    return 0;
  }
  /* Initialise the extendable argv vector */
  ext_argv = (char **) mymalloc(sizeof(char *) * (argc+1));
  for (i=0; i<argc; i++) ext_argv[i]=argv[i];

  i=1; while (i < argc)
  { arg = ext_argv[i];
    if (error) {
      /* Now only check for -quit option */
      if ((cistrcmp(arg, "-q") == 0) || (cistrcmp(arg, "-quit") == 0))
        quitFlag = 1;
    } else if (*arg == '-') {
      int ok = 1;
      switch (toupper(arg[1])) {

        case 'A':
        if (cistrcmp(arg+2, "pcs") == 0) {
          if (++i < argc) {
            set_calling_standard_from(ext_argv[i]);
          } else {
            Report(ReportInfo,cli_getinterface_apcs_missing);
            ok = 0;
          }
        }
#ifdef HOST_IS_RISCOS
        /* IDJ support for old AAsm sources */
        else if (toupper(arg[2]) == 'B' && toupper(arg[3]) == 'S')
        {
            absolute_flag = TRUE;
        }
#endif
        else ok = 0;
        break;

        case 'B':
        if (cistrcmp(arg+2, "i") == 0 || cistrcmp(arg+2, "igend") == 0)
        { target_is_big_endian = TRUE;
          got_endianness = TRUE;
        }
        else
            ok = 0;
        break;

        case 'C':
        ok=0;
#ifdef HOST_IS_RISCOS
        if ((arg[2] == 0 || cistrcmp(arg+2, "loseexec") == 0)) {
          ok = 1;
          break;
        }
        /* Option deleted, but recognised for compatibility */
#endif
        if (cistrcmp(arg+2, "pu") == 0) {
          ok=1;
          if (++i < argc) {
            int j;
            for (j = 0; cpu_list[j][0]; j++) {
              if (cistrcmp(ext_argv[i], cpu_list[j]+2)==0) {
                cpu_version=cpu_list[j][0];
                break;
              }
            }
            if (cpu_list[j][0] == 0) {
              Report(ReportInfo,cli_getinterface_bad_cpu);
            }
          } else {
            Report(ReportInfo,cli_getinterface_cpu_missing);
          }
        }
        break;

        case 'D':
        ok = 0;   /* by default */
        if ((arg[2] == 0) || (cistrcmp(arg+2, "epend") == 0))
        { if (depend_file)
            Report(ReportInfo,cli_getinterface_depend_already);
          else
          { /* Get dependency file name */
            if (++i < argc)
            { if (strcmp(ext_argv[i], "-") == 0)
                depend_file = stdout;
              else
                depend_file = fopen(ext_argv[i], "w");
              if (depend_file != NULL)
                ok = 1;
              else
                Report(ReportInfo,cli_getinterface_depend_open_fail, ext_argv[i]);
            }
            else
              Report(ReportInfo,cli_getinterface_depend_missing);
          }
        }
#ifdef HOST_IS_RISCOS
        else if (cistrcmp(arg+2, "t") == 0 ||
          cistrcmp(arg+2, "esktop") == 0)
        {
          desktop = TRUE;
          if (i+1 < argc && *ext_argv[i+1] != '-') {
            /* Get desktop source directory prefix */
            strcpy(desktop_relative_dir, ext_argv[++i]);
          }
          quitFlag = 1; /* Implied for working under desktop */
          ok = 1;
        }
#endif
        break;

        case 'E':
        ok = 0;   /* by default */
        if ((arg[2] == 0) || (cistrcmp(arg+2, "rrors") == 0))
        { if (errors_file)
            Report(ReportInfo,cli_getinterface_errors_already);
          else
          { /* Get error file name */
            if (++i < argc)
            { errors_file = ext_argv[i];
              ok = 1;
            }
            else
              Report(ReportInfo,cli_getinterface_errors_missing);
          }
        }
        break;

        case 'F':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "rom") == 0)) {
          if (++i < argc) {
            if (!gotinput) {
              strcpy(input, ext_argv[i]);
              gotinput = 1;
            } else {
              Report(ReportInfo,cli_getinterface_input_already);
              ok = 0;
            };
          } else {
            Report(ReportInfo,cli_getinterface_input_missing);
            ok = 0;
          };
        } else ok = 0;
        break;

#ifndef AAsm
        case 'G':
        make_debug = 1;
        { int ch;
          arg += 2;
          for (;;)
          { ch = *arg++;
            if (ch == 0) break;
            ch = toupper(ch);
            if (ch == 'F' || ch == 'V')
              Report(ReportInfo,cli_getinterface_debug_not_supported, ch);
            else if (ch != 'A' && ch != 'L')
              Report(ReportInfo,cli_getinterface_debug_not_recog, ch);
          }
        }
        break;
#endif

        case 'H':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "elp") == 0)) {
          Usage(ext_argv[0]);
          exit(0);
        };
        ok = 0;

        case 'I':
        if (arg[2] == 0)
        {  if (++i < argc)
             arg = ext_argv[i];
           else
           { fprintf(stderr,cli_getinterface_include_missing);
             ok = 0;
             break;
           }
        }
        else
          arg += 2;
        AddIncludePath(arg);
        break;

        case 'L':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "ength") == 0))
        { if (++i < argc)
          { int j = atoi(ext_argv[i]);
            if ((j < 0) || (j > MaxVal))
              Report(ReportInfo,cli_getinterface_len_range);
            else maxRows = j;
          }
          else
          { Report(ReportInfo,cli_getinterface_len_missing);
            ok = 0;
          }
        }
        else if (cistrcmp(arg+2, "i") == 0 || cistrcmp(arg+2, "ittleend") == 0)
        { target_is_big_endian = FALSE;
          got_endianness = TRUE;
        }
        else if (cistrcmp(arg+2, "ist") == 0)
          goto listingfile;
        else
          ok = 0;
        break;

        case 'M':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "odule") == 0)) module = 1;
        else if ((cistrcmp(arg+2, "c") == 0) ||
          (cistrcmp(arg+2, "axcache") == 0)) {
          if (++i < argc) {
            int j = 0;
            arg = ext_argv[i];
            if (isdigit(*arg)) {
              j = ((*arg == '0') && (arg[1] == 'x') && (isxdigit(arg[2])))
                ? (int)strtol(arg, NULL, 16) : atoi(arg);
            } else if ((*arg == '&') && isxdigit(arg[1]) && (arg[2] != 'x')) {
              j = (int)strtol(arg+1, NULL, 16);
            } else {
              Report(ReportInfo,cli_getinterface_maxcache_bad);
              ok = 0;
            }
            if (j < 0)
              Report(ReportInfo,cli_getinterface_maxcache_neg);
            else maxCache = j;
          } else {
            Report(ReportInfo,cli_getinterface_len_missing);
            ok = 0;
          };
        } else ok = 0;
        break;

        case 'N':
        if ((cistrcmp(arg+2, "ot") == 0) || (cistrcmp(arg+2, "oterse") == 0))
          terseState = 0;
        else if ((cistrcmp(arg+2, "oc") == 0) ||
          (cistrcmp(arg+2, "ocache") == 0))
          caching = 0;
        else if ((cistrcmp(arg+2, "oe") == 0) ||
          (cistrcmp(arg+2, "oesc") == 0))
          c_escapes = FALSE;
        else if (cistrcmp(arg+2, "ow") == 0 ||
                 cistrcmp(arg+2, "owarn") == 0)
          noWarn = TRUE;
        else ok = 0;
        break;

        case 'O':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "bject") == 0)) {
          if (++i < argc) {
            if (!gotoutput) {
              UnparsedName un;
              strcpy(output, ext_argv[i]);
              fname_parse(output,"s",&un);
              if (un.elen==1 && strcmp("s",un.extn)==0) {
                Report(ReportInfo,cli_output_is_source,output);
                error=1;
                break;
              }
              gotoutput = 1;
            } else {
              Report(ReportInfo,cli_getinterface_output_already);
              ok = 0;
            };
          } else {
            Report(ReportInfo,cli_getinterface_output_missing);
            ok = 0;
          };
        } else ok = 0;
        break;

        case 'P':
        if (cistrcmp(arg+2, "d") == 0 || cistrcmp(arg+2, "redefine") == 0)
        { if (arg[3] == 0 || toupper(arg[2]) != 'D' && arg[10] == 0)
          {  if (++i < argc)
               arg = ext_argv[i];
             else
             { fprintf(stderr,cli_getinterface_predef_missing);
               ok = 0;
               break;
             }
          }
          else if (toupper(arg[2]) == 'D')
            arg += 3;
          else
            arg += 10;
          AddPreDefine(arg);
          break;
        }
        else if ((arg[2] != 0) && (cistrcmp(arg+2, "rint") != 0))
        { ok = 0;
          break;
        }
listingfile:
        if (gotlisting)
          Report(ReportInfo,cli_getinterface_list_already);
        else
        { gotlisting = 1;
          printState = 3;
          if (++i >= argc) break;
          listfile_ptr = ext_argv[i];
          if (listfile_ptr[0] == '-') {
            if (listfile_ptr[1] == 0) {
              printState = 1;
            } else i--;
            listfile_ptr=0;
          }
          break;
        }
        ok = 0;
        break;

        case 'Q':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "uit") == 0)) quitFlag = 1;
        else ok = 0;
        break;

        case 'S':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "tamp") == 0)) stamp = 1;
        else ok = 0;
        break;

        case 'T':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "o") == 0)) {
          if (++i < argc) {
            if (!gotoutput) {
              UnparsedName un;
              strcpy(output, ext_argv[i]);
              fname_parse(output,"s",&un);
              if (un.elen==1 && strcmp("s",un.extn)==0) {
                Report(ReportInfo,cli_output_is_source,ext_argv[i]);
                error = 1;
                break;
              }
              gotoutput = 1;
            } else {
              Report(ReportInfo,cli_getinterface_output_already);
              ok = 0;
            };
          } else {
            Report(ReportInfo,cli_getinterface_output_missing);
            ok = 0;
          };
#ifdef HOST_IS_RISCOS
        } else if (cistrcmp(arg+2, "b") == 0 ||
          cistrcmp(arg+2, "hrowback") == 0) {
          set_throwback(TRUE);;
#endif
        } else ok = 0;
        break;

#ifdef HOST_IS_RISCOS
        case 'U':
            uppercase_flag = TRUE;
            break;
#endif

        case 'V':
        if (cistrcmp(arg+2, "ia") == 0) {
          char *via_argv[100]; /* Cope with 100 arguments in each via file */
          char **new_argv;
          int   via_argc,j,k,instr;
          char argbuf[150], strch;
          if (++i >= argc) {
            Report(ReportInfo,cli_getinterface_viafile_missing);
            ok=0; break;
          }
          via_file = fopen(ext_argv[i], "r");
          if (via_file==NULL) {
            Report(ReportInfo,cli_getinterface_viafile_openfail);
            ok=0; break;
          }
          for (via_argc=0; !feof(via_file); via_argc++) {
            /* Skip past white space */
            do { argbuf[0]=getc(via_file); }
            while (feof(via_file)==0 && (argbuf[0]==' ' ||
                    argbuf[0]==10 || argbuf[0]==13 || argbuf[0]==9));
            if (feof(via_file)) break;
            /* Now we've found an argument, so get read it in ... */
            if (argbuf[0]=='\'' || argbuf[0]=='\"') {
              instr=1; strch=argbuf[0]; j=0;
            } else {
              instr=strch=0; j=1;
            }
            for (; 1; j++) {
              argbuf[j]=getc(via_file);
              if (!instr && (argbuf[j]=='\"' || argbuf[j]=='\'')) {
                strch=argbuf[j]; instr=1; j--;
                continue;
              } else if (instr && argbuf[j]==strch) {
                instr=0; j--; continue;
              }
              if (instr==0 && (argbuf[j]==' ' ||
                          argbuf[j]==10 || argbuf[j]==13 || argbuf[j]==9)) {
                argbuf[j]=0;
                break;
              }
              if (feof(via_file)) {
                argbuf[++j]=0;
                break;
              }
            }
            via_argv[via_argc]=(char *) mymalloc((j+1) * sizeof(char));
            strcpy(via_argv[via_argc],argbuf);
          }
          fclose(via_file);
          if (via_argc==0) break;
          new_argv=(char **) mymalloc(sizeof(char *) * (via_argc+argc+1));
          for (j=0; j<=i; j++) new_argv[j]=ext_argv[j];
          for (k=0; k<via_argc; k++) new_argv[j+k]=via_argv[k];
          for (k=i+1; k<argc; k++) new_argv[via_argc+k]=ext_argv[k];
          free(ext_argv);
          ext_argv=new_argv;
          argc+=via_argc;
        } else ok=0;
        break;

        case 'W':
        if ((cistrcmp(arg+2, "i") == 0) || (cistrcmp(arg+2, "idth") == 0)) {
          if (++i < argc) {
            int j = atoi(ext_argv[i]);
            if ((j < 0) || (j > MaxVal))
              Report(ReportInfo,cli_getinterface_wid_range);
            else maxCols = j;
          } else {
            Report(ReportInfo,cli_getinterface_wid_missing);
            ok = 0;
          };
        } else ok = 0;
        break;

        case 'X':
        if ((arg[2] == 0) || (cistrcmp(arg+2, "ref") == 0)) xrefOn = 1;
        else ok = 0;
        break;

        default:
        ok = 0;
      };
      if (!ok) {
        Report(ReportInfo,cli_getinterface_unrecog_param,arg);
        error = 1;
      };
    } else {
      /* Either source or code file coming up */
      if (!gotinput) {
        strcpy(input, arg);
        gotinput = 1;
      } else if (!gotoutput) {
        UnparsedName un;
        strcpy(output, arg);
        fname_parse(output,"s",&un);
        if (un.elen==1 && strcmp("s",un.extn)==0) {
          Report(ReportInfo,cli_output_is_source,arg);
          error=1;
          break;
        }
        gotoutput = 1;
      } else {
        Report(ReportInfo,cli_getinterface_bad_param,arg);
        error = 1;
      };
    };
    i++;
  };
  which_endian();
  if (errors_file != NULL) freopen(errors_file, "w", stderr);
  if (error) return 0;
  if (!gotoutput) { /* If no output file has been specified, and the input */
    UnparsedName u;  /* is foo.s then make the default output file foo.o  */
    char buf[MaxLineLength+1];
    fname_parse(input,"s",&u);
    if (u.elen==1 && u.extn[0]=='s') {
     /* This code does not rely on knowing how fname is implemented,
      * but since fname does not provide essential access functions to
      * perform file manipulation, it is necessary to include the target
      * specific macros OBJPREFIX and OBJSUFFIX
      */
      strncpy(buf,u.root,u.rlen);
      buf[u.rlen]=0; /* terminate buf */
      sprintf(output,"%s%s%s",OBJPREFIX,buf,OBJSUFFIX);
      gotoutput=TRUE;
    }
  }
  /* Now that source and outfiles have been openned attempt to open the
   * listing file
   */
  if (listfile_ptr!=0) {
    if (!SetListingFile(listfile_ptr)) exit(1);
  }
#ifdef HOST_IS_RISCOS
  if (gotinput && gotoutput) {
    strcpy(fileName, output);
    if (desktop) {
      /* Determine the desktop prefix for the input file name */
      int   i = strlen(input);
      char *f = input;
      while (i-- > 0) if (f[i] == '.') break; /* Find the last dot */
      if (i > 0) {
        memcpy(desktop_dir, input, i);
        desktop_dir[i] = 0;
      };
      if (*desktop_relative_dir) {
        if (*desktop_dir) strcat(desktop_dir, ".");
        strcat(desktop_dir, desktop_relative_dir);
      };
      if (*desktop_dir) strcat(desktop_dir, ".");
    };
    return 1;
  };
#else
  if (gotoutput) { strcpy(fileName, output); return 1; };
#endif
#ifdef HOST_IS_RISCOS
  if (desktop && (!gotoutput || !gotinput)) {
    Report(ReportInfo,cli_getinterface_fname_missing);
    exit(1);
  };
#endif
  if (!gotoutput) {
    Report(ReportInfo,cli_getinterface_output_missing);
  }
#ifdef HOST_IS_RISCOS
  if (!gotinput) Report(ReportInfo,cli_getinterface_input_missing);
#endif
  return 0;
}

BOOLEAN InputFile(char *fileName)
{
  if (gotinput) strcpy(fileName, input);
#ifdef HOST_IS_RISCOS
  else Report(ReportInfo,cli_getinterface_no_input_spec);
#endif
  return gotinput;
} /* End InputFile */

#ifdef ACORN_DDE_VERSION

static char dependency[256] = "@.",
            makefile_dir[256];
static BOOLEAN depend = FALSE;

BOOLEAN do_depend(void)
{
  return depend;
}

char *depend_name(char *name)
/* Produce the filename for the dependency information */
{
  int i = strlen(makefile_dir);
  if (i != 0 &&
#ifdef HOST_IS_RISCOS
    desktop &&
#endif
    depend && name && !cimemcmp(makefile_dir, name, i) &&
    name[++i] == '.')
  {
    strcpy(dependency+2, name+i);
    return dependency;
  }
  else return name;
}

#else  /* !ACORN_DDE_VERSION */

void put_dependency_info(char *outfile, char *infile)
{
  if (depend_file)
  { if (outfile) fprintf(depend_file, "%s:", outfile);
    if (infile)  fprintf(depend_file, " %s", infile);
  }
}

void close_dependency_file(void)
{
  if (depend_file)
  { fprintf(depend_file, "\n");
    fclose(depend_file);
    depend_file = NULL;
  }
}
#endif /* !ACORN_DDE_VERSION */

/* End interface.c */
