/* -> opcode.c
 * Title:  The opcode detection routine
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

/* RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include "hostdep.h"
#include "errors.h"
#include "globvars.h"
#include "nametyp.h"
#include "opcode.h"
#include "store.h"
#include "message.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

typedef struct {
  char       key[8];
  CARDINAL   value;
  OpcodeType type;
  BOOLEAN    uncond;       /* TRUE if unconditional */
} OpcodeEntry;

typedef struct {
  Name key;
  CARDINAL   value;
} CondEntry;
#define TableSize 114

#define CondSize  64

/* Conditions */
#define CondShift 0x10000000
#define EQCond    0x00000000
#define NECond    0x10000000
#define CSCond    0x20000000
#define CCCond    0x30000000
#define MICond    0x40000000
#define PLCond    0x50000000
#define VSCond    0x60000000
#define VCCond    0x70000000
#define HICond    0x80000000
#define LSCond    0x90000000
#define GECond    0xA0000000
#define LTCond    0xB0000000
#define GTCond    0xC0000000
#define LECond    0xD0000000
#define ALCond    0xE0000000
#define NVCond    0xF0000000

/* Group 1 */
#define ANDCode   0x00000000
#define EORCode   0x00200000
#define RSBCode   0x00600000
#define ADCCode   0x00A00000
#define SBCCode   0x00C00000
#define RSCCode   0x00E00000
#define TSTCode   0x01100000
#define TEQCode   0x01300000
#define CMPCode   0x01500000
#define CMNCode   0x01700000
#define ORRCode   0x01800000
#define BICCode   0x01C00000
#define ANDSCode  0x00100000
#define EORSCode  0x00300000
#define SUBSCode  0x00500000
#define RSBSCode  0x00700000
#define ADDSCode  0x00900000
#define ADCSCode  0x00B00000
#define SBCSCode  0x00D00000
#define RSCSCode  0x00F00000
#define TSTSCode  TSTCode
#define TEQSCode  TEQCode
#define CMPSCode  CMPCode
#define CMNSCode  CMNCode
#define TSTPCode  0x0110F000
#define TEQPCode  0x0130F000
#define CMPPCode  0x0150F000
#define CMNPCode  0x0170F000
#define ORRSCode  0x01900000
#define MOVSCode  0x01B00000
#define BICSCode  0x01D00000
#define MVNSCode  0x01F00000

/* Group 2 */
#define STRCode   0x04000000
#define LDRBCode  0x04500000
#define STRBCode  0x04400000
#define LDRTCode  0x04300000
#define STRTCode  0x04200000
#define LDRBTCode 0x04700000
#define STRBTCode 0x04600000

/* Group 3 */
#define SWICode   0x0F000000

/* Group 4 */
#define LDMEDCode 0x09900000
#define STMEDCode 0x08000000
#define LDMFDCode 0x08900000
#define STMFDCode 0x09000000
#define LDMEACode 0x09100000
#define STMEACode 0x08800000
#define LDMFACode 0x08100000
#define STMFACode 0x09800000
#define LDMDBCode LDMEACode
#define STMDBCode STMFDCode
#define LDMDACode LDMFACode
#define STMDACode STMEDCode
#define LDMIBCode LDMEDCode
#define STMIBCode STMFACode
#define LDMIACode LDMFDCode
#define STMIACode STMEACode
#define IncBit    0x00800000
#define PreBit    0x01000000

/* Group 5 */
#define BCode     0x0A000000
#define BLCode    0x0B000000

/* Group 6 */
#define ADRCode   0x02000000
/* ADR just consists of the immediate bit for a Data Processing Op! */

/*Group 7*/
#define LDFCode  0x0C100100
#define STFCode  0x0C000100

/*Group 8*/
#define ADFCode  0x0E000100
#define MUFCode  0x0E100100
#define SUFCode  0x0E200100
#define RSFCode  0x0E300100
#define DVFCode  0x0E400100
#define RDFCode  0x0E500100
#define POWCode  0x0E600100
#define RPWCode  0x0E700100
#define RMFCode  0x0E800100
#define FMLCode  0x0E900100
#define FDVCode  0x0EA00100
#define FRDCode  0x0EB00100
#define POLCode  0x0EC00100

/*Group 9*/
#define MVFCode  0x0E008100
#define MNFCode  0x0E108100
#define ABSCode  0x0E208100
#define RNDCode  0x0E308100
#define SQTCode  0x0E408100
#define LOGCode  0x0E508100
#define LGNCode  0x0E608100
#define EXPCode  0x0E708100
#define SINCode  0x0E808100
#define COSCode  0x0E908100
#define TANCode  0x0EA08100
#define ASNCode  0x0EB08100
#define ACSCode  0x0EC08100
#define ATNCode  0x0ED08100

/*Group 10*/
#define CMFCode  0x0E90F110
#define CNFCode  0x0EB0F110
#define CMFECode 0x0ED0F110
#define CNFECode 0x0EF0F110

/*Group 11*/
#define FLTCode  0x0E000110

/*Group 12*/
#define FIXCode  0x0E100110

/*Group 13*/
#define WFSCode  0x0E200110
#define RFSCode  0x0E300110
#define WFCCode  0x0E400110
#define RFCCode  0x0E500110

/*Group 14*/
#define LMFCode  0x0C100200
#define SMFCode  0x0C000200

/*Group 15*/
#define LMFIACode 0x0C900200
#define LMFDBCode 0x0D100200
#define SMFIACode 0x0C800200
#define SMFDBCode 0x0D000200
#define LMFFDCode LMFIACode
#define LMFEACode LMFDBCode
#define SMFFDCode SMFDBCode
#define SMFEACode SMFIACode

/*Group 16*/
#define URDCode  0x0EE08100
#define NRMCode  0x0EF08100

/*Group 17*/
#define LDCCode   0x0C100000
#define STCCode   0x0C000000
#define LDCLCode  0x0C500000
#define STCLCode  0x0C400000

/*Group 18*/
#define CDPCode   0x0E000000

/*Group 19*/
#define MRCCode   0x0E100010

/*Group 20*/
#define MULCode   0x00000090
#define MULSCode  0x00100090

/*Group 21*/
#define MLACode   0x00200090
#define MLASCode  0x00300090

/*Group 22*/
#define ADRLCode  0x020F0000

/*Group 23*/
#define SWPCode  0x01000090

/*Group 24*/
#define UMULLCode 0x00800090
#define SMULLCode 0x00C00090
#define UMLALCode 0x00A00090
#define SMLALCode 0x00E00090
#define LongMultiplySBit 0x00100000

/* Load/Store halfword,signed,double - all in opcode.h */

#define CLZCode   0x016F0F10

#define BKPTCode  0x01200070

#define BXCode    0x012FFF10
#define BLXCodeR  0x012FFF30

#define NOPCode   0x01A00000

#define LDC2Code  0x1C100000
#define STC2Code  0x1C000000
#define CDP2Code  0x1E000000
#define MRC2Code  0x1E100010
#define MCR2Code  0x1E000010

#define PLDCode   0x1550F000

#define QADDCode  0x01000050
#define QDADDCode 0x01400050
#define QSUBCode  0x01200050
#define QDSUBCode 0x01600050

#define SMULBBCode  0x01600080
#define SMULBTCode  0x016000C0
#define SMULTBCode  0x016000A0
#define SMULTTCode  0x016000E0
#define SMLABBCode  0x01000080
#define SMLABTCode  0x010000C0
#define SMLATBCode  0x010000A0
#define SMLATTCode  0x010000E0
#define SMULWBCode  0x012000A0
#define SMULWTCode  0x012000E0
#define SMLAWBCode  0x01200080
#define SMLAWTCode  0x012000C0
#define SMLALBBCode 0x01400080
#define SMLALBTCode 0x014000C0
#define SMLALTBCode 0x014000A0
#define SMLALTTCode 0x014000E0

#define MCRRCode    0x0C400000
#define MRRCCode    0x0C500000



/*Extra bits*/
/*For data operations*/
#define SCode 0x00000
#define DCode 0x00080
#define ECode 0x80000
#define PCode 0x20
#define MCode 0x40
#define ZCode 0x60
/*For data transfer*/
#define SingleCode 0x000000
#define DoubleCode 0x008000
#define ExtendCode 0x400000
#define PackedCode 0x408000

static BOOLEAN IsCondition(const char *op);

static BOOLEAN initialised = FALSE;

static CondEntry   conditions[CondSize];

static OpcodeEntry opcodes[TableSize] = {
  {"ABS",   ABSCode,   FPMonadic},
  {"ACS",   ACSCode,   FPMonadic},
  {"ADC",   ADCCode,   DataProcessing},
  {"ADD",   ADDCode,   DataProcessing},
  {"ADF",   ADFCode,   FPDyadic},
  {"ADR",   ADRCode,   Adr},
  {"AND",   ANDCode,   DataProcessing},
  {"ASN",   ASNCode,   FPMonadic},
  {"ATN",   ATNCode,   FPMonadic},
  {"B",     BCode,     Branch},
  {"BIC",   BICCode,   DataProcessing},
  {"BKPT",  BKPTCode,  BKPT, TRUE},
  {"BL",    BLCode,    Branch},
  {"BLX",   BLXCodeR,  BLX},
  {"BX",    BXCode,    BranchXReg},
  {"CDP",   CDPCode,   CPDO},
  {"CDP2",  CDP2Code,  CPDO2, TRUE},
  {"CLZ",   CLZCode,   CLZ},
  {"CMF",   CMFCode,   FPCompare},
  {"CMFE",  CMFECode,  FPCompare},
  {"CMN",   CMNCode,   DataProcessing},
  {"CMP",   CMPCode,   DataProcessing},
  {"CNF",   CNFCode,   FPCompare},
  {"CNFE",  CNFECode,  FPCompare},
  {"COS",   COSCode,   FPMonadic},
  {"DVF",   DVFCode,   FPDyadic},
  {"EOR",   EORCode,   DataProcessing},
  {"EXP",   EXPCode,   FPMonadic},
  {"FDV",   FDVCode,   FPDyadic},
  {"FIX",   FIXCode,   FPFix},
  {"FLT",   FLTCode,   FPFloat},
  {"FML",   FMLCode,   FPDyadic},
  {"FRD",   FRDCode,   FPDyadic},
  {"LDC",   LDCCode,   CPDT},
  {"LDC2",  LDC2Code,  CPDT2, TRUE},
  {"LDF",   LDFCode,   FPDataTransfer},
  {"LDM",   LDMDACode, BlockData},
  {"LDR",   LDRCode,   DataTransfer},
  {"LFM",   LMFCode,   FPBlock},
  {"LGN",   LGNCode,   FPMonadic},
  {"LOG",   LOGCode,   FPMonadic},
  {"MCR",   MCRCode,   CPRT},
  {"MCR2",  MCR2Code,  CPRT2, TRUE},
  {"MCRR",  MCRRCode,  CPRRT},
  {"MLA",   MLACode,   MLA},
  {"MNF",   MNFCode,   FPMonadic},
  {"MOV",   MOVCode,   DataProcessing},
  {"MRC",   MRCCode,   CPRT},
  {"MRC2",  MRC2Code,  CPRT2, TRUE},
  {"MRRC",  MRRCCode,  CPRRT},
  {"MRS",   MRSCode,   MVP},
  {"MSR",   MSRCode,   MVP},
  {"MUF",   MUFCode,   FPDyadic},
  {"MUL",   MULCode,   MUL},
  {"MVF",   MVFCode,   FPMonadic},
  {"MVN",   MVNCode,   DataProcessing},
  {"NOP",   NOPCode,   NOP, TRUE},
  {"NRM",   NRMCode,   FPNorm},
  {"ORR",   ORRCode,   DataProcessing},
  {"PLD",   PLDCode,   PLD, TRUE},
  {"POL",   POLCode,   FPDyadic},
  {"POW",   POWCode,   FPDyadic},
  {"QADD",  QADDCode,  Saturating},
  {"QDADD", QDADDCode, Saturating},
  {"QDSUB", QDSUBCode, Saturating},
  {"QSUB",  QSUBCode,  Saturating},
  {"RDF",   RDFCode,   FPDyadic},
  {"RFC",   RFCCode,   FPStatus},
  {"RFS",   RFSCode,   FPStatus},
  {"RMF",   RMFCode,   FPDyadic},
  {"RND",   RNDCode,   FPMonadic},
  {"RPW",   RPWCode,   FPDyadic},
  {"RSB",   RSBCode,   DataProcessing},
  {"RSC",   RSCCode,   DataProcessing},
  {"RSF",   RSFCode,   FPDyadic},
  {"SBC",   SBCCode,   DataProcessing},
  {"SFM",   SMFCode,   FPBlock},
  {"SIN",   SINCode,   FPMonadic},
  {"SMLABB",  SMLABBCode,  SMLA},
  {"SMLABT",  SMLABTCode,  SMLA},
  {"SMLAL",   SMLALCode,   SMLAL},
  {"SMLALBB", SMLALBBCode, SMLALxy},
  {"SMLALBT", SMLALBTCode, SMLALxy},
  {"SMLALTB", SMLALTBCode, SMLALxy},
  {"SMLALTT", SMLALTTCode, SMLALxy},
  {"SMLATB",  SMLATBCode,  SMLA},
  {"SMLATT",  SMLATTCode,  SMLA},
  {"SMLAWB",  SMLAWBCode,  SMLA},
  {"SMLAWT",  SMLAWTCode,  SMLA},
  {"SMULBB",  SMULBBCode,  SMUL},
  {"SMULBT",  SMULBTCode,  SMUL},
  {"SMULL",   SMULLCode,   SMULL},
  {"SMULTB",  SMULTBCode,  SMUL},
  {"SMULTT",  SMULTTCode,  SMUL},
  {"SMULWB",  SMULWBCode,  SMUL},
  {"SMULWT",  SMULWTCode,  SMUL},
  {"SQT",   SQTCode,   FPMonadic},
  {"STC",   STCCode,   CPDT},
  {"STC2",  STC2Code,  CPDT2, TRUE},
  {"STF",   STFCode,   FPDataTransfer},
  {"STM",   STMDACode, BlockData},
  {"STR",   STRCode,   DataTransfer},
  {"SUB",   SUBCode,   DataProcessing},
  {"SUF",   SUFCode,   FPDyadic},
  {"SWI",   SWICode,   SWI},
  {"SWP",   SWPCode,   SWP},
  {"TAN",   TANCode,   FPMonadic},
  {"TEQ",   TEQCode,   DataProcessing},
  {"TST",   TSTCode,   DataProcessing},
  {"UMLAL", UMLALCode, UMLAL},
  {"UMULL", UMULLCode, UMULL},
  {"URD",   URDCode,   FPNorm},
  {"WFC",   WFCCode,   FPStatus},
  {"WFS",   WFSCode,   FPStatus}
};

static unsigned char bounds[27];

static int32 OpcodeFind(const OpcodeEntry *opcodes, const unsigned char *bounds, Name name, CARDINAL *len)
{
  CARDINAL i,lb,ub,cond;
  CARDINAL best = -1, bestlen = 0, bestcond = 0, l = 0;
  int32 cmp;
  const char *nptr, *iptr;

  if (name.key[0] < 'A' || name.key[0] > 'Z')
    return -1;

  lb = bounds[name.key[0]-'A'];
  ub = bounds[name.key[0]-'A'+1];

  for (i=lb; i<ub; i++) {
    iptr=opcodes[i].key+1;
    nptr=name.key+1;
    l=1;
    cmp=0;
    while (l < name.length && *iptr != '\0') {
      l++;
      if (*nptr++ != *iptr++)
        goto next;
    }
    cond=0;
    if (l + 2 <= name.length && !opcodes[i].uncond && IsCondition(nptr)) cond = 2;
    if (l + cond > bestlen + bestcond) {
      best = i;
      bestlen = l;
      bestcond = cond;
    }
    next: ;
  }
  *len = bestlen;
  return best;
}

static void Conditional(CARDINAL index, CARDINAL *condition,
  Name *name, char *opcodeChars)
{
  char *op = name->key+index;
  CARDINAL i =
    ((32L*(*op-0x40L) + op[1]-0x40) >> 2) & ((CondSize) - 1L);
  { CondEntry *cond = &(conditions[i]);
    if ((cond->key.length == 2) && (*op == *cond->key.key) &&
      (op[1] == cond->key.key[1])) {
      *condition = cond->value;
      if (pass == 1 && cond->value == NVCond)
        Report(ReportWarning,p1line_p1line_res_instr);
      /* Only copy opcode if there is a conditional in the middle */
      memcpy(opcodeChars, name->key, (size_t)index);
      memcpy(opcodeChars + index, name->key + index + 2,
        (size_t)(name->length - index -2));
      name->length -= 2;
      name->key = opcodeChars;
    }
  }
}

static BOOLEAN IsCondition(const char *op)
/*The result is TRUE iff there is a condition at index*/
{
  CARDINAL i =
    ((32L*(*op-0x40L) + op[1]-0x40) >> 2) & ((CondSize) - 1L);
  { CondEntry *cond = &(conditions[i]);
    if ((cond->key.length == 2) && (*op == *cond->key.key) &&
      (op[1] == cond->key.key[1])) {
        return TRUE;
      }
  }
  return FALSE;
}

static BOOLEAN OpcodeARM(Name name, OpcodeType *opcodeType, CARDINAL *opcodeValue)
/*The result is TRUE iff the name is an opcode*/
{
  CARDINAL conditionalPart = ALCond,
           i;
  int32    index;
  char     chs[9],
           opcodeChars[8],
           ch;
  OpcodeEntry *opc;

#ifdef HOST_IS_RISCOS
  if (!uppercase_flag)  /* IDJ (Acorn) support for -UpperCase */
#endif
  if ((name.length >= 1) && (name.length <= 9))
  { i = 0;
    while ((i < name.length) && islower(name.key[i]))
    { chs[i] = toupper(name.key[i]);
      i++;
    }
    if (i == name.length)
      /* Was all lower case, so we can try it as an opcode */
      name.key = chs;
  }

  index = OpcodeFind(opcodes, bounds, name, &i);
  if (index < 0) return FALSE;

  opc = opcodes + index;

  if (!opc->uncond)
    Conditional(i, &conditionalPart, &name, opcodeChars);

  *opcodeValue = opc->value + conditionalPart;
  *opcodeType = opc->type;

  /* Big switch on the number of flag characters */
  switch (name.length - i) {
    case 0:
    switch (opc->type) {
      case Branch:
      if (name.length == 2)
         *opcodeValue = BLCode + conditionalPart;
      break;

      /* These require extra flags */
      case BlockData:
      case FPDataTransfer:
      case FPDyadic:
      case FPMonadic:
      case FPNorm:
      return FALSE;
    }
    break;

    case 1:
    ch = (name.key[i]);
    switch (opc->type) {
      case DataProcessing:
      if (ch == 'S') *opcodeValue |= ANDSCode;
      else if ((ch == 'P') && (opc->value >= TSTCode) &&
        (opc->value <= CMNCode))
        *opcodeValue += TSTPCode-TSTCode;
      else return FALSE;
      break;

      case SWP:
      if (ch == 'B') *opcodeValue += LDRBCode-LDRCode;
      break;

      case DataTransfer:
      if (ch == 'B') *opcodeValue += LDRBCode-LDRCode;
      else if (ch == 'T')
        *opcodeValue += LDRTCode-LDRCode;
      else if (ch == 'H') {
        *opcodeValue += LDRHCode-LDRCode;
        *opcodeType = DataTransfer_v4;
      }
      else if (ch == 'D') {
        if (opc->value == LDRCode)
          *opcodeValue = LDRDCode + conditionalPart;
        else
          *opcodeValue = STRDCode + conditionalPart;
        *opcodeType = DataTransfer_v4;
      }
      else return FALSE;
      break;

      case Adr:
      if (ch == 'L') {
        *opcodeValue = ADRLCode + conditionalPart;
        *opcodeType = ADRL;
      } else return FALSE;
      break;

      case MUL:
      case MLA:
      if (ch == 'S') *opcodeValue += MULSCode-MULCode;
      else return FALSE;
      break;

      case FPDataTransfer:
      if (ch == 'S') *opcodeValue += SingleCode;
      else if (ch == 'D') *opcodeValue += DoubleCode;
      else if (ch == 'E') *opcodeValue += ExtendCode;
      else if (ch == 'P') *opcodeValue += PackedCode;
      else return FALSE;
      break;

      case FPDyadic:
      case FPMonadic:
      case FPFloat:
      case FPNorm:
      switch (ch) {
        case 'S':
        *opcodeValue += SCode;
        break;

        case 'D':
        *opcodeValue += DCode;
        break;

        case 'E':
        *opcodeValue += ECode;
        break;

        default:
        return FALSE;
      }; /* case */
      break;

      case FPFix:
      switch (ch) {
        case 'M':
        *opcodeValue += MCode;
        break;

        case 'P':
        *opcodeValue += PCode;
        break;

        case 'Z':
        *opcodeValue += ZCode;
        break;

        default:
        return FALSE;
      }; /* case */
      break;

      case FPCompare:
      if (ch == 'E') *opcodeValue += CMFECode-CMFCode;
      else return FALSE;
      break;

      case CPDT:
      case CPDT2:
      if (ch == 'L') *opcodeValue += LDCLCode-LDCCode;
      else return FALSE;
      break;

      case SMULL:
      case UMULL:
      case SMLAL:
      case UMLAL:
        if (ch!='S') return FALSE;
        *opcodeValue += LongMultiplySBit;
        break;

      default:
      return FALSE;
    }
    break;

    case 2:
    switch (opc->type) {
      case DataTransfer:
      if ((name.key[3] == 'B') && (name.key[4] == 'T'))
        *opcodeValue += LDRBTCode-LDRCode;
      else if ((name.key[3] == 'S') && opc->value == LDRCode) {
        if (name.key[4] == 'H')
          *opcodeValue += LDRSHCode-LDRCode;
        else if (name.key[4] == 'B')
          *opcodeValue += LDRSBCode-LDRCode;
        else
          return FALSE;
        *opcodeType = DataTransfer_v4;
      } else return FALSE;
      break;

      case BlockData:
      ch = name.key[4];
      switch (name.key[3]) {
        case 'D':
        if (ch == 'B') *opcodeValue += PreBit;
        else if (ch != 'A') return FALSE;
        break;

        case 'E':
        i = PreBit;
        if (ch == 'D') i += IncBit;
        else if (ch != 'A') return FALSE;
        if (opc->value == STMDACode) i ^= PreBit | IncBit;
        *opcodeValue += i;
        break;

        case 'F':
        i = 0;
        if (ch == 'D') i += IncBit;
        else if (ch != 'A') return FALSE;
        if (opc->value == STMDACode) i ^= PreBit | IncBit;
        *opcodeValue += i;
        break;

        case 'I':
        *opcodeValue += IncBit;
        if (ch == 'B') *opcodeValue += PreBit;
        else if (ch != 'A') return FALSE;
        break;

        default:
        return FALSE;
      }; /* case */
      break;

      case FPDyadic:
      case FPMonadic:
      case FPFloat:
      case FPNorm:
      switch (name.key[3]) {
        case 'D':
        *opcodeValue += DCode;
        break;

        case 'E':
        *opcodeValue += ECode;
        break;

        case 'S':
        break;

        default:
        return FALSE;
      }; /* case */
      switch (name.key[4]) {
        case 'M':
        *opcodeValue += MCode;
        break;

        case 'P':
        *opcodeValue += PCode;
        break;

        case 'Z':
        *opcodeValue += ZCode;
        break;

        default:
        return FALSE;
      }; /* case */
      break;

      case FPBlock:
      *opcodeType = FPStack;
      ch = name.key[4];
      switch (name.key[3]) {
        case 'D':
        if (ch == 'B') *opcodeValue += PreBit;
        else return FALSE;
        break;

        case 'E':
        if (ch != 'A') return FALSE;
        *opcodeValue += (opc->value == SMFCode) ? IncBit : PreBit;
        break;

        case 'F':
        if (ch != 'D') return FALSE;
        *opcodeValue += (opc->value == SMFCode) ? PreBit : IncBit;
        break;

        case 'I':
        *opcodeValue += IncBit;
        if (ch != 'A') return FALSE;
        break;

        default:
        return FALSE;
      } /* case */
      break;

      default:
      return FALSE;
    } /* case 2: switch (opc->type) */
    break;

    default:
    return FALSE;

  } /* switch (name.length - i) */

  if ((*opcodeType <= Adr) || allowFP || (*opcodeType >= CPDT)) {
    if ((*opcodeType >= FPDataTransfer) && (*opcodeType <= FPStatus))
      hadFP = TRUE;
    return TRUE;
  }

  return FALSE;
} /* End Opcode */

#define ThumbTableSize 34

/*Data processing (Rn=Rn op Rm)*/
#define ThumbANDCode 0x4000
#define ThumbEORCode 0x4040
/*#define ThumbLSLCode 0x4080*/
/*#define ThumbLSRCode 0x40C0*/
/*#define ThumbASRCode 0x4100*/
#define ThumbADCCode 0x4140
#define ThumbSBCCode 0x4180
#define ThumbRORCode 0x41C0
#define ThumbTSTCode 0x4200
#define ThumbNEGCode 0x4240
/*#define ThumbCMPCode 0x4280*/
#define ThumbCMNCode 0x42C0
#define ThumbORRCode 0x4300
#define ThumbMULCode 0x4340
#define ThumbBICCode 0x4380
#define ThumbMVNCode 0x43C0

#define ThumbNOPCode 0x46C0

/*Block data transfer*/
#define ThumbPUSHCode  0xB400
#define ThumbPOPCode   0xBC00
#define ThumbSTMIACode 0xC000
#define ThumbLDMIACode 0xC800

/*Exceptions*/
#define ThumbBKPTCode 0xBE00
#define ThumbSWICode  0xDF00

static OpcodeEntry thumb_opcodes[ThumbTableSize] = {
  {"ADC",  ThumbADCCode, ThumbDataProcessing, TRUE},
  {"ADD",  ThumbADDriCode, ThumbMovCmpAddSub, TRUE},
  {"ADR",  ThumbADDrpiCode, ThumbADR, TRUE},
  {"AND",  ThumbANDCode, ThumbDataProcessing, TRUE},
  {"ASL",  ThumbLSLrriCode, ThumbShift, TRUE},
  {"ASR",  ThumbASRrriCode, ThumbShift, TRUE},
  {"B",    ThumbBCode, ThumbBranch},
  {"BIC",  ThumbBICCode, ThumbDataProcessing, TRUE},
  {"BKPT", ThumbBKPTCode, ThumbBreakpoint, TRUE},
  {"BL",   ThumbBLCode, ThumbBranchLong, TRUE},
  {"BLX",  ThumbBLXCode, ThumbBranchLongX, TRUE},
  {"BX",   ThumbBXCode, ThumbBranchXReg, TRUE},
  {"CMN",  ThumbCMNCode, ThumbDataProcessing, TRUE},
  {"CMP",  ThumbCMPriCode, ThumbMovCmpAddSub, TRUE},
  {"EOR",  ThumbEORCode, ThumbDataProcessing, TRUE},
  {"LDMIA",ThumbLDMIACode, ThumbBlockData, TRUE},
  {"LDR",  ThumbLDRCodeR, ThumbDataTransfer, TRUE},
  {"LSL",  ThumbLSLrriCode, ThumbShift, TRUE},
  {"LSR",  ThumbLSRrriCode, ThumbShift, TRUE},
  {"MOV",  ThumbMOVriCode, ThumbMovCmpAddSub, TRUE},
  {"MUL",  ThumbMULCode, ThumbDataProcessing, TRUE},
  {"MVN",  ThumbMVNCode, ThumbDataProcessing, TRUE},
  {"NEG",  ThumbNEGCode, ThumbDataProcessing, TRUE},
  {"NOP",  ThumbNOPCode, ThumbNOP, TRUE},
  {"ORR",  ThumbORRCode, ThumbDataProcessing, TRUE},
  {"POP",  ThumbPOPCode, ThumbPop, TRUE},
  {"PUSH", ThumbPUSHCode,ThumbPush, TRUE},
  {"ROR",  ThumbRORCode, ThumbDataProcessing, TRUE},
  {"SBC",  ThumbSBCCode, ThumbDataProcessing, TRUE},
  {"STMIA",ThumbSTMIACode, ThumbBlockData, TRUE},
  {"STR",  ThumbSTRCodeR, ThumbDataTransfer, TRUE},
  {"SUB",  ThumbSUBriCode, ThumbMovCmpAddSub, TRUE},
  {"SWI",  ThumbSWICode, ThumbSWI, TRUE},
  {"TST",  ThumbTSTCode, ThumbDataProcessing, TRUE},
};

static unsigned char thumb_bounds[27];

static BOOLEAN OpcodeThumb(Name name, OpcodeType *opcodeType, CARDINAL *opcodeValue)
/*The result is TRUE iff the name is an opcode*/
{
  CARDINAL i;
  int32    index;
  char     chs[5],
           opcodeChars[4],
           ch;
  OpcodeEntry *opc;

#ifdef HOST_IS_RISCOS
  if (!uppercase_flag)  /* IDJ (Acorn) support for -UpperCase */
#endif
  if ((name.length >= 1) && (name.length <= 5))
  { i = 0;
    while ((i < name.length) && islower(name.key[i]))
    { chs[i] = toupper(name.key[i]);
      i++;
    }
    if (i == name.length)
      /* Was all lower case, so we can try it as an opcode */
      name.key = chs;
  }

  index = OpcodeFind(thumb_opcodes, thumb_bounds, name, &i);
  if (index < 0) return FALSE;
  opc = thumb_opcodes + index;
  *opcodeValue = opc->value;
  *opcodeType = opc->type;

  switch (name.length - i) {
    case 0:
    break;

    case 1:
    ch = (name.key[3]);
    switch (opc->type) {
      case ThumbDataTransfer:
      if (ch == 'B')
        *opcodeValue |= ThumbLDRBCodeR - ThumbLDRCodeR;
      else if (ch == 'H')
        *opcodeValue |= ThumbLDRHCodeR - ThumbLDRCodeR;
      else
        return FALSE;
      break;

      default:
      return FALSE;
    }
    break;

    case 2:
    switch (opc->type) {
      case ThumbBranch:
      { CARDINAL conditionalPart;
        Conditional(1, &conditionalPart, &name, opcodeChars);
        if (name.length == 1 && conditionalPart < ALCond) {
          *opcodeValue = ThumbBccCode | (conditionalPart >> 20);
          return TRUE;
        }
        return FALSE;
      }

      case ThumbDataTransfer:
      if (name.key[3] == 'S' && opc->value == ThumbLDRCodeR) {
        if (name.key[4] == 'H')
          *opcodeValue += ThumbLDRSHCodeR - ThumbLDRCodeR;
        else if (name.key[4] == 'B')
          *opcodeValue += ThumbLDRSBCodeR - ThumbLDRCodeR;
        else
          return FALSE;
      }
      else
        return FALSE;
      break;

      default:
      return FALSE;
    }
    break;

    default:
    return FALSE;
  }
  return TRUE;
} /* End Opcode */

BOOLEAN Opcode(Name name, OpcodeType *opcodeType, CARDINAL *opcodeValue)
{
  if (thumbMode)
    return OpcodeThumb(name, opcodeType, opcodeValue);
  else
    return OpcodeARM(name, opcodeType, opcodeValue);
}

static void InitCond(char *chars, CARDINAL condValue)
{
  CARDINAL index = ((32L*(chars[0]-0x40L)+chars[1]-0x40) >> 2) & (CondSize-1L);
  if (conditions[index].key.length != 0) {
    fprintf(stderr,opcode_initcond_internal_err,chars);
  }
  conditions[index].value = condValue;
  conditions[index].key.length = 2;
  conditions[index].key.key = (char *) mymalloc(2);
  conditions[index].key.key[0] = chars[0];
  conditions[index].key.key[1] = chars[1];
} /* End InitCond */

static void InitTable(const OpcodeEntry *table, CARDINAL size, unsigned char *bounds)
{
  CARDINAL i, j, c;

  for (i=0; i<size-1; i++) {
    if (strcmp(table[i].key,table[i+1].key)>=0) {
        fprintf(stderr,opcode_initop_internal_err,
          i,table[i].key,i+1,table[i+1].key);
    }
  }

  for (i=0, j=0, c='A'; i<size; i++) {
    if (table[i].key[0] != c) {
      j = c+1;
      c = table[i].key[0];
      for (; j<=c; j++) {
        bounds[j-'A']=(unsigned char) i;
      }
    }
  }

  for (j=c+1; j<='Z'+1; j++)
    bounds[j-'A']=(unsigned char) size;
}

void InitOpcode(void)
{
  CARDINAL i;

  if (!initialised) {
    for (i = 0; i < CondSize; i++) conditions[i].key.length = 0;

    /*Initialise conditions*/
    InitCond("EQ", EQCond);
    InitCond("NE", NECond);
    InitCond("CS", CSCond);
    InitCond("CC", CCCond);
    InitCond("MI", MICond);
    InitCond("PL", PLCond);
    InitCond("VS", VSCond);
    InitCond("VC", VCCond);
    InitCond("HI", HICond);
    InitCond("LS", LSCond);
    InitCond("GE", GECond);
    InitCond("LT", LTCond);
    InitCond("GT", GTCond);
    InitCond("LE", LECond);
    InitCond("AL", ALCond);
    InitCond("NV", NVCond);
    InitCond("HS", CSCond);
    InitCond("LO", CCCond);

    InitTable(opcodes, TableSize, bounds);
    InitTable(thumb_opcodes, ThumbTableSize, thumb_bounds);

    initialised = TRUE;
  }
} /* End InitOpcode */

/* End opcode.c */
