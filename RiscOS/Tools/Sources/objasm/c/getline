/* -> getline.c
 * Title:  The general line generation routine
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <string.h>
#include <stdio.h>
#ifdef __GNUC__
#  include <unistd.h>
#endif

#include "options.h"
#ifndef AAsm
#  include "aofvars.h"
#endif

#include "asm.h"
#include "constant.h"
#include "errors.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#include "macrotyp.h"
#include "message.h"

static char ownLine[MaxLineLength+1], *line = ownLine;

char *pointerInFile, *oldPointerInFile;

CARDINAL lineNumber;

FileReadMode fileReadMode;

BOOLEAN GetLine(char **string, BOOLEAN allowEOF)
/*The returned value says whether string substitution is required*/
{
  CARDINAL index;
  char     ch;
  BOOLEAN  dollarFound = FALSE,
           inString,
           inComment;
  char    *endOfFile,
          *local;

  listStatus = nextListState;
  linePrinted = FALSE;
  lineNumber++;
  if (abortFlag) {
    /*Panic!*/
#ifndef AAsm
    if (input_style_set && (input_style == AsIS)) {
      exception = EndOfInput;
      return FALSE;
    }
#endif
    strcpy(ownLine, (inMacroDef) ? "  MEND\r" :
      (macroLevel == 0) ? "   END\r" : " MEXIT\r");
    *string = ownLine;
    return FALSE;
  }; /* if */
  if (macroLevel != 0) {
    *string = pointerInFile;
    currentLinePointer = *string;
    oldPointerInFile = *string;
    return MacroSubstitute(string, line);
  }
  switch (fileReadMode) {
    case WholeFileLoad:
    endOfFile = fileStore + fileSize;
    local = pointerInFile;/*Return the start of the line*/
    *string = local;
    currentLinePointer = local;/*For the purposes of printing*/
    oldPointerInFile = local;
    index = 0;
    inString=FALSE;
    inComment=FALSE;
    for (;;) {
      if (index >= MaxLineLength) {
        local[MaxLineLength] = CR;
        Report(AsmError,getline_getline_too_long);
        exception = EndOfInput;
        return FALSE;
      };
      if (local + index >= endOfFile) {
        *string = ownLine;
        *ownLine = CR;
        currentLinePointer = *string;
#ifdef AAsm
        Report(AsmError,"End of input file");
#else
        if (input_style_set && (input_style == ObjAsmIS))
        { if (!allowEOF)
            Report(AsmError,getline_getline_eof);
        } else {
          input_style_set = TRUE;
          input_style = AsIS;
          output_style_set = TRUE;
          output_style = ADotOutOS;
        }
#endif
        exception = EndOfInput;
        return FALSE;
      }
      ch = local[index];
      if (!inString && ch == ';') inComment=TRUE;
      if (ch == Quotes) inString=inString?FALSE:TRUE;
      if (ch == CR || ch == LF ) {
        if (local[index-1]!='\\') break;
        if (inString) {
          local[index]=CR;
          Report(AsmError,getline_no_string_splitting);
          break;
        }
        if (inComment)
        {
          local[index]=CR;
          Report(ReportWarning,getline_comment_continuation);
        }
        lineNumber++;
        local[index-1]=Space;
        local[index]=SplitLine;
        if ((local[index+1] == CR && ch == LF) ||
            (local[index+1] == LF && ch == CR)) {
          /*Allow CRLF or LFCR terminated lines*/
          local[index++]=Space;
        }
      }
      else if (ch == Dollar) dollarFound=TRUE;
      else if (ch == TabCh) local[index]=Space;
      else if (ch == SplitLine) lineNumber++;
      index++;
    };
    local[index] = CR; /* Always terminate with CR */
    /*Now step past the line ready for the next one*/
    pointerInFile = local + index + 1;
    if (pointerInFile < endOfFile) {
      /* Check for possible complementary terminator */
      if ((*pointerInFile == CR && ch == LF) ||
        (*pointerInFile == LF && ch == CR)) {
        /*Allow CRLF or LFCR terminated lines*/
        pointerInFile++;
      };
    }; /* if */
    break;

    case ByteStream:
    index = (CARDINAL)ftell(inputStream);
    oldPointerInFile = (char *)index;/*For the benefit of WHILE/WEND*/
    *string = line;
    currentLinePointer = line;
    index = 0;
    inString=FALSE;
    inComment=FALSE;
    for (;;) {
      int temp = fgetc(inputStream);
      if (temp == EOF || ferror(inputStream)) {
        **string = CR;
#ifdef AAsm
        Report(AsmError,getline_getline_eof);
#else
        if (input_style_set && (input_style == ObjAsmIS))
        { if (!allowEOF)
            Report(AsmError,getline_getline_eof);
            break;
        } else {
          input_style_set = TRUE;
          input_style = AsIS;
          output_style_set = TRUE;
          output_style = ADotOutOS;
        }
#endif
        exception = EndOfInput;
        return FALSE;
      } /* if */
      ownLine[index]=ch=temp;
      if (!inString && ch == ';') inComment=TRUE;
      if (ch == Quotes) inString= inString?FALSE:TRUE;
      if (ch == CR || ch == LF ) {
        ownLine[index]=CR;
        temp = fgetc(inputStream);
        if (!ferror(inputStream) && temp != EOF) {
          if ((ch == CR && temp != LF) ||
              (ch == LF && temp != CR)) {
            fseek(inputStream, -1, SEEK_CUR);
            /*Don't ignore it if valid and not the complementary item*/
          }
        }
        if (ownLine[index-1]=='\\') { /* continue onto next line */
          if (inString) {
            ownLine[index]=CR;
            Report(AsmError,getline_no_string_splitting);
            break;
          }
          if (inComment)
          {
            ownLine[index]=CR;
            /* this warning appears once on each pass! */
            Report(ReportWarning,getline_comment_continuation);
          }
          lineNumber++;
          ownLine[index-1]=Space;
          ownLine[index]=SplitLine;
        } else break; /* We've got the whole line now */
      } else if (ch == Dollar) dollarFound=TRUE;
        else if (ch == TabCh) ownLine[index]=Space;
        else if (ch == SplitLine) lineNumber++;
      index++;
      if (index >= MaxLineLength) {
        Report(AsmError,getline_getline_too_long);
        exception = EndOfInput;
        return FALSE;
      } /* if */
    }
  } /* case */
  currentLinePointer = *string;/*Update so we list what we parse*/
  return dollarFound;
} /* End GetLine */

/* End getline.c */
