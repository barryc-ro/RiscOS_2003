/* -> condasm.c
 * Title:  The IF, WHILE and structure stack handler
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */


#include "condasm.h"
#include "errors.h"
#include "globvars.h"
#include "macrotyp.h"
#include "message.h"
#include <stdio.h>
#include <stdlib.h>

#define StructureStackSize 256  /* was 512 */

static StructureStackElement structureStack[StructureStackSize];

static CARDINAL stackPointer,
                errorPointer;
static BOOLEAN  initialised = FALSE;

BOOLEAN notSkipping;

BOOLEAN Stack(StructureStackElement s)
{
  if (stackPointer >= StructureStackSize) {
    Report(AsmError,condasm_stack_overflow);
    exception = StackOverflow;
    return FALSE;
  }; /* if */
  structureStack[stackPointer++] = s;
  return TRUE;
} /* End Stack */

BOOLEAN Unstack(StructureStackElement *s)
{
  if (stackPointer == 0) {
    Report(AsmError,condasm_stack_underflow);
    exception = StackUnderflow;
    return FALSE;
  }; /* if */
  *s = structureStack[--stackPointer];
  return TRUE;
} /* End Unstack */

BOOLEAN GetTopOfStack(StructureStackElement *s)
{
  if (stackPointer == 0) return FALSE;
  *s = structureStack[stackPointer-1];
  return TRUE;
}

void InitStructureStack(void)
{
  CARDINAL i;

  notSkipping = TRUE;
  for (i = 0; i <= StructureStackSize-1; i++) {
    if (initialised && (structureStack[i].type == GetSSET) &&
      (structureStack[i].u.file.fileName.key != NULL)) {
        free(structureStack[i].u.file.fileName.key);
        structureStack[i].u.file.fileName.key = NULL;
    }
    structureStack[i].type = ConditionalSSET;/*So no associated store*/
  }
  initialised = TRUE;
  stackPointer = 0;
}

void InitErrorAccess(void)
/*Initialise for access to the stack for error reporting*/
{
  errorPointer = stackPointer;
} /* End InitErrorAccess */

BOOLEAN NextMacroElement(StructureStackElement *s)
/*Get next macro element off stack for error reporting*/
{
  while (errorPointer != 0) {
    errorPointer--;
    if (structureStack[errorPointer].type == MacroSSET) {
      *s = structureStack[errorPointer];
      return TRUE;
    }; /* if */
  };/* while */
  return FALSE;
} /* End NextMacroElement */

void UnwindToGet(void)
{
  while (stackPointer != 0) {
    switch (structureStack[stackPointer-1].type) {

      case GetSSET:
      return;

      case MacroSSET:
      macroLevel--;
      ExitMacro();
      break;

    }; /* case */
    stackPointer--;
  }; /* while */
} /* End UnwindToGet */

void ReportAllGetLines(void)
{
  CARDINAL sp;

  for (sp=stackPointer; sp!=0; sp--) {
    if (structureStack[sp-1].type==GetSSET) {
      Report(ReportInfo,condasm_repgetlines_f1,
        structureStack[sp-1].u.file.lineNumber,
        structureStack[sp-1].u.file.fileName.key);
    }  
  }
}
/* End condasm.c */
