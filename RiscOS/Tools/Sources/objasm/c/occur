/* -> occur.c
 * Title: Handle cross referencing of symbol occurrences
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#include "asm.h"
#include "condasm.h"
#include "constant.h"
#include "formatio.h"
#include "getline.h"
#include "globvars.h"
#include "nametyp.h"
#include "occur.h"
#include "store.h"
#include "tables.h"
#include "message.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TableSize 1024

static void PrintSymbol(Name name)
{
  CARDINAL i;
  for (i = 0; i < name.length; i++) lprintf("%c",name.key[i]);
} /* End PrintSymbol */

static void PrintOccurrence(OccStartPtr occ)
/*Print the occurrence chain for a single occurrence*/
{
  OccPtr   ptr = occ->occ;
  BOOLEAN  first = TRUE;

  do {
    lprintf(occur_printocc_line1,
      (first)?occur_printocc_Atline:occur_printocc_atline,ptr->line);
    first = FALSE;
    switch (ptr->context) {
      case File:
      lprintf(occur_printocc_file);
      PrintSymbol(ptr->u.file);
      lprintf("\n");
      return;

      case Macro:
      lprintf(occur_printocc_macro);
      PrintSymbol(ptr->u.macro);
      lprintf("\n");

    }; /* case */
    ptr = ptr->newContext;
  } while (1); /* loop */
} /* End PrintOccurrence */

static void PrintChain(char *type, OccStartPtr occ, CARDINAL *number)
/*
Print an occurrence chain with the given title
number returns the number of occurrences printed
*/
{
  *number = 0;
  lprintf("   %s\n",type);
  if (occ == NULL) {
    lprintf(occur_printocc_none);
    return;
  }; /* if */
  while (occ != NULL) {
    (*number)++;
    PrintOccurrence(occ);
    occ = occ->next;
  }; /* while */
} /* End PrintChain */

void PrintResults(SymbolPointer ptr)
/*Print the cross reference result for one symbol*/
{
  CARDINAL defCount,
           useCount;

  lprintf(occur_printres_symbol);
  PrintSymbol(ptr->key);
  lprintf("\n");
  PrintChain(occur_printres_definitions, ptr->defPtr, &defCount);
  PrintChain(occur_printres_usages, ptr->usePtr, &useCount);
  if (defCount == 0) {
    lprintf(occur_printres_warning);
    PrintSymbol(ptr->key);
    lprintf(occur_printres_undef);
  } else if (defCount > 1) {
    lprintf(occur_printres_warning);
    PrintSymbol(ptr->key);
    lprintf(occur_printres_muldef);
  }; /* if */
  if (useCount == 0) {
    lprintf(occur_printres_comment);
    PrintSymbol(ptr->key);
    lprintf(occur_printres_unused);
  } else if (useCount == 1) {
    lprintf(occur_printres_comment);
    PrintSymbol(ptr->key);
    lprintf(occur_printres_usedonce);
  }; /* if */
} /* End PrintResults */

static void AddContext(OccStartPtr ptr)
{
  CARDINAL              i;
  OccPtr                occ;
  StructureStackElement s;

  ptr->next = NULL;
  /*Now set up the context chain*/
  i = lineNumber;
  ptr->occ = (OccPtr) mymalloc(sizeof(*ptr->occ));
  occ = ptr->occ;
  InitErrorAccess();
  while (NextMacroElement(&s)) {
    occ->context = Macro;
    occ->line = i;
    occ->u.macro = s.u.macro.name;
    occ->newContext = (OccPtr) mymalloc(sizeof(*occ->newContext));
    i = s.u.macro.lineNumber;
    occ = occ->newContext;
  }; /* while */
  occ->context = File;
  occ->line = i;
  i = 0;
  while ((currentFileName[i] > Space) && (currentFileName[i] < Del)) i++;
  occ->u.file.length = i;
  occ->u.file.key = (char *) mymalloc((size_t)i);
  memcpy(occ->u.file.key, currentFileName, (size_t)i);
  occ->newContext = NULL;
} /* End AddContext */

void AddUse(SymbolPointer ptr)
/*Add a usage of a symbol to the reference chains*/
{
  OccStartPtr usePtr;

  if (!xrefOn || (pass != 1)) return;
  if (ptr->usePtr == NULL) {
    ptr->usePtr = (OccStartPtr) mymalloc(sizeof(*ptr->usePtr));
    usePtr = ptr->usePtr;
  } else {
    usePtr = ptr->usePtr;
    while (usePtr->next != NULL) usePtr = usePtr->next;
    usePtr->next = (OccStartPtr) mymalloc(sizeof(*usePtr->next));
    usePtr = usePtr->next;
  }; /* if */
  AddContext(usePtr);
} /* End AddUse */

void AddDef(SymbolPointer ptr)
/*Add a definition to the reference chains*/
{
  OccStartPtr defPtr;

  if (!xrefOn || (pass != 1)) return;
  if (ptr->defPtr == NULL) {
    ptr->defPtr = (OccStartPtr) mymalloc(sizeof(*ptr->defPtr));
    defPtr = ptr->defPtr;
  } else {
    defPtr = ptr->defPtr;
    while (defPtr->next != NULL) defPtr = defPtr->next;
    defPtr->next = (OccStartPtr) mymalloc(sizeof(*defPtr->next));
    defPtr = defPtr->next;
  }; /* if */
  AddContext(defPtr);
} /* End AddDef */

/* End occur.c */
