#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar void /* fool topcc */ *
#  else
#    define VoidStar char *
#  endif
#endif

#define FLAG_LINES(f) ((f) & 1)
#define FLAG_VARS(f)  ((f) & 2)

#define TYPE_PTRCOUNT(t) ((t) & 0xff)
#define TYPE_TYPECODE(t) (((t) >> 24))

#define FILE_LINE(f)  ((f) & 0x3fffff)
#define FILE_CHPOS(f) ((f) >> 22)

#define LANG_NONE       0
#define LANG_C          1
#define LANG_PASCAL     2
#define LANG_FORTRAN    3
#define LANG_ASM        4

#define ITEMSECTION     1
#define ITEMPROC        2
#define ITEMENDPROC     3
#define ITEMVAR         4
#define ITEMTYPE        5
#define ITEMSTRUCT      6
#define ITEMARRAY       7
#define ITEMSUBR        8
#define ITEMSET         9
#define ITEMFILEINFO    10

#define TYPESBYTE       10
#define TYPESHALF       11
#define TYPESWORD       12

#define TYPEUBYTE       20
#define TYPEUHALF       21
#define TYPEUWORD       22

#define TYPEFLOAT       30
#define TYPEDOUBLE      31

#define TYPECOMPLEX     40
#define TYPEDCOMPLEX    41

#define TYPEFUNCTION    100

#define type_integral(t) ((t) < 30)
#define type_signed(t)   ((t) < 20)
#define type_fpoint(t)   ((t) >= 30 && (t) < 40)
#define type_complex(t)  ((t) >= 40 && (t) < 50)

#define TYPE_PTR(t) ((t) & 0xff)
#define TYPE_CODE(t) ((t) / 256)

typedef struct ItemSection {
    unsigned short code;
    unsigned short len;
    unsigned char  lang;
    unsigned char  flags;
    unsigned char  unused;
    unsigned char  asdversion;
    int            codestart;
    int            datastart;
    int            codesize;
    int            datasize;
    struct ItemFileInfo *fileinfo;
    unsigned int   debugsize;
    char           name[1];
} ItemSection;

#define LINE_NUMBER(sp) ((sp) & 0x3fffff)

typedef struct ItemProc {
    unsigned short code;
    unsigned short len;
    int            type;
    unsigned int   args;
    unsigned int   sourcepos;
    void           *startaddr;
    int            entry;
    struct ItemEndProc *endproc;
    struct ItemFileEntry *fileentry;
    char           name[1];
} ItemProc;

typedef struct ItemEndProc {
    unsigned short code;
    unsigned short len;
    unsigned int   sourcepos;
    int            endpoint;
    struct ItemFileEntry *fileentry;
    unsigned int   nreturns;
    void           *retaddrs[1];
} ItemEndProc;

#define C_EXTERN        1
#define C_STATIC        2
#define C_AUTO          3
#define C_REG           4
#define C_VAR           5
#define C_FARG          6
#define C_FCARG         7

typedef struct ItemVar {
    unsigned short code;
    unsigned short len;
    int            type;
    unsigned int   sourcepos;
    unsigned int   storageclass;
    union l_un {
        int  offset;
        VoidStar address;
    } location;
    char name[1];
} ItemVar;

typedef struct ItemType {
    unsigned short code;
    unsigned short len;
    int  type;
    char name[1];
} ItemType;

typedef struct StructField {
    unsigned int offset;
    int          type;
    char         name[1];
} StructField;

typedef struct ItemStruct {
    unsigned short code;
    unsigned short len;
    unsigned int   fields;
    unsigned int   size;
    StructField    fieldtable[1];
} ItemStruct;

#define ARRAY_UNDEF_LBOUND(f) ((f) & 1)
#define ARRAY_CONST_LBOUND(f) ((f) & 2)
#define ARRAY_UNDEF_UBOUND(f) ((f) & 4)
#define ARRAY_CONST_UBOUND(f) ((f) & 8)

typedef struct ItemArray {
    unsigned short code;
    unsigned short len;
    unsigned short size;
    unsigned int   flags;
    int            basetype;
    int            lowerbound;
    int            upperbound;
} ItemArray;

typedef struct ItemSubrange {
    unsigned short code;
    unsigned short len;
    unsigned short size;
    unsigned short typecode;
    int            lb, hb;
} ItemSubrange;

typedef struct ItemSet {
    unsigned short code;
    unsigned short len;
    unsigned int   size;
} ItemSet;

typedef struct Fragment {
    unsigned int size;
    unsigned int firstline, lastline;
    unsigned int codestart;
    unsigned int codesize;
    unsigned char lineinfo[1];
} Fragment;

typedef struct ItemFileEntry {
    unsigned int len;
    unsigned int date;
    char         filename[1];
} ItemFileEntry;

typedef struct ItemFileInfo {
    unsigned short code;
    unsigned short len;
    ItemFileEntry entries[1];
} ItemFileInfo;

#define STR_INDEX(s)  ((s) & 0xffffff)
#define SYM_GLOBAL(s) ((s) & 0x1000000)
#define SYM_TYPE(s)   ((s) & 0x6000000)

#define ABSOLUTE_SYM  0x0000000
#define CODE_SYM      0x2000000
#define DATA_SYM      0x4000000
#define ZI_SYM        0x6000000

typedef struct ItemSymbol {
    unsigned int sym;
    unsigned int value;
} ItemSymbol;

typedef struct ItemSymbols {
    unsigned short code;
    unsigned short len;
    unsigned char  lang;
    char           rest[3];
    void           *codeaddr;
    void           *dataaddr;
    unsigned int   codesize;
    unsigned int   datasize;
    int            unused;
    unsigned int   debugsize;
    unsigned int   nsyms;
} ItemSymbols;

typedef struct NameDef {
    struct NameDef *next;
    struct ProcDef *parent;
    struct NameDef *sibling;
} NameDef;

typedef struct ProcDef {
    struct NameDef n;
    ItemProc *item;
    struct ProcDef *childlist;
    struct VarDef *varlist;
    ItemSection *section;
} ProcDef;

typedef struct VarDef {
    struct NameDef n;
    ItemVar *item;
} VarDef;

typedef struct Context {
    ProcDef *proc;
    ItemFileEntry *file;
    int line;
    int statement;
    int address;
    int *stackframe;
} Context;

typedef union Constant {
    int i;
    unsigned int u;
    double d;
    char *ptr;
} Constant;

typedef struct Number {
    int type;
    Constant value;
} Number;

#define CONST_DATUM     0
#define MEMORY_DATUM    1
#define REG_DATUM       2

typedef struct Datum {
    int datumtype;
    int type;
    ItemSection *section;
    union {
        VoidStar address;
        Constant val;
        struct RegData {
            int regnum;
            int *stackframe;
        } regdata;
    } value;
} Datum;
