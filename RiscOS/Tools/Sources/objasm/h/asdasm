typedef struct ItemSection {
  unsigned short code;  /* = 1 => section */
  unsigned short len;   /* Length of this struct */
  unsigned char lang;   /* = 4 => ObjAsm */
  unsigned char flags;  /* = 1 => line info, no var info */
                        /* B0 => debuglines, B0 => debugvars, B2..B7 unused */
  unsigned char unused; /* = 0 */
  unsigned char vsn;    /* = 2 */
  unsigned codestart;   /* = Offset from base of code area. A relocation is */
                        /* generated for this word which relocates this word */
                        /* wrt the base of the code area, ie the relocation */
                        /* is a type 2 relocation (as described in */
                        /* /aa/fsroot/plg/doc/AOF) with A = 0, R = 0, */
                        /* FT = 10 and SID = area index of code area */
  unsigned datastart;   /* = 0 */
  unsigned codesize;    /* Size of code area */
  unsigned datasize;    /* = 0 */
  unsigned fileinfoe;   /* Offset of file info from start of this struct */
  unsigned debugsize;   /* Total size of this section (inc. file info) */
  unsigned char namelen; /* Length of the following name, excluding padding */
  char name[1];         /* As many chars as necessary, not 0 terminated */
                        /* Name of area to which this section refers */
                        /* Name is padded to word boundary */
} ItemSection;

typedef struct ItemFileInfo {
  unsigned short code;  /* = 1 => fileinfo */
  unsigned short len;   /* = 0!! Length for fileinfo is not used and */
                        /* should be 0 */
  ItemFileEntry entries[1]; /* As many as needed (1 for each file) */
} ItemFileInfo;

typedef struct ItemFileEntry {
  unsigned len;         /* Length of this ItemFileEntry, 0 for last entry */
  unsigned date;
  unsigned char namelen; /* Length of following name, excluding padding */
  char name[1];         /* As many chars as necessary, not 0 terminated */
                        /* Name of file which generated the file entry */
                        /* preferably relative (eg s.gunge) */
                        /* Name is padded to word boundary */
/* Name is followed by a int giving the number of following fragments, */
/* unfortunately there is no way of representing this in C since name is */
/* variable length */
/*
  int n;                /* No. of following code fragments */
  Fragment codefrag[1]; /* As many as needed */
} ItemFileEntry;

typedef struct Fragment {
  unsigned int size;    /* Length of this fragment */
  unsigned int firstline; /* First line number of this fragment */
  unsigned int lastline;  /* Last line number of this fragment */
  unsigned int codeaddr;  /* Start of this fragments code as area base ofs */
                          /* Subject to relocation in the same way as */
                          /* codestart in ItemSection */
  unsigned int codesize;  /* Size of code fragment */
  unsigned short lineinfo[1]; /* As many as needed */
/* One lineinfo half-word for each line in source which generates code */
/* Least significant byte gives the number of bytes of code generated by */
/* this source line (usually 4 for asm but not necessarily). Must not = 0 */
/* Most significant byte gives the number of source lines occupied by the */
/* statement including blank/comment lines (ie the difference between this */
/* and the next line which generates code.) */
/* If a half-word is 0 this implies one of the two quantities was too large */
/* to fit in a byte so the next 2 half-words contain the number of bytes of */
/* code and the number of source line respectively */
} Fragment;
