/* -> opcode.h
 * Title: The opcode detection routine
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#ifndef opcode_h
#define opcode_h

#include "nametyp.h"

#define SUBCode 0x00400000
#define ADDCode 0x00800000
#define MOVCode 0x01A00000
#define MVNCode 0x01E00000
#define LDRCode 0x04100000
#define MRSCode 0x01000000
#define MSRCode 0x01200000
#define MCRCode 0x0E000010
#define LDRHCode  0x001000B0
#define LDRSHCode 0x001000F0
#define LDRSBCode 0x001000D0
#define LDRDCode  0x000000D0
#define STRHCode  0x000000B0
#define STRDCode  0x000000F0

#define ThumbLSLrriCode 0x0000
#define ThumbLSRrriCode 0x0800
#define ThumbASRrriCode 0x1000
#define ThumbADDrrrCode 0x1800
#define ThumbSUBrrrCode 0x1A00
#define ThumbADDrriCode 0x1C00
#define ThumbSUBrriCode 0x1E00
#define ThumbMOVriCode  0x2000
#define ThumbCMPriCode  0x2800
#define ThumbADDriCode  0x3000
#define ThumbSUBriCode  0x3800
#define ThumbADDrrCode  0x4400
#define ThumbCMPrrCode  0x4500
#define ThumbMOVrrCode  0x4600
#define ThumbADDrpiCode 0xA000
#define ThumbADDrsiCode 0xA800
#define ThumbADDsiCode  0xB000
#define ThumbSUBsiCode  0xB080

#define ThumbLSLCode    0x4080
#define ThumbLSRCode    0x40C0
#define ThumbASRCode    0x4100
#define ThumbCMPCode    0x4280

/*Data transfer*/
#define ThumbLDRCodeP   0x4800 /* LDR Rd,[PC,#imm] */

#define ThumbSTRCodeR   0x5000 /* STR Rd,[Rn,Rm] */
#define ThumbSTRHCodeR  0x5200
#define ThumbSTRBCodeR  0x5400
#define ThumbLDRSBCodeR 0x5600
#define ThumbLDRCodeR   0x5800
#define ThumbLDRHCodeR  0x5A00
#define ThumbLDRBCodeR  0x5C00
#define ThumbLDRSHCodeR 0x5E00

#define ThumbSTRCodeI   0x6000 /* STR Rd,[Rn,#imm] */
#define ThumbLDRCodeI   0x6800
#define ThumbSTRBCodeI  0x7000
#define ThumbLDRBCodeI  0x7800
#define ThumbSTRHCodeI  0x8000
#define ThumbLDRHCodeI  0x8800

#define ThumbSTRCodeS   0x9000 /* STR Rd,[SP,#imm] */
#define ThumbLDRCodeS   0x9800

/*Register branch*/
#define ThumbBXCode     0x4700
#define ThumbBLXCodeR   0x4780

/*Relative branches*/
#define ThumbBccCode    0xD000
#define ThumbBCode      0xE000
#define ThumbBLXCode    0xE800
#define ThumbBLPreCode  0xF000
#define ThumbBLCode     0xF800

typedef enum {
  DataProcessing,
  DataTransfer,
  SWI,
  BlockData,
  Branch,
  Adr,
/* Now the floating point ones */
  FPDataTransfer,
  FPDyadic,
  FPMonadic,
  FPCompare,
  FPFloat,
  FPFix,
  FPStatus,
/* Now the extended floating point ones: FP3 and later... */
  FPBlock,
  FPStack,
  FPNorm,
/* Now the generic coprocessor ones */
  CPDT,
  CPDO,
  CPRT,
/* Now MUL and MLA */
  MUL,
  MLA,
/* Now ADRL */
  ADRL,
/* Now SWP */
  SWP,
  MVP,
/* Now 64 bit multiply instructions */
  UMULL,
  SMULL,
  UMLAL,
  SMLAL,
/* Now the new halfword and signed data transfer instructions */
  DataTransfer_v4,
/* Now CLZ */
  CLZ,
/* Now BKPT */
  BKPT,
/* Now BX/BLX register */
  BranchXReg,
  NOP,
  PLD,

  ThumbDataProcessing,
  ThumbMovCmpAddSub,
  ThumbADR,
  ThumbShift,
  ThumbBranch,
  ThumbBranchLong,
  ThumbBranchLongX,
  ThumbBranchXReg,
  ThumbDataTransfer,
  ThumbBlockData,
  ThumbPop,
  ThumbPush,
  ThumbSWI,
  ThumbBreakpoint,
  ThumbNOP
  } OpcodeType;

BOOLEAN Opcode(Name name, OpcodeType *opcodeType, CARDINAL *opcodeValue);
/*The result is TRUE iff the name is an opcode*/

void InitOpcode(void);

#endif

/* End opcode.h */
