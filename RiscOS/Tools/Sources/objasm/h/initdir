/* -> initdir.h
 * Title: Directive initialisation
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#ifndef initdir_h
#define initdir_h

#include "nametyp.h"
#ifndef AAsm
#  include "tables.h"
#endif

typedef enum {
  TIF,    /* [ */
  TELSE,  /* | */
  TFI,    /* ] */
  TMNOTE, /* ! */
  THASH,  /* # */
  TSTAR,  /* * */
  TEQUAL, /* = */
  TPERC,  /* % */
  TAMP,   /* & */
  THAT,   /* ^ */
  TEND,
  TLNK,
  TGET,
  TGETBIN,         /* new BIN directive by NRaine - Under threat 01-Nov-91 */
  TORG,
  TOPT,
  TTTL,
  TSUBTTL,
  TRN,
  TWHILE,
  TWEND,
  TMACRO,
  TMEXIT,
  TMEND,
  TGBLA,
  TGBLL,
  TGBLS,
  TLCLA,
  TLCLL,
  TLCLS,
  TSETA,
  TSETL,
  TSETS,
  TASSERT,
  TROUT,
  TALIGN,
  TLTORG,
  TDCW,
  TLEADR,
  TFN,
  TDCFS,
  TDCFD,
  TNOFP,
  TNOOP,
  TCN,
  TCP,
  TAREA,
  TENTRY,
  TIMPORT,
  TEXPORT,
  TSTRONG,
  TKEEP,
  TAOUT,
  TAOF,
  TRLIST,
  TLEAF,
  TCODE16,
  TCODE32,
  TDATA,
  TDCI,
  TDCDO,
  TDUMMY,               /* Must immediately follow the last real directive */
  TStyleChange
  } DirectiveNumber;

#ifndef AAsm

typedef enum {
  /* Listing directives */
  AsTitle,
  AsListOff,
  AsListOn,
  AsListFull,
  AsPage,
  /* Segment directives */
  AsText,
  AsData,
  AsBss,
  AsEven,
  AsOdd,
  AsAlign,
  AsPool,
  /* Identifier control */
  AsEqu,
  AsRequ,
  AsGlobal,
  AsCommon,
  /* Fp and Coproc stuff */
  AsFequ,
  AsCequ,
  AsPequ,
  /* Space allocation and value planting */
  AsSpace,
  AsAscii,
  AsAsciz,
  AsByte,
  AsShort,
  AsLong,
  AsFloat,
  AsDouble,
  AsExtend,
  AsPacked,
  AsDummy /* End of the list, unused */
  } AsDirectiveNumber;

/* Translation from As directives to ObjAsm where it exists */
extern signed char asToObj[AsDummy];

#endif /* not AAsm */

void InitDirectives(void);
/*
This does the name table initialisation because the crappy language
doesn't do it properly itself and doesn't allow manifest tables to
be constructed at compile time
*/

BOOLEAN OneCharacterDirective(char *line,
  CARDINAL *lineIndex,
  DirectiveNumber *directiveNumber);
/*
Spot one character directives and return the number
lineIndex is returned past the directive if successful,
otherwise before it
*/

BOOLEAN NameDirective(DirectiveNumber *directiveNumber, Name name);
/*
Spot name directives and return the number
lineIndex is returned past the directive if successful,
otherwise before it
*/

BOOLEAN DirectiveSyntax(DirectiveNumber number, char ch, BOOLEAN symbolFound);
/*
Returns true <=> directive syntax ok
otherwise false and error message already produced
*/

void Init_InitDir(void);

extern BOOLEAN allowDirInCond[TDUMMY];

#ifndef AAsm

BOOLEAN AreaAttrName(char *line, CARDINAL *index, CARDINAL *result);

BOOLEAN AsNameDirective(AsDirectiveNumber *directiveNumber, Name name);

BOOLEAN AsDirectiveSyntax(AsDirectiveNumber number,
  char ch,
  BOOLEAN symbolFound);
/*
Returns true <=> directive syntax ok
otherwise false and error message already produced
*/

extern BOOLEAN disallowDirOutsideArea[TDUMMY];
extern char as_directive_alignment[];

#endif /* not AAsm */

#endif

/* End initdir.h */
