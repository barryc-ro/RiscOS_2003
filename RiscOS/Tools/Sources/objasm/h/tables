/* -> tables.h
 * Title: The symbol tables stuff for all symbols
 * Copyright (C) 1991 Advanced RISC Machines Limited. All rights reserved.
 */

#ifndef tables_h
#define tables_h

#include "nametyp.h"
#define MaxSymbol 2048

/*Bits for the symbol status*/
typedef enum SymbolDefinitionType {
  FixedSDT,        /*Label type*/
  ExternalSDT,     /* Externally defined */
  VariableSDT,     /*Assembly time variable*/
  RegisterNameSDT  /*Name of a register*/
  } SymbolDefinitionType;

typedef enum VariableSymbolType {
  ArithmeticVST,/*Standard numerical value*/
  LogicalVST,   /*Boolean value*/
  StringVST     /*String of characters type*/
  } VariableSymbolType;

typedef enum FixedSymbolType {
   /*These types are also applicable to externals*/
  RelocatableFST,     /*Program labels etc.*/
  AbsoluteFST,        /*Fixed constants*/
  RegisterRelativeFST,/*DSECT types*/
  RegisterListFST     /*For use in Block Data instructions */
  } FixedSymbolType;

typedef int FixedSymbolRegister; /* [0..14] Register to relocate via*/

typedef enum SymbolDefinitionStatus {
  UndefinedSDS,  /*Seen but no definition attempted yet*/
  PartDefinedSDS,/*Definition attempted but failed for undefined symbols*/
  UndefinableSDS,/*Definition failed for syntax error etc.*/
  DefinedSDS     /*Value known up to relocation/registerbase*/
  } SymbolDefinitionStatus;

typedef enum SymbolReferenceState {
  UnreferencedSRS,/*Never used*/
  ReferencedSRS   /*A use has been made of this symbol*/
  } SymbolReferenceState;

typedef enum SymbolMayForceLiteral {
  HasNotForcedSMFL,/*No unnecessary literal table entry allocated*/
  HasForcedSMFL    /*Possible unnecessary literal table entry allocated*/
  } SymbolMayForceLiteral;

typedef enum RegisterType {
  IntRT,  /*Ordinary ARM register*/
  RealRT, /*Floating point register*/
  CopNRT, /*Coprocessor number*/
  CopRRT  /*Coprocessor register number*/
  } RegisterType;

typedef enum AOFType {
  NoneAT,
  KeptAT,
  ExportAT,
  ExportedAT
  } AOFType;

/*
Ordering of the above types in Symbol.Status:
bits   0-1: SymbolDefinitionType
bit      2: SymbolDefinedPass2
bits  3-10: Unused
bits 11-12: VariableSymbolType
bits 13-14: FixedSymbolType
bits 15-18: FixedSymbolRegister
bits 19-20: SymbolDefinitionStatus
bit     21: SymbolReferenceState
bit     22: SymbolMayForceLiteral
bits 23-24: Register type (Coproc number, coproc register, FP or ordinary)
bits 25-26: AOF type
*/

typedef int32 SymbolName; /* [0..MaxSymbol-1] */

typedef enum ValueType { CardVT, BoolVT, PtrVT } ValueType;

typedef union {
  /* CASE ValueType OF */
  /* case CardVT */
  CARDINAL card;
  /* case BoolVT */
  BOOLEAN  bool;
  /* case PtrVT */
  NamePointer ptr;
} Value;

typedef struct AOFData {
  CARDINAL   stringPosition; /* offset from the start of the string table */
  unsigned32 symbolId;
} AOFData; /* record */

#define SymbolIdUnset 0x80000000

/* Stuff for cross reference work */

typedef enum context { Macro, File } label_context;

typedef struct OccStart *OccStartPtr;

typedef struct Occurrence *OccPtr;

struct Occurrence {
  label_context context;
  union {
    Name file;   /* Case File */
    Name macro;  /* Case Macro */
  } u;
  CARDINAL line; /* The line number */
  OccPtr newContext;
};

struct OccStart {
  OccPtr      occ;
  OccStartPtr next;
};

typedef struct Symbol *SymbolPointer;

typedef union status {
  CARDINAL status;/*A mixed bag of bits containing the attributes from MOD*/

  struct {
  BITFIELD     sdt:2, /* bits   0-1: SymbolDefinitionType */
               p2d:1, /* Symbol defined on pass 2 */
                      /* Applies only to global assembly time variables */
          pcc_pad1:3, /* bits  3- 5: unused */
           aof_xat:5, /* bits  6-10: AOF eXtra symbol flags */
               vst:2, /* bits 11-12: VariableSymbolType */
               fst:2, /* bits 13-14: FixedSymbolType */
               fsr:4, /* bits 15-18: FixedSymbolRegister */
               sds:2, /* bits 19-20: SymbolDefinitionStatus */
               srs:1, /* bit     21: SymbolReferenceState */
              smfl:1, /* bit     22: SymbolMayForceLiteral */
                rt:2, /* bits 23-24: Register type
                         (Coproc number, coproc register, FP or ordinary) */
                at:2, /* bits 25-26: AOF type */
                bt:1, /* bit     27: Symbol is Based... */
          pcc_pad2:4; /* unused padding */
  } s;
} Status;

typedef struct Symbol {
  Name     key;    /*The actual symbol name and string length*/
  Status   u;
  Value value;
  CARDINAL length;/*The length attribute*/
  AOFData aOFData;
  CARDINAL area;
  SymbolPointer link;
  OccStartPtr defPtr;
  OccStartPtr usePtr;
} Table_Symbol; /* record */

extern SymbolPointer symbolTable[MaxSymbol];

void InitSymbolTable(void);

SymbolPointer LookupFixed(Name name, BOOLEAN reference);

SymbolPointer LookupRef(Name name, BOOLEAN reference);

SymbolPointer DefineReg(Name name);

SymbolPointer DefineFPReg(Name name);

SymbolPointer DefineCoprocName(Name name);

SymbolPointer DefineCoprocReg(Name name);

SymbolPointer DefineGlobalA(Name name);

SymbolPointer DefineGlobalL(Name name);

SymbolPointer DefineGlobalS(Name name);

SymbolPointer LookupGlobalA(Name name);

SymbolPointer LookupGlobalL(Name name);

SymbolPointer LookupGlobalS(Name name);

SymbolPointer LookupExternal(Name name);

void AddImports(void);
/* In as mode mark all undefined symbols as externals. Called end of pass 1 */

void PutImplicitImports(void);
/* In as export all the symbols that were undefined. Called end of pass 2 */

void SetImplicitRegisters(void);
/* Setup as style register names */

void Remove(SymbolPointer symbolPointer);
/*Clear out remains of previous assembly*/

#endif

/* End tables.h */
