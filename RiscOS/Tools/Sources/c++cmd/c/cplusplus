/* File:    cplusplus.c
   Purpose: Compile C++ code in one easy step, invoking CFront, CC etc. as
            necessary.
   Authors: Ben Laughton, Unknown

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-03-03: BAL
   Fixed bug that didn't allow you to output a file into a directory other
   that 'o'.

   1998-08-15: BAL
   Reorganised the code, taking advantage of such novel features as functions,
   comments etc.

   1998-08-23: BAL
   Fixed bug where dynamic dependencies were being generated incorrectly.  When
   file was not in project root directory (was stripping off other directories,
   making the file appear to be in the project's root directory).  Also always
   assumed that output file would also be in 'o' directory.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* Local */
#include "args.h"
#include "cplusplus.h"
#include "VersionNum"



/* =============================================================================
 * Contant definitions
 */

#define DDEUtils_Prefix    0x42580




/* =============================================================================
 * Global variable declarations
 */

FName *   fname_list;
FName **  pfname_list = &fname_list;
int       nfiles;
int       verbose;

char    cpp_output[L_tmpnam];
char    cfront_output[L_tmpnam];
char *  output_filename;

Extension  extensions[] =
{
    { "c++", Extension_cplusplus },
    { "c",   Extension_c },
    { "o",   Extension_o },
    { NULL,  Extension_none }
};

static char    cmd[CLI_LEN];
static int     prefix_set;
static char *  stdout_file;
static int     stdout_handle;




/* =============================================================================
 * Function declarations
 */

/* static void  rand_tmpnam (char *  filename); */

static void  remove_tmps (void);

static void  prefix_init (char *  fname);

static void  process_files (void);

static int  process_cplusplus_file (const char *const  filename);

static void  process_c_file (const char *const  filename, const char *const leaf);

static void  process_o_file (const char *const  filename);

static void do_cmd (const char *const  cmd);

static void  append_output_file (const char *const  filename);

static ExtensionType  extension_type (char *const          filename,
                                      const ExtensionType  default_type);

static int  intercept_stdout (char **  stdout_file);

static void  link_files (void);




/* =============================================================================
 * Function definitions
 */

/* -----------------------------------------------------------------------------
   main

   Entry point of program.

   Inputs
   int     argc   : number of command line arguments (including program name)
   char *  argv[] : array of pointers to command line arguments
                    (first is program name, array is NULL terminated)

   Returns  int
   0
 */

int main (int     argc,
          char *  argv[])
{
    M_unused (argc);

    fprintf (stderr,
             "Acorn C++ Language System " Module_MajorVersion
             " (" Module_Date ") " Module_MinorVersion "\n" );

    /*
    rand_tmpnam (cpp_output);
    rand_tmpnam (cfront_output);
    */
    (void) tmpnam (cpp_output);
    (void) tmpnam (cfront_output);

    atexit (remove_tmps);

    process_args (argv,
                  cpp_args,
                  cfront_args,
                  cc_args,
                  link_args);

    if (no_cfront)
    {
        /* If not using CFront then don't use the C compiler */
        no_cc = 1;
    }
    if (no_cc)
    {
        c_flag = 1;
    }

    process_files ();

    if (!c_flag && !s_flag)
    {
        link_files ();
    }


    return 0;
}




/* -----------------------------------------------------------------------------
   error

   Write an error message to stderr and exit the program with an error code.

   Inputs
   const char *const  format : printf-style format specifier
   ...                       : any number of further argument
 */

void error (const char *const  format, ...)
{
    va_list  args;

    va_start (args,
              format);

    fprintf (stderr,
             "c++: ");

    vfprintf (stderr,
              format,
              args);

    va_end (args);
    exit (EXIT_FAILURE);
}




/* -----------------------------------------------------------------------------
   cistrcmp

   Case insensitive, control-character terminated string comparison.

   Inputs
   const char *  s : first string to compare
   const char *  t : second string to comapre

   Returns  int
   0: strings match
   1: strings don't match
 */

int cistrcmp (const char *  s,
              const char *  t)
{
    while (*s > ' ' &&
           (*s++ | 0x20) == (*t++ | 0x20))
    {
    }

    if (*s < ' ' && *t < ' ')
    {
        return 0;
    }

    return 1;
}




/* -----------------------------------------------------------------------------
   find_leaf_and_extension

   For a filename of the form [<path>.]<leaf>.<extension>, find the <leaf> and
   <extension> parts.

   Inputs
   const char *  filename  :  pointer to 0 terminated filename

   Outputs
   char **const  leaf      :  pointer to leaf
   char **const  extension :  pointer to extension or NULL if not found
 */

void  find_leaf_and_extension (const char *const   filename,
                               char **const        leaf,
                               char **const        extension)
{
    const char *  s = filename;
    const char *  e = s;
    const char *  l = s;
    int           c;

    while ( (c = *s++) != NULL)
    {
        switch (c)
        {
            case ':':    /* RISC OS Path variable */
                /* start again after path specifier */
                e = l = s;
                break;

            case '.':     /* RISC OS directory separator */
                /* point to segment of filename before '.' (may be leaf) */
                l = e;

                /* point to segment of filename after '.' (may be extension) */
                e = s;
                break;

            default:
                /* Do nothing */
                break;
        }
    }

    *leaf = (char *) l;
    if (e > l)
    {
        /* found extension */
        *extension = (char *) e;
    }
    else
    {
        *extension = NULL;
    }
}




/* -----------------------------------------------------------------------------
   find_leaf

   Find the 'leaf' of a RISC OS filename (leaf is part of filename after last
   '.' or ':' character in the filename, or just the filename as supplied if
   there are no such characters in the filename).

   Inputs
   const char *  s: pointer to filename

   Returns
   pointer to leaf
 */

char *  find_leaf (const char *const  filename)
{
    const char *  s    = filename;
    const char *  leaf = s;
    int           c;

    while ( (c = *s++) != 0)
    {
        if (c == ':' || c == '.')
        {
            leaf = s;
        }
    }

    return (char *) leaf;
}




#if 0
static void  rand_tmpnam (char *  filename)
{
    if (_kernel_getenv ("wimp$scrapdir", filename, L_tmpnam-10) != NULL)
    {
        strcpy (filename, "$.tmp");
    }
    filename += strlen (filename);
    sprintf (filename, ".x%.8x", rand ());
}
#endif




/* -----------------------------------------------------------------------------
   remove_tmps

   Remove temorary files used for preprocessor and CFront output.
 */

static void  remove_tmps (void)
{
    _swix (OS_File,
           _INR (0, 1),

           6,
           cpp_output);

    _swix (OS_File,
           _INR (0, 1),

           6,
           cfront_output);

    if (prefix_set)
    {
        _swix (DDEUtils_Prefix,
               _IN (0),

               0);
    }
}




/* -----------------------------------------------------------------------------
   process_files

   Process the input files specified on the command line.
 */

static void  process_files (void)
{
    char *         filename;
    FName *        nfile;
    ExtensionType  type;
    char *         c_source;

    stdout_handle = intercept_stdout (&stdout_file);

    nfile = fname_list;

    while (nfile)
    {
        filename = nfile->filename;
        c_source = NULL;
        prefix_init (filename);
        type = extension_type (filename,
                               Extension_cplusplus);

        switch (type)
        {
            case Extension_cplusplus:
                if (!process_cplusplus_file (filename))
                {
                    break;
                }

                /* Drop through into next case to get C compiler to compile
                 * CFront output.
                 */
                c_source = cfront_output;

            case Extension_c:
                process_c_file (c_source?c_source:filename, filename);
                break;

            case Extension_o:
                process_o_file (filename);
                break;

            default:
                break;
        }

        nfile = nfile->next;
    }

    if (stdout_file)
    {
        free (stdout_file);
    }
}




/* -----------------------------------------------------------------------------
   process_cplusplus_file

   Process files which contain C++ source code.

   Inputs
   const char *const  filename : name of file to process

   Returns  int
   0 : don't call the C compiler on the output of this stage
   1 : call the C compiler on the output of this stage
 */

static int  process_cplusplus_file (const char *const  filename)
{
    int   c_compile = 0;

    strcpy (cmd, cpp_args);

    /* The C preprocessor sends it's output to stdout, but we still need to
     * specify an output file argument so that correct dependency information
     * is generated.
     */
    append_output_file (filename);

    strcat (cmd, " ");
    strcat (cmd, filename);

    /* If the C++ file is to be compiled into C by CFront or stdout has
     * been redirected then we need to redirect the output of the
     * pre-processor phase.
     */
    if (!no_cfront || stdout_handle)
    {
        strcat (cmd, " >");
        if (no_cfront)
        {
            /* Not using CFront and stdout has been redirected.
             * Append pre-processor output to stdout.
             */
            strcat (cmd, ">");
            strcat (cmd, stdout_file);
        }
        else
        {
            /* Using CFront, redirect pre-processor output to the
             * temporary file created for this purpose.
             */
            strcat (cmd, cpp_output);
        }
    }

    do_cmd (cmd);    /* send the file through the pre-processor*/

    if (!no_cfront)
    {
        strcpy (cmd, cfront_args);
        if (!f_flag)
        {
            strcat (cmd, " +f");
            strcat (cmd, find_leaf (filename));
        }
        if (ansi && !l_flag)
        {
            strcat (cmd, " +L");
        }

        /* If the CFront output is to be compiled by the c compiler or
         * stdout has been redirected then we need to redirect the
         * output of the CFront phase.
         */
        if (!no_cc || stdout_handle)
        {
            strcat (cmd, " >");
            if (no_cc)
            {
                /* Not using C compiler and stdout has been redirected.
                 * Append CFront output to stdout.
                 */
                strcat (cmd, ">");
                strcat (cmd, stdout_file);
            }
            else
            {
                /* Using C compiler, redirect CFront output to the
                 * temporary file created for this purpose.
                 */
                strcat (cmd, cfront_output);
            }
        }

        do_cmd (cmd);    /* use CFront to compile C++ into C */

        if (!no_cc)
        {
            c_compile  = 1;
        }
    }

    return c_compile;
}




/* -----------------------------------------------------------------------------
   process_c_file

   Process files which contain C source code.

   Inputs
   const char *const  filename : name of file to process
   const char *const  leaf     : file to base leaf name output on
 */

static void  process_c_file (const char *const  filename, const char *const  leaf)
{
    strcpy (cmd, cc_args);
    if (!ansi)
    {
        strcat (cmd, " -pcc");
    }

    append_output_file (leaf);

    strcat (cmd, " ");
    strcat (cmd, filename);
    do_cmd (cmd);

    if (output_filename)
    {
        strcat (link_args, " ");
        strcat (link_args, output_filename);
    }
    else
    {
        if (!s_flag)
        {
            strcat (link_args, " o.");
            strcat (link_args, find_leaf (leaf));
        }
    }
}




/* -----------------------------------------------------------------------------
   process_o_file

   Process AOF files.

   Inputs
   const char *const  filename : name of file to process
 */

static void  process_o_file (const char *const  filename)
{
    strcat (link_args, " ");
    strcat (link_args, filename);
}




/* -----------------------------------------------------------------------------
   do_cmd

   Send a command to the OS's CLI.  If it returns an error then exit.

   Inputs
   const char *const  cmd : command to execute
 */

static void do_cmd (const char *const  cmd)
{
    int rc;

    if (verbose)
    {
        fprintf (stderr,
                 "C++: %s\n",
                 cmd);
    }

    rc = system (cmd);
    if (rc)
    {
        if (rc == -2)
        {
            _kernel_raise_error (_kernel_last_oserror ());
        }
        fprintf (stderr,
                 "Command failed with return code %d\n",
                 rc);

        fprintf (stderr,
                 "Command = %s\n",
                 cmd);

        if (rc < 0)
        {
            rc = -rc;
        }

        exit (rc);
    }
}




/* -----------------------------------------------------------------------------
   intercept_stdout

   Get the file handle and (if set) name of file to which stdout is tied.
   Then close stdout.

   Outputs
   char **  stdout_file: pointer to zero terminated filename if stdout tied to
                         file, otherwise NULL.  Client is responsible for
                         freeing.

   Returns int
   file handle of stdout
 */

static int  intercept_stdout (char **  stdout_file)
{
    int  stdout_handle = stdout->__file;

    if (stdout_handle)
    {
        int                stdout_filename_len;
        _kernel_oserror *  e;

        /* Read length of stdout pathname */
        e = _swix (OS_Args,
                   _INR (0, 2) | _IN (5) | _OUT (5),

                   7,
                   stdout_handle,
                   NULL,
                   0,

                   &stdout_filename_len);

        if (!e)
        {
            int  buffer_size;

            /* OS_Args call to determine length of filename gives <result> as
             * -<length>, so need to allocate 1 - <result> bytes to allow for
             * 0 terminator as well.
             */
            buffer_size = 1 - stdout_filename_len;

            *stdout_file = malloc (buffer_size);
            if (*stdout_file)
            {
                e = _swix (OS_Args,
                           _INR (0, 2) | _IN (5),

                           7,
                           stdout_handle,
                           *stdout_file,
                           buffer_size);
            }
            else
            {
                error ("Out of memory");
            }
        }

        if (e)
        {
            stdout_handle = 0;
        }
    }

    fclose (stdout);

    return stdout_handle;
}




/* -----------------------------------------------------------------------------
   prefix_init
 */

static void  prefix_init (char *  fname)
{
    char *s;
    char *p;
    char *t;
    char c;
    char prefix[CLI_LEN];

    if (desktop_dir)
    {
        s = fname;
        p = t = prefix;
        while ((c = *t++ = *s++) > ' ')
        {
            if (c == ':' || c == '.')
            {
                p = t;
            }
        }
        strcpy (p, desktop_dir);
        _swix (DDEUtils_Prefix,
               _IN (0),

               prefix);
        prefix_set = 1;
    }
}




/* -----------------------------------------------------------------------------
   append_output_file

   Append an option to a C compiler command specifying an output file.

   Inputs
   const char *const  filename : name of file being processed
 */

static void  append_output_file (const char *const  filename)
{
    if (output_filename)
    {
        /* An output file was specified on the C++ command line so use
         * this as the output file for the C compiler.
         */

        strcat (cmd, " -o ");
        strcat (cmd, output_filename);
    }
    else
    {
        /* No output file was specified on the C++ command line.  If the C
         * compiler has been directed to produce assembler output then assume
         * the output should go in an 's' directory.  Otherwise assume that it
         * will go in 'o' directory.
         */

        if (s_flag)
        {
            strcat (cmd, " -o s.");
        }
        else
        {
            strcat (cmd, " -o o.");
        }
        strcat (cmd, find_leaf (filename));
    }
}




/* -----------------------------------------------------------------------------
   extension_type

   For a filename of the form [<path>.]extension.leaf
   (e.g. MyProgs:tests.c++.helloworld), return an value that indicated the type
   of the extension.

   Inputs

 */

static ExtensionType  extension_type (char *const          filename,
                                      const ExtensionType  default_type)
{
    char *  extension;
    char *  leaf;

    /* find_leaf_and_extension deals with filenames before the extension and
     * leaf have been swapped, so just supply our leaf and extension parameters
     * the other way around to compensate for this.
     */
    find_leaf_and_extension (filename,
                             &extension,
                             &leaf);

    if (extension)
    {
        Extension *  e;

        *--leaf = 0;
        for (e = extensions; e->name; e++)
        {
            if (cistrcmp (e->name,
                          extension) == 0)
            {
                *leaf = '.';
                return e->type;
            }
        }

        *leaf = '.';
    }

    return default_type;
}




/* -----------------------------------------------------------------------------
   link_files

   Link all the compiled files together.
 */

static void  link_files (void)
{
    strcat (link_args, lib_list);
    if (!*lib_list)
    {
        int     c;
        char *  c_libroot;

        c_libroot = getenv ("<c$libroot>");
        if (c_libroot)
        {
            strcpy (cmd, c_libroot);
        }
        else
        {
            strcpy (cmd, "c:");
        }
        c = cmd[strlen (cmd) - 1];
        if (c != '.' && c != ':')
        {
            strcat (cmd, ".");
        }
        strcat (link_args, " ");
        strcat (link_args, cmd);
        strcat (link_args, "o.c++lib ");
        strcat (link_args, cmd);
        strcat (link_args, "o.stubs");
    }
    strcat (link_args, " -o ");
    if (!output_filename)
    {
        output_filename = find_leaf (fname_list->filename);
    }
    strcat (link_args, output_filename);
    do_cmd (link_args);
}
