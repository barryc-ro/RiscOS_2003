static const char *const  help_string = "\
\nUsage :         c++ [options] file1 file2 ... fileN\n\
\n\
Translator options:\n\
\n\
+v              Output commands as they are executed\n\
+w              Disable warning messages\n\
+p              Be extra strict about enforcing conformance to standards\n\
+g              Generate code that may be used with the debugger\n\
-F              Translate the C++ source code only - do not compile or link it\n\
\n\
All other options are passed to the preprocessor, the C compiler or the\n\
linker as appropriate. For a list of all valid options, type 'cc -help';\n\
the only ones of these we recommend for use with C++ are:\n\
\n\
Keyword options: -littleend, -bigend, -apcs, -depend, -throwback, -desktop, -C++ (!)\n\
Preprocessor options: <any>\n\
Code generation options: -o, -g, -S, -zM\n\
Linker options: <any>\n\
Warning and error message options: -W\n\
Additional feature options: -zr, -f\n\
";

#if 0
const char *const  help_string = "\
Usage:        c++ [options] file1 file2 ... fileN\n\
\n\
C++ processes a mixture of C++ source, C source and object files. It invokes\n\
between one and four of the preprocessor, the cfront translator, the C\n\
compiler or the linker on each input file. The number of processes and type\n\
of processing is determined by the types of the input files and the processor\n\
options.\n\
\n\
The input file type is determined as follows\n\
\n\
- A C++ source file (extension .c++)\n\
- A C source file (extension .c)\n\
- An AOF object file or library (extension .o)\n\
\n\
preprocessor options\n\
\n\
-D<symbol>    Define <symbol> as a preprocessor symbol\n\
-U<symbol>    Undefine a predefined preprocessor symbol (eg. __cplusplus)\n\
-E            Send preprocessor output to stdout, do not compile it\n\
-C            Prevent the preprocessor from removing comments (use with -E)\n\
-I<directory> Include <directory> on the #include search path\n\
-J<directory> Replace the default #include path with <directory>\n\
\n\
cfront options\n\
\n\
+v            Print commands as they are executed\n\
+a0           Tells cfront to generate PCC style code (default), implies -pcc\n\
+a1           Tells cfront to generate ANSI style code, implies +L\n\
+L            Generate ANSI style #line <n> directive instead of PCC # <n>\n\
+f<label>     Use label a unique identifier for this source instead of filename\n\
+w            Disable cfront warnings\n\
+p            Pedantic - compile strict C++\n\
+g            Compile for use with the debugger\n\
-F            Send cfront output to stdout, do not compile it\n\
\n\
cc options\n\
\n\
-c            Do not link the files being compiled\n\
-p            Generate code to produce profile information\n\
-w            Disable compiler warnings\n\
-s            Produce ARM assembler output instead of object code\n\
-f            Enable a selction of compiler feature, see manual for more info\n\
\n\
link options\n\
\n\
-o <file>     Place the output in <file>\n\
-L<liblist>   Add a comma-separated list of librarys to be linked with\n\
";

#endif
