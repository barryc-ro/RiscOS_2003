<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
        "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
  <head>
    <title>FileCRC</title>
  </head>
  <body text='#000000' link='#0000ff' bgcolor='#ffffff' background='http://www.acorn.com/browser/images/backtile.cgi'>

    <!-- Auto-generated documentation (C) Acorn Computers Ltd. 1998    -->

    <!-- Main source file filename.                                    -->
    <!-- Hacky blank GIFs used to stop Navigator ignoring the cells... -->

    <table width='100%' cellspacing='4' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#00008b' height='4'><img src='http://www.acorn.com/browser/images/blank.gif' width='1' height='1' alt=''></td>
      </tr>
      <tr>
        <td><center><strong><font size='6'>FileCRC</font></strong></center></td>
      </tr>
      <tr>
        <td bgcolor='#00008b' height='4'><img src='http://www.acorn.com/browser/images/blank.gif' width='1' height='1' alt=''></td>
      </tr>
    </table>

    <!-- Source file overview -->

    <br><br>
    <pre>Purpose: The main code for the FileCRC applcation.

Author:  David Cotton <mailto:dcotton@e-14.com>
History: 0.01  Pre 1999-02-16
               Created.
         0.02  1999-02-16
               Altered to generally improve it and tidy things up.
</pre>

    <!-- List of externally visible functions present in the file -->

    <p>
    <strong>Externally visible functions provided:</strong>

    <p>
    <table cellspacing='0' cellpadding='0' border='0' width='100%'>
      <tr valign='top' align='left'>
        <td><a href='#crcfile'>crcfile</a><td>
        <td><a href='#ignore'>ignore</a><td>
        <td><a href='#truncignore'>truncignore</a><td>
      </tr>
      <tr valign='top' align='left'>
        <td><a href='#reccheckdir'>reccheckdir</a><td>
        <td><a href='#set_var_val'>set_var_val</a><td>
        <td><a href='#gstrans'>gstrans</a><td>
      </tr>
      <tr valign='top' align='left'>
        <td><a href='#diradd'>diradd</a><td>
        <td><a href='#fileadd'>fileadd</a><td>
        <td><a href='#skipadd'>skipadd</a><td>
      </tr>
      <tr valign='top' align='left'>
        <td><a href='#checkfile'>checkfile</a><td>
        <td><a href='#processignorefile'>processignorefile</a><td>
        <td><a href='#compare_tokens'>compare_tokens</a><td>
      </tr>
      <tr valign='top' align='left'>
        <td><a href='#calc_access'>calc_access</a><td>
        <td><a href='#get_filename_from_entry'>get_filename_from_entry</a><td>
        <td><a href='#file_exists'>file_exists</a><td>
      </tr>
      <tr valign='top' align='left'>
        <td><a href='#filer_object_type'>filer_object_type</a><td>
        <td><a href='#validate_checkfile'>validate_checkfile</a><td>
        <td><a href='#main'>main</a><td>
      </tr>
      <tr valign='top' align='left'>
        <td><a href='#display_help_information'>display_help_information</a><td>
        <td><a href='#tidy_memory'>tidy_memory</a><td>
        <td>&nbsp;</td>
      </tr>
    </table>

    <!-- If functions were found, their details will follow -->

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='crcfile'>crcfile</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine CRC's the passed file.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          filename  This is the filename of the file to be checked.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          An integer representing the CRC for that file, or BADCRC if
        <br>
          there was an error.
        <br>

          <p>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      int crcfile( char *filename )
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='ignore'>ignore</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine checks that the filename pased in is not contained within the
     ignore list.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          name  This is the filename of the file to be checked.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          return TRUE if given filename is to be ignored
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      BOOL ignore(char *name)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='truncignore'>truncignore</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Extract the filename at the start of name, check it with ignore()

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          name  This is the filename of the file to be checked.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          return TRUE if given filename is to be ignored
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      int truncignore(char *name)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='reccheckdir'>reccheckdir</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Recursively check directory namebuf and CRC each file found.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          namebuf   The directory to be checked.
        <br>
          namebufp  A memory area to hold responses
        <br>
          cmpfi     The file handle to recieve input from.
        <br>
          cmpfo     The file handle to be output to.
        <br>
          withcrc   Whether the files are to be CRC'd or not.
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          return TRUE if given filename is to be ignored
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void reccheckdir( char *namebuf, char *namebufp, char *cmps, FILE *cmpfi, FILE *cmpfo, BOOL withcrc )
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='set_var_val'>set_var_val</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine sets a system variable 'name' to string 'value', or destroy it
     if 'value' is NULL

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          name      The name of the system variable to be set.
        <br>
          value     The value for it to be set to.
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void set_var_val(char *name, char *value)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='gstrans'>gstrans</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine gstrans's the passed argument vector.
    Please use this routine wirh care; it is very careless about allocating
     memory.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          argv      A pointer to the argument vector to be gstrans'ed.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void gstrans(char *argv[])
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='diradd'>diradd</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Add a directory to the directory list.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          rootdir   The directry to be added to the list.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void diradd(char * rootdir)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='fileadd'>fileadd</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Store a file in the comparison structure.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          cmpfile   The file to be stored.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void filadd(char *cmpfile)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='skipadd'>skipadd</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Add a file to the ignore list (i.e. add a file to be skipped)

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          skfile    The file to be stored.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void skipadd(char *skfile)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='checkfile'>checkfile</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine performs a CRC check on an individual file instead of a whole
     directory tree, i.e. same as reccheckdir but operates on a single file only

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          namebuf   The directory to be checked.
        <br>
          cmpfi     The file handle to recieve input from.
        <br>
          cmpfo     The file handle to be output to.
        <br>
          withcrc   Whether the files are to be CRC'd or not.
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void checkfile (char *namebuf, FILE *cmpfi, FILE *cmpfo, BOOL withcrc)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='processignorefile'>processignorefile</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Adds filenames specified in the ignore file to the list.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          filename  This is the filename of the file to be scanned.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void processignorefile (char *filename)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='compare_tokens'>compare_tokens</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    Description: compares two sets of tokens, returning an error string
     containing the differences

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          original   The first token to be compared.
        <br>
          current    The second token to be compared
        <br>
          return_str A pointer ro an area of memory to hold any error
        <br>
          strings produced by the routine.
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          An enumnerated integer stating what went wrong inside the routine
        <br>
          if there was an error.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      E_CRC_MISMATCH compare_tokens (char *original, char *current, char *return_str)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='calc_access'>calc_access</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    calculate the access permissions from a given decimal number.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          int access. An integer representing the acess rights
        <br>
          access_str. A pointer to be filled by the access string
        <br>
          coresponding to the integer value passed in.
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          Nothing.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void calc_access (int access, char *access_str)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='get_filename_from_entry'>get_filename_from_entry</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine strips the filename from a checkfile entry

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          entry. The line from which the filename is to be stripped.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          A pointer to a memory area containing the filename, or NULL
        <br>
          if there was an error.
        <br>

          <p>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      char* get_filename_from_entry(char* entry)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='file_exists'>file_exists</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine checks whether the passed file exists.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          filename  This is the filename of the file to be checked.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          It returns TRUE if the file exists, FALSE otherwise (or if there
        <br>
          was an error during the SWI call).
        <br>

          <p>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      BOOL file_exists(char* filename)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='filer_object_type'>filer_object_type</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine returns the type of the filer object corresponding to the
     filename passed in.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          filename  This is the filename of the file to be checked.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          It returns : 0 for no such object
        <br>
          1 for a file object
        <br>
          2 for a directory object
        <br>
          3 for an image object
        <br>

          <p>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      unsigned long int filer_object_type(const char* filename)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='validate_checkfile'>validate_checkfile</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine scans through the checkfile and ensures that all files
     mentioned within it are present in the target directory structure. It
     does not report extra files in the target directory structure.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          filename  This is the filename of the file to be checked.
        <br>
          path      The path leading to filename
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          It returns TRUE if all the files in the checkfile exist, FALSE
        <br>
          otherwise
        <br>

          <p>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      BOOL validate_checkfile(char* filename, char* path)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='main'>main</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    The main entry point to the program.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          argc   The count of the number of arguments in the arg list.
        <br>
          argv   A vector containing the arguments.
        <br>

          <p>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          An integer specifying whether execution was successful or not.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      int main (int argc, char *argv[])
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='display_help_information'>display_help_information</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine displays the help information that can be obtained by using the
     -h flag or executing the utility with no flags passed.

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          void
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          void
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void display_help_information(void)
    </tt>

    <p>

    <!-- Header table for a specific function -->

    <table width='100%' cellspacing='0' cellpadding='0' border='0'>
      <tr>
        <td bgcolor='#dddddd' align='right'>
          <font size='5'><a name='tidy_memory'>tidy_memory</a>&nbsp;</font>
        </td>
      </tr>
    </table>

    <p>

    <!-- A synopsis of the function's purpose appears here if available -->

    This routine tidies up all memory. It is registered with atexit()

    <br><br>

    <!-- List of parameters and/or arguments, return values, assumptions etc. -->

    <hr size='1' width='100%' noshade>
    <table cellspacing='0' cellpadding='0' border='0'>
      <tr valign='top'>
        <th align='left'>Parameters:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          void.
        <br>
        </td>
      </tr>
      <tr valign='top'>
        <th align='left'><br>Returns:&nbsp;&nbsp;</th>
        <td align='left' width='95%'>
          <br>
          void.
        <br>
        </td>
      </tr>
    </table>
    <hr size='1' width='100%' noshade>

    <p>

    <!-- The function prototype, taken straight out of the source file -->

    <em>Function prototype:</em>

    <p>
    <tt>
      void tidy_memory(void)
    </tt>

    <p>
    <table width='100%' cellspacing='4' cellpadding='4' border='0'>
      <tr>
        <td align='right'>
          <a href='http://validator.w3.org/'><img border='0'
          src='http://validator.w3.org/images/vh40.gif'
          alt='Valid HTML 4.0' height='31' width='88'></a>
        </td>
      </tr>
    </table>

  </body>
</html>