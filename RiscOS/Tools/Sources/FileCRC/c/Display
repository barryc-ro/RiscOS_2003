/************************************************************************/
/* File:    display.c                                                   */
/* Purpose: Display routines.                                           */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@e-14.com>                      */
/* History: 0.01  Pre 1999-02-16                                        */
/*                Created. Originally used for the CopyApps utilities.  */
/*          0.02  1999-02-16                                            */
/*                Altered to generally improve it and add !MkDocs       */
/*                 comments.                                            */
/************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "os.h"
#include "typedefs.h"
#include "display.h"
#include "kernel.h"
#include "swis.h"
#include "assert.h"

#include "dbug.h"

void Report(os_error *er)
{
 printf("FileCRC has suffered an internal error.\n");
 printf("\n");
 printf("Error: [%x]  (%s)", er->errnum,er->errmess);
 exit(70);
}



void fatal(char *why, int exitcode)
{
  printf("%s\n",why);
  exit(exitcode);
}

void failure(char *what)
{
  printf("%s\n", what);
}

void progress(char *what)
{
  printf("%s\n",what);
}

void progressn(int n)
{
  printf(".. %02d%%", n);
}

void title(char *what, char *which, char *when)
{
  printf("%s (V%s %s)\n", what, which, when);
}




/*********************************************************************************/
/* right                                                                         */
/*                                                                               */
/* This routine returns the right-most 'n' characters in the strng passed in.    */
/*                                                                               */
/* Parameters: str      The string to be truncated.                              */
/*             chars    The number of characters for it to be truncated to.      */
/*                                                                               */
/* Returns:    A pointer to the modified string.                                 */
/*                                                                               */
/*********************************************************************************/
char *right (char *str,
             int  chars)
{
    char *tmp;
    int  i;

    if (str)						/* Check the string isn't NULL */
    {
        if (strlen (str) > chars)			/* Ensure that the string is long enough */
        {
            tmp = (char *) dbg_malloc (strlen (str) + 1);	/* Reserve some space for temporary store */
            if (tmp)					/* Make sure memory is claimed */
            {
                sprintf (tmp, "%s", str + ((strlen (str) - chars)));  /* Take a copy */
                *(tmp + chars) = '\0';			/* Terminate the string */
                for (i = 0; i < 3; i++)
                {
                    *(tmp + i) = '*';			/* Overwrite first three chars with '*' */
                }
                sprintf (str, "%s", tmp);		/* Copy the truncated string */
                dbg_free (tmp);				/* Free temporary store */
            }
        }
    }
    return str;						/* Return the string */
}




/*********************************************************************************/
/* trunc_message                                                                 */
/*                                                                               */
/* This routine takes the passed string and displays only the characters that    */
/*  will fit in the width of the current screen mode. It displays the last       */
/*  characters in the string, which means that the beginning of the string       */
/*  becomes truncated.                                                           */
/*                                                                               */
/* Parameters: msg      The message to be displayed.                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void trunc_message (char *msg)
{
    int screenwidth;
    _kernel_swi_regs in, out;
    char *tmp;

    assert (msg!=NULL);

    in.r[0] = -1;					/* Use current screen mode */
    in.r[1] = 1;					/* Find number of columns on screen */
    _kernel_swi (OS_ReadModeVariable, &in, &out);
    screenwidth = out.r[2];

    tmp = (char *) dbg_malloc (strlen (msg) + 1);		/* Create temporary store */
    if (tmp)						/* Ensure it created okay */
    {
        strcpy (tmp, msg);				/* Take a copy of the original string */
        msg = right (msg, screenwidth);			/* Find right most characters of string */
        failure (msg);
        strcpy (msg, tmp);				/* Restore original string */
        dbg_free (tmp);					/* Free our temporary store */
    }
}
