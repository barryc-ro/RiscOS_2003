/************************************************************************/
/* File:    crc.c                                                       */
/* Purpose: C version of the ARM assembler to calculate the CRC         */
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

#include "CRC.h"

/* A useful CRC generating constant */
enum {
  crc_const = 0xA001
};

unsigned int CRC( unsigned int crc, unsigned char *start, int length )
{
  /* start must be word-aligned */
  int *istart = (int *) start, word;

  for (; length >= 4; length -= 4) {
    word = *istart++;
    crc ^= word;
    crc <<= 16;
    crc >>= 16; /* arithmetic/logical shift irrelevant */
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };

    crc ^= (word >> 16); /* arithmetic/logical shift irrelevant */

    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
  }

  for (start = (unsigned char *) istart; length >= 0; --length) {
    word = (*start++);
    crc ^= word;

    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
    if (crc & 1) { crc = (crc >> 1) ^ crc_const; } else { crc >>= 1; };
  }

  return crc;
}
