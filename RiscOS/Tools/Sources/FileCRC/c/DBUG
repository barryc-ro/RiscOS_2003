/************************************************************************/
/* File:    dbug.c                                                      */
/* Purpose: Various debugging routines.                                 */
/*                                                                      */
/* Author:  David Cotton <mailto:dcotton@e-14.com>                      */
/* History: 0.01  Pre 1999-02-16                                        */
/*                Created.                                              */
/*          0.02  1999-02-16                                            */
/*                Altered to generally improve it and add !MkDocs       */
/*                 comments.                                            */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#define PROTOTYPES_INTERNAL
#include "DBUG.H"
#include <time.h>



#ifdef DEBUGLIB

/*********************************************************************************/
/* DBUG_PRINTF                                                                   */
/*                                                                               */
/* This routine displays the passed text to a debug stream using dprintf()       */
/*                                                                               */
/* Parameters: level. The level of debugging for this message (1-5)              */
/*             fmt. A vararg'ed string.                                          */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void DBUG_PRINTF(int level, char *fmt, ...)
{
  va_list ap;
  char debug_line[256];
  char debug_line2[256];
  /* Add the time to the beginning of the line */
  sprintf(debug_line2, "%6d : ", clock());
  /* Now add the rest of the line */
  va_start(ap, fmt);
  vsprintf(debug_line, fmt, ap);
  strcat (debug_line2, debug_line);
  dprintf(("", debug_line2));
  va_end(ap);
}

#endif /* DEBUGLIB */




#ifdef DEBUGLIB

/*********************************************************************************/
/* dbg_malloc                                                                    */
/*                                                                               */
/* This routine acts as a wrapper for malloc(). It is only enabled if DEBUGLIB   */
/*  is defined. It differs from malloc() in that it outputs debugging messages   */
/*  to state how many bytes have been allocated to which memory area.            */
/*                                                                               */
/* Parameters: amount   The amount of memory required.                           */
/*                                                                               */
/* Returns:    A pointer to the newly-created memory area, or NULL if the        */
/*              operation was unsuccessful.                                      */
/*                                                                               */
/*********************************************************************************/
char* dbg_malloc(unsigned int amount)
{
  char* area;
  DBUG_PRINTF(DBUG_LVL_DIAG, "dbg_malloc(): Requesting %d bytes of memory.\n", amount);
  area = malloc(amount);
  if (!area)
  {
    printf("Error allocating %d bytes of memory.\n", amount);
    DBUG_PRINTF(DBUG_LVL_ERROR, "dbg_malloc(): Error allocating %d bytes of memory.\n", amount);
  }
  else
  {
    DBUG_PRINTF(DBUG_LVL_DIAG, "dbg_malloc(): Allocated area %p with %d bytes.\n", area, amount);
  }
  return (area);
}





/*********************************************************************************/
/* dbg_free                                                                      */
/*                                                                               */
/* This routine acts as a wrapper for free(). It is only enabled if DEBUGLIB is  */
/*  defined. It differs from free() in that it outputs debugging messages to     */
/*  state which memory area is being freed, and also set the pointer to the      */
/*  memory area to NULL afterwards.                                              */
/*                                                                               */
/* Parameters: area     The memory area to be freed.                             */
/*                                                                               */
/* Returns:    Nothing.                                                          */
/*                                                                               */
/*********************************************************************************/
void dbg_free(char* area)
{
  DBUG_PRINTF(DBUG_LVL_DIAG, "dbg_free(): Freeing area at %p.\n", area);
  free (area);
  area = NULL;
}

#endif /* DEBUGLIB */



