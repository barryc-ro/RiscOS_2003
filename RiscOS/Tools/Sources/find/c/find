/*
 * Grope/grep/egrep/fgrep for RISC OS.
 *
 * LDS, 22-Feb-89.
 * LH, 24-Feb-89
 *
 * Copyright (C) Acorn Computers Ltd., 1989.
 */

#ifndef DEBUGGING
#define DEBUGGING  0
#endif

#include "VersionNum"

#ifdef __STDC__
#  include <string.h>
#  include <stdlib.h>
#else
#  include <strings.h>
#endif
#define  DATE      Module_Date


#include <stdio.h>
#include <signal.h>
#include <limits.h>
#include <ctype.h>
#include "CLX/hash.h"
#include "CLX/host.h"
#include "CLX/re.h"
#include "CLX/dir.h"
/*#include "rawio.h"*/
#include "CLX/wildcard.h"
#include "CLX/err.h"
#ifdef DDE
#include "kernel.h"
#endif

#define  SELF           "Find"
#define  VSN            Module_MajorVersion
#define  OK             0       /* exit codes */
#define  BAD            1
#define  DEL          127
#define  CTRL_SHIFT   128
#define  LINELEN      512
#define  R_SIZE     (1024*32)
#define  BUF_SIZE   (R_SIZE + LINELEN)
#define  BINPUTLEN     40
#define  BINCHECKLEN 1024

#define DDEUtils_ChunkBase             0x00042580
#define Throwback_Register       (DDEUtils_ChunkBase + 5)
#define Throwback_UnRegister     (DDEUtils_ChunkBase + 6)
#define Throwback_Start          (DDEUtils_ChunkBase + 7)
#define Throwback_Send           (DDEUtils_ChunkBase + 8)
#define Throwback_End            (DDEUtils_ChunkBase + 9)
#define Throwback_Debug          (DDEUtils_ChunkBase + &a)

typedef struct {NFA *nfa;  char *p;  int len;} Pattern;

static char *fbuf;
static FILE *open_fd;
static int verbose;
static int nocase;
#ifdef DDE
static int throwback;
#endif
static int debugging;
static int max_matches;
static int count_only;
static int unix_patterns;
static int is_binary;
static int files_found = 0;

#ifdef DDE
static int throwback_id = -1;
static int exit_handler = 0;
static char *last_error_file = 0;

static void dde_exit(void)
{
    _kernel_swi_regs r;
    _kernel_oserror *err;

    if (throwback_id >= 0) {
        r.r[0] = throwback_id;
        err = _kernel_swi(Throwback_End, &r, &r);
        if (err) {
            fputs(err->errmess, stderr);
            fputc('\n', stderr);
        }
    }
}

static void throwback_start(void)
{
    _kernel_swi_regs r;

    if (!exit_handler)
        atexit(dde_exit);
    exit_handler = 1;
    if (!_kernel_swi(Throwback_Start, &r, &r))
        throwback_id = 1;
}

static void throwback_send(char *file, int32 line, char *msg)
{
    enum
    {
        Throwback_SendReason_InfoDetails = 2
    };
    _kernel_swi_regs r;
    _kernel_oserror *err;

    if (throwback_id < 0)
        throwback_start();
    if (throwback_id >= 0) {
        r.r[0] = Throwback_SendReason_InfoDetails;
        r.r[1] = throwback_id;
        r.r[2] = (int)file;
        r.r[3] = (int)line;
        r.r[4] = 0;
        r.r[5] = (int)msg;
        err = _kernel_swi(Throwback_Send, &r, &r);
        if (err) {
            fputs(err->errmess, stderr);
            fputc('\n', stderr);
            exit(1);
        }
    }
}
#endif

static void close_fd(void)
{
  if (open_fd != NULL) fclose(open_fd);
}

static int check_if_binary(char *buf, int len)
{
  int j, step, ch;
  step = len / BINCHECKLEN;
  if (step == 0) step = 1;
  for (j = 0;  j < len;  j += step)
  {
    ch = buf[j];
    if (iscntrl(ch) && !isspace(ch)) return 1;
  }
  return 0;
}

static int grope_line(char *line, int len, Pattern patterns[], int n_patterns)
{
  int i, j, m, ch0;
  Pattern *p;

  for (j = 0;  j < n_patterns;  ++j)
  {
    i = 0;
    p = patterns + j;
    if (p->len > 0)
    {
      ch0 = p->p[0];
      for (i = 0;  i <= len - p->len;  ++i)
      {
        if (ch0 == line[i])
        { int q;
          for (q = 1;  q < p->len;  ++q)
          {
            if (p->p[q] != line[i+q]) break;
          }
          if (q >= p->len) goto match_pattern;
        }
      }
      continue;
    }
match_pattern:
    m = re_match(line+i, len-i, p->nfa, 1);
    if (m >= 0) return m + i;
  }
  return len;
}

static void lc_copy(char *to, char *fm, int len)
{
  int j, ch;
  for (j = 0;  j < len;  ++j)
  {
    ch = fm[j];  to[j] = isupper(ch) ? tolower(ch) : ch;
  }
}

static int patcount(Pattern patterns[])
{ int count;
  if (patterns == NULL) return 0;
  for (count = 0; patterns[count].nfa != NULL; ++count) ;
  return count;
}

static int grope_file(char *fname, VoidStar context, dir_entry entry)
{
  int len, j, n_matches, lineno, charno;
  FILE *fd;
  char *line, *next, *end;
  void (*oldhandler)(int);
  char nocase_line[LINELEN];
  Pattern *patterns = (Pattern *) context;
  int n_patterns = patcount(patterns);
  int type = dir_entrytype(entry);

  if (type == DIR_DIR) {
#if DEBUGGING
    if (debugging) fprintf(stderr, "found a dir '%s'\n", fname);
#endif
    if ((n_patterns == 0) && verbose) printf("%s (directory)\n", fname);
    return 0;
  }
  if ((n_patterns == 0) && verbose) { printf("%s\n", fname); return 0; }
  ++files_found;

  switch (type) {
    default: err_report("unknown error for '%s'", fname); return 0;
    case DIR_INACCESSIBLE: err_report("'%s' is inaccessible", fname); return 0;
    case DIR_FILE: break;
  }

  for (j = 0; j < n_patterns; ++j)
  {
    Pattern *p = patterns + j;
    len = strlen(p->p);
    re_head(p->nfa, p->p, len+1);
    p->len = strlen(p->p);
  }

  oldhandler = signal(SIGINT, SIG_IGN);
  open_fd = fd = fopen(fname, "rb");
  signal(SIGINT, oldhandler);

  if (fd == NULL)
  {
    err_report("can't open '%s'", fname);
    return 0;
  }

  if (verbose) printf("%s\n", fname);

  is_binary = -1;
  lineno = charno = n_matches = 0;
  end = next = fbuf + BUF_SIZE;
  for (;;)
  {
    line = next;
    if ((next - fbuf) >= R_SIZE)
    {
      len = end - next;
      if (len > 0)
      {
        line = fbuf + LINELEN - len;  memcpy(line, next, len);
      }
      else
      {
        line = fbuf + LINELEN;
      }
      end = fbuf + LINELEN;
      len = fread(end, sizeof (char), R_SIZE, fd);
      if (len < 0)
      {
        fclose(fd);
        open_fd = NULL;
        err_report("couldn't read '%s'", fname);
        return 0;
      }
      end += len;  next = line;
      if (is_binary < 0) is_binary = check_if_binary(line, len);
    }
    else if (next >= end)
    {
      break;
    }
    len = 0;
    while ((len < LINELEN) && (*next != '\n') && (next != end))
    {
      ++next;  ++len;
    }
    /* len == LINELEN || *next == '\n' || next == end */
    if ((next != end) && (len < LINELEN))
    {
      ++lineno;  ++next;  ++len;
    }
    if (len > 0)
    {
      char *line_to_grope;
      if (nocase)
      {
         line_to_grope = nocase_line;
         lc_copy(line_to_grope, line, len);
      }
      else
      {
        line_to_grope = line;
      }
      if ((j = grope_line(line_to_grope, len, patterns, n_patterns)) < len)
      {
        if (max_matches == 0)
        {
          printf("%s\n", fname);
          break;
        }
        else if (!count_only)
        {
          if (is_binary)
          { int l = j + BINPUTLEN;
            printf("\"%s\", byte %u:", fname, charno + j);
            for (; j < l;  ++j) putchar(line[j]);
            if (line[l-1] != '\n') putchar('\n');
          }
          else
          {
#ifdef DDE
            int c;
#endif

            printf("\"%s\", line %u:", fname, lineno);
            for (j = 0;  j < len;  ++j) putchar(line[j]);
            if (line[len-1] != '\n') putchar('\n');
#ifdef DDE
            if (throwback) {
                c = line[len - 1]; line[len - 1] = 0;
                throwback_send(fname, lineno, line);
                line[len - 1] = 0;
            }
#endif
          }
        }
        ++n_matches;
        if (n_matches >= max_matches) break;
      }
      charno += len;
    }
  }
  if (count_only && n_matches > 0)
  {
    printf("\"%s\", %u lines match\n", fname, n_matches);
  }
  fclose(fd);
  open_fd = NULL;
  return 0;
}

static int ctrl_char(char *s)
{
  int ctrl = 0 - '@';
  char *s0 = s;
  int ch = *++s;
  if (ch == '?')
    ch = DEL;
  else
  {
    if (ch == '!')
    {
      ctrl = CTRL_SHIFT;
      ch = *++s;
      if (ch == '|')
      {
        ch = *++s;
        if (ch == '?')
            ch = DEL;
        else
            ctrl -= '@';
      }
    }
    if (islower(ch)) ch = toupper(ch);
    else if ((ch < '@' || ch > '_') && ch != DEL) return -1;
    ch += ctrl;
  }
  return ch + ((s - s0) << 8);
}

static void charset_include(CharSet *cs, int ch)
{
  (*cs)[ch >> 5] |= (1L << (ch & 31));
}

static int charset_insert(CharSet *cs, char *s, int acorn)
{
  int j, ch, lastch;
  lastch = -1;
  for (ch = *s;  ch != 0;  ch = *++s)
  {
    if ((ch == '-') && (lastch >= 0))
    {
      ch = *(s + 1);
      if (ch == 0)
      {
        ch = '-';
      }
      else
      {
        ++s;
        for (j = lastch;  j <= ch;  ++j) charset_include(cs, j);
        lastch = -1;
        continue;
      }
    }
    if (acorn)
    {
      if (ch == '@')
      {
        for (j = 'A';  j <= 'Z';  ++j) charset_include(cs, j);
        for (j = 'a';  j <= 'z';  ++j) charset_include(cs, j);
        charset_include(cs, '_');
      }
      if ((ch == '@') || (ch == '#'))
      {
        lastch = ch;
        for (j = '0';  j <= '9';  ++j) charset_include(cs, j);
        continue;
      }
      if (ch == '\\')
      {
        ch = *(s + 1);
        if (ch == 0) ch = '\\';  else ++s;
      }
      else if (ch == '|')
      {
        ch = ctrl_char(s);
        if (ch < 0) return BAD;
        s += ch >> 8;
        ch &= 255;
      }
      else if (ch == '$')
      {
        ch = '\n';
      }
    }
    charset_include(cs, ch);
    lastch = ch;
  }
  return OK;
}

static void charset_empty(CharSet *cs)
{
  int j;
  for (j = 0;  j < 8;  ++j) (*cs)[j] = 0;
}

static void charset_negate(CharSet *cs)
{
  int j;
  for (j = 0;  j < 8;  ++j) (*cs)[j] = ~(*cs)[j];
}

static int parse_acorn_pattern(REHandle *h, char *pattern)
{
  int ch, not, modifier;

  for (ch = *pattern; ch != 0;  ch = *++pattern)
  {
    if ((ch == '*') || (ch == '^'))
    {
      if (ch == '*') modifier = '*'; else modifier = '+';
      ch = *++pattern;
      if (ch == 0) return BAD;
    } else modifier = 0;
    if (ch == '~')
    {
      not = 1;
      ch = *++pattern;
      if (ch == 0) return BAD;
    }
    else not = 0;
    if ((ch == '[') || (ch == '@'))
    { /* CharClass... */
      CharSet cs;
      charset_empty((CharSet *)(&cs));
      if (ch == '@')
      {
        charset_insert((CharSet *)(&cs), "@", 1);
      }
      else
      {
        char *ket = pattern;
        int lastch = 0;
        for (;;)
        {
          ch = *++ket;
          if ((ch == 0) ||
              (ch == ']') && (lastch != '\\') && (lastch != '|')) break;
          lastch =ch;
        }
        if (ch == 0) return BAD;
        *ket = 0;
        if (charset_insert((CharSet *)(&cs), pattern+1, 1) != OK) return BAD;
        *ket = ']';
        pattern = ket;
      }
      if (not) charset_negate((CharSet *)(&cs));
      re_charset(h, (CharSet *)(&cs));
    } else
    { /* single char */
      if (ch == '.') ch = RE_ANY;
      else if (ch == '$') ch = '\n';
      else if (ch == '#') ch = RE_DIGIT;
      else if (ch == '\\')
      {
        ch = *++pattern;
        if (ch == 0) return BAD;
      }
      else if (ch == '|')
      {
        ch = ctrl_char(pattern);
        if (ch < 0) return BAD;
        pattern += ch >> 8;
        ch &= 255;
      }
      if (not) ch += RE_NOT;
      re_char(h, ch);
    }
    if (modifier) re_modify(h, modifier);
  }
  return OK;
}

static int parse_unix_pattern(REHandle *h, char *pattern)
{
  int ch, l;
  char *p0 = pattern;

  for (ch = *pattern; ch != 0;  ch = *++pattern)
  {
    switch (ch)
    {
case '*':
case '?':
case '+':
          re_modify(h, ch);
          break;
case '(':
          re_bra(h);
          l = parse_unix_pattern(h, pattern+1);
          if (l == 0) return 0;
          pattern += l;
          ch = *pattern;
          if (ch != ')') return 0;
          re_ket(h);
          break;
case ')':
          return (pattern - p0) + 1;
          break;
case '^':
          re_char(h, RE_SOB);
          break;
case '$':
          re_char(h, '\n');
          break;
case '.':
          re_char(h, RE_ANY);
          break;
case '|':
          re_or(h);
          break;
case '[':
          { CharSet cs;
            char *ket = pattern;
            charset_empty((CharSet *)(&cs));
            ch = *++ket;
            if (ch == ']') ch = *++ket;
            while ((ch != ']') && (ch != 0)) ch = *++ket;
            if (ch == 0) return 0;
            *ket = 0;
            if (charset_insert((CharSet *)(&cs), pattern+1, 0) != OK) return 0;
            *ket = ']';
            pattern = ket;
            re_charset(h, (CharSet *)(&cs));
          }
          break;
case '\\':
          ch = *++pattern;
          if (ch == 0) return BAD;
default:
          re_char(h, ch);
          break;
    }
  }
  return pattern - p0;
}

static int parse_pattern(REHandle *h, char *pattern)
{
  if (unix_patterns)
  {
    if (parse_unix_pattern(h, pattern) > 0) return OK;  else return BAD;
  }
  else
  {
    return parse_acorn_pattern(h, pattern);
  }
}

static void describe_patterns(char *type)
{
  fprintf(stderr, "\n%s vsn %s [%s] - search files for patterns\n\n",
                  SELF, VSN, DATE);
  if (*type == 'u' || *type == 'U')
  {
    fprintf(stderr, "\
Unix (TM) grep/egrep-style patterns:-\n\
.   matches any single character\n\
$   matches the end of a line\n\
^   matches the beginning of a line\n\
\\c  matches char c even if c is special\n\
[abc] matches any one of a, b or c; within a CLASS a ] may only appear as\n\
    the first char; the string c1-c2 matches any char between c1 and c2\n\
    (inclusive) in ASCII order so a literal '-' must be placed where it\n\
    can't be part of such a string (e.g. last in the CLASS)\n\n\
    any other character except ()*+?| matches that character\n\n\
    In the following, A and B are 'regular expressions' constructed from\n\
    the character primitives described above and the rules given below:-\n\n\
(A) matches anything that A matches - parentheses are used to group terms\n\
    for qualification by *, +, or ? or to limit the scope of '|'\n\
A|B matches anything matched by either A or B\n\
A?  matches 0 or 1 A's (i.e. optionally matches A)\n\
A*  matches 0 or more A's\n\
A+  matches 1 or more A's\n\n\
    For example, ab(c*|de+) matches ab, abc, abcc,... abde, abdee,...\n");
  }
  else
  {
    fprintf(stderr, "\
Acorn-style search patterns:-\n\
.   matches any single character\n\
$   matches end of line\n\
@   matches any 'identifier' character (A-Z, a-z, 0-9 or _)\n\
#   matches any digit\n\
|c  if '@' <= c <= '_', |c matches CTRL+c; |? matches DEL\n\
    |! shifts the next character or control character by 128\n\
\\c  matches char c even if c is special\n\
[abc] matches any one of a, b or c; within a CLASS only $ @ # \\ and |\n\
    retain their special meanings and c1-c2 matches any single char\n\
    between c1 and c2 (inclusive) in ASCII order\n\n\
    any other single character matches that character\n\n\
~x  if x is any of the above 'simple' character patterns then ~x\n\
    matches any char not matching x (e.g. ~|c matches any but CTRL+C)\n\
*y  if y is any of the above 'simple' character patterns then *y\n\
    matches 0 or more y's (e.g. *[a-z] matches >= 0 lower case letters)\n\
^y  Like *y but matches one or more y's (e.g. ^[a-z] matches any lower\n\
    case 'word'\n\n\
    (use find -du to get a description of grep/egrep-style patterns)\n");
  }
}

static void give_help()
{ char ch = host_dir_sep_char();
  fprintf(stderr, "\n%s vsn %s [%s] - search files for patterns\n\n",
                  SELF, VSN, DATE);

  fprintf(stderr, "\
find filepattern\n\
find [options] pattern filepattern [filepattern ...]\n\
find [options] pattern [pattern ...] -f filepattern [filepattern ...]\n\n");

  fprintf(stderr, "\
Options:-\n\
-c  print only a count of the number of lines matching from each file\n\
-d  describe the syntax of patterns\n\
-du describe the syntax of Unix (TM) grep/egrep-style patterns\n\
-e  allow the following pattern argument to begin with a '-'\n\
-f  marks the end of multiple patterns and the start of filepatterns\n\
-l  list only the names of files matching patterns\n\
-i, -n  ignore the case of letters when making comparisons\n\
-u  accept Unix grep/egrep-style patterns\n\
-v  list the name of each file before searching it for matches\n");

  wild_give_help();

  fprintf(stderr, "\nExamples:   find ");
  if (ch == '.')
    fprintf(stderr, "test.(*.){c,h}.*\nlists the names of files in directories");
  else {
    fprintf(stderr, "test%c(*%c)*.{c,h}\n", ch, ch);
    fprintf(stderr, "lists the names of files with extensions");
  }
  fprintf(stderr, " 'c' or 'h' reachable from 'test'\n\
            find DEBUG assert.h -f ");
  if (ch == '.') fprintf(stderr, "test.(*.){c,h}.*\n");
  else  fprintf(stderr, "test%c(*%c)*.{c,h}\n", ch, ch);
  fprintf(stderr, "lists all lines from those files which contain 'DEBUG' or 'assert.h'\n");
}

static void handle_escape(int signo)
{
  signal(signo, handle_escape);
  close_fd();
  exit(BAD);
}

static void initialise(void)
{
  signal(SIGINT, handle_escape);
  err_init(SELF);
  dir_init();
  verbose = 0;  nocase = 0;  debugging = 0;
#ifdef DDE
  throwback = 0;
#endif
  count_only = unix_patterns = 0;
  max_matches = INT_MAX;
}

int main(int argc, char *argv[])
{
  int first_pattern, n_patterns, first_fname, n_fnames;
  int j, rc, not_a_flag, implied_first_fname;
  int ok_for_names, skip_hyphen_arg;
  Pattern *patterns = NULL;

/*
 * First extract the flags from the command line and deduce whether
 * the non-flag arguments are of the form:-
 *   <file-pattern>
 *   <grope-pattern> [ <file-pattern> ]+
 *   [ <grope-pattern> ]+ -f [ <file-pattern> ]+
 */
  initialise();
  first_pattern = first_fname = n_patterns = n_fnames = not_a_flag = 0;
  implied_first_fname = 0;
  rc = OK;

  for (j = 1;  j < argc;  ++j) {
    char *arg = argv[j];
    if (hash_cistrcmp("-help", arg) == 0 || hash_cistrcmp("-h", arg) == 0) {
      give_help(); exit(OK);
    }
  }

  ok_for_names = 1;
  for (j = 1;  j < argc;  ++j)
  {
    char *arg = argv[j];
    if (arg[0] == '-' && !not_a_flag)
    { ++arg;
      while (*arg)
      { switch (*arg)
        {
case '0': case '1': case '2': case '3': case '4':
case '5': case '6': case '7': case '8': case '9':
          { int n = 0;
            while (isdigit(*arg)) {n = n*10 + (*arg - '0');  ++arg;}
            --arg;
            max_matches = n;
          }
          if (first_pattern != 0) ok_for_names = 0;
          break;
case 'c':
case 'C': count_only = 1;
          if (first_pattern != 0) ok_for_names = 0;
          break;
case 'd':
case 'D': if (unix_patterns) arg[1] = 'u';
          describe_patterns(arg+1);
          exit(OK);
          break;
case 'e':
case 'E': not_a_flag = 1;
          break;
case 'f':
case 'F': not_a_flag = 1; ok_for_names = 1;
          if (first_fname == 0) {
            first_fname = j + 1;
            if (first_pattern == 0) first_pattern = -1;
          } else err_fail("bad argument (repeated '%s' flag)", arg);
          break;
case 'l':
case 'L': max_matches = 0;
          if (first_pattern != 0) ok_for_names = 0;
          break;
case 'i': /* egrep/grep convention */
case 'I':
case 'n':
case 'N': nocase = 1;
          if (first_pattern != 0) ok_for_names = 0;
          break;
#ifdef DDE
case 't':
case 'T':
          throwback = 1;
          break;
#endif
case 'u':
case 'U': unix_patterns = 1;
          if (first_pattern != 0) ok_for_names = 0;
          break;
case 'v':
case 'V': verbose = 1;
          if (first_pattern != 0) ok_for_names = 0;
          break;
#if DEBUGGING
case 'z':
case 'Z': { int cont = 1;
            while ((*arg != 0) && cont) {
              switch (*arg) {
                case 'r': case 'R': re_debug(); break;
                case 'd': case 'D': dir_debug(debugging); break;
                case 'w': case 'W': wild_debug(debugging); break;
                case 'z': case 'Z': ++debugging; break;
                case 'a': case 'A': re_debug(debugging); dir_debug(debugging);
                                    wild_debug(debugging); break;
                default: cont = 0; break;
              }
              ++arg;
            }
            arg--;
          }
          if (first_pattern != 0) ok_for_names = 0;
          break;
#endif
default:  err_fail("unknown option %s", arg);
          break;
        }
        ++arg;
      }
    } else { /* grope-pattern and file-pattern arguments...  */
      if (ok_for_names) {
        if (first_pattern == 0) first_pattern = j;
        if (first_fname > 0) {
          if (n_fnames == 0) first_fname = j;
          ++n_fnames;
        } else
          if (++n_patterns <= 2) implied_first_fname = j;
      } else
        err_fail("unexpected flag found in filenames / patterns list");
      not_a_flag = 0;
    }
  }

  if (rc != OK) return rc;
  if (not_a_flag) err_fail("missing argument after '%s' flag", argv[argc-1]);
  if (n_fnames == 0) {
    first_fname = implied_first_fname;
    if (n_patterns == 1) { n_fnames = 1; n_patterns = 0; }
    else {
      if (n_patterns > 1) { n_fnames = n_patterns - 1; n_patterns = 1; }
      else err_fail("missing filenames");
    }
  }

/*
 * Build the grope-pattern recogniser if a grope-pattern has been given.
 */
  if (n_patterns > 0)
  { /* build the grope-pattern recognisers... */
    REHandle h;
    int np = sizeof(Pattern) * (n_patterns+1);
    patterns = (Pattern *) malloc(np);
    if (patterns == NULL)
    {
      err_fail("failed to allocate %u bytes for patterns", np);
    }
    skip_hyphen_arg = 0;
    for (j = first_pattern, np = 0;  np < n_patterns;  ++j)
    {
      char *pattern = argv[j];
      if ((pattern[0] == '-') && (skip_hyphen_arg)) skip_hyphen_arg = 0;
      else {
        NFA *pattern_nfa = NULL;
        skip_hyphen_arg = 1;
        if (nocase) lc_copy(pattern, pattern, strlen(pattern));
        re_begin1(&h);
        if (parse_pattern(&h, pattern) == OK)
        {
          re_begin2(&h);
          if (parse_pattern(&h, pattern) == OK) pattern_nfa = re_end(&h);
        }
        if (pattern_nfa == NULL)
          err_fail("bad pattern '%s'", pattern);
        else
        {
          patterns[np].nfa = pattern_nfa;
          patterns[np].p = pattern;
#if DEBUGGING
  if (debugging) {
    fprintf(stderr, "pattern = '%s'\n", pattern);
  }
#endif
          ++np;
        }
      }
    }
    if (np == 0) exit(BAD);   /* n_patterns > 0 && all are bad */
    n_patterns = np;
    patterns[np].nfa = NULL;
  }

  if (n_patterns > 0)
  {
    fbuf = malloc(BUF_SIZE);
    if (fbuf == NULL)
      err_fail("can't allocate %u bytes for file buffer", BUF_SIZE);
  } else verbose = 1;

/*
 * Finally, process the grope-patterns against each of the file-name patterns.
 */
  open_fd = NULL;
  atexit(close_fd);
  skip_hyphen_arg = 0;
  for (j = first_fname;  n_fnames > 0;  ++ j)
  {
    char *file = argv[j];
    if ((file[0] == '-') && (skip_hyphen_arg)) skip_hyphen_arg = 0;
    else {
#if DEBUGGING
  if (debugging) {
    fprintf(stderr, "filepattern = '%s'\n", file);
  }
#endif
      --n_fnames; skip_hyphen_arg = 1;
      if (wild_enumerate(file, grope_file, (VoidStar) patterns, WILD_ALL_MATCHES) != 0) {
        if (err_get_error_fmt() != NULL)
          err_report(err_get_error_fmt(), err_get_error_extra());
        rc = BAD;
      }
    }
  }

  if ((files_found == 0) && (n_patterns > 0))
    err_report("no files found to search for pattern");

  return rc;
}
