/*
 * symedit
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 * This utility will take an object file and strip all the strings referring to internal symbols
 * from it, to remove any information that might be contained within those strings.  All global
 * definitions are made local to the file too (and the symbol names removed).
 *
 * To specify a list of symbols that should remain exported/be exported, put them in a file and
 * pass it as a parameter to the -e option.  These files are either plaintext, one symbol per
 * line, or SYMDEFS files.
 *
 * Syntax: symedit [-e <symbol list> [-e <symbol list> ...]] object-file object-file ...
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stddef.h>
#include <ctype.h>

#include "aof.h"
#include "bytesex.h"
#include "chunkfmt.h"
#include "chunkfls.h"
#include "elf.h"
#include "err.h"
#include "prgname.h"
#include "symdefs.h"

typedef struct changelist {
  struct changelist *next;
  char sym[1];
} changelist;

static changelist **cl_alloc(changelist **ptr, const char *name)
{
  const size_t len = strlen(name) + 1;
  *ptr = malloc(offsetof(changelist, sym) + len);
  if (!*ptr) {
    err_fail("Out of memory");
  }
  (void) memcpy((*ptr)->sym, name, len);
  (*ptr)->next = NULL;
  return &(*ptr)->next;
}

static int sym_matches(const char *sym, changelist *c)
{
  for (;c; c=c->next) {
    if (strcmp(sym, c->sym) == 0) return 1;
  }

  return 0;
}

static int process_aof_symbols(aof_symbol *sym, char *str, int32 nsyms, changelist *cl, char *newstrt)
{
  /* Firstly, change all the symbols so that the definitions and local or global
   * as required.  We MUST keep hold of symbols starting with __ or _<capital>
   * since these are compiler internal variables and stuff like linker sets.
   */

  memcpy(newstrt, str, 4); /* copy the length word */

  for (;nsyms > 0; --nsyms, ++sym) {
    int32 sym_idx = bytesex_hostval(sym->sym_name);
    const char *symname = str + sym_idx;
    const unsigned32 attr = bytesex_hostval(sym->sym_AT);
    unsigned32 flags = attr & SYM_REFDEFMASK;
    const int is_glob = flags == SYM_GLOBALDEFAT;
    const int is_local_def = flags == SYM_LOCALDEFAT;
    const int keep_sym = (symname[0] == '_' && (symname[1] == '_' || isupper(symname[1])));


    if (!keep_sym && (is_glob || is_local_def)) {
      const int matches = sym_matches(symname, cl);
      if (matches && is_local_def) flags = SYM_GLOBALDEFAT;
      if (!matches && is_glob) flags = SYM_LOCALDEFAT;

      if (flags != (attr & SYM_REFDEFMASK)) {
        flags = ((attr & ~SYM_REFDEFMASK) | flags);
        sym->sym_AT = bytesex_hostval(flags);
      }
    }

    if (keep_sym || (flags & SYM_REFDEFMASK) != SYM_LOCALDEFAT) {
      strcpy(newstrt + sym_idx, symname);
    }
  }

  return 1;
}

static void *i32malloc(int32 size)
{
  return malloc((size_t) size);
}

static int aof_recognise(FILE *f, changelist *cl)
{
  ChunkFile cf;
  int ok = 0;

  rewind(f);
  if (cf_open(f, &cf)) {
    int32 headersize = cf_headersize(&cf);
    if (headersize) {
      void *data = i32malloc(headersize);
      if (data) {
        cf_header *cfh = cf_readheader(&cf, data, headersize);
        if (cfh) {
          int symt_idx = cf_index(cfh, OBJ_SYMT);
          int strt_idx = cf_index(cfh, OBJ_STRT);
          int head_idx = cf_index(cfh, OBJ_HEAD);
          if (symt_idx > -1 && strt_idx > -1 && head_idx > -1) {
            int32 symt_size, strt_size, head_size;
            symt_size = cf_entrysize(cfh, symt_idx);
            strt_size = cf_entrysize(cfh, strt_idx);
            head_size = cf_entrysize(cfh, head_idx);
            if (symt_size > -1 && strt_size > -1 && head_size > -1) {
              aof_symbol *symt = i32malloc(symt_size);
              char *strt = i32malloc(strt_size);
              char *newstrt = i32malloc(strt_size);
              aof_header *head = i32malloc(head_size);
              if (symt && strt && head && newstrt) {
                memset(newstrt, '\0', (size_t) strt_size);
                if (!cf_seek(&cf, strt_idx)) {
                  if (!cf_loadentry(&cf, strt, strt_size)) {
                    if (!cf_seek(&cf, symt_idx)) {
                      if (!cf_loadentry(&cf, symt, symt_size)) {
                        if (!cf_seek(&cf, head_idx)) {
                          if (!cf_loadentry(&cf, head, head_size)) {
                            const int32 nsyms = bytesex_hostval(head->aof_nsyms);
                            if (process_aof_symbols(symt, strt, nsyms, cl, newstrt)) {
                              if (!cf_seek(&cf, strt_idx)) {
                                if (!cf_saveentry(&cf, newstrt, strt_size)) {
                                  if (!cf_seek(&cf, symt_idx)) {
                                    if (!cf_saveentry(&cf, symt, symt_size)) {
                                      ok = 1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              free(head);
              free(symt);
              free(strt);
              free(newstrt);
            }
          }
        }
        free(data);
      }
    }
  }

  return ok;
}

static int process_elf_symbols(Elf32_Sym *sym, char *str, int32 nsyms, changelist *cl, char *newstrt)
{
  int ok = 1;

  /* Firstly, change all the symbols so that the definitions and local or global
   * as required.  We MUST keep hold of symbols starting with __ or _<capital>
   * since these are compiler internal variables and stuff like linker sets.
   */

  /* NOTE: This function makes the file non-compliant with the ARM spec, because you end
   * up with the symbol tables sh_info being wrong (the index of symbol after the last
   * STB_LOCAL symbol.
   */
  int32 i;

  for (i = 0; i < nsyms; ++i) {
    Elf32_Sym *s = sym + i;
    Elf32_Word strname = bytesex_hostval(s->st_name);
    unsigned int idx = bytesex_hostval16(s->st_shndx);

    if (ELF32_ST_BIND(s->st_info) == STB_GLOBAL && idx != SHN_UNDEF) {
      if (str[strname] == '_' && (str[strname+1] == '_' || isupper(str[strname+1]))) {
        /* Must leave this symbol global */
      }
      else if (sym_matches(str + strname, cl)) {
        /* Must leave this symbol global */
      }
      else {
        s->st_info = ELF32_ST_INFO(STB_LOCAL, ELF32_ST_TYPE(s->st_info));
        continue;
      }
    }

    (void) strcpy(newstrt + strname, str + strname);
  }

  return ok;
}

static void *load_elf_section(FILE *f, Elf32_Shdr *s, size_t *ssize)
{
  size_t size = (size_t) bytesex_hostval(s->sh_size);
  void *result = NULL;

  if (size) {
    if (fseek(f, bytesex_hostval(s->sh_offset), SEEK_SET) == 0) {
      result = malloc(size);
      if (result) {
        if (fread(result, 1, size, f) != size) {
          free(result);
          result = NULL;
        }
        else {
          *ssize = size;
        }
      }
    }
  }

  return result;
}

static int elf_recognise(FILE *f, changelist *cl)
{
  Elf32_Ehdr hdr;
  int ok = 0;
  Elf32_Half nsecs;
  size_t i;


  (void) cl;

  rewind(f);
  if (fread(&hdr, 1, sizeof(hdr), f) == sizeof(hdr)) {
    if (
      hdr.e_ident[EI_MAG0] == ELFMAG0 &&
      hdr.e_ident[EI_MAG1] == ELFMAG1 &&
      hdr.e_ident[EI_MAG2] == ELFMAG2 &&
      hdr.e_ident[EI_MAG3] == ELFMAG3 &&
      hdr.e_ident[EI_CLASS] == ELFCLASS32 &&
      hdr.e_ident[EI_VERSION] == EV_CURRENT &&
     (hdr.e_ident[EI_DATA] == ELFDATA2LSB || hdr.e_ident[EI_DATA] == ELFDATA2MSB) &&
     (hdr.e_type == ET_REL || hdr.e_type == ET_EXEC || hdr.e_type == ET_DYN) &&
      hdr.e_machine == EM_ARM)
    {
      const int data = hdr.e_ident[EI_DATA];
      bytesex_reverse_auto(data == ELFDATA2LSB ? bytesex_WANT_LITTLE_ENDIAN : bytesex_WANT_BIG_ENDIAN);
      nsecs = bytesex_hostval16(hdr.e_shnum);
      if (nsecs > 0 && bytesex_hostval(hdr.e_shentsize) == sizeof(Elf32_Shdr)) {
        if (fseek(f, bytesex_hostval(hdr.e_shoff), SEEK_SET) == 0) {
          Elf32_Shdr *sections = calloc(nsecs, sizeof(Elf32_Shdr));
          if (sections) {
            if (fread(sections, sizeof(Elf32_Shdr), nsecs, f) == nsecs) {
              for (i = 0; i < nsecs; ++i) {
                Elf32_Shdr *s = sections + i;
                if (bytesex_hostval(s->sh_type) == SHT_SYMTAB) {
                  /* This was the symbol table */
                  int32 strsec = bytesex_hostval(s->sh_link);
                  size_t symsecsize, strsecsize;
                  Elf32_Sym *symt = load_elf_section(f, s, &symsecsize);
                  int32 nsyms = symsecsize / bytesex_hostval(s->sh_entsize);
                  if (symt && nsyms > 0 && bytesex_hostval(s->sh_entsize) == sizeof(Elf32_Sym)) {
                    char *strt = load_elf_section(f, sections + strsec, &strsecsize);
                    if (strt) {
                      char *newstrt = malloc(strsecsize);
                      if (newstrt) {
                        memset(newstrt, '\0', strsecsize);
                        if (fseek(f, bytesex_hostval(s->sh_offset), SEEK_SET) == 0) {
                          if (process_elf_symbols(symt, strt, nsyms, cl, newstrt)) {
                            if (fwrite(symt, sizeof(Elf32_Sym), (size_t) nsyms, f) == nsyms) {
                              if (fseek(f, bytesex_hostval(sections[strsec].sh_offset), SEEK_SET) == 0) {
                                if (fwrite(newstrt, 1, strsecsize, f) == strsecsize) {
                                  ok = 1;
                                }
                              }
                            }
                          }
                        }
                        free(newstrt);
                      }
                      free(strt);
                    }
                    free(symt);
                  }
                }
              }
            }
            free(sections);
          }
        }
      }
    }
  }

  return ok;
}

static FILE *open_file(const char *filename, const char *mode)
{
  FILE *f = fopen(filename, mode);

  if (f == NULL) {
    err_fail("Unable to open file '%s'", filename);
  }

  return f;
}

static void process_file(const char *filename, changelist *cl)
{
  FILE *f = open_file(filename, "rb+");

  if (!aof_recognise(f, cl) && !elf_recognise(f, cl)) {
    err_report("File '%s' not recognised as a valid AOF or ELF", filename);
  }

  fclose(f);
}

static void usage(void)
{
  err_report("Makes definitions in object files local unless listed in the exports file");
  err_report("Parameters:");
  err_report("  -e <export file>     The list of symbols to be exported (either a SYMDEFS");
  err_report("                       file, or text file with one symbol per line)");
}

static char *nextarg(char *ptr, char ch)
{
  if (!ptr) {
    err_fail("Missing parameter for option '-%c'", ch);
  }

  return ptr;
}

static SymDefSymbol *load_symdefs(SymDefsFile *sf, char *sym, int32 x, SymDefSymbolType y, void *z)
{
  changelist ***clp = z;
  *clp = cl_alloc(*clp, sym);
  return NULL;

  (void) sf;
  (void) x;
  (void) y;
}

static void load_exports(changelist ***clp, const char *name)
{
  changelist **cl = *clp;
  FILE *f = open_file(name, "r");
  int first = 1;
  enum {
    plaintext,
    symdefs
  } format = plaintext;
  char buffer[BUFSIZ];

  for (;fgets(buffer, sizeof(buffer)-1, f); first = 0) {
    char *eol;
    if (first && 0 == strncmp(buffer, "#SYMDEFS#", 9)) {
      format = symdefs;
      break;
    }
    eol = strpbrk(buffer, "#\r\n \t");
    if (eol) *eol = '\0';
    if (*buffer) cl = cl_alloc(cl, buffer);
  }

  fclose(f);

  if (format == symdefs) {
    SymDefsFile *sf = sf_new();
    if (!sf) {
      err_fail("Out of memory loading symdefs file '%s'\n", name);
    }
    else {
      SymDefsFile *sfo = sf_open((char *)name, sf, SFOPEN_INPUT);
      if (sfo) {
        sf_load(sfo, load_symdefs, &cl);
      }
      sf_delete(sf);
    }
  }

  *clp = cl;
}

int main(int argc, char *argv[])
{
  changelist *cl_list = NULL, **cl = &cl_list;
  char progname[32];
  int arg;
  char *ap;

  (void) program_name(argv[0], progname, sizeof(progname));
  err_init(progname);

  for (ap = argv[arg = 1]; ap && arg < argc; ap = argv[++arg]) {
    if (*ap == '-') {
      if (ap[1] == 'e') {
        ap = nextarg(argv[++arg], ap[1]);
        load_exports(&cl, ap);
      }
      else if (ap[1] == 'h') {
        usage();
        exit(EXIT_SUCCESS);
      }
      else {
        usage();
        exit(EXIT_FAILURE);
      }
    }
    else {
      process_file(ap, cl_list);
    }
  }

  return 0;
}
