/* > aoftoc

 * This utility converts an AOF file into a C source file and a header file
 * Exported symbols are exported as #defines along with a function to 
 * perform any relocations.
 
 * This is not meant to be complete, it's just enough to process aof files
 * generated from assembler sources.

 * SJM 17-Feb-1999: Created

 */

#include <stdlib.h>
#include <string.h>

#include "aof.h"
#include "chunkfls.h"

#include "VersionNum"

#define SYNTAX     	"Syntax: aoftoc <obj file> <output name>\n\r"
#define VERSION         "aoftoc -- version " Module_MajorVersion " (" Module_Date ")\n\r"

#define DATA_HEADER	"/* > %s.c -- generated source */\n"
#define DATA_FOOTER	"/* eof %s.c -- generated source */\n"

#define HEADER_HEADER	"/* > %s.h -- generated header */\n"
#define HEADER_FOOTER	"/* eof %s.h -- generated header */\n"


static void *load_chunk(ChunkFile *cfp, cf_header *header, char *name)
{
    int index;
    int32 size;
    void *chunk;

    if ((index = cf_index(header, name)) == -1)
    {
        fprintf(stderr, "Can't find chunk %s\n", name);
        return 0;
    }

    if (cf_seek(cfp, index))
    {
        fprintf(stderr, "Error seeking to chunk %d\n", index);
        return 0;
    }

    size = (int)header->cf_chunks[index].cfe_size;
    if ((chunk = malloc((int)size)) == NULL)
    {
        fprintf(stderr, "Out of memory for chunk %d\n", index);
        return 0;
    }

    if (cf_loadentry(cfp, chunk, size))
    {
        fprintf(stderr, "Error loading chunk\n");
        return 0;
    }

    return chunk;
}

static void dump_area(FILE *f_data, FILE *f_header, const aof_header *aof, int n, const void *data, const char *strings, const char *name)
{
    int i;
    int32 nwords;
    const unsigned int *areas = (const unsigned int *)data;
    const aof_area *area;
    aof_reloc *reloc;

    /* skip to area start */
    area = aof->aof_areas;
    for (i = 0; i < n; i++, area++)
        areas += area->area_size/4 + area->area_nrelocs*sizeof(aof_reloc);

    /* write out data */
    fprintf(f_data, "/* area %d %s */\n", n, strings + aof->aof_areas[n].area_name);
    fprintf(f_data, "unsigned int %s_area_%d_[] =\n{\n", name, n);

    nwords = area->area_size/4;
    for (i = 0; i < nwords; i++)
    {
        if (i != 0)
            fputc(',', f_data);
        fprintf(f_data, "0x%08x", areas[i]);
        if ((i % 16) == 15)
            fputc('\n', f_data);
    }
    fprintf(f_data, "\n};\n");

    /* write out relocation function */
    fprintf(f_data, "static void %s_area_%d_relocate(void)\n{\n", name, n);
    reloc = (aof_reloc *)&areas[nwords];
    for (i = 0; i < area->area_nrelocs; i++, reloc++)
    {
        int type2 = rel_type2(reloc->rel_flags);

        /* if it is an additive relocation*/
        if (!(type2 ? rel2_R(reloc->rel_flags) : rel1_R(reloc->rel_flags)))
        {
            if (type2 ? rel2_A(reloc->rel_flags) : rel1_A(reloc->rel_flags))
            {
                /* relative to symbol */
                /*fprintf(stderr, "relocate: symbol %d\n", type2 ? rel2_sid(reloc->rel_flags) : rel1_sid(reloc->rel_flags));*/

                fprintf(f_data, " %s_area_%d_[%ld] += %d;\n", name, n, reloc->rel_offset/4, 0 /* sym_value */);
            }
            else
            {
                /* relative to area */
                int reloc_area = type2 ? rel2_sid(reloc->rel_flags) : n;
                /*fprintf(stderr, "relocate: area %d\n", reloc_area);*/

                fprintf(f_data, " %s_area_%d_[%ld] += (int)%s_area_%d_;\n", name, n, reloc->rel_offset/4, name, reloc_area);
            }
        }
    }
    fprintf(f_data, "}\n");

    fprintf(f_header, "extern unsigned int %s_area_%d_[];\n", name, n);
}

static int lookup_area(const aof_header *aof, const char *strings, const char *name)
{
    int area;

    for (area = 0; area < aof->aof_nareas; area++)
        if (strcmp(strings + aof->aof_areas[area].area_name, name) == 0)
            return area;
    return -1;
}

#define BAD_CHARS	"$"

static void make_identifier_safe(char *buf, int buf_len, const char *name)
{
    const char *in = name;
    char *out = buf, *end = buf + buf_len - 1;
    char c;
    for (c = *in++; c && out < end; c = *in++)
    {
	if (strchr(BAD_CHARS, c) != NULL)
	    c = '_';
	*out++ = c;
    }
    *out = 0;
}

static int process(FILE *in, FILE *f_data, FILE *f_header, const char *name)
{
    ChunkFile cf, *cfp;
    int32 size;
    cf_header *header;
    aof_header *aof;
    char *strings;
    int *areas;
    aof_symbol *syms;
    aof_symbol *symbol;
    int sym, area;

    /* do file header */
    cfp = cf_open(in, &cf);
    if (!cfp)
    {
        fprintf(stderr, "Input is not a chunk file\n");
        return 0;
    }

    if ((size = cf_headersize(cfp)) == 0)
    {
        fprintf(stderr, "Input chunk file was not opened correctly\n");
        return 0;
    }

    if ((header = malloc((int)size)) == NULL)
    {
        fprintf(stderr, "Out of memory for header\n");
        return 0;
    }

    if (!cf_readheader(cfp, header, size))
    {
        fprintf(stderr, "Failed to read chunk file header\n");
        return 0;
    }

    /* read aof HEAD chunk */
    if ((aof = load_chunk(cfp, header, OBJ_HEAD)) == NULL)
        return 0;
    if ((strings = load_chunk(cfp, header, OBJ_STRT)) == NULL)
        return 0;
    if ((areas = load_chunk(cfp, header, OBJ_AREA)) == NULL)
        return 0;
    if ((syms = load_chunk(cfp, header, OBJ_SYMT)) == NULL)
        return 0;


    /* write file headers */
    fprintf(f_data, DATA_HEADER, name);
    fprintf(f_data, "#include \"%s.h\"\n", name);

    fprintf(f_header, HEADER_HEADER, name);

    for (area = 0; area < aof->aof_nareas; area++)
        dump_area(f_data, f_header, aof, area, areas, strings, name);

    fprintf(f_header, "extern void %s_area_relocate(void);\n", name);

    symbol = syms;
    for (sym = 0; sym < aof->aof_nsyms; sym++, symbol++)
    {
        if ((symbol->sym_AT & SYM_REFDEFMASK) == SYM_GLOBALDEFAT &&
            (symbol->sym_AT & SYM_ABSAT) == 0)
        {
	    char symname2[256];
            const char *symname = strings + symbol->sym_name;
            int32 value = symbol->sym_value;

            /* get the area index for this symbol */
            area = lookup_area(aof, strings, strings + symbol->sym_areaname);

	    make_identifier_safe(symname2, sizeof(symname2), symname);
	    
            fprintf(f_header, "#define %s %s_area_%d_[%ld]\n", symname2, name, area, value/4);
        }
    }

    fprintf(f_data, "void %s_area_relocate(void) {\n", name);
    for (area = 0; area < aof->aof_nareas; area++)
        fprintf(f_data, " %s_area_%d_relocate();\n", name, area);
    fprintf(f_data, "}\n");


    fprintf(f_data, DATA_FOOTER, name);
    fprintf(f_header, HEADER_FOOTER, name);

    return 1;
}

int main(int argc, char *argv[])
{
    FILE *in, *f_data, *f_header;
    char *name, data[64], header[64];

    fprintf(stderr, VERSION);
    if (argc != 3)
    {
        fprintf(stderr, SYNTAX);
        return EXIT_FAILURE;
    }

    in = fopen(argv[1], "rb");

    name = argv[2];
#ifdef __riscos
    sprintf(data, "c.%s", name);
    sprintf(header, "h.%s", name);
#else
    sprintf(data, "%s.c", name);
    sprintf(header, "%s.h", name);
#endif    
    f_data = fopen(data, "w");
    f_header = fopen(header, "w");

    if (in && f_data && f_header)
       process(in, f_data, f_header, name);

    if (in)
        fclose(in);
    if (f_data)
        fclose(f_data);
    if (f_header)
        fclose(f_header);

    return EXIT_SUCCESS;
}

/* eof aoftoc.c */
