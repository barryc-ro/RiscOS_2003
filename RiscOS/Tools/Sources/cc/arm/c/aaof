/*
 * C compiler file aaof.c, version 18d
 * Copyright (C) CodeMist Ltd., 1988
 *
 * Copyright (C) Acorn Computers Ltd., 1988
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifdef __STDC__
#include <string.h>
#else
#define SEEK_SET  0
#include <strings.h>
#include <stddef.h>
#endif

#include "globals.h"
#include "mcdep.h"
#include "mcdpriv.h"
#include "errors.h"
#include "xrefs.h"
#include "store.h"
#include "codebuf.h"
#include "version.h"
#include "builtin.h"             /* for codesegment... */
#include "bind.h"                /* for sym_insert_id() */
#include "errors.h"
#include "chunkfmt.h"
#include "aof.h"
#include "cg.h"                  /* has_main */
#include "ops.h"

#ifdef PUT_FILE_NAME_IN_AREA_NAME
#  include "fname.h"
#  include "compiler.h"
#endif

static int32 obj_fwrite_cnt;

static bool byte_reversing = 0;
    /* byte_reversing == (host_lsbytefirst != target_lsbytefirst).        */
    /* (But faster to test one static per word than 2 externs per word).  */

static void obj_fwrite(VoidStar buff, int32 n, int32 m, FILE *f)
{   if (debugging(DEBUG_OBJ))
    {   int32 i;
        fprintf(f, "%.6lx:", (long)obj_fwrite_cnt);
        obj_fwrite_cnt += n*m;
        for (i=0; i<n*m; i++)
          fprintf(f, " %.2x", ((unsigned char *)buff)[i]);
        fprintf(f, "\n");
    }
    else if (n == 4 && byte_reversing)
    {   /* word by word output */
        unsigned32 v, t, *p, w;
        for (p = (unsigned32 *)buff;  m > 0;  --m, ++p)
        {   v = *p;
        /* Amazingly, this generates better code on an ARM than the more  */
        /* obvious and transparent way to reverse the bytes. A future cse */
        /* may turn the simulations of ROR into ROR, giving optimal code. */
        /* t = v^(v ROR 16); t &= ~0xff0000; v = v ROR 8; v = v^(t >> 8). */
            t = v ^ ((v << 16) | (v >> 16));               /* ...v ROR 16 */
            t &= ~0xff0000;
            v = (v << 24) | (v >> 8);                      /* v = v ROR 8 */
            w = v ^ (t >> 8);
            fwrite(&w, 4, 1, f);
        }
    }
    else
        fwrite(buff, (size_t)n, (size_t)m, f);
}

FILE *objstream;

#ifdef TARGET_HAS_DEBUGGER
void obj_writedebug(VoidStar p, int32 n)
/* for armdbg.c */
{   if (n & DBG_INTFLAG)
        obj_fwrite(p,4,n & ~DBG_INTFLAG,objstream);
    else
        obj_fwrite(p,1,n,objstream);
}
#endif

/* AOF output routines:  Note that much of the nastiness here
 * is due to ACORN's AOF file spec which requires AOF files to
 * output areas contiguously followed by their relocation directives.
 * For a better alternative see the IBM 360 object file format in
 * which they may be mixed at a big saving in store in each compiler
 * and only marginal cost to the linker.
 */

#define OBJ_DUMMYSYM   xr_objflg
#define OBJ_REPLACEBYAREA xr_objflg4
#define OBJ_DELETED    xr_objflg5
#define OBJ_MAXCHUNKS  8
#define OBJ_NUMCHUNKS  5

/* imports: codebase, dataloc, bss_size */
static int32 constdatabase;
static int32 ncommonareas, ncodeareas, nareas, codeareasize;
static int32 ndatarelocs, ndbgrelocs, nadconrelocs;
static int32 obj_stringpos, obj_symcount, aof_hdr_offset;
Symstr *data_sym, *bss_sym, *debug_sym, *adcon_sym;

ExtRef *obj_symlist;
CodeXref *codexrefs;
DataXref *dbgxrefs;

#define area_sv_(area_name)   (*(Symstr **)&(area_name))
#define area_next_(h)         (*(aof_area **)&((h)->area_base))

static aof_area _areahdr_;
static aof_area *codeareap;
static aof_area *codeareaq;

static void obj_end_codearea(void);
static void obj_start_codearea(void);

static bool hadcode;

void obj_codewrite(Symstr *name)
/* see show_code() - called after each routine or string lit is compiled. */
{
    if (codep == 0)                               /* really beware reinit */
    {   if (hadcode) {
        /* avoid generating a C$$codeseg area for the first function */
            obj_end_codearea();
            obj_start_codearea();
        } else
            obj_symref(bindsym_(codesegment), xr_dataincode, 0);
        return;
    }
    hadcode = YES;
    IGNORE(name);
    if (byte_reversing)
    {   int32 i = 0, n = codep, w;
        while (i < n)
        {   w = totargetsex(code_inst_(i), code_flag_(i));
            obj_fwrite(&w, 4, 1, objstream);
            i += 4;
        }
    }
    else
    {   int32 i = 0;
        while ((codep>>2) - CODEVECSEGSIZE*i > CODEVECSEGSIZE)
            obj_fwrite(code_instvec_(i), 4, CODEVECSEGSIZE, objstream), i++;
        obj_fwrite(code_instvec_(i), 4, (codep>>2)-CODEVECSEGSIZE*i, objstream);
    }
    if (ferror(objstream)) cc_fatalerr(obj_fatalerr_io_object);
}

static CommonDef dataarea;
CommonDef *commondefs;
static CommonDef *curcommon;

static void setcurcommon(CommonDef *com)
{
    curcommon->data = data;
    data = com->data;
    curcommon = com;
}

static CommonDef *findcommondef(int32 i)
{
    CommonDef *p = commondefs;
    int32 n;
    for (n = i; --n > 0; p = p->next)
        if (p == NULL) syserr(syserr_commondef, (long)i);
    return p;
}

void obj_common_start(Symstr *name)
{
    CommonDef *p; CommonDef **q = &commondefs;
    int i;
    for (p = commondefs, i = 1; p != NULL; q = &p->next, p = p->next, i++)
        if (p->name == name)
        {    cc_err(obj_err_common, name);
             break;
        }
    if (p == NULL)
    {   p = (CommonDef *) GlobAlloc(SU_Data, sizeof(CommonDef));
        p->next = NULL;
        p->data.head = p->data.tail = NULL; p->data.size = 0;
        p->name = name; p->index = i;
        setcurcommon(p);
        *q = p;
        obj_symref(name, xr_data+xr_defext+xr_cblock, 0);
    } else
        setcurcommon(p);
}

void obj_common_end(void)
{
    if (curcommon->refsize != 0 && data.size < curcommon->refsize)
        cc_err(obj_err_common1, curcommon->name);
    setcurcommon(&dataarea);
}

/* the remaining fns are intended to be internal only */

static int32 obj_checksym(Symstr *s)
{   ExtRef *x = symext_(s);
    if (x != NULL) {
      if (x->extflags & OBJ_DUMMYSYM) return x->extoffset;
      if (!(x->extflags & OBJ_REPLACEBYAREA)) return REL_A + x->extindex;
      s = x->codesym;
      x = symext_(s);
      if (x != NULL) return x->extindex-1;
    }
    syserr(syserr_obj_checksym, s);
    return 0;
}

static void obj_outsymtab(void)
{   ExtRef *x;
    int32 stringpos = 4;
    obj_symlist = (ExtRef *)dreverse((List *)obj_symlist);
                  /* oldest = smallest numbered first */
    for (x = obj_symlist; x != NULL; x = x->extcdr)
    {   Symstr *s = x->extsym;
        if (x->extflags & OBJ_DUMMYSYM) x->extoffset = stringpos;
        if (!(x->extflags & OBJ_DELETED))
            stringpos += (int32) strlen(symname_(s)) + 1;
    }
    stringpos = 4;
    for (x = obj_symlist; x != NULL; x = x->extcdr)
    {   Symstr *s = x->extsym;
        int32 flags = x->extflags;
        if (debugging(DEBUG_OBJ))
            cc_msg("sym$r%lx ", s, (long)flags);
        if (!(flags & (OBJ_DUMMYSYM+OBJ_DELETED)))
        { aof_symbol sym;
          int32 at = flags & xr_defloc ? SYM_LOCALDEFAT :
                     flags & xr_defext ? SYM_GLOBALDEFAT :
                     flags & xr_weak   ? SYM_WEAKAT+SYM_REFAT :
                                         SYM_REFAT;
          sym.sym_name = stringpos;
          /* revision soon to set data if (code & dataincode) ? */
          if ((flags & xr_code) && (flags & xr_dataincode)) at |= SYM_DATAAT;
          if (flags & aof_fpreg) at |= SYM_FPREGAT;
          if (!(flags & aof_usessb) && (flags & aof_leaf)) at |= SYM_LEAFAT;
          sym.sym_value = x->extoffset;
              /* always zero unless xr_defloc+xr_defext */
          if (xr_flagtoidx_(flags) != 0)
          {   CommonDef *p = findcommondef(xr_flagtoidx_(flags));
              if (flags & xr_cblock) p->stringpos = stringpos;
              sym.sym_areaname = p->stringpos;
          }
          /* The next line knows there are no symbols in the dbg segment */
          else if (flags & (xr_defloc+xr_defext))
          {   Symstr *area;
              if (flags & xr_code)
                  area = x->codesym;
              else if (flags & xr_data)
                  area = data_sym;
              else if (flags & xr_constdata)
                  area = area_sv_(codeareaq->area_name),
                  sym.sym_value += constdatabase;
              else if (flags & xr_bss)
                  area = bss_sym;
              else
                  area = adcon_sym;
              sym.sym_areaname = obj_checksym(area);

          } else if (x->extoffset != 0)
          {   /* common block */
              at = SYM_LOCALDEFAT;
              sym.sym_value = 0;             /* offset MUST be 0...         */
              sym.sym_areaname = stringpos;  /* relative to the common AREA */
              x->codesym = (Symstr *)stringpos;
          }
          else
              sym.sym_areaname = 0;
          sym.sym_AT = at;
          obj_fwrite(&sym, 4, sizeof(sym)/4, objstream);
        }
        if (!(x->extflags & OBJ_DELETED))
            stringpos += (int32) strlen(symname_(s)) + 1;
    }
    obj_stringpos = stringpos;
    obj_fwrite(&obj_stringpos, 4, 1, objstream);
    for (x = obj_symlist; x != NULL; x = x->extcdr)
    {   Symstr *s = x->extsym;
        if (!(x->extflags & OBJ_DELETED))
            obj_fwrite(symname_(s), 1, (int32)strlen(symname_(s))+1, objstream);
    }
    while (stringpos & 3) {putc(0, objstream);  ++stringpos;}
    obj_stringpos = stringpos;
}

static void obj_outcommonheaders(bool output)
{
    if (ncommonareas) {
        ExtRef *x;
        aof_area a;
        CommonDef *p;

        /* got at least one so worth counting properly... */
        ncommonareas = 0;
        a.area_nrelocs = 0;
        a.area_base = 0;
        for (p = commondefs; p != NULL; p = p->next) {
            ++ncommonareas;
            if (output == NO) continue;
            a.area_name = p->stringpos;
            a.area_attributes = 2 + AOF_COMDEFAT;
            a.area_size = (p->data.size + 3) & ~3; /* must be a multiple of 4 */
            obj_fwrite(&a, 4, sizeof(a)/4, objstream);
        }
        for (x = obj_symlist; x != NULL; x = x->extcdr)
        {   int32 flags = x->extflags;
            int32 len = x->extoffset;
            if (!(flags & (xr_defloc + xr_defext + xr_code +
                           OBJ_DELETED + OBJ_DUMMYSYM + OBJ_REPLACEBYAREA)) &&
                len > 0) {
                  /* common reference ... */
                ++ncommonareas;
                if (output == NO) continue;
                a.area_name = (int32)x->codesym;
                a.area_attributes = 2 + AOF_COMREFAT + AOF_0INITAT;
                a.area_size = (len + 3) & ~3;
                    /* must be a multiple of 4 */
                obj_fwrite(&a, 4, sizeof(a)/4, objstream);
            }
        }
    }
}

typedef struct RelocationPatch RelocationPatch;

struct RelocationPatch {
    RelocationPatch *cdr;
    long fpos;
    Symstr *sym;
    int32 flags;
};

static RelocationPatch *relocationpatches;

static int32 obj_coderelocation(void)
{   CodeXref *x;
    int32 n = 0;
    aof_reloc r;
    for (x = codexrefs; x!=NULL; x = x->codexrcdr)
    {   Symstr *s = x->codexrsym;
        int32 ix = obj_checksym(s);
        RelocationPatch *p = NULL;
        if (ix < 0) {
          p = (RelocationPatch *)GlobAlloc(SU_Xref, sizeof(RelocationPatch));
          ix = 0;
        }
        r.rel_offset = x->codexroff & 0xffffff;
        r.rel_flags = REL_TYPE2 + REL_LONG + ix;
        switch (x->codexroff & 0xff000000)
        {
case X_DataAddr1:   /* PC rel ref to external: sequence to be relocated = 2 */
            r.rel_flags |= REL_R | REL_INSTR | (2<<29);
            if (debugging(DEBUG_OBJ)) cc_msg("pcreloc2$r ", s);
            break;
case X_PCreloc:     /* PC rel ref to external */
            r.rel_flags |= REL_R | REL_INSTR;
            if (debugging(DEBUG_OBJ)) cc_msg("pcreloc$r ", s);
            break;
case X_TailCall:     /* as PCreloc, but used in tailcall */
            r.rel_flags |= REL_R | REL_B | REL_INSTR;
            if (debugging(DEBUG_OBJ)) cc_msg("tailcall$r ", s);
            break;
case X_DataVal:
            r.rel_flags |= REL_B | REL_INSTR;
            if (debugging(DEBUG_OBJ)) cc_msg("basereloc$r ", s);
            break;
case X_backaddrlit: /* abs ref to external */
            if (debugging(DEBUG_OBJ)) cc_msg("addreloc$r ", s);
            break;
default:
            syserr(syserr_obj_codereloc, (long)x->codexroff);
            continue;
        }
        if (p != NULL) {
          obj_fwrite(&r.rel_offset, 4, 1, objstream);
          cdr_(p) = relocationpatches;
          p->fpos = ftell(objstream);
          p->sym = s;
          p->flags = r.rel_flags;
          relocationpatches = p;
          obj_fwrite(&r.rel_flags, 4, 1, objstream);
        } else
          obj_fwrite(&r, 4, sizeof(r)/4, objstream);
        n++;
    }
    codexrefs = 0;
    return n;
}

/* obj_datarelocation() is now also used for debug table relocation. */
static int32 obj_datarelocation(DataXref *x, int32 offset)
{   int32 n = 0;
    aof_reloc r;
    for (; x!=NULL; x = x->dataxrcdr)
    {   Symstr *s = x->dataxrsym;
        /* all data relocs are X_backaddrlit (abs ref) so far */
        r.rel_offset = x->dataxroff+offset;
        r.rel_flags = REL_TYPE2 + REL_LONG + obj_checksym(s);
        obj_fwrite(&r, 4, sizeof(r)/4, objstream);
        if (debugging(DEBUG_OBJ)) cc_msg("data reloc $r ", s);
        n++;
    }
    return n;
}

static void obj_writedata(DataInit *p)
/* follows gendc exactly! */
{ for (; p != NULL; p = p->datacdr)
  { int32 rpt = p->rpt, sort = p->sort, len = p->len, val = p->val;
    switch (sort)
    {   case LIT_LABEL:   /* name only present for c.armasm */
            break;
        default:  syserr(syserr_obj_gendata, (long)sort);
        case LIT_BBBB:    /* the next 4 are the same as LIT_NUMBER except   */
        case LIT_HH:      /* for (as yet unsupported) cross compilation.    */
        case LIT_BBH:
        case LIT_HBB:
            if (byte_reversing) val = totargetsex(val, (int)sort);
        case LIT_NUMBER:
            if (len != 4) syserr(syserr_obj_datalen, (long)len);
            /* drop through */
        case LIT_ADCON:              /* (possibly external) name + offset */
            /* beware: sex dependent... */
            while (rpt-- != 0) obj_fwrite(&val, 4, 1, objstream);
            break;
        case LIT_FPNUM:
          { FloatCon *fc = (FloatCon *)val;
            /* do we need 'len' when the length is in fc->floatlen?? */
            if (len != 4 && len != 8)
                syserr(syserr_obj_data1, (long)rpt, (long)len, fc->floatstr);
            /* The following strage code ensures that doubles are correctly */
            /* sex-reversed if required to be - obj_fwrite() only reverses  */
            /* items of length 4... This is a trap for the unwary.          */
            while (rpt-- != 0)
            {   obj_fwrite(&(fc->floatbin.irep[0]), 4, 1, objstream);
                if (len == 4) continue;
                obj_fwrite(&(fc->floatbin.irep[1]), 4, 1, objstream);
            }
          }
          break;
    }
  }
}

static int32 obj_outcommonareas(void)
{
    CommonDef *p;
    int32 size = 0;
    for (p = commondefs; p != NULL; p = p->next) {
        obj_writedata(p->data.head);
        size += p->data.size;
    }
    return size;
}

/* exported functions... */

int32 obj_symref(Symstr *s, int flags, int32 loc)
{   ExtRef *x;
    if ((x = symext_(s)) == NULL) /* saves a quadratic loop */
    {   if (obj_symcount >= 0x10000)
            cc_fatalerr(armobj_fatalerr_toomany);
        x = (ExtRef*) GlobAlloc(SU_Xsym, sizeof(ExtRef));
        x->extcdr = obj_symlist,
        x->extsym = s,
        x->extflags = 0,
        x->extoffset = 0,
        x->codesym = 0;
        if (flags & OBJ_DUMMYSYM)
            x->extindex = 0;
        else if (s == bindsym_(datasegment))
            flags |= OBJ_REPLACEBYAREA | OBJ_DELETED,
            x->extindex = 0,
            x->codesym = data_sym;
        else if (s == bindsym_(bsssegment))
            flags |= OBJ_REPLACEBYAREA | OBJ_DELETED,
            x->extindex = 0,
            x->codesym = bss_sym;
        else if (s == bindsym_(codesegment))
            flags |= OBJ_REPLACEBYAREA | OBJ_DELETED,
            x->extindex = 0;
            /* codesym filled in later */
        else if (s == adconpool_lab)
            flags |= OBJ_REPLACEBYAREA | OBJ_DELETED,
            x->extindex = 0,
            x->codesym = adcon_sym;
        else
            x->extindex = obj_symcount++;
        obj_symlist = symext_(s) = x;
    }
/* The next few lines cope with further ramifications of the abolition of */
/* xr_refcode/refdata in favour of xr_code/data without xr_defloc/defext  */
/* qualification.  This reduces the number of bits, but needs more        */
/* checking in that a symbol defined as data, and then called via         */
/* casting to a code pointer may acquire defloc+data and then get         */
/* xr_code or'ed in.  Suffice it to say this causes confusion.            */
/* AM wonders if gen.c ought to be more careful instead.                  */
    if (flags & (xr_defloc+xr_defext)) {
        if (x->extflags & (xr_defloc+xr_defext)) {
        /* can only legitimately happen for a tentatively defined object  */
        /* in which case both flags and x->extflags should have type      */
        /* xr_data.  Perhaps I should check ?                             */
        } else
            x->extflags &= ~(xr_code+xr_data);
    } else if (x->extflags & (xr_defloc+xr_defext))
        flags &= ~(xr_code+xr_data);
/* end of fix.                                                            */
    x->extflags |= flags;   /* do some checking here */
    if (flags & xr_defloc+xr_defext) {     /* private or public data/code */
        if (flags & xr_code)
            x->codesym = area_sv_(codeareaq->area_name);
        else if (curcommon->index > 0) {
            x->extflags |= (xr_idxtoflag_(curcommon->index));
            if ((flags & xr_cblock) && x->extoffset == 0)
                ++ncommonareas;
            else
                curcommon->refsize = x->extoffset;
        }
        x->extoffset = loc;
    } else if ((loc > 0) && !(flags & xr_code)) { /* common data */
        /*
         * NOTE: 'loc' is the size of the referenced common area.
         */
        if (x->extflags & xr_cblock) {
            CommonDef *p = findcommondef(xr_flagtoidx_((int32)x->extflags));
            if (p->data.size < loc) cc_err(obj_err_common2, s);
        } else {
            int32 oldsize = x->extoffset;
            if (oldsize ==0) ++ncommonareas; /* first occurrence */
            if (loc > oldsize) x->extoffset = loc;
        }
    }
    /* The next line returns the offset of a function in the codesegment */
    /* if it has been previously defined -- this saves store on the arm  */
    /* and allows short branches on other machines.  Otherwise it        */
    /* returns -1 for undefined objects or data objects.                 */
    return ((x->extflags & (xr_defloc+xr_defext)) && (x->extflags & xr_code) &&
            (x->codesym == area_sv_(codeareaq->area_name)) ? x->extoffset : -1);
}

static void obj_end_codearea()
{
    aof_area *h = codeareaq;
    if (debugging(DEBUG_OBJ)) cc_msg("coderelocation\n");
    codeareasize += (h->area_size = codebase);
    codeareasize += (h->area_nrelocs =
                     obj_coderelocation()) * sizeof(aof_reloc);
    ++ncodeareas;
}

static void obj_start_codearea()
{
    aof_area *h = codeareaq;
    Symstr *sv;
#ifdef PUT_FILE_NAME_IN_AREA_NAME
    char name[256];
#else
    char name[32];
#endif
    h = (aof_area *) GlobAlloc(SU_Other, sizeof(aof_area));
    area_next_(codeareaq) = h;
    codeareaq = h;
    memset(h, 0, sizeof(aof_area));
    strcpy(name+1, symname_(bindsym_(codesegment)));
    name[0] = 'C'; name[1] = '$';
    area_sv_(h->area_name) = sv = sym_insert_id(name);
    if (var_cc_private_flags & 0x40000000)
        h->area_attributes |= AOF_COMDEFAT;
    obj_symref(sv, OBJ_DUMMYSYM, 0L);
}

#ifdef PUT_FILE_NAME_IN_AREA_NAME
static void putfilenameinareaname(char *buffer, char *basename, char *sourcefile)
{
    UnparsedName un;
    int baselen = strlen(basename); /* remember how long the basename is */
    fname_parse(sourcefile, FNAME_INCLUDE_SUFFIXES, &un);
    memcpy(buffer, basename, baselen); /* put it in the buffer */
    memcpy(&buffer[baselen], un.root, un.rlen);
    buffer[baselen+un.rlen] = 0;
}
#endif

void obj_init(void)
{
    ncommonareas = ncodeareas = nareas = 0;
    codeareasize = 0, ndatarelocs = 0, ndbgrelocs = 0, nadconrelocs = 0;
    obj_stringpos = 0, obj_symcount = 0, aof_hdr_offset = 0;
    obj_symlist = NULL;
    codexrefs = NULL, dbgxrefs = NULL;
    commondefs = NULL; curcommon = &dataarea;
    dataarea.index = -1;
    codeareap = codeareaq = &_areahdr_;
    relocationpatches = NULL;
#ifdef PUT_FILE_NAME_IN_AREA_NAME
    {
    /* BJS: Find the leaf name */
        char name[256];
        putfilenameinareaname(name, "C$$c_", sourcefile);
        obj_symref(area_sv_(codeareaq->area_name) = sym_insert_id(name),
                   OBJ_DUMMYSYM, 0L);
        putfilenameinareaname(name, "C$$data_", sourcefile);
        obj_symref(data_sym = sym_insert_id(name), OBJ_DUMMYSYM, 0L);
        putfilenameinareaname(name, "C$$zidata_", sourcefile);
        obj_symref(bss_sym = sym_insert_id(name), OBJ_DUMMYSYM, 0L);
    }
#else
        obj_symref(area_sv_(codeareaq->area_name) = sym_insert_id("C$$code"),
                   OBJ_DUMMYSYM, 0L);
        obj_symref(data_sym = sym_insert_id("C$$data"), OBJ_DUMMYSYM, 0L);
        obj_symref(bss_sym = sym_insert_id("C$$zidata"), OBJ_DUMMYSYM, 0L);
#endif
    obj_symref(debug_sym= sym_insert_id("C$$debug"),OBJ_DUMMYSYM, 0L);
    obj_symref(adcon_sym= sym_insert_id("sb$$adcons"),OBJ_DUMMYSYM, 0L);
    adconpool_lab = sym_insert_id("x$adcons");
    byte_reversing = (target_lsbytefirst != host_lsbytefirst);
    hadcode = NO;
}

static void obj_cf_header(int32 areachunk_size)
{
    char space[sizeof(cf_header) + (OBJ_MAXCHUNKS-1)*sizeof(cf_entry)];
    cf_header *cfh = (cf_header *)space;
    cf_entry *cfe = cfh->cf_chunks;
    int32 i, offset, size;
    char *chunknames = "OBJ_HEADOBJ_AREAOBJ_IDFNOBJ_SYMTOBJ_STRT";

    memset(space, 0, sizeof(space));
    cfh->cf_magic     = CF_MAGIC;
    cfh->cf_maxchunks = OBJ_MAXCHUNKS;
    cfh->cf_numchunks = OBJ_NUMCHUNKS;

    for (i = 0; i < OBJ_NUMCHUNKS; i++)
    {   memcpy(cfe[i].cfe_key, chunknames + i*8, 8);
        if (byte_reversing)
        {   int32 *p = (int32 *)(cfe[i].cfe_key);
            p[0] = totargetsex(p[0], LIT_BBBB);
            p[1] = totargetsex(p[1], LIT_BBBB);
        }
    }

    cfe[0].cfe_offset = aof_hdr_offset;
    cfe[0].cfe_size = (nareas-1) * sizeof(aof_area) +
                                 sizeof(aof_header);

    offset = sizeof(space);
    cfe[1].cfe_offset = offset;
    cfe[1].cfe_size   = areachunk_size;

    offset += areachunk_size;
    size = CC_BANNERlen;
    cfe[2].cfe_offset = offset;
    cfe[2].cfe_size   = size;

    offset += size;
    size = obj_symcount * sizeof(aof_symbol);
    cfe[3].cfe_offset = offset;
    cfe[3].cfe_size   = size;

    offset += size;
    cfe[4].cfe_offset = offset;
    cfe[4].cfe_size   = obj_stringpos;

    obj_fwrite_cnt = 0;
    obj_fwrite(space, 4, sizeof(space)/4, objstream);
}

void obj_header(void)
{
    obj_cf_header(0);
}

static int SetExtIndex(int32 size, Symstr *s, int i) {
    ExtRef *x = symext_(s);
    if (x == NULL)
        syserr(syserr_obj_checksym, s);
    else if (size != 0)
        x->extindex = i++;
    else
        x->extflags |= OBJ_DELETED;
    return i;
}

static void number_areas() {
    aof_area *a; int i = 1;
    for (a = codeareap;  a != NULL;  a = area_next_(a))
        i = SetExtIndex(1, area_sv_(a->area_name), i);

    i = SetExtIndex(data.size, data_sym, i);
    i = SetExtIndex(bss_size, bss_sym, i);
    i = SetExtIndex(adconpool.size, adcon_sym, i);
    SetExtIndex(dbg_tablesize(), debug_sym, i);
}

static void obj_aof_header(void)
{
    aof_header h;
    aof_area *a, *next, d;

    obj_outcommonheaders(NO);        /* to count ncommonareas reliably */

    nareas = ncodeareas + ncommonareas;
    if (data.size != 0) ++nareas;
    if (bss_size != 0) ++nareas;
    if (dbg_tablesize() != 0) ++nareas;
    if (adconpool.size != 0) ++nareas;

    h.aof_type        = AOF_RELOC;          /* relocatable object file */
    h.aof_vsn         = AOF_VERSION;                        /* version */
    h.aof_nareas      = nareas;
    h.aof_nsyms       = obj_symcount;
    h.aof_entryarea   = 0;
    h.aof_entryoffset = 0;                     /* start address offset */
    obj_fwrite(&h, 4, (sizeof(h)-sizeof(aof_area))/4, objstream);

/* now the code area decls */
    {   int32 attributes = 2 + AOF_CODEAT + AOF_RONLYAT;
        if (pcs_flags & PCS_CALLCHANGESPSR) attributes |= AOF_32bitAT;
        if (pcs_flags & PCS_REENTRANT) attributes |= AOF_REENTAT | AOF_PICAT;
        if (pcs_flags & PCS_FPE3) attributes |= AOF_FP3AT;
        if (pcs_flags & PCS_NOSTACKCHECK) attributes |= AOF_NOSWSTKCK;
        for (a = codeareap;  a != NULL;  a = next)
        {   next = area_next_(a);
            a->area_base = 0;
            a->area_name = obj_checksym(area_sv_(a->area_name));
            a->area_attributes |= attributes;
            a->area_size = a->area_size;
            obj_fwrite(a, 4, sizeof(aof_area)/4, objstream);
        }
    }

/* ... and the data */
    if (data.size != 0)
    {   memset(&d, 0, sizeof(d));
        d.area_name    = obj_checksym(data_sym);
        d.area_attributes = 2;      /* 4-align */
        d.area_size    = data.size;
        d.area_nrelocs = ndatarelocs;
        obj_fwrite(&d, 4, sizeof(aof_area)/4, objstream);
    }

/* ... and the data */
    if (bss_size != 0)
    {   memset(&d, 0, sizeof(d));
        d.area_name    = obj_checksym(bss_sym);
        d.area_attributes = 2 + AOF_0INITAT;
        d.area_size    = bss_size;
        /*d.area_nrelocs = 0;*/
        obj_fwrite(&d, 4, sizeof(aof_area)/4, objstream);
    }

/* ... and the adcon table (if apcs_flags & REENTRANT) */
    if (adconpool.size != 0)
    {   memset(&d, 0, sizeof(d));
        d.area_name    = obj_checksym(adcon_sym);
        d.area_attributes = 2 + AOF_RONLYAT+AOF_BASEDAT+(R_SB<<AOF_BASESHIFT);
        d.area_size    = adconpool.size;
        d.area_nrelocs = nadconrelocs;
        obj_fwrite(&d, 4, sizeof(aof_area)/4, objstream);
    }

/* ... and the debug tables */
    memset(&d, 0, sizeof(d));
    if ((d.area_size = dbg_tablesize()) != 0)
    {   d.area_name    = obj_checksym(debug_sym);
        d.area_attributes = 2 + AOF_RONLYAT + AOF_DEBUGAT;
        d.area_nrelocs = ndbgrelocs;
        obj_fwrite(&d, 4, sizeof(aof_area)/4, objstream);
    }

    obj_outcommonheaders(YES);
}

void obj_trailer(void)
{
    int32 area_size;
    if (has_main) obj_symref(libentrypoint, xr_code, 0);
    /* just a reference to __main is enough to cause the library module    */
    /* containing it to be loaded.                                         */
    number_areas();
    if (relocationpatches != NULL) {
        long fpos = ftell(objstream);
        RelocationPatch *p;
        for (p = relocationpatches; p != NULL; p = cdr_(p)) {
            fseek(objstream, p->fpos, SEEK_SET);
            p->flags |= obj_checksym(p->sym);
            obj_fwrite(&p->flags, 4, 1, objstream);
        }
        fseek(objstream, fpos, SEEK_SET);
    }
    {   int32 n;
#ifdef CONST_DATA_IN_CODE
        constdatabase = codebase;
        if (constdata.size != 0) {
            obj_symref(bindsym_(constdatasegment), xr_code+xr_defloc, constdatabase);
            obj_writedata(constdata.head);
            codebase += constdata.size;
        }
#endif
        obj_end_codearea();
#ifdef CONST_DATA_IN_CODE
        n = obj_datarelocation(constdata.xrefs, constdatabase);
        codeareaq->area_nrelocs += n;
        codeareasize += n * sizeof(aof_reloc);
#endif
    }
    area_size = codeareasize;
    if (debugging(DEBUG_OBJ)) cc_msg("writedata\n");
    obj_writedata(data.head);
    if (debugging(DEBUG_OBJ)) cc_msg("datarelocation\n");
    ndatarelocs = obj_datarelocation(data.xrefs, 0L);
    area_size += data.size + ndatarelocs*sizeof(aof_reloc);
    if (adconpool.size != 0) {
        if (debugging(DEBUG_OBJ)) cc_msg("writeadcons\n");
        adconpool_flush();
        if (debugging(DEBUG_OBJ)) cc_msg("adconrelocation\n");
        nadconrelocs = obj_datarelocation(adconpool.xrefs, 0L);
        area_size += adconpool.size + nadconrelocs*sizeof(aof_reloc);
    }
#ifdef TARGET_HAS_DEBUGGER
    if (debugging(DEBUG_OBJ)) cc_msg("writedebug\n");
    dbg_writedebug();
    if (debugging(DEBUG_OBJ)) cc_msg("debugrelocation\n");
    ndbgrelocs = obj_datarelocation(dbgxrefs, 0L);
    area_size += dbg_tablesize() + ndbgrelocs*sizeof(aof_reloc);
#endif
    area_size += obj_outcommonareas();
    if (debugging(DEBUG_OBJ)) cc_msg("symtab\n");
    obj_fwrite(CC_BANNER, 1, CC_BANNERlen, objstream);
    obj_outsymtab();
    aof_hdr_offset = ftell(objstream);
    obj_aof_header();
    if (debugging(DEBUG_OBJ)) cc_msg("rewind\n");
/* It is (unexpectedly) vital to use fseek here rather than rewind, since  */
/* rewind clears error flags. Note further that if there is a partially    */
/* full buffer just before the rewind & flushing that data causes an error */
/* (e.g. because there is no room on disc for it) this error seems to get  */
/* lost. This looks to me like a shambles in the October 1986 ANSI draft!  */
    fseek(objstream, 0L, SEEK_SET);   /* works for hex format too */
/* The next line represents a balance between neurotic overchecking and    */
/* the fact that it would be nice to detect I/O errors before the end of   */
/* compilation.                                                            */
    if (ferror(objstream)) cc_fatalerr(obj_fatalerr_io_object);
    if (debugging(DEBUG_OBJ)) cc_msg("rewriting header\n");
    obj_cf_header(area_size);/* re-write header at top of file */
    /* file now closed in main() where opened */
}

/* end of armobj.c */

DataDesc adconpool;

Symstr *adconpool_lab;

int adconpool_find(int32 w, int32 flavour, Symstr *sym)
{   int i;
    DataInit *p;

    if (adconpool.size == 0)
        obj_symref(adconpool_lab, xr_defloc+xr_adcon, 0);
    else for (i = 0, p = adconpool.head; p != 0; p = p->datacdr) {
        if (p->sort == flavour && p->val == w && (Symstr *)p->len == sym)
              return i; /* allow for label as first item */
        if (p->sort != LIT_LABEL) i += 4;
    }

    {   int32 offset = adconpool.size;
        adconpool.xrefs = (DataXref *)global_list3(SU_Xref, adconpool.xrefs, offset, sym);
        p = (DataInit *)global_list5(SU_Other, NULL, 1, flavour, sym, w);

        adconpool.tail->datacdr = p;
        adconpool.tail = p;
        adconpool.size += 4;
        return (int)offset;
    }
}

void adconpool_flush(void)
{
    obj_writedata(adconpool.head);
}

void adconpool_init(void)
{   adconpool.head = adconpool.tail = (DataInit *)global_list3(SU_Other, NULL, adconpool_lab, LIT_LABEL);
    adconpool.size = 0;
}
