/*
 * arm/asm.c: ARM assembly language output,  Codemist version 21
 * Copyright (C) Codemist Ltd., 1987-1993
 * Copyright (C) Advanced RISC Machines Limited., 1990-1993
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/* Assembler output is routed to asmstream, annotated if FEATURE_ANNOTATE.  */
/* See c.armobj for more details on datastructures.                         */

/* AM: it would have been, and still is a lot more comfortable to fix the   */
/* assembler bug in where it allows import/export instead of the groan-     */
/* worthy code in maybe_export etc.                                         */

/* exports: asmstream, display_assembly_code, asm_header, asm_trailer.      */

#ifdef __STDC__
#  include <string.h>
#else
#  include <strings.h>
#endif
#include <ctype.h>

#include "globals.h"
#include "mcdep.h"
#include "mcdpriv.h"
#include "xrefs.h"
#include "store.h"
#include "codebuf.h"
#include "ops.h"
#include "version.h"
#include "builtin.h"                   /* for codesegment... */
#include "errors.h"
#include "disass.h"

FILE *asmstream;

#ifndef NO_ASSEMBLER_OUTPUT

#define annotations (feature & FEATURE_ANNOTATE)

static char const spaces_18[20] = "                  \0";  /* 18 blanks and 2 NULs */
static char *regnames[16] = {"a1","a2","a3","a4","v1","v2","v3","v4",
                             "v5","v6",0,0,0,0,"lr","pc"};
                                         /* others filled in when pcs is set */

static char * const fregnames[8] = {"f0","f1","f2","f3","f4","f5","f6","f7"};

static void newline()
{
    fputc('\n', asmstream);
}

static void indent_18_if_annotating()
{
    if (annotations) fputs(spaces_18, asmstream);
}

static void padtocol8(unsigned32 n)
{
    if (n > 8) n = 8;
    fputs(spaces_18 + 18 - 8 + n, asmstream);
}

static void indent8()
{
    padtocol8(0);
}

static void pr_chars(int32 w)
/* Works on both sexes of host machine. */
/* Assumes ASCII target machine.        */
{   int i, c;
    FILE *as = asmstream;

    fputc('\'', as);
    for (i=0; i<sizeof(int32); i++)
    {   c = ((unsigned char *)&w)[i];
        if (c < ' ' || c >= 127)
        {    if (c >= 7 && c <= 13)
             {   c = "abtnvfr"[c-7];
                 goto escape;
             }
             else
             {   fprintf(as, "\\%o", c);
                 continue;
             }
        }
        else if (c == '\\' || c == '\'' || c == '\"')
escape:     fputc('\\', as);
        fputc(c, as);
    }
    fputc('\'', as);
}

static void spr_asmname(char *buf, const Symstr *sym)
{   const char *s = symname_(sym);
    const char *s1 = s;
    char c;
    bool oddchars = NO;
    if (!isalpha(*s) && *s != '_')
        oddchars = YES;
    else
        while ((c = *s1++) != 0)
            if (!isalnum(c) && c != '_')
            {   oddchars=YES;
                break;
            }
    if (oddchars)
        sprintf(buf, "|%s|", s);
    else
        strcpy(buf, s);
}

static void pr_asmname(const Symstr *sym) {
    char buf[256];
    spr_asmname(buf, sym);
    fputs(buf, asmstream);
}

static Symstr *find_extsym(int32 p)
{   CodeXref  *x;
    for (x = codexrefs; x != NULL; x = x->codexrcdr) {
        if (p == (x->codexroff & 0x00ffffffL)) return(x->codexrsym);
    }
    syserr(syserr_find_extsym);
    return(NULL);
}

static void printlabelname(char *buf, const char *before, const char *after, int32 offset, const Symstr *sym)
{
/* For data references, ignore the function name: it will be wrong for backward
 * references to the literal pool of another function.  (Labels which are the
 * subject of data references have already been removed from asm_lablist).
 * For code refs, generate a label of the form L<address>.J<label>.<proc>.
 */
    LabList *p;
/*
 * in various places showcode(NULL) gets called - the following lines arrange
 * that the stuff printed here is nevertheless at least textual.
 */
    if (sym != NULL)
    {   for ( p = asm_lablist ; p != NULL ; p = p->labcdr) {
            LabelNumber *lab = p->labcar;
            if ((lab->u.defn & 0x00ffffff) == offset)
            {   sprintf(buf, "%s|L%06lx.J%ld.%s|%s",
                        before, offset+codebase, lab_name_(lab) & 0x7fffffff,
                        symname_(sym), after);
                return;
            }
        }
    }
    sprintf(buf, "%sL%06lx%s", before, offset+codebase, after);
}

static Symstr *procname;

typedef struct RelAddrRec {
    Symstr *sym;
    int32 count;
    int32 offset;
    char *buf;
} RelAddrRec;

static char *disass_adrl(RelAddrRec *r, char *buf, int32 offset) {
    int pos = (r->buf[3] == 'S' || r->buf[3] == ' ') ? 3 : 5;
    int c = r->buf[pos];
    do buf--; while (buf[-1] != ',');
    memcpy(r->buf, "ADR", 3);
    while (--r->count >= 0) r->buf[pos++] = 'L';
    r->buf[pos] = c;
    if (offset != 0) {
        sprintf(buf, "%ld+", offset);
        buf += strlen(buf);
    }
    spr_asmname(buf, r->sym);
    return buf;
}

static List *litlabels;

static int32 LiteralBefore(int32 target) {
    List *p;
    for (p = litlabels; p != NULL; p = cdr_(p))
        if (car_(p) <= target) return car_(p);
    return 0;
}

static char *disass_cb(dis_cb_type type, int32 offset, unsigned32 address, int w, void *cb_arg, char *buf) {
    RelAddrRec *r = (RelAddrRec *)cb_arg;
    IGNORE(w);
    *buf = 0;
    if (type == D_BORBL) {
        if (cb_arg == NULL)
            printlabelname(buf, "", "", address, procname);
        else
            spr_asmname(buf, r->sym);
    } else if (type == D_ADDPCREL) {
        if (r != NULL)
            buf = disass_adrl(r, buf, address + offset + r->offset);
        else
            printlabelname(buf, "#", "-.-8", address+offset, procname);
    } else if (type == D_SUBPCREL) {
        if (r != NULL)
            buf = disass_adrl(r, buf, address - offset - r->offset);
        else {
        /* Backward reference to a string may be to an address part way through
           a literal in a different function, for which therefore no label was
           generated.  (Hence the list litlabels).
         */
            int32 target = address - offset + codebase;
            int32 litaddr = LiteralBefore(target);
            if (litaddr == target)
                printlabelname(buf, "#.+8-", "", address - offset, procname);
            else {
                char b[8];
                sprintf(b, "+%ld)", target - litaddr);
                printlabelname(buf, "#.+8-(", b, litaddr - codebase, procname);
            }
        }
    } else if (type == D_LOADPCREL || type == D_STOREPCREL) {
        /* Backward references here can't currently be to an address for which
           no label was generated (loading as an integer the second word of a
           double constant or some non-initial word of a string are the
           possibilities, which literal pool management currently precludes).
           Still, we allow the possibility for safety.
         */
        int32 target = address + codebase;
        int32 litaddr = offset >= 0 ? target : LiteralBefore(target);
        if (litaddr == target)
            printlabelname(buf, "[pc, #", "-.-8]", address, procname);
        else {
            char b[8];
            sprintf(b, "+%ld)-.-8", target - litaddr);
            printlabelname(buf, "[pc, #(", b, litaddr - codebase, procname);
        }
    } else if (type == D_LOAD || type == D_STORE) {
        if (r != NULL) {
            sprintf(buf, "%ld+", offset);
            buf += strlen(buf);
            spr_asmname(buf, r->sym);
        }
    }
    return buf+strlen(buf);
}

typedef struct Import {
    struct Import *next;
    Symstr  *sym;
    int32   patch;
} Import;

static Import *asm_imported;

static char  *asm_needslabel; /* a bitmap, 1 bit per code word */

#define needslabel(widx) (((widx) & 0x80000000) ? 0 : (asm_needslabel[(widx) >> 3] &  (1 << ((widx)&7))))
#define setlabbit(widx)  (((widx) & 0x80000000) ? 0 : (asm_needslabel[(widx) >> 3] |= (1 << ((widx)&7))))

static void NoteLiteralLabel(int32 q) {
    if (needslabel(q / 4))
        litlabels = (List *)global_cons2(SU_Other, litlabels, q+codebase);
}

static void maybe_import(const Symstr *sym, bool atcol8)
{   Import  *p;
    ExtRef  *x = symext_(sym);

    if (x == NULL) syserr(syserr_obj_checksym, sym);

/* Unless external there is nothing to do here. */
    if (x->extflags & xr_defloc ||
        sym == bindsym_(constdatasegment))
        return;

/* Else put out an IMPORT the first time and possibly later patch.  Yuk.   */
    for (p = asm_imported; p != NULL; p = p->next) if (p->sym == sym) return;

    if ((x->extflags & (xr_defloc|xr_defext)) == 0 ||
        (x->extflags & xr_cblock)) {
        /*
         * Horribly, we remember where we are in the output stream
         * so that we can later change "IM" to "EX" if we discover
         * that the thing is declared locally.
         */
        asm_imported = p = (Import *)global_list3(SU_Other,
                                                  asm_imported, sym,0);
        if (!atcol8)
        {   indent8();
            indent_18_if_annotating();
        }
        p->patch = ftell(asmstream);
        if (!(x->extflags & xr_code) && x->extoffset != 0)
          /*
           * Common reference
           * NOTE: leave sufficient trailing ' 's to allow overwriting
           *       by "EXPORT" without overwriting the symbol name...
           */
            fputs("KEEP    ", asmstream);
        else
            fputs("IMPORT  ", asmstream);
        pr_asmname(x->extsym);
        if (x->extflags & xr_weak)
            fputs(", WEAK", asmstream);
        newline();
        if (atcol8)
        {   indent8();
            indent_18_if_annotating();
        }
    }
}

static void maybe_export(const Symstr *sym)
{   const char *s = symname_(sym);
    char   c;
    FILE   *as = asmstream;
    Import *p;
    ExtRef *x = symext_(sym);

    if (x == NULL) syserr(syserr_obj_checksym, sym);

/*@@@ AM does not see how the following can ever now happen as x$dataseg etc. */
/* are very local statics.  Is this if error recovery inserted gensyms?    */
    while ((c = *s++) != 0) { /* look for odd characters in x$dataseg etc */
        if (!(isalnum(c) || (c == '_'))) return;
    }

    for (p = asm_imported; p != NULL; p = p->next)
        if ((p->sym == sym) && (p->patch != 0)) { /* have IMported it! */
            int32 curpos = ftell(as);
/* Pray tell, how does this work if output is to terminal? Answer: badly.  */
            fseek(as, p->patch, 0);
            if (x->extflags & xr_defloc)
                fputc(';', as);
            else {
                fputs("EXPORT  ", as);
                if (x->extflags & xr_weak) {
                    pr_asmname(sym);
                    fputc(';', as);
                }
            }
            fseek(as, curpos, 0);
            return;
        }
    /* If static, don't export */
    if (x->extflags & xr_defloc) return;
    indent_18_if_annotating();
    indent8();
    fputs("EXPORT  ", as); pr_asmname(sym); newline();
}

static void killasmlabel(int32 wordoffset)
{
/* Ensure that jopcode labels are present only for instructions, not data items */
    LabList *p, *prev = NULL;
    int32 offset = wordoffset * 4L;
    for ( p = asm_lablist ; p != NULL ; prev = p, p = p->labcdr)
        if ((p->labcar->u.defn & 0x00ffffff) == offset) {
            p = (LabList *) discard2((VoidStar) p);
            if (prev == NULL)
                asm_lablist = p;
            else
                prev->labcdr = p;
            return;
        }
}

static int32 immediateval(int32 w) {
    int32 shift = (w & 0xf00)>>7, val = w & 0xff;
    return (val>>shift) | (val<<(32-shift));
}

static void asm_scancode(void)
{   int32 p;
    int bitmapsize;
    char  *x;

    bitmapsize = (int)((codep + 127) >> 5); /* > 1 bit per word of code */
    asm_needslabel = x = (char *)BindAlloc(bitmapsize);
    memclr((VoidStar)x, bitmapsize);

    for (p = 0; p < codep; p += 4) {
        int32 w = code_inst_(p);
        int32 f = code_flag_(p);
        VoidStar aux = code_aux_(p);
        switch (f) {
        case LIT_RELADDR:
            maybe_import((Symstr *)aux, NO);
            break;
        case LIT_OPCODE:
            switch (w & 0x0f000000) {
            case OP_B: case OP_BL:
                if (w & 0x00800000L) w |= 0xff000000L; else w &= 0x00ffffffL;
                w = (p / 4L) + 2L + w; /* word index */
                setlabbit(w);
                break;

            case OP_PREN:
                if (((w >> 16L) & 0xfL) == R_PC) {
                    int32 d = w & 0xfffL;
                    if ((w & F_UP)==0) d = -d;
                    w = (p + 8L + d) / 4L;
                    setlabbit(w);
                    killasmlabel(w);
                }
                break;

            case 0x02000000L:
                {   int32 op = w & (0xfL << 21L);
                    if ( (op == F_ADD || op == F_SUB) &&
                         (((w >> 16L) & 0xfL) == R_PC)) {
                        int32 val = immediateval(w);
                        if (op == F_SUB) val = -val;
                        w = (p + 8L + val) / 4L;
                        setlabbit(w);
                        killasmlabel(w);
                    }
                }
                break;

            case OP_CPPRE:
                if (((w >> 16L) & 0xfL) == R_PC) {
                    int32 d = w & 0xffL;
                    if ((w & F_UP)==0) d = -d;
                    w = (p + 8L) / 4L + d;
                    setlabbit(w);
                    killasmlabel(w);
                }
                break;

            default:
                break;
            }
        default:
            break;
        }
    }
}

/* exported functions ...*/

static bool hadcode;

void display_assembly_code(Symstr *name)
{   unsigned32  q;
    FILE   *as = asmstream;
    char   buf[256];

    if (codep == 0)                               /* really beware reinit */
    {
        Symstr *sym = bindsym_(codesegment);
        if (hadcode) {
            /* avoid generating a C$$codeseg area for the first function */
            char *s = symname_(sym);
            fprintf(as, "\n        AREA |C$$%s|, CODE, READONLY\n", s+2);
        }
        pr_asmname(sym);
        newline();
        return;
    }

    hadcode = YES;
    newline();
    asm_scancode();
    if (name != NULL) {
        /* may be NULL for string literals from static inits   */
        maybe_export(name);
        indent_18_if_annotating();
        pr_asmname(name);
        newline();
    }
    procname = name;
    for (q = 0; q < codep; q += 4)    /* q is now a BYTE offset */
    {   int32 w = code_inst_(q),
              f = code_flag_(q);
        VoidStar aux = code_aux_(q);
        if (needslabel(q / 4))
        {   indent_18_if_annotating();
            printlabelname(buf, "", "\n", q, name);
            fputs(buf, as);
        }
        if (annotations)
            fprintf(as, "%.6lx  %.8lx  ", (long)(q + codebase), (long)w);
        if (f != LIT_FPNUM2) indent8();
        switch(f)
        {
    case LIT_RELADDR:
            {   unsigned32 oldq = q;
                RelAddrRec r;
                r.sym = (Symstr *)aux; r.offset = 0; r.count = 0;
                r.buf = buf;
                if ((w & 0x0f000000L) == 0x02000000L) {
                    int32 rd = (w >> 12) & 0xfL;
                    while (q+4 < codep && code_flag_(q+4) == LIT_OPCODE &&
                           !needslabel((q+4)/4)) {
                        int32 w1 = code_inst_(q+4);
                        if (((w1 ^ w) & 0xfff00000L) != 0 ||
                            ((w1 >> 12) & 0xfL) != rd ||
                            ((w1 >> 16) & 0xfL) != rd)
                            break;
                        q += 4;
                        r.count++; r.offset += immediateval(w1);
                    }
                }
                disass(w, oldq, buf, (void *)&r, disass_cb);
                fputs(buf, as);
                break;
            }
    case LIT_OPCODE:
            disass(w, q, buf, (void *)0, disass_cb);
            fputs(buf, as);
            break;
    case LIT_STRING:
            NoteLiteralLabel(q);
            {   int32 tmpw = w;
                unsigned char *uc = (unsigned char *)&tmpw;
                fprintf(as, "DCB     &%.2x,&%.2x,&%.2x,&%.2x",
                    uc[0], uc[1], uc[2], uc[3]);
            }
            if (annotations) fprintf(as, "         ; "), pr_chars(w);
            break;
    case LIT_NUMBER:
            NoteLiteralLabel(q);
            fprintf(as, "DCD     &%.8lx", (long)w);
            break;
    case LIT_ADCON:
            NoteLiteralLabel(q);
            {   Symstr *sym = find_extsym(codebase+q);
                maybe_import(sym, YES);
                fputs("DCD     ", as); pr_asmname(sym);
                if (w != 0) fprintf(as, "+&%lx", (long)w);
            }
            break;
    case LIT_FPNUM:
            NoteLiteralLabel(q);
            {   char *s = (char *)aux;
                if (*s != '<') {
                    fprintf(as, "DCFS    %s", s);
                } else {
                    fprintf(as, "DCD     &%.8lx", w);
                }
            }
            break;
    case LIT_FPNUM1:
            NoteLiteralLabel(q);
            {   char *s = (char *)aux;
                if (*s != '<') {
                    fprintf(as, "DCFD    %s", s);
                } else {
                    fprintf(as, "DCD     &%.8lx, &%.8lx",
                                w, code_inst_(q+4) );
                }
            }
            break;
    case LIT_FPNUM2:    /* all printed by the FPNUM1 */
            if (annotations) break; else continue;
    default:
            fputs("???", as);
        }
        newline();
    }
}

void asm_header(void)
{   asm_imported = NULL;
    litlabels = NULL;
    disass_sethexprefix("&");
    disass_setregnames(regnames, (char **)fregnames);
    hadcode = NO;
    if (annotations) return;   /* do not bore interactive user */
    fprintf(asmstream, "; generated by %s\n", CC_BANNER);
    fputs("\n        AREA |C$$code|, CODE, READONLY\n", asmstream);
}

void asm_setregname(int regno, char *name) {
    regnames[regno] = name;
}

static void asm_data(DataInit *p)
{ FILE *as = asmstream;
  for (; p != 0; p = p->datacdr)
  { int32 rpt = p->rpt, sort = p->sort, len = p->len, val = p->val;
    indent_18_if_annotating();
    if (sort != LIT_LABEL) indent8();
    switch (sort)
    {   case LIT_LABEL:
            newline();
            maybe_export((Symstr *)rpt);
            pr_asmname((Symstr *)rpt);
            break;
        default:  syserr(syserr_asm_trailer, (long)sort);
        case LIT_BBBB:    /* the next 4 are the same as LIT_NUMBER except   */
        case LIT_HH:      /* for (as yet unsupported) cross compilation.    */
        case LIT_BBH:
        case LIT_HBB:
            if (host_lsbytefirst != target_lsbytefirst)
                val = totargetsex(val, (int)sort);
        case LIT_NUMBER:
            if (len != 4) syserr(syserr_asm_data, (long)len);
            if (rpt == 1)
                fprintf(as, "DCD     &%.8lx", (long)val);
            else if (val == 0)
                fprintf(as, "%%       %ld", (long)(rpt*len));
            else syserr(syserr_asm_trailer1, (long)rpt, (long)val);
            break;
#if (sizeof_ptr == 2)
        case LIT_BBX:
        case LIT_HX:
            if (len != 2 || rpt != 1) syserr(syserr_asm_hdata, (long)len);
            fprintf(as, "DCW     &%.4lx", (long)val);
            break;
#endif
        case LIT_FPNUM:
        {   char *s =((FloatCon *)val)->floatstr;
            if (*s != '<') {
                fprintf(as, "DCF%c    %s", (len == 8) ? 'D' : 'S', s);
            } else if (len == 4) {
                fprintf(as, "DCD     &%.8lx",
                            ((FloatCon *)val)->floatbin.fb.val);
            } else {
                fprintf(as, "DCD     &%.8lx, &%.8lx",
                            ((FloatCon *)val)->floatbin.db.msd,
                            ((FloatCon *)val)->floatbin.db.lsd);
            }
            break;
        }
        case LIT_ADCON:              /* (possibly external) name + offset */
            maybe_import((Symstr *)len, YES);
            while (rpt--)
            {
#if (sizeof_ptr == 2)
                fputs("DCW     ", as);
#else
                fputs("DCD     ", as);
#endif
                pr_asmname((Symstr *)len);
                if (val != 0) fprintf(as, "+&%lx", (long)val);
                if (rpt) {newline();  indent_18_if_annotating();  indent8(); }
            }
            break;
    }
    newline();
  }
}

typedef struct ExtRefList {
        struct ExtRefList *cdr;
        ExtRef *car;
} ExtRefList;

static void asm_areaname(const Symstr *name, const char *attributes, bool export_area)
{   newline();
    if (export_area) maybe_export(name);
    indent8();
    indent_18_if_annotating();
    fputs("AREA ", asmstream);
    pr_asmname(name);
    fprintf(asmstream, ",%s\n", attributes);
}

static void asm_pad(int32 len)
{   indent8();
    indent_18_if_annotating();
    fprintf(asmstream, "%% %ld\n", (long)len);
}

void asm_trailer(void)
{ FILE *as = asmstream;
#ifdef CONST_DATA_IN_CODE
  if (constdata.size != 0) {
    pr_asmname(bindsym_(constdatasegment));
    newline();
    asm_data(constdata.head);
  }
#endif
  asm_areaname(data_sym, "DATA", NO);
  asm_data(data.head);
  if (bss_size != 0)
  { int32 n = 0;
    ExtRef *x = obj_symlist;
    ExtRefList *zisyms = NULL;
    asm_areaname(bss_sym, "NOINIT", NO);
    for (; x != NULL; x = x->extcdr)
      if (x->extflags & xr_bss) {
        ExtRefList **prev = &zisyms;
        ExtRefList *p;
        for (; (p = *prev) != 0; prev = &cdr_(p))
          if (x->extoffset < car_(p)->extoffset) break;
        *prev = (ExtRefList *) syn_cons2(*prev, x);
      }
    for (; zisyms != NULL; zisyms = cdr_(zisyms))
    { x = car_(zisyms);
      if (x->extoffset != n) asm_pad(x->extoffset-n);
      n = x->extoffset;
      maybe_export(x->extsym);
      indent_18_if_annotating();
      pr_asmname(x->extsym);
      newline();
    }
    if (n != bss_size) asm_pad(bss_size-n);
  }
  if (adconpool.size != 0) {
    asm_areaname(adcon_sym, "BASED sb", NO);
    asm_data(adconpool.head);
  }
  { CommonDef *p;
    for (p = commondefs; p != NULL; p = p->next)
    { asm_areaname(p->name, "COMDEF", YES);
      asm_data(p->data.head);
    }
  }
  { ExtRef *x;
    for (x = obj_symlist; x != NULL; x = x->extcdr)
    { int32 flags = x->extflags;
      if ((flags & (xr_defloc + xr_defext)) == 0) {
        /* not defined... */
        Symstr *s = x->extsym;
        int32 len = x->extoffset;
        if (!(flags & xr_code) && (len > 0))
        { /* common data... */
          asm_areaname(s, "COMMON,NOINIT", YES);
          asm_pad(len);
        }
      }
    }
  }
  newline();
  indent8();
  indent_18_if_annotating();
  fputs("END\n", as);
}

#endif

/* end of arm/asm.c */
