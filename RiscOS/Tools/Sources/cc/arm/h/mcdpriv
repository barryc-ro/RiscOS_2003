/*
 * C compiler file mcdpriv.h,  version 1
 * (Private interfaces within machine-dependent back end).
 * Copyright (C) Acorn Computers Ltd., 1988
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef __mcdpriv_h
#define __mcdpriv_h 1

#ifndef JOPCODEDEF_ONLY
#include "codebuf.h"
#endif

#define P_RET      1
#define P_CMPZ             2
#define P_PRE      4      /* Used for pre-auto-index                  */
#define P_POST             8      /* Used for post-auto-index                 */
#define P_LSL     0x10
#define P_ASR     0x20            /* Used to generate register-controlled shifts */
#define P_LSR     0x30
#define P_ROR     0x40
#define P_RSHIFT  (P_LSL | P_ASR | P_LSR | P_ROR)
#define SCC_of_PEEP(peep) ((peep)&P_CMPZ ? F_SCC:0)  /* change bit no.? */
#define P_A2FREE  0x80
#define P_A3FREE  0x100
#define P_LRFREE  0x200
#define P_R2LIVE 0x400
#define P_BASEALIGNED 0x800
#define P_MS 0x1000
#define P_RNDF 0x2000

#define _a_read_r1      0x1
#define _a_read_r2      0x2
#define _a_read_r3      0x4
#define _a_read_r4      0x8
#define _a_set_r1      0x10
#define _a_set_r2      0x20
#define _a_modify_mem  0x40
#define _a_call        0x80
#define _a_regmask_r1 0x100
#define _a_regmask_r3 0x200
#define _a_gap_r1     0x400
#define _a_gap_r2     0x800
#define _a_float     0x1000
#define _a_double    0x2000

extern struct JopTable a_joptable[];

#ifdef DEFINE_A_JOPTABLE
#  if defined ENABLE_CG || defined ENABLE_REGS || defined ENABLE_CSE
#    define a_with_bits(n, b) {n, b},
#  else
#    define a_with_bits(n, b) { b },
#  endif
   struct JopTable a_joptable[] = {
#else
#  define a_with_bits(n, b)
#endif

#define a_attributes(op) (a_joptable[(op-J_LAST_JOPCODE-1) & J_TABLE_BITS].bits)
#define a_double(op) (a_attributes(op) & _a_double)

#define J_MLA   (J_LAST_JOPCODE+1L)
        a_with_bits("MLA", _a_read_r4+_a_read_r3+_a_read_r2+_a_set_r1)

#define J_BICR          (J_LAST_JOPCODE+2L)
        a_with_bits("BICR", _a_read_r3+_a_read_r2+_a_set_r1)

#define J_POPMB (J_LAST_JOPCODE+3L)
        a_with_bits("POPMB", _a_gap_r1+_a_read_r2+_a_regmask_r3)

#define J_PUSHC (J_LAST_JOPCODE+4L)
        a_with_bits("PUSHC", _a_read_r1+_a_read_r2+_a_modify_mem)

#define J_CALLI (J_LAST_JOPCODE+5L)
        a_with_bits("CALLI", _a_read_r4+_a_set_r1+_a_call)

#define J_CALLIR (J_LAST_JOPCODE+6L)
        a_with_bits("CALLIR", _a_read_r4+_a_read_r3+_a_set_r1+_a_call)

#define J_TAILCALLI (J_LAST_JOPCODE+7L)
        a_with_bits("TAILCALLI", _a_read_r4+_a_set_r1+_a_call)

#define J_TAILCALLIR (J_LAST_JOPCODE+8L)
        a_with_bits("TAILCALLIR", _a_read_r4+_a_read_r3+_a_set_r1+_a_call)

#define J_CALLX (J_LAST_JOPCODE+9L)
        a_with_bits("CALLX", _a_read_r4+_a_set_r1+_a_call)

#define J_CALLXR (J_LAST_JOPCODE+10L)
        a_with_bits("CALLXR", _a_read_r4+_a_read_r3+_a_set_r1+_a_call)

#define J_TAILCALLX (J_LAST_JOPCODE+11L)
        a_with_bits("TAILCALLX", _a_read_r4+_a_set_r1+_a_call)

#define J_TAILCALLXR (J_LAST_JOPCODE+12L)
        a_with_bits("TAILCALLXR", _a_read_r4+_a_read_r3+_a_set_r1+_a_call)

#define J_MOVDIM (J_LAST_JOPCODE+13L)
        a_with_bits("MOVDIM", _a_double+_a_regmask_r1+_a_gap_r2+_a_regmask_r3)

#define J_MOVIDM (J_LAST_JOPCODE+14L)
        a_with_bits("MOVIDM", _a_double+_a_regmask_r1+_a_gap_r2+_a_regmask_r3)

#define J_RSBFK (J_LAST_JOPCODE+15L)
        a_with_bits("RSBFK", _a_float+_a_read_r2+_a_set_r1)

#define J_RSBDK (J_LAST_JOPCODE+16L)
        a_with_bits("RSBDK", _a_double+_a_read_r2+_a_set_r1)

#define J_RDVFK (J_LAST_JOPCODE+17L)
        a_with_bits("RDVFK", _a_float+_a_read_r2+_a_set_r1)

#define J_RDVDK (J_LAST_JOPCODE+18L)
        a_with_bits("RDVDK", _a_double+_a_read_r2+_a_set_r1)

#define J_LAST_A_JOPCODE J_RDVDK

#ifdef DEFINE_A_JOPTABLE
    0
};
#endif

#ifndef JOPCODEDEF_ONLY

typedef struct {    /* like struct Icode but with RealReg's and a peep field */
  J_OPCODE op;
  RealRegister r1, r2;
  int32 m;
  RealRegister r4;
  int32 peep;       /* opcode extension */
  int32 dataflow;
  int32 cond;
} PendingOp;

void a_pr_jopcode(PendingOp *p);

#define localcg_debug(n) (debugging(DEBUG_LOCALCG) && (localcg_debugcount & (n)))

extern char frameregnames[(16-9)*2];
                             /* register number -> name for sb (or v6), ip, fp, sl, sp
                              * (variable because dependent on calling standard
                              * in force).  Also does lr and pc for simplicity.
                              */

extern void setcallingstandard(char);
                             /* One of 'A', 'R', 'U', 'M', default set by compiler
                              * build, value alterable by configuration option.
                              */

extern int32 pcs_flags;

/* Beware: these values are also written in the config tool */
#define PCS_CALLCHANGESPSR  1
#define PCS_FPE3            2
#define PCS_NOSTACKCHECK    4
#define PCS_REENTRANT       8
#define PCS_FPREGARGS       16 /* never in pcs_flags, only a pcs config value */
                               /* but mustn't overlap with pcs_flags bits     */
#define PCS_NOFP            32
#define PCS_ACCESS_CONSTDATA_WITH_ADR 64

#define PCS_ZH_MASK         0x3f  /* options passed from driver via -zh argument */
                                  /* (includes fpregargs, but excludes           */
                                  /* access_constdata_with_adr.                  */

#ifndef PCS_DEFAULTS
#  define PCS_DEFAULTS 0
#endif

#ifdef TARGET_HAS_DEBUGGER

  extern int32 local_fpaddress(int32 p);
  /* p is the bindaddr field from a binder for a local object.          Returns the
   * offset of the object from the fp (assuming that fp and sp have not been
   * split in the frame containing the object ...).
   */

  extern void dbg_writedebug(void);
  /* Call from the object formatter to the debug table generator to
   * cause tables to be output
   */

  extern void obj_writedebug(void *, int32);

#  define DBG_INTFLAG 0x80000000L
  /* flag in the size argument to obj_writedebug indicating that the things
     being written are 4-byte ints (to be byte reversed if appropriate);
     if absent, they are byte strings to be written as presented.
   */

  extern bool asd_old_tables;

#endif

#define NONLEAF (PROC_ARGPUSH | PROC_ARGADDR | PROC_BIGSTACK | BLKCALL)
/* STACKCHECK (NONLEAF subset) defines when stack check is REALLY needed */
#define STACKCHECK (PROC_BIGSTACK | BLKCALL)

#define MOVC_LOOP_THRESHOLD 24

extern int32 a_loads_r1(J_OPCODE op);
extern int32 a_uses_r1(J_OPCODE op);
extern int32 a_reads_r1(J_OPCODE op);
extern int32 a_loads_r2(J_OPCODE op);
extern int32 a_uses_r2(J_OPCODE op);
extern int32 a_reads_r2(J_OPCODE op);
extern int32 a_uses_r3(J_OPCODE op);
extern int32 a_uses_r4(J_OPCODE op, int32 peep);
extern int32 a_modifies_mem(J_OPCODE op);

extern bool setspsr(J_OPCODE op, int32 m);

extern int32 eightbits(int32 n);
extern int32 power_of_two(int32 n);
extern int32 regofregbit(int32 m);


extern void show_inst_direct(PendingOp *p);

extern void peephole_op(PendingOp *p, bool flush);

extern void peephole_reinit(void);
extern void peephole_init(void);
extern void peephole_tidy(void);

#ifdef TARGET_HAS_AOF

#define  aof_fpreg   xr_objflg1     /* fn passes FP args in FP registers */
#define  aof_usessb  xr_objflg2     /* defined fn 'uses' sb */
#define  aof_leaf    xr_objflg3     /* defined fn is a leaf */

typedef struct CommonDef {
    struct CommonDef *next;
    DataDesc data;
    Symstr *name;
    int index;
    int32 refsize;
    int32 stringpos;
} CommonDef;

extern CommonDef *commondefs;

extern Symstr *data_sym, *bss_sym, *debug_sym, *adcon_sym;

#else

#define  aof_fpreg   0                      /* fn passes FP args in FP registers */
#define  aof_usessb  0                      /* defined fn 'uses' sb */
#define  aof_leaf    0                      /* defined fn is a leaf */

#endif

extern DataDesc adconpool;
extern Symstr *adconpool_lab;

extern int adconpool_find(int32 w, int32 flavour, Symstr *sym);
extern void adconpool_flush(void);
extern void adconpool_init(void);

extern int integer_load_max;
extern int ldm_regs_max;

extern void asm_setregname(int regno, char *name);

#endif /* JOPCODEDEF_ONLY */

#endif

/* end of arm/mcdpriv.h */
