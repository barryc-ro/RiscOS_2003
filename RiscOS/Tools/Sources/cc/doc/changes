C99 features
------------
     bool
     restrict
     inline
     long long
     Type qualifiers and "static" inside function array parameters
     Variable-length arrays
     Interleaved statements and declarations
     Declarations in for(...;
     Designated structure initialisers
     Non-constant structure initialisers
     Compound literals
     __func__
     Variadic macros
     Flexible array members
     Trailing comma allowed in enum declaration
     Hexadecimal floating-point constants
     Digraphs

C99 changes
-----------
     C99 scoping rules
     Warns about old-style declarations in C99 by default (equivalent to -fo
     feature). No way to turn this off at present, except to use -c90.

C99 removals
------------
     return statement must have expression for non-void function
     Implicit int and missing function declarations now errors
     Arrays of incomplete type not permitted

Other improvements
------------------
     Empty initialiser lists now diagnosed (illegal in C90)
     Improved NaN and infinity handling
     Code generation improvements (in particular the ability to defer saving
     registers at the start of a function, and register assignment of structure
     fields).
     Software floating-point support (if you have a library available).
     "-cpu" and "-memaccess" options, as per ARM ADS (-memaccess currently
     ineffective)


Notes
-----
     _Bool is an 8-bit type; any value other than 0 or 1 is a trap representation.
     Unlike char, short or float, _Bool is "caller-narrowed" in function calls.

     Any function that is declared with "inline" at the top-level before (or in)
     its definition will be inlined when used subsequently in that translation unit.
     Inlining does not occur if the -g or -Ospace options have been selected. 
     An "inline" declaration is ineffective if first seen after the function
     definition. In the event of recursion during inline expansion, inlining stops
     after the first iteration.

     The compiler defaults to C99 mode, but can be changed to C90 mode with the
     "-c90" command-line switch. "-ansi" and "-c99" are synonyms. The highest
     version specifier (of "-pcc", "-c90" and "-ansi/c99") wins.

     VLAs use new library functions "__rt_allocauto" and "__rt_freeauto". In the
     future these could be improved to make sure VLAs are freed correctly in
     longjmp-type situations, by associating blocks with stack chunk and stack
     pointer values.

     long long uses a host of new run-time support functions - the functions used
     are compatible with the ones used by the ARM ADS compiler.
     The compiler inlines many long long operations. If you specify "-cpu 4" or
     similar, it will inline some multiplications (signed * signed -> long long,
     unsigned * unsigned -> long long, and unsigned * long long -> long long) using
     the UMULL and SMULL instructions.
