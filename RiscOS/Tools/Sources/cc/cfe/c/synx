static SynBindList *reverse_SynBindList(SynBindList *x)
{   SynBindList *p = 0;
    for (; x; x = x->bindlistcdr)
        p = mkSynBindList(p, x->bindlistcar);
    return p;
}

static SynBindList *reverse_SynBindList_VLAs(SynBindList *x)
{   SynBindList *p = 0;
    for (; x; x = x->bindlistcdr)
        if (h0_(bindtype_(x->bindlistcar)) == t_vla)
            p = mkSynBindList(p, x->bindlistcar);
    return p;
}

static SynBindList *merge_SynBindList_nonVLAs(SynBindList *orig, SynBindList *x)
{
    SynBindList *n = x, **prevptr = &n;
    for (; x; x = x->bindlistcdr)
        if (h0_(bindtype_(x->bindlistcar)) == t_vla)
            *prevptr = x->bindlistcdr;
        else
            prevptr = &x->bindlistcdr;
    *prevptr = orig;
    return n;
}

/* syn_copyscope() is expensive, but only called for labels/gotos.      */
/* We *are* removing it by removing some of the dreverses and nconcs.   */
static SynBindList *copy_SynBindList(SynBindList *x)
{   SynBindList *p = 0, *q = 0;
    if (debugging(DEBUG_SYN)) cc_msg("(");
    for (; x; x = x->bindlistcdr)
    {   SynBindList *t = mkSynBindList(0, x->bindlistcar);
        if (p == 0) p = q = t; else q->bindlistcdr = t, q = t;
        if (debugging(DEBUG_SYN)) cc_msg("$b", x->bindlistcar);
    }
    if (debugging(DEBUG_SYN)) cc_msg(")");
    return p;
}

static SynScope *syn_copyscope(SynScope *x)
{   SynScope *p = 0, *q = 0;
    if (debugging(DEBUG_SYN)) cc_msg("copy_scope[");
    for (; x; x = x->cdr)
    {   SynBindList *bl = copy_SynBindList(x->car);
        SynScope *t = mkSynScope(0, bl, x->scopeid);
        if (p == 0) p = q = t; else cdr_(q) = t, q = t;
    }
    if (debugging(DEBUG_SYN)) cc_msg("]\n");
    return p;
}

static Expr *unbind_dtor(SynScope *to, SynScope *from)
{   Expr *edtor = 0;
    SynScope *s, *fromx = from, *tox = to;
    /* Find a common, but possibly copied, substring of from and to:    */
    /* Relies on scopeid(children) > scopeid(parent).                   */
    if (language_flavour < FLAVOUR_C99) return edtor;
    for (;;)
    {   if (fromx == 0) { tox = 0; break; }
        if (tox == 0) { fromx = 0; break; }
        if (fromx->scopeid == tox->scopeid) break;
        if (fromx->scopeid > tox->scopeid)
            fromx = fromx->cdr;
        else
            tox = tox->cdr;
    }
    for (s = to; s != tox; s = s->cdr)
    {   SynBindList *l;
        for (l = s->car; l; l = l->bindlistcdr)
        {   Binder *b = l->bindlistcar;
#ifdef CPLUSPLUS
            if (attributes_(b) & A_DYNINIT /* && ector == 0 */ )
            {   /* one day do ctors for such, hence ector.              */
/* @@@ in particular setting b to undefined would improve liveness      */
/* calculations for branches into blocks!                               */
                //ector = (Expr *)b;
/* next line is error to agree with Cfront 3.1                          */
                if ((feature & FEATURE_CFRONT) &&
                    !typehasctor(bindtype_(b)) &&
                    h0_(princtype(bindtype_(b))) != t_ref)
                    cc_warn(syn_rerr_jump_past_init, b);
                else
                    cc_rerr(syn_rerr_jump_past_init, b);
            }
#else
            if (is_variably_modified_type(bindtype_(b)))
                cc_rerr("jump into scope of variably modified $b", b);
            else if (attributes_(b) & A_DYNINIT)
                cc_warn("jump past initialisation of $b"/*syn_rerr_jump_past_init*/, b);
#endif
        }
    }
    for (s = from; s != fromx; s = s->cdr)
    {
#ifdef CPLUSPLUS
        Expr *e = mkdtor_v_list(s->car);         /* @@@ backwards?      */
        /* next line is 'commacons'.                                    */
        edtor = edtor==0 ? e : e==0 ? edtor : mkbinary(s_comma, edtor, e);
#else
        Expr *e = mkvlafree_v_list(s->car);
        edtor = edtor==0 ? e : e==0 ? edtor : mkbinary(s_comma, edtor, e);

#endif
    }
    return edtor;
}

static Cmd *cmd_rescope(SynScope *to, SynScope *from, Cmd *c)
{   Expr *edtor = unbind_dtor(to, from);
    if (edtor && h0_(edtor = optimise0(edtor)) != s_error)
    {   if (h0_(c) == s_return && cmd1e_(c) != 0)
        {   if (cur_structresult != 0)
                cmd1e_(c) = mkbinary(s_comma, cmd1e_(c),
                        mkcast(s_return, edtor, te_void));
            else
            {   Expr *e = cmd1e_(c);
                Expr *ee = (h0_(e) == s_return) ? arg1_(e) : e;
                TypeExpr *t = typeofexpr(ee);
                Binder *gen = gentempbinder(t);
                ee = mkbinary(s_init, (Expr *)gen, ee);
                ee = mkbinary(s_comma, ee, edtor);
                ee = mkbinary(s_comma, ee, (Expr *)gen);
                ee = mk_exprlet(s_let, t, mkSynBindList(0, gen), ee);
                /* may change type (in a harmless way)                  */
                ee = optimise0(ee);
                if (h0_(e) == s_return)
                    arg1_(e) = ee;
                else
                    cmd1e_(c) = ee;
            }
        }
        else
        {   FileLine fl; fl = c ? c->fileline : syn_invented_fl;
            c = mk_cmd_block(fl, 0,
                    mkCmdList(mkCmdList(0, c),
                        mk_cmd_e(s_semicolon, fl, edtor)));
        }
    }
    return c;
}

static void syn_setlab(LabBind *lab, SynScope *defscope)
{   /* Modifies code in forward-reference gotos to include dtors.       */
    SynGoto *ref = lab->labu.ref;
    lab->labu.def = syn_copyscope(defscope);
    for (; ref; ref = ref->cdr)
    {   Expr *edtor = unbind_dtor(defscope, ref->gotoscope);
        if (edtor)
        {   Cmd *c = ref->gotocmd;
            CmdList *cl = cmdblk_cl_(c);
            cmdcar_(cl) = mk_cmd_e(s_semicolon, c->fileline, optimise0(edtor));
        }
    }
}

static Cmd *syn_reflab(LabBind *lab, SynScope *s, Cmd *c)
{   if (lab->labuses & l_defined)
        c = cmd_rescope(lab->labu.def, s, c);
    else
    {   /* for goto-destructors -- updated by syn_setlab().             */
        c = mk_cmd_block(c->fileline, 0, mkCmdList(mkCmdList(0, c), 0));
/* The top-level copy of synscope is essential (avoids dtors of yet-to- */
/* -be-bound reftemps).  The rest is needed because of dreverses (q.v.) */
        lab->labu.ref = mkSynGoto(lab->labu.ref, c, syn_copyscope(s));
    }
    return c;
}
