#pragma force_top_level
#pragma include_only_once

/* math.h: ISO 'C' (9899:1999) library header, section 7.22 */
/* Copyright (C) Codemist Ltd. */
/* Copyright (C) Acorn Computers Ltd. 1991 */
/* version 0.04 */

#ifndef __math_h
#define __math_h

typedef float float_t;
typedef double double_t;
   /* most efficient types at least as wide as float and double */

#ifndef HUGE_VAL
#  define HUGE_VAL __huge_val
#ifdef __cplusplus
#  define HUGE __huge_val
extern "C" const double HUGE_VAL;
#else
extern const double HUGE_VAL;
#endif
#endif

#ifndef HUGE_VALF
#  define HUGE_VALF INFINITY
#endif

#define INFINITY 0f_7f800000
   /* a constant expression of type float representing positive infinity */
#define NAN      0f_7fc00001
   /* a constant expression of type float representing a quiet NaN */

#define FP_ZERO      0
#define FP_SUBNORMAL 1
#define FP_NORMAL    2
#define FP_INFINITY  3
#define FP_NAN       4
   /* the mutually exclusive kinds of floating-point values for fpclassify() */

#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2

#define math_errhandling MATH_ERRNO
   /* <math.h> functions just set errno - no exceptions are raised */

/*#pragma no_side_effects*/

#ifdef __cplusplus
extern "C" {
#endif

#pragma no_side_effects
#pragma force_fpargs_in_regs
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __signbitf(float);
extern int __signbitd(double);
#pragma no_force_fpargs_in_regs
#pragma side_effects

#ifdef __cplusplus
#define __classmacro(fn,r) (sizeof(r) == 4 ? __##fn##f(r) : \
                                             __##fn##d(r))
#else
#define __assertfp(r) ___assert(___typeof(r) == 0x002 ||\
                                ___typeof(r) == 0x202 ||\
                                ___typeof(r) == 0x402, \
                                "Illegal type used with classification macro")

#define __classmacro(fn,r) (__assertfp(r),\
                            ___typeof(r) == 0x402 ? __##fn##f(r) : \
                                                    __##fn##d(r))
#endif

#define fpclassify(r) __classmacro(fpclassify,(r))
   /* Returns: the value of the appropriate number classification macro */
#define isfinite(r)   (fpclassify(r) <= FP_NORMAL)
   /* Returns: a nonzero value if and only if its argument is finite */
#define isinf(r)      (fpclassify(r) == FP_INFINITY)
   /* Returns: a nonzero value if and only if its argument is infinite */
#define isnan(r)      (fpclassify(r) == FP_NAN)
   /* Returns: a nonzero value if and only if its argument is a NaN */
#define isnormal(r)   (fpclassify(r) == FP_NORMAL)
   /* Returns: a nonzero value if and only if its argument is normal */
#define signbit(r)    __classmacro(signbit,(r))
   /* Returns: a nonzero value if and only if its argument is negative */

extern double acos(double /*x*/);
   /* computes the principal value of the arc cosine of x */
   /* a domain error occurs for arguments not in the range -1 to 1 */
   /* Returns: the arc cosine in the range 0 to Pi. */
extern double asin(double /*x*/);
   /* computes the principal value of the arc sine of x */
   /* a domain error occurs for arguments not in the range -1 to 1 */
   /* and -HUGE_VAL is returned. */
   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
extern double atan(double /*x*/);
   /* computes the principal value of the arc tangent of x */
   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
extern double atan2(double /*x*/, double /*y*/);
   /* computes the principal value of the arc tangent of y/x, using the */
   /* signs of both arguments to determine the quadrant of the return value */
   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */

extern double __d_atan(double);
extern __caller_narrow float __r_atan(float);
#define atan(x) __d_atan(x)
#define atanf(x) __r_atan(x)

extern double cos(double /*x*/);
   /* computes the cosine of x (measured in radians). A large magnitude */
   /* argument may yield a result with little or no significance */
   /* Returns: the cosine value. */
extern double sin(double /*x*/);
   /* computes the sine of x (measured in radians). A large magnitude */
   /* argument may yield a result with little or no significance */
   /* Returns: the sine value. */

extern double __d_sin(double);
extern __caller_narrow float __r_sin(float);
extern double __d_cos(double);
extern __caller_narrow float __r_cos(float);
#define sin(x) __d_sin(x)
#define sinf(x) __r_sin(x)
#define cos(x) __d_cos(x)
#define cosf(x) __r_cos(x)

extern double tan(double /*x*/);
   /* computes the tangent of x (measured in radians). A large magnitude */
   /* argument may yield a result with little or no significance */
   /* Returns: the tangent value. */
   /*          if range error; returns HUGE_VAL. */

extern double cosh(double /*x*/);
   /* computes the hyperbolic cosine of x. A range error occurs if the */
   /* magnitude of x is too large. */
   /* Returns: the hyperbolic cosine value. */
   /*          if range error; returns HUGE_VAL. */
extern double sinh(double /*x*/);
   /* computes the hyperbolic sine of x. A range error occurs if the */
   /* magnitude of x is too large. */
   /* Returns: the hyperbolic sine value. */
   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
   /*          on the sign of the argument */
extern double tanh(double /*x*/);
   /* computes the hyperbolic tangent of x. */
   /* Returns: the hyperbolic tangent value. */

extern double exp(double /*x*/);
   /* computes the exponential function of x. A range error occurs if the */
   /* magnitude of x is too large. */
   /* Returns: the exponential value. */
   /*          if underflow range error; 0 is returned. */
   /*          if overflow range error; HUGE_VAL is returned. */
extern double frexp(double /*value*/, int * /*exp*/);
   /* breaks a floating-point number into a normalised fraction and an */
   /* integral power of 2. It stores the integer in the int object pointed */
   /* to by exp. */
   /* Returns: the value x, such that x is a double with magnitude in the */
   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
   /* power *exp. If value is zero, both parts of the result are zero. */
extern double ldexp(double /*x*/, int /*exp*/);
   /* multiplies a floating-point number by an integral power of 2. */
   /* A range error may occur. */
   /* Returns: the value of x times 2 raised to the power of exp. */
   /*          if range error; HUGE_VAL is returned. */
extern double log(double /*x*/);
   /* computes the natural logarithm of x. A domain error occurs if the */
   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
   /* if the argument is zero. */
   /* Returns: the natural logarithm. */
   /*          if range error; -HUGE_VAL is returned. */
extern double log10(double /*x*/);
   /* computes the base-ten logarithm of x. A domain error occurs if the */
   /* argument is negative. A range error occurs if the argument is zero. */
   /* Returns: the base-ten logarithm. */
extern double modf(double /*value*/, double * /*iptr*/);
   /* breaks the argument value into integral and fraction parts, each of */
   /* which has the same sign as the argument. It stores the integral part */
   /* as a double in the object pointed to by iptr. */
   /* Returns: the signed fractional part of value. */

extern double hypot(double /*x*/, double /*y*/);
extern float hypotf(float /*x*/, float /*y*/);
   /* computes the square root of the sum of the squares of x and y, without */
   /* undue overflow or underflow. A ronge error may occur. */
   /* Returns: sqrt(x^2 + y^2) */
extern double pow(double /*x*/, double /*y*/);
   /* computes x raised to the power of y. A domain error occurs if x is */
   /* zero and y is less than or equal to zero, or if x is negative and y */
   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
   /* Returns: the value of x raised to the power of y. */
   /*          if underflow range error; 0 is returned. */
   /*          if overflow range error; HUGE_VAL is returned. */
extern double sqrt(double /*x*/);
   /* computes the non-negative square root of x. A domain error occurs */
   /* if the argument is negative, and -HUGE_VAL returned. */
   /* Returns: the value of the square root. */

extern double fabs(double /*x*/);
extern float fabsf(float /*x*/);
   /* computes the absolute value of the floating-point number x. */
   /* Returns: the absolute value of x. */
extern double ceil(double /*x*/);
extern float ceilf(float /*x*/);
   /* computes the smallest integer not less than x. */
   /* Returns: the smallest integer not less than x, expressed as a double. */
extern double floor(double /*x*/);
extern float floorf(float /*x*/);
   /* computes the largest integer not greater than x. */
   /* Returns: the largest integer not greater than x, expressed as a double */
extern double nearbyint(double /*x*/);
extern float nearbyintf(float /*x*/);
   /* rounds its argument to an integer value, using the current rounding */
   /* direction. Does not raise the inexact exception. */
   /* Returns: the rounded integer value. */
extern double rint(double /*x*/);
extern float rintf(float /*x*/);
   /* rounds its argument to an integer value, using the current rounding */
   /* direction. Raises "inexact" if the result differs from the argument. */
   /* Returns: the rounded integer value. */
extern long int lrint(double /*x*/);
extern long int lrintf(float /*x*/);
   /* rounds its argument to an integer value, using the current rounding */
   /* direction. Raises "inexact" if the result differs from the argument. */
   /* Returns: the rounded integer value. */
extern double round(double /*x*/);
extern float roundf(float /*x*/);
   /* rounds its argument to the nearest integer value, rounding halfway */
   /* cases away from zero. */
   /* Returns: the rounded integer value. */
extern long int lround(double /*x*/);
extern long int lroundf(float /*x*/);
   /* rounds its argument to the nearest integer value, rounding halfway */
   /* cases away from zero. */
   /* Returns: the rounded integer value. */
extern double trunc(double /*x*/);
extern float truncf(float /*x*/);
   /* rounds its argument to the integer value, nearest to but no larger in */
   /* magnitude than the argument. */
   /* Returns: the truncated integer value. */
extern double fmod(double /*x*/, double /*y*/);
   /* computes the floating-point remainder of x/y. */
   /* Returns: the value x - i * y, for some integer i such that, if y is */
   /*          nonzero, the result has the same sign as x and magnitude */
   /*          less than the magnitude of y. If y is zero, a domain error */
   /*          occurs and -HUGE_VAL is returned. */
extern double remainder(double /*x*/, double /*y*/);
extern float remainderf(float /*x*/, float /*y*/);
   /* computes the remainder x REM y required by IEEE 754 */
   /* Returns: x REM y */

extern double __d_abs(double);
extern double __d_floor(double);
extern double __d_ceil(double);
extern double __d_trunc(double);
extern double __d_rint(double);
extern long int __d_lrint(double);
extern float __r_abs(float);
extern __caller_narrow float __r_floor(float);
extern __caller_narrow float __r_ceil(float);
extern __caller_narrow float __r_trunc(float);
extern __caller_narrow float __r_rint(float);
extern __caller_narrow long int __r_lrint(float);
#define fabs(x) __d_abs(x)
#define fabsf(x) __r_abs(x)
#define floor(x) __d_floor(x)
#define floorf(x) __r_floor(x)
#define ceil(x) __d_ceil(x)
#define ceilf(x) __r_ceil(x)
#define trunc(x) __d_trunc(x)
#define truncf(x) __r_trunc(x)
#define rint(x) __d_rint(x)
#define rintf(x) __r_rint(x)
#define lrint(x) __d_lrint(x)
#define lrintf(x) __r_lrint(x)

#pragma force_fpargs_in_regs
extern double copysign(double /*x*/, double /*y*/);
extern float copysignf(float /*x*/, float /*y*/);
#pragma no_force_fpargs_in_regs
   /* produce a value with the magnitude of x and the sign of y. They */
   /* produce a NaN (with the sign of y) if x is a NaN. */
   /* Returns: a value with the magnitude of x and the sign of y. */
extern double nan(const char * /*tagp*/);
extern float nanf(const char * /*tagp*/);
   /* Returns: a quiet NaN, with content indicated through tagp. */
extern double nextafter(double /*x*/, double /*y*/);
extern float nextafterf(float /*x*/, float /*y*/);
   /* Returns: the next representable value in the specified format after */
   /*          x in the direction of y */
extern double fdim(double /*x*/, double /*y*/);
extern float fdimf(float /*x*/, float /*y*/);
   /* determine the positive difference between their arguments: */
   /* { x-y if x > y  */
   /* { +0  if x <= y */
   /* A range error may occur. */
   /* Returns: the positive difference value. */
extern double fmax(double /*x*/, double /*y*/);
extern float fmaxf(float /*x*/, float /*y*/);
   /* Returns: the maximum numeric value of their arguments. */
extern double fmin(double /*x*/, double /*y*/);
extern float fminf(float /*x*/, float /*y*/);
   /* Returns: the minimum numeric value of their arguments. */

#define isgreater(x,y)      ((x) __greater (y))
#define isgreaterequal(x,y) ((x) __greaterequal (y))
#define isless(x,y)         ((x) __less (y))
#define islessequal(x,y)    ((x) __lessequal (y))
#define islessgreater(x,y)  ((x) __lessgreater (y))
#define isunordered(x,y)    ((x) __unordered (y))
   /* quiet (non floating-point exception raising) versions of the */
   /* relational operators, and other comparison macros that facilitate */
   /* writing efficient code that accounts for NaNs without suffering the */
   /* "invalid" floating-point exception. */

#ifdef __cplusplus
}
#endif

#pragma side_effects

#endif

/* end of math.h */
