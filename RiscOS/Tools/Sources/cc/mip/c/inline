/*
 * inline.c: inline function expansion
 * Copyright (C) Advanced Risc Machines Ltd., 1993
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <string.h>
#include <stddef.h>  /* offsetof */

#include "globals.h"
#include "store.h"
#include "flowgraf.h"
#include "codebuf.h"
#include "regalloc.h"
#include "aeops.h"
#include "aetree.h"
#include "bind.h"
#include "jopcode.h"
#include "inline.h"
#include "cg.h"
#include "regsets.h"
#include "simplify.h"
#include "errors.h"
#include "builtin.h"
#ifndef CPLUSPLUS
#include "syn.h"     /* syn_inline_constraints */
#include "mcdep.h"   /* usrdbg */
#endif

typedef struct SavedFnList SavedFnList;
typedef union { RegSort rs; VRegnum r; } Inline_VRegIndex;

typedef struct Inline_ArgDesc Inline_ArgDesc;
struct Inline_ArgDesc {
  Inline_ArgDesc *cdr;
  Binder *arg;
  int flags;
  int32 accesssize;
  Inline_ArgSubstList *argsubst;
};
#define IA_Updated 1
#define IA_OddAccess 2
#define IA_AccessSet 4

struct SavedFnList {
  SavedFnList *cdr;
  Inline_SavedFn fn;
  int32 maxlabel;
  VRegnum maxreg;
  Inline_VRegIndex *vregtypetab;
  Inline_ArgDesc *args;
};

typedef struct BindListIndex BindListIndex;
struct BindListIndex {
  BindListIndex *cdr;
  BindList *orig;
  BindList *copy;
};

typedef struct {
  SynBindList *copied;
  BindListIndex *sharedbindlists;
  Inline_VRegIndex *vregindex;
  BindList *nullenv;
} SaveFnState;

static SavedFnList *saved_fns;

typedef struct SymList SymList;
struct SymList {
  SymList *cdr;
  Symstr *sym;
};
static SymList *used_out_of_line;

#define SymMember(s, l) member((VRegnum)s, (RegList *)l)

Inline_SavedFn *Inline_FindFn(Symstr *s) {
  SavedFnList *p;
  for (p = saved_fns; p != NULL; p = cdr_(p))
    if (p->fn.fndetails.symstr == s)
      return &p->fn;
  return NULL;
}

void Inline_RealUse(Symstr *s) {
#ifndef CPLUSPLUS
  if (bindstg_(bind_global_(s)) & bitofstg_(s_static))
#endif
  if (!SymMember(s, used_out_of_line))
    used_out_of_line = (SymList *)global_cons2(SU_Inline, used_out_of_line, s);
}


#ifndef CPLUSPLUS
void Inline_MakeExternalDefinition(Symstr *s) {
  if (!(bindstg_(bind_global_(s)) & bitofstg_(s_static)))
  if (!SymMember(s, used_out_of_line))
    used_out_of_line = (SymList *)global_cons2(SU_Inline, used_out_of_line, s);
}
#endif

static BindList *GlobalSharedBindListCopy(SaveFnState *st, BindList *bl);

static Binder *GlobalBinderCopy(SaveFnState *st, Binder *b) {
  if (h0_(b) != s_binder) return (Binder *)h0_(b);
  { Symstr *sym = bindsym_(b);
    Binder *bnew;
    size_t n;
    if (bindstg_(b) & (bitofstg_(s_virtual)|b_globalregvar|bitofstg_(s_auto)))
      n = sizeof(Binder);
    else {
      if (attributes_(b) & A_GLOBALSTORE) return b;
      n = SIZEOF_NONAUTO_BINDER;
    }
    if (isgensym(sym)) sym = gensymvalwithname(YES, symname_(sym));
    bnew = global_mk_binder(NULL, sym, bindstg_(b), bindtype_(b));
    memcpy(bnew, b, n);
    bindsym_(bnew) = sym;
    h0_(b) = (AEop)bnew;
    st->copied = mkSynBindList(st->copied, b);
    if (bindstg_(b) & b_bindaddrlist)
      bnew->bindaddr.bl = GlobalSharedBindListCopy(st, b->bindaddr.bl);
    return bnew;
  }
}

static BindList *GlobalBindListCopy(SaveFnState *st, BindList *bl) {
  BindList *bl_new = NULL;
  BindList *bp, **bpp = &bl_new;
  for (; bl != NULL; bl = bl->bindlistcdr, bpp = &bp->bindlistcdr) {
    Binder *b = GlobalBinderCopy(st, bl->bindlistcar);
    bp = (BindList *)global_cons2(SU_Inline, NULL, b);
    *bpp = bp;
  }
  return bl_new;
}

static BindList *GlobalSharedBindListCopy(SaveFnState *st, BindList *bl) {
  BindListIndex *p = st->sharedbindlists;
  if (bl == NULL) return NULL;

  for (; p != NULL; p = cdr_(p))
    if (bl == p->orig)
      return p->copy;

  { BindList *bl_new = (BindList *)global_cons2(SU_Inline,
                                                GlobalSharedBindListCopy(st, bl->bindlistcdr),
                                                GlobalBinderCopy(st, bl->bindlistcar));
    st->sharedbindlists = (BindListIndex *)syn_list3(st->sharedbindlists, bl, bl_new);
    return bl_new;
  }
}

static Inline_ArgDesc *ArgDesc_Find(Binder *b, Inline_ArgDesc *ad) {
  for (; ad != NULL; ad = cdr_(ad))
    if (b == ad->arg)
      return ad;
  return NULL;
}

static bool IsSTRWExpansion(Icode *ic, int32 *offset) {
  /* Already checked that ic->op is STRBK */
  Icode *ic2 = ic+1,
        *ic3 = ic+2;
  if ((ic2->op & J_TABLE_BITS) == J_SHRK && ic2->m.i == 8 &&
      ic->r1.r == ic2->r2.r &&
      (ic3->op & J_TABLE_BITS) == J_STRBK && ic3->r2.r == ic->r2.r &&
      ic3->r1.r == ic2->r1.r &&
      (target_lsbytefirst ? ic3->m.i == ic->m.i+1 :
                            ic3->m.i+1 == ic->m.i)) {
    *offset = target_lsbytefirst ? ic->m.i : ic->m.i-1;
    return YES;
  }
  return NO;
}

bool Inline_Save(BindList *local_binders, BindList *regvar_binders) {
  SavedFnList *p;
  SaveFnState st;
  st.copied = NULL;
  st.sharedbindlists = NULL;
#ifndef CPLUSPLUS
  if (usrdbg(DBG_ANY))
  {   if (currentfunction.xrflags & xr_defloc ||
          !(bindstg_(bind_global_(currentfunction.symstr)) & b_maybeinline))
          return NO;
  }
#endif
  p = (SavedFnList *)GlobAlloc(SU_Inline, sizeof(*p));
  p->fn.fndetails = currentfunction;
  if (p->fn.fndetails.structresult != NULL)
    p->fn.fndetails.structresult = GlobalBinderCopy(&st, p->fn.fndetails.structresult);
#ifdef CPLUSPLUS
  if (p->fn.fndetails.xrflags & xr_defext)
    Inline_RealUse(p->fn.fndetails.symstr);
#else
  syn_inline_constraints(&p->fn.intref, &p->fn.modstatic);
  if (!(bindstg_(bind_global_(p->fn.fndetails.symstr)) & (b_maybeinline|bitofstg_(s_static))))
    Inline_MakeExternalDefinition(p->fn.fndetails.symstr);
#endif
  p->fn.fndetails.argbindlist = GlobalBindListCopy(&st, p->fn.fndetails.argbindlist);
  p->fn.var_binders = GlobalBindListCopy(&st, local_binders);
  p->fn.reg_binders = GlobalBindListCopy(&st, regvar_binders);
  p->fn.top_block = p->fn.bottom_block = NULL;
  p->maxreg = vregister(INTREG);
  { LabelNumber *l = nextlabel();
    p->maxlabel = lab_name_(l);
  }
  { VRegnum n = p->maxreg;
    Inline_VRegIndex *vt = (Inline_VRegIndex *)GlobAlloc(SU_Inline, p->maxreg * sizeof(int32));
    while (--n > NMAGICREGS) vt[n].rs = vregsort(n);
    p->vregtypetab = vt;
  }
  { BindList *bl = p->fn.fndetails.argbindlist;
    Inline_ArgDesc **adp = &p->args;
    p->args = NULL;
    for (; bl != NULL; bl = bl->bindlistcdr) {
      Inline_ArgDesc *ad = (Inline_ArgDesc *)GlobAlloc(SU_Inline, sizeof(*p));
      cdr_(ad) = NULL; ad->arg = bl->bindlistcar; ad->flags = 0;
      *adp = ad; adp = &cdr_(ad);
    }
  }
  { BlockHead *b = top_block;
    BlockHead *blast = NULL, *bnew;
    for (b = top_block; b != NULL; b = blkdown_(b), blast = bnew) {
      bnew = (BlockHead *)GlobAlloc(SU_Inline, sizeof(*bnew));
      *bnew = *b;
      blkup_(bnew) = blast;
      if (blast == NULL)
        p->fn.top_block = bnew;
      else
        blkdown_(blast) = bnew;
      if (blkflags_(b) & BLKSWITCH) {
        int32 n = blktabsize_(b);
        LabelNumber **sw_old = blktable_(b);
        LabelNumber **sw_new = (LabelNumber **)GlobAlloc(SU_Inline, n * sizeof(LabelNumber*));
        while (--n >= 0) sw_new[n] = (LabelNumber *)lab_xname_(sw_old[n]);
        blktable_(bnew) = sw_new;
      } else {
        blknext_(bnew) = (LabelNumber *)lab_xname_(blknext_(b));
        if (blkflags_(b) & BLK2EXIT)
          blknext1_(bnew) = (LabelNumber *)lab_xname_(blknext1_(b));
      }
      blklab_(bnew) = (LabelNumber *)lab_name_(blklab_(b));
      blkstack_(bnew) = GlobalSharedBindListCopy(&st, blkstack_(b));
      { int32 n = blklength_(b), len = n;
        Icode *code_old = blkcode_(b);
        Icode *code_new = n == 0 ? (Icode *)DUFF_ADDR :
                                   (Icode *)GlobAlloc(SU_Inline, n * sizeof(Icode));
        blkcode_(bnew) = code_new;
        while (--n >= 0) {
          Icode *ic_old = &code_old[n];
          Icode *ic_new = &code_new[n];
          J_OPCODE op = ic_old->op & J_TABLE_BITS;
          *ic_new = *ic_old;
          if (op == J_SETSPENV) {
            ic_new->m.bl = GlobalSharedBindListCopy(&st, ic_new->m.bl);
            ic_new->r2.bl = GlobalSharedBindListCopy(&st, ic_new->r2.bl);
          } else if (op == J_SETSPGOTO) {
            ic_new->r2.bl = GlobalSharedBindListCopy(&st, ic_new->r2.bl);
            ic_new->m.l = (LabelNumber *)lab_xname_(ic_new->m.l);
          } else if (uses_stack(op) || op == J_CALLK ||
                     op==J_ADCON || op == J_INIT || op == J_INITF || op == J_INITD) {
            Binder *b = ic_new->m.b = GlobalBinderCopy(&st, ic_new->m.b);
            Inline_ArgDesc *ad = ArgDesc_Find(b, p->args);
            if (ad != NULL) {
              if (stores_r1(op))
                ad->flags |= IA_Updated;
              else if (op == J_LDRV) {
                Icode *next1 = ic_new + 1;
                if ( n+1 < len &&
                     uses_mem(next1->op) && reads_r2(next1->op) && !reads_r3(next1->op) &&
                     next1->r2.r == ic_new->r1.r) {
                  int32 accesssize;
                  J_OPCODE nextop = next1->op & J_TABLE_BITS;
#ifdef TARGET_LACKS_HALFWORD_STORE
                  int32 k;
                  if (nextop == J_STRBK &&
                      n+3 < len && IsSTRWExpansion(next1, &k) && k == 0)
                    accesssize = MEM_W;
                  else
#endif
                  if (next1->m.i == 0) {
                    accesssize = j_memsize(nextop);
                    if ((ad->flags & IA_AccessSet) && ad->accesssize != accesssize)
                      accesssize = -1;
                  } else
                    accesssize = -1;
                  ad->accesssize = accesssize;
                  ad->flags |= IA_AccessSet;
                }
              } else
                ad->flags |= IA_OddAccess;
            }
          } else if (op==J_STRING)
            ic_new->m.s = globalize_strseg(ic_new->m.s);
        }
      }
    }
    blkdown_(blast) = NULL;
    p->fn.bottom_block = blast;
  }
  { SynBindList *bl = st.copied;
    for (; bl != NULL; bl = bl->bindlistcdr)
      h0_(bl->bindlistcar) = s_binder;
  }
  cdr_(p) = saved_fns;
  saved_fns = p;
  return YES;
}

static BindList *FromGlobalSharedBindListCopy(SaveFnState *st, BindList *bl);

static Binder *FromGlobalBinderCopy(SaveFnState *st, Binder *b) {
  if (h0_(b) != s_binder) return (Binder *)h0_(b);
  { Binder *bnew;
    size_t n;
    if (bindstg_(b) & (bitofstg_(s_virtual)|b_globalregvar|bitofstg_(s_auto)))
      n = sizeof(Binder);
    else {
      if (attributes_(b) & A_GLOBALSTORE) return b;
      n = SIZEOF_NONAUTO_BINDER;
    }
    bnew = mk_binder(bindsym_(b), bindstg_(b), bindtype_(b));
    memcpy(bnew, b, n);
    h0_(b) = (AEop)bnew;
    st->copied = mkSynBindList(st->copied, b);
    if (bindstg_(b) & bitofstg_(s_auto)) {
      if (bindstg_(b) & b_bindaddrlist)
        bnew->bindaddr.bl = FromGlobalSharedBindListCopy(st, b->bindaddr.bl);
      if (bindxx_(b) != GAP) bindxx_(bnew) = st->vregindex[bindxx_(b)].r;
    }
    return bnew;
  }
}

static BindList *FromGlobalBindListCopy(SaveFnState *st, BindList *bl) {
  BindList *bl_new = NULL;
  BindList *bp, **bpp = &bl_new;
  for (; bl != NULL; bl = bl->bindlistcdr, bpp = &bp->bindlistcdr) {
    Binder *b = FromGlobalBinderCopy(st, bl->bindlistcar);
    bp = (BindList *)binder_cons2(NULL, b);
    *bpp = bp;
  }
  return bl_new;
}

static BindList *FromGlobalSharedBindListCopy(SaveFnState *st, BindList *bl) {
  BindListIndex *p = st->sharedbindlists;
  if (bl == NULL) return st->nullenv;
  for (; p != NULL; p = cdr_(p))
    if (bl == p->orig)
      return p->copy;

  { BindList *bl_new = (BindList *)binder_cons2(FromGlobalSharedBindListCopy(st, bl->bindlistcdr),
                                                FromGlobalBinderCopy(st, bl->bindlistcar));
    st->sharedbindlists = (BindListIndex *)syn_list3(st->sharedbindlists, bl, bl_new);
    return bl_new;
  }
}

static LabelNumber *FromGlobalLabel(LabelNumber **index, Inline_RestoreControl *rc, LabelNumber *old) {
  return !is_exit_label(old) ? index[(int32)old] :
         rc != NULL && rc->exitlabel != NULL ? rc->exitlabel :
                               old;
}

static BindList *BindListCopy(BindList *bl) {
  BindList *bl_new = NULL;
  BindList *bp, **bpp = &bl_new;
  for (; bl != NULL; bl = bl->bindlistcdr, bpp = &bp->bindlistcdr) {
    bp = (BindList *)binder_cons2(NULL, bl->bindlistcar);
    *bpp = bp;
  }
  return bl_new;
}

static SavedFnList *FindSavedFn(Inline_SavedFn *fn) {
  SavedFnList *p;
  for (p = saved_fns; p != NULL; p = cdr_(p))
    if (fn->fndetails.symstr == p->fn.fndetails.symstr)
      return p;
  return NULL;
}

void Inline_Restore(Inline_SavedFn *fn, Inline_RestoreControl *rc) {
  SaveFnState st;
  SavedFnList *p = FindSavedFn(fn);
  Inline_VRegIndex *vt = p->vregtypetab;
  int32 n = p->maxreg;
  BindList *argb_orig = fn->fndetails.argbindlist;
  Inline_ArgDesc *ad;
  while (--n >= 0) vt[n].r = n <= NMAGICREGS ? n : vregister(vt[n].rs);
  st.copied = NULL;
  st.sharedbindlists = NULL;
  st.vregindex = p->vregtypetab;
  if (fn->fndetails.structresult != NULL)
    fn->fndetails.structresult = FromGlobalBinderCopy(&st, fn->fndetails.structresult);
  fn->fndetails.argbindlist = FromGlobalBindListCopy(&st, argb_orig);
  for (ad = p->args; ad != NULL; ad = cdr_(ad))
      ad->argsubst = NULL;
  if (rc != NULL) {
    Inline_ArgSubstList *as = rc->argreplace;
    BindList **blp = &fn->fndetails.argbindlist;
    for (ad = p->args; ad != NULL; ad = cdr_(ad)) {
    /* Prune from the argument bindlist those arguments which we know can be
       substituted for
     */
      BindList *bl = *blp;
      if (as == NULL) break;
      if (as->arg == ad->arg) {
        Inline_ArgSubstList *thisas = as;
        as = cdr_(as);
        if (!(ad->flags & (IA_Updated + IA_OddAccess))) {
          *blp = bl->bindlistcdr;
          ad->argsubst = thisas;
          if (debugging(DEBUG_CG)) {
            cc_msg("Substitution for %s$b: ",
              thisas->sort==T_AdconV ? "*" : "",
              thisas->arg);
            pr_expr(thisas->replacement.ex);
            cc_msg("\n");
          }
          continue;
        }
        thisas->refsleft = YES;
      }
      blp = &bl->bindlistcdr;
    }
  }
  if (rc != NULL) {
    BindList *bl = BindListCopy(fn->fndetails.argbindlist);
    BindList *argb = bl;
    n = length((List *)bl);
    rc->env = st.nullenv = (BindList *)nconc((List *)bl, (List *)rc->env);
    for (; --n >= 0; argb = argb->bindlistcdr) {
        Binder *b = argb->bindlistcar;
        b->bindaddr.bl = argb;
        bindstg_(b) |= b_bindaddrlist;
    }
  } else
    st.nullenv = NULL;
  fn->var_binders = FromGlobalBindListCopy(&st, fn->var_binders);
  fn->reg_binders = FromGlobalBindListCopy(&st, fn->reg_binders);
  { LabelNumber **labelindex = (LabelNumber **)SynAlloc(p->maxlabel * sizeof(LabelNumber *));
    BlockHead *b = fn->top_block;
    BlockHead *blast = NULL, *bnew;
    Inline_ArgDesc *ad;
    Inline_ArgSubstList *sl;
    for (n = 1; n < p->maxlabel; n++) labelindex[n] = nextlabel();
    fn->top_block = fn->bottom_block = NULL;
    for (; b != NULL; b = blkdown_(b), blast = bnew) {
      bool isexit = NO;
      bnew = (BlockHead *)BindAlloc(sizeof(BlockHead));
      *bnew = *b;
      blkup_(bnew) = blast;
      if (blast == NULL)
        fn->top_block = bnew;
      else
        blkdown_(blast) = bnew;
      if (blkflags_(b) & BLKSWITCH) {
        int32 n = blktabsize_(b);
        LabelNumber **sw_old = blktable_(b);
        LabelNumber **sw_new = (LabelNumber **)BindAlloc(n * sizeof(LabelNumber*));
        while (--n >= 0) sw_new[n] = FromGlobalLabel(labelindex, rc, sw_old[n]);
        blktable_(bnew) = sw_new;
      } else {
        if (is_exit_label(blknext_(b))) isexit = YES;
        blknext_(bnew) = FromGlobalLabel(labelindex, rc, blknext_(b));
        if (blkflags_(b) & BLK2EXIT)
          blknext1_(bnew) = FromGlobalLabel(labelindex, rc, blknext1_(b));
      }
      { LabelNumber *lab = FromGlobalLabel(labelindex, rc, blklab_(b));
        blklab_(bnew) = lab;
        lab->block = bnew;
      }
      blkstack_(bnew) = FromGlobalSharedBindListCopy(&st, blkstack_(b));
      { int32 n_in = blklength_(b), n_out = n_in, n;
        Icode *code_old = blkcode_(b);
        Icode *code_new;
        bool copied = NO;
        for (n = n_in; --n >= 0; ) {
          J_OPCODE op = code_old[n].op & J_TABLE_BITS;
          if (op == J_ADCON) {
            Binder *b = code_old[n].m.b;
            if ((bindstg_(b) & bitofstg_(s_extern)) &&
                !(bindstg_(b) & (b_undef|b_fnconst)) &&
                !(binduses_(b) & (u_bss|u_constdata)) &&
                b != datasegment &&
                bindaddr_(b) != 0) {
              n_out++;
            }
          }
        }
        code_new = n_out == 0 ? (Icode *)DUFF_ADDR :
                                (Icode *)BindAlloc(n_out * sizeof(Icode));
        blkcode_(bnew) = code_new;
        blklength_(bnew) = n_out;
        for (n = n_out; --n, --n_in >= 0; ) {
          J_OPCODE op = code_old[n_in].op;
          VRegInt r1 = code_old[n_in].r1,
                  r2 = code_old[n_in].r2,
                  m = code_old[n_in].m,
                  r4 = code_old[n_in].r4;
          J_OPCODE opx = op & J_TABLE_BITS;
          if (uses_r1(op)) r1.r = vt[r1.r].r;
          if (uses_r2(op)) r2.r = vt[r2.r].r;
          if (uses_r3(op)) m.r = vt[m.r].r;
          if (uses_r4(op)) r4.r = vt[r4.r].r;
          if (opx == J_SETSPENV) {
            if (m.bl == r2.bl && !copied && rc != NULL) {
            /* m = r2 only when both are empty, just before function exits
               (deliberately not optimised out to give somewhere for
                CSE-introduced binders to be popped).
             */
              n_out--;
              continue;
            }
            m.bl = FromGlobalSharedBindListCopy(&st, m.bl);
            r2.bl = FromGlobalSharedBindListCopy(&st, r2.bl);
          } else if (opx == J_SETSPGOTO) {
            r2.bl = FromGlobalSharedBindListCopy(&st, r2.bl);
            m.l = FromGlobalLabel(labelindex, rc, m.l);
          } else if (opx == J_LDRV &&
                     (ad = ArgDesc_Find(m.b, p->args)) != NULL &&
                     (sl = ad->argsubst) != NULL) {
            m.b = sl->replacement.b;
            switch (sl->sort) {
            default:        syserr("Inline_Restore"); break;
            case T_Binder:  break;
            case T_Adcon:   op = J_ADCON; break;
            case T_Int:     op = J_MOVK, m.i = intval_(sl->replacement.ex); break;
            case T_AdconV:
              { Icode *next1 = &code_new[n+1];
                J_OPCODE nextop = next1->op & J_TABLE_BITS;
                if ( n+1 < n_out &&
                     uses_mem(nextop) && reads_r2(nextop) && !reads_r3(nextop) &&
                     next1->r2.r == r1.r) {
                  int32 i = n_out - n - 2;
                  int32 k;
                  if (sl->size == -1 || sl->size != ad->accesssize) {
#ifdef TARGET_LACKS_HALFWORD_STORE
                    if (nextop == J_STRBK &&
                        n+3 < n_out && IsSTRWExpansion(next1, &k)) {
                      Icode *next3 = &code_new[n+3];
                      next3->op = J_addvk(next3->op);
                      next3->r2 = next3->m;
                      next3->m.b = sl->replacement.b;
                    }
#endif
                    op = J_addvk(next1->op), r2 = next1->m;
                  } else {
#ifdef TARGET_LACKS_HALFWORD_STORE
                    if (nextop == J_STRBK &&
                        n+3 < n_out && IsSTRWExpansion(next1, &k) && k == 0) {
                      i -= 2;
                      if (i > 0) memmove(next1+1, next1+3, (size_t)i * sizeof(Icode));
                      n_out -= 2;
                      op = J_STRV+J_ALIGN4;
                    } else
#endif
                    if (nextop == J_LDRBK || nextop == J_LDRWK)
                      op = J_LDRV+J_ALIGN4;
                    else if (nextop == J_STRWK || nextop == J_STRBK)
                      op = J_STRV+J_ALIGN4;
                    else
                      op = J_KtoV(next1->op);
                  }
                  r1 = next1->r1;
                  if (i > 0) memmove(next1, next1+1, (size_t)i * sizeof(Icode));
                  n_out--;
                } else
                  op = J_ADCONV;
              }
              break;
            }
          } else if (opx == J_ADCON) {
            m.b = FromGlobalBinderCopy(&st, m.b);
            if ((bindstg_(m.b) & bitofstg_(s_extern)) &&
                !(bindstg_(m.b) & (b_undef|b_fnconst)) &&
                !(binduses_(m.b) & (u_bss|u_constdata)) &&
                m.b != datasegment) {
              if (bindaddr_(m.b) != 0) {
                code_new[n].op = J_ADDK;
                code_new[n].r1 = r1;
                code_new[n].r2 = r1;
                code_new[n].m.i = bindaddr_(m.b);
                code_new[n].r4.i = 0;
                n--;
              }
              m.b = datasegment;
            }
          } else if (uses_stack(op) || opx == J_CALLK ||
                     opx == J_INIT || opx == J_INITF || opx == J_INITD)
            m.b = FromGlobalBinderCopy(&st, m.b);

          if (rc != NULL && isexit && register_movep(op) && r1.r == rc->resultreg) {
            r1.r = rc->newresultreg;
            isexit = NO;
            blkflags_(b) |= BLKREXPORTED;
          }
          copied = YES;
          code_new[n].op = op;
          code_new[n].r1 = r1;
          code_new[n].r2 = r2;
          code_new[n].m = m;
          code_new[n].r4 = r4;
        }
        blklength_(bnew) = n_out;
      }
    }
    blkdown_(blast) = NULL;
    fn->bottom_block = blast;
  }
  { SynBindList *bl = st.copied;
    for (; bl != NULL; bl = bl->bindlistcdr)
      h0_(bl->bindlistcar) = s_binder;
  }
  { VRegnum n = p->maxreg;
    Inline_VRegIndex *vt = p->vregtypetab;
    while (!isany_realreg_(--n)) vt[n].rs = vregsort(vt[n].r);
  }
}

void Inline_Init() {
  saved_fns = NULL;
  used_out_of_line = NULL;
}

void Inline_CompileOutOfLineCopy(Inline_SavedFn *fn) {
  char v[128];
  cg_sub_reinit();
  Inline_Restore(fn, NULL);
  currentfunction = fn->fndetails;
  top_block = fn->top_block; bottom_block = fn->bottom_block;
  if (debugging(DEBUG_CG)) {
    sprintf(v, "Out-of-line %s", symname_(fn->fndetails.symstr));
    flowgraf_print(v, NO);
  }
#if !defined CPLUSPLUS && defined TARGET_HAS_DEBUGGER
{ int olddbg = usrdbgmask;
  usrdbgmask = 0;
/*  if (usrdbg(DBG_PROC+DBG_VAR))
  {   dbg_proc(fn->fndetails.symstr, fn->type,
               (fn->fndetails.xrflags & xr_defext) != 0,
               fn->fndetails.fl);
  }
  if (usrdbg(DBG_VAR))
  {   BindList *n;
      for (n = fn->fndetails.argbindlist; n; n = n->bindlistcdr)
          dbg_locvar(n->bindlistcar, fn->fndetails.fl);
  }*/
#endif
  cg_topdecl2(fn->var_binders, fn->reg_binders);
#if !defined CPLUSPLUS && defined TARGET_HAS_DEBUGGER
  usrdbgmask = olddbg;
}
#endif
}

void Inline_Tidy() {
  SavedFnList *p;
  for (p = saved_fns; p != NULL; p = cdr_(p))
    if (SymMember(p->fn.fndetails.symstr, used_out_of_line)) {
#ifdef CPLUSPLUS
      { char v[128+5];
        strcpy(v, "x$i$"); strcpy(v+4, symname_(p->fn.fndetails.symstr));
        var_cc_private_flags |= 0x40000000;   /* set COMDEF attribute */
        codebuf_reinit1(v);
      }
#endif
      Inline_CompileOutOfLineCopy(&p->fn);
    }
#ifndef CPLUSPLUS
    else if (p->fn.fndetails.xrflags & xr_defext)
    {   /* Make sure they supply an external definition - required by C99 */
        obj_symref(p->fn.fndetails.symstr, xr_code, 0);
        if (p->fn.intref || p->fn.modstatic)
        {   //FileLine temp = curlex.fl;
            if (p->fn.intref)
            {   //curlex.fl = p->fn.fndetails.fl;
                cc_rerr(inline_rerr_inline_internalref, p->fn.fndetails.symstr, p->fn.intref);
            }
            if (p->fn.modstatic)
            {  // curlex.fl = i->modstatic->fileline;
                /* modstatic wasn't globalized, so can't print it */
                cc_rerr(inline_rerr_inline_modstatic, p->fn.fndetails.symstr);
            }
            //curlex.fl = temp;
        }
    }
#endif
}
