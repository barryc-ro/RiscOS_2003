/*
 * mip/bind.h:
 * Copyright (C) Acorn Computers Ltd., 1988-1990.
 * Copyright (C) Codemist Ltd., 1987-1992.
 * Copyright (C) Advanced RISC Machines Limited, 1991-1992.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#ifndef _bind_h
#define _bind_h

#ifndef _defs_LOADED
#  include "defs.h"
#endif

/* The next three lines interface syn.c and bind.c: see syn.c for more.  */
#define DUPL_OK            0x001
#define TOPLEVEL           0x002      /* Global lexical scope and global */
                                      /* storage scope...                */
#define GLOBALSCOPE        0x004      /* Not global lexical scope, but   */
                                      /* global storage scope for e.g.   */
                                      /* types defined in argument lists */
#define LOCALSCOPE         0x000      /* Local lexical and storage scope */

extern char *sym_name_table[];  /* translation back to strings  */

#define SYM_LOCAL          0
#define SYM_GLOBAL         1

extern Symstr *sym_lookup(char *name, int glo);

extern Symstr *sym_insert(char *name, AEop type);

extern Symstr *sym_insert_id(char *name);

extern Symstr *gensymval(bool glo);
extern Symstr *gensymvalwithname(bool glo, char *name);

extern bool isgensym(Symstr *sym);

/* temporary home, pending demise... */
extern int32 evaluate(Expr *a);

extern Binder *global_mk_binder(Binder *b, Symstr *c, SET_BITMAP d,
                                TypeExpr *e);
extern Binder *mk_binder(Symstr *c, SET_BITMAP d, TypeExpr *e);
extern TagBinder *global_mk_tagbinder(TagBinder *b, Symstr *c, AEop d);
extern TagBinder *clone_tagbinder(Symstr *newname, TagBinder *b);
extern LabBind *mk_labbind(LabBind *b, Symstr *c);

#define gentempbinderwithname(typ, name) \
  mk_binder(gensymvalwithname(0, name), bitofstg_(s_auto), typ)

#define gentempbinder(typ) \
  mk_binder(gensymval(0), bitofstg_(s_auto), typ)

#define genglobinder(typ) \
  global_mk_binder(0, gensymval(1), bitofstg_(s_static), typ)

extern void add_toplevel_binder(Binder *b);

extern Expr *globalize_int(int32 n);

/* globalize_typeexpr caches only basic types (including structs/typedefs) */
/* and pointers to things which are already cached.  Tough ched arrays/fns */
extern TypeExpr *globalize_typeexpr(TypeExpr *t);

extern TypeExpr *copy_typeexpr(TypeExpr *t);

typedef enum {
  TD_NotDef,
  TD_ContentDef,
  TD_Decl
} TagDefSort;

/* The distinction between TD_ContentDef and TD_Decl is to allow
     struct a { int x; }; struct a;
   but forbid
     struct a { int x; }; struct a { anything };
   @@@ AM: it may be subsumable into the TB_DEFD needed for C++ (q.v.)
 */

typedef ClassMember *ScopeSaver;

extern int push_scope(TagBinder *class_tag);
extern int push_var_scope(ScopeSaver init);

extern ScopeSaver pop_scope(int);
extern ScopeSaver pop_scope_no_check(int);

#define FB_INHERIT   1
#define FB_LOCALS    2
#define FB_CLASSES   4
#define FB_GLOBAL    8
#define FB_THISSCOPE 16
#define FB_ACCESSOK  32
#define FB_MEMBER    64
#define FB_KEEPI     128       /* keep the top invisible node, if any */
#define FB_TYPEDEF   256
#define LOCALSCOPES  FB_LOCALS
#define ALLSCOPES    (FB_LOCALS+FB_CLASSES+FB_GLOBAL+FB_INHERIT)
#define INDERIVATION FB_INHERIT
#define INCLASSONLY  0

extern Binder *findbinding(Symstr *sv, TagBinder *cl, int flags);
extern Expr *path_to_member(ClassMember *member, TagBinder *cl, int flags);
extern TagBinder *findtagbinding(Symstr *sv, TagBinder *cl, int flags);

/*
 * In the following, bindflg takes any combination of TOPLEVEL + GLOBALTAG.
 */
extern TagBinder *instate_tagbinding(Symstr *sv, AEop s, TagDefSort defining,
        int bindflg);

extern void instate_alias(Symstr *a, Binder *b);

extern Binder *instate_declaration(DeclRhsList *d, int declflag);

extern ClassMember *instate_member(DeclRhsList *d, int bindflg);

extern void settagmems(TagBinder *b, ClassMember *l);

extern Binder *implicit_decl(Symstr *a, int32 fn);

extern void reset_vg_after_init_of_tentative_defn(void);

extern LabBind *label_define(Symstr *id);
extern LabBind *label_reference(Symstr *id);
extern void label_resolve(void);

extern void bind_cleanup(void);
extern void bind_init(void);

extern char *snb_dynamic_bind(int argnum);

#ifdef CPLUSPLUS
extern int push_multi_scope(TagBinder *class_tag);
extern TypeExpr *memfn_realtype(TypeExpr *fntype, TagBinder *cl);
extern Binder *instate_memfn(Symstr *fsv, TypeExpr *t);
extern Expr *globalize_expr(Expr *e);
extern TagBinder *current_member_scope(void);
extern TagBinder *set_access_context(TagBinder *cl, Binder *fn);
extern void mk_friend_class(TagBinder *classtag, TagBinder *ofclass);
extern void mk_friend_fn(Binder *bspecific, TagBinder *ofclass);
/* derived_from is logically 'bool' but returns the base ClassMember:   */
extern ClassMember *derived_from(TagBinder *base, TagBinder *scope);
extern Binder *genreftemp(TypeExpr *t);

/* The following provide for-style iterators for C++ classes which      */
/* can steer round CB_CORE etc.                                         */
typedef struct ClassMemo { struct ClassMember *outer, *core; } ClassMemo;
extern ClassMember *ClassMemo_next(ClassMemo *m);
extern ClassMember *ClassMemo_first(ClassMemo *m, ClassMember *p);
#define forClassMember(p,i,m) \
    for (p = ClassMemo_first(m, i); p != 0; p = ClassMemo_next(m))
#endif

#endif

/* end of mip/bind.h */
