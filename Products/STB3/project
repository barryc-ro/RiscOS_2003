#! /usr/bin/env perl
my ($dir,$script)=$0=~m@\A(.*/)?([^/]+)/*\Z@;
$|=1;

package TagSet;
use strict;

sub new {
  my($class)=@_;
  my $self={ tags => undef };
  bless $self, ref($class)||$class;
  return $self;
};

sub merge_tags {
  my($self, $tags)=@_;
  if(defined $self->{'tags'}) {
    my $tag;
    foreach $tag (keys %{$self->{'tags'}}) {
      delete $self->{'tags'}{$tag} unless exists $tags->{$tag};
    };
  } else {
    $self->{'tags'}={%{$tags}};
  };
};

sub get_tags {
  my($self)=@_;
  return keys %{$self->{'tags'}};
};

package DBase;

# Utility routines.
sub read_db {
  my($file)=@_;
  my $errors=0;
  my %db;
  local *F;
  open(F, "<$file")||main::failed("open($file)");
  while(<F>) {
    chomp;
    # Remove comments.
    s/\#.*\Z//;
    # Skip blank lines.
    next unless /\S/;
    # Split into words.
    my ($path, $tag)=split(/\s+/, $_);
    if(defined $tag) {
      $db{$path}=$tag;
    } else {
      warn("$script:$file:$.: Bad database line.\n");
      $errors++;
    };
  };
  close(F)||main::failed("close($file)");
  die("$script: Found $errors errors.\n") if $errors;
  return \%db;
};

sub write_db {
  my($file, $db)=@_;
  my %db=%{$db};
  local *IN;
  local *OUT;
  open(IN, "<$file")||main::failed("open($file)");
  open(OUT, ">$file.tmp")||main::failed("open($file.tmp)");
  while(<IN>) {
    chomp;
    # Remove comments.
    my $comment=s/(\#.*)\Z//?$1:"";
    if(/\S/) { # Non-blank lines.
      # Split into words.
      my ($path, $tag, @other)=split(/\s+/, $_);
      if(defined $db{$path}) { # Do we still want it?
	push @other, $comment if length($comment);
	printf(OUT "%-60s %s\n", $path,
	       join(" ", $db{$path}, @other))
	  or main::failed("write($file.tmp)");
	# Only output it once.
	delete $db{$path};
      };
    } else { # Blank lines - just copy out.
      print OUT "$comment\n"||main::failed("write($file.tmp)");
    };
  };
  close(IN)||main::failed("close($file)");
  my $path;
  # Write out the new modules.
  foreach $path (sort keys %db) {
    printf(OUT "%-60s %s\n", $path, $db{$path})||main::failed("write($file.tmp)");
  };
  close(OUT)||main::failed("close($file.tmp)");
  rename("$file.tmp", $file)||main::failed("rename($file.tmp,$file)");
};

# Public methods.
sub can {
  my($self, $method)=@_;
  return defined &{$method};
};

sub new {
  my($class, $file)=@_;
  my $self={ file => $file };
  $self->{'db'}=read_db($file);
  bless $self, ref($class)||$class;
  return $self;
};

# Write output.
sub flush {
  my($self)=@_;
  write_db($self->{'file'}, $self->{'db'});
};

sub tag {
  my $self=shift @_;
  if(@_ == 0) { # List
    return keys %{$self->{'db'}};
  } elsif(@_ == 1) { # Get
    return $self->{'db'}{$_[0]};
  } elsif(@_ == 2) { # Set
    if(defined $_[1]) {
      $self->{'db'}{$_[0]}=$_[1];
    } else {
      delete $self->{'db'}{$_[0]};
    }
  } else {
    die("Unknown tag mode.\n");
  };
};

sub cmd_add {
  my($self, @args)=@_;
  my $quote=0;
  my $tag=undef;

  while(@args) {
    my $arg=shift @args;
    if($arg=~/\A-/ && !$quote) {
      if($arg=~/\A-H/) {
	die("Usage: $script add {[options] <module>}...\n".
	    "  -A        Use the latest version.\n".
	    "  -r <tag>  Use a tagged version.\n");

      } elsif($arg=~/\A-A(.*)\Z/) {
	unshift @args, "-$1" if length($1);
	$tag="main";

      } elsif($arg=~/\A-r(.*)\Z/) {
	$tag=length($1)?$1:shift @args;
	die("$script add: -r needs an option.\n") unless defined $tag;

      } elsif($arg eq '--') {
	$quote=1;

      } else {
	die("$script add: Unknown option '$arg'\n");
      };

    } else {
      $quote=0; # Only quote a single argument?
      if(defined $tag || !defined($self->tag($arg))) {
	$self->tag($arg, defined($tag)?$tag:"main");
      };
    };
  };
  $self->flush;
};

sub cmd_remove {
  my($self, @args)=@_;
  my $arg;
  my $quote;

  foreach $arg (@args) {
    if($arg=~/^-/ && !$quote) {
      if($arg=~/^-H/) {
	die("Usage: $script remove <modules>\n");

      } elsif($arg eq '--') {
	$quote=1;

      } else {
	die("$script remove: Unknown option '$arg'\n");
      };
    } else {
      $quote=0;
      $self->tag($arg, "%remove");
    };
  };
  $self->flush;
};

sub update {
  my($self, $module)=@_;
  my $tag=$self->{'db'}{$module};
  if(!defined $tag) {
    die("$script update: Unknown module '$module'\n");
  };
  print "Updating module $module with tag $tag\n";
  push @{$self->{'update-bytag'}{$tag}}, $module;
  # Add sections to the obey file.
  my $builddir='<build$dir>';
  my $srcdir='<obey$dir>';
  # Create parent directories.
  my($head, $tail)=("", $module);
  # Strip the initial directory from the front since Build$dir is one 
  # level in.
  $tail=~s@^([^/]+)/@@;
  my $rodir=$1;
  while($tail=~s@^([^/]+)/@@) {
    $head.=".$1";
    $self->{'obey-parts'}{$head}=["cdir $builddir$head\n\n"];
  };
  my $ropath="$head.$tail";
  my @obey;
  push @obey, "ifthere $builddir$ropath then echo Removing $rodir$ropath\n";
  push @obey, "ifthere $builddir$ropath then wipe $builddir$ropath ~C~VR\n";
  if($tag ne '%remove') {
    push @obey, "echo Updating $rodir$ropath\n";
    push @obey, "copy $srcdir.$rodir$ropath $builddir$ropath ~C~D~F~N~PR~V\n";
    push @obey, "perl $builddir.BuildSys.perl.StripCVS $builddir$ropath\n";
  };
  push @obey, "\n";
  $self->{'obey-parts'}{"$ropath."}=\@obey;
};

# Update a structured obey file.
sub update_obey {
  my($self)=@_;
  my $obeyfile="update,feb";
  my $scripts=$self->{'obey-parts'};
  my @sections=sort keys %{$scripts};
  local *IN;
  local *OUT;
  open(OUT, ">$obeyfile.tmp")||main::failed("open($obeyfile.tmp)");
  # If the file already exists, copy it to the output with new sections
  # overriding old sections.  Sections are sorted on output.
  if(-e $obeyfile) {
    open(IN, "<$obeyfile")||main::failed("open($obeyfile)");
    my $skipping=0;
    while(<IN>) {
      if(/^\| Section (.*)$/) {
	my $filesect=$1;
	# Flush out new sections which are less than the current section.
	while(@sections && $sections[0] lt $filesect) {
	  my $section=shift @sections;
	  # Write out the section.
	  print "Flushing '$section'...\n";
	  print OUT "| Section $section\n";
	  print OUT @{$scripts->{$section}};
	};
	# Set the skipping flag iff this section is to be output anyway.
	$skipping=($filesect eq $sections[0]);
      }
      print OUT unless $skipping;
    };
    close(IN) or main::failed("close($obeyfile)");
  };
  print "Final sections: (".join(",", @sections).")\n";
  print OUT map {("| Section $_\n", @{$scripts->{$_}})} @sections;
  close(OUT) or main::failed("close($obeyfile.tmp)");
  rename("$obeyfile.tmp", $obeyfile) or
    main::failed("rename($obeyfile.tmp, $obeyfile)");
};

sub update_directories {
  my($self)=@_;

  # Update on a per-tag basis.
  my $tag;
  foreach $tag (keys %{$self->{'update-bytag'}}) {
    my @command;
    print "Updating directories with tag '$tag'.\n";
    if($tag eq 'main') {
      @command=qw(cvs -Q co -A);
    } else {
      @command=(qw(cvs -Q co -r), $tag);
    };
    push @command, @{$self->{'update-bytag'}{$tag}};
    print join(" ", @command), "\n";
    system(@command);
    die("$script update: cvs returned exit code $?\n") if $?;
  };
};

sub cmd_update {
  my($self, @args)=@_;

  if(@args) {
    my $module;
    my $quote;

    # Parse the arguments.
    foreach $module (@args) {
      if($module=~/^-/ && !$quote) {
	if($module=~/^-H/) {
	  die("Usage: $script update <modules>\n");
	  
	} elsif($module eq '--') {
	  $quote=1;
	  
	} else {
	  die("$script update: Unknown option '$module'\n");
	};
      } else {
	$quote=0;
	# Update each module.
	$self->update($module);
      };
    };
  } else {
    my $module;
    # Try all modules.
    foreach $module ($self->tag) {
      my $tag=$self->tag($module);
      my $oldtag;
      # Check the current sticky tag.
      if(-e "$module/CVS/Tag") {
	local *TAG;
	open(TAG, "<$module/CVS/Tag")||main::failed("open($module/CVS/Tag)");
	$oldtag=<TAG>;
	chomp $oldtag;
	$oldtag='main' unless $oldtag=~s/^T//;
	close(TAG)||main::failed("close($module/CVS/Tag)");
      } else {
	$oldtag='main';
      };
      # Update it if it's different.
      if($tag ne $oldtag) {
	print "Module: $module $oldtag->$tag\n";
	$self->update($module);
      }
    };
  };

  $self->update_obey();
  $self->update_directories();
};

sub freeze_tag {
  my($self, $module, $tag)=@_;
  my $status=0;
  open(P, "cvs -nq update -r $tag $module|")||main::failed("fork()");
  while(<P>) {
    $status|=1 if /^[\?MARC] /; # File modified
    $status|=2 if /^[CU] /; # File out of date
    $status|=4 if /^[^\?CUMAR] /; # Unknown
  };
  if(!close(P)) {
    main::failed("close()") if $!;
    print "# Exit status $? from $tag : $module\n";
    return 4;
  }
  return $status;
};

sub cmd_freeze {
  my($self, @args)=@_;
  local *P;
  my $module;
  # Default to all modules
  @args=sort $self->tag unless @args;
  foreach $module (@args) {
    print "# Handling module $module\n";
    my $tagset=TagSet->new;
    my $filetags;
    my $current;
    open(P, "cvs -q status -v $module|")||main::failed("fork()");
    while(<P>) {
      if(/^\s+Working revision:\s+([\d\.]+)\s+/) {
	$current=$1;
	$tagset->merge_tags($filetags) if(defined $filetags);
	$filetags={};
      } elsif(/^\s+(\S+)\s+\(revision:\s+([\d\.]+)\)$/) {
	my($name, $rev)=($1, $2);
	if($rev eq $current) {
	  $filetags->{$name}=1;
	};
      };
    };
    close(P)||main::failed("close()");
    $tagset->merge_tags($filetags) if(defined $filetags);
    my $tag;
    foreach $tag ($tagset->get_tags) {
      printf "%-40s %s\n", $module, $tag;
      my $status=$self->freeze_tag($module, $tag);
      print "#  Status: $status\n";
      next if($status &~1); # Files are out-of-date - this tag is bad.
      if($status & 1) { # Files are modified
	print "#  Warning: Files are modified.\n";
      };
    };
  };
};

package main;

sub usage {
  die "Usage: $script [global-options] <command> [specific-options]
Commands:
  add     [-A|-r <tag>] <modules>    Add module(s) to the database.
  update  [<modules>]                Update checked out tree from database.
  remove  <modules>                  Remove module(s) from the database.
  freeze  [<modules>]                Locate revision tag for module(s).
  status  [<modules>]                Briefly show module status.
Options:
  -u                                 Update checked out tree.
  -q                                 Preceed quietly.
  -H                                 Give detailed help.
";
};

# Parse the global options.
my %opts;
while(@ARGV && $ARGV[0]=~/^-/) {
  my $arg=shift @ARGV;
  if($arg eq '--') {
    last;
  } elsif($arg=~/\A-([uqH])\Z/) {
    $opts{$1}=1;
  } else {
    warn("$script: Unknown options '$arg'\n");
    usage;
  };
};

# Select the command.
my $command=shift @ARGV;
my $db=DBase->new("modlist");
my $method="cmd_$command";
if(!defined $command || !$db->can($method)) {
  warn("Unknown command: $command\n") if defined $command;
  usage;
};
$db->$method(@ARGV);
exit 0;

sub failed {
  die("$script: $_[0] failed: $!\n");
};


# Local Variables:
# mode: perl
# End:
