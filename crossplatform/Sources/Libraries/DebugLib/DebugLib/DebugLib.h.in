/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  John Beranek, Neil Bingham, Stewart Brodie
* Project(s): IP500 (<A164>)
*
* ----------------------------------------------------------------------------
* Copyright [2001] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: This automatically generated header file contains the necessary
*          core definitions required by other software to interface to the
*          DebugLib debugging library.
*
*          If the DEBUGLIB macro is not defined, then no functions are
*          declared but empty macros are defined to ensure that no code ends
*          up in the client software.  Otherwise a range of macros are
*          defined and sme function prototypes declared.
*
*****************************************************************************/
#ifndef DEBUGLIB_DEBUGLIB_H_INCLUDED
#define DEBUGLIB_DEBUGLIB_H_INCLUDED

#ifdef __cplusplus
extern "C"
{
#endif

/*****************************************************************************
* Include header files
*****************************************************************************/

#ifdef DEBUGLIB

#include <stdio.h>
@pace_include_stdarg_h@
@pace_include_stddef_h@

/* Boolean support: obtain from header file if available, otherwise define
 * them in compliance with ISO/IEC 9899:1999 (section 7.16 Boolean type and values <stdbool.h>)
 */
@pace_include_stdbool_h@
#ifndef bool
#  define bool _Bool
#  define _Bool int
#endif
#ifndef __bool_true_false_are_defined
#  define true (1)
#  define false (0)
#  define __bool_true_false_are_defined
#endif
#define DebugLib_BOOL bool

#ifdef __riscos
#  include "kernel.h"
#  define DEBUGLIB_OUTPUT_BUFFER_ON_RETTYPE _kernel_oserror *
#else
#  define DEBUGLIB_OUTPUT_BUFFER_ON_RETTYPE int
#endif

    /* The debug device identifiers - note that we do not necessarily
     * have all of these systems available - it depends on the configuration
     * choices made by the user when running the configure script.
     *
     * Output systems marked with a # are RISC OS only.
     */

    typedef enum
    {
      NULL_OUTPUT = 0,       /*     No valid debugging mechanisms found. */
      TRACKER_OUTPUT = 1,    /*  #  Output to !Tracker by Andy Armstrong. (Wimp window) */
      PRINTF_OUTPUT = 2,     /*     Standard printf statements. */
      NOTUSED_OUTPUT = 3,    /*     Not currently used. */
      PDEBUG_OUTPUT = 4,     /*  #  Parallel port debugging (JSmith). */
      REMOTEDB_OUTPUT = 5,   /*  #  Debug to specialised network socket (RBuckley). */
      DEBUGIT_OUTPUT = 6,    /*  #  Output to !List-Debug - Wimp based debug system (MChallis). */
      TML_OUTPUT = 7,        /*  #  Output to TML debugging podule. */
      FILE_OUTPUT = 8,       /*     Output to file. */
      SERIAL_OUTPUT = 9,     /*  #  Output to serial port (dual serial interface only). */
      DADEBUG_OUTPUT = 10,   /*  #  Output to dynamic area. */
      BRAINLINK_OUTPUT = 11, /*  #  Output to BrainLink .*/
      MYPRINTF_OUTPUT = 12,  /*     User-specified printf callback output */
      PTVLOG_OUTPUT = 13,    /*     PowerTV logging output */
      SYSLOG_OUTPUT = 14,    /*     UNIX syslog() */
      SOCKET_OUTPUT = 15,    /*     TCP sockets */

      /* Put new devices in the space above this comment */
      UNSET_OUTPUT           /*     Special case, not equivalent to NULL_OUTPUT (must be last!) */
    } debug_device;

    /* Some option flags for DebugLib calls */

#    define DebugLib_Options_TasknamePrefix_Off   0u
#    define DebugLib_Options_TasknamePrefix_On    1u
#    define DebugLib_Options_SerialPortLF_Off     0u
#    define DebugLib_Options_SerialPortLF_On      (1u<<1)
#    define DebugLib_Options_ScreenCornering_Off  0
#    define DebugLib_Options_ScreenCornering_On   (1u<<2)
#    define DebugLib_Options_StampDebug_Off       0
#    define DebugLib_Options_StampDebug_On        (1u<<3)
#    define DebugLib_Options_ThreadnamePrefix_Off 0
#    define DebugLib_Options_ThreadnamePrefix_On  (1u<<4)

#    define DebugLib_OutputBufferOff_Flag_UseCurrentDevice   1u

    /*
     * Finally, the API itself.
     */

    extern void debug_initialise (const char *, const char *, const char *);
    extern void debug_initialise_trace (debug_device, const char *);
    extern void debug_terminate (void);
    extern void debug_output_device (debug_device);
    extern DEBUGLIB_OUTPUT_BUFFER_ON_RETTYPE debug_output_buffer_on (int, int);
    extern void debug_output_buffer_off (int flags, debug_device device);
    extern void debug_beep (void);
    extern const char *debug_version (void);
    /* This call now deprecated, DebugLib now adds the atexit itself in debug_initialise */
#    define debug_atexit()

    /* Functions to set options */
    extern void debug_set_device (debug_device);
    extern void debug_set_raw_device (debug_device);
    extern void debug_set_trace_device (debug_device);
    extern void debug_set_taskname_prefix (DebugLib_BOOL);
    extern void debug_set_threadname_prefix (DebugLib_BOOL);
    extern void debug_set_area_level_prefix (DebugLib_BOOL);
    extern void debug_set_stamp_debug (DebugLib_BOOL);
    extern void debug_set_screen_cornering (DebugLib_BOOL);
    extern void debug_set_unbuffered_files (DebugLib_BOOL);
    extern void debug_set_serial_lf (DebugLib_BOOL);
    extern void debug_set_serial_port_speed (int);
    extern void debug_set_serial_port_number (int);
    extern void debug_set_dump_width (size_t);
    extern void debug_set_area_pad_limit (size_t);
    extern void debug_set_level (const char *);
    extern void debug_set_myprintf_callback(int (*)(const char *, ...));
    extern void debug_set_syslog_openlog_params (int open2param, int open3param, int faclevel);

    /* Functions to read settings/options */
    extern debug_device debug_read_device (void);

    /* Deprecated functions */
#    define debug_output_device(debug_device) debug_set_device(debug_device)
    extern void debug_set_options (unsigned int, int, int);

    /* Debug output functions that are masked by the macros. These declarations have to be in the
     * header file to avoid linking problems
     */
@pace_cc_check_printf_style_format@
    extern void _dprintf(const char *, const char * /*format*/, ...);
@pace_cc_check_printf_style_format@
    extern void _dprintf_raw(void *, const char * /*format*/, ...);
@pace_cc_check_printf_style_format@
    extern void _dfprintf(const char *, debug_device stream, const char * /*format*/, ...);
@pace_cc_check_printf_style_format@
    extern void _dvprintf(const char *area_level, const char *format, const va_list arg);
@pace_cc_no_check_format@

    extern void ddumpbuf(const char *area_level, const void *buffer, size_t size, size_t offset);

#    define dprintf(a)                  _dprintf a
#    define dprintf_raw(a)              _dprintf_raw a
#    define dvprintf(a)                 _dvprintf a
#    define dfprintf(a)                 _dfprintf a

     /* End of the API */

#else
/* else, macro out DebugLib function calls so no code is generated */

/*****************************************************************************
 * MACROS - Copied DebugLib 0.61 in the renaissa tree
 ****************************************************************************/
#  define debug_initialise(a,b,c)
#  define debug_output_device(a)
#  define debug_output_buffer_on(a,b)
#  define debug_output_buffer_off(a,b)
#  define debug_terminate()
#  define debug_beep()
#  define debug_initialise_trace(a,b)
#  define debug_set_options(a,b,c)
#  define debug_set_device(a)
#  define debug_set_trace_device(a)
#  define debug_set_raw_device(a)
#  define debug_set_taskname_prefix(a)
#  define debug_set_threadname_prefix(a)
#  define debug_set_level(a)
#  define debug_set_area_level_prefix(a)
#  define debug_set_stamp_debug(a)
#  define debug_set_screen_cornering(a)
#  define debug_set_unbuffered_files(a)
#  define debug_set_serial_lf(a)
#  define debug_set_serial_port_speed(a)
#  define debug_set_serial_port_number(a)
#  define debug_set_dump_width(a)
#  define debug_set_area_pad_limit(a)
#  define debug_set_myprintf_callback(a)
#  define debug_set_syslog_openlog_params(b,c,a)
#  define debug_atexit()
#  define debug_version()
#  define ddumpbuf(a,b,c,d)

#  define dprintf(a)
#  define dprintf_raw(a)
#  define dvprintf(a)
#  define dfprintf(a)

#endif /* DEBUGLIB */

/* Handy macros to enable callers to know what support we actually have built-in
 * live to this library - although setting an unsupported device will work and
 * will simply swallow all output.
 */
@pace_debuglib_has_device_tracker@
@pace_debuglib_has_device_printf@
@pace_debuglib_has_device_pdebug@
@pace_debuglib_has_device_remotedb@
@pace_debuglib_has_device_debugit@
@pace_debuglib_has_device_tml@
@pace_debuglib_has_device_file@
@pace_debuglib_has_device_serial@
@pace_debuglib_has_device_dadebug@
@pace_debuglib_has_device_brainlink@
@pace_debuglib_has_device_myprintf@
@pace_debuglib_has_device_ptvlog@
@pace_debuglib_has_device_syslog@
@pace_debuglib_has_device_socket@

#ifdef __cplusplus
}
#endif

#endif /* DEBUGLIB_DEBUGLIB_H_INCLUDED */
