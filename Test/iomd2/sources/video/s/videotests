; videotests.s

            GET     hdr:iomd2_defs
            GET     hdr:test_defs


;===============================================================================
; Vectors

            ORG     &00000000

reset       B       video_test
undefined   B       undefined
swi         B       swi
preabort    B       preabort
dataabort   B       dataabort
notused     B       notused
irq         B       irq
fiq         B       fiq


;===============================================================================
; Main test code

	EXPORT	video_test

video_test

            [ SetupSDRAM
            GET     videoinit.s
            ]


; We'll keep these registers and use them throughout the code

            ;MOV    r10, lr              ; Keep LR
            MOV    r1, #iocr            ; IOMD2 register offset
            MOV    r2, #VidcModel       ; Address of VIDC model register
            LDR    r3, =fasttube        ; Fasttube address

; Write to Vidc model to tell it how many words of each type of data to expect

            [ VideoDMA
            LDR    r0, vmodelsize
            [ VidCurVidTest
            LDR    r0, vhalfsize
            ]
            STR    r0, [r2]             ; video words
            ]

            [ SoundDMA
            LDR    r0, smodelsize
            STR    r0, [r2]             ; sound words
            ]

            [ CursorDMA
            LDR    r0, cmodelsize
            STR    r0, [r2]             ; cursor words
            ]

          [ SetupSAM
            [ VRAMSize > 1
            ; Specify 64bit wide data if >1Mb VRAM
            MOV    r0, #VidcModelTestDataWidth
            ORR    r0, r0, #1
            STR    r0, [r2]
            ]
          ]

; Setup memory - write to various IOMD registers

            ; Set busmaster speed
            MOV    r0, #BmspdValue
            STR    r0, [r1, #&F8]       ; bm3spd

            [ SetupVRAM :LOR: SetupSAM
            ; Setup video refresh control register
            MOV    r0, #VrefcrValue
            STR    r0, [r1, #&8C]       ; vrefcr
            ]

            ;[ SetupVRAM :LOR: SetupSAM
            ; Setup VRAM timing register
            ;MOV    r0, #VramtmgValue
            ;STR    r0, [r1, #&E0]
            ;]

            ; Wait for 8 refresh cycles (16us)
            ;MOV    r0, #2*8*16
            ;BL     video_delay

; Generate pattern data in memory

        [ VideoDMA
            [ CheckVidcModel
            MOV    r5, #(VideoPatternSize * 3)
            |
            MOV    r5, #VideoPatternSize
            ]
            LDR    r6, =vidpattern
            LDR    r7, videoinit
            LDR    r8, videoend
            LDR    r9, videostart
            BL     video_genpattern
        ]

        [ CursorDMA
            [ CheckVidcModel
            MOV    r5, #(CursorPatternSize * 3)
            |
            MOV    r5, #CursorPatternSize
            ]
            LDR    r6, =curpattern
            LDR    r7, cursorstart
            LDR    r8, cursorend
            LDR    r9, cursorstart
            BL     video_genpattern
        ]

        [ SoundDMA
            [ CheckVidcModel
            MOV    r5, #(SoundPatternSize * 3)
            |
            MOV    r5, #SoundPatternSize
            ]
            LDR    r6, =sndpattern
            LDR    r7, soundstart
            LDR    r8, soundend
            LDR    r9, soundstart
            BL     video_genpattern
        ]

; Program DMA start, current, end etc. addresses (sound has to be done later)

            [ CursorDMA
            ; Program cursor init and current
            LDR    r0, cursorstart
            STR    r0, [r1, #&1C0]      ; curscur
            STR    r0, [r1, #&1C4]      ; cursinit
            ]

            [ VideoDMA
            ; Program video current, init, start and end addresses
            LDR    r0, videostart
            STR    r0, [r1, #&1D8]      ; vidstart
            LDR    r0, videoinit
            [ VidInitBit31
            ORR    r0, r0, #&40000000
            ]
            STR    r0, [r1, #&1DC]      ; vidinit
            LDR    r0, videocur
            STR    r0, [r1, #&1D0]      ; vidcur
            LDR    r0, videoend
            SUB    r0, r0, #TransferSize
            STR    r0, [r1, #&1D4]      ; vidend
            ]

; Set registers to enable DMAs

            [ VideoDMA :LOR: CursorDMA :LOR: DoSlaveTest
            ; Set video control reg to enable DMAs
            MOV    r0, #VidcrValue
            STR    r0, [r1, #&1E0]      ; vidcr
            ]

            [ SoundDMA
            ; Set sound control reg to enable DMAs
            MOV    r0, #&24
            STR    r0, [r1, #&190]      ; sd0cr
            ]

; Other registers - scdiv, fsize, vflag etc.

            [ SetupSAM
            ; Set scdiv register to MCLK/2
            MOV     r0, #ScdivValue
            STR     r0, [r1, #&E4]       ; scdiv
            ; Set fsize register
            MOV     r0, #FsizeValue      ; fsize
            STR     r0, [r1, #&90]
            ]

            [ VideoDMA :LAND: CheckVFlag
            MOV    r0, #VflagLoValue    ; vfalglo
            STR    r0, [r1, #&304]
            MOV    r0, #VflagHiValue
            STR    r0, [r1, #&308]      ; vflaghi
            ]

; Start the DMA(s)

            [ CheckIOCR :LAND: SetupSAM
            ; Check flyback is NOT asserted in iocr
            LDR    r0, [r1, #0]         ; iocr
            TST    r0, #128
            LDREQ  r0, =i1_pass_msg
            LDRNE  r0, =i1_fail_msg
            STR    r0, [r3]             ; output message to fasttube
            ]

      [ VideoDMA :LOR: CursorDMA
        [ SetupSAM :LOR: SetupVRAM
            ; loop for fsize times and pull VNc
            MOV    r6, #VidcModelTCR
            ORR    r5, r6, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq + TCR_vNc + TCR_Flyback)
            ORR    r6, r6, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq + TCR_Flyback)

            MOV    r4, #FsizeValue
02
            ; Pull vnc down for 1.6us (keeping flyback high
            STR    r6, [r2]
            MOV    r0, #3               ; 1.5us
            BL     video_delay

            ; Reset vnc and wait for 14.5us
            STR    r5, [r2]
            MOV    r0, #29
            BL     video_delay

            SUBS   r4, r4, #1
            BNE    %BT02

            [ CheckIOCR
            ; Check flyback IS asserted in iocr
            LDR    r0, [r1, #0]         ; iocr
            TST    r0, #128
            LDRNE  r0, =i2_pass_msg
            LDREQ  r0, =i2_fail_msg
            STR    r0, [r3]             ; output message to fasttube
            ]

            ; De-assert flyback, wait for 3us
            MOV    r6, #VidcModelTCR
            ORR    r5, r6, #(TCR_TestModeEnable + TCR_NVidrq + TCR_vNc + TCR_NSndrq)
            ORR    r6, r6, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq)
            STR    r6, [r2]
            MOV    r0, #3
            BL     video_delay

            ; Re-assert vNc, keeping no flyback, wait for 14.5us
            STR    r5, [r2]
            MOV    r0, #29
            BL     video_delay
        ]
      ]

        [ SoundDMA
            ; Write to current and end regs of buffer A
            LDR    r0, soundstart
            STR    r0, [r1, #&180]      ; sd0endB
            ADD    r0, r0, #(SoundPatternSize * 2)-4
            STR    r0, [r1, #&184]      ; sd0endA

            ; Write to current and end regs of buffer B
            LDR    r0, soundstart
            ADD    r0, r0, #(SoundPatternSize * 2)
            STR    r0, [r1, #&188]      ; sd0curB
            ADD    r0, r0, #(SoundPatternSize * 2) - 4
            STR    r0, [r1, #&18C]      ; sd0endB
        ]

            [ :LNOT: VidCurVidTest
            ; Get vidcmodel to do a request
            BL     video_do_request
            ]

            [ SoundDMA :LAND: CancelSoundDMA
            ; Write to sound control register to cancel the DMA
            MOV    r0, #&A4
            STR    r0, [r1, #&190]      ; sd0cr
            ]

        [ VideoDMA :LAND: CheckVFlag
            ; Now check value of vidmrd, do a read from area and re-check
            LDR    r7, videostart

            LDR    r0, [r1, #&300]      ; read vidmrd
            TST    r0, #1               ; should be unset
            LDREQ  r0, =v1_pass_msg
            LDRNE  r0, =v1_fail_msg
            STR    r0, [r3]             ; output message

            LDR    r0, [r7, #4]         ; read a word from video memory

            LDR    r0, [r1, #&300]      ; read vidmrd
            TST    r0, #1               ; should be set
            LDRNE  r0, =v2_pass_msg
            LDREQ  r0, =v2_fail_msg
            STR    r0, [r3]             ; output message

            LDR    r0, [r7, #8]         ; read another word from video memory

            LDR    r0, [r1, #&300]      ; read vidmrd
            TST    r0, #1               ; should still be set
            LDRNE  r0, =v3_pass_msg
            LDREQ  r0, =v3_fail_msg
            STR    r0, [r3]             ; output message

            LDR    r0, [r1, #&300]      ; read vidmrd
            TST    r0, #1               ; should now be clear
            LDREQ  r0, =v4_pass_msg
            LDRNE  r0, =v4_fail_msg
            STR    r0, [r3]             ; output message
        ]

        [ DoSlaveTest
            LDR    r4, =local_bus_base
            LDR    r5, =vidpattern
            MOV    r8, #&200

04          LDR    r6, [r5], #4         ; load a pattern word
            STR    r6, [r4]             ; store it
            LDR    r7, [r4], #4
            CMP    r6, r7               ; check it stored okay
            LDRNE  r0, =sl_fail_msg
            STRNE  r0, [r3]             ; warn through fasttube if didn't store
            BNE    %FT06
            SUBS   r8, r8, #1
            BNE    %BT04
06
        ]

        [ ReadBack :LAND: (:LNOT: VidCurVidTest)
            BL     video_checkdata
        ]

        [ CheckVidcModel
            ; Corrupt some of the pattern data
            MOV    r0, #24

            [ SoundDMA
            LDR    r7, soundstart
            ADD    r7, r7, #(SoundPatternSize*4)
            ]

            [ CursorDMA
            LDR    r7, cursorstart
            ADD    r7, r7, #(CursorPatternSize*4)
            ]

            [ VideoDMA
            LDR    r7, videostart
            ADD    r7, r7, #(VideoPatternSize*4)
            ]

            STR    r0, [r7, #4]
            STR    r0, [r7, #8]

            ; Start another DMA and check the data
            BL     video_do_request
            BL     video_checkdata

            ; Reset Model test result and video DMAd registers
            MOV    r0, #VidcModelTestResult
            STR    r0, [r2]
            MOV    r0, #VidcModelVideoDMAd
            STR    r0, [r2]
            MOV    r0, #VidcModelSoundDMAd
            STR    r0, [r2]
            MOV    r0, #VidcModelCursorDMAd
            STR    r0, [r2]

            ; Start another DMA and check the data
            BL     video_do_request
            BL     video_checkdata
        ]
        
        [ VidCurVidTest
            BL     video_do_video_request
            BL     video_checkdata
            BL     video_do_cursor_request
            BL     video_checkdata
            BL     video_do_video_request
            BL     video_checkdata
        ]

finished    ;MOV   pc, r10
	    ; Terminate the simulation by sending Ctrl-D to the tube
	    LDR    r0, =CtrlD
            LDR    r1, =tube
            STR    r0, [r1]

finishloop
	B	finishloop


;===============================================================================
; video_do_request
;
; Get Vidc model to do a DMA request, by pulling appropriate lines

video_do_request

            ; get around IOMD2 bug - remove later
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq)
            [ VideoDMA :LAND: (:LNOT: CursorDMA)
            ORR    r0, r0, #TCR_vNc
            ]
            STR    r0, [r2]
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            ; end of IOMD bug code

            ; Write to Vidc20 model to pull bits and pieces
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #TCR_TestModeEnable

            [ :LNOT: SoundDMA
            ORR    r0, r0, #TCR_NSndrq
            ]

            [ (:LNOT: VideoDMA) :LAND: (:LNOT: CursorDMA)
            ORR    r0, r0, #TCR_NVidrq
            ]

            [ VideoDMA :LAND: (:LNOT: CursorDMA)
            ORR    r0, r0, #TCR_vNc
            ]

            STR    r0, [r2]

            MOV    pc, lr


 [ VidCurVidTest
 ;===============================================================================
; video_do_video_request
;
; Get Vidc model to do a video DMA request, by pulling appropriate lines

video_do_video_request

            ; get around IOMD2 bug - remove later
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq)
            ORR    r0, r0, #TCR_vNc
            STR    r0, [r2]
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            ; end of IOMD bug code
 
            ; Write to Vidc20 model to pull bits and pieces
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #TCR_TestModeEnable
            ORR    r0, r0, #TCR_NSndrq
            ORR    r0, r0, #TCR_vNc
            STR    r0, [r2]
            
            MOV    pc, lr
 
 
;===============================================================================
; video_do_cursor_request
;
; Get Vidc model to do a cursor DMA request, by pulling appropriate lines

video_do_cursor_request

            ; get around IOMD2 bug - remove later
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq)
            STR    r0, [r2]
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            ; end of IOMD bug code

            ; Write to Vidc20 model to pull bits and pieces
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #TCR_TestModeEnable
            ORR    r0, r0, #TCR_NSndrq
            STR    r0, [r2]
            
            MOV    pc, lr
 ]
 

;===============================================================================
; video_delay
;
; In: r0 = delay in 0.5 us

video_delay
            ;MOV    r0, r0, LSL#1

04          SUBS   r0, r0, #1
            BNE    %BT04

            MOV    pc, lr


;===============================================================================
; video_genpattern
;
; Generate a pattern of data
;
; In: r5 -> Number of words (32bit) to write
;     r6 -> pattern data
;     r7 -> init position
;     r8 -> end position
;     r9 -> wraparound position

video_genpattern

06          LDR    r0, [r6], #4
            STR    r0, [r7], #4
            CMP    r7, r8
            MOVGE  r7, r9
            SUBS   r5, r5, #1
            BNE    %BT06

            MOV    pc, lr


;===============================================================================
; video_checkdata
;
; Check VIDC20 model to see if data got through okay
;
; Corrupts: r0, r5, r6

 [ ReadBack

video_checkdata

            ; Loop through until vidrq and sndrq are back to 1 or timed out
            MOV    r5, #&ff
08          LDR    r6, rb_tcr
            LDR    r0, [r6]             ; Readback Test Control Register
            TST    r0, #4               ; test bit 2 (Nsndrq)
            TSTNE  r0, #8               ; test bit 3 (Nvidrq)
            BNE    %FT10                ; if both set, break out
            SUBS   r5, r5, #1
            BNE    %BT08

            ; Timeout: Nvidrq and Nsndrq didn't turn to 1 in time.
            LDR    r0, =rb_timeout
            STR    r0, [r3]
            MOV    pc, lr               ; return

10          ; Nvidrq and Nsndrq are both 1
            LDR    r6, rb_trr           ; Test results register
            LDR    r0, [r6]

            [ VideoDMA
            TST    r0, #TRR_Video       ; Check bit 0 for if video DMA data valid
            LDREQ  r5, =rb_vid_val
            LDRNE  r5, =rb_vid_inv
            STR    r5, [r3]
            ]

            [ SoundDMA
            TST    r0, #TRR_Sound       ; Check bit 1 for if sound DMA data valid
            LDREQ  r5, =rb_snd_val
            LDRNE  r5, =rb_snd_inv
            STR    r5, [r3]
            ]

            [ CursorDMA
            TST    r0, #TRR_Cursor      ; Check bit 2 for if cursor DMA data valid
            LDREQ  r5, =rb_cur_val
            LDRNE  r5, =rb_cur_inv
            STR    r5, [r3]
            ]

            TST    r0, #TRR_SetupHoldCheck
            LDREQ  r5, =rb_set_val
            LDRNE  r5, =rb_set_inv
            STR    r5, [r3]

            MOV    pc, lr               ; return
 ]


;===============================================================================
; Data

 [ ReadBack
rb_tcr      DCD    &85200000
rb_trr      DCD    &85280000
rb_countvid DCD    &85290000
rb_countsnd DCD    &852A0000
rb_countcur DCD    &852B0000
 ]

 [ VideoDMA
videostart  DCD    VideoBufferStart
videoend    DCD    VideoBufferEnd
videoinit   DCD    VideoBufferInit
videocur    DCD    VideoBufferCur

   [ SetupSAM
     [ VRAMSize > 1
vmodelsize  DCD    VidcModelVideoLength + (VideoPatternSize/2)  ; 64 bit words
     |
vmodelsize  DCD    VidcModelVideoLength + VideoPatternSize      ; 32 bit words
     ]
   |
vmodelsize  DCD    VidcModelVideoLength + VideoPatternSize      ; 32 bit words
   ]

   [ VidCurVidTest
vhalfsize   DCD    VidcModelVideoLength + (VideoPatternSize / 4)
   ]
 ]

 [ CursorDMA
cursorstart DCD    CursorBufferStart
cursorend   DCD    CursorBufferEnd
cmodelsize  DCD    VidcModelCursorLength + CursorPatternSize
 ]

 [ SoundDMA
soundstart  DCD    SoundBufferStart
soundend    DCD    SoundBufferEnd
smodelsize  DCD    VidcModelSoundLength + SoundPatternSize
 ]


;===============================================================================
; Fasttube messages

 [ VideoDMA :LAND: CheckVFlag
            ALIGN  4
v1_fail_msg DCB    "TUBE:vidmrd check 1 failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
v1_pass_msg DCB    "TUBE:vidmrd check 1 passed", 0
            ALIGN  4
v2_fail_msg DCB    "TUBE:vidmrd check 2 failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
v2_pass_msg DCB    "TUBE:vidmrd check 2 passed",  0
            ALIGN  4
v3_fail_msg DCB    "TUBE:vidmrd check 3 failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
v3_pass_msg DCB    "TUBE:vidmrd check 3 passed", 0
            ALIGN  4
v4_fail_msg DCB    "TUBE:vidmrd check 4 failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
v4_pass_msg DCB    "TUBE:vidmrd check 4 passed", 0
 ]

 [ CheckIOCR :LAND: SetupSAM
            ALIGN  4
i1_fail_msg DCB    "TUBE:iocr check 1 failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
i1_pass_msg DCB    "TUBE:iocr check 1 passed", 0
            ALIGN  4
i2_fail_msg DCB    "TUBE:iocr check 2 failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
i2_pass_msg DCB    "TUBE:iocr check 2 passed", 0
 ]

 [ ReadBack
            ALIGN  4
rb_timeout  DCB    "TUBE:Timed out checking the test control register. "
            DCB    "Nvidrq or Nsndrq didn't return to 1 - incomplete DMA?"
            DCB    CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_vid_inv  DCB    "TUBE:Invalid video DMA data.", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_vid_val  DCB    "TUBE:Valid video DMA data.", 0
            ALIGN  4
rb_snd_inv  DCB    "TUBE:Invalid sound DMA data.", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_snd_val  DCB    "TUBE:Valid sound DMA data.", 0
            ALIGN  4
rb_cur_inv  DCB    "TUBE:Invalid cursor DMA data.", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_cur_val  DCB    "TUBE:Valid cursor DMA data.", 0
            ALIGN  4
rb_set_inv  DCB    "TUBE:Setup/Hold check failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_set_val  DCB    "TUBE:Setup/Hold check passed", CONTINUE_AFTER_ERROR, 0
 ]

 [ DoSlaveTest
sl_fail_msg DCB    "TUBE:Slave write failed.", 0
 ]

            END
