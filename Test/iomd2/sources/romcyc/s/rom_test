;	--------------------------------------------
; 	© Acorn Computers Ltd. 1998
;
; 	IOMD2 ROM Access Cycle test
;	--------------------------------------------
;	Steve Taylor
;	v0.0a	23.02.98	initial
;	0.0b	27.02.98	Mods based on new io_model spec
;	0.0c	10.03.98	Changes to messaging (use fasttube)
;	0.0d	24.03.98	Implemented new error register
;				base address &68xxxxxx. Also a common initialisation code
;				sequence will have been added
;				at the integration stage

;	------------------------------------------------
;	Writes a message to Tube
;	Requires that tube_defin has been Got beforehand
;	------------------------------------------------

	MACRO
$tubewrm	write_messages	$message

$tubewrm
	LDR	r12, =$message		; Pointer to message
	LDR	r11, =fasttube		; Pointer to the FastTube address
	STR	r12,[r11]		; Send the message

	MEND


	MACRO
$checkfail	test_failbit
$checkfail
	LDR	r4,=romfailurereg				; Get failure report register
	LDR	r5,[r4]						; putin r4 (r3,4 scratch regs)
	TST	r5,#romfailbit					; Did the read fail?
	MEND


; ================================= BEGIN TEST ==================================

; *** R4,5 is a temp/dummy register


	EXPORT	romcyc_test
romcyc_test
	MOV	R13,LR						; Save return address
	write_messages	rom_testbegin_message


; Start with Bank0 parameters
ROM_BANK0
	write_messages	rom_bank0_message
        LDR	r0,=romcr0					; R0 points to Bank0 status register
        LDR	R1,=rom_sread0_initial_romcr0			; R1 is runtime test status
	MOV	r2,#main_rom_base				; R2 is test address base
	LDR	R3,=rom_sread0_ix				; R3 is offset for test accesses
	ADD	r3,r2,r3
	B	SINGLE_ACCESS

; Bank1 Parameters for use later
ROM_BANK1
	write_messages	rom_bank1_message
        LDR	r0,=romcr1					; RO points to Bank1 status register
        MOV	r1,#rom_sread1_initial_romcr1			; R1 is runtime test status
        LDR	R2,=ext_rom_base				; R2 is test address base
	LDR	R3,=rom_sread1_ix				; R3 is offset for test accesses
	ADD	r3,r2,r3

; Single Accesses
SINGLE_ACCESS
	write_messages	rom_singleaccess_message
								; access

READ_ADDRESS

	STR	r1,[r0]						; Setup the ROMCRn register for this
	LDR	r4,[r3]						; Do first single read

	test_failbit						; Did the access fail?

	BLNE	SINGLE_ACCESS_FAILED				; If it did, report the fact

								; otherwise
	ADD	r3,r3,#&20					; Increment offset
	ADD	r1,r1,#1					; Increment single access bits
	TEQS	r1,#2_00000111					; Done all access combos?
	BEQ	BURST_ACCESS_17_10				; If so, do burst tasks
	B	READ_ADDRESS					; else continue single accesses


; Burst accesses
BURST_ACCESS_17_10
;	LDR	r2, =main_rom_base
	write_messages	rom_burstaccess_message
	LDR	R1,=rom_burst_1710				; 1*17 + 7*10
	STR	r1,[r0]						; Write bank specs
	LDR	r3,=rom_burst_1710_ix				; Point to
	ADD	r3,r3,r2					; start of burst area
	LDMIA	r3,{r4-r11}					; Do burst read
	test_failbit						; Did access fail?
	BLNE	BURST_ACCESS_FAILED

BURST_ACCESS_11_8
	LDR	R1,=rom_burst_1108				; 1*11 + 7*8
	STR	r1,[r0]						; Write bank specs
	LDR	r3,=rom_burst_1108_ix				; Point to
	ADD	r3,r3,r2					; start of burst area
	LDMIA	r3,{r4-r11}					; Do burst read
	test_failbit
	BLNE	BURST_ACCESS_FAILED

BURST_ACCESS_9_6
	LDR	R1,=rom_burst_0906				; 1*9 + 7*6
	STR	r1,[r0]						; Write bank specs
	LDR	r3,=rom_burst_0906_ix				; Point to
	ADD	r3,r3,r2					; start of burst area
	LDMIA	r3,{r4-r11}					; Do burst read
	test_failbit
	BLNE	BURST_ACCESS_FAILED

BURST_ACCESS_5_4
	LDR	R1,=rom_burst_0504				; 1*5 + 7*4
	STR	r1,[r0]						; Write bank specs
	LDR	r3,=rom_burst_0504_ix				; Point to
	ADD	r3,r3,r2					; start of burst area
	LDMIA	r3,{r4-r11}					; Do burst read
	test_failbit
	BLNE	BURST_ACCESS_FAILED


; Write accesses
WRITE_ACCESS_10
	write_messages	rom_writeaccess_message
;	LDR	r2,=main_rom_base
	MOV	r1,#2_00000010					; Single write access 10
	STR	r1,[r0]
	LDR	r3,=rom_write_ix				; Pointer to write area
	ADD	r3,r3,r2
	LDR	r4,=romtestpattern
	STR	r4,[r3]						; Write test word
	LDR	r5,[r3]						; Read back test word
	CMP	r4,r5						; Are they the same?
	BLNE	WRITE_ACCESS_FAILED				; If not, notify
	test_failbit
	BLNE	WRITE_ACCESS_FAILED				; If not, notify



WRITE_ACCESS_8
	MOV	r1,#2_01000011					; Single write access 8
	STR	r1,[r0]
	ADD	r3, r3, #4
	LDR	r4,=romtestpattern
	STR	r4,[r3]						; Write test word
	LDR	r5,[r3]						; Read back test word
	CMP	r4,r5						; Are they the same?
	BLNE	WRITE_ACCESS_FAILED				; If not, notify
	test_failbit
	BLNE	WRITE_ACCESS_FAILED				; If not, notify

WRITE_ACCESS_6
	MOV	r1,#2_10000100					; Single write access 6
	STR	r1,[r0]
	ADD	r3, r3, #4
	LDR	r4,=romtestpattern
	STR	r4,[r3]						; Write test word
	LDR	r5,[r3]						; Read back test word
	CMP	r4,r5						; Are they the same?
	BLNE	WRITE_ACCESS_FAILED				; If not, notify
	test_failbit
	BLNE	WRITE_ACCESS_FAILED				; If not, notify


WRITE_ACCESS_4
	MOV	r1,#2_11000101					; Single write access 4
	STR	r1,[r0]
	ADD	r3, r3, #4
	LDR	r4,=romtestpattern
	STR	r4,[r3]
	LDR	r5,[r3]						; Read back test word
	CMP	r4,r5						; Are they the same?
	BLNE	WRITE_ACCESS_FAILED				; If not, notify
	test_failbit
	BLNE	WRITE_ACCESS_FAILED				; If not, notify


; Sequential reads
SEQUENTIAL_READ
	write_messages	rom_sequentialaccess_message

	MOV	r1,#2_000000100					; Fast access

	STR	r1,[r0]						; Set control register
	LDR	r3,=&f10300
	ADD	r3,r3,r2					; Set offset
DO_READ	LDR	r4,[r3],#4					; Getword @ R3, then increment
	test_failbit
	BLNE	SEQUENTIAL_READ_FAILED
	TSTS	r3,#&FF						; Reached end of sequential block?
	BNE	DO_READ


; See if we need to swap to next ROM bank, or end the tests
NEXT_STEP
	CMPS	r2,#ext_rom_base				; Are we already dealing with Bank1?
	BEQ	TEST_COMPLETE					; If so, no more tests
	B	ROM_BANK1					; Otherwise setup for Bank1



; A single access failed. Report this to simulator
SINGLE_ACCESS_FAILED
	LDR	r4,=dump_r3
	STR	r3,[r4]						; Print current address

	LDR	r4,=dump_r1
	STR	r1,[r4]						; Print hex value of failure register

	write_messages	rom_singleaccessfailed_message		; Notify failed access

	LDR	r4,=romfailurereg
	MOV	r5,#0
	STR	r5,[r4]						; Clear rom failure register

	MOV	PC,LR						; Return to routine


; A burst access failed. Report this to simulator
BURST_ACCESS_FAILED
	LDR	r4,=dump_r3
	STR	r3,[r4]						; Print current address

	LDR	r4,=dump_r1
	STR	r1,[r4]						; Print hex value of failure register

	write_messages	rom_burstaccessfailed_message		; Notify failed access

	LDR	r4,=romfailurereg
	MOV	r5,#0
	STR	r5,[r4]						; Clear rom failure register

	MOV	PC,LR						; Return to routine

; A single write access failed. Report this to simulator
WRITE_ACCESS_FAILED
	LDR	r4,=dump_r3
	STR	r3,[r4]						; Print current address

	LDR	r4,=dump_r1
	STR	r1,[r4]						; Print hex value of failure register

	write_messages	rom_writeaccessfailed_message		; Notify failed access

	LDR	r4,=romfailurereg
	MOV	r5,#0
	STR	r5,[r4]						; Clear rom failure register

	MOV	PC,LR						; Return to routine

; A sequential read failed. Report this to simulator
SEQUENTIAL_READ_FAILED
	LDR	r4,=dump_r3
	STR	r3,[r4]						; Print current address

	LDR	r4,=dump_r1
	STR	r1,[r4]						; Print hex value of failure register

	write_messages	rom_sequentialaccessfailed_message	; Notify failed access

	LDR	r4,=romfailurereg
	MOV	r5,#0
	STR	r5,[r4]						; Clear rom failure register

	MOV	PC,LR						; Return to routine

TEST_COMPLETE
	write_messages	rom_testend_message			; Sign off

	MOV	PC,R13						; Return to calling routine (testb?)



romtestpattern	*	&A5CAFEB3				; Arbitrary test pattern
romfailurereg	*	&88000000				; ROM simulation failure register
romfailbit	*	&80000000				; io_model Failure flag = bit31

rom_sread0_initial_romcr0	*	&0			; Initial romcr0 val for singlereads
rom_sread1_initial_romcr1	*	&0			; Initial romcr1 val for singlereads

rom_sread0_ix	*	&00f10000				; Bank0 singleread access offset
rom_sread1_ix	*	&00f10000				; Bank1 singleread access offset
								; (specified in case of model change)
rom_write_ix	* 	&00f10200				; write access base address

rom_burst_1710	*	2_00001000				; ROMCR register bits for burst reads
rom_burst_1108	*	2_00010001
rom_burst_0906	*	2_00011010
rom_burst_0504	*	2_00100011

rom_burst_1710_ix	*	&f10100				; Offsets to read burst data
rom_burst_1108_ix	*	&f10120
rom_burst_0906_ix	*	&f10140
rom_burst_0504_ix	*	&f10160


rom_testbegin_message
	DCB	"TUBE:ROM Test BEGIN",&0
rom_bank0_message
	DCB	"TUBE:ROM Bank0",&0
rom_bank1_message
	DCB	"TUBE:ROM Bank1",&0

rom_singleaccess_message
	DCB	"TUBE:ROM Single read accesses",&0
rom_burstaccess_message
	DCB	"TUBE:ROM Burst read accesses",&0
rom_writeaccess_message
	DCB	"TUBE:ROM Write accesses",&0
rom_sequentialaccess_message
	DCB	"TUBE:ROM Sequential accesses",&0


rom_singleaccessfailed_message
	DCB	"TUBE:ROM Single read access failure"
	DCB	CONTINUE_AFTER_ERROR, 0
rom_burstaccessfailed_message
	DCB	"TUBE:ROM Burst read access failure"
	DCB	CONTINUE_AFTER_ERROR, 0
rom_writeaccessfailed_message
	DCB	"TUBE:ROM Write access failure"
	DCB	CONTINUE_AFTER_ERROR, 0
rom_sequentialaccessfailed_message
	DCB	"TUBE:ROM Sequential access failure"
	DCB	CONTINUE_AFTER_ERROR, 0

rom_testend_message
	DCB	"TUBE:ROM Test END",&0
	ALIGN


	END
