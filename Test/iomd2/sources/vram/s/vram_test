;; Change History
;; 10-Feb-98  amg  Added byte and half-word read and write tests


;; Define tube messages used in VRAM testing
VRAM_TESTSTART_MESS
        DCB     "TUBE:VRAM testing beginning",&0
VRAM_TESTEND_MESS
        DCB     "TUBE:VRAM testing completed",&0

VRAM_BURSTPASS_MESS
        DCB     "TUBE:VRAM burst test passed",&0
VRAM_BURSTFAIL_MESS
        DCB     "TUBE:VRAM burst test FAILED",&4,&0

VRAM_RWPASS_MESS
        DCB     "TUBE:VRAM read/write test passed",&0
VRAM_RWFAIL_MESS
        DCB     "TUBE:VRAM read/write write test FAILED",&4,&0

VRAM_ADDRPASS_MESS
        DCB     "TUBE:VRAM address decoding test passed",&0
VRAM_ADDRFAIL_MESS
        DCB     "TUBE:VRAM address decoding test FAILED",&4,&0

VRAM_PARTWRITEPASS_MESS
        DCB     "TUBE:VRAM write byte/halfword test passed",&0
VRAM_PARTWRITEFAIL_MESS
        DCB     "TUBE:VRAM write byte/halfword test FAILED",&4,&0
VRAM_PARTREADPASS_MESS
        DCB     "TUBE:VRAM read byte/halfword test passed",&0
VRAM_PARTREADFAIL_MESS
        DCB     "TUBE:VRAM read byte/halfword test FAILED",&4,&0
VRAM_HALFPASS_MESS
        DCB     "TUBE:VRAM half speed access test passed",&0
VRAM_HALFFAIL_MESS
        DCB     "TUBE:VRAM half speed access test FAILED",&4,&0
        ALIGN

;; Start of the actual VRAM test code
VRAM_TEST

        ;; Send test starting message
        LDR     R0,=VRAM_TESTSTART_MESS
        LDR     R10, =fasttube
        STR     R0, [R10]

        ; Initialise some register values
        LDR     R8,=VRAM_TEST_DATA
        LDMIA   R8!,{R0-R7}

        ; Set up the fail message
        LDR     R12,=VRAM_BURSTFAIL_MESS

        ; Read and write to vram with burst lengths 1, 2, 4 & 8
	LDR	R10,=vrefcr
	LDR	R11,[R10]

        ; Single write/read
        LDR     R10,=vram_base
        STR     R7,[R10]
        LDR     R7,[R10]
        LDR     R9,=VRAM_TEST_DATA+(7<<2)
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_BURST_END

        ; 2 word burst write/read
        LDR     R10,=vram_base+32
        STMIA   R10!,{R6-R7}
        LDMDB   R10!,{R6-R7}
        LDR     R9,=VRAM_TEST_DATA+(6<<2)
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_BURST_END

        ; 3 word burst write/read
        LDR     R10,=vram_base+64
        STMIA   R10!,{R5-R7}
        LDMDB   R10!,{R5-R7}
        LDR     R9,=VRAM_TEST_DATA+(5<<2)
        LDR     R8,[R9],#4
        TEQ     R5,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_BURST_END

        ; 4 word burst write/read
        LDR     R10,=vram_base+96
        STMIA   R10!,{R4-R7}
        LDMDB   R10!,{R4-R7}
        LDR     R9,=VRAM_TEST_DATA+(4<<2)
        LDR     R8,[R9],#4
        TEQ     R4,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R5,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_BURST_END

        ; 8 word burst write/read
        LDR     R10,=vram_base+128
        STMIA   R10!,{R0-R7}
        LDMDB   R10!,{R0-R7}
        LDR     R9,=VRAM_TEST_DATA+(0<<2)
        LDR     R8,[R9],#4
        TEQ     R0,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R1,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R2,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R3,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R4,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R5,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_BURST_END

        ; Switch to 2M mode to test interleaved writes
	; A four word burst is used to give the chance for faults to happen.
	LDR	R10,=vrefcr
	BIC	R9,R11,#&E0
	ORR	R9,R9,#&40
	STR	R9,[R10]
        ; 4 word burst write/read
        LDR     R10,=vram_base+160
        STMIA   R10!,{R4-R7}
        LDMDB   R10!,{R4-R7}
        LDR     R9,=VRAM_TEST_DATA+(4<<2)
        LDR     R8,[R9],#4
        TEQ     R4,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R5,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_BURST_END
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_BURST_END

        LDR     R12,=VRAM_BURSTPASS_MESS
VRAM_BURST_END
        LDR     R10, =fasttube
        STR     R12, [R10]

	LDR	R10,=vrefcr
	STR	R11,[R10]		; Set vrefcr register back to its initial value
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ; new tests added by amg 10/02/98

        ; byte/halfword writes first, then reads
        LDR     R12,=VRAM_PARTWRITEPASS_MESS

        LDR     R10,=vram_base+128
        MOV     R0, #0

        ; bytes first
        MOV     R1, #&FF
        MOV     R2, R1, LSL #8
        MOV     R3, R2, LSL #8
        MOV     R4, R3, LSL #8

        ;byte 0
        STR     R0, [R10]                               ; clear the location
        STRB    R1, [R10]                               ; write test value
        LDR     R5, [R10]                               ; fetch it back with a word read
        TEQ     R5, R1                                  ; got what we expected ?

        ;byte 1
        STREQ   R0, [R10]
        STREQB  R1, [R10, #1]
        LDREQ   R5, [R10]
        TEQEQ   R5, R2                                  ; R2 is shifted to correct position

        ;byte 2
        STREQ   R0, [R10]
        STREQB  R1, [R10, #2]
        LDREQ   R5, [R10]
        TEQEQ   R5, R3                                  ; R3 is shifted to correct position

        ;byte 3
        STREQ   R0, [R10]
        STREQB  R1, [R10, #3]
        LDREQ   R5, [R10]
        TEQEQ   R5, R4                                  ; R4 is shifted to correct position

        ;now halfwords
        MOVEQ   R1, #&34
        ORREQ   R1, R1, #&1200                          ; make test value
        STREQ   R0, [R10]                               ; clear the location
        DCD     &01CA10B0                               ; STREQH R1, [R10] store the halfword
        LDREQ   R2, [R10]                               ; read back as a word
        TEQEQ   R2, R1                                  ; check it

        STREQ   R0, [R10]
        DCD     &01CA10B2                               ; STREQH R1, [R10, #2]
        LDREQ   R2, [R10]
        MOVEQ   R1, R1, LSL #16                         ; need to move test value up to high halfword
        TEQEQ   R2, R1

        LDRNE   R12, =VRAM_PARTWRITEFAIL_MESS          ; change message if we failed
        LDR     R10, =fasttube
        STR     R12, [R10]

        ; next, the read byte/halfword test
        LDR     R12,=VRAM_PARTREADPASS_MESS

        LDR     R10,=vram_base+160

        LDR     R0, =&12345678
        STR     R0, [R10]

        ;bytes first
        ;byte 0
        LDRB    R1, [R10]                               ; fetch byte 0
        AND     R2, R0, #&FF                            ; expected value
        TEQ     R1, R2                                  ; check them

        ;byte 1
        LDREQB  R1, [R10, #1]                           ; fetch byte 1
        MOVEQ   R2, R0, LSR #8                          ; rotate the test value down to low byte of word
        ANDEQ   R2, R2, #&FF                            ; discard higher bits
        TEQEQ   R2, R1                                  ; check them

        ;byte2
        LDREQB  R1, [R10, #2]
        MOVEQ   R2, R0, LSR #16
        ANDEQ   R2, R2, #&FF
        TEQEQ   R2, R1

        ;byte3
        LDREQB  R1, [R10, #3]
        MOVEQ   R2, R0, LSR #24
        ANDEQ   R2, R2, #&FF
        TEQEQ   R2, r1

        ;halfwords, low first
        DCD     &01DA10B0                               ; LDREQH R1, [R10]
        MOVEQ   R2, R0, LSL #16                         ; discard the top half of the test value
        MOVEQ   R2, R2, LSR #16                         ; get the test value back into the bottom half
        TEQEQ   R1, R2

        ;high
        DCD     &01DA10B2                               ; LDREQH R1, [R10, #2]
        MOVEQ   R2, R0, LSR #16
        TEQEQ   R1, R2

        LDRNE   R12, =VRAM_PARTREADFAIL_MESS          ; change message if we failed
        LDR     R10, =fasttube
        STR     R12, [R10]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ; Check address decoding for VRAM bank.
        ; Write to 2^n and 2^n-1 address offsets througout the
        ; address range with different data and then read them all back
        ; and check. Any failures are likely to result in overwriting
        ; of one or more data words.

	; Amount of VRAM in each bank for x16 devices = 4M bytes
	LDR     R4,=&00100000

        ; Initial address offset
        LDR     R9,=8
        ; Initial data word
        LDR     R8,=&00000001
VRAM_WRITE_TEST
        ; Single write to VRAM
        ADD     R0,R9,#vram_base

	;; Ensure the following code loop is within a single
	;; instruction cache otherwise it goes REALLY slowly.

VRAM_EVENWRITE
        STR     R8,[R0]
        ADD     R8,R8,#1
        ;
        MOV     R9,R9,LSL#1                             ; Next 2^n address
        SUB     R10,R9,#4                               ; Next 2^n-1 address
        ;
        ADD     R1,R10,#vram_base

VRAM_ODDWRITE
        STR     R8,[R1]
        ADD     R8,R8,#1
        ;
        CMP     R9,R4
        BNE     VRAM_WRITE_TEST

        ; Initial address offset
        LDR     R9,=8
        ; Initial data word
        LDR     R8,=&00000001
        ; Set up the fail message
        LDR     R12,=VRAM_RWFAIL_MESS
VRAM_READ_TEST
        ; Single read from VRAM
        ADD     R0,R9,#vram_base

VRAM_EVENREAD
        LDR     R3,[R0],R11
        TEQ     R3,R8
        BNE     VRAM_RW_END
        ADD     R8,R8,#1
        ;
        MOV     R9,R9,LSL#1                             ; Next 2^n address
        SUB     R10,R9,#4                               ; Next 2^n-1 address
        ;
        ADD     R1,R10,#vram_base

VRAM_ODDREAD
        LDR     R3,[R1],R11
        TEQ     R3,R8
        BNE     VRAM_RW_END
        ADD     R8,R8,#1
        ;
        CMP     R9,R4
        BNE     VRAM_READ_TEST

        LDR     R12,=VRAM_RWPASS_MESS
VRAM_RW_END
        LDR     R10,=fasttube
        STR     R12,[R10]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; For all configurations of the vram x16, x8 and x4
	; check row/col address generation and group separations.
	; NOTE setup is for x16, x16 at the moment

        ; Set up the fail message
        LDR     R12,=VRAM_ADDRFAIL_MESS
	; The address of the vram address latch
	LDR	R2,=vram_latch
	; The address gap between banks.

	; Store away the current configuration
	LDR	R10,=vrefcr		; Set VRAM address mapping
	LDR	R11,[R10]		; read currect vrefcr value

	LDR	R13,=VRAM_CONFIGS
	B	VRAM_NEXT_CONFIG

VRAM_ADDR_START
        ; Initial address offset
        LDR     R9,=8
VRAM_ADDR_TEST
        ; Single write to VRAM
        ADD     R0,R9,#vram_base
VRAM_EVENADDR
	; Group 0 test
        STR     R0,[R0]
	LDR	R4,[R2]   ; get last written address from latch
	AND	R4,R4,R5
	AND	R8,R9,R5
	CMP	R4,R8
	BNE	VRAM_ADDR_END

        MOV     R9,R9,LSL#1                             ; Next 2^n address
        SUB     R10,R9,#4                               ; Next 2^n-1 address
        ADD     R1,R10,#vram_base
VRAM_ODDADDR
	; Group 0 test
        STR     R1,[R1]
	LDR	R4,[R2]
	AND	R4,R4,R5
	AND	R8,R10,R5
	CMP	R4,R8
	BNE	VRAM_ADDR_END

        CMP     R9,R3
        BNE     VRAM_ADDR_TEST

VRAM_NEXT_CONFIG
	LDMIA	R13!,{R3,R5,R6}
	LDR	R10,=vrefcr		; Set VRAM address mapping
	LDR	R7,[R10]		; read currect vrefcr value
	BIC	R7,R7,#&E0		; Clear vsize bits
	ORR	R7,R7,R6		; Add in new vsize info
	STR	R7,[R10]		; Set vrefcr register
	CMP	R6,#0
	BNE	VRAM_ADDR_START

	STR	R11,[R10]		; Set vrefcr register back to its initial value

        LDR     R12,=VRAM_ADDRPASS_MESS
VRAM_ADDR_END
        LDR     R10,=fasttube
        STR     R12,[R10]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Initialise some register values
        LDR     R8,=VRAM_TEST_DATA
        LDMIA   R8!,{R0-R7}

        ; Set up the fail message
        LDR     R12,=VRAM_HALFFAIL_MESS

	; If the cache is on - turn it off
	[ cache
	MOV	R0,#&0000
	MCR	a4c, 0, R0, control, cdummy
	]

	; Set IOMD2 to recognise me a a half speed master
	LDR	R10,=bmspd
	LDR	R0,[R10]
	ORR	R0,R0,#&20
	STR	R0,[R10]
	LDR	R10,=clkspd
	LDR	R0,[R10]
	ORR	R0,R0,#1
	STR	R0,[R10]

        ; Single write/read
        LDR     R10,=vram_base
        STR     R7,[R10]
        LDR     R7,[R10]
        LDR     R9,=VRAM_TEST_DATA+(7<<2)
        LDR     R8,[R9]
        TEQ     R7,R8
        BNE     VRAM_HALF_END

        ; 2 word burst write/read
        LDR     R10,=vram_base
        STMIA   R10!,{R6-R7}
        LDMDB   R10!,{R6-R7}
        LDR     R9,=VRAM_TEST_DATA+(6<<2)
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_HALF_END
        LDR     R8,[R9],#4
        TEQ     R7,R8
        BNE     VRAM_HALF_END

        ; 3 word burst write/read
        LDR     R10,=vram_base
        STMIA   R10!,{R5-R7}
        LDMDB   R10!,{R5-R7}
        LDR     R9,=VRAM_TEST_DATA+(5<<2)
        LDR     R8,[R9],#4
        TEQ     R5,R8
        BNE     VRAM_HALF_END
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_HALF_END
        LDR     R8,[R9],#4
        TEQ     R7,R8
        BNE     VRAM_HALF_END

        ; 4 word burst write/read
        LDR     R10,=vram_base
        STMIA   R10!,{R4-R7}
        LDMDB   R10!,{R4-R7}
        LDR     R9,=VRAM_TEST_DATA+(4<<2)
        LDR     R8,[R9],#4
        TEQ     R4,R8
        BNE     VRAM_HALF_END
        LDR     R8,[R9],#4
        TEQ     R5,R8
        BNE     VRAM_HALF_END
        LDR     R8,[R9],#4
        TEQ     R6,R8
        BNE     VRAM_HALF_END
        LDR     R8,[R9],#4
        TEQ     R7,R8
        BNE     VRAM_HALF_END

        LDR     R12,=VRAM_HALFPASS_MESS
VRAM_HALF_END
        LDR     R10, =fasttube
        STR     R12,[R10]

	; Set it all back to defaults
	LDR	R10,=clkspd
	LDR	R0,[R10]
	BIC	R0,R0,#1
	STR	R0,[R10]
	LDR	R10,=bmspd
	LDR	R0,[R10]
	BIC	R0,R0,#&20
	STR	R0,[R10]

	; If the cache was turned disabled above - turn it back on
	[ cache
	MOV	R0,#&1000
	MCR	a4c, 0, R0, control, cdummy
	]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ;; Send test complete message
        LDR     R0,=VRAM_TESTEND_MESS
        LDR     R10,=fasttube
        STR     R0,[R10]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ; Unstack return address
        MOV     PC,LR

	ALIGN	32

VRAM_TEST_DATA
        DCD     &01234567
        DCD     &12345678
        DCD     &23456789
        DCD     &3456789A
        DCD     &456789AB
        DCD     &56789ABC
        DCD     &6789ABCD
        DCD     &789ABCDE

VRAM_CONFIGS
        DCD     &00100000, &000FFFFC, &20
        DCD     &00200000, &000FFFF8, &40
        DCD     &00000000, &00000000, &00

	LTORG

        END

