; File:    irqtest.s
; Purpose: Test interrupt routing and selection in IOMD2
; Author:  Timothy Roddis
; History: 01-Mar-1998: TGR: created
;

        GET     s.video_defs

fdrq_test * &88000080
                            ;
IRQ_TESTSTART_MESS
        DCB     "TUBE:Irq testing beginning",&0
IRQ_TESTEND_MESS
        DCB     "TUBE:Irq testing completed",&0
IRQ_GIOSTART_MESS
        DCB     "TUBE:Gio test beginning", &0
IRQ_TESTPASS_MESS
        DCB     "TUBE:Irq PASSED test",0
IRQ_BACKTESTBEGIN
        DCB     "TUBE:Backward compatible interrupt testing beginning", 0
IRQ_EXTTESTBEGIN
        DCB     "TUBE:External interrupt testing beginning", 0
IRQ_INTTESTBEGIN
        DCB     "TUBE:Internal interrupt testing beginning", 0
IRQ_DMATESTBEGIN
        DCB     "TUBE:DMA interrupt testing beginning", 0
IRQ_GIOTESTBEGIN
        DCB     "TUBE:GIO interrupt testing beginning", 0
IRQ_RESET_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to reset to correct values", 4, 0
IRQ_CLRSTATFAIL_MESS
        DCB     "TUBE:Irq test FAILED to clear status register", 4, 0
IRQ_MAINROUTERESET_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to reset main routing", 4, 0
IRQ_OLDINT_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to set old interrupt status bit", 4, 0
IRQ_OLDRQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED  to set old interrupt request bit", 4, 0
IRQ_OLDPIRQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to route old interrupt as expected", 4, 0
IRQ_OLDIRQ_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to set backward compatibility status",4,0
IRQ_OLDFBKSET_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to set flyback in old status reg", 4, 0
IRQ_OLDFBKRQ_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to set flyback in old request reg", 4, 0
IRQ_OLDFBPIRQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to route flyback old interrupt as expected", 4, 0
IRQ_OLDFDSET_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to set floppy disc interrupt in old status reg", 4, 0
IRQ_OLDFDRQ_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to set floppy disc interrupt in old request reg", 4, 0
IRQ_OLDFDPIRQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to route floppy disc old interrupt as expected", 4, 0
IRQ_EXTSTATHIHI_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal hi, sense hi",4,0
IRQ_EXTSTATHILO_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal hi, sense lo",4,0
IRQ_EXTSTATLOLO_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal lo, sense lo",4,0
IRQ_EXTSTATLOHI_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal lo, sense hi",4,0
IRQ_EXTSTATPLPL_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal +, sense +",4,0
IRQ_EXTSTATPLMI_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal +, sense -",4,0
IRQ_EXTSTATMIMI_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal -, sense -",4,0
IRQ_EXTSTATMIPL_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show status signal -, sense +",4,0
IRQ_EXTRQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to show external interrupt request", 4, 0
IRQ_EXTROUTE_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to route external interrupt",4,0
IRQ_INTSERSTAT_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show internal interrupt status",4,0
IRQ_INTSERRQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to show internal interrupt request", 4, 0
IRQ_INTSERROUTE_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to route internal interrupt",4,0
IRQ_DMASTAT_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to show DMA interrupt status",4,0
IRQ_DMARQ_FAIL_MESS
       DCB     "TUBE:Irq test FAILED to show DMA interrupt request", 4, 0
IRQ_DMAROUTE_FAIL_MESS
        DCB     "TUBE:Irq test FAILED to route DMA interrupt",4,0
IRQ_GIO_INITFAIL_MESS
        DCB     "TUBE:Irq GIO test FAILED, initial value wrong", 4, 0
IRQ_GIO_VALFAIL_MESS
        DCB     "TUBE:Irq GIO test FAILED to set value", 4, 0
IRQ_GIO_LOOPFAIL_MESS
        DCB     "TUBE:Irq GIO test FAILED to read back value", 4, 0
IRQ_PREFIX_NO
        DCB     "TUBE: Irq: ", 0
        ALIGN

;; Start of the actual Irq test code
IRQ_TEST ROUT

        MOV     r13, r14

        ;; Send test starting message
        LDR     R0,=IRQ_TESTSTART_MESS
        LDR     R10,=fasttube
        STR     R0,[R10]

; Start testing sequence

	; Clear out any pending interrupts cause by reset conditions
        MOV     r2, #&ffffffff
        LDR     r9, =intreq   ; write 1's into request reg to clear
        STR     r2, [r9]

        LDR     r6, =irqsta
        LDR     r7, =intrtea     ; r7 -> clist interrupt routing tables
        LDR     r8, =intstatmon  ; r8 -> proc I/F interrupt status
        LDR     r9, =intstat

        LDRB    r2,[r8]          ; get proc I/F status
        TEQ     r2,#&ff
;        LDRNE   r12,=IRQ_IFINTSRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r9]         ; get enhanced bank status
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_MAINSTATRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r9, #4]     ; get enhanced bank enable
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_MAINSENBLRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r9, #8]     ; get enhanced bank request
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_MAINSREQRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6]         ; get old, old irq A status reg
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQSTARESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #4]     ; get old, old irq A request
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQRQARESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #8]     ; get old, old irq A enable
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQENARESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #&10]   ; get old, old irq B status reg
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQSTBRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #&14]   ; get old, old irq B request
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQRQBRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #&18]   ; get old, old irq B enable
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQENBRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #&20]   ; get old, old fiq status reg
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQSTBRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #&24]   ; get old, old fiq request
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQRQBRESET_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDREQ   r2, [r6, #&28]   ; get old, old fiq enable
        TEQEQ   r2, #0
;        LDRNE   r12,=IRQ_IRQENBRESET_FAIL_MESS
        LDRNE   r12,=IRQ_RESET_FAIL_MESS
        BNE     IRQ_TESTEND

 [ {FALSE}

; check intlvl???


; check routing tables are correct defaults

        LDR     r2, [r7]        ; intrtea
        TEQ     r2, #0
        LDREQ   r2, [r7, #4]    ; intrteb
        TEQEQ   r2, #0
        LDREQ   r2, [r7, #8]    ; intrtec
        TEQEQ   r2, #0
        LDREQ   r2, [r7, #12]   ; intrted
        TEQEQ   r2, #0
        LDREQ   r2, [r7, #16]    ; intrtee
        TEQEQ   r2, #0
        LDRNE   r12,=IRQ_MAINROUTERESET_FAIL_MESS
        BNE     IRQ_TESTEND
 ]

        LDR     r12,=intstat
        MOV     r2, #0
        STR     r2,[r12, #4]
        LDR     r2,[r12, #4]
        TEQ     r2, #0
        LDRNE   r12,=IRQ_CLRSTATFAIL_MESS
        BNE     IRQ_TESTEND

;----------------------------------------------------------------------------
; test backward compatible interrupts

; IOMD2 should reset in a state where the IOMD1 backward compatible
; registers are configured as needed.
        LDR     r0, =fasttube
        LDR	r1, IRQ_BACKTESTBEGIN

           ^       0
ExtInt     #       4
ExtType    #       4
OldIntAddr #       4
OldIntMask #       4

        LDR     r0, =intlvl
        LDR     r1, [r0]
        ORR     r1, r1, #1:SHL:31
        STR     r1, [r0]

        LDR     r0, =irqsta
        MOV     r1, #1:SHL:2
        STR     r1, [r0]

        LDR     r0, =IRQ_TESTDATA_START
        LDR     r1, =IRQ_TESTDATA_END
        LDR     r5, =fiqst
        LDR     r6, =extintcfg00
        LDR     r7, =irqtest
        LDR     r11,=extintcause

        MOV     r2, #1:SHL:31 ; set test
        STR     r2, [r7]      ; mode

10
        LDR     r2, [r0], #4   ; get ext/int/ser irq no.

        MOV     r3, #1
        MOV     r3, r3, LSL r2 ; select appropriate interrupt bit

        CMP     r2, #16        ; internal/serial or external?

        LDRLT   r4, [r0], #4   ; get external irq type
        STRLT   r4, [r6,r2]    ; setup type
        STRLT   r3, [r11]      ; set interrupt

        ORRGE   r3, r3, #1:SHL:31
        STRGE   r3, [r7]       ; internal/serial interrupt
        ADDGE   r0, r0, #4     ; skip over type


        LDR     r2, [r0], #4   ; get address of irq status reg.
        LDR     r4, [r0], #4   ; get bit pos in reg

; test backward compatible status reg.
        LDR     r9, [r2]       ; r9 := olde-fashioned status reg contents
        TEQ     r9, r4         ; is it set how we expect
        LDRNE   r12,=IRQ_OLDINT_FAIL_MESS
        BNE     IRQ_TESTEND

; test backward compatible request bit
        STR     r4,  [r2, #8]  ; enable interrupt
        LDR     r12, [r2, #4]  ; get request bits (offset 4 from status)
        TEQ     r12, r4        ; expected bit pattern?
        LDRNE   r12,=IRQ_OLDRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        TEQ     r2, r5         ; see which irq reg is in use
;        MOVEQ   r9, #(1 :SHL: 5) :EOR: &ff ; pfiq[0]
        BEQ     %FT25
        MOVNE   r9, #1:EOR: &ff             ; pirq[0]

        LDRB    r12, [r8]      ; get status of proc I/F interrupts
        TEQ     r12,r9
        LDRNE   r12,=IRQ_OLDPIRQ_FAIL_MESS
        BNE     IRQ_TESTEND
25
        MOV     r3, #0
        STR     r3, [r11]      ; zero causes of interrupts
        ORR     r3, r3, #1:SHL:31 ; keep test mode enabled
        STR     r3, [r7]
        MOV     r3, #&ffffffff
        LDR     r9, =intreq   ; write 1's into request reg to clear
        STR     r3, [r9]

        CMP     r0, r1
        BLT     %BT10

        BL      set_flyback
        LDR     r0, =irqsta
        LDR     r1, [r0] ; get status
        TEQ     r1, #8
        LDRNE   r12, =IRQ_OLDFBKSET_FAIL_MESS
        BNE     IRQ_TESTEND

        STR     r1, [r0, #8] ; enable interrupt
        LDR     r1, [r0, #4] ; get request
        TEQ     r1, #8
        LDRNE   r12, =IRQ_OLDFBKRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        LDRB    r1, [r8]
        TEQ     r1, #&fe
        LDRNE   r12, =IRQ_OLDFBPIRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        BL      clear_flyback

       	MOV	r1, #&ff
        STR     r1, [r0, #4] ; clear interrupt

        LDR     r1, =fdrq_test
        MOV     r2, #1
        STR     r2, [r1]

        LDR     r0, =fiqst
        LDR     r1, [r0] ; get status
        TEQ     r1, #1
        LDRNE   r12, =IRQ_OLDFDSET_FAIL_MESS
        BNE     IRQ_TESTEND

        STR     r1, [r0, #8] ; enable interrupt
        LDR     r1, [r0, #4] ; get request
        TEQ     r1, #1
        LDRNE   r12, =IRQ_OLDFDRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        LDRB    r1, [r8]
        TEQ     r1, #&fe
        LDRNE   r12, =IRQ_OLDFDPIRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        LDR     r1, =fdrq_test
        MOV     r2, #0
        STR     r2, [r1]

       	MOV	r1, #0
       	STR	r1, [r0, #8] ; disable all
       	MOV	r1, #&ff
        STR     r1, [r0, #4] ; clear all interrupts


;============================================================================
; test enhanced interrupts

; interrupt ids:
;
;  000 - irq 0  |  010 - irq 2  |  100 - irq 4  |  110 - irq 6
;  001 - irq 1  |  011 - irq 3  |  101 - irq 5  |  111 - irq 7
;

; zero a few things

        MOV     r3, #0
        STR     r3, [r7]      ; zero internal/serial/DMA interrupt cause
        STR     r3, [r11]     ; zero external interrupt cause
        LDR     r7, =intrtea     ; r7 -> clist interrupt routing tables
        STR     r3, [r7]      ; zero routing info: intrtea
        STR     r3, [r7, #4]  ; intrteb
        STR     r3, [r7, #8]  ; intrtec
        STR     r3, [r7, #12] ; intrted
        STR     r3, [r7, #16] ; intrtee
        LDR     r0, =intlvl
        STR     r3, [r0]      ; zero level info

        MOV     r3, #4

        STR     r3, [r6]      ; extintcfg00
        STR     r3, [r6,#4]   ; extintcfg01
        STR     r3, [r6,#8]   ; extintcfg02
        STR     r3, [r6,#12]  ; extintcfg03
        STR     r3, [r6,#16]  ; extintcfg04
        STR     r3, [r6,#20]  ; extintcfg05
        STR     r3, [r6,#24]  ; extintcfg06
        STR     r3, [r6,#28]  ; extintcfg07
        STR     r3, [r6,#32]  ; extintcfg08
        STR     r3, [r6,#36]  ; extintcfg09
        STR     r3, [r6,#40]  ; extintcfg10
        STR     r3, [r6,#44]  ; extintcfg11
        STR     r3, [r6,#48]  ; extintcfg12

        LDR     r9, =intstat
        MOV     r3, #&ffffffff
        STR     r3, [r9, #4]


        LDR     r3, =fasttube
        LDR     r2, =IRQ_EXTTESTBEGIN
        STR	r2, [r3]

; test generator??? (rising, falling edge, eacg level?)


;----------------------------------------------------------------------------
; test external interrupts

; r0 = intlvl

        MOV     r3, #1
        MOV     r5, #0
        MOV     r10, #&ffffffff
        MOV     r12,#0


30
        LDR     r12, =IRQ_PREFIX_NO
        LDR     r10, =fasttube
        STR     r12, [r10]
        LDR     r10, =dump_r5
        STR     r5, [r10]
        MOV     r10, #&ffffffff
        MOV     r12,#0

        MOV     r4, #7         ; r4 is iterrupt id (outward) ie. routing value

40
        AND     r2, r5, #7         ; 0 .. 7 interrupts per word
        ADD     r2, r2, r2, LSL #1 ; spaced every 3 bits
        MOV     r1, r4, LSL r2 ; write routing info into relevant position
        MOV     r2, r5, LSR #3
        STR     r1, [r7, r2, LSL #2] ; in correct routing word

;        TEQ     r5, #6
;        ADREQ   r14, %FT45
;        BEQ     set_sense_flyback ; regsters free include r1,r2
;        TEQ     r5, #12
;        LDREQ   r1, =fdrq_test
;        MOVEQ   r2, #1
;        STREQ   r2, [r1]

        MOV     r1, r3, LSL r5
        STR     r1, [r11]      ; cause interrupt (active high)
45
        LDR     r2, [r9]
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_EXTSTATHIHI_FAIL_MESS
        BNE     IRQ_TESTEND

        STR     r2, [r9, #8]          ; enable
        LDR     r2, [r9, #4]          ; get request
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_EXTRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        LDRB    r2, [r8]              ; check interrupt bit (and only that bit)
        EOR     r2, r2, #&ff
        TEQ     r2, r3, LSL r4        ; is set in instatmon
        LDRNE   r12,=IRQ_EXTROUTE_FAIL_MESS
        BNE     IRQ_TESTEND

;        MOV     r2, #0
;        STR     r2, [r9, #8]          ; disable everything again

        SUBS    r4, r4, #1
        BGE     %BT40

        MOV     r2, #0
        STR     r2, [r9, #8]          ; disable everything again

;        TEQ     r5, #6
;        BLEQ    clear_flyback
;        TEQNE   r5, #12
;        BEQ     %FT47

; check each type of interrupt

        MOV     r4, #1         ; level, active lo

        MOV     r1, r4, LSL r5 ; move up two places
        MOV     r1, r1, LSL r5 ; for each value of r5

        STR     r1, [r0]       ; configure interrupt sensitivity type

;        MOV     r2, r3, LSL r5 ; go
;        STR     r2,[r11]       ; hi

; signal hi, trigger on lo

        LDR     r2, [r9]
        TEQ     r2, #0
        LDRNE   r12,=IRQ_EXTSTATHILO_FAIL_MESS
        BNE     IRQ_TESTEND

;        STR     r12, [r11]     ; clear extern causes

        ORR     r4, r4, #4
        MOV     r2, r5, LSL #2
        STR     r4, [r6, r2]   ; configure interrupt test type to lo

        MOV     r2, r3, LSL r5 ; go
        STR     r2,[r11]       ; lo

; signal lo, trigger on lo

        LDR     r2, [r9]
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_EXTSTATLOLO_FAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r4, #0         ; level, active hi

        MOV     r1, r4, LSL r5 ; move up two places
        MOV     r1, r1, LSL r5 ; for each value of r5

        STR     r1, [r0]       ; configure interrupt sensitivity type

;        MOV     r2, r3, LSL r5 ; go
;        STR     r2,[r11]       ; lo

; signal lo, trigger on hi

        LDR     r2, [r9]
        TEQ     r2, #0
        LDRNE   r12,=IRQ_EXTSTATLOHI_FAIL_MESS
        BNE     IRQ_TESTEND

; now test edge irqs

        MOV     r4, #2         ; rising edge

        MOV     r1, r4, LSL r5 ; move up two places
        MOV     r1, r1, LSL r5 ; for each value of r5

        STR     r1, [r0]       ; configure interrupt sensitivity type

        STR     r12, [r11]     ; clear extern causes

        ORR     r4, r4, #4
        MOV     r2, r5, LSL #2
        STR     r4, [r6, r2]   ; configure interrupt test type to rising edge

        STR     r10, [r9, #4]  ; clear latched interrupts

        MOV     r2, r3, LSL r5 ; generate
        STR     r2,[r11]       ; rising edge

; generated rising edge, trigger on rising edge

        LDR     r2, [r9]
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_EXTSTATPLPL_FAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r4, #3         ; falling edge

        MOV     r1, r4, LSL r5 ; move up two places
        MOV     r1, r1, LSL r5 ; for each value of r5

        STR     r1, [r0]       ; configure interrupt sensitivity type (-ve)

        STR     r12, [r11]     ; clear extern causes

        STR     r10, [r9, #4]  ; clear latched interrupts

        MOV     r2, r3, LSL r5 ; generate
        STR     r2, [r11]      ; rising edge

; generated rising edge, trigger on falling edge

        LDR     r2, [r9]
        TEQ     r2, #0
        LDRNE   r12,=IRQ_EXTSTATPLMI_FAIL_MESS
        BNE     IRQ_TESTEND

        STR     r12, [r11]     ; clear extern causes

        ORR     r4, r4, #4
        MOV     r2, r5, LSL #2
        STR     r4, [r6, r2]   ; configure interrupt test type to falling edge

        STR     r10, [r9, #4]  ; clear latched interrupts

        MOV     r2, r3, LSL r5 ; generate
        STR     r2,[r11]       ; falling edge

; generated falling edge, trigger on falling edge

        LDR     r2, [r9]
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_EXTSTATMIMI_FAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r4, #2         ; rising edge

        MOV     r1, r4, LSL r5 ; move up two places
        MOV     r1, r1, LSL r5 ; for each value of r5

        STR     r1, [r0]       ; configure interrupt sensitivity type (-ve)

        STR     r12, [r11]     ; clear extern causes

        STR     r10, [r9, #4]  ; clear latched interrupts

        MOV     r2, r3, LSL r5 ; generate
        STR     r2, [r11]      ; falling edge

; generated falling edge, trigger on rising edge

        LDR     r2, [r9]
        TEQ     r2, #0
        LDRNE   r12,=IRQ_EXTSTATMIPL_FAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r4, #4
        MOV     r2, r5, LSL #2
        STR     r4, [r6, r2]   ; configure interrupt test type to hi
        MOV     r2, #0
        STR     r2, [r0]
        STR     r10, [r9, #4]   ; clear latched interrupts

47
        ADD     r5, r5, #1
        CMP     r5,#12 ; 0.12 external enhanced interrupts
        BLE     %BT30

        MOV     r2, #0
        STR     r2, [r11]      ; clear all interrupt causes

;----------------------------------------------------------------------------
; test internal and serial interrupts

        LDR     r5, =fasttube
        LDR     r2, =IRQ_INTTESTBEGIN
        STR	r2, [r5]

        LDR     r9, =intlvl
        MOV     r5, #1:SHL:31
        STR     r5, [r9]
        LDR     r9, =intstat

        MOV     r5, #16          ; internal and serial interrupts
        LDR     r6, =irqtest

        MOV     r2, #1:SHL:31  ; set test mode
        STR     r2, [r6]
50
        LDR     r12, =IRQ_PREFIX_NO
        LDR     r10, =fasttube
        STR     r12, [r10]
        LDR     r10, =dump_r5
        STR     r5, [r10]
        MOV     r10, #&ffffffff

        MOV     r4, #0         ; r4 is iterrupt id (outward)
        MOV     r2, r3, LSL r5 ; bit position for interrupt
        ORR     r2, r2, #1:SHL:31
        STR     r2, [r6]       ; fake interrupt
60

        AND     r2, r5, #7         ; 0 .. 7 interrupts per word
        ADD     r2, r2, r2, LSL #1 ; spaced every 3 bits

        MOV     r1, r4, LSL r2 ; write routing info into relevant position
        MOV     r2, r5, LSR #3
        STR     r1, [r7, r2, LSL #2] ; in correct routing word

        LDR     r2, [r9]
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_INTSERSTAT_FAIL_MESS
        BNE     IRQ_TESTEND

        STR     r2, [r9, #8]          ; enable
        LDR     r2, [r9, #4]          ; get request
        TEQ     r2, r3, LSL r5
        LDRNE   r12,=IRQ_INTSERRQ_FAIL_MESS
        BNE     IRQ_TESTEND

        LDRB    r2, [r8]              ; check interrupt bit (and only that bit)
        EOR     r2, r2, #&ff
        TEQ     r2, r3, LSL r4        ; is set in instatmon
        LDRNE   r12,=IRQ_INTSERROUTE_FAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r2, #0
        STR     r2, [r9, #8]          ; disable everything again

        ADD     r4, r4, #1
        CMP     r4, #7
        BLE     %BT60

        STR     r10, [r9, #4]

        ADD     r5, r5, #1
        TEQ     r5, #23
        ADDEQ   r5, r5, #1
        CMP     r5,#29 ; 16..29 (incl) internal enhanced interrupts
        BLE     %BT50

        MOV     r5, #1:SHL:31
        STR     r5, [r6] ; clear cause of ints, leave in test mode

;----------------------------------------------------------------------------
; test DMA
        LDR     r5, =fasttube
        LDR     r2, =IRQ_DMATESTBEGIN
        STR	r2, [r5]

        MOV     r5, #0           ; DMA
        LDR     r6, =irqtest
        LDR     r7, =intrtee
        LDR     r9, =dmast

70
        MOV     r4, #0         ; r4 is iterrupt id (outward)
        MOV     r2, r3, LSL r5 ; bit position for interrupt
        ORR     r2, r2, #1:SHL:31
        STR     r2, [r6]       ; fake interrupt
80
        ADD     r2, r5, r5, LSL #1 ; routing spaced every 3 bits

        MOV     r1, r4, LSL r2 ; write routing info into relevant position
        STR     r1, [r7]

;        LDR     r2, [r9]
;        TEQ     r2, r3, LSL r5
;        LDRNE   r12,=IRQ_DMASTAT_FAIL_MESS
;        BNE     IRQ_TESTEND

;        STR     r2, [r9, #8]          ; enable

;        LDR     r2, [r9, #4]          ; get request
;        TEQ     r5, #4
;        ADDGE   r10, r5, #4
;        TEQ     r2, r3, LSL r10
;        LDRNE   r12,=IRQ_DMARQ_FAIL_MESS
;        BNE     IRQ_TESTEND

        LDRB    r2, [r8]              ; check interrupt bit (and only that bit)
        EOR     r2, r2, #&ff
        TEQ     r2, r3, LSL r4        ; is set in instatmon
        LDRNE   r12,=IRQ_DMAROUTE_FAIL_MESS
        BNE     IRQ_TESTEND

        ADD     r4, r4, #1
        CMP     r4, #7
        BLE     %BT80

        ADD     r5, r5, #1
        CMP     r5,#7  ; 16..31 internal enhanced interrupts
        BLE     %BT70

        MOV     r5, #0
        STR     r5, [r6] ; clear cause of ints
;----------------------------------------------------------------------------
; gio stuff

        LDR     r5, =fasttube
        LDR     r2, =IRQ_GIOTESTBEGIN
        STR	r2, [r5]

        LDR     R12,=IRQ_GIOSTART_MESS
        LDR     R10,=fasttube
        STR     R12,[R10]

        LDR     r9, =iocr
        LDR     r8, =giostat

        LDR     r0, [r8]
        TEQ     r0, #&77
        LDRNE   r12, =IRQ_GIO_INITFAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r0, #6
        STR     r0, [r9]
        LDR     r1, [r8]
        ORR     r0, r0, r0, LSL #4
        TEQ     r1, r0
        LDRNE   r12, =IRQ_GIO_VALFAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r0, #5
        STR     r0, [r9]
        LDR     r1, [r8]
        ORR     r0, r0, r0, LSL #4
        TEQ     r1, r0
        LDRNE   r12, =IRQ_GIO_VALFAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r0, #3
        STR     r0, [r9]
        LDR     r1, [r8]
        ORR     r0, r0, r0, LSL #4
        TEQ     r1, r0
        LDRNE   r12, =IRQ_GIO_VALFAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r0, #7
        STR     r0, [r9]
        LDR     r1, [r8]
        ORR     r0, r0, r0, LSL #4
        TEQ     r1, r0
        LDRNE   r12, =IRQ_GIO_VALFAIL_MESS
        BNE     IRQ_TESTEND

        MOV     r7, #0
90
        ORR     r0, r7, #&80
        STR     r0, [r8]

        LDR     r0, [r9]
        AND     r0, r0, #&3f
        TEQ     r0, r7
        LDRNE   r12, =IRQ_GIO_LOOPFAIL_MESS
        BNE     IRQ_TESTEND

        ADD     r7, r7, #1
        CMP     r7, #7
        BLE     %BT90

        MOV     r0, #&80
        STR     r0, [r8]

        LDR     r12,=IRQ_TESTPASS_MESS

IRQ_TESTEND
        LDR     R10,=fasttube
        STR     R12,[R10]

        ;; Send test complete message
        LDR     R0,=IRQ_TESTEND_MESS
        LDR     R10,=fasttube
        STR     R0,[R10]

        ; Unstack return address
        MOV     PC,r13


set_sense_flyback
        MOV     r4, #3         ; falling edge

        MOV     r1, r4, LSL r5 ; move up two places
        MOV     r1, r1, LSL r5 ; for each value of r5

        STR     r1, [r0]       ; configure interrupt sensitivity type (-ve)

        STR     r10, [r9, #4]  ; clear latched interrupts

set_flyback
        MOV     r1, #VidcModel
        MOV     r2, #VidcModelTCR
        ORR	r2, r2, #TCR_TestModeEnable
        STR     r2, [r1] ; deassert everything
        ORR     r2, r2, #TCR_Flyback
        STR     r2, [r1] ; assert flyback
        MOVS    pc, r14

clear_flyback
        MOV     r1, #VidcModel
        MOV     r2, #VidcModelTCR
        ORR	r2, r2, #TCR_TestModeEnable
        STR     r2, [r1] ; deassert everything
        MOVS    pc, r14



IRQ_TESTDATA_START
        DCD     28 ; Pintr
        DCD     1
        DCD     irqsta
        DCD     1

        DCD     5 ; Nindex
        DCD     3
        DCD     irqsta
        DCD     1:SHL:2
 [ {FALSE}
        DCD     6 ; Flybk
        DCD     2
        DCD     irqsta
        DCD     1:SHL:3

        DCD     22 ; por
        DCD     1 ; ???
        DCD     irqsta
        DCD     1:SHL:4
 ]

        DCD     16 ; timer 0
        DCD     1 ; ???
        DCD     irqsta
        DCD     1:SHL:5

        DCD     17 ; timer 1
        DCD     1 ; ???
        DCD     irqsta
        DCD     1:SHL:6

        DCD     0 ; npfiq
        DCD     1
        DCD     irqstb
        DCD     1

        DCD     3 ; nidea
        DCD     1
        DCD     irqstb
        DCD     1:SHL:1

        DCD     25 ; Nsintr/sintr0
        DCD     1
        DCD     irqstb
        DCD     1:SHL:2

        DCD     4 ; nideb
        DCD     1
        DCD     irqstb
        DCD     1:SHL:3

        DCD     27 ; Nfintr
        DCD     1
        DCD     irqstb
        DCD     1:SHL:4

        DCD     1 ; npirq
        DCD     1
        DCD     irqstb
        DCD     1:SHL:5

        DCD     24 ; kirq
        DCD     1 ; ???
        DCD     irqstb
        DCD     1:SHL:6

        DCD     29 ; mirq
        DCD     1 ; ???
        DCD     irqstb
        DCD     1:SHL:7
 [ {FALSE}
        DCD     18 ; timer 2
        DCD     1 ; ???
        DCD     irqstb
        DCD     1:SHL:10

        DCD     19 ; timer 3
        DCD     1 ; ???
        DCD     irqstb
        DCD     1:SHL:11

        DCD     20 ; timer 4
        DCD     1 ; ???
        DCD     irqstb
        DCD     1:SHL:12

        DCD     21 ; timer 5
        DCD     1 ; ???
        DCD     irqstb
        DCD     1:SHL:13

        DCD     12 ;Fdrq
        DCD     0
        DCD     fiqst
        DCD     1:SHL:0
 ]
        DCD     4 ; Nideb
        DCD     1
        DCD     fiqst
        DCD     1:SHL:1

        DCD     25 ; Nsintr/sintr0
        DCD     1
        DCD     fiqst
        DCD     1:SHL:4

        DCD     0 ; npfiq
        DCD     1
        DCD     fiqst
        DCD     1:SHL:6

IRQ_TESTDATA_END

	LTORG

        END

