; File:    circlist.s
; Purpose: Test circular lists in IOMD2
; Author:  Timothy Roddis
; History: 20-Feb-1998: TGR: created
;
                            ;
CIRCLIST_TESTSTART_MESS
    DCB     "TUBE:Circular list testing beginning",&0
CIRCLIST_TESTEND_MESS
    DCB     "TUBE:Circular list testing completed",&0
CIRCLIST_TESTPASS_MESS
    DCB     "TUBE:Circular list test PASSED",0
CIRCLIST_RESETFAIL_MESS
    DCB     "TUBE:Circular list FAILED to clear on reset",4,0
CIRCLIST_DATAFAIL_MESS
    DCB     "TUBE:Circular list FAILED; read doesn't match write",4,0
CIRCLIST_DATA2FAIL_MESS
    DCB     "TUBE:Circular list FAILED; 2nd read doesn't match 2nd write",4,0
CIRCLIST_SETNOTEMPTY_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to set 'not empty' status",4,0
CIRCLIST_CLRNOTEMPTY_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to clear 'not empty' status",4,0
CIRCLIST_SETEMPTY_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to set 'empty' status",4,0
CIRCLIST_CLREMPTY_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to clear 'empty' status",4,0
CIRCLIST_SETFULL_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to set 'full' status",4,0
CIRCLIST_CLRFULL_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to clear 'full' status",4,0
CIRCLIST_FAULT_MESS
    DCB     "TUBE:Circular list FAILED; unexpected value for status",4,0
CIRCLIST_LEVELSETEARLY_FAIL_MESS
    DCB     "TUBE:Circular list FAILED; set 'level' too early (filling)",4,0
CIRCLIST_LEVELNOTSET_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to set 'level' status (filling)",4,0
CIRCLIST_LEVELSETLATE_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to clear 'level' status (filling)",4,0
CIRCLIST_LEVELSETEARLY2_FAIL_MESS
    DCB     "TUBE:Circular list FAILED; set 'level' too early (emptying)",4,0
CIRCLIST_LEVELNOTSET2_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to set 'level' status (emptying)",4,0
CIRCLIST_LEVELSETLATE2_FAIL_MESS
    DCB     "TUBE:Circular list FAILED to clear 'level' status (emptying)",4,0
CIRCLIST_0001FAIL_MESS
    DCB     "TUBE:Circular list FAILED; IRQ status not 0001 (empty)",4,0
CIRCLIST_0010FAIL_MESS
    DCB     "TUBE:Circular list FAILED; IRQ status not 0010 (not empty)",4,0
CIRCLIST_0110FAIL_MESS
    DCB     "TUBE:Circular list FAILED; IRQ status not 0110 (level, not empty",4,0
CIRCLIST_1010FAIL_MESS
    DCB     "TUBE:Circular list FAILED; IRQ status not 1010 (full, not empty)",4,0
CIRCLIST_ROUTECLR_FAIL_MESS
   DCB      "TUBE:Circular list FAILED; interrupts reportes erroneously", 4, 0
CIRCLIST_ROUTESETEMPTY_FAIL_MESS
   DCB      "TUBE:Circular list FAILED to route 'empty' correctly", 4, 0
CIRCLIST_ROUTESETNOTEMPTY_FAIL_MESS
   DCB      "TUBE:Circular list FAILED to route 'notempty' correctly", 4, 0
CIRCLIST_ROUTESETFULL_FAIL_MESS
   DCB      "TUBE:Circular list FAILED to route 'full' correctly", 4, 0
CIRCLIST_ROUTESETLEVEL_FAIL_MESS
   DCB      "TUBE:Circular list FAILED to route 'level' correctly", 4, 0

;CIRCLIST_STATUSSTRING_PTRS
;    DCD


        ALIGN

list_dat      *        0
list_enbl     *        list00enbl-list00dat
list_level    *        list00level-list00dat
list_stat     *        list00stat-list00dat

int_empty     *        1
int_notempty  *        2
int_full      *        4
int_level     *        8

level1        *        5
level2        *        9

              GBLA     i

;; Start of the actual semaphore test code
CIRCLIST_TEST ROUT

        ;; Send test starting message
        LDR     R0,=CIRCLIST_TESTSTART_MESS
        LDR     R10,=fasttube
        STR     R0,[R10]

; Start testing sequence

        LDR     r5, =list00dat
        LDR     r6, =list07dat
        LDR     r4,=CIRCLIST_TEST_DATA
        LDR     r0,[r4]     ; r0 = first datum
        LDR     r1,[r4,#4]  ; r1 = second datum
;        MOV     r12,#0

10
        LDR     r2,[r5,#list_enbl]
        TEQ     r2,#0
        LDREQ   r2,[r5,#list_level]
        TEQEQ   r2,#0
        LDREQ   r2,[r5,#list_stat]
        TEQEQ   r2,#9
        LDRNE   r12,=CIRCLIST_RESETFAIL_MESS
        BNE     CIRCLIST_TESTEND

; this tests _all_ 16 physical words in the list

        ; write words

        STR     r0,[r5] ;
        STR     r1,[r5] ;
        STR     r0,[r5] ;
        STR     r1,[r5] ; write
        STR     r0,[r5] ;
        STR     r1,[r5] ;  16
        STR     r0,[r5] ;
        STR     r1,[r5] ; words
        STR     r0,[r5] ;
        STR     r1,[r5] ;  of
        STR     r0,[r5] ;
        STR     r1,[r5] ; data
        STR     r0,[r5] ;
        STR     r1,[r5] ;
        STR     r0,[r5] ;
        STR     r1,[r5] ;

        ; read back words (and therefore empty list)

        LDR     r2,[r5] ; word 0
        TEQ     r2,r0   ;
        LDREQ   r2,[r5] ; 1
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 2
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 3
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 4
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 5
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 6
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 7
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 8
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 9
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; a
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; b
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; c
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; d
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; e
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; f
        TEQEQ   r2,r1   ;

        LDRNE   r12,=CIRCLIST_DATAFAIL_MESS
        BNE     CIRCLIST_TESTEND

        ; write words

        STR     r1,[r5] ;       ; 1
        STR     r0,[r5] ;       ; 2
        STR     r1,[r5] ; write ; 3
        STR     r0,[r5] ;       ; 4
        STR     r1,[r5] ;  16   ; 5
        STR     r0,[r5] ;       ; 6
        STR     r1,[r5] ; words ; 7
        STR     r0,[r5] ;       ; 8
        STR     r1,[r5] ;  of   ; 9
        STR     r0,[r5] ;       ; a
        STR     r1,[r5] ; data  ; b
        STR     r0,[r5] ;       ; c
        STR     r1,[r5] ;       ; d
        STR     r0,[r5] ;       ; e
        STR     r1,[r5] ;       ; f
        STR     r0,[r5] ;       ; full

        ; read back words (and therefore empty list)

        LDR     r2,[r5] ; word 0
        TEQ     r2,r1   ;
        LDREQ   r2,[r5] ; 1
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 2
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 3
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 4
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 5
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 6
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 7
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; 8
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; 9
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; a
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; b
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; c
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; d
        TEQEQ   r2,r0   ;
        LDREQ   r2,[r5] ; e
        TEQEQ   r2,r1   ;
        LDREQ   r2,[r5] ; f
        TEQEQ   r2,r0   ;

        LDRNE   r12,=CIRCLIST_DATA2FAIL_MESS
        BNE     CIRCLIST_TESTEND

        ADD     r5, r5, #&10
        CMP     r5,r6
        BLE     %BT10

;----------------------------------------------------------------------------

; second set of tests: test list zero for various filling and
; emptying conditions

;        MOV     r0, #int_full :OR: int_notempty :OR: int_empty
;        STR     r0, [r5, #list_enbl]
        LDR     r5, =list00dat

        STR     r0, [r5] ; put a word on the list, now not empty
        LDR     r2, [r5,#list_stat]
        TEQ     r2,#int_notempty ; should be only flag set
        LDRNE   r12,=CIRCLIST_SETNOTEMPTY_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        LDR     r0,[r5] ; get word from list, clear not empty, set empty
        LDR     r2, [r5,#list_stat]
        TST     r2,#int_notempty
        LDRNE   r12,=CIRCLIST_CLRNOTEMPTY_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        TST     r2,#int_empty
        LDREQ   r12,=CIRCLIST_SETEMPTY_FAIL_MESS
        BEQ     CIRCLIST_TESTEND

; finsihed with not empty stuff, mask out to avoid confusion

;        MOV     r2, #int_full :OR: int_empty
;        STR     r2, [r5, list_enbl]

        STR     r0,[r5] ; 0->1

        LDR     r2, [r5, #list_stat]
        TST     r2,#int_empty
        LDRNE   r12,=CIRCLIST_CLREMPTY_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        STR     r0,[r5] ; 1->2
        STR     r0,[r5] ; 2->3
        STR     r0,[r5] ; 3->4
        STR     r0,[r5] ; 4->5
        STR     r0,[r5] ; 5->6
        STR     r0,[r5] ; 6->7
        STR     r0,[r5] ; 7->8
        STR     r0,[r5] ; 8->9
        STR     r0,[r5] ; 9->a
        STR     r0,[r5] ; a->b
        STR     r0,[r5] ; b->c
        STR     r0,[r5] ; c->d
        STR     r0,[r5] ; d->e
        STR     r0,[r5] ; e->f : full

; test full

        LDR     r2,[r5,#list_stat]
        TST     r2, #int_full
        LDREQ   r12,=CIRCLIST_SETFULL_FAIL_MESS
        BEQ     CIRCLIST_TESTEND

        LDR     r2,[r5] ; f->e
        LDR     r2,[r5,#list_stat]
        TST     r2,#int_full
        LDRNE   r12,=CIRCLIST_CLRFULL_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        LDR     r2,[r5] ; e->d
        LDR     r2,[r5] ; d->c
        LDR     r2,[r5] ; c->b
        LDR     r2,[r5] ; b->a
        LDR     r2,[r5] ; a->9
        LDR     r2,[r5] ; 9->8
        LDR     r2,[r5] ; 8->7
        LDR     r2,[r5] ; 7->6
        LDR     r2,[r5] ; 6->5
        LDR     r2,[r5] ; 5->4
        LDR     r2,[r5] ; 4->3
        LDR     r2,[r5] ; 3->2
        LDR     r2,[r5] ; 2->1
        LDR     r2,[r5] ; 1->empty

        LDR     r2,[r5,#list_stat]
        TEQ     r2, #int_empty :OR: int_level
        LDRNE   r12,=CIRCLIST_FAULT_MESS ; fault in S/W or H/W
        BNE     CIRCLIST_TESTEND

;----------------------------------------------------------------------------

; 0.K IOMD2 specification does not clearly state that the list is full
; after 15 one word writes
;
; ip = input pointer, op = output pointer associated with list
;
; test level stuff
;
; level 1  = full         (15 data, 0 spaces, 1 bogus word)
; level 2  = nearly full  (1 space)
;        ...
; level 15 = nearly empty (1 valid data word, 14 spaces)
; level 0  = empty        (15 spaces)
;
; Therefore as data is written, current level, n: ip + n = op moves from
; 0/16 (15 spaces, no data) decrementing and wrapping through
; 15 (14 spaces, one datum) to 1 (full, 15 data)
;
; A level of n represents an interrupt when there are n-1 spaces, 16-n data



;        MOV     r2,#int_level
;        STR     r2,[r5,#list_enbl]

        ASSERT  level1 <> 0

        MOV     r2, #level1
        STR     r2, [r5, #list_level]

; In the following the value of i is such that
;    ip + i = op after the write concerned

i       SETA    15

        WHILE   i > level1

        STREQ   r0, [r5]
        LDREQ   r2, [r5, #list_stat]
        TSTEQ   r2, #int_level

i       SETA    i - 1

        WEND

        LDRNE   r12,=CIRCLIST_LEVELSETEARLY_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        STR     r0, [r5]
        LDR     r2, [r5, #list_stat]
        TST     r2, #int_level
        LDREQ   r12,=CIRCLIST_LEVELNOTSET_FAIL_MESS
        BEQ     CIRCLIST_TESTEND

        TEQ     r0,r0 ; set Z flag

i       SETA    level1 - 1

        WHILE   i >= 1

        STREQ   r0, [r5]
        LDREQ   r2, [r5, #list_stat]
        TSTEQ   r2, #int_level

i       SETA    i - 1

        WEND

        LDRNE   r12,=CIRCLIST_LEVELSETLATE_FAIL_MESS
        BNE     CIRCLIST_TESTEND

; current level (not level interrupt) should now be 1 (ip + 1 = op)
; ie. now full

i       SETA    2

        WHILE   i <= level1 - 1

        LDREQ   r2, [r5]
        LDREQ   r2, [r5, #list_stat]
        TSTEQ   r2, #int_level

i       SETA    i + 1

        WEND

        LDRNE   r12,=CIRCLIST_LEVELSETEARLY2_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        LDR     r2, [r5]
        LDR     r2, [r5, #list_stat]
        TST     r2, #int_level
        LDREQ   r12,=CIRCLIST_LEVELNOTSET2_FAIL_MESS
        BEQ     CIRCLIST_TESTEND

        TEQ     r0,r0 ; set Z flag

; now at level (ip + level = op)

i       SETA    level1 + 1

        WHILE   i <= 16

        LDREQ   r2, [r5]

        LDREQ   r2, [r5, #list_stat]
        TSTEQ   r2, #int_level

i       SETA    i + 1

        WEND

        LDRNE   r12,=CIRCLIST_LEVELSETLATE2_FAIL_MESS
        BNE     CIRCLIST_TESTEND

;----------------------------------------------------------------------------
; test everything together (third part of test)

        ASSERT  level2 <> 0

        MOV     r2, #level2
        STR     r2, [r5, #list_level]

        LDR     r2, [r5, #list_stat]
        TEQ     r2, #int_empty
        LDRNE   r12,=CIRCLIST_0001FAIL_MESS
        BNE     CIRCLIST_TESTEND

; In the following the value of i is such that
;    ip + i = op after the write concerned

i       SETA    15

        WHILE   i > level2

        STREQ   r0, [r5]
        LDREQ   r2, [r5, #list_stat]
        TEQEQ   r2, #int_notempty

i       SETA    i - 1

        WEND

        LDRNE   r12,=CIRCLIST_0010FAIL_MESS
        BNE     CIRCLIST_TESTEND

        STR     r0, [r5]
        LDR     r2, [r5, #list_stat]
        TEQ     r2, #int_level :OR: int_notempty
        LDRNE   r12,=CIRCLIST_1010FAIL_MESS
        BNE     CIRCLIST_TESTEND

i       SETA    level2 - 1

        WHILE   i > 1

        STREQ   r0, [r5]
        LDREQ   r2, [r5, #list_stat]
        TEQEQ   r2, #int_notempty

i       SETA    i - 1

        WEND

        LDRNE   r12,=CIRCLIST_0010FAIL_MESS
        BNE     CIRCLIST_TESTEND

        STR     r0, [r5]
        LDR     r2, [r5, #list_stat]
        TEQ     r2, #int_notempty :OR: int_full
        LDRNE   r12,=CIRCLIST_0110FAIL_MESS
        BNE     CIRCLIST_TESTEND

; current level (not level interrupt) should now be 1 (ip + 1 = op)
; ie. now full

i       SETA    2

        WHILE   i <= level2 - 1

        LDREQ   r2, [r5]
        LDREQ   r2, [r5, #list_stat]
        TEQEQ   r2, #int_notempty

i       SETA    i + 1

        WEND

        LDRNE   r12,=CIRCLIST_0010FAIL_MESS
        BNE     CIRCLIST_TESTEND

        LDR     r2, [r5]
        LDR     r2, [r5, #list_stat]
        TEQ     r2, #int_level :OR: int_notempty
        LDRNE   r12,=CIRCLIST_1010FAIL_MESS
        BNE     CIRCLIST_TESTEND

; now at level (ip + level = op)

i       SETA    level2 + 1

        WHILE   i <= 15

        LDREQ   r2, [r5]

        LDREQ   r2, [r5, #list_stat]
        TEQEQ   r2, #int_notempty

i       SETA    i + 1

        WEND

        LDRNE   r12,=CIRCLIST_0010FAIL_MESS
        BNE     CIRCLIST_TESTEND

        LDR     r2, [r5]
	LDR	r2, [r5, #list_stat]
        TEQ     r2, #int_empty
        LDRNE   r12,=CIRCLIST_0001FAIL_MESS
        BNE     CIRCLIST_TESTEND

        MOV     r2, #0 ; level back to 0 (empty test)
        STR     r2, [r5, #list_level]
 [ {FALSE}
;----------------------------------------------------------------------------
; now test interrupt routing

; interrupt ids:
;
;  000 - irq 0  |  010 - irq 2  |  100 - irq 4  |  110 - irq 6
;  001 - irq 1  |  011 - irq 3  |  101 - irq 5  |  111 - irq 7
;

        MOV     r5, #0         ; r5 is current list _number_

        LDR     r6, =intstat
        STR     r5, [r6, #4]   ; write zero to request

        LDR     r6, =list00dat ; r6 is pointer to base list
        LDR     r7, =cliea     ; r7 -> clist interrupt routing tables
        LDR     r8, =intstatmon

50
; loop
        ADD     r0, r6, r5, LSL #4 ; r0 -> current list (r6 + r5 * 16)



        MOV     r4, #0 ; r4 is interrupt id

60

        AND     r2, r5, #&1        ; r2 := shift to be applied to list number
        ADD     r2, r2, r2, LSL #1 ; to get bit position in cliea .. clied
        MOV     r2, r2, LSL #2     ; essentially a multiply by 12 after masking

        MOV     r3, r4, LSL r2 ; r3 := routing info (all other lists zero) for
                               ;       relevant word of table

        ORR     r3, r3, r3, LSL #3 ; OR it into each of the positions
        ORR     r3, r3, r3, LSL #6 ; for that list

        MOV     r2, r5, LSR #1      ; get word number

        STR     r3, [r7, r2, LSL #2] ; write routing info into correct routing word

70
        MOV     r1, #&0              ; disable all interrupts:
        STR     r1, [r0, #list_enbl]

; check no interrupts set


        LDRB    r2, [r8] ; get dodgy model interrupt status monitor
        TEQ     r2, #&ff
        LDRNE   r12, =CIRCLIST_ROUTECLR_FAIL_MESS
        BNE     CIRCLIST_TESTEND

; test empty (0001) and level    (1000)
; then full  (0100) and notempty (0010)

        MOV     r1, #int_empty       ; enable 'empty' only
        STR     r1, [r0, #list_enbl]

        LDRB    r2, [r8] ; get dodgy model interrupt status monitor
        MOV     r3, #1
	MOV	r3, r3, LSL r4
	EOR	r3, r3, #&ff
        TEQ     r2, r3
        LDRNE   r12, =CIRCLIST_ROUTESETEMPTY_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        LDR     r1, [r0] ; make list 'not empty' / 'full' : CHEAT

        MOV     r1, #int_notempty       ; enable 'not empty' only
        STR     r1, [r0, #list_enbl]

        LDRB    r2, [r8] ; get dodgy model interrupt status monitor
        MOV     r3, #1
	MOV	r3, r3, LSL r4
	EOR	r3, r3, #&ff
        TEQ     r2, r3
        LDRNE   r12, =CIRCLIST_ROUTESETNOTEMPTY_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        MOV     r1, #int_full      ; enable 'full' only
        STR     r1, [r0, #list_enbl]

        LDRB    r2, [r8] ; get dodgy model interrupt status monitor
        MOV     r3, #1
	MOV	r3, r3, LSL r4
	EOR	r3, r3, #&ff
        TEQ     r2, r3
        LDRNE   r12, =CIRCLIST_ROUTESETFULL_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        STR     r1,[r0]

        MOV     r1, #int_level      ; enable 'full' only
        STR     r1, [r0, #list_enbl]

        LDRB    r2, [r8] ; get dodgy model interrupt status monitor
        MOV     r3, #1
	MOV	r3, r3, LSL r4
	EOR	r3, r3, #&ff
        TEQ     r2, r3
        LDRNE   r12, =CIRCLIST_ROUTESETLEVEL_FAIL_MESS
        BNE     CIRCLIST_TESTEND

        ADD     r4, r4, #1
        CMP     r4, #7
        BLE     %BT60

        MOV     r1, #0               ; disable interrupts so as not to
        STR     r1, [r0, #list_enbl] ; interfere with other lists' tests

        ADD     r5, r5, #1
        CMP     r5,#7
        BLE     %BT50
 ]
        LDR     r12,=CIRCLIST_TESTPASS_MESS

CIRCLIST_TESTEND
        LDR     R10,=fasttube
        STR     R12,[R10]

        ;; Send test complete message
        LDR     R0,=CIRCLIST_TESTEND_MESS
        LDR     R10,=fasttube
        STR     R0,[R10]

        ; Unstack return address
        MOV     PC,LR

CIRCLIST_TEST_DATA

        DCD     &76543210
        DCD     &89abcdef

	LTORG

        END

