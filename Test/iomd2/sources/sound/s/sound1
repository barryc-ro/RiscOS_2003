; Name:    sound1
; Purpose: Test sound (video block) of IOMD 2
; Author:  Richard Leggett
; History: 22-Apr-98: RML: Created
; Description:
; 2 quad words from buffer A
; 2 quad words from buffer B
; 2 quad words from buffer A

            AREA    soundtest, CODE, READONLY

;            GET     tests.s
;            GET     video_defs.s
;            GET     iomd2_defs.s
;            GET     test_defs.s
            GET     hdr:tests
            GET     s.video_defs
            GET     hdr:iomd2_defs
            GET     hdr:test_defs

                  GBLL CancelSoundDMA
CancelSoundDMA    SETL {FALSE}

SoundPatternSize  * 24
SoundBufferStart  * sdram0_base
SoundBufferEnd    * SoundBufferStart + (SoundPatternSize * 4)
BmspdValue        * Bm_SoundHalfSpeed


;===============================================================================
; Vectors

            ORG     &00000000

reset       B       sound_test
undefined   B       undefined
swi         B       swi
preabort    B       preabort
dataabort   B       dataabort
notused     B       notused
irq         B       irq
fiq         B       fiq


;===============================================================================
; Main test code

	EXPORT	sound_test

sound_test

; SDRAM initialisation

a4c	CP	15
cdummy	CN	0
control	CN	1

            LDR    r1, =prechg
            LDR    r0, [r1]     ;trigger SDRAM precharge

            LDR    r1, =sdmode  ;set SDRAM mode
            MOV    r0, #&20     ;burst=1,sequential,taa=2
            STR    r0, [r1]

            LDR    r1, =sdtmg   ;SDRAM timings
            MOV    r0, #&0b
            STR    r0, [r1]

            LDR    r1, =sdramcr ;sdramcr
            MOV    r0, #&0
            STR    r0, [r1]

            LDR    r5,=66       ; wait 33us
            LDR    r1, =t0low
            LDR    r2, =t0high
            LDR    r3, =t0go
            MOV    r6, #0
            STRB   r5,[r1]
            STRB   r6,[r2]
            STRB   r6,[r3]

            LDR    r4, =irqsta

init_start_loop
            LDRB   r7,[r4]
            TSTS   r7, #1<<5
            BEQ    init_start_loop

; End of SDRAM iniitlisation


; We'll keep these registers and use them throughout the code

            MOV    r1, #iocr            ; IOMD2 register offset
            MOV    r2, #VidcModel       ; Address of VIDC model register
            LDR    r3, =fasttube        ; Fasttube address

; Write to Vidc model to tell it how many words of sound data to expect

            LDR    r0, smodelsize
            STR    r0, [r2]             ; sound words

; Setup memory - write to various IOMD registers

            ; Set busmaster speed
            MOV    r0, #BmspdValue
            STR    r0, [r1, #&F8]       ; bm3spd

            ; Wait for 8 refresh cycles (16us)
            ;MOV    r0, #2*8*16
            ;BL     sound_delay

; Generate pattern data in memory

            MOV    r5, #SoundPatternSize
            LDR    r6, =sndpattern
            LDR    r7, soundstart
            LDR    r8, soundend
            LDR    r9, soundstart
            BL     sound_genpattern

; Chris Specific Code

            ; Set sound control reg to enable DMAs
            MOV    r0, #&24
            STR    r0, [r1, #&190]      ; sd0cr

            ; Write to current and end regs of buffer A
            LDR    r0, soundstart
            STR    r0, [r1, #&180]      ; sd0curA
            ADD    r0, r0, #28
            STR    r0, [r1, #&184]      ; sd0endA

            ; Get vidcmodel to do a request
            BL     sound_do_request

            ; Write to current and end regs of buffer B
            LDR    r0, soundstart
            ADD    r0, r0, #32
            STR    r0, [r1, #&188]      ; sd0curB
            ADD    r0, r0, #28
            STR    r0, [r1, #&18C]      ; sd0endB

            ; Wait until interrupt goes high
            BL     wait_for_int

            ; Write to current and end regs of buffer A
            LDR    r0, soundstart
            ADD    r0, r0, #64
            STR    r0, [r1, #&180]      ; sd0curA
            ADD    r0, r0, #28
            STR    r0, [r1, #&184]      ; sd0endA

            [ CancelSoundDMA
            ; Write to sound control register to cancel the DMA
            MOV    r0, #&A4
            STR    r0, [r1, #&190]      ; sd0cr
            ]

            BL     sound_checkdata
            BL     check_for_state_110

finished    ; Terminate the simulation by sending Ctrl-D to the tube
	    LDR    r0, =CtrlD
            LDR    r1, =tube
            STR    r0, [r1]

finishloop
            B      finishloop


;===============================================================================
; check_for_state_110
;
; Check that we are in the correct state

check_for_state_110

            LDR    r0, [r1,#&194]       ; sd0st
            AND    r0,r0, #2_111
            TEQ    r0, #2_110
            LDRNE  r0, =not_st_110      ; Write expected state error to tube
            STRNE  r0,[r3]

            MOV    pc, lr


;===============================================================================
; wait_for_int
;
; Wait until interrupt bit of control register to be set

wait_for_int

            LDR    r0, [r1,#&194]       ; sd0st
            AND    r0,r0, #2_010
            TEQ    r0,#2_010
            BNE    wait_for_int

            MOV    pc, lr


;===============================================================================
; sound_do_request
;
; Get Vidc model to do a DMA request, by pulling appropriate lines

sound_do_request

            ; get around IOMD2 bug - remove later
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #(TCR_TestModeEnable + TCR_NVidrq + TCR_NSndrq)
            STR    r0, [r2]
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            MOV    r0, r0
            ; end of IOMD bug code

            ; Write to Vidc20 model to pull bits and pieces
            MOV    r0, #VidcModelTCR
            ORR    r0, r0, #TCR_TestModeEnable
            ORR    r0, r0, #TCR_NVidrq
            STR    r0, [r2]

            MOV    pc, lr


;===============================================================================
; sound_delay
;
; In: r0 = delay in 0.5 us

sound_delay
            ;MOV    r0, r0, LSL#1

04          SUBS   r0, r0, #1
            BNE    %BT04

            MOV    pc, lr


;===============================================================================
; sound_genpattern
;
; Generate a pattern of data
;
; In: r5 -> Number of words (32bit) to write
;     r6 -> pattern data
;     r7 -> init position
;     r8 -> end position
;     r9 -> wraparound position

sound_genpattern

06          LDR    r0, [r6], #4
            STR    r0, [r7], #4
            CMP    r7, r8
            MOVGE  r7, r9
            SUBS   r5, r5, #1
            BNE    %BT06

            MOV    pc, lr


;===============================================================================
; sound_checkdata
;
; Check VIDC20 model to see if data got through okay
;
; Corrupts: r0, r5, r6

sound_checkdata

            ; Loop through until vidrq and sndrq are back to 1 or timed out
            MOV    r5, #&ff
08          LDR    r6, rb_tcr
            LDR    r0, [r6]             ; Readback Test Control Register
            TST    r0, #4               ; test bit 2 (Nsndrq)
            TSTNE  r0, #8               ; test bit 3 (Nvidrq)
            BNE    %FT10                ; if both set, break out
            SUBS   r5, r5, #1
            BNE    %BT08

            ; Timeout: Nvidrq and Nsndrq didn't turn to 1 in time.
            LDR    r0, =rb_timeout
            STR    r0, [r3]
            MOV    pc, lr               ; return

10          ; Nvidrq and Nsndrq are both 1
            LDR    r6, rb_trr           ; Test results register
            LDR    r0, [r6]

            TST    r0, #TRR_Sound       ; Check bit 1 for if sound DMA data valid
            LDREQ  r5, =rb_snd_val
            LDRNE  r5, =rb_snd_inv
            STR    r5, [r3]

            TST    r0, #TRR_SetupHoldCheck
            LDREQ  r5, =rb_set_val
            LDRNE  r5, =rb_set_inv
            STR    r5, [r3]

            MOV    pc, lr               ; return


;===============================================================================
; Data

rb_tcr      DCD    &85200000
rb_trr      DCD    &85280000
rb_countvid DCD    &85290000
rb_countsnd DCD    &852A0000
rb_countcur DCD    &852B0000

soundstart  DCD    SoundBufferStart
soundend    DCD    SoundBufferEnd
smodelsize  DCD    VidcModelSoundLength + SoundPatternSize


;===============================================================================
; Fasttube messages

            ALIGN  4
rb_timeout  DCB    "TUBE:Timed out checking the test control register. "
            DCB    "Nvidrq or Nsndrq didn't return to 1 - incomplete DMA?"
            DCB    CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_vid_inv  DCB    "TUBE:Invalid video DMA data.", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_vid_val  DCB    "TUBE:Valid video DMA data.", 0
            ALIGN  4
rb_snd_inv  DCB    "TUBE:Invalid sound DMA data.", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_snd_val  DCB    "TUBE:Valid sound DMA data.", 0
            ALIGN  4
rb_cur_inv  DCB    "TUBE:Invalid cursor DMA data.", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_cur_val  DCB    "TUBE:Valid cursor DMA data.", 0
            ALIGN  4
rb_set_inv  DCB    "TUBE:Setup/Hold check failed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
rb_set_val  DCB    "TUBE:Setup/Hold check passed", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
not_st_110  DCB    "TUBE:Error - Sound state machine not in expected state (110)", CONTINUE_AFTER_ERROR, 0
            ALIGN  4
not_st_111  DCB    "TUBE:Error - Sound state machine not in expected state (111)", CONTINUE_AFTER_ERROR, 0

            GET    s.pattern
            ;GET    pattern.s

            END
