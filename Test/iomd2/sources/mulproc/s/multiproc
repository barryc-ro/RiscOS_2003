	GET	mppatterns.s

; Registers for main test

Rpattern	RN	0		; 0 assumed in error reporting
Rbuspatt	RN	1
Rtable		RN	2
Rprocid		RN	3
RBMa		RN	4		; Intentionally same as Rresult
Rresult		RN	4		; 4 assumed in error reporting
RBMb		RN	5		; Intentionally same as Rscratch
Rscratch	RN	5
RBMc		RN	6		; Intentionally same as Rscratch2
Rscratch2	RN	6
RBMd		RN	7
RBMe		RN	8
Rexpect		RN	9		; 9 assumed in error reporting
Rfasttube	RN	10


	GBLA	nbitsa
	GBLA	pria
pria	SETA	1
	GBLS	nbits
	GBLS	pri
	GBLS	pritxt
	GBLS	nbits

	WHILE	pria < 2

nbitsa	SETA	5

	WHILE	nbitsa > 0

	[ pria = 0
pri	SETS	"f"
pritxt	SETS	"fixed priority"
	|
pri	SETS	"r"
pritxt	SETS	"round-robin priority"
	]

nbits	SETS	:STR:nbitsa:RIGHT:1

mp_checkstart$nbits$pri			; Entered as BL mp_checkstart$nbits$pri
					; so can return with MOVS pc, lr
					; No stack available in r13

	LDR	Rfasttube, =fasttube	; Start of test
	LDR	Rscratch, =MP_START$nbits$pri
	STR	Rscratch, [Rfasttube]

	LDR	Rscratch2, =bmprty	; The IOMD register for the
	MOV	Rscratch, #$pria	; priority mode
	STR	Rscratch, [Rscratch2]	; (0 = fixed, 1 = round-robin)

	LDR	Rprocid, =procid	; The IOMD register for reading the
					; bus master number (range 1-3)
	LDR	Rtable, =inpout$nbits$pri ; A table of patterns and expected
					; resulting sequences
					; Table is zero-terminated
	LDR	Rbuspatt, =buspatt	; The magic pattern request address
	B	checkgo$nbits$pri

	ALIGN	32
check$nbits$pri
	STR	Rpattern, [Rbuspatt]	; Request pattern

	LDR	RBMa, [Rprocid]		; As many LDRs as bits set in
	[	nbitsa >= 2
	LDR	RBMb, [Rprocid]		; the bus pattern
	]
	[	nbitsa >= 3
	LDR	RBMc, [Rprocid]		; Could pack mclk count in here
	]
	[	nbitsa >= 4
	LDR	RBMd, [Rprocid]		; if wished but would then
	]
	[	nbitsa >= 5
	LDR	RBMe, [Rprocid]		; need to worry about ORRs below
	]

	[	nbitsa >= 2
	ORR	Rresult, RBMa, RBMb, LSL#2	; Build up result
	]
	[	nbitsa >= 3
	ORR	Rresult, Rresult, RBMc, LSL#4	; Assumes b2-b31 clear
	]
	[	nbitsa >= 4
	ORR	Rresult, Rresult, RBMd, LSL#6
	]
	[	nbitsa >= 5
	ORR	Rresult, Rresult, RBMe, LSL#8
	]

	CMP	Rresult, Rexpect	; All OK?
	BNE	error

checkgo$nbits$pri
	LDMIA	Rtable!, {Rpattern, Rexpect}  ; Get pattern and expected result
	CMP	Rpattern, #0
	BNE	check$nbits$pri

	LDR	Rfasttube, =fasttube	; All clear!
	LDR	Rscratch, =MP_END$nbits$pri
	STR	Rscratch, [Rfasttube]

	MOVS	pc, lr


MP_START$nbits$pri	DCB	"TUBE:Multiprocessor test, $pritxt, "
			DCB	"$nbits bus requests, starting", 0
			ALIGN
MP_END$nbits$pri	DCB	"TUBE:Multiprocessor test, $pritxt, "
			DCB	"$nbits bus requests, passed", 0
			ALIGN


nbitsa	SETA	nbitsa - 1
	WEND

pria	SETA	pria - 1
	WEND


error
	LDR	Rfasttube, =fasttube
	LDR	Rscratch, =MP_FAIL
	STR	Rscratch, [Rfasttube]

	ASSERT	Rpattern = 0
	LDR	Rfasttube, =dump_r0
	STR	Rpattern, [Rfasttube]
	ASSERT	Rexpect = 9
	LDR	Rfasttube, =dump_r9
	STR	Rexpect, [Rfasttube]
	ASSERT	Rresult = 4
	LDR	Rfasttube, =dump_r4
	STR	Rresult, [Rfasttube]

	MOVS	pc, lr			; Abandon ship


MP_FAIL		DCB	"TUBE:Multiprocessor $pritxt test failure; "
		DCB	"pattern, expect, got = ", 0
		ALIGN


	END
