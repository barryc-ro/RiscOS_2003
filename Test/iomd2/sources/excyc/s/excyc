;	--------------------------------------------
; 	© Acorn Computers Ltd. 1998
;
; 	IOMD2 EXTCYC Tests
;	--------------------------------------------

;	Steve Taylor

;	0.0a	05.03.1998	Initial
;	0.0b	10.03.98	Now uses fasttube messaging, implemented
;				continue/abort on error
;	0.0c	10.03.98	Minor corrections
;	0.0d	11.03.98	Swapped data expressions to end of code
;	0.0e	24.03.98	Corrected ECTCR immediate values to Hex (not decimal! :-(
;				Updated error register addresses from &03xxxxxx to new 
;				&68xxxxxx scheme. Also a common initialisation code sequence will have been added
;				at the integration stage


;	------------------------------------------------
;	Writes a message to Tube
;	Requires that tube_defin has been Got beforehand
;	------------------------------------------------
	
	MACRO
$tubewrm	write_message	$message
	
$tubewrm
	LDR	r12, =$message		; Pointer to message
	LDR	r11, =fasttube		; Pointer to the FastTube address
	STR	r12,[r11]		; Send the message
	
	MEND




	EXPORT	extcyc_test
extcyc_test
; Register assignments
; R0	Internal error register
; R1	testpattern
; R2	Working address
; R3	scratch / Raw verify data
; R4	current error register address
; R5	current error register contents

; R6	Saved LR
; R7	Saved LR

; R8	Binary value for conversion / scratch
; R9	
; R10	
; R11	pointer to tube
; R12	message
; R13	Saved LR for overall routine


;	ENTRY

; Setup some registers
	MOV	R13,LR					; Save LR for return later (no SP used in this code)
	MOV	R0,#&0					; Clear our private error flag register
	LDR	R1,=extcyc_testpattern
	write_message	extcyc_testbegin_message


; Cycle type A
EXTCYC_A
	write_message	extcyc_cyclea_message
	LDR	R2,=extcyc_cyclea_addr			; Access address
	LDR	R4,=extcyc_cycleacef_error_register	; Error register address
	LDR	R3,=ectcr				; Setup Control register
	MOV	R5,#&0000
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine


; Cycle type C
EXTCYC_C
	write_message	extcyc_cyclec_message
	LDR	R2,=extcyc_cyclec_addr			; Access address
	LDR	R4,=extcyc_cycleacef_error_register	; Error register address
	LDR	R3,=ectcr
	MOV	R5,#&0001
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine

; Cycle type E
EXTCYC_E
	write_message	extcyc_cyclee_message
	LDR	R2,=extcyc_cyclee_addr			; Access address
	LDR	R4,=extcyc_cycleacef_error_register	; Error register address
	LDR	R3,=ectcr
	MOV	R5,#&0200
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine

; Cycle type F
EXTCYC_F
	write_message	extcyc_cyclef_message
	LDR	R2,=extcyc_cyclef_addr			; Access address
	LDR	R4,=extcyc_cycleacef_error_register	; Error register address
	LDR	R3,=ectcr
	MOV	R5,#&0300
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine

; Cycle type D
EXTCYC_D
	write_message	extcyc_cycled_message
	LDR	R2,=extcyc_cycled_addr			; Access address
	LDR	R4,=extcyc_cycledg_error_register	; Error register address
	LDR	R3,=iotcr
	MOV	R5,#&0300
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine


; Cycle type G
EXTCYC_G
	write_message	extcyc_cycleg_message
	LDR	R2,=extcyc_cycleg_addr				; Access address
	LDR	R4,=extcyc_cycledg_error_register				; Error register address
	LDR	R3,=iotcr
	MOV	R5,#&0000
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine


; Stretched cycle type
EXCTCYC_S
	write_message	extcyc_stretched_message
	LDR	R2,=extcyc_cycles_addr				; Access address
	LDR	R4,=extcyc_cyclestretched_error_register; Error register address
	LDR	R3,=iotcr
	MOV	R5,#&0000				; Load arbitrary value into IOTCR
	STR	R5,[R3]

	BL	EXTCYC_VALIDATA				; Then write, read and verify data
							; reporting errors, in EXTCYC_VALIDATA subroutine



; END OF TEST ********************
EXTCYC_END
	write_message	extcyc_testend_message		; Test Ends

	MOV	PC,R13					; Return




; --------- Data comparison routine
; Register assignment for this subroutine:
; R1	Testpattern
; R2	Current access address
; R3	Raw read data
; R4	Current error register address
; R5	scratch
; R6
; R7	Saved link register from entry to this routine


EXTCYC_VALIDATA
	MOV	R7,LR

	STR	R1,[R2]					; Write the testpattern
	LDR	R3,[R2]					; Read it back
	CMPS	R1,R3					; Is it the same as was written?
	ORRNE	R0,R0,#&01

	LDR	R5,[R4]					; Get extcyc error register
	TST	R5,#extcyc_errorbit			; Did the error register flag a failure?
	ORREQ	R0,R0,#&02

	CMPS	R0,#&0
	BLNE	EXTCYC_FAILURE

	MOV	PC, R7					; return to calling routine


; Test fail routines: *******

; A function failed
; Here we try to find out which one, and then report to Tube

EXTCYC_FAILURE
	MOV	R6, LR
	
	LDR	R10,=dump_r2
	STR	R2,[R10]				; Print the current address

	LDR	r10,=dump_r3
	STR	R3,[r10]				; Print (unshifted) data

	LDR	r10,=dump_r4
	STR	r4,[r10]				; Print the error register

	CMPS	R0,#&01					; Was only the "verify failed" bit set?
	BLEQ	EXTCYC_VERIFY_INEQUALITY		; ie. written+read data was unequal
							; but the error register didn't show it

	CMPS	R0,#&02					; Was only the "failure bit" bit set?
	BLEQ	EXTCYC_FAIL_INEQUALITY			; ie. error register thought failure occurred
							; but data had verified OK

	CMPS	R0,#&03					; Were v+f bits set?
	BLEQ	EXTCYC_VERIFICATION_FAILED		; ie. error register and verification agreed
							; that an error occurred

	MOV	R0,#&0					; Clear our internal failure register

	MOV	PC,R6					; Return to calling routine



EXTCYC_VERIFY_INEQUALITY
	write_message	extcyc_verifyinequality_message
	MOV	PC,LR

EXTCYC_FAIL_INEQUALITY
	write_message	extcyc_failbitinequality_message
	MOV	PC,LR

EXTCYC_VERIFICATION_FAILED
	write_message	extcyc_verifyfalse_message
        MOV	PC,LR
        
    

extcyc_testpattern	*	&12345678			; Arbitrary test pattern

extcyc_errorbit	*	&80000000				; Failure flag on io_model register

extcyc_cycleacef_error_register	*	&6803C024		; Error registers for cycletype accesses
extcyc_cycledg_error_register	*	&6803C01C
extcyc_cyclestretched_error_register	*	&6803C004

extcyc_cyclea_addr	*	&08010000			; Access addresses to initiate cycletype
extcyc_cyclec_addr	*	&08010010
extcyc_cyclee_addr	*	&08010020
extcyc_cyclef_addr	*	&08010030
extcyc_cycled_addr	*	&03800030
extcyc_cycleg_addr	*	&03800000
extcyc_cycles_addr	*	&03000140




extcyc_testbegin_message
	DCB	"TUBE:EXTCYC Tests BEGIN",&0

extcyc_cyclea_message
	DCB	"TUBE:EXTCYC Cycle A",&0
extcyc_cyclec_message
	DCB	"TUBE:EXTCYC Cycle C",&0
extcyc_cyclee_message
	DCB	"TUBE:EXTCYC Cycle E",&0
extcyc_cyclef_message
	DCB	"TUBE:EXTCYC Cycle F",&0
extcyc_cycled_message
	DCB	"TUBE:EXTCYC Cycle D",&0
extcyc_cycleg_message
	DCB	"TUBE:EXTCYC Cycle G",&0
extcyc_stretched_message
	DCB	"TUBE:EXTCYC Stretched Cycle",&0

; Failure messages have continue_after_error symbol which is
; set at compile-time - either a nul or a CtrlD to 
; terminate
extcyc_verifyfalse_message
	DCB	"TUBE:EXTCYC Verify FAILED: Data was false"
	DCB	CONTINUE_AFTER_ERROR, 0
extcyc_verifyinequality_message
	DCB	"TUBE:EXTCYC Verify FAILED: But extcyc_ErrorRegister flagged No Error!"
	DCB	CONTINUE_AFTER_ERROR, 0
extcyc_failbitinequality_message
	DCB	"TUBE:EXTCYC Verify SUCCEEDED: But extcyc_ErrorRegister flagged FAILURE!"
	DCB	CONTINUE_AFTER_ERROR, 0

extcyc_testpass_message
	DCB	"TUBE:EXTCYC Tests PASSED",&0
	
extcyc_testend_message
	DCB	"TUBE:EXTCYC Test END",CtrlD,&0
	ALIGN


	END

