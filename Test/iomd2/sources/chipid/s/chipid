;	--------------------------------------------
; 	© Acorn Computers Ltd. 1998
;
; 	IOMD2 JTAG ID & Version test
;	--------------------------------------------
;	Steve Taylor
; 	Version History:
;	0.0a	20.02.98	initial scribbling
; 	v0.0b	23.02.1998	Got some data from Alex
;	v0.0c	02.03.98	Got some slightly different data from Alex!
;	0.0d	10.03.98	Register reassignments, use fasttube, use
;				continue_after_error compile-time switching
;
;
;	On Entry: R3 holds base address of IOMD2 id0
;	On Exit:  R0-R2, R10-R14 corrupted
;			R0 [byte0] contains ID0
;			R0 [byte1] contains ID1
;			R0 [byte2] contains version
;			R1, R2 are garbage
;			R3 holds base of id0
;	Interrupts: Unaltered


;	------------------------------------------------
;	Writes a message to Tube
;	Requires that tube_defin has been Got beforehand
;	------------------------------------------------

	MACRO
$tubewrm	write_message	$message

$tubewrm
	LDR	r12, =$message		; Pointer to message
	LDR	r11, =fasttube		; Pointer to the FastTube address
	STR	r12,[r11]		; Send the message

	MEND



ID_testbegin_message
	DCB	"TUBE:ID Test BEGINS", &0
ID_dataexpected_message
	DCB	"TUBE:ID Expected: ",&0
ID_datafound_message
	DCB	"TUBE:ID Found: ",&0
ID_testpassed_message
	DCB	"TUBE:ID Test Passed",&0
ID_testfailed_message
	DCB	"TUBE:ID Test FAILED"
	DCB	CONTINUE_AFTER_ERROR, 0
ID_testend_message
	DCB	"TUBE:ID Test ENDS",&0
	ALIGN

; Vars

idtarget	*	&01D5E8		; Prototype JTAG version,ID1,ID0


	EXPORT	id_test
id_test
; Begin the ID test
	MOV	R13, LR			; Save initial LR (no SP used so R13 is general reg)

IDbegin	write_message	ID_testbegin_message	; Begin test

	write_message	ID_dataexpected_message
	LDR	R8,=idtarget
	LDR	R10,=dump_r8
	STR	R8,[R10]		; Print the expected id values

	LDR	r3,=id0			; Point base reg to IOMD2 id0

	; Block load IOMD info registers
	; So r0=id0,r1=id1,r2=version
	LDR	R0,[R3],#4
	LDR	R1,[R3],#4
	LDR	R2,[R3]

	AND	r0,r0,#&FF		; and mask their hi bytes
	AND	r1,r1,#&FF		; to get rid
	AND	r2,r2,#&FF		; of any garbage

	ORR	r0,r0,r1,LSL#8		; Shift id-hi into byte1 of R1
					; and collate R1 and R0 into R0
	ORR	r0,r0,r2,LSL#16		; Assemble version field into Byte2
					; of R0
					; R0 [byte2:0]=vers:id1:id0

	LDR	r2,=idtarget
	CMPS	r0,r2			; Compare with target value
	BNE	ID_test_failed		; If different, report failure
	write_message	ID_testpassed_message

	MOV	R8,R0
	LDR	R10,=dump_r8
	STR	R8,[R10]		; Print the ID info to Tube

	write_message	ID_testend_message
;	LDR	r11, =tube		; Pointer to the Tube address
;	MOV	r12,#CtrlD		; Quit simulation
;	STR	r12,[r11]

	MOV	PC,R13			; Exit code

ID_test_failed	write_message	ID_testfailed_message
	write_message	ID_datafound_message
	MOV	r8,r0
	LDR	R10,=dump_r8
	STR	R8,[R10]

;	LDR	r11, =tube		; Pointer to the Tube address
;	MOV	r12,#CtrlD		; Quit simulation
;	STR	r12,[r11]

	MOV	PC,R13			; End routine

; End of ID test


	END
