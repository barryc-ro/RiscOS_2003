;	--------------------------------------------
; 	© Acorn Computers Ltd. 1998
;
; 	IOMD2 Podule Cycle test
;	--------------------------------------------
;	Steve Taylor
;
;	0.0a	02.03.98	initial
;	0.0b	10.03.98	Change to fasttube mode of messaging, implemented the continue_after_error
;				compile-time switching
;	0.0c	11.03.98	Moved data expressions to end of code
;	0.0d	12.03.98	Spotted that I don't report a test pass! Fixed this. Also LR would get
;				overwritten on deeper branches, now save LR in R9
;	0.0e	24.03.98	Implemented new error register addresses at
;				&68xxxxxx. Also a common initialisation code sequence will have been added
;				at the integration stage


testpattern	*	&12340000			; Only Top 16bits required for write

podcyc_slow_access	*	&03240000
podcyc_medium_access	*	&03280000
podcyc_fast_access	*	&03380000
podcyc_synchronous_access	*	&03380000

podcyc_errorreg	*	&88000018
podcyc_errorbit	*	&80000000

; ****************************************************************************************************
; NB as at 060398 the halfword routing has not been implemented in model therefore this test will fail
; ****************************************************************************************************

;

;	------------------------------------------------
;	Writes a message to Tube
;	Requires that tube_defin has been Got beforehand
;	------------------------------------------------
podcyc_testbegin_message
	DCB	"TUBE:PODCYC Test BEGINS",&0

podcyc_routinghi_message
	DCB	"TUBE:PODCYC Routing Failure: Read Data was in Hi Halfword"
	DCB	CONTINUE_AFTER_ERROR, 0
podcyc_verifyfalse_message
	DCB	"TUBE:PODCYC Verify Failure: Data was false"
	DCB	CONTINUE_AFTER_ERROR, 0
podcyc_verifyfailinequality_message
	DCB	"TUBE:PODCYC Verify Failure but podcyc_ErrorRegister said all OK!"
	DCB	CONTINUE_AFTER_ERROR, 0
podcyc_failbitinequality_message
	DCB	"TUBE:PODCYC Verify successful but podcyc_ErrorRegister said FAILURE!"
	DCB	CONTINUE_AFTER_ERROR, 0

podcyc_slowstart_message
	DCB	"TUBE:PODCYC About to do SLOW test"
	DCB	CONTINUE_AFTER_ERROR,0

podcyc_mediumstart_message
	DCB	"TUBE:PODCYC About to do MEDIUM test"
	DCB	CONTINUE_AFTER_ERROR,0

podcyc_faststart_message
	DCB	"TUBE:PODCYC About to do FAST test"
	DCB	CONTINUE_AFTER_ERROR,0

podcyc_syncstart_message
	DCB	"TUBE:PODCYC About to do SYNC test"
	DCB	CONTINUE_AFTER_ERROR,0

podcyc_currentaddress_message
	DCB	"TUBE:PODCYC Current access address is: ",&0
podcyc_rawdata_message
	DCB	"TUBE:PODCYC Raw read data is: ",&0
podcyc_errorregdata_message
	DCB	"TUBE:PODCYC Error register data is: ",&0

podcyc_testpass_message
	DCB	"TUBE:PODCYC Test PASSED",&0

podcyc_testend_message
	DCB	"TUBE:PODCYC Test END",&0

	ALIGN

	MACRO
$tubewrm	write_message	$message

$tubewrm
	LDR	r12, =$message		; Pointer to message
	LDR	r11, =fasttube		; Pointer to the FastTube address
	STR	r12,[r11]		; Send the message

	MEND

; Test begins
	EXPORT	podule_test
podule_test

; Setup some registers
	MOV	R13,LR					; Save LR for return later

	LDR	R1,=testpattern

; ACCESSES: NB	Writes are 16-bit; on write, upper 16bits appear on lower 16bits of databus
;		On Reads, upper 16bits are all 1's

; Do slow accesses
PODCYC_SLOWLY
	write_message	podcyc_slowstart_message
	LDR	R2,=podcyc_slow_access			; Do slow_access
	STR	R1,[R2]					; Note: Hi 16databits routed to lo-16 databus
	LDR	R3,[R2]					; Read back

	MOV	R4,R1,LSR#16				; Adjust the testpattern to look like FFFF+testpattern

	ORR	R4,R4,#&FF000000			; SBP: change this cos FFFF0000 isn't a valid immediate constant
	ORR	R4,R4,#&00FF0000

	TEQ	R4,R3					; Verify the written and read patterns are same
	ORRNE	R0,R0,#01				; If Not ,Set our "verify failed" bit

	LDR	R11,=podcyc_errorreg			; Also, is error bit set in podcyc_errorreg?
	LDR	R12,[R11]
	TST	R12,#podcyc_errorbit
	ORRNE	R0,R0,#02				; If so, Set our "failure bit asserted" bit

	CMP	R0,#0					; Were any errors flagged?
	BLNE	PODCYC_FAILURE

; Do medium accesses
PODCYC_MEDIUMLY
	write_message	podcyc_mediumstart_message
	LDR	R2,=podcyc_medium_access
	STR	R1,[R2]
	LDR	R3,[R2]

	MOV	R4,R1,LSR#16				; Adjust the testpattern to look like FFFF+testpattern
	ORR	R4,R4,#&FF000000
	ORR	R4,R4,#&00FF0000

	TEQ	R4,R3					; Verify the written and read patterns are same
	ORRNE	R0,R0,#01				; If Not ,Set our "verify failed" bit

	LDR	R11,=podcyc_errorreg			; Also, is error bit set in podcyc_errorreg?
	LDR	R12,[R11]
	TST	R12,#podcyc_errorbit
	ORRNE	R0,R0,#02				; If so, Set our "failure bit asserted" bit

	CMP	R0,#0					; Were any errors flagged?
	BLNE	PODCYC_FAILURE

; Do fast accesses
PODCYC_FASTLY
	write_message	podcyc_faststart_message
	LDR	R2,=podcyc_fast_access
	STR	R1,[R2]
	LDR	R3,[R2]
	MOV	R4,R1,LSR#16				; Adjust the testpattern to look like FFFF+testpattern
	ORR	R4,R4,#&FF000000
	ORR	R4,R4,#&00FF0000

	TEQ	R4,R3					; Verify the written and read patterns are same
	ORRNE	R0,R0,#01				; If Not ,Set our "verify failed" bit

	LDR	R11,=podcyc_errorreg			; Also, is error bit set in podcyc_errorreg?
	LDR	R12,[R11]
	TST	R12,#podcyc_errorbit
	ORRNE	R0,R0,#02				; If so, Set our "failure bit asserted" bit

	CMP	R0,#0					; Were any errors flagged?
	BLNE	PODCYC_FAILURE

; Do synchronous accesses
PODCYC_SYNCHRONOUSLY
	write_message	podcyc_syncstart_message
	LDR	R2,=podcyc_synchronous_access
	STR	R1,[R2]
	LDR	R3,[R2]

	MOV	R4,R1,LSR#16				; Adjust the testpattern to look like FFFF+testpattern
	ORR	R4,R4,#&FF000000
	ORR	R4,R4,#&00FF0000

	TEQ	R4,R3					; Verify the written and read patterns are same
	ORRNE	R0,R0,#01				; If Not ,Set our "verify failed" bit

	LDR	R11,=podcyc_errorreg			; Also, is error bit set in podcyc_errorreg?
	LDR	R12,[R11]
	TST	R12,#podcyc_errorbit
	ORRNE	R0,R0,#02				; If so, Set our "failure bit asserted" bit

	CMP	R0,#0					; Were any errors flagged?
	BLNE	PODCYC_FAILURE



; Get out
	write_message	podcyc_testend_message
	MOV	PC,R13					; Return to calling routine

	LTORG

; A function failed
; Here we try to find out which one, and then report to Tube
;
; On entry, R1 has testPattern, R2 has current write/readAddress, R3 has raw read data,
; and R4 the logically shifted (re-routed) read data
; R0 is a testcode errorreg, and R8 is the number to convert to hex

PODCYC_FAILURE
	MOV	R9,LR					; Save LR for return later

	write_message	podcyc_currentaddress_message
	LDR	R8,=dump_r2
	STR	R2,[r8]					; Print address

	write_message	podcyc_rawdata_message
	LDR	r8,=dump_r3
	STR	r3,[r8]					; Print (unshifted) data

	write_message	podcyc_errorregdata_message
	LDR	r8,=podcyc_errorreg
	LDR	r10,[r8]
	LDR	r8,=dump_r10
	STR	r10,[r8]				; Print the error register

	CMPS	R0,#&01					; Was only the "verify failed" bit set?
	BLEQ	PODCYC_VERIFY_INEQUALITY

	CMPS	R0,#&02					; Was only the "failure bit" bit set?
	BLEQ	PODCYC_FAIL_INEQUALITY

	CMPS	R0,#&03					; Were v+f bits set?
	BLEQ	PODCYC_VERIFICATION_FAILED

	CMP	R1,R3					; Was read data not rerouted when written?
	BLEQ	PODCYC_REROUTING_FAILED

	CMP	R0,#0
	BLEQ	PODCYC_TESTPASS

	MOV	R0,#0					; Clear our failure register

	MOV	PC,R9					; Return to calling routine


PODCYC_TESTPASS
	write_message	podcyc_testpass_message
	MOV	PC,LR

PODCYC_VERIFY_INEQUALITY
	write_message	podcyc_verifyfailinequality_message
	MOV	PC,LR

PODCYC_FAIL_INEQUALITY
	write_message	podcyc_failbitinequality_message
	MOV	PC,LR

PODCYC_REROUTING_FAILED
	write_message	podcyc_routinghi_message
	MOV	PC,LR

PODCYC_VERIFICATION_FAILED
	write_message	podcyc_verifyfalse_message
        MOV	PC,LR





	ALIGN

	LTORG


	END
