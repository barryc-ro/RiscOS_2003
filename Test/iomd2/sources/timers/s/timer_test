; 	-----------------------------------------------
; 	IOMD2 Timer Test
;
;	Tests timer_old(0,1) and timer_new(2-5)
;
; 	-----------------------------------------------

;	 Steve Taylor

;	 0.0a	09.03.98	Initial
;	0.0b	11.03.98	Data relocated to end of code
;		12.03.98	continues...
;	0.0c	13.03.98	Change to timerstatic routine: on detection of timer statis, aborts this
;				timer altogether with MOV PC,R9. Probs fixed: had incorrectly entered 25bit
;				timer limit as &1FFFFFFF when it should be &1FFFFFF. Sundry other fixes.
;	0.0d	13.03.98	Timers 0,1 have been modified - counters now run continuously
;				(sequence now: load counter lo,hi, hit go. To read, hit latch, read counter
;				lo,hi. On down-count to zero, counter loops to limit and resumes counting.)
;				Therefore, changed timer_old tests to suit

; 	********************************************************************
;	PROGRAM NOTES
;
;	Martin Harriss and Paula from Cadence suggested using INTGEN as an interrupt
;	indicator rather than INTSTAT to facilitate compatibility between StrongARM
;	Models
; 	********************************************************************




;	------------------------------------------------
;	Writes a message to Tube
;	Requires that tube_defin has been Got beforehand
;	------------------------------------------------

	MACRO
$tubewrm	write_message	$message

$tubewrm
	LDR	r12, =$message			; Pointer to message
	LDR	r11, =fasttube			; Pointer to the FastTube address
	STR	r12,[r11]			; Send the message
	MEND


; Macro to clear interrupt bits on INTREQ (though note that interrupts are disabled on SA110)
	MACRO
$clear_irq	clear_intreq

$clear_irq
	LDR	R6,=intenbl
	LDR	R5,[R6]
	BIC	R5,R5,#intr_nottmall
	STR	R5,[R6]				; Disable intenbl[21:16]

	LDR	R6,=intreq
	LDR	R5,[R6]
	ORR	R5,R5,#intr_tmall		; Set intreq[21:16] bits to clear interrupt flags
	STR	R5,[R6]
	MEND


	EXPORT	timer_test
; *********************************
; PROGRAM START
; *********************************

timer_test
	MOV	R13,LR					; Store return address


; Turn interrupts off on StrongARM, view interrupt status from the intgen model
interrupts_off
; 32bit
;      	MRS	R0, CPSR				; Get current CPSR status register
;	ORR	R0,R0,#&A0				;
;	MSR	CPSR_c,R0				; Disable interrupts on SA110

;26bit
	MOV	R0,PC
	ORR	R1,R0,#&0C000000
	TEQP	R1,#0

; Use the new IOMD2 interrupt and timer scheme
	LDR	R4,=intrtec
	MOV	R5,#intrtec_routing
	STR	R5,[R4]					; Establish routing for enhanced interrupts

	MOV	R0,#0					; Clear our internal status register

; ---------------
; TIMER_OLD TESTS
; ---------------
; Overall Setup for Timers 0 and 1
TIMER_01_SETUP

; Setup for Timer 0
timer_0_setup
	write_message	timer_timer0_message
	write_message	timer_standardclocking_message

	clear_intreq

	LDR	R1,=t0low				; Point regs to timer locations
	LDR	R2,=t0high
	LDR	R3,=t0go
	LDR	R4,=t0lat

	LDR	R5,=clkmode
	MOV	R6,#clkmode_normal
	STR	R6,[R5]					; Clockmode 2MHz

	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm0
	STR	R6,[R5]				; Enable Timer0 interrupt

	LDR	r5,=timer_old_startlo_0
	LDR	r6,=timer_old_starthi_0

	MOV	R0,#0				; reset our internal status register
	BL	timer_old_TESTS

timer_1_setup
	write_message	timer_timer1_message
	write_message	timer_standardclocking_message

	clear_intreq

	LDR	R1,=t1low				; Point regs to timer locations
	LDR	R2,=t1high
	LDR	R3,=t1go
	LDR	R4,=t1lat

	LDR	R5,=clkmode
	MOV	R6,#clkmode_normal
	STR	R6,[R5]					; Clockmode 2MHz

	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm1
	STR	R6,[R5]				; Enable Timer1 interrupt


	LDR	r5,=timer_old_startlo_1
	LDR	r6,=timer_old_starthi_1

	MOV	R0,#0				; reset status reg
	BL	timer_old_TESTS

timer_0_fast_setup
	write_message	timer_timer0_message
	write_message	timer_fastclocking_message

	clear_intreq

	LDR	R1,=t0low				; Point regs to timer locations
	LDR	R2,=t0high
	LDR	R3,=t0go
	LDR	R4,=t0lat

	LDR	R5,=clkmode
	MOV	R6,#clkmode_fast
	STR	R6,[R5]					; Clockmode 64MHz

	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm0
	STR	R6,[R5]				; Enable Timer0 interrupt

	LDR	r5,=timer_old_fastlo_0
	LDR	r6,=timer_old_fasthi_0
	MOV	R0,#0				; reset status reg
	BL	timer_old_TESTS


timer_1_fast_setup
	write_message	timer_timer1_message
	write_message	timer_fastclocking_message

	clear_intreq

	LDR	R1,=t1low				; Point regs to timer locations
	LDR	R2,=t1high
	LDR	R3,=t1go
	LDR	R4,=t1lat

	LDR	R5,=clkmode
	MOV	R6,#clkmode_fast
	STR	R6,[R5]					; Clockmode 64MHz

	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm1
	STR	R6,[R5]					; Enable Timer1 interrupt

	LDR	r5,=timer_old_fastlo_1
	LDR	r6,=timer_old_fasthi_1
	MOV	R0,#0					; reset status reg
	BL	timer_old_TESTS

	B	TIMER_NEW_TESTS				; Timer_old tests completed

; Registers passed to this routine:
; R1 t(n)low addr
; R2 t(n)high addr
; R3 t(n)go addr
; R4 t(n)lat addr
; R5 t(n)low count
; R6 t(n)high count
timer_old_TESTS
	STR	r5,[r1]				; Write timer0low
	STR	r6,[r2]				; Write timer0hi
	MOV	r5,#timer_go
	STR	r5,[r3]				; Trigger the timer

	B	TIMER_AWAIT_INTERRUPT_01	; Wait for timeouts and/or interrupts

; Pass the target timer at corresponding address R1, R2	(tnlo, tnhi)
TIMER_AWAIT_INTERRUPT_01

OLD_AWAIT
	MOV	r5,#timer_latch			;
	STR	r5,[r4]				; Latch current timer value (countdown continues in background)

	LDRB	R8,[r1]				; Check on runtime count lo
	LDRB	R9,[r2]				; check on runtime count hi
	ORR	R8,R8,R9,LSL#8			; R8 Now Holds Runtime Counter

	CMPS	R8,#timer_old_interruptcount	; Has the counter reached interrupt_point?
	ORREQ	R0,R0,#timer_counteratinterruptpoint_bit

	; * May need to insert a delay here while the intgen model catches up?
	; ie. give it time to assert irq

	LDR	r6,=intgen_status
	LDRB	r6,[r6]
	TST	r6,#intgen_irq			; Has intgen irq been flagged?

	ORREQ	R0,R0,#timer_interrupt_bit	; if so then set internal error flag
						; INTGEN is Active low, so bit clears for irq

	CMPS	R0,#1				; Did fail bit flag counter timeout but no irq?
	BEQ	timer_old_NOIRQ

	CMPS	R0,#2				; Did fail bit flag irq but not at counter timeout?
	BEQ	timer_old_NOTIMEOUT

	CMPS	R0,#3
	BEQ	timer_old_INTERRUPTED		; Irq occurred at counter timeout - Good.

	B	OLD_AWAIT			; Otherwise, Loop until interrupt seen

						; (Intgen had better work or we wait a while!!)


; TIMER_OLD
; R8 holds runtime counter
timer_old_INTERRUPTED
	write_message	timer_generatedinterrupt_message
	LDR	R10,=dump_r8
	STR	r8,[r10]			; Print the target interrupt counter value
	write_message	timer_testpassed_message
	MOV	R0,#0				; Reset internal status register
	MOV	PC,LR				; Return to calling routine

; R8 holds runtime counter
timer_old_NOIRQ
	LDR	r10,=dump_r8
	STR	r8,[r10]			; Print the current timer count value
	write_message	timer_nointerrupt_message
	MOV	R0,#0				; Reset internal status register
	MOV	PC,LR				; Return to calling routine


; R8 holds runtime counter
timer_old_NOTIMEOUT
	LDR	r10,=dump_r8
	STR	r8,[r10]			; Print the current timer count value
	write_message	timer_countfailed_message
	MOV	R0,#0				; Reset internal status register
	MOV	PC,LR


; ---------------
; TIMER 2-5 TESTS
; ---------------
TIMER_NEW_TESTS
timer_2_setup
	write_message	timer_timer2_message
	LDR	R1,=tim2cur				; Point regs to timer locations
	LDR	R2,=tim2lim
	LDR	R3,=tim2res
	LDR	R4,=tim2test
	clear_intreq
	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm2
	STR	R6,[R5]					; Enable Timer2 interrupt (so that INTGEN asserts it)
	BL	TIMER_NEW_CHECKNOTSTATIC		; Go do some tests...

timer_3_setup
	write_message	timer_timer3_message
	LDR	R1,=tim3cur				; Point regs to timer locations
	LDR	R2,=tim3lim
	LDR	R3,=tim3res
	LDR	R4,=tim3test
	clear_intreq
	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm3
	STR	R6,[R5]					; Enable Timer3 interrupt (so that INTGEN asserts it)
	BL	TIMER_NEW_CHECKNOTSTATIC		; Go do some tests...

timer_4_setup
	write_message	timer_timer4_message
	LDR	R1,=tim4cur				; Point regs to timer locations
	LDR	R2,=tim4lim
	LDR	R3,=tim4res
	LDR	R4,=tim4test
	clear_intreq
	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm4
	STR	R6,[R5]					; Enable Timer4 interrupt (so that INTGEN asserts it)
	BL	TIMER_NEW_CHECKNOTSTATIC		; Go do some tests...


timer_5_setup
	write_message	timer_timer5_message
	LDR	R1,=tim5cur				; Point regs to timer locations
	LDR	R2,=tim5lim
	LDR	R3,=tim5res
	LDR	R4,=tim5test
	clear_intreq
	LDR	R5,=intenbl
	LDR	R6,[R5]
	ORR	R6,R6,#intr_tm5
	STR	R6,[R5]					; Enable Timer2 interrupt (so that INTGEN asserts it)
	BL	TIMER_NEW_CHECKNOTSTATIC		; Go do some tests...


; *** TESTS OVER
; Turn SA110 interrupts back on again and return to main code
INTERRUPTS_ON
;32bit
;	clear_intreq
;	MRS	R0, CPSR				; Get current CPSR
;	BIC	R0,R0,#&A0
;	MSR	CPSR_c,R0				; turn interrupts back on on SA110

;26bit
	MOV 	R0,PC
	ORR	R1,R0,#0
	TEQP	R1,#0

	write_message	timer_testend_message
	MOV	PC,R13					; RETURN TO MAIN CODE



; Check for counter movement
; R0 is status register
; R1 Tim(n)Cur address
; R2 Tim(n)Lim address
; R3 Tim(n)Res address
; R4 Tim(n)test address
; R9 will hold LR from previous call, don't use for anything else
TIMER_NEW_CHECKNOTSTATIC
	MOV	R9,LR					; Save LR to return to calling routine later

	LDR	R5,=&10000				; Wait for arbitrary time (not=interrupt period!)
	LDR	R6,[R1]					; Read current value
timer_new_waitloop
	SUB	R5,R5,#1				; Decrement counter
	CMPS	R5,#0					; Loop finished?
	BNE	timer_new_waitloop			; If not, wait a bit longer...

	LDR	R5,[R1]
	CMPS	R5,R6					; Has the current count value changed at all?
	BLEQ	TIMER_STATIC_ERROR			; If not, then imply timer not being clocked

timer_new_mode_0
	MOV	R5,#timer_new_incrementmode0		; Set standard increment value
	STR	R5,[R4]					;
	LDR	R7,=timer_new_count0			; Set limit for this sequence
	STR	R7,[R2]
	BL	TIMER_NEW_SCAN

timer_new_mode_1
	MOV	R5,#timer_new_incrementmode1		; Set increment value
	STR	R5,[R4]					;
	LDR	R7,=timer_new_count1			; Set limit for this sequence
	STR	R7,[R2]
	BL	TIMER_NEW_SCAN

timer_new_mode_2
	MOV	R5,#timer_new_incrementmode2		; Set increment value
	STR	R5,[R4]					;
	LDR	R7,=timer_new_count2			; Set limit for this sequence
	STR	R7,[R2]
	BL	TIMER_NEW_SCAN

timer_new_mode_3
	MOV	R5,#timer_new_incrementmode3		; Set increment value
	STR	R5,[R4]					;
	LDR	R7,=timer_new_count3			; Set limit for this sequence
	STR	R7,[R2]
	BL	TIMER_NEW_SCAN

timer_new_return
	MOV	PC,R9					; Return to calling routine


; Pass counter Limit value in R7; Current_count and Limit register addresses are in R1 and R2
; Timer reset address is in R3
TIMER_NEW_SCAN
	MOV	R5,#timer_new_zero
	STR	r5,[r3]				; Reset counter to zero, start timing

NEW_AWAIT
	LDR	R5,[r1]				; Check on runtime count for this Timer

	CMPS	R5,R7				; Has counter reached limit(interrupt_point)?
	ORREQ	R0,R0,#timer_counteratinterruptpoint_bit

	; * May need to insert a delay here while the intgen model catches up?
	; ie. give it time to assert

	LDR	r6,=intgen_status
	LDRB	r6,[r6]
	TST	r6,#intgen_irq			; Has intgen irq been flagged?

	ORREQ	R0,R0,#timer_interrupt_bit	; if so then set internal error flag
						; INTGEN flags are Active low, so bit clears for irq

	CMPS	R0,#1				; Did fail bit flag counter timeout but no irq?
	BEQ	timer_new_NOIRQ

	CMPS	R0,#2				; Did fail bit flag irq but not at counter timeout?
	BEQ	timer_new_NOTIMEOUT

	CMPS	R0,#3
	BEQ	timer_new_INTERRUPTED		; Irq occurred at counter timeout - Good.

	B	NEW_AWAIT				; Otherwise, Loop until interrupt seen
						; (Intgen had better work or we wait a while!!)

; TIMER_NEW
; R5 holds runtime counter
timer_new_INTERRUPTED
	write_message	timer_generatedinterrupt_message
	LDR	R10,=dump_r5
	STR	r5,[r10]			; Print the current interrupt counter value
	write_message	timer_testpassed_message
	MOV	R0,#0				; Reset internal status register
	MOV	PC,LR				; Return to calling routine

; R5 holds runtime counter
timer_new_NOIRQ
	LDR	r10,=dump_r5
	STR	r5,[r10]			; Print the current timer count value
	write_message	timer_nointerrupt_message
	MOV	R0,#0				; Reset internal status register
	MOV	PC,LR				; Return to calling routine


; R5 holds runtime counter
timer_new_NOTIMEOUT
	LDR	r10,=dump_r5
	STR	r5,[r10]			; Print the current timer count value
	write_message	timer_countfailed_message
	MOV	R0,#0				; Reset internal status register
	MOV	PC,LR


TIMER_STATIC_ERROR
	write_message	timer_counterstatic_message
	MOV	PC,R9





; **************************************** PROGRAM ENDS ***************************************

; TIMER_OLD stuff
clkmode_fast	*	1		; Write to clkmode(0) to initiate fast-clocking mode for timer_old (64Mhz)
clkmode_normal	*	0		; Write to clkmode(0) to revert to standard (2Mhz?) clocking for timer_old

timer_latch	*	1		; Write this to t(n)lat	register to latch value into counter, before...
timer_go	*	1		; ...writing this to t(n)go register to start counter off

timer_old_starthi_0	*	&00	; Timer 0,1 hibyte |
timer_old_startlo_0	*	&0F	; Timer 0,1 lobyte |_ Two count options
timer_old_starthi_1	*	&00	; Timer 0,1 hibyte |
timer_old_startlo_1	*	&0F	; Timer 0,1 lobyte |

timer_old_fasthi_1	*	&FF	; Fast count       |
timer_old_fastlo_1	*	&FF     ;                  |_ Two options, full scale or zero count
timer_old_fasthi_0	*	&00     ;                  |
timer_old_fastlo_0	*	&00     ;                  |

timer_old_interruptcount	*	&0000	; 16bit downcounter should interrupt at 0


; TIMER_NEW stuff
timer_new_count0	*	&80
timer_new_count1	*	&8000
timer_new_count2	*	&80000
timer_new_count3	*	&1FFFFFF		; (counter maximum)

timer_new_zero	*	1			; Write bit to reset tim(n)res


timer_new_incrementmode0	*	&0000	; Timer Mode bit settings
timer_new_incrementmode1	*	&0001
timer_new_incrementmode2	*	&0002
timer_new_incrementmode3	*	&0003
timer_new_mode0	*	&0001			; Increments
timer_new_mode1	*	&0080
timer_new_mode2	*	&8000
timer_new_mode3 *	&8080


; INTERRUPT-related stuff
intr_tm0	*	&00010000	; Timer0 bit in enhanced IOMD2 interrupt control register
intr_tm1	*	&00020000	; Timer1
intr_tm2	*	&00040000	; Timer2
intr_tm3	*	&00080000	; Timer3
intr_tm4	*	&00100000	; Timer4
intr_tm5	*	&00200000	; Timer5
intr_tmall	*	intr_tm0+intr_tm1+intr_tm2+intr_tm3+intr_tm4+intr_tm5	; All timer bits in intr controller
intr_nottmall	*	:NOT:intr_tmall		; Bitmask to clear interrupt enables

intrtec_routing	*	&00000000	; Routing to irq[0] for timers(0-5) *** NORMAL INTERRUPT PRIORITY
intgen_status	*	intstatmon	; INT_GEN interrupt status register (single BYTE, use LDRB)
intgen_irq	*	2_0000001	; Bit[0] of intgen_status ir irq[0] (ACTIVE LOW)


; TESTCODE STATUS stuff
timer_counteratinterruptpoint_bit	*	1	; Counter has reached irq point
timer_interrupt_bit	*	2		; Internal errorreg bit to flag that no interrupt was generated
timer_countverifyfailed_bit	*	4	; Internal errorreg bit to flag bad counter value


; TESTCODE MESSAGING
timer_testbegin_message
	DCB	"TUBE:TIMER Tests BEGIN",0

timer_timer0_message
	DCB	"TUBE:TIMER Timer0",0
timer_timer1_message
	DCB	"TUBE:TIMER Timer1",0
timer_timer2_message
	DCB	"TUBE:TIMER Timer2",0
timer_timer3_message
	DCB	"TUBE:TIMER Timer3",0
timer_timer4_message
	DCB	"TUBE:TIMER Timer4",0
timer_timer5_message
	DCB	"TUBE:TIMER Timer5",0


timer_standardclocking_message
	DCB	"TUBE:TIMER Standard Clocking",0
timer_fastclocking_message
	DCB	"TUBE:TIMER Fast Mode Clocking",0

timer_generatedinterrupt_message
	DCB	"TUBE:TIMER Timer Interrupt Generated (examine timestamp correlation)",0

timer_counterstatic_message
	DCB	"TUBE:TIMER Test FAILED: Timer appears to be static"
	DCB	CONTINUE_AFTER_ERROR,0
timer_countfailed_message
	DCB	"TUBE:TIMER Test FAILED: Counter didn't match target value"
	DCB	CONTINUE_AFTER_ERROR,0
timer_nointerrupt_message
	DCB	"TUBE:TIMER Test FAILED: Counter Timed-Out but No Interrupt generated"
	DCB	CONTINUE_AFTER_ERROR,0

timer_testpassed_message
	DCB	"TUBE:TIMER This Test PASSED",0
timer_testend_message
	DCB	"TUBE:TIMER Tests END",0
	ALIGN



 	END
