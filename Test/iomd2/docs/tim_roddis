
Test vector documentation
=========================

Binary semaphores
-----------------

Each register in turn is:

  * verified as initially clear;
  * set;
  * verified as set;
  * cleared;
  * verified as cleared;
  * set again;
  * verified as set;
  * cleared.

Possible owner registers
------------------------

Each register in turn is:

  * verified as clear;
  * set to value1;
  * verified set to value1;
  * attempted to be set to value2;
  * verified as value1;
  * cleared;
  * verified as cleared;
  * set to value2;
  * verified as value2;
  * attempted to be set to value1;
  * verified as value2;
  * cleared.

Circular lists
--------------

This test is divided into four parts.

NB: Only parts 1 and 4 on done on each list in turn. Simulation time might
run into hours were this not the case.

Part 1 - data integrity and reset test

Each list in turn:
  * the enable and level registers are verified as clear;
  * 16 words of data altenating between two value written to it;
  * the words read back and verified;
  * the same values written to it in different order;
  * the words written back and verified.

Part 2 - individual event interrupt tests

For list zero:

  * a word of data is written to it;
  * 'notempty' only irq status is verified;
  * a word is read from it;
  * 'empty' irq status is verified;
  * 'notempty' irq being cleared is verified;
  * a word of data is written to it;
  * 'empty' is verified as clear;
  * 14 further words of data (making 15 in all) are written to it;
  * 'full' is verified;
  * one word is read from it;
  * 'full' is verified as clear;
  * 14 further words of data are read;
  * 'empty' and 'level' are verified set.

For list zero:

  * level is set to a given value, x.
  * words are written, testing the 'level' irq is not set inappropriately;
  * a word causing the level x to be reached is written;
  * the 'level' flag is verified;
  * words are written until list full, 'level' is verified as clear for each;
  * words are read, testing the 'level' irq is not set inappropriately;
  * a word causing the level, x, to be reached is read;
  * the 'level' flag is verified;
  * further words are read until list empty, 'level' is verified clear.


Part 3 - combined event interrupt test

In this test TEQs are used to confirm that only those bits expected to be
set are set and other bits are clear.

For list zero:

  * level is set to a given value, y;
  * 'empty' is verified as the only bit set in status register;
  * words are written until before level is reached, verified 'notempty' only;
  * a word is written, causing level y to be reached;
  * 'notempty' and 'level' verified as only bits set;
  * words are written until just before list full, verified 'notempty' only;
  * a word is written, filling the list, 'notempty' is checked;
  * 'notempty' and 'full' are verified;
  * words are read, 'notempty' is checked;
  * a word causing level y to be reached is written;
  * 'notempty' and 'level' are checked;
  * words are read until just before list empty, verified 'notempty';
  * a word emptying the list is written;
  * 'empty' is verified only bit set.

Part 4 - interrupt routing

* write zero to instat register in interrupt block

For each list:

    For each possible routing 0..7:

      * routing is programmed in for all interrupts associated with list;
      * disable all list interrupts;
      * verify no interrupt set in processor I/F interrupt monitor status reg;
      * enable 'empty' only;
      * verify 'empty' routed to correct interrupt pin;
      * _read_ a byte: causes list to believe itself full;
      * enable 'notempty' only;
      * verify 'notempty';
      * enable 'full' only;
      * verify 'full';
      * write a byte;
      * enable 'level';
      * verify 'level'.


Interrupt block
---------------

* default reset values for status, request and enable for old and new style
  registers are tested. These are presumed to be zero;
* default routing is tested; *** NOT IMPLEMENTED ***

Part 1 - IOMD1 compatible registers

For each valid interrupt bit:

  * the external/internal fake interrupt register is programmed to trigger
    the relevant interrupt;
  * the status is verified;
  * the interrupt is enabled;
  * the request is verified;
  * the fake interrupt registers are cleared.

Part 2 - test external enhanced registers

For each interrupt 0..12:

  For each possible routing 7..0: (tested active hi)

    * routing is written into relevant location;
    * interrupt is triggered;
    * status is verified;
    * interrupt is enabled;
    * request is verified;
    * routing is verfied;
    * interrupt is disabled;

  * interrupt is programmed active lo and given a hi signal;
  * status verified clear;
  * a lo signal is given;
  * correct bit verified set in status register;
  * interrupt id programmed active hi and given a lo signal;
  * status verified clear;
  * interrupt is programmed to trigger on rising edge;
  * status is cleared by writing to request register;
  * a rising edge is generated;
  * correct bit verified set in status register;
  * interrupt is programmed to trigger on falling edge;
  * a rising edge is generated;
  * status verified clear;
  * a falling edge is generated;
  * correct bit verified set in status register;
  * interrupt is programmed to trigger on rising edge;
  * status is cleared by writing to request register;
  * a falling edge is generated;
  * status verified clear;

* Zero is written into external interrupt generator.

Part 3 - test internal and serial enhanced registers

For each interrupt 16..29:

  For each possible routing 0..7:

    * routing is written into relevant position;
    * interrupt is artificially generated using chipid0 reg;
    * status is verified;
    * interrupt is enabled;
    * request is verified;
    * routing is verified
    * interrupt is disabled;

Part 4 - test DMA interrupts

Exactly as for internal and serial interrupts, but using 0..7 in chipid reg.

IOCR test
---------

Set and clear Flyback and Nindex and check IOCR accordingly.
                                                  *** NOT IMPLEMENTED ***

For each possible value of the GIO bits:

  * write value into iocr;
  * write EORed value into test register;
  * read and verify EORed value in iocr;
  * read and verify value in test register.



