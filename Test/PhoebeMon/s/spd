; spd.s
;
; Code for Serial Presence Detect (SPD) on SDRAM
;
; To read a byte of the EEPROM, call:
;   first SPD_Pre with R0 containing the I2C address of the eeprom.
;   then  SPD_Read with R0 containing the byte to read and r1 the I2C address.
;
; Register corruption:
;   SPD_Pre     - r0 r1 r2 r3 r4 r5 r6       r9 r10 r11 r12
;   SPD_Read    - r0 r1 r2 r3 r4 r5 r6    r8 r9 r10 r11 r12
;   SPD_Write   - r0 r1 r2 r3 r4 r5 r6    r8 r9 r10 r11 r12
;
;   Start       - r0 r1 r2 r3                       r11 r12
;   TXByte      - r0 r1 r2 r3 r4 r5 r6          r10 r11 r12
;   RXByte      -    r1 r2 r3 r4 r5                 r11 r12
;   CheckAck    - r0 r1 r2 r3 r4                    r11 r12
;   Stop        - r0 r1 r2 r3                       r11 r12
;   ClockData   -    r1    r3    r5 r6          r10 r11


PollMax  * &f          ; Number of times to poll for an Ack            


; *****************************************************************************
; SPD_Pre - Call before each attempt to read a byte
;
;  In: r0 = Address of slave I2C device
;
; Out: Corrupts - r0, r1, r2, r3, r4, r5, r6, r9, r10, r11, r12
;      VS = No acknowledge from I2C device
;      VC = Okay.
;

SPD_Pre

         MOV    r9, lr
         
         MOV    r4, r0
         BL     SPD_Start             ; Start
         MOV    r0, r4                ; slave address is in r8
         BL     SPD_TXByte
         BL     SPD_CheckAck          ; Ack

         MOV    pc, r9


; *****************************************************************************
; SPD_Write - write a value to an EEPROM location on the SDRAM device
;
;  In: r0 = Address in EEPROM of the value we want to write
;      r1 = value to write
;
; Out: Corrupts - r0, r1, r2, r3, r4, r5, r6, r8, r9, r10, r11, r12

SPD_Write

         MOV    r9, lr                ; store lr
         MOV    r8, r1                ; store value to write
         
         BL     SPD_TXByte            ; transmit word address (offset in EEPROM)
         BL     SPD_CheckAck
         MOV    r0, r8
         BL     SPD_TXByte            ; transmit value to write
         BL     SPD_CheckAck
         BL     SPD_Stop              ; stop
         
         MOV    pc, r9


; *****************************************************************************
; SPD_ReadValue - read a byte from the EEPROM
;
;  In: r0 = byte to read ('word address')
;      r1 = slave address
;
; Out: r0 = value
;      Corrupts - r0, r1, r2, r3, r4, r5, r6, r8, r9, r10, r11, r12
;

SPD_ReadValue

         MOV    r9, lr                ; store lr
         MOV    r8, r1                ; store slave address

         BL     SPD_TXByte            ; transmit word address (entered in r0)
         BL     SPD_CheckAck          ; Ack

         BL     SPD_Start             ; Start
         MOV    r0, r8                ; r8 contains slave address
         ADD    r0, r0, #1            ; Set bit 0 for read         
         BL     SPD_TXByte            ; Slave address
         BL     SPD_CheckAck          ; Ack

         BL     SPD_RXByte            ; Data
         MOV    r8, r0                ; store received byte in r8

         MOV    r0, #1                ; Last byte, then don't acknowledge
         BL     SPD_ClockData         ; but always send ack clock pulse
         
         BL     SPD_Stop              ; Stop

         MOV    r0, r8                ; return value in r0
         MOV    pc, r9

         
; *****************************************************************************
;
; SPD_Start - Send the Start signal
;
; Out: Corrupted - r0, r1, r2, r3, r11, r12
;

SPD_Start ROUT

        MOV     r12, lr                 ; r12 is link register

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      SPD_SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #0                  ; clock HI, data LO
        MOV     R1, #1
        BL      SPD_SetC1C0

; Hold start condition for BMU

        MOV     R2, #IOC
        MOV     R0,#10
        BL      DoMicroDelay

; Delay here must be >= 4.7 microsecs

        MOV     R0, #0                  ; clock LO, data LO
        MOV     R1, #0
        BL      SPD_SetC1C0

        MOV     pc, r12                 ; return address is in r12


; *****************************************************************************
;
; SPD_Stop - Send the Stop signal
;
; Out: Corrupted - r0, r1, r2, r3, r11, r12
;

SPD_Stop ROUT

        MOV     r12, lr                 ; r12 contains link register

        MOV     R0, #0                  ; clock HI, data LO
        MOV     R1, #1
        BL      SPD_SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      SPD_SetC1C0

        MOV     pc, r12                 ; return address is in r12


; *****************************************************************************
;
; SPD_CheckAck - Check acknowledge after transmitting a byte
;
; Out: V=0 => acknowledge received
;      V=1 => no acknowledge received
;      Corrupted - r0, r1, r2, r3, r4, r11, r12

SPD_CheckAck ROUT

        MOV     r12, lr                 ; r12 is link register

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        BL      SPD_SetC1C0

        MOV     R0, #1                  ; clock HI, data HI
        MOV     R1, #1
        BL      SPD_SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R2, #IOC
        LDRB    R4, [R2, #IOCControl]   ; get the data from IOC

        MOV     R0, #0
        MOV     R1, #0                  ; clock lo
        BL      SPD_SetC1C0

        CLRV
        TST     R4, #1                  ; should be LO for correct acknowledge
      [ {FALSE}
        SETV    NE
      |
        BNE     %FT10
      ]

        MOV     pc, r12                 ; r12 contains return address

10      ; No acknowledge
        MOV     r0, #1
        MOV     r1, #1
        BL      SPD_SetC1C0
        SETV
        MOV     pc, r12


; *****************************************************************************
;
; SPD_SetC1C0 - Set clock and data lines to values in R1 and R0 respectively
;
;  In: r0 = data line value (0 or 1)
;      r1 = clock line value (0 or 1)
;
; Out: Corrupted - r0, r1, r2, r3, r11
;

SPD_SetC1C0 ROUT

        MOV     r11, r14                ; r11 is link register
                
        ADD     R0, R0, R1, LSL #1      ; R0 := C0 + C1*2

        MOV     R2, #0                          ; prepare to index soft copy
        MOV     r1, #0
        BIC     R1, R1, #&03                    ; clear clock and data
        ORR     R0, R1, R0                      ; put in new clock and data
        ORR     R0, R0, #&C0                    ; make sure two test bits are
                                                ; always set to 1 !
        MOV     R2, #IOC
        STRB    R0, [R2, #IOCControl]

        MOV     R0, #10                 ; delay for >= 10/2 microsecs
        BL      DoMicroDelay

        MOV     pc, r11


; *****************************************************************************
;
; DoMicroDelay - Delay for >= R0/2 microseconds
;
;  In: R0 = time delay in 1/2 microsecond units
;      R2 -> IOC
;      On ARM600, we may or may not be in a 32-bit mode
;
; Out: Corrupted - r0, r1, r3
;

DoMicroDelay ROUT

        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R1, [R2, #Timer0CL]     ; R1 := low output latch
10
        STRB    R0, [R2, #Timer0LR]     ; copy counter into output latch
        LDRB    R3, [R2, #Timer0CL]     ; R3 := low output latch
        TEQ     R3, R1                  ; unchanged ?
        BEQ     %BT10                   ; then loop
        MOV     R1, R3                  ; copy anyway
        SUBS    R0, R0, #1              ; decrement count
        BNE     %BT10                   ; loop if not finished

        MOV     pc, lr                  ; return address is in r3


; *****************************************************************************
;
; SPD_TXByte - Transmit a byte
;
;  In: R0 = byte to be transmitted
;
; Out: Corrupted - r0, r1, r2, r3, r4, r5, r6, r10, r11, r12
;

SPD_TXByte ROUT

        MOV     r12, lr                 ; r12 is link register

        MOV     R2, R0                  ; byte goes into R2
        MOV     R4, #&80                ; 2^7 the bit mask
10
        ANDS    R0, R2, R4              ; zero if bit is zero
        MOVNE   R0, #1
        BL      SPD_ClockData           ; send the bit
        MOVS    R4, R4, LSR #1
        BNE     %BT10

        MOV     pc, r12


; *****************************************************************************
;
; SPD_ClockData - Clock a bit of data down the IIC bus
;
;  In: R0 = data bit
;
; Out: Corrupted - r1, r3, r5, r6, r10, r11
;      Preserved - r0, r2

SPD_ClockData ROUT

        MOV     r10, lr                 ; r10 is link register
        MOV     r5, r0                  ; preserve r0 in r5
        MOV     r6, r2                  ; preserve r2 in r6

        MOV     R1, #0                  ; Clock lo
        BL      SPD_SetC1C0

        MOV     r0, r5
        MOV     R1, #1                  ; Clock hi
        BL      SPD_SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     r0, r5
        MOV     R1, #0                  ; Clock lo
        BL      SPD_SetC1C0

        MOV     r0, r5                  ; restore r0
        MOV     r2, r6                  ; restore r2

        MOV     pc, r10

; *****************************************************************************
;
; SPD_RXByte - Receive a byte
;
; Out: R0 = byte received
;      Corrupted - r1, r2, r3, r4, r5, r11, r12
;

SPD_RXByte ROUT

        MOV     r12, lr                 ; r12 contains link register
        
        MOV     R3, #0                  ; byte:=0
        MOV     R2, #IOC
        MOV     R4, #7

        MOV     R0, #1                  ; clock LO, data HI
        MOV     R1, #0
        MOV     r5, r3
        BL      SPD_SetC1C0
        MOV     r3, r5
10
        MOV     R0, #1                  ; pulse clock HI
        MOV     R1, #1

        MOV     r5, r3
        BL      SPD_SetC1C0

        ; Wait for high clock bit
20      LDRB    r0, [r2, #IOCControl]
        TST     r0, #i2c_clock_bit
        BEQ     %BT20
        
        MOV     r0, #10
        BL      DoMicroDelay
        MOV     r3, r5

        LDRB    R1, [R2, #IOCControl]   ; get the data from IOC
        AND     R1, R1, #1
        ADD     R3, R1, R3, LSL #1      ; byte:=byte*2+(IOC?0)AND1

        MOV     R0, #1                  ; return clock LO
        MOV     R1, #0
        MOV     r5, r3
        BL      SPD_SetC1C0
        MOV     r3, r5

        SUBS    R4, R4, #1
        BCS     %BT10

        MOV     R0, R3                  ; return the result in R0

        MOV     pc, r12                 ; r12 contains return address

        END
