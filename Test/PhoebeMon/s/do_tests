; dotests.s
;
; Code associated with DOTESTS command


             GBLL IssueCPhoebe
IssueCPhoebe SETL {TRUE}


 [ IssueCPhoebe
    ! 0, ""
    ! 0, "WARNING - this version will only work on Phoebe Issue C or earlier"
    ! 0, ""
SDRAMI2C_addr0       * &a4        ;address for slot 0
SDRAMI2C_addr1       * &a2        ;address for slot 1
 |
    ! 0, ""
    ! 0, "WARNING - this version will NOT work on Phoebe Issue C or earlier"
    ! 0, ""
SDRAMI2C_addr0       * &a8        ;address for slot 0
SDRAMI2C_addr1       * &a4        ;address for slot 1
 ]


SDRAMI2C_Nrows       * 3          ;byte 3 holds number of rows in SDRAM organisation
SDRAMI2C_Ncolumns    * 4
SDRAMI2C_Nbanks      * 5
SDRAMI2C_bankdensity * 31

IOMD2_SDRAMCR        * &EC

DRAM0PhysRam         * &10000000
DRAM1PhysRam         * &14000000
DRAM2PhysRam         * &18000000
DRAM3PhysRam         * &1C000000
DRAM4PhysRam         * &20000000
DRAM5PhysRam         * &24000000
DRAM6PhysRam         * &28000000
DRAM7PhysRam         * &2C000000

RamTableAddress      * DRAM0PhysRam

;-------------------------------------------------------------------------------
; DoingTests

DoingTests ROUT

        CMP     r1, #1
        BLT     AbortTests
        CMP     r1, #(endjumptable-jumptable)/4
        ADDCC   pc, pc, r1, ASL #2
        B       TestsHaveEnded

jumptable
        B       AbortTests        ; 0 should never get here
        B       Test_InitSDRAM
        B       Test_1MbNonBurstVRAM
        B       Test_4MbNonBurstVRAM
        B       Test_4MbNonBurstSDRAM
        B       Test_NonBurstROM
        B       Test_SetupSDRAMTable
        B       Test_EnableCaches
        B       Test_1MbBurstVRAM  ;
        B       Test_4MbBurstVRAM  ;
        B       Test_AllBurstSDRAM ;
        B       Test_BurstROM      ;
        B       Test_videodma1
        ;B       Test_videodma2
        B       Test_videodma3
        B       Test_videodma4
        B       Test_4MbNonBurstSDRAM
        B       Test_SetupSDRAMTable
        B       Test_AllBurstSDRAM
        B       Test_BurstROM
        B       Test_SoundCodec
        B       Test_PCI

endjumptable


;-------------------------------------------------------------------------------
; NextTest

NextTest

	SetMode FIQ32_mode, r0
        ADD     r12, r12, #1
	SetMode SVC32_mode, r0

        MOVS    pc, lr


;-------------------------------------------------------------------------------
; AbortTests

AbortTests

        BL      UARTVString
        =       CR, LF, "  *** WARNING: Test aborted.", CR, LF, 0

	SetMode FIQ32_mode, r0
        MOV     r12, #0
        MOV     r11, #0
	SetMode SVC32_mode, r0

        B       InteractiveDebug


;-------------------------------------------------------------------------------
; TestsHaveEnded

TestsHaveEnded ROUT

        BL      UARTVString
        =       CR, LF, "Tests complete", CR, LF, 0

	SetMode FIQ32_mode, r0
        MOV     r12, #0
        MOV     r2, r11
        MOV     r11, #0
	SetMode SVC32_mode, r0
	
	CMP     r2, #0
	BNE     %FT10

        BL      UARTVString
        =       "No test failures.", CR, LF, 0
	B       %FT20

10      BL      UARTVString
        =       "*** WARNING: Some tests failed.", CR, LF, 0

20      B       InteractiveDebug


;-------------------------------------------------------------------------------
; Setup sdramcr

Test_InitSDRAM ROUT

        BL      UARTVString
        =       CR, LF, "Init SDRAM and setup sdramcr", CR, LF, 0
        BL      NextTest

        B       Code_INITSDRAM
        

;-------------------------------------------------------------------------------
; Test 1Mb non-burst VRAM

Test_1MbNonBurstVRAM ROUT

        BL      UARTVString
        =       CR, LF, "Test 1Mb non-burst VRAM (SRT)", CR, LF, 0
        BL      NextTest

        MOV     r2, #IOMD_Base
        LDR     r0, [r2, #&8c]
        BIC     r0, r0, #(7:SHL:5)
        ORR     r0, r0, #(1:SHL:5)
        STR     r0, [r2, #&8c]
        MOV     r5, #&2000000
        MOV     r6, #&2100000
        B       Code_SRT
        

;-------------------------------------------------------------------------------
; Test 4Mb non-burst VRAM

Test_4MbNonBurstVRAM ROUT

        BL      UARTVString
        =       CR, LF, "Test 4Mb non-burst VRAM (SRT)", CR, LF, 0
        BL      NextTest

        MOV     r2, #IOMD_Base
        LDR     r0, [r2, #&8c]
        BIC     r0, r0, #(7:SHL:5)
        ORR     r0, r0, #(2:SHL:5)
        STR     r0, [r2, #&8c]
        MOV     r5, #&2000000
        MOV     r6, #&2400000
        B       Code_SRT


;-------------------------------------------------------------------------------
; Test 4Mb non-burst SDRAM

Test_4MbNonBurstSDRAM ROUT

        BL      UARTVString
        =       CR, LF, "Test 4Mb non-burst SDRAM (SRT)", CR, LF, 0
        BL      NextTest

        MOV     r5, #&10000000
        MOV     r6, #&10400000
        B       Code_SRT


;-------------------------------------------------------------------------------
; Test non-burst ROM accesses

Test_NonBurstROM ROUT

        BL      UARTVString
        =       CR, LF, "Test non-burst ROM accesses (RAT)", CR, LF, 0
        BL      NextTest

        B       Code_RAT
        

;-------------------------------------------------------------------------------
; Enable the caches

Test_EnableCaches ROUT

        BL      UARTVString
        =       CR, LF, "Enable the caches (MMUON)", CR, LF, 0
        BL      NextTest

        B       Code_MMUON


;-------------------------------------------------------------------------------
; Test 1Mb burst VRAM

Test_1MbBurstVRAM ROUT

        BL      UARTVString
        =       CR, LF, "Test 1Mb burst VRAM (SRT)", CR, LF, 0
        BL      NextTest

        MOV     r12, #IOMD_Base
        LDR     r0, [r2, #&8c]
        BIC     r0, r0, #(7:SHL:5)
        ORR     r0, r0, #(1:SHL:5)
        STR     r0, [r2, #&8c]
        MOV     r5, #&2000000
        MOV     r6, #&2100000
        B       Code_SRT
        

;-------------------------------------------------------------------------------
; Test 4Mb burst VRAM

Test_4MbBurstVRAM ROUT

        BL      UARTVString
        =       CR, LF, "Test 4Mb burst VRAM (SRT)", CR, LF, 0
        BL      NextTest

        MOV     r12, #IOMD_Base
        LDR     r0, [r2, #&8c]
        BIC     r0, r0, #(7:SHL:5)
        ORR     r0, r0, #(2:SHL:5)
        STR     r0, [r2, #&8c]
        MOV     r5, #&2000000
        MOV     r6, #&2400000
        B       Code_SRT


;-------------------------------------------------------------------------------
; Test all burst SDRAM
;
; Assumes a table of (address, size) pairs has been set up, detailing RAM bank
; configuration. This is stored at the start of SDRAM bank 0 (pointed to by
; RamTableAddress).

Test_AllBurstSDRAM ROUT

        BL      UARTVString
        =       CR, LF, "Test all burst SDRAM", CR, LF, 0
        BL      NextTest
        
        MOV     r5, #RamTableAddress
        
10      ; Loop through all the SDRAM banks, storing data in them
        LDMIA   r5, {r6, r7}              ; Load next pair of address, size data
        CMP     r6, #0                    ; Address = 0?
        BEQ     %FT30                     ; If so, we've reached the end of the table.
        AND     r0, r5, #&FF              ; Check for something having gone wrong and
        CMP     r0, #64                   ;  r5 being more than 16 words into a bank
        BGT     AbortTests

        BL      UARTVString
        =       "  Found bank. Start &", 0
        MOV     r0, r6
        BL      UARTHexOut
        BL      UARTVString
        =       " with size &", 0
        MOV     r0, r7
        BL      UARTHexOut
        BL      UARTVString
        =       CR, LF, 0 

        ADD     r7, r6, r7                ; make r7 point to the end of the bank
        CMP     r6, r5                    ; if r6 is the address of the table, 
        ADDEQ   r6, r6, #64               ; then start 16 words in.
        ADD     r5, r5, #8                ; point to next pair in the table.

        
20      ; Main store loop
        STR     r6, [r6], #4              
        CMP     r6, r7                    
        BNE     %BT20
        B       %BT10

30      ; Now we've stored all the data, we loop through all the banks checking it.
        BL      UARTVString
        =       "  Stuffed RAM with data.", CR, LF, 0
        
        MOV     r5, #RamTableAddress

40      LDMIA   r5, {r6, r7}
        CMP     r6, #0
        BEQ     %FT60
        ADD     r7, r6, r7
        CMP     r6, r5
        ADDEQ   r6, r6, #64
        ADD     r5, r5, #8
        
50      ; Main checking loop
        LDR     r0, [r6]
        CMP     r0, r6
        BNE     %FT70
        ADD     r6, r6, #4
        CMP     r6, r7
        BNE     %BT50
        B       %BT40

60      ; Finished.
        BL      UARTVString
        =       "  RAM test passed.", CR, LF, 0
        B       InteractiveDebug

70      BL     UARTHexOut

        BL      UARTVString
        =       "  *** WARNING: RAM test failed.", CR, LF, 0

	SetMode FIQ32_mode, r0
	ADD     r11, r11, #1
	SetMode SVC32_mode, r0
	
	B       AbortTests
	
        B       InteractiveDebug
                
        
;-------------------------------------------------------------------------------
; Setup table of SDRAM banks (location, size format)

Test_SetupSDRAMTable ROUT

        BL      UARTVString
        =       CR, LF, "Setting up SDRAM bank table", CR, LF, 0
        BL      NextTest

; determine sizes of SDRAM in each slot, and fill in PhysRamTable

        MOV     r7,#0                 ;accumulate 4 bytes of info in r7
        MOV     r0,#SDRAMI2C_addr0
        BL      SPD_Pre
        BVS     %FT30                 ;nothing in slot0
        MOV     r0,#SDRAMI2C_Nbanks
        MOV     r1,#SDRAMI2C_addr0
        BL      SPD_ReadValue         ;read number of banks for slot0 SDRAM
        ORR     r7,r7,r0
        MOV     r0,#SDRAMI2C_addr0
        BL      SPD_Pre
        MOV     r0,#SDRAMI2C_bankdensity
        MOV     r1,#SDRAMI2C_addr0
        BL      SPD_ReadValue         ;read bank density for slot0 SDRAM
        ORR     r7,r7,r0,LSL #8
30
        MOV     r0,#SDRAMI2C_addr1
        BL      SPD_Pre
        BVS     %FT40                 ;nothing in slot1
        MOV     r0,#SDRAMI2C_Nbanks
        MOV     r1,#SDRAMI2C_addr1
        BL      SPD_ReadValue         ;read number of banks for slot1 SDRAM
        ORR     r7,r7,r0,LSL #16
        MOV     r0,#SDRAMI2C_addr1
        BL      SPD_Pre
        MOV     r0,#SDRAMI2C_bankdensity
        MOV     r1,#SDRAMI2C_addr1
        BL      SPD_ReadValue         ;read bank density for slot1 SDRAM
        ORR     r7,r7,r0,LSL #24
40
        TEQ     r7,#0
        BEQ     AbortTests            ;no SDRAM!

;note that we can safely use SDRAM now (wait for Precharge has happened, and we have programmed correct rows,columns)

        MOV     r3, #RamTableAddress  ; store table at bottom of SDRAM

        MOV     r0, #DRAM0PhysRam  ;first fragment address for slot 0
42
        ANDS    r8, r7, #&FF
        BEQ     %FT50              ;nothing in slot
        CMP     r8, #2
        BHI     AbortTests
        ADD     r8, r8, r8         ;no. of fragments for slot 0 (2 or 4, for 1 or 2 banks)   
        MOV     r1, r7, LSR #8
        AND     r1, r1, #&FF
        TEQ     r1, #1             ;4M in one or both banks
        TEQNE   r1, #2             ;8M
        TEQNE   r1, #4             ;16M
        TEQNE   r1, #8             ;32M
        TEQNE   r1, #16            ;64M
        TEQNE   r1, #32            ;128M
        BNE     AbortTests
        MOV     r1, r1, LSL #21    ;size of each fragment (bank splits into two half-size fragments)
        TEQ     r8, #2
        MOVEQ   r9, #DRAM2PhysRam - DRAM0PhysRam  ;step between fragments if 2 fragments
        MOVNE   r9, #DRAM1PhysRam - DRAM0PhysRam  ;step between fragments if 4 fragments
44
        STMIA   r3!, {r0,r1}       ;next fragment
        ADD     r0, r0, r9
        SUBS    r8, r8, #1
        BNE     %BT44
50
        MOVS    r7, r7, LSR #16    ;move to slot 1, if not already done
        MOV     r0, #DRAM4PhysRam  ;first fragment address for slot 1
        BNE     %BT42

        MOV     r0, #0
        STR     r0, [r3], #4
        STR     r0, [r3], #4

; print table out

        MOV     r4, #RamTableAddress
        MOV     r5, #8

80      LDMIA   r4!, {r6-r7}
        BL      UARTVString
        =       "  ", 0
        MOV     r0, r6
        BL      UARTHexOut
        BL      UARTVString
        =       "    ", 0
        MOV     r0, r7
        BL      UARTHexOut
        BL      UARTVString
        =       CR, LF, 0
        SUBS    r5, r5, #1
        BNE     %BT80

        B       InteractiveDebug


;-------------------------------------------------------------------------------
; Test burst ROM accesses

Test_BurstROM ROUT

        BL      UARTVString
        =       CR, LF, "Test burst ROM accesses (RAT)", CR, LF, 0
        BL      NextTest

        B       Code_RAT


;-------------------------------------------------------------------------------
; Test video DMA from front of VRAM

Test_videodma1 ROUT

        BL      UARTVString
        =       CR, LF, "Test video DMA from front of VRAM (VIDTEST)", CR, LF, 0
        BL      NextTest

        MOV     r5, #&02000000
        MOV     r6, #&10000000
        MOV     r7, #VidtestFlag_1bpp
        B       Code_VIDTEST


;-------------------------------------------------------------------------------
; Test video DMA from SDRAM

Test_videodma2 ROUT

        BL      UARTVString
        =       CR, LF, "Test video DMA from SDRAM (VIDTEST)", CR, LF, 0
        BL      NextTest

        MOV     r5, #&10000000
        MOV     r6, #&10000000
        ADD     r6, r6, #32000
        MOV     r7, #VidtestFlag_1bpp128
        B       Code_VIDTEST


;-------------------------------------------------------------------------------
; Test video DMA from SAM ports (1Mb)

Test_videodma3 ROUT

        BL      UARTVString
        =       CR, LF, "Test video DMA from SAM ports, 1Mb (VIDTEST)", CR, LF, 0
        BL      NextTest

        ; Start the DMA
        MOV     r5, #&02000000
        MOV     r6, #&10000000
        MOV     r7, #VidtestFlag_4bpp + VidtestFlag_UseSAMPort + VidtestFlag_1MbVRAM
        B       Code_VIDTEST


;-------------------------------------------------------------------------------
; Test video DMA from SAM ports (4Mb)

Test_videodma4 ROUT

        BL      UARTVString
        =       CR, LF, "Test video DMA from SAM ports, 4Mb (VIDTEST)", CR, LF, 0
        BL      NextTest

        ; Start the DMA
        MOV     r5, #&02000000
        MOV     r6, #&10000000
        MOV     r7, #VidtestFlag_4bpp + VidtestFlag_UseSAMPort
        B       Code_VIDTEST


;-------------------------------------------------------------------------------
; Test the sound codec chip

Test_SoundCodec ROUT

        BL      UARTVString
        =       CR, LF, "Test sound codec accesses (TESTCODEC)", CR, LF, 0
        BL      NextTest
        
        B       Code_TESTCODEC


;-------------------------------------------------------------------------------
; Test for PCI hardware

Test_PCI ROUT

        B       UARTVString
        =       CR, LF, "Test PCI (TESTPCI)", CR, LF, 0
        BL      NextTest
        
        B       Code_TESTPCI
 
        END
        
