
; s.vidtest
;
; Video DMA test code
;
; Modification History
; All new. 20th feb 1997
; Included in monitor 03-Sep-98


;-------------------------------------------------------------------------------

VIDC_Base	  *	&03400000

ImageSize_1bpp    *     80*480
ImageSize_4bpp    *     320*480
ImageSize_1bpp128 *     16*128

        ALIGN

vidimage_4bpp
	BIN	"img.640-4"	;Video image to blat into VRAM

vidimage_1bpp
        BIN     "img.640-1"     ;Video image to blat into VRAM

vidimage_1bpp128
        BIN     "img.128diag"

cursimage
	BIN	"img.Cursor"    ;32x32 pixel @ 2bpp

endcurs

        LTORG

;-------------------------------------------------------------------------------
; VIDTEST <vidaddr> <curaddr> <flags>
;
; in r5 = image address
;    r6 = cursor addresss
;    r7 = flags

Code_VIDTEST ROUT

        BL      UARTVString
        =       "  Stopping DMAs...", CR, LF, 0

        ; Disable DMAs
	LDR	r1, =IOMD_Base
	LDR     r0, [r1, #&1e0]
	BIC     r0, r0, #32
	STR     r0, [r1, #&1e0]
	
        ; Set busmaster speed
	LDR     r0, [r1, #&f8]
	BIC     r0, r0, #3
	CMP     r5, #&10000000
	ORRGE   r0, r0, #2
	CMP     r6, #&10000000
	ORRGE   r0, r0, #1
	STR     r0, [r1, #&f8]

        ; Set vrefcr up for VRAM size
        LDR     r0, [r1, #&8c]
        BIC     r0, r0, #(7:SHL:5)
        TST     r7, #VidtestFlag_1MbVRAM
        ORRNE   r0, r0, #(1:SHL:5)
        ORREQ   r0, r0, #(2:SHL:5)
        STR     r0, [r1, #&8c]

        BL      UARTVString
        =        "  DMA Off.", CR, LF, 0
        ;=       "  DMA Off. Press a key...", CR, LF, 0
        ;UARTRx  r1, r10

        BL      UARTVString
        =       "  Copying image from ROM to RAM.", CR, LF, 0

; Copy video image from ROM into memory
        TST     r7, #VidtestFlag_1bpp
        ADRNEL  r2, vidimage_1bpp
        ADDNE   r3, r2, #ImageSize_1bpp

        TST     r7, #VidtestFlag_4bpp
        ADRNEL  r2, vidimage_4bpp
        ADDNE   r3, r2, #ImageSize_4bpp
        
        TST     r7, #VidtestFlag_1bpp128
        ADRNEL  r2, vidimage_1bpp128
        ADDNE   r3, r2, #ImageSize_1bpp128

        MOV     r1, r5
02      LDR     r0, [r2], #4
        STR     r0, [r1], #4
        CMP     r2, r3
        BNE     %BT02
        
; Copy cursor image from ROM into memory
        MOV     r1, r6
        ADRL    r2, cursimage
        ADRL    r3, endcurs
04      LDR     r0, [r2], #4
        STR     r0, [r1], #4
        CMP     r2, r3
        BNE     %BT04

        BL      UARTVString
        =       "  Starting DMA.", CR, LF, 0

; Now, let's set VidC up
        ADR     r0, vidclist_1bpp

        TST     r7, #VidtestFlag_4bpp
        ADRNE   r0, vidclist_4bpp
        
        TST     r7, #VidtestFlag_1bpp128
        ADRNE   r0, vidclist_1bpp128
        
	LDR	r1, = VIDC_Base	

; Loop to program VIDC registers
10	LDR	r2, [r0], #4 ; load next register
        CMP     r2, #&FFFFFFFF ; Check for end of list
        BEQ     %FT14
        CMP     r2, #&F0000000
        BLT     %FT12
        BIC     r2, r2, #(3:SHL:16) ; If found, modify it according to amount of VRAM       
        TST     r7, #VidtestFlag_1MbVRAM
        ORRNE   r2, r2, #(1:SHL:16)
        ORREQ   r2, r2, #(3:SHL:16)        
12	STR	r2, [r1]
	B	%BT10

;10      LDR     r2, [r0], #4
;        CMP     r2, #&FFFFFFFF
;        STRNE   r2, [r1]
;        BNE     %BT10

; Program IOMD up to do the video DMA
14
	LDR	r1, =IOMD_Base
	MOV	r0, r5

        TST     r7, #VidtestFlag_1bpp
	ADDNE   r2, r0, #ImageSize_1bpp
	
	TST     r7, #VidtestFlag_4bpp
	ADDNE   r2, r0, #ImageSize_4bpp
	
        TST     r7, #VidtestFlag_1bpp128
        ADDNE   r2, r0, #ImageSize_1bpp128

	SUB	r2, r2, #16	;Last quad-word on display	
	STR	r2, [r1, #&1D4]	;VIDEND
	STR	r0, [r1, #&1D8]	;VIDSTART
	STR	r0, [r1, #&1D0]	;VIDCUR
	STR	r0, [r1, #&1DC] ;VIDINIT

	MOV	r0, r6
	STR	r0, [r1, #&1C0] ;CURSCUR
	STR	r0, [r1, #&1C4] ;CURSINIT

        TST     r7, #VidtestFlag_UseSAMPort
	MOVNE	r0, #&14
	STRNE	r0, [r1, #&090] ;FSIZE - Num flybacklines -1.
	MOVNE	r0, #&02
	STRNE	r0, [r1, #&0E4]
	MOVEQ	r0, #1
	STREQ	r0, [r1, #&090] ;FSIZE - as long as it's non-0, it seems to work....
  
; And on with the DMA....
        TST    r7, #VidtestFlag_1MbVRAM
        MOVNE  r0, #&a4
        MOVEQ  r0, #&a8
        CMP    r5, #&10000000
        MOVGE  r0, #&70
        STR    r0, [r1, #&1e0]
        

 [ {FALSE}
        ; This is the default for non-SAM port DMAs
        MOV     r0, #&70
        TST     r7, #VidtestFlag_UseSAMPort
        BEQ     %FT30
        ; Using SAM ports, so...
        TST     r7, #VidtestFlag_1MbVRAM
 	MOVNE	r0, #&A4
	MOVEQ	r0, #&A8
30	STR	r0, [r1, #&1E0] ;VIDCR
 ]

; Thassit, let's go back to the ROM, back to the ROM, to the ROM.
        BL      UARTVString
        =       "  Done. Press a key...", CR, LF, 0
        UARTRx  r1, r10
        
	B       InteractiveDebug

        LTORG

;-------------------------------------------------------------------------------

vidclist_1bpp
	DCD	&e0000402	;ConReg 1bpp
	DCD	&10000000	;Set to point to colour 0
	DCD	&00ffffff	;Colour 0 = White
	DCD     &00000000
	DCD	&40000FFF	;Blue border
	DCD	&50ff0000	;Curs1
	DCD	&60ffff00	;Curs2
	DCD	&700000ff	;Curs3
	DCD	&80000318	;HCR
	DCD	&81000050	;HSWR
	DCD	&82000062	;HBSR
	DCD	&83000082	;HDSR
	DCD	&84000302	;HDER
	DCD	&8500030e	;HBER
 	DCD	&86000172	;HCSR
	DCD	&9000020B	;VCR
	DCD	&91000000	;VSWR
	DCD	&92000018	;VBSR
	DCD	&93000020	;VDSR
	DCD	&94000200	;VDER
	DCD	&95000208	;VBER
 	DCD	&96000120	;VCSR
 	DCD	&97000140	;VCER
	DCD	&c0051003	;EREG
        DCD	&D000C385	;FSYNREG, clk = (3+1)/(5+1) * 24MHz = 16MHz
	DCD	&f0011014	;DCTL
	DCD     &FFFFFFFF	;End-of-table


;-------------------------------------------------------------------------------

vidclist_4bpp
	DCD	&e0000442	;4bpp
	DCD	&10000000	;Set to point to colour 0
	DCD	&00ffffff	;Colour 0 = White
	DCD	&00dddddd
	DCD	&00bbbbbb
	DCD	&00999999
	DCD	&00777777
	DCD	&00555555
	DCD	&00333333
	DCD	&00000000	;Colour 7 = Black
	DCD	&00994400	;8  = Blue
	DCD	&0000eeee	;9  = Yellow
	DCD	&0000cc00	;10 = Green
	DCD	&000000dd	;11 = Red
	DCD	&00bbeeee	;12 = Red
	DCD	&00008855	;13 = Red
	DCD	&0000bbff	;14 = Red
	DCD	&00ffbb00	;15 = Cyan
	DCD	&40000FFF	;Blue border	
	DCD	&50ff0000	;Curs1
	DCD	&60ffff00	;Curs2
	DCD	&700000ff	;Curs3
	DCD	&80000318	;HCR
	DCD	&81000050	;HSWR
	DCD	&82000062	;HBSR
	DCD	&83000082	;HDSR
	DCD	&84000302	;HDER
	DCD	&8500030e	;HBER
 	DCD	&86000172	;HCSR
	DCD	&9000020B	;VCR
	DCD	&91000000	;VSWR
	DCD	&92000018	;VBSR
	DCD	&93000020	;VDSR
	DCD	&94000200	;VDER
	DCD	&95000208	;VBER
 	DCD	&96000120	;VCSR
 	DCD	&97000140	;VCER
	DCD	&c0051003	;EREG
        DCD	&D000C385	;FSYNREG, clk = (3+1)/(5+1) * 24MHz = 16MHz
	DCD	&f0011050	;DCTL 640-4 
	DCD     &FFFFFFFF	;End-of-table


;-------------------------------------------------------------------------------

vidclist_1bpp128

	DCD	&e0000402	;ConReg 1bpp
	DCD	&10000000	;Set to point to colour 0
	DCD	&00ffffff	;Colour 0 = White
	DCD     &00000000
	DCD	&40000FFF	;Blue border	
	DCD	&50ff0000	;Curs1
	DCD	&60ffff00	;Curs2
	DCD	&700000ff	;Curs3
	DCD	&80000318	;HCR
	DCD	&81000050	;HSWR
	DCD	&82000062	;HBSR
	DCD	&83000172	;HDSR
	DCD	&840001f2	;HDER
	DCD	&8500030e	;HBER
 	DCD	&86000072	;HCSR 072 (172)
	DCD	&9000020B	;VCR
	DCD	&91000000	;VSWR
	DCD	&92000018	;VBSR
	DCD	&930000D0	;VDSR
	DCD	&94000150	;VDER
	DCD	&95000208	;VBER
 	DCD	&96000020	;VCSR 020 (120)
 	DCD	&97000020	;VCER 020 (140)
	DCD	&c0051003	;EREG
        DCD	&D000C385	;FSYNREG, clk = (3+1)/(5+1) * 24MHz = 16MHz
	DCD	&f0011004	;DCTL
	DCD     &FFFFFFFF	;End-of-table


	END

