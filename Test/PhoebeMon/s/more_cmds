; more_cmds.s
;
; More code to deal with monitor commands. All these added for benefit of the
; Phoebe (Risc PC 2) hardware.


;-------------------------------------------------------------------------------
; RAMSIZE <bank>                       : find size and configuration of SDRAM DIMM

Code_RAMSIZE	

        ;MOV     r0, #&02000000                          ; VRAM start
        ;STMEA   r0!, {r1-r13}                           ; Stack registers

        ; Store I2C device address
        MOV     r7, r5
        
	BL	UARTVString
	=	CR, LF, "  SDRAM DIMM Information for bank", CR, LF, 0

        ; Read row address
	BL      UARTVString
	=       "  Row addresses    &", 0
	MOV     r0, r7
	BL      SPD_Pre
	BVS     %FT10                                   ; V set = read failed.
	MOV     r0, #3
	MOV     r1, r7
	BL      SPD_ReadValue
	BL      UARTHexOut
	
        ; Read column address
	BL      UARTVString
	=       CR, LF, "  Column addresses &", 0
	MOV     r0, r7
	BL      SPD_Pre
	BVS     %FT10                                   ; V set = read failed.
	MOV     r0, #4
	MOV     r1, r7
	BL      SPD_ReadValue
	BL      UARTHexOut

        ; Read number of banks
	BL      UARTVString
	=       CR, LF, "  Number of banks  &", 0
	MOV     r0, r7
	BL      SPD_Pre
	BVS     %FT10                                   ; V set = read failed.
	MOV     r0, #5
	MOV     r1, r7
	BL      SPD_ReadValue
	BL      UARTHexOut

        ; Read bank density
	BL      UARTVString
	=       CR, LF, "  Bank density     &", 0
	MOV     r0, r7
	BL      SPD_Pre
	BVS     %FT10                                   ; V set = read failed.
	MOV     r0, #31
	MOV     r1, r7
	BL      SPD_ReadValue
	BL      UARTHexOut
	BL      UARTVString
	=       CR, LF, 0
	B	%FT20

10      BL      UARTVString
        =       CR, LF, "  *** WARNING: No response from I2C device.", CR, LF, 0

20      ; Unstack registers
	;MOV     r0, #&02000000
	;LDMEA   r0!, {r1-r13}
        B       InteractiveDebug                        ; end


;-------------------------------------------------------------------------------
; SPDSET <address> <offset> <value>    : set SPD registers in SDRAM DIMM
;
; Note: Requires VRAM to use as a stack.

Code_SPDSET

        MOV     r0, #&02000000                          ; VRAM start
        STMEA   r0!, {r1-r13}                           ; Stack registers

        MOV     r13, r6                                 ; Store r6 (offset) for later
        
        MOV     r0, r5                                  ; r5 is IIC device address
        BL      SPD_Pre                                 ; Send this address
        BVS     %FT10
        MOV     r0, r13                                 ; r13 is now offset
        MOV     r1, r7                                  ; r7 is value to write
        BL      SPD_Write                               ; write it

	BL      UARTVString
	=       CR, LF, "  Value changed", CR, LF, 0
	B       %FT20

10      BL      UARTVString
        =       CR, LF, "  *** WARNING: No response from I2C device.", CR, LF, 0

20      ; Unstack registers
	MOV     r0, #&02000000
	LDMEA   r0!, {r1-r13}

        B       InteractiveDebug                        ; end


;-------------------------------------------------------------------------------
; SPDGET <address> <offset>            : get SPD register value from SDRAM DIMM
;
; Note: Requires VRAM to use as a stack.

Code_SPDGET

        MOV     r0, #&02000000                          ; VRAM start
        STMEA   r0!, {r1-r13}                           ; Stack registers

        ; Store I2C device address
        MOV     r7, r5
        MOV     r13, r6

        ; Read value
	BL      UARTVString
	=       CR, LF, "  Value is &", 0
	MOV     r0, r7
	BL      SPD_Pre
	BVS     %FT10                                   ; V set = read failed.
	MOV     r0, r13
	MOV     r1, r7
	BL      SPD_ReadValue
	BL      UARTHexOut
	BL      UARTVString
        =       CR, LF, 0
        B       %FT20

10      BL      UARTVString
        =       CR, LF, "  *** WARNING: No response from I2C device.", CR, LF, 0

20      ; Unstack registers
	MOV     r0, #&02000000
	LDMEA   r0!, {r1-r13}
        B       InteractiveDebug                        ; end


;-------------------------------------------------------------------------------
; DOTESTS                              : run a sequence of tests

Code_DOTESTS

        BL      UARTVString
        =       CR, LF, "Beginning tests...", CR, LF, 0

	SetMode FIQ32_mode, r0
        MOV     r12, #1
        MOV     r11, #0
	SetMode SVC32_mode, r0
        
        B       InteractiveDebug                        ; end


;-------------------------------------------------------------------------------
; INITSDRAM                            ; Initialise SDRAM

Code_INITSDRAM

        BL      UARTVString
        =       "  Initialising SDRAM...", CR, LF, 0

        ; Setup up some IOMD registers
        MOV     r2, #IOMD_Base
        MOV     r0, #8
        STR     r0, [r2, #&80]     ; romcr0
        MOV     r0, #&39
        STR     r0, [r2, #&8c]     ; vrefcr
        MOV     r0, #0
        STR     r0, [r2, #&d0]     ; prechg
        MOV     r0, #&a
        STR     r0, [r2, #&d4]     ; sdtmg
        MOV     r0, #&20
        STR     r0, [r2, #&d8]     ; sdmode
        ;MOV     r0, #&2000000
        ;STR     r0, [r2, #&1c0]    ; curscur
        ;ADD     r0, r0, #60
        ;STR     r0, [r2, #&1c4]    ; cursinit
        MOV     r0, #&80
        STR     r0, [r2, #&f8]     ; bmspd

        B       Code_SETSDRAMCR


;-------------------------------------------------------------------------------
; SETSDRAMCR                           ; interrogate DIMMs and program SDRAMCR

Code_SETSDRAMCR

        BL      UARTVString
        =       "  Finding DIMM organisation...",CR, LF, 0

; determine organisation (rows,columns) of SDRAM in each slot, and program SDRAMCR
        MOV     r7,#0                 ;accumulate bits for programming SDRAMCR
        MOV     r0,#SDRAMI2C_addr0
        BL      SPD_Pre
        BVS     %FT10                 ;nothing in slot0
        MOV     r0,#SDRAMI2C_Nrows
        MOV     r1,#SDRAMI2C_addr0
        BL      SPD_ReadValue         ;read number of rows for slot0 SDRAM
        SUBS    r0,r0,#11
        BMI     AbortTests
        CMP     r0,#3
        BHI     AbortTests
        ORR     r7,r7,r0,LSL #2       ;(11..14 rows means 0..3 in RAS0 bits of SDRAMCR)
        MOV     r0,#SDRAMI2C_addr0
        BL      SPD_Pre
        MOV     r0,#SDRAMI2C_Ncolumns
        MOV     r1,#SDRAMI2C_addr0
        BL      SPD_ReadValue         ;read number of columns for slot0 SDRAM
        SUBS    r0,r0,#8
        BMI     AbortTests
        CMP     r0,#3
        BHI     AbortTests
        ORR     r7,r7,r0              ;(8..11 columns means 0..3 in CAS0 bits of SDRAMCR)
10
        MOV     r0,#SDRAMI2C_addr1
        BL      SPD_Pre
        BVS     %FT20                 ;nothing in slot1
        MOV     r0,#SDRAMI2C_Nrows
        MOV     r1,#SDRAMI2C_addr1
        BL      SPD_ReadValue         ;read number of rows for slot1 SDRAM
        SUBS    r0,r0,#11
        BMI     AbortTests
        CMP     r0,#3
        BHI     AbortTests
        ORR     r7,r7,r0,LSL #6       ;(11..14 rows means 0..3 in RAS1 bits of SDRAMCR)
        MOV     r0,#SDRAMI2C_addr1
        BL      SPD_Pre
        MOV     r0,#SDRAMI2C_Ncolumns
        MOV     r1,#SDRAMI2C_addr1
        BL      SPD_ReadValue         ;read number of columns for slot1 SDRAM
        SUBS    r0,r0,#8
        BMI     AbortTests
        CMP     r0,#3
        BHI     AbortTests
        ORR     r7,r7,r0,LSL #4       ;(8..11 columns means 0..3 in CAS1 bits of SDRAMCR)
20
        MOV     r6,#IOMD_Base
        STR     r7,[r6,#IOMD2_SDRAMCR]

        BL      UARTVString
        =       "  sdramcr programmed to &", 0
        MOV     r0, r7
        BL      UARTHexOut
        BL      UARTVString
        =       CR, LF, 0

        B       InteractiveDebug                        ; end


;-------------------------------------------------------------------------------
; IICWRITE <device> <start> <length>   : write data on I2C bus

Code_IICWRITE ROUT

        BL      UARTVString
        =       "  Writing to I2C device...", CR, LF, 0

        ADD     r8, r6, r7
        MOV     r7, r6
               
        BL      SPD_Start
        MOV     r0, r5
        BL      SPD_TXByte
        BL      SPD_CheckAck
        BVS     %FT20
 
10      LDRB    r0, [r7], #1
        BL      SPD_TXByte
        BL      SPD_CheckAck
        BVS     %FT20
        CMP     r7, r8
        BNE     %BT10

        BL      SPD_Stop
        
        BL      UARTVString
        =       "  Written data.", CR, LF, 0
        B       %FT30

20      BL      UARTVString
        =       "  *** WARNING: No acknowledge from I2C device.", CR, LF, 0

30      B       InteractiveDebug


;-------------------------------------------------------------------------------
; IICREAD <device> <start> <length>    : read data from I2C device

Code_IICREAD ROUT

        BL      UARTVString
        =       "  Reading from I2C device...", CR, LF, 0

        ADD     r8, r6, r7
        MOV     r7, r6
               
        BL      SPD_Start
        MOV     r0, r5
        BL      SPD_TXByte
        BL      SPD_CheckAck
        BVS     %FT20
        
10      BL      SPD_RXByte
        STRB    r0, [r7], #1
        BL      UARTHexOut
        BL      UARTVString
        =       CR, LF, 0
        CMP     r7, r8
        MOVNE   r0, #0
        MOVEQ   r0, #1
        BL      SPD_ClockData
        CMP     r7, r8
        BNE     %BT10

        BL      SPD_Stop
        
        BL      UARTVString
        =       "  Read data.", CR, LF, 0
        B       %FT30

20      BL      UARTVString
        =       "  *** WARNING: No acknowledge from I2C device.", CR, LF, 0

30      B       InteractiveDebug


;-------------------------------------------------------------------------------
; TESTPCI                              : Test for PCI hardware

Code_TESTPCI ROUT

        BL      UARTVString
        =       "  Checking for PCI hardware...", CR, LF, 0
        
        BL      UARTVString
        =       "  ID &", 0

        LDR     r0, =&40000000
        LDR     r0, [r0]
        BL      UARTHexOut
                
        LDR     r1, plxid
        CMP     r0, r1
        BNE     %FT10
        
        BL      UARTVString
        =       CR, LF, "  Correct ID for PLX 9080.", CR, LF, 0
        B       InteractiveDebug
        
10      BL      UARTVString
        =       CR, LF, "  *** WARNING: Wrong ID for PLX 9080.", CR, LF, 0        
        B       InteractiveDebug

plxid   DCD     &908010b5



        END
