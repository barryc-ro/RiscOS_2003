;This line to persuade !Zap that this is an assembler file.
        SUBT    Debugging routines and macros => &.Hdr.ASIC3Debug

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 23-Nov-87  SKS   Added $routine to DREG
; 11-Feb-88  SKS   Added integer printing code
; 19-Feb-88  SKS   Make $nonewline consistent
; 11-Mar-88  SKS   Added DSTRING macro, tweaked others
; 18-Mar-88  SKS   Fixed Tutu_PrintString
; 27-Apr-88  SKS   Fixed DLINE wrt. inversing, DSTRING wrt. r14_svc
; 27-Apr-88  SKS   Fixed DSTRING wrt. r14_svc properly (wrong offset before !)
; 05-May-88  SKS   Fixed DSTRING to give address in invalids
; 10-May-88  SKS   Added Host_Debug so you can switch to Host debug much easier
; 22-Jun-88  SKS   Error trapping for $cc field
; 20-Jul-88  SKS   Fixed DLINE with no arg
; 20-Aug-91  JSR   Add Debug_MaybeIRQ and rewrite to be robust in this mode.
; 19-Aug-92  BC    Added 'Char' mode for printing out a single character
; 26-Nov-93  BC    Removed address validity checking (for Medusa)
; 15-Dec-93  BC    Added all the code and Macros for TML debugging
; 24-Jan-94  BC    Changed macro name InsertHostDebugRoutines to avoid clashing
; 31-Aug-94  SMC   Added file debugging.
; 20-Sep-94  SMC   Added DebugIt module support.
; 12-Mar-97  TMD   Adapted from standard Hdr:Debug
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Use of hdr.Debug: r13 MUST be a FD stack pointer. Do not use otherwise

;       GET     &.Hdr.Debug

; ... defs, etc ...

;       InsertDebugRoutines             ; ensure this is after module header !
;                                       ; conventional to have this just before
;       END
;
; These are the controlling logicals which are provided:
; Debug_MaybeIRQ     -  Set to true to protect against LR_SVC corruptions from SWI calling
; Host_Debug         -  Set to true to send output to the tube
;                       Note that this done by InsertTMLInitialisation
; HostDebugViaTML    -  Set to true to use TML to send debug stream to host
;                       Note that this done by InsertTMLInitialisation
; Debug_File         -  Set to "<filename>" to send debug stream to the specified file
;                       (Host_Debug must be set to false).
; Debug_Module       -  Set to true to use DebugItModule.
;
; When using TML it is necessary to initialise the TML code.  To do this the MACRO
; InsertTMLInitialisation must be invoked in the module initialisation code, it assumes
; a valid stack in R13, it preserves all registers EXCEPT R0 if an error occurs.  The
; flags are undefined except V which indicates the error status in the usual way.  If
; the TML hardware is installed in an Expansion card, rather than in the Econet slot
; then the Podule number should be given as an argument to InsertTMLInitialisation.
; Note that InsertTMLInitialisation must be invoked before InsertDebugRoutines.
;
; These are the MACROs provided:
; DREG  <reg>,"string",cc,type  Output reg in 8-digit hex, prefixed by
;                               string (or " " if absent), with newline
;                               absent (,cc present). type specifies alternative
;                               output format: Integer, Nibble, Byte, Word, LongWord,
;                               ByteLine, LongLine, Char
; BREG  <reg>[,"string"[,cc]]   As DREG, but 2-digit hex.
; DLINE ["string"[,cc[,inv]]]   As DREG/BREG without the register. inv<>""
;                               indicates should be inverse video (Tube).
; DSTRING <reg>[,"string"[,cc]] As DREG, but output as a string. NULL
;                               pointer catered for.

                GBLL    Host_Debug
Host_Debug      SETL    True

                GBLL    HostDebugViaTML
HostDebugViaTML SETL    True		; actually ASIC3 simulated TUBE

                GBLL    Debug_MaybeIRQ
Debug_MaybeIRQ  SETL    False

                GBLS    Debug_File
Debug_File      SETS    ""

                GBLL    Debug_Module
Debug_Module    SETL    False

		GBLL	OK32
OK32		SETL	True		; can be used from 32-bit PC mode

 [ :LNOT: :DEF: FastTUBE
		GBLA	FastTUBE
FastTUBE	SETA	0
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Routines for starting and ending debug routines
; Ensure enough stashed so that flags, r0 and lr may be used by debugging routines
; without worry. r1 is set to $reg

        MACRO
$label  DStartDRoutine  $reg
$label  Push    "r0,r1,r2,lr"
  [ :LNOT: ("$reg" = "")
    [ $reg = r13
        ADD     r1, r13, #16
    |
      [ :LNOT: ($reg = r1)
        MOV     r1, $reg
      ]
    ]
  ]
        MOV     r2, pc
  [ Debug_MaybeIRQ
        ORR     lr, r2, #SVC_mode
        TEQP    lr, #0
        NOP
        Push    "lr"
  ]
        MEND

        MACRO
$label  DEndDRoutine
$label
  [ Debug_MaybeIRQ
        Pull    "lr"
  ]
  [ :LNOT: OK32
        TEQP    r2, #0
;  [ Debug_MaybeIRQ
        NOP			; TMD 04-Aug-97: always do NOP, cos ObjAsm gives loadsa warnings!
;  ]
  ]
        Pull    "r0,r1,r2,lr"
        MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Output a single character
;
; Trashes r0, flags and SVC_lr

; eg. DWriteI F
;     DWriteI " "

        MACRO
$label  DWriteI $char,$cc
  [ Host_Debug
$label  MOV$cc  r0, #"$char"
    [ HostDebugViaTML
        BL$cc   TML_WriteC
    |
        SWI$cc  XHostFS_WriteC
    ]
  |
    [ "$Debug_File"<>""
$label  MOV$cc  r0, #"$char"
        BL$cc   File_WriteC
    |
      [ Debug_Module
$label  MOV$cc  r0, #"$char"
        SWI$cc  XDebugIt_WriteC
      |
$label  SWI$cc  XOS_WriteI+"$char"
      ]
    ]
  ]
        MEND

        MACRO
$label  DWriteC $cc
  [ Host_Debug
    [ HostDebugViaTML
$label  BL$cc   TML_WriteC
    |
$label  SWI$cc  XHostFS_WriteC
    ]
  |
    [ "$Debug_File"<>""
$label  BL$cc   File_WriteC
    |
      [ Debug_Module
$label  SWI$cc  XDebugIt_WriteC
      |
$label  SWI$cc  XOS_WriteC
      ]
    ]
  ]
        MEND

        MACRO
$label  DNewLine $cc
  [ Host_Debug :LOR: Debug_Module
$label  BL$cc   Tutu_NewLine
  |
    [ "$Debug_File"<>""
$label  BL$cc   File_NewLine
    |
$label  SWI$cc  XOS_NewLine
    ]
  ]
        MEND

        MACRO
$label  DWrite0 $cc
  [ Host_Debug :LOR: "$Debug_File"<>"" :LOR: Debug_Module
$label  BL$cc   Tutu_Write0
  |
$label  SWI$cc  XOS_Write0
  ]
        MEND

        MACRO
$label  DWriteN $cc
  [ Host_Debug :LOR: "$Debug_File"<>"" :LOR: Debug_Module
$label  BL$cc   Tutu_WriteN
  |
$label  SWI$cc  XOS_WriteN
  ]
        MEND


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Output a literal string. Outputs " " if no string specified.
;
; Trashes flags and SVC_lr

; eg. DWriteS "Hello world"

        MACRO
$label  DWriteS $string
  [ "$string" = ""
$label  DWriteI " "
  |
    [ Host_Debug :LOR: "$Debug_File"<>"" :LOR: Debug_Module
$label  BL      Tutu_WriteS
    |
$label  SWI     XOS_WriteS
    ]
        DCB     "$string",0
        ALIGN
  ]
        MEND



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Output a register with optional string, preserving all state in all modes

; eg. DREG r0,"register zero is "
;     DREG r1,"r1 is ",cc
;     DREG r2,,,Integer
;     DREG r0,,cc
;     DREG r0,,,Word
;     DREG r1,"Thing is ",,Byte
;     DREG r7,"Character received is ",,Char

        MACRO
$label  DREG    $reg, $string, $cc, $routine
$label  DStartDRoutine $reg
 [ FastTUBE <> 0 :LAND: "$cc"="" :LAND: "$routine"=""
	ADR	r0, %FT10
	MOV	lr, #FastTUBE
	STR	r0, [lr]
	MOV	lr, #RegsTUBE	; it'll print out the wrong register but who cares
	STR	r1, [lr]
	B	%FT20
10
	=	"TUBE: $string" :CC: "...", 0
20
 |
        DWriteS "$string"

  [ "$cc" = ""
    [ "$routine" <> ""
        BL      Tutu_$routine
        DNewLine
    |
        BL      Tutu_LongLine
    ]
  |
    [ "$cc" <> "cc"
        ! 1,"Error in DREG with 'cc': '$cc' used instead"
        MEXIT
    ]
    [ "$routine" <> ""
        BL      Tutu_$routine
    |
        BL      Tutu_LongWord
    ]
  ]
 ] ; FastTUBE...
        DEndDRoutine
        MEND


        MACRO
$label  BREG    $reg, $string, $cc
$label  DStartDRoutine $reg
        DWriteS "$string"

  [ "$cc" = ""
        BL      Tutu_ByteLine
  |
    [ "$cc" <> "cc"
        ! 1,"Error in BREG with 'cc': '$cc' used instead"
        MEXIT
    ]
        BL      Tutu_Byte
  ]

        DEndDRoutine
        MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Output a string, preserving all state in all modes

        MACRO
$label  DLINE   $string, $cc, $inverse
$label  DStartDRoutine

 [ FastTUBE <> 0 :LAND: "$cc"="" :LAND: "$inverse"=""
	ADR	r0, %FT10
	MOV	lr, #FastTUBE
	STR	r0, [lr]
	B	%FT20
10
	=	"TUBE: $string", 0
20
 |
  [ "$string" <> ""
    [ "$inverse" <> ""
        BL      Tutu_DoInverse
    ]
        DWriteS "$string"
    [ "$cc" = ""
      [ "$inverse" = ""
        DNewLine
      ]
    |
      [ "$cc" <> "cc"
        ! 1,"Error in DLINE with 'cc': '$cc' used instead"
        MEXIT
      ]
    ]
  |
    [ "$cc" = ""
        DNewLine
    ]
  ]
  [ "$inverse" <> ""
        BL      Tutu_DoInverse
    [ "$cc" = ""
        DNewLine
    |
      [ "$cc" <> "cc"
        ! 1,"Error in DLINE with 'cc': '$cc' used instead"
        MEXIT
      ]
    ]
  ]
 ] ; FastTUBE <> 0 :LAND: "$cc"="" :LAND: "$inverse"=""
        DEndDRoutine
        MEND


        MACRO
$label  DSTRING $reg, $string, $cc
$label  DStartDRoutine $reg
        DWriteS "$string.'"
        BL      Tutu_PrintString
        DWriteI "'"
  [ "$cc" = ""
        DNewLine
  |
    [ "$cc" <> "cc"
        ! 1,"Error in DSTRING with 'cc': '$cc' used instead"
        MEXIT
    ]
  ]
        DEndDRoutine
        MEND

        MACRO
        InsertDebugRoutines
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Tutu's infamous debugging routines

Tutu_LongLine
        Push    "lr"      ; Get round LDM ^ bug in 3um ARM, XOS errors
        BL      Tutu_LongWord
        DNewLine
 [ OK32
	Pull	"pc"
 |
        Pull    "pc",,^
 ]

Tutu_ByteLine
        Push    "lr"      ; Get round LDM ^ bug in 3um ARM, XOS errors
        BL      Tutu_Byte
        DNewLine
 [ OK32
	Pull	"pc"
 |
        Pull    "pc",,^
 ]

Tutu_LongWord
        Push    "r1, lr"
        MOV     r1, r1, ROR #16
        BL      Tutu_Word
        MOV     r1, r1, ROR #32-16
        BL      Tutu_Word
 [ OK32
	Pull	"r1, pc"
 |
        Pull    "r1, pc",,^
 ]

Tutu_Word
        Push    "r1, lr"
        MOV     r1, r1, ROR #8
        BL      Tutu_Byte
        MOV     r1, r1, ROR #32-8
        BL      Tutu_Byte
 [ OK32
	Pull	"r1, pc"
 |
        Pull    "r1, pc",,^
 ]

Tutu_Byte
        Push    "r1, lr"
        MOV     r1, r1, ROR #4
        BL      Tutu_Nibble
        MOV     r1, r1, ROR #32-4
        BL      Tutu_Nibble
 [ OK32
	Pull	"r1, pc"
 |
        Pull    "r1, pc",,^
 ]

Tutu_Char
        Push    "r1, lr"
        DWriteI "'"
        MOV     r0, r1
        DWriteC
        DWriteI "'"
 [ OK32
	Pull	"r1, pc"
 |
        Pull    "r1, pc",,^
 ]

Tutu_Nibble
        Push    "lr"
        AND     r0, r1, #15
        CMP     r0, #10
        ADDCC   r0, r0, #"0"
        ADDCS   r0, r0, #"A"-10
        DWriteC
 [ OK32
	Pull	"pc"
 |
        Pull    "pc",,^
 ]

Tutu_Integer
        Push    "r0-r2, lr"
        SUB     r13, r13, #16
        MOV     r0, r1
        MOV     r1, r13
        MOV     r2, #16
        SWI     XOS_ConvertInteger4
        DWrite0 VC
        ADD     r13, r13, #16
 [ OK32
	Pull	"r0-r2, pc"
 |
        Pull    "r0-r2, pc",,^
 ]


Tutu_DoInverse
        Push    "r0, r1, lr"
        ADR     r0, Tutu_InverseString
        MOV     r1, #?Tutu_InverseString
        DWriteN
 [ OK32
	Pull	"r0, r1, pc"
 |
        Pull    "r0, r1, pc",,^
 ]

  [ Host_Debug :LOR: "$Debug_File"<>"" :LOR: Debug_Module
        InsertHostCompatibleDebugRoutines
  ]

Tutu_InverseString      DCB     23,17,5,0,0,0,0,0,0,0
Tutu_BadString          DCB     "--- Invalid Address ---", 0
Tutu_NullString         DCB     "<Null>", 0
                        ALIGN

 [ :LNOT: OK32
Tutu_PrintString
        Push    "r0, r1, lr"

  [ False ; Causes problems on Medusa
        TST     r1, #&FC000000          ; Trying to cause address exception ?
        ADRNE   r1, Tutu_BadString
        BNE     %FT20

        CMP     r1, #&02000000          ; Or abort, or stiffo ?
        RSBCSS  r14, r1, #&03800000
        ADRCS   r1, Tutu_BadString
        BCS     %FT20
  ]
        CMP     r1, #0
        ADREQ   r1, Tutu_NullString

10      LDRB    r0, [r1], #1
        CMP     r0, #32
        Pull    "r0, r1, pc",CC,^
        DWriteC
        BVC     %BT10
        Pull    "r0, r1, pc",,^

20      LDRB    r0, [r1], #1
        CMP     r0, #32
        BCC     %FT30
        DWriteC
        BVC     %BT20
        Pull    "r0, r1, pc",,^

30
        DWriteI " "
        DWriteI "(", VC
        LDRVC   r1, [sp, #4]
        BLVC    Tutu_LongWord
        DWriteI ")", VC
        Pull    "r0, r1, pc",,^
 ]
        MEND

        MACRO
        InsertHostCompatibleDebugRoutines

Tutu_WriteS ROUT
        Push    "r1,lr"
 [ OK32
	MOV	r1, lr
 |
        BIC     r1, lr, #ARM_CC_Mask
 ]
        B       %FT20
10
        DWriteC
20
        LDRB    r0, [r1], #1
        TEQ     r0, #0
        BNE     %BT10

 [ OK32
	ADD	lr, r1, #3
	BIC	lr, lr, #3
	LDR	r1, [sp], #8
	MOV	pc, lr
 |
        LDR     lr, [sp, #4]
        AND     lr, lr, #ARM_CC_Mask
        ADD     r0, r1, #3
        BIC     r0, r0, #3
        LDR     r1, [sp], #8
        ORRS    pc, lr, r0
 ]

  [ "$Debug_File"=""
Tutu_NewLine ROUT
        Push    "lr"
;        MOV     r0, #13
;        DWriteC
        MOV     r0, #10
        DWriteC
   [ OK32
	Pull	"pc"
   |
        Pull    "pc",,^
   ]
  ]

Tutu_Write0 ROUT
        Push    "r1,lr"
        MOV     r1, r0
        B       %FT20
10
        DWriteC
20
        LDRB    r0, [r1], #1
        TEQ     r0, #0
        BNE     %BT10
 [ OK32
	Pull	"r1,pc"
 |
        Pull    "r1,pc",,^
 ]

Tutu_WriteN ROUT
        Push    "r1,r2,lr"
        ADD     r1, r0, r1
        MOV     r2, r0
        B       %FT20
10
        LDRB    r0, [r2], #1
        DWriteC
20
        CMP     r2, r1
        BLO     %BT10
 [ OK32
	Pull	"r1,r2,pc"
 |
        Pull    "r1,r2,pc",,^
 ]

    [ HostDebugViaTML
TML_WriteC      ROUT
        Push    "r10, lr"
	LDR	r10, =UART_Base
	UARTTx	r0, r10, lr
	Pull	"r10, pc"
    ]

        MEND

; End of the debug routines
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        MACRO
$label  InsertTMLInitialisation $slot
  [  "$slot" = "0"                      ; Podule0
TML_BaseAddr    * &3340000+&3000
  |
    [  "$slot" = "1"                    ; Podule1
TML_BaseAddr    * &3344000+&3000
    |
      [  "$slot" = "2"                  ; Podule2
TML_BaseAddr    * &3348000+&3000
      |
        [  "$slot" = "3"                ; Podule3
TML_BaseAddr    * &334C000+&3000
        |                               ; Econet
TML_BaseAddr    * &33A0000
        ]
      ]
    ]
  ]
                ^       0, r11
TML_RxData      #       4
TML_TxData      #       4
TML_Control     #       4
TML_TxStatus    #       4

Host_Debug      SETL    True
HostDebugViaTML SETL    True

$label  Push    "r1-r2, r11, lr"
        MOV     r2, pc
  [ Debug_MaybeIRQ
        ORR     lr, r2, #SVC_mode
        TEQP    lr, #0
        NOP
        Push    "lr"
  ]
        LDR     r11, =TML_BaseAddr
        MOV     r1, #2
        STRB    r1, TML_Control         ; Reset
        MOV     r14, #&FF00             ; Delay
10
        STRB    r1, TML_RxData
        SUBS    r14, r14, #1
        BGT     %BT10
        LDRB    r1, TML_Control         ; Check booted hardware OK
        TEQ     r1, #&FF
        BNE     %FT20
        ADR     r0, BadHardWare
        SETV
        B       %20

BadHardWare
        DCD     0
        DCB     "TML hardware not found",0
        ALIGN

        LTORG

20
  [ Debug_MaybeIRQ
        Pull    "lr"
        TEQP    r2, #0
        NOP
  |
        TEQP    r2, #0
  ]
        Pull    "r1-r2, r11, lr"
        MEND

        OPT     OldOpt
        END

