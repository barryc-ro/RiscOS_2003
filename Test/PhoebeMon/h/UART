; Hdr.UART


IOMD2_Base	*	&03200000	; Base address of IOMD2
COMBO_Base      *       &03010000       ; Base address of combo chip = PC/AT I/O 000H

; SMC-type stuff
SMC_CSR         *       &03F0 * 4       ; Configuration Select Register (CSR)
SMC_config      *       &55             ; value to write to enter configuration mode
SMC_endconfig   *       &AA             ; value to write to end configuration mode
SMC_IDreg       *       &0D             ; device ID register
SMC_data        *       &03F1 * 4       ; Configuration Access Port (data)


; Header file for 16550 UART

UART_Base		*	&03010000 + (&3F8*4)	; base address for UART on debug board

UART_Receive		*	&00	; read, when divisor latch access set low
UART_Transmit		*	&00	; write, when divisor latch access set low
UART_InterruptEnable	*	&04	; r/w, when divisor latch access set low
UART_InterruptID	*	&08	; read
UART_FIFOControl	*	&08	; write
UART_LineControl	*	&0C	; r/w
UART_ModemControl	*	&10	; r/w
UART_LineStatus		*	&14	; r/w
UART_ModemStatus	*	&18	; r/w
UART_Scratch		*	&1C	; r/w

UART_DivisorLatchLSB	*	&00	; r/w, when divisor latch access set high
UART_DivisorLatchMSB	*	&04	; r/w, when divisor latch access set high

; Bits in InterruptEnable (IER)

UARTIER_RXDataAvailable	*	1 << 0	; receive data available
UARTIER_TXHoldingEmpty	*	1 << 1	; transmit holding register empty
UARTIER_RXLineStatus	*	1 << 2	; receiver line status
UARTIER_ModemStatus	*	1 << 3	; modem status

; Values in Interrupt ID (IIR)

UARTIIR_ModemStatus	*	2_0000
UARTIIR_NoInterrupt	*	2_0001
UARTIIR_TXHoldingEmpty	*	2_0010
UARTIIR_RXDataAvailable	*	2_0100
UARTIIR_RXLineStatus	*	2_0110
UARTIIR_FIFOTimeout	*	2_1100

; Bits in FIFO control register (FCR)

UARTFCR_Enable		*	1 << 0	; enable TX/RX FIFOs
UARTFCR_RXReset		*	1 << 1	; reset RX FIFO (self-clearing)
UARTFCR_TXReset		*	1 << 2	; reset TX FIFO (self-clearing)
UARTFCR_Mode0RXRDYTXRDY *	0 << 3
UARTFCR_Mode1RXRDYTXRDY *	1 << 3
UARTFCR_RXTrigger1	*	0 << 6	; RX trigger level
UARTFCR_RXTrigger4	*	1 << 6
UARTFCR_RXTrigger8	*	2 << 6
UARTFCR_RXTrigger14	*	3 << 6

UART_FIFOSize		*	16	; 16 byte FIFO

; Bits in Line Control register (LCR)

UARTLCR_CharLength5	*	0 << 0
UARTLCR_CharLength6	*	1 << 0
UARTLCR_CharLength7	*	2 << 0
UARTLCR_CharLength8	*	3 << 0
UARTLCR_StopBits1	*	0 << 2
UARTLCR_StopBits1_5	*	1 << 2	; only when CharLength5 selected
UARTLCR_StopBits2	*	1 << 2	; only when CharLength6/7/8 selected
UARTLCR_ParityEnable	*	1 << 3
UARTLCR_ParityEven	*	1 << 4
UARTLCR_ParityStick	*	1 << 5	; force parity bit to be the value in bit 4
UARTLCR_BreakSet	*	1 << 6	; set break condition
UARTLCR_DivisorLatchAccess *	1 << 7	; set high to access divisor latches

; Bits in Modem Control register (MCR)

UARTMCR_DTRActive	*	1 << 0
UARTMCR_RTSActive	*	1 << 1
UARTMCR_OUT1Active	*	1 << 2
UARTMCR_OUT2Active	*	1 << 3
UARTMCR_LoopbackEnable	*	1 << 4

; Bits in Line Status register (LSR)

UARTLSR_RXDataReady	*	1 << 0
UARTLSR_OverrunError	*	1 << 1
UARTLSR_ParityError	*	1 << 2
UARTLSR_FramingError	*	1 << 3
UARTLSR_BreakInterrupt	*	1 << 4
UARTLSR_TXHoldingEmpty	*	1 << 5
UARTLSR_TXEmpty		*	1 << 6	; transmit FIFO and shift register empty
UARTLSR_FIFOError	*	1 << 7  ; error in a character in the FIFO

; Bits in Modem Status register (MSR)

UARTMSR_CTSChanged	*	1 << 0
UARTMSR_DSRChanged	*	1 << 1
UARTMSR_RITrailingEdge	*	1 << 2
UARTMSR_DCDChanged	*	1 << 3
UARTMSR_CTSActive	*	1 << 4
UARTMSR_DSRActive	*	1 << 5
UARTMSR_RIActive	*	1 << 6
UARTMSR_DCDActive	*	1 << 7

; Baud rate divisor values

BaudRateDivisor_2400	*	48	; running UART off 1.8MHz clock
BaudRateDivisor_4800	*	24	; running UART off 1.8MHz clock
BaudRateDivisor_9600	*	12	; running UART off 1.8MHz clock
BaudRateDivisor_19200	*	6	; running UART off 1.8MHz clock
BaudRateDivisor_57600	*	2
BaudRateDivisor_115200	*	1

	MACRO
	UARTTx	$reg, $uart, $temp
10
	LDR	$temp, [$uart, #UART_LineStatus]
	TST	$temp, #UARTLSR_TXHoldingEmpty
	BEQ	%BT10
20
	LDR	$temp, [$uart, #UART_ModemStatus]
	TST	$temp, #UARTMSR_CTSActive
	BEQ	%BT20
	STRB	$reg, [$uart, #UART_Transmit]
	MEND

	MACRO
	UARTRx	$reg, $uart
	LDR	$reg, [$uart, #UART_LineStatus]			; if no chars already in FIFO
	TST	$reg, #UARTLSR_RXDataReady
	MOVEQ	$reg, #UARTMCR_DTRActive :OR: UARTMCR_RTSActive	; then tell other end OK to TX
	STREQB	$reg, [$uart, #UART_ModemControl]
10
	LDR	$reg, [$uart, #UART_LineStatus]
	TST	$reg, #UARTLSR_RXDataReady
	BEQ	%BT10
	MOV	$reg, #UARTMCR_DTRActive			; tell other end to stop!
	STRB	$reg, [$uart, #UART_ModemControl]
	LDRB	$reg, [$uart, #UART_Receive]
	MEND

		END

