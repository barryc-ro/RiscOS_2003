#!/usr/local/bin/perl
#
# $Id$
#
# This script is a filter.
#
# Extract the VersionNum data from the VersionNum file and
# substitute the information into a PowerTV .API file that
# is passing through the standard I/O streams.

my $usage = "Usage: Version.pl <VersionNum file>\n";

my $adddate = 0;  # Set this to 1 to include a Date: field in module info.
my $addminor = 0; # Set this to 1 to include a MinorVersion field in module info.

my $version_file = shift(@ARGV);
die($usage) unless $version_file;
($major,$full,$date,$minor)=&read_file($version_file);

$major.="\\0Date:$date" if $adddate && $date;
$major.="\\0MinorVersion:$minor" if $addminor && $minor;

while (<>) {
  if (/(^module.+Version\:)[^\\]+(.*)/) {
   printf("%s%s%s\n", $1, $major, $2);
  }
  else {
    print;
  }
};

exit 0;

#############################################################################
# Read the version number file to retrieve the current major version number.
#
sub read_file {
  my $file = $_[0];
  my $line,$major,$date,$full,$minor;
  
  # first line contains the interesting stuff
  open(FILE,"<$file") || &failed("cannot open $file");
  $line = <FILE>;
  
  chomp($line);
  $line =~ m|^.*\((.*)\).*$|;			# extract the bits
  $major = $1;
  
  if ($major eq "") {
    die("$script: cannot find major version number, has the file been messed with ?\n");
  }
  
  while (<FILE>) {
    chomp;
    if (/\S*\s+Module\_Date\s+\"(.*)\"\s*\Z/) {
      $date=$1;
    }
    elsif (/Module\_FullVersion\s+\"(\S+)\"\s*\Z/) {
      $full=$1;
    }
    elsif (/Module\_MinorVersion\s+\"(\S+)\"\s*\Z/) {
      $minor=$1;
    }
  }

  close FILE;
  
  return ($major,$full,$date,$minor);
}

#############################################################################
# Wrap things up neatly.
#
sub failed {
  printf(STDERR "$script: $_[0] failed: $!\n");
  exit 1;
};


