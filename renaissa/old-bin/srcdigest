#!/usr/local/bin/perl
#############################################################################
## $Id$
## $Revision$
## $Date$
#############################################################################
use Getopt::Std;
#############################################################################
$script  = $0;
$script  =~ s/^.*\///;
$usage = "Usage: $script [-h] [-v] [-q] [-f <file>] -r <branch> -s <start date> -e <end date>\n";
#############################################################################

getopts('hf:s:e:r:Avq');
if ($opt_h == 1) {			# help
  die($usage);
}

if (!defined($opt_s)) {
  $opt_s = &ask("start date","01/09/96");
}
$opt_s = &rearrange_date($opt_s);

if (!defined($opt_e)) {
  $opt_e = &ask("end date",&get_date());
}
$opt_e = &rearrange_date($opt_e);

if (!defined($opt_r)) {			# default to current branch
  $opt_r = &ask("branch name",&get_branch());
}
if ($opt_r eq "TRUNK") {
  $trunk = 1;
} else {
  $trunk = 0;
}
if (!defined($opt_f)) {
  $opt_f = &ask("filename","all");
  if ($opt_f eq "all") {
    $opt_f = "";
  }
}
$|=1;
printf("Looking for changes between $opt_s and $opt_e on $opt_r");
if (!$trunk) {
  printf(" branch");
}
print(STDERR "\nscanning logs ");
open(PIPE,"cvs log $opt_f |") || failed("fork");
while($line = <PIPE>) {
  if ($line =~ /^symbolic\snames:/) {		# list of symbolic names
    while (($line = <PIPE>) && ($line =~ /^\s+/)) {
      if ($line =~ /\s*$opt_r:\s(\S+)/) {
        $branch = $1;
        $branch =~ s/\.0(\.\d+)$/$1/;		# remove dodgy 0 digits
        $count = $branch;
        $count =~ s/\d+//g;
        if ((length($count))%2 != 0) {
          while (<PIPE>) { }			# aviod broken pipe error
          close(PIPE);
          die("$script: $opt_r ($branch) is not a branch\n");
        }
      }
    }
  } elsif ($line =~ /^head:\s(\S+)$/) {
    $head = $1;
    $head =~ s/\.\d+$//;		# strip off last digit to find branch   
  } elsif ($line =~ /^revision\s(\S*)$/) {
    $revision = $1;
  } elsif ($line =~ /^Working\sfile:\s(\S+)$/) {
    $working_file = $1;
    print(STDERR ".");					# show progress
  } elsif ($line =~ m|^date:\s(\d+/\d+/\d+)\s+(\d+:\d+):\d+|) {
    $key = $1." ".$2;			# date and time
    $revision =~ s/\.\d+$//;		# strip off last digit to find branch
    if (($revision eq $branch) || ($trunk &&($revision eq $head))){
      if ((&diff_dates($key,$opt_s)>=0)&&
          (&diff_dates($key,$opt_e)<=0)) {
        $log_entry = "";
        while (($line = <PIPE>) && ($line !~ /^-+$/) && ($line !~ /^=+$/)) {
          $log_entry .= $line;
        }
        if (!defined($logs{$key}) || ($logs{$key} ne $log_entry)) {
          $logs{$key} = $log_entry;
        }
        if (defined($opt_v)) {
          if (!defined($files{$key})) {
            $files{$key} = $working_file;
          } else {
            $files{$key} .= ",$working_file";
          }
        }
      }
    }
  }
}
printf("\n");
$|=0;
close(PIPE);
foreach $date (sort by_date keys %logs) {
  print("$date :\n------------------\n");
  if (defined($opt_v)) {
    @files = split(",",$files{$date});
    $lines = "File(s) : ";
    $line = "";
    foreach $file (@files) {
      if ($line ne "") {
      $line .= ", ";
      }
      if (length($line.$file)>70) {
        $lines .= $line."\n          ";
        $line = "";
      }
      $line .= $file;
    }
    if ($line ne "") {
      $lines .= $line."\n";
    }
    print("$lines");
  }
  print("$logs{$date}\n");
}

#############################################################################
# Wrap things up neatly.
#
sub failed {
  die("$script: $_[0] failed: $!\n");
}

#############################################################################
# Obtain current date and return in the correct format for cvs
#
sub get_date {
  my (@time);

  @time = localtime();

  return (sprintf("%d/%02d/%02d",@time[3],@time[4]+1,@time[5]));
}

#############################################################################
# Rearrange date into the format yyyy/mm/dd
#
sub rearrange_date {
  my ($date) = @_;
  my ($day,$month,$year);
  
  if ($date !~ m|(\d+)/(\d+)/(\d+)|) {
    die("$script: incorrect date format, need dd/mm/yy\n");
  }
  $day   = $1;
  $month = $2;
  $year  = $3;

  if ($year<1000) {
    $year+=1900;
  }
  return (sprintf("%d/%02d/%02d",$year,$month,$day));
}

#############################################################################
# diff dates, return <0 ==0 >0 for before, equal, after
#
sub diff_dates {
  my ($a,$b) = @_;
  my (@a_parts, $b_parts, $a_time, $b_time);

  if ($a eq $b) {			# deal with easiest first
    return (0);
  }
  ($a, $a_time) = split(" ",$a);
  ($b, $b_time) = split(" ",$b);
  @a_parts      = split("/",$a);
  @b_parts      = split("/",$b);
  
  if (@a_parts[0] < @b_parts[0]) {	# years
    return (-1);
  } elsif (@a_parts[0] > @b_parts[0]) {
     return (1);
  } else {
    if (@a_parts[1] < @b_parts[1]) {	# months
      return (-1);
    } elsif (@a_parts[1] > @b_parts[1]) {
      return (1);
    } else {
      if (@a_parts[2] < @b_parts[2]) {	# days
        return (-1);
      } elsif (@a_parts[2] > @b_parts[2]) {
        return (1);
      } else {
        if (defined($a_time) && defined($b_time)) {
          @a_parts = split(":",$a_time);
          @b_parts = split(":",$b_time);
          if (@a_parts[0] < @b_parts[0]) {	# hours
            return (-1);
          } elsif (@a_parts[0] > @b_parts[0]) {
             return (1);
          } else {
            if (@a_parts[1] < @b_parts[1]) {	# minutes
              return (-1);
            } elsif (@a_parts[1] > @b_parts[1]) {
              return (1);
            } else {
              return (0);
            }
          }
        }        
      }
    }
  }
}

sub by_date {
  return (&diff_dates($a,$b));
}

#############################################################################
# Get the branch name from the cvs control file.
#
sub get_branch {
  my ($branch);
  
  if (open(TAG,"CVS/Tag")) {
    $branch = <TAG>;
    chop($branch);
    if ($branch =~ /^T(.*$)/) {
      return ($1);
    } else {
      return ("TRUNK");
    }
    close(TAG);
  } else {
    return ("TRUNK");
  }
}

#############################################################################
# Get response from user and use default parameter if nothing given
#
sub ask {
  my ($question,$default) = @_;
  my ($input);
  
  if (!defined($opt_q)) {
    printf("Enter $question ($default) : ");
    $input = <STDIN>;
    chop($input);
    if ($input ne "") {
      return ($input);
    }
  }
  return ($default);
}
