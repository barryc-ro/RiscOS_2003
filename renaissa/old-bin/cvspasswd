#!/usr/local/bin/perl
#############################################################################
## $Id$
## $Revision$
## $Date$
#############################################################################
use POSIX "tmpnam";
#############################################################################

# sysuser is the user to match the password for if you want to create a new
# entry in the password file.  If the supplied user isn't in the file, then this
# user's local password lookup will be attempted on the "old password" to
# validate the addition of the new user - otherwise the addition will be
# faulted. 
$sysuser = 'sources';

$usage = "Usage: $0 [options] -user <username>\n\n" .
  "  -d <repository>     the repository to use\n" .
  "  -q                  quiet\n".
  "\n".
  "  -del                delete the user (*)\n".
  "  -map <real user>    map the user to the specified real user id (*)\n".
  "  -name <real name>   set the user's real name to the specified real name (*)\n".
  "  -email <mail addr>  set the user's e-mail address to be the specified address (*)\n".
  "  -oldpw <password>   user's old password (or system user password)\n".
  "  -newpw <password>   the new password (specify - to be prompted interactively)\n".
  "\n".
  "The -user option is mandatory.  This is the first field in the password\n".
  "file - ie. the virtual username\n\n".
  "The old password is the specified user's current password, or may\n".
  "be the system user's password (system user is '$sysuser').  If no old\n".
  "password is supplied, it will be prompted for interactively.  To create new\n".
  "entries, just attempt to change the user's password giving the system\n".
  "user's password as the old password.\n".
  "\n".
  "(* = verify password MUST be password for the system user)\n".
  "\n";
# extra unreported option -D enables debugging.

$admin = "cam-cvsadmin";

$tmpdir = tmpnam();
$leafname = "passwd";
$tmpleaf = "newpass";
$notify_file = "CVSROOT/" . $leafname;
$notify_tmp = $tmpdir . '/' . $tmpleaf;
$quiet = 0;
$debug = 0;
$winnt = ($^O eq 'MSWin32');

# This value is used to parse the output of the attempted commit.
# If this phrase is found inside the output of the CVS command we
# execute, we assume that it succeeded and suppress the output (to
# avoid confusing the poor users) otherwise we assume failure and
# output the whole thing to aid debugging.
$checkregexp = 'building administrative';

# The same, but for the initial checkout of the current file
$checkexport = ' checkout:';

# The names of the fields in the password file, used for generating prompts
# and log messages
@reasons = ('user', 'password', 'usermap', 'real name', 'e-mail address');

# The new data to be placed in the output
@newdata = ();

#############################################################################
#
# The passwd file is formatted thus:
#
# username:password:local username:user real name:user real e-mail address
#
#############################################################################

#sort out the input arguments
while ($ARGV[0]=~/^-/) {
  $arg = shift(@ARGV);
  print STDERR "ARG: $arg\n" if $debug;

  if ($arg eq '-h') {                   # help
    die($usage);
  } elsif ($arg eq '-q') {              # quiet
    $quiet++;
  } elsif ($arg eq '-d') {              # repository
    $CVSROOT = shift(@ARGV);
  } elsif ($arg eq '-del') {            # remove user
    $deluser = 1;
  } elsif ($arg eq '-map') {            # remap user
    $mapuser = 2;
    $newdata[$mapuser] = shift(@ARGV);
  } elsif ($arg eq '-name') {           # remap real name
    $mapuser = 3;
    $newdata[$mapuser] = shift(@ARGV);
  } elsif ($arg eq '-email') {          # remap e-mail address
    $mapuser = 4;
    $newdata[$mapuser] = shift(@ARGV);
  } elsif ($arg eq '-oldpw') {          # old password
    $oldpw = shift(@ARGV);
  } elsif ($arg eq '-newpw') {          # new password
    $newpw = $newdata[1] = shift(@ARGV);
  } elsif ($arg eq '-user') {           # username
    $newdata[0] = shift(@ARGV);
    $user = $newdata[0];
  } elsif ($arg eq '-D') {
    $debug++;                           # debugging level
  } else {
    die($usage);
  }
}

# Username is a required parameter
die($usage) unless $newdata[0];
$anydata = $deluser || $mapuser;

$CVSROOT = &get_repository($CVSROOT);
$cvsrootparam = '-d ' . $CVSROOT;
$cvsrootparam =~ s/\/$//; # strip trailing / put there by &canonify()

if ($debug) {
  print "Checking out $notify_file\nTemporary directory: $tmpdir\n";
}

# sort out remaining arguments
#
if (!defined($oldpw)) {
  $oldpw = &read_crypt_string("Enter verify password: ", 0);
}

# Special case - password change fully interactive
$newdata[1] = &interactive_password() if (!$anydata || $newpw eq '-');
$newdata[1] = makepw($newdata[1]) if ($newdata[1]);
die($usage) unless $deluser || $anydata || $newdata[1];

$suok = checksyspassword($oldpw);
print STDERR "Super-user password check: $suok\n" if $debug;

($edited, $aborted, $logmessage) = &modify_cvsfile($newdata[0],$oldpw,$newdata[1]);
print "\n" . $logmessage . "\n\n" if $logmessage && !$quiet;

exit $aborted;
#############################################################################
# functions
#
sub failed {
  my $diemsg="$0: $_[0] failed: $!\n";
  &cleanup();
  die $diemsg;
};

sub canonify {
  my ($dir)=@_;
  $dir=~s/\/\/+/\//g;
  $dir=~s/[^\/]$/$&\//;
  $dir;
};

# get repository from CVS control file in preference to environment variable
#
sub get_repository
{
  my ($cvsroot);
  
  if (open(ROOT,"CVS/Root")) {
    $cvsroot = <ROOT>;
    close(ROOT);
    chomp($cvsroot);
  } else {
    $cvsroot = $ENV{"CVSROOT"};
  }

  $cvsroot = $_[0] if $_[0]; 

  if ($cvsroot eq "") {
    die("$0: cannot establish a path to repository root.\n".
	"  Need CVSROOT environment variable, CVS control files or -d parameter.\n");
  }

  return (canonify($cvsroot));
}

# modify the password file with the new details
#
sub modify_cvsfile
{
  my ($user,$oldpw,$newpw,$logmessage) = @_;
  my ($line,$u,$b,$d,$handle_dev,$handle_ino,$dev,$ino,$command,$edited,$abort);
  
  # checkout the file for real
  #
  if ($winnt || ($cvsrootparam !~ /:pserver:/)) {
    $command = "cvs -Q $cvsrootparam co -d $tmpdir $notify_file";
  }
  else {
  # Client-server CVS on UNIX seems to have a bug relating to the use of
  # the co -d option to choose the checkout directory.  This code gets
  # around it.
    if ($tmpdir =~ /\A(.*)\/([^\/]+\Z)/) {
      $pathname=$1;
      $leafdir=$2;
    }
    else {
      failed("Unable to parse temporary filename! $tmpdir");
    }
    failed("Unable to change directory to $pathname") unless chdir $pathname;
    $command = "cvs -Q $cvsrootparam co -d $leafdir $notify_file";
  }
  execute($command);
  failed("Unable to check out $notify_file") if ($? >> 8);
  
  open(TMP,">$notify_tmp") || failed("unable to open $notify_tmp");
  open(NOTIFY,$tmpdir.'/'.$leafname) || failed("cannot open $leafname");
  #
  # copy real file to temporary file, except for one to change
  #
  while ($line = <NOTIFY>) {
    chomp $line;
    @details=split(":", $line);

    # Interested in this line?
    if ($details[0] ne $user || $edited || $abort) {
      print $line . "\n" if $debug;
      print(TMP "$line\n");
      next;
    }

    if (!$suok && !&checkuserpassword($details[1], $oldpw, $deluser || $mapuser)) {
      $logmessage = "Unable to update password file: permission denied";
      print STDERR "Permission denied: wrong password\n" if $debug;
      $abort = 1;
      last;
    }

    $edited = 1; # indicate that we should commit the file
    if ($deluser) {
      $logmessage = "Deleted user $user";
      next;
    }
    $i=0;
    while (@newdata > 0) {
      my $arg = shift (@newdata);
      if ($arg ne '') {
        $details[$i] = $arg;
        $logmessage .= "Changed $reasons[$i] for $user" unless $i == 0;
        $logmessage .= " to $arg" unless $i < 2;
        $logmessage .= "\n";
      }
      $i++;
    }
    $line = join ':', @details;
    print $line . "\n" if $debug;
    print(TMP "$line\n");
  }
 
  # append the new entry to be added to the end of the file - if $sysuser's password matches
  #
  if (!$edited && !$abort && !$deluser) {
    if (!$suok) {
      $logmessage = "Unable to update password file: permission denied";
      print STDERR "Permission denied: need to be super-user to add new entries to password file\n" if $debug;
      $abort = 1;
    }
    else {
      $line = join ':', @newdata;
      print $line . "\n" if $debug;
      print(TMP "$line\n");
      $logmessage = "Added new user $user to password file";
      for ($i = 2; $i <= 4; ++$i) {
        $logmessage .= " ($reasons[$i]: $newdata[$i])" if $newdata[$i2];
      }
      $edited = 1;
    }
  }

  if (!$edited && !$abort && $deluser) {
    $abort = 1;
    $logmessage = "User $user was not in the password file\n";
  }

  close(TMP);
  close(NOTIFY);
  
  # now move the temporary file over the old one - file handle follows file
  #
  chdir($tmpdir);
  if ($edited && !$abort && $debug < 2) {
    unlink($leafname);
    rename($tmpleaf,$leafname);
    $command = "cvs -Q $cvsrootparam ci -m\"$logmessage\" $leafname|";
    print "-- executing: $command\n" if $debug;
    open(TMP, $command) ||
      failed("Unable to commit new file");
    while (<TMP>) {
      $results.=$_;
      $ok = 1 if (/$checkregexp/i);
    }
    close TMP;
    print $results unless $ok;
  }
  &cleanup();
  return ($edited, $abort, $logmessage);
}

sub makepw {
  my ($password, $salt) = @_;
  if (!$salt) {
    my @salt = ('a'..'z', 'A'..'Z', '0'..'9');
    my $rnd1 = int rand(@salt);
    my $rnd2 = int rand(@salt);
    $salt = $salt[$rnd1] . $salt[$rnd2];
  }
  return crypt($password, $salt);
};

# This routine checks that the password supplied matches the system password
# (which is the password for $sysuser)
sub checksyspassword {
  my ($verify) = @_;
  my ($uid,$passwd) = getpwnam($sysuser);
  print STDERR "Super-user is $uid, password is $passwd, crypt gives ".&makepw($verify,$passwd)."\n" if $debug > 1;
  return (makepw($verify, $passwd) eq $passwd);
}

sub checkuserpassword {
  my ($file, $cli, $suop) = @_;
  # Restrict super-user ops to superuser password
  return 0 if $suop;
  # Empty password in file and on command line ... OK
  return 1 if ($file eq '' && $cli eq '');
  # Otherwise, compare the crypted passwords.
  return (makepw($cli, $file) eq $file);
}

sub cleanup {
  chdir; # Get out of the directory we're about to massacre ...
  if ($debug > 2) {
    print "** WARNING: Not deleting temporary directory $tmpdir\n";
    return;
  }
  if ($winnt) {
    execute('rmdir /q /s ' . $tmpdir);
  }
  else {
    execute("rm -rf $tmpdir");
  }
}

sub execute {
  print "-- executing: $_[0]\n" if $debug;
  system($_[0]);
}

sub read_crypt_string {
  my ($prompt, $clear) = @_;

  print $prompt;
  system("stty -echo") if !$clear;
  $prompt = <STDIN>;
  chomp $prompt;
  system("stty echo") if !$clear;
  print "\n" if !$clear;
  return $prompt;
}

# This routine prompts for the new information (user/password)
sub interactive_password {
  my ($optype,$result,$result2) = ("new password");
  $result = read_crypt_string("Enter ".$optype.": ", 0);
  $result2 = read_crypt_string("Re-enter ".$optype.": ", 0);
  die("The $optype entries were not identical!\n") unless ($result eq $result2);
  return $result;
}

# Local Variables:
# mode:perl
# perl-indent-level: 2
# End:
