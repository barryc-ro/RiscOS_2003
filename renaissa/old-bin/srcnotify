#!/usr/local/bin/perl
#############################################################################
## $Id$
## $Revision$
## $Date$
#############################################################################
use POSIX "tmpnam";
#############################################################################
$CVSROOT = &get_repository();
$usage = "Usage: $0 [options] [add|remove|exclude|list]\n"
    ."  -q             Enable quiet mode\n"
    ."  -m <mailaddr>  Set mail address to use\n"
    ."  -r <branch>    Set branch to use\n"
    ."  -d <path>      Set directory for notification\n";
# extra unreported option -D enables debugging.
$admin = "cam-cvsadmin";
$user = $ENV{"LOGNAME"};
$user = $ENV{"USER"} if($user eq '');
$user = $ENV{"USERNAME"} if ($user eq '');
#
$tmpdir = tmpnam();
$leafname = "srcnotifications";
$tmpleaf = "newfile";
$notify_file = "CVSROOT/" . $leafname;
$notify_tmp = $tmpdir . '/' . $tmpleaf;
$quiet = 0;
$debug = 0;
$winnt = ($^O eq 'MSWin32');

$cvsrootparam = '-d ' . $CVSROOT;
$cvsrootparam =~ s/.$//; # strip trailing / put there by &canonify()

# This value is used to parse the output of the attempted commit.
# If this phrase is found inside the output of the CVS command we
# execute, we assume that it succeeded and suppress the output (to
# avoid confusing the poor users) otherwise we assume failure and
# output the whole thing to aid debugging.
$checkregexp = 'building administrative';

# The same, but for the initial checkout of the current file
$checkexport = ' checkout:';

# Text to replace the empty string in reports
$entirerepos = 'the entire repository';

#
# Notifications file will be formated as
# 
# username:branch:path with a separate line for each notification
#
#############################################################################

#sort out the input arguments
while ($ARGV[0]=~/^-/) {
  $arg = shift(@ARGV);

  if ($arg eq '-h') {			# help
    die($usage);
  } elsif ($arg eq '-q') {		# quiet
    $quiet = 1;
  } elsif ($arg eq '-r') {		# branch
    $arg_branch = shift(@ARGV);
  } elsif ($arg eq '-d') {		# directory
    $arg_directory = shift(@ARGV);
  } elsif ($arg eq '-m') {		# mail address
    $arg_mail = shift(@ARGV);
  } elsif ($arg eq '-D') {
    $debug++;                           # debugging level
  } else {
    die($usage);
  }
}

if ($debug) {
  print "Checking out $notify_file\nTemporary directory: $tmpdir\n";
}


# sort out remaining arguments
#
$arg = shift(@ARGV);
if ($arg eq 'add') {
  $function = "add";
} elsif ($arg eq 'remove') {
  $function = "remove";
} elsif ($arg eq 'exclude') {
  $function = "exclude";
} elsif (!defined($arg) || $arg eq 'list') {
  $function = "list";
} else {
  die($usage);
}

$user = &get_user($arg_mail, $user);
&read_notifications($user);

if (($function eq "list") || ($function eq "remove")) {
  print("\n");
  if (defined(@notifications)) {
    $i = 1;
    foreach $entry (@notifications) {
      ($b,$d,$s) = split(":",$entry);
      my $extra;
      if($d=~s/^-//) {
	$extra="Excluded";
      } elsif ($s =~ /no/i) {
	$extra="No self notification ($s)";
      } else {
	$extra="With self notification";
	$extra.=" ($s)" if(length($s));
      }
      if ($b =~ /^all$/i) {
        $b = "All branches";
      }
      printf("  $i) $b : %s : $extra\n", $d ? $d : $entirerepos);
      $i++;
    }
    printf("\n");
    if ($function eq "remove") {
      print("Which notification do you want to remove ? : ");
      $input = <STDIN>;
      chomp($input);
      if ($input>=$i || $input<1) {
        print("\nNot one of the options given !\n\n");
        exit(1);
      }

      ($b,$d,$s) = split(":",$notifications[$input-1]);
      $actualdirectory=$d;
      $d=$entirerepos unless $d;
      if($d=~s/^-//) {
        $logmessage=sprintf("Exclusion removed for $user on $d".
	      (defined($b)&&" ($b)"));
      } else {
	$logmessage=sprintf("Notification removed for $user on $d".
	      (defined($b)&&" ($b)"));
      };
      &modify_notifications($function,$b,$actualdirectory,$s,$logmessage);
      print "\n" . $logmessage . "\n\n";
    }
  } else {
    print("  No notifications currently registered.\n\n");
  }
} else {

  $branch    = &get_branch($arg_branch);
  $directory = &get_directory($arg_directory);
  if ($function eq "exclude") {
    $directory = "-".$directory;
    $self_notify = "No";
  } else {
    $self_notify = &get_self_notification();
  }
  
  foreach $entry (@notifications) {
    ($b,$d) = split(":",$entry);
    if (($b eq $branch) && ($d eq $directory)) {
      print("\nThis notification already exists !\n\n");
      exit(1);
    }
  }
  
  $logmessage='';
  $reportdirectory=$directory;
  $reportdirectory=~s/^-//;
  $reportdirectory=$entirerepos unless $reportdirectory;
  if($function eq "exclude") {
    $logmessage = "Exclusion added for $user on $reportdirectory".
	  (defined($branch)&&" ($branch)");
  } else {
    $logmessage = "Notification added for $user on $reportdirectory".
	  (defined($branch)&&" ($branch)");
  }

  &modify_notifications($function,$branch,$directory,$self_notify,$logmessage);
  print "\n" . $logmessage . "\n\n" if $logmessage;
}

exit 0;

#############################################################################
# functions
#
sub failed {
  my $diemsg="$0: $_[0] failed: $!\n";
  &cleanup();
  die $diemsg;
};

sub canonify {
  my ($dir)=@_;
  $dir=~s/\/\/+/\//g;
  $dir=~s/[^\/]$/$&\//;
  $dir;
};

# get repository from CVS control file in preference to environment variable
#
sub get_repository
{
  my ($cvsroot);
  
  if (open(ROOT,"CVS/Root")) {
    $cvsroot = <ROOT>;
    close(ROOT);
    chomp($cvsroot);
  } else {
    $cvsroot = $ENV{"CVSROOT"};
  }

  if ($cvsroot eq "") {
    die("$0: cannot establish a path to repository root.\n".
	"  Need CVSROOT environment variable or CVS control files.\n");
  }

  return (canonify($cvsroot));
}

# get the branch name if not specified on the command line, default to TRUNK
#
sub get_branch
{
  my ($branch) = @_;
  my ($input,$line,$tag);
  
  if (!defined($branch)) {  
    if (open(TAG,"CVS/Tag")) {
      $branch = <TAG>;
      chomp($branch);
      if ($branch =~ /^[TN](.*$)/) {
        $branch = $1;
      } else {
        $branch='TRUNK';
      }
      close(TAG);
    } else {
      $branch = "TRUNK";
    }
    # if not in quiet mode, prompt the user
    #
    if (!$quiet) {
      print("Enter the branch to apply (default $branch,".
	    " 'All' for all branches) : ");
      $input = <STDIN>;
      chomp($input);
      if ($input ne "") {
        $branch = $input;
        
        # check that this tag exists
        #
        if ($branch eq "TRUNK") {
          ;
        } elsif ($branch =~ /all/i) {
          $branch =~ tr/A-Z/a-z/;
        }
      }
    }
  }
  return ($branch);
}

# get the directory name if not specified on the command line
#
sub get_directory
{
  my ($dir) = @_;
  my ($input,$fullpath);
    
  if (!defined($dir)) {
    # get the full path to the file in the repository
    if (open(REPOS,"CVS/Repository")) {
      $dir = <REPOS>;
      close(REPOS);
      chomp($dir);
      $dir =~ s/\A$CVSROOT\/?//;
    }
    # if not in quiet mode, prompt the user
    #
    if (!$quiet) {
      printf("Enter the directory to apply (default $dir) : ");
      $input = <STDIN>;
      chomp($input);
      if ($input ne "") {
        $dir = $input;
        
        # check that this path exists
        #
        $fullpath = $CVSROOT.$dir;
        if (!(-x $fullpath) && (-x $CVSROOT)) {
          printf("\nPath '$fullpath' does not exist !\n\n");
          exit(1);
        }
      }
    }
  }
  return ($dir);
}

# see if the user wants to be informed when they commit things
#
sub get_self_notification
{
  if (!$quiet) {
    print("Do you want to be informed when you do commits (Y/n) :");
    if (&ask("ny","y")) {
      return ("Yes");
    }
  }
  return ("No");
}

# find out what mail address the user wishes to use
#
sub get_user {
  my($mail_addr, $env_user)=@_;
  return $mail_addr if defined $mail_addr;
  return $env_user;
};

# read notifications file
#
sub read_notifications
{
  my ($username) = @_;
  my ($line,$branch,$path,$user,$self_notify,$failed,$checkout,$command);

  $command = "cvs -Q $cvsrootparam co -p -r HEAD $notify_file 2>&1 |"; 
  print "-- executing: " . $command . "\n" if $debug;
  open(NOTIFY,$command) ||
    failed("cannot read $notify_file");

  print "-- Looking for user $username ...\n" if $debug;
    
  while (<NOTIFY>)
  {
    $line=$_;
    $checkout.=$line;
    next if $failed;
    next if /\A[A-Z]\s/;
    $failed = 1 if (/$checkexport/i);
    chomp($line);
    ($user,$branch,$path,$self_notify) = split(':', $line);
    next unless ($user && $self_notify);
    if ($username eq $user) {
      push(@notifications,$branch.":".$path.":".$self_notify);
    }
  }
  close(NOTIFY);
  
  print "-- Checkout report --\n$checkout-- End Checkout report --\n" if $debug;
  die $checkout if $failed;
}

# add or remove an entry from the notifications file.
#
sub modify_notifications
{
  my ($action,$branch,$directory,$self_notify,$logmessage) = @_;
  my ($line,$u,$b,$d,$handle_dev,$handle_ino,$dev,$ino,$command);
  
  # checkout the srcnotifications file for real
  #
  if ($winnt || ($cvsrootparam !~ /:pserver:/)) {
    $command = "cvs -Q $cvsrootparam co -d $tmpdir $notify_file";
  }
  else {
  # Client-server CVS on UNIX seems to have a bug relating to the use of
  # the co -d option to choose the checkout directory.  This code gets
  # around it.
    if ($tmpdir =~ /\A(.*)\/([^\/]+\Z)/) {
      $pathname=$1;
      $leafdir=$2;
    }
    else {
      failed("Unable to parse temporary filename! $tmpdir");
    }
    failed("Unable to change directory to $pathname") unless chdir $pathname;
    $command = "cvs -Q $cvsrootparam co -d $leafdir $notify_file";
  }
  execute($command);
  failed("Unable to check out $notify_file") if ($? >> 8);
  
  open(TMP,">$notify_tmp") || failed("unable to open $notify_tmp");
  open(NOTIFY,$tmpdir.'/'.$leafname) || failed("cannot open $leafname");
  # copy real file to temporary file, except for one to remove
  #
  while ($line = <NOTIFY>) {
    if (($action eq "add") || ($action eq "exclude")) {
      print(TMP $line);
    } else {
      # see if we need to remove this entry
      #
      chomp($line);
      ($u,$b,$d) = split(":",$line);
      if (($u ne $user) || ($b ne $branch) || ($d ne $directory)) {
        print(TMP "$line\n");
      }
    }
  }
  
  # append the one to be added to the end of the file
  #
  if (($action eq "add") || ($action eq "exclude")) {
    print(TMP "$user:$branch:$directory:$self_notify\n");
  }
  close(TMP);
  close(NOTIFY);
  
  # now move the temporary file over the old one - file handle follows file
  #
  chdir($tmpdir);
  unlink($leafname);
  rename($tmpleaf,$leafname);
  $command = "cvs -Q $cvsrootparam ci -m\"$logmessage\" $leafname|";
  print "-- executing: $command\n" if $debug;
  open(TMP, $command) ||
    failed("Unable to commit new file");
  while (<TMP>) {
    $results.=$_;
    $ok = 1 if (/$checkregexp/i);
  }
  close TMP;
  print $results unless $ok;
  &cleanup();
}

# Ask for user input return position in $options string. Allow a default
# option if enter it hit.
#
sub ask {
  my ($options,$default) = @_;
  my ($response);
  
  $options =~ tr/a-z/A-Z/;

  do {
    $response = <STDIN>;
    chomp($response);
    if ($response eq "") {
      $response = $default;
    }
    $response =~ tr/a-z/A-Z/;
    if (index($options,$response)<0) {
      print("Not valid, try again :");
    }
  } while (index($options,$response)<0);

  return index($options,$response);
}

sub cleanup {
  chdir; # Get out of the directory we're about to massacre ...
  if ($debug > 1) {
    print "** WARNING: Not deleting temporary directory $tmpdir\n";
    return;
  }
  if ($winnt) {
    execute('rmdir /q /s ' . $tmpdir);
  }
  else {
    execute("rm -rf $tmpdir");
  }
}

sub execute {
  print "-- executing: $_[0]\n" if $debug;
  system($_[0]);
}

# Local Variables:
# mode:perl
# perl-indent-level: 2
# End:
