#! /usr/local/bin/perl
# cvssync
# $Revision$

$usage="Usage: $0 [-d debug]\n";

my($dirtag);
my($entriesdir, %entries);

# Disable echo for the duration.
$ttystate=`stty -g`;
system(qw(stty -echo -icanon min 1 time 0));
$|=1;
END {
  system("stty",$ttystate) if defined($ttystate);
};

sub failed {
  die "$0: $_[0] failed: $!\n";
};

# ask($file,"$file has been removed locally.","Remove","Update","Ignore");
sub ask {
  my($file)=shift@_;
  my($text)=shift@_;
  my($x,$opts,@opts,$buf);
  foreach $x (@_) {
    $x=~/^(.)(.*)$/;
    push@opts," ($1)$2";
    $opts.=$1;
  };
  $opts=~tr/a-z/A-Z/;
  print "$text ",join(',',@opts),"? ";
  while(1) {
    read(STDIN,$buf,1)||failed("read");
    $buf=~tr/a-z/A-Z/;
    if(index($opts,$buf)>=0) {
      print "\n";
      die("Key $buf undefined\n") unless defined($action{$buf});
      if($file=~/^(.*)\/([^\/]*)$/) {
	return &{$action{$buf}}($1,$2);
      } else {
	return &{$action{$buf}}('.',$file);
      };
    };
  };
};

sub chdir_system {
  local $dir=shift(@_);
  if($debug&1) {
    print "chdir_system($dir";
    foreach $x (@_) {
      print ",$x";
    };
    print ")\n";
  };
  if(!($debug&2)) {
    defined($pid=fork)||failed("fork");
    if($pid==0) {
      chdir($dir)||failed("chdir($dir)");
      exec(@_);
      failed("exec");
    };
    waitpid($pid,0)||failed("waitpid");
    if($?!=0) {
      die("$0: Command failed\n");
    };
  };
};

$action{'A'}=sub {
  # Add a file: cd $dir; cvs add $file
  # Note: May be a directory.  We should recurse, and add entries.  Maybe
  # later...
  my($dir,$leaf)=@_;
  chdir_system($dir,qw(cvs add),$leaf);
  push @ARGV, "$dir/$leaf" if(-d "$dir/$leaf");
};
$action{'R'}=sub {
  # Remove a file: cd $dir ; cvs remove $file
  my($dir,$leaf)=@_;
  chdir_system($dir,qw(cvs -q remove),$leaf);
};
$action{'U'}=sub {
  # Update a file: cd $dir ; cvs update -lr Spinner $file
  my($dir,$leaf)=@_;
  chdir_system($dir,qw(cvs update),$leaf);
};
$action{'M'}=sub {
  # Move a new file from one branch to another.
  my($dir,$leaf)=@_;
  rename("$dir/$leaf", "$dir/$leaf.tmp")
      ||failed("rename($dir/$leaf, $dir/$leaf.tmp)");
  chdir_system($dir, qw(cvs -q remove), $leaf);
  rename("$dir/$leaf.tmp", "$dir/$leaf")
      ||failed("rename($dir/$leaf.tmp, $dir/$leaf)");
  chdir_system($dir, qw(cvs -q add), $leaf);
};
$action{'I'}=sub {
  # Do nothing
};
# Parse options
while($ARGV[0]=~/^-/) {
  $arg=shift @ARGV;
  if ($arg eq '--') {
    last;
  } elsif ($arg eq '-d') {
    $debug=shift @ARGV;
  } elsif ($arg eq '-v') {
    $verbose=1;
  } else {
    die("$0: Unknown option '$arg'\n");
  };
};

push @ARGV, "." unless @ARGV;

my $i;
for($i=0; $i<=$#ARGV; $i++) {
  my $arg=$ARGV[$i];
  open(PIPE,"cvs -nq update $arg 2>&1 |")||failed("fork");
  while(<PIPE>) {
    print if $verbose;
    if(/^cvs update: warning: (.*) was lost$/) {
      ask($1,"$1 has been removed locally.","Remove","Update","Ignore");
      $removed=$1;
    } elsif(/^U (.*)$/) { # Modified in repository
      ask($1,"$1 has been modified in the repository.","Update local","Ignore")
	  if($removed ne $1);
    } elsif(/^A (.*)$/) { # Added locally
      my $file=$1;
      $file=~/((.*)\/)?(.*)/;
      my $dir=$2||".";
      my $leaf=$3;
      loadentries($dir);
      my $tag=$entries{$leaf}{tag};
      print "leaf=$leaf tag=$tag\n" if $debug&4;
      if($tag ne $dirtag) {
	my($oldname,$newname);
	$oldname=($tag=~/^[TN](.*)$/?"branch $1":"the trunk");
	$newname=($dirtag=~/^[TN](.*)$/?"branch $1":"the trunk");
	ask($file,"$file was added on $oldname.  Move to $newname?",
	    "Move","Ignore");
      } else {
	print "$file will be added to the repository when committed.\n";
      };
    } elsif(/^R (.*)$/) { # Removed locally
      print "$1 will be removed from the repository when committed.\n";
    } elsif(/^M (.*)$/) { # Modified locally
      print "$1 has been modified locally.\n";
    } elsif(/^C (.*)$/) { # Conflict
      print "$1 has a conflict, and needs to be editted.\n";
    } elsif(/^\? (.*)$/) { # Not known about
      ask($1,"$1 has been created locally.","Add","Ignore");
    } else {
      # Unrecognised
    };
  };
  close(PIPE);
};

# Entries file manager

sub loadentries {
  my($dir)=@_;
  return if defined($entriesdir) && $dir eq $entriesdir;
  %entries=();
  $entriesdir=$dir;

  print "Getting entries for $dir\n" if $debug & 4;
  local *ENTRIES;
  open(ENTRIES, "$dir/CVS/Entries")||failed("open($dir/CVS/Entries)");
  while(<ENTRIES>) {
    chomp;
    my $hash={};
    my $name;
    (undef, $name, $hash->{rev}, $hash->{date}, $hash->{keywords},
     $hash->{tag}, @{$hash->{extra}})=
	split("/");
    $entries{$name}=$hash;
  };
  close(ENTRIES);

  local *TAG;
  if(-f "$dir/CVS/Tag") {
    open(TAG, "$dir/CVS/Tag") || failed("open($dir/CVS/Tag)");
    $dirtag=<TAG>;
    chomp $dirtag;
  } else {
    $dirtag="";
  };
  close(TAG);
};

# Local Variables:
# mode: perl
# perl-indent-level: 2
# End:
