#! /usr/local/bin/perl
$usage="Usage: $0 [-d debug]\n";

$ttystate=`stty -g`;
system(qw(stty -echo -icanon min 1 time 0));
$|=1;
sub END {
  system("stty",$ttystate);
};

sub failed {
  die "$0: $_[0] failed: $!\n";
};

# ask($file,"$file has been removed locally.","Remove","Update","Ignore");
sub ask {
  my($file)=shift@_;
  my($text)=shift@_;
  my($x,$opts,@opts,$buf);
  foreach $x (@_) {
    $x=~/^(.)(.*)$/;
    push@opts," ($1)$2";
    $opts.=$1;
  };
  $opts=~tr/a-z/A-Z/;
  print "$text ",join(',',@opts),"? ";
  while(1) {
    read(STDIN,$buf,1)||failed("read");
    $buf=~tr/a-z/A-Z/;
    if(index($opts,$buf)>=0) {
      print "\n";
      die("Key $buf undefined\n") unless defined($action{$buf});
      if($file=~/^(.*)\/([^\/]*)$/) {
	return &{$action{$buf}}($1,$2);
      } else {
	return &{$action{$buf}}('.',$file);
      };
    };
  };
};

sub chdir_system {
  local $dir=shift(@_);
  if($debug&1) {
    print "chdir_system($dir";
    foreach $x (@_) {
      print ",$x";
    };
    print ")\n";
  };
  if(!($debug&2)) {
    defined($pid=fork)||failed("fork");
    if($pid==0) {
      chdir($dir)||failed("chdir($dir)");
      exec(@_);
      failed("exec");
    };
    waitpid($pid,0)||failed("waitpid");
    if($?!=0) {
      die("$0: Command failed\n");
    };
  };
};

$action{'A'}=sub {
  # Add a file: cd $dir; cvs add $file
  # Note: May be a directory.  We should recurse, and add entries.  Maybe
  # later...
  my($dir,$leaf)=@_;
  chdir_system($dir,qw(cvs add),$leaf);
};
$action{'R'}=sub {
  # Remove a file: cd $dir ; cvs remove $file
  my($dir,$leaf)=@_;
  chdir_system($dir,qw(cvs remove),$leaf);
};
$action{'U'}=sub {
  # Update a file: cd $dir ; cvs update -lr Spinner $file
  my($dir,$leaf)=@_;
  chdir_system($dir,qw(cvs update),$leaf);
};
$action{'I'}=sub {
  # Do nothing
};
# Parse options
while($ARGV[0]=~/^-/) {
  $arg=shift @ARGV;
  if ($arg eq '--') {
    last;
  } elsif ($arg eq '-d') {
    $debug=shift @ARGV;
  } else {
    die("$0: Unknown option '$arg'\n");
  };
};
die $usage if($#ARGV>=0);
open(PIPE,"cvs -nq update 2>&1 |")||failed("fork");
while(<PIPE>) {
  if(/^cvs update: warning: (.*) was lost$/) {
    ask($1,"$1 has been removed locally.","Remove","Update","Ignore");
    $removed=$1;
  } elsif(/^U (.*)$/) { # Modified in repository
    ask($1,"$1 has been modified in the repository.","Update local","Ignore")
	if($removed ne $1);
  } elsif(/^A (.*)$/) { # Added locally
    print "$1 will be added to the repository when committed.\n";
  } elsif(/^R (.*)$/) { # Removed locally
    print "$1 will be removed from the repository when committed.\n";
  } elsif(/^M (.*)$/) { # Modified locally
    print "$1 has been modified locally.\n";
  } elsif(/^C (.*)$/) { # Conflict
    print "$1 has a conflict, and needs to be editted.\n";
  } elsif(/^? (.*)$/) { # Not known about
    ask($1,"$1 has been created locally.","Add","Ignore");
  } else {
    # Unrecognised
  };
};
close(PIPE);

# Local Variables:
# mode:perl
# perl-indent-level: 2
# End:
