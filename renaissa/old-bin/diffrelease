#!/usr/local/bin/perl

#############################################################################
## $Id$
## $Revision$
## $Date$
#############################################################################

# This program parses two products files and writes all the logs from the 
#  VersionNum file between those two versions into a file. It can be used to 
#  help automate the writing of release notes by allowing the changes between
#  two releases to be easilly obtained.

# The program has to have a copy of the entire source tree for the project
#  available to work on. Also the specific revisions of the product files
#  that are being compared have to have symbolic tags.

# To use it, alter the $version[1] and $version[2] variables below to point
#  to the symbolic names of the releases to be diff'ed. Then alter
#  $root_cvs_tree to point to the checked out version of the OS. Running in
#  should then output to the screen all the components that have been
#  changed, added or removed between the two releases and the logs between
#  those changes. Any components that have been changed but do not have a
#  VersionNum file will appear with a blank change log.

# The resultant log is written to a file 'cvslog'.

# This script is very much under development, and has only been used on
#  Lazarus project builds. It should easilly be possible 

# This version of the script also parses the output file into another file,
#  'cvsloghtml' that has some basic HTML tags added to aid the writing of
#  release notes based on this information. Note that this is only a
#  pre-parse, and the file will have to be altered some more to get it into a
#  final format.

# Future improvements:
#  * Allow the parameters to be passed in via the command line.
#  * If the symbolic tags cannot be located in the VersionNum file, make the
#     script look in the Makefile and get the logs out of that file. This
#     would not be perfect, as there is no guarantee that the Makefile
#     changes during every checkin but better than nothing.


# Current version : 
$scriptversion = '0.04';

# 0.01: Created to parse Product files, by DCotton and SBrodie.
# 0.02: Now HTML'izes the output. Also slightly tidied up.
# 0.03: More work on the HTML output routines. Now has command-line parameters
# 0.04: More command line parameters added.


$user = $ENV{"LOGNAME"};
$user = $ENV{"USER"} unless $user;
$product = \$ARGV[0];

# Inititalise some variables...
$output_file = "./cvslog";
$convert_to_html = false;
$root_cvs_tree="";
$versions[1] = "";
$versions[2] = "";
$product_file = "";


# Call the main function.
main();
$pwdstore = `pwd`; # Store current directory.




sub main
{
  print ("Running DiffRelease V$scriptversion\n\n");

  parse_command_line_args();
  # Ensure that all the command line args that we need exist.
  $versions[1]  = $$versions1;
  $versions[2]  = $$versions2;
  $product_file = $$product_file;
  if ($versions[1] eq "" or $versions[2] eq "")
  {
    error("You must pass in the two version tags to be diff'ed.\n")
  }
  if ($product_file eq "")
  {
    error("You must pass in the product file path.\n");
  }
 
  # Open the output file.
  unless (open(LOG_FILE,"> $output_file"))
  {
    $error_string = "ERROR: open of $output_file for writing failed\n";
    error($error_string);
  }
   
  # Ensure that the $root_cvs_tree directory exists.
  if (-e $root_cvs_tree)
  {
    perform_pass(1);
    perform_pass(2);
  }
  else
  {
    error ("Directory $root_cvs_tree does not exist.\n");
  }
  
  # Now display a summary
  if ($convert_to_html eq true)
  {
    print LOG_FILE "\n\n<HTML>\n";
    print LOG_FILE "<BODY>\n\n";
    print LOG_FILE "\n\n<H3>Change Summary:</H3>\n";
    print LOG_FILE "<TABLE border=\"1\">\n";
    print LOG_FILE "<TR><TH>Component	<TH>First tag	<TH>Second tag	</TR>\n";
    for ($i = 0; $i < @component; $i++)
    {
      if ($component_tag1[$i] ne $component_tag2[$i])
      {
        if (not $component_tag1[$i] eq "" and not $component_tag2[$i] eq "")
        {
          print LOG_FILE "<TR><TD>$component[$i]	<TD>$component_tag1[$i]	<TD>$component_tag2[$i]	</TR>\n";
        }
      }
    }
    print LOG_FILE "</TABLE>\n";
  }
  else # Text output.
  {
    print LOG_FILE "\n\n<H3>Change Summary:</H3>\n";
    for ($i = 0; $i < @component; $i++)
    {
      if ($component_tag1[$i] ne $component_tag2[$i])
      {
        if (not $component_tag1[$i] eq "" and not $component_tag2[$i] eq "")
        {
          print LOG_FILE "Component $component[$i] has tags of $component_tag1[$i] and $component_tag2[$i]\n";
        }
      }
    }
  }
  
  
  # Deal with new components.
  if ($convert_to_html eq true)
  {
    print LOG_FILE "\n\n<H3>New components:</H3>\n";
    $new_component_count = 0;
    for ($i = 0; $i < @new_component; $i++)
    {
      print LOG_FILE "<P>$new_component[$i] has been added at tag $new_component_tag[$i].\n";
      $new_component_count++;
    }
    if ($new_component_count == 0)
    {
      print LOG_FILE "<P>No new components have been added between these two product files.\n";
    }
  }
  else # Text output.
  {
    print LOG_FILE "\n\nNew components:\n";
    $new_component_count = 0;
    for ($i = 0; $i < @new_component; $i++)
    {
      print LOG_FILE "Component $new_component[$i] has been added at tag $new_component_tag[$i].\n";
      $new_component_count++;
    }
    if ($new_component_count == 0)
    {
      print LOG_FILE "No new components have been added between these two product files.\n";
    }
  }
  
  # Deal with removed components.
  if ($convert_to_html eq true)
  {
    print LOG_FILE "\n\n<H3>Removed components:</H3>\n";
    $removed_component_count = 0;
    for ($i = 0; $i < @component; $i++)
    {
      if ($component_tag2[$i] eq "") # Second tag does not exist.
      {
        print LOG_FILE "<P>Component $component[$i] has been removed.\n";
        $removed_component_count++;
      }
    }
    if ($removed_component_count == 0)
    {
      print LOG_FILE "<P>No components have been removed between these two product files.\n";
    }
  }
  else # Text output.
  {
    print LOG_FILE "\n\nRemoved components:\n";
    $removed_component_count = 0;
    for ($i = 0; $i < @component; $i++)
    {
      if ($component_tag2[$i] eq "") # Second tag does not exist.
      {
        print LOG_FILE "Component $component[$i] has been removed.\n";
        $removed_component_count++;
      }
    }
    if ($removed_component_count == 0)
    {
      print LOG_FILE "No components have been removed between these two product files.\n";
    }
  }
  
  # Now display logs for the components whose tags have changed:
  for ($i = 0; $i < @component; $i++)
  {
    if ($component_tag1[$i] ne $component_tag2[$i])
    {
      if (not $component_tag1[$i] eq "" and not $component_tag2[$i] eq "")
      {
        retrieve_build_log($component[$i], $component_tag1[$i], $component_tag2[$i]);
      }
    }
  }

  close(LOG_FILE);

  # Change back to the directory that we were in when we started.
  chdir ($pwdstore); 
    
  # Convert the log to HTML format where possible.
  convert_log_to_html();
};



# This routine retrieves and parses a certain revision of a Product file. It stores the components held in the file and their corresponding tags in arrays.

sub perform_pass()
{
  my ($pass_number)=@_;
  
  # If there is a Product file obtainable from this directory, delete it.
  if (-e $product_file)
  {
    print "Deleting existing product file.\n";
    if ((system("rm", $product_file)>>8))
    {
      error("Problem deleting existing Product file.\n");
    }
  }

  # export the number'th file.
  print "Attempting to export product file tagged with $versions[$pass_number].\n";
  if ((system("cvs","export","-r", $versions[$pass_number], $product_file)>>8))
  {
    $string = "ERROR: cvs export of product file ".$product_file." failed...\n";
    error($string);
  }
  
  parse_product_file($product_file, $pass_number);
  
  # Remove the first product file
  if ($pass_number eq "1")
  {
    if ((system("rm", $product_file)>>8))
    {
      $string = $pfx."ERROR: Removal of product file ".$product_file." failed.\n";
      error($string);
    }
  }
}




$pfx = "--- ";

sub gtfo 
{
  exit(1);
}

sub error
{
  my ($error_string)=@_;
  print STDERR ($error_string);
  gtfo();
}




# This routine parses through the product file passed in and puts all the
#  components that it comes across into a vector.
sub parse_product_file
{
  my ($product_file, $pass_number)=@_;

  # Open the modules file.
  unless (open(MODULES,"<".$product_file))
  {
    $error_string = "ERROR: open of modules file failed\n";
    error($error_string);
  }
  
  # Now read in all the components held in the product file.
  $line = 0;
  while (<MODULES>) 
  {
    chomp;
    $modline=$_;
    $line++;
    $modline =~ s/\s*#.*\Z//;
    next unless $modline;
    
    @modsplit = split(' ',$modline);
    next if (@modsplit < 1);
    if (@modsplit < 2) 
    {
      $error_string = $pfx."ERROR: malformed module definition in ".$$product."'s modules file, line ".$line."\n";
      error($error_string);
    }
    if ($pass_number == 1) # First pass, so store the values.
    {
      push @component,$modsplit[0];
      push @component_tag1,$modsplit[1];
      push @matched_component,FALSE;
    }
    else # Must be second pass
    {
      # Search through the first list and match the component:
      $match = "Not matched.";
      for ($i = 0; $i < @component; $i++)
      {
        if ($component[$i] eq $modsplit[0]) # The component name matches.
        {
          $match = "Matched.";
          $component_tag2[$i] = $modsplit[1];
          if (not($component_tag1[$i] eq $modsplit[1])) # The tags are different
          {
#            printf ("Component %s  : Tags are %s and %s.\n", $component[$i], $component_tag1[$i], $component_tag2[$i]);
          }
          $matched_component[$i] = TRUE;
        }
      }
      
      if ($match eq "Not matched.") # Must be a new component
      {
        push @new_component,$modsplit[0];
        push @new_component_tag,$modsplit[1];
#        printf ("Component %s has been added at tag %s.\n", $modsplit[0], $modsplit[1]);            
      }
    }
  }

  # Display all components that have been removed from the build (i.e. are in the first components file but not in the second).
  if ($pass_number == 2) # Is the second pass.
  {
    for ($i = 0; $i < @component; $i++)
    {
      if ($matched_component[$i] eq FALSE)
      {
#        printf ("Component $component[$i] has been removed from the file.\n");
      }    
    }
  }
  
  
#  print $log;

  close(MODULES);
}



# This routine retrieves the build log for this component. It retrieves it
#  from the VersionNum file if present.
sub retrieve_build_log()
{
  my ($component, $tag1, $tag2)=@_;
  my ($pwds, $clog);
  print LOG_FILE "\n-------------------------------------\nLogging component $component between tags $tag1 and $tag2\n\n";
  $component_location=$root_cvs_tree."/".$component;
  $pwds = `pwd`; # Store current directory.
  chdir ($component_location);
  $log.="\n\nLogging component $component between tags $tag1 and $tag2";
  $clog=`cvs log VersionNum`;
  if ($?>>8)
  {
     $log.="\n\nError logging component $component_location\n\n";
  }
  else
  {
    # Process info here.
    $log.=$clog;
    ($logs, $rev1, $rev2, %messages)=&parsecvslog($clog, $tag1, $tag2);
    
    # Write out the messages (in revision order)    
    foreach $rev (sort sort_compare_rev keys(%messages)) {
      next unless (compare_rev($rev, $rev1) > 0);  # Older log messages
      last if (compare_rev($rev, $rev2) > 0);  # Newer log messages
      print LOG_FILE $messages{$rev}."\n\n";
    }

  }
  chdir ($pwds); # Change back to where we were.

}




#
# Takes a CVS log output file and two symbolic tags (or revision numbers)
# and returns the body of the log, two revision numbers, and the hash map
# used to map symbolic tags to revision numbers.
#
sub parsecvslog {
  my ($log, $rev1, $rev2)=@_;
  my (%symbolicnames, %logmessages);

  ($log,%symbolicnames) = &symbolic_names($log);

  if ($symbolicnames{$rev1}) {
    $rev1=$symbolicnames{$rev1};
  }

  if ($symbolicnames{$rev2}) {
    $rev2=$symbolicnames{$rev2};
  }

  if ($rev1 !~ /\A(\d+\.?){1,}\Z/) 
  {
    printf("Error: Unrecognised revision 1: >>$rev1<<\n");
#    die("Unrecognised revision 1: >>$rev1<<\n");
    return ($log, $rev1, $rev2, %logmessages);
  }

  if ($rev2 !~ /\A(\d+\.?){1,}\Z/) 
  {
    printf("Error: Unrecognised revision 2: >>$rev2<<\n");
#    die("Unrecognised revision 2: >>$rev2<<\n");
    return ($log, $rev1, $rev2, %logmessages);
  }

  %logmessages = &log_messages($log);

  return ($log, $rev1, $rev2, %logmessages);
}

sub symbolic_names {
  my %tags, ($tags)=@_, $log;

  $tags =~ s/\A.*\nsymbolic names:\n//s;
  $log = $tags; 
  $tags =~ s/keyword substitution:.*\Z//s;

  while ($tags =~ /\s+(\S+)\:\s+([\d\.]+)\s*\n/sg) {
    $tags{$1}=$2;
  }

  @remainder = split(/\n/, $log);
  while ($remainder[0] !~ /\A-+\Z/) {
    shift @remainder;
  }
  pop @remainder;
  $log = join("\n", @remainder);

  return ($log,%tags);
}


# Split up the log messages.  Returns a hash with the revision
# numbers as the keys, and the log messages as the values.
#
sub log_messages {
  my ($log)=@_;
  my (%messages,@messages);

  @messages = split(/\n/, $log);

  while (@messages > 0) {
    while ($messages[0] !~ /\A-+\Z/ && @messages > 0) {
      shift @messages;
    }

    shift @messages;
    $thisrev = shift @messages;
    $thisrev =~ s/^revision\s+([\d\.]+)\s*$/$1/;
    shift @messages;
    while ($messages[0] !~ /\A\-+\Z/ && @messages > 0) {
      $messages{$thisrev} .= (shift @messages) . "\n";
    }
  }

  return %messages;
}


# Compare two revision numbers.  Returns -1, 0 or 1 in a strcmp-like
# manner meaning "earlier than", "the same as" and "later than", 
# depending on the relative values of the revision numbers.
# Works with branches too, although it takes no account of the dates
# on the differing branches.
#
# 1.9 is earlier than 1.10
# 1.1 is earlier than 1.1.1.1
# 1.2 is later than 1.1.1.1
# 2.1 is later than 1.999
# 1.1.1.2 is later than 1.1.1.1
#
sub compare_rev {
  my ($a,$b)=@_;
  @crev_a = split(/\./,$a);
  @crev_b = split(/\./,$b);

  while (@crev_a > 0) {
    my $result = (shift @crev_a) - (shift @crev_b);
    next unless $result;
    return -1 if $result < 0;
    return 1;
  }

  return 1 if (@crev_b > 0);
  return 0;
};

### WARNING: 
###
### This is a sort auxiliary function - not normal call semantics!
###
sub sort_compare_rev {
  compare_rev($a,$b);
};




#
# This routine converts the log passed in to HTML format.
sub convert_log_to_html
{  
  if ($convert_to_html eq true)
  {
    htmlize();
  }
};




#
# This routine does a basic pre-parse of the output file and attempts to
#  convert it into HTML. This is useful if the information output is to be
#  used in a release note. Note, however, that at the moment it doe not do a
#  complete job and more hand-editing needs to be dont to the final file to
#  get it into 'proper HTML.
sub htmlize
{
  local ($section_count)=0;

  # Change back to the directory that we were in when we started.
  chdir ($pwdstore); 

  # Open the output file.
  unless (open(OUTPUT,">".$final_file))
  {
    $error_string = $pfx."ERROR: open of $final_file for writing failed.\n";
    error($error_string);
  }
  
  # Open the input file.
  unless (open(INPUT,"< $output_file"))
  {
    $error_string = $pfx."ERROR: open of $$output_file for reading failed.\n";
    error($error_string);
  }
  
  # Scan through the module file, line-by-line.
  $line = 0;
  while (<INPUT>) 
  {
    chomp;
    $modline=$_;
    $line++;
    next unless $modline;
  
    # Now perform all the necessary translations on the file.
    $modline =~ s/ between tags /<\/H3>\n<SMALL>[/;
  
    $modline =~ s/Logging component RiscOS\/Sources\/Video\/MPEG\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Video\/Render\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Video\/UserI\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Toolbox\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Test\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/SystemRes\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Security\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Programmer\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Printing\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/OSVersion\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Networking\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Lib\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Kernel\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Internat\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/HWSupport\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/FileSys\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Desktop\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Audio\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\/Apps\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\/Sources\//\n<H3>5.3.&nbsp;/;
    $modline =~ s/Logging component RiscOS\//<H3>5.3.&nbsp;/;

    if ($modline=~/<H3>5.3./) # Is a section line.
    {
      $section_count++;
      $modline =~ s/<H3>5.3./<H3>5.3.$section_count/;
    }
  
    # Now replace the tags with the required html format.
    $modline =~ s/(<SMALL>\[[a-zA-Z0-9-_]+) and ([a-zA-Z0-9-_]+)/$1 -&gt; $2]<\/SMALL>\n<UL>\n  <LI>/;
    
    # Now insert the final </UL>
    $modline =~ s/-------------------------------------/<\/UL>\n\n\n/;
  
    # Now get rid of the Version string.
    $modline =~ s/Version [0-9.]+. Tagged as '[a-zA-Z0-9-_.]+'/  <LI>/;
    
    # Remove the final <li> (an extra one is created during the above process).
    $modline =~ s/<LI>\n/<\/UL>/;
  
    
    # Output the altered line to the output stream.
    print OUTPUT $modline."\n";
  }
    
  close (INPUT);
  close (OUTPUT);
};





#
# This routine parses the command line arguments and sets flags if certain options are set.
# Options currenly available are:
#   * -outputfile. The file to output to (default is ./cvslog)
#   * -root_cvs_tree. Where to locate the CVS tree.
#   * -htmlize. Whether to output another file with HTML tags added.
sub parse_command_line_args
{
  $argnum = 0;
  while ($argnum <= @ARGV-1)
  {
#    printf("Arg %d is %s\n", $argnum, $ARGV[$argnum]);  
    if ($ARGV[$argnum] eq "-outputfile")
    {
      $output_file = \$ARGV[++$argnum];
    }
    if ($ARGV[$argnum] eq "-root_cvs_tree")
    {
      $root_cvs_tree = \$ARGV[++$argnum];
    }
    if ($ARGV[$argnum] eq "-htmlize")
    {
      $convert_to_html = true;
    }
    if ($ARGV[$argnum] eq "-version1")
    {
      $versions1 = \$ARGV[++$argnum];
    }
    if ($ARGV[$argnum] eq "-version2")
    {
      $versions2 = \$ARGV[++$argnum];
    }
    if ($ARGV[$argnum] eq "-product_file")
    {
      $product_file = \$ARGV[++$argnum];
    }
    $argnum++;
  }

#  printf("Versions are %s and %s\n", $$versions1, $$versions2);
#  printf("Output file is %s\n", $$output_file);
#  printf("CVS tree root is %s\n", $$root_cvs_tree);
#  printf("Product file is %s\n", $$product_file);
  if ($convert_to_html eq true)
  {
    $final_file = $$output_file."HTML";
  }
  
  if ($$root_cvs_tree eq "")
  {
    error("Error: Must pass in a root for the CVS tree.\n");
  }
  
  $output_file = $$output_file;
  $root_cvs_tree = $$root_cvs_tree;
};





# EOF

