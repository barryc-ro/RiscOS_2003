/*
 *  Sample (module.c)
 *
 * Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
 *
 * The copyright in this material is owned by Pace Micro Technology PLC
 * ("Pace").  This material is regarded as a highly confidential trade secret
 * of Pace.  It may not be reproduced, used, sold or in any other way exploited
 * or transferred to any third party without the prior written permission of
 * Pace.
 *
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"
#include "VersionNum"
#include "samplehdr.h"
#include "module.h"

/*****************************************************************************
* module_swi
*
* SWI handler
*
* Inputs
*  as per CMHG
*
* Outputs
*  as per CMHG
*
* Returns
*  standard error block pointer
*****************************************************************************/

_kernel_oserror *module_swi(int swi_number, _kernel_swi_regs *r, void *private_word)
{
  (void) private_word;

  switch (swi_number)
  {
    case Sample_SWI1 - Sample_00:
      printf("SWI offset 1 called!\n");
      break;
    case Sample_Version - Sample_00:
      r->r[0] = Module_Version;
      break;
    default:
      return error_BAD_SWI;
  }

  return NULL;
}

/*****************************************************************************
* module_finalise
*
* Standard module finalisation handler
*
* Returns
*  error to prevent module death
*****************************************************************************/

_kernel_oserror *module_finalise(int fatal, int podule, void *private_word)
{
  (void) fatal;
  (void) podule;
  (void) private_word;

  /* Module finalisation here */

  return NULL;
}

/*****************************************************************************
* module_initialise
*
* Standard module initialisation handler
*
* Returns
*  error to prevent module being instantiated
*****************************************************************************/

_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *private_word)
{
  _kernel_oserror *e = NULL;

  (void) cmd_tail;
  (void) podule_base;
  (void) private_word;

  /* Module initialisation here */

  return e;
}

void module_service(int service_number, _kernel_swi_regs *r, void *private_word)
{
  (void) service_number;
  (void) r;
  (void) private_word;

  switch (service_number)
  {
    case Service_Serviced:
      /* Obviously, service call 0 will never arrive - but put your
       * cases in this switch statement instead.  Service call symbols
       * can be found in Global/Services.h
       */
      break;
    default:
      break;
  }

}

/*****************************************************************************
* module_command
*
* Standard module command handler
*
* Returns
*  command error
*****************************************************************************/

_kernel_oserror *module_command(const char *arg_string, int argc, int cmd_no, void *private_word)
{
  (void) argc;
  (void) arg_string;
  (void) cmd_no;
  (void) private_word;

  switch (cmd_no)
  {
    case CMD_Sample:
      (void) _swix(OS_Write0, _IN(0),
        Module_Title " " Module_MajorVersion " "
        Module_MinorVersion " (" Module_Date ")");
      (void) _swix(OS_NewLine, 0);
      break;

    default:
      break;
  }

  return NULL;
}
