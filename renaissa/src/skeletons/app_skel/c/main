/************************************************************************/
/*                  Copyright 1998 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "wimp.h"
#include "toolbox.h"
#include "event.h"
#include "wimplib.h"
#include "gadgets.h"
#include "window.h"
#include "menu.h"
#include "proginfo.h"
#include "iconbar.h"

#include "constants.h"
#include "resources.h"

#define WimpVersion    350

static  WimpPollBlock  poll_block;
static  MessagesFD     messages;
static  IdBlock        id_block;

int  task_handle          = 0;  /* Wimp task handle */
int  iconbar_id           = 0;  /* object ids */
int  menu_iconbar_id      = 0;
int  proginfo_id	  = 0;

/* 
 * clean up before exit
 */
int
quit_all(void)
{
  exit(0);
  
  return (1);
}

/*
 *
 * Event handler to be called when toolbox event 1 is generated (by click on the
 * 'Quit' entry of the iconbar menu.
 */
int
event_quit(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  return (quit_all());
}

/*
 * Message handler to be called on receipt of a Quit or PreQuit message from the
 * Wimp.
 */
int
message_quit(WimpMessage *message, void *handle)
{
  message = message;
  handle = handle;

  return (quit_all());
}

/*
 * attach_other_handlers
 */
int 
attach_other_handlers(int event_code,ToolboxEvent *event,
			IdBlock *id_block, void *handle)
{
  _kernel_oserror *err = NULL;
  char template_name[25];
  int i;
  
  ERR_CHECK(err,toolbox_get_template_name(0,id_block->self_id,template_name,
      				     sizeof(template_name),&i));

  if (strcmp(template_name, ICONBAR_NAME) == 0) {
    iconbar_id = id_block->self_id;
  } else if (strcmp(template_name, MENU_ICONBAR_NAME) == 0) {
    menu_iconbar_id = id_block->self_id;
  } else if (strcmp(template_name, PROGINFO_NAME) ==0) {
    proginfo_id = id_block->self_id;
  }
  return 0;
}

/*
 * Enter the correct version string into window
 */
int
proginfo_show(int event_code,ToolboxEvent *event,
    			    IdBlock *id_block, void *handle)
{
  proginfo_set_version(0,id_block->self_id,APP_VERSION);
  return 0;
}


/*
 * main initialisation
 */
int main()
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs reg;
  int toolbox_events = 0;
  int wimp_messages  = 0;
  int event_code;
  int quiting=FALSE;
  
  event_initialise(&id_block);          /* initialise the event library. */
  event_set_mask(Wimp_Poll_NullMask); 	/* mask out un-required wimp events */

  ERR_GOTO(err,event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,
      attach_other_handlers,NULL));

  /* register ourselves with the Toolbox. */
  ERR_GOTO(err,toolbox_initialise(0, WimpVersion, &wimp_messages,
      &toolbox_events,APP_DIR,&messages,&id_block,0,0,0));

  /* Message handlers */
  ERR_GOTO(err,event_register_message_handler(Wimp_MQuit,
             message_quit,NULL));
  ERR_GOTO(err,event_register_message_handler(Wimp_MPreQuit,
             message_quit,NULL));


  /* Menu event handlers */
  ERR_GOTO(err,event_register_toolbox_handler(-1,MENU_EVENT_QUIT,
             event_quit,NULL));

  /* Window event handlers */
  ERR_GOTO(err,event_register_toolbox_handler(-1,ProgInfo_AboutToBeShown,
      proginfo_show,NULL));

  toolbox_get_sys_info(3,&reg);  /* Obtain wimp task handle */
  task_handle = reg.r[0];

  if (!quiting) {
    /* poll loop */
    while (TRUE) {
      event_poll (&event_code, &poll_block, 0);
    }
  }

exit_gracefully:
  if (err != NULL) {
    wimp_report_error(err,0,0);
  }

  return (0);
}
