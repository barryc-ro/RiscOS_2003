#!/usr/local/bin/perl
#
#   Copyright (c) 1999 by Pace Micro Technology plc. All Rights Reserved.
# 
# 
#  This software is furnished under a license and may be used and copied
#  only in accordance with the terms of such license and with the
#  inclusion of the above copyright notice. This software or any other
#  copies thereof may not be provided or otherwise made available to any
#  other person. No title to and ownership of the software is hereby
#  transferred.
# 
#  The information in this software is subject to change without notice
#  and should not be construed as a commitment by Pace Micro Techonology
#  plc.
# 
# 
#                 PROPRIETARY NOTICE
# 
#  This software is an unpublished work subject to a confidentiality agreement
#  and is protected by copyright and trade secret law.  Unauthorized copying,
#  redistribution or other use of this work is prohibited.
# 
#  The above notice of copyright on this source code product does not indicate
#  any actual or intended publication of such source code.
 
#
#  blbuild - baseline archive builder.
#
#  Usage: blbuild <module> <config file>
#
#
#  To build the default archive using decisions made by blconf without change,
#  use:  blconf <baseline directory> | blbuild <squeezed module filename>
#
#  $Id$
# 

# The output module filename must always be specified.
$module=shift @ARGV;
die("No output module filename specified\n") unless $module;

# Default to accepting configuration file on standard input
$blconf=shift @ARGV;
$blconf='-' unless $blconf;

# Ensure that we remove the temporary directory on exit
use sigtrap qw(die normal-signals);

# This is the name of the system variable which points to the root directory
# of the baseline on the network server.
$stbrootdirvar='NetRoot$Dir';

# The temporary directory name and all the temporary filenames that we need.
$tmpdir="/tmp/blbuild.$$";
mkdir $tmpdir,0700 || die("Unable to create temporary directory $tmpdir: $!\n");

$mgconf=$tmpdir.'/modgen.conf';
$tmpmod=$tmpdir.'/modgen.out';
$lnkdir=$tmpdir.'/lnk.';

open(VIA, '>'.$mgconf) || die("Unable to open modgen configuration file $mgconf: $!\n");

open(CONFIG, $blconf) || die("Unable to read configuration file $blconf: $!\n");
while (<CONFIG>) {
  chomp;
  s/\s*(\#.*)?\Z//;
  next unless $_;
  if (/\Abaseline=(.+)\s*\Z/) {
    $dir=$1;
    next;
  }
  if (/([EIL])\s(.*)/) {
    my ($opt,$name)=($1,$2);
    $dir{$name}=$opt if $1 =~ /I/;
    $lnk{$name}=$opt if $1 =~ /L/;
    next;
  }
  die("Unexpected line in file: $_\n");
}
close(CONFIG);

die("Unable to determine baseline location - missing baseline directive in input\n") unless $dir;

# Linked directories.  Generate the files in the temporary directory and output the
# modgen via information for the new stub file instead of the actual file.  The
# atime and mtime of the original file are copied to the new file.
#
$lnknum=0;

foreach $d (keys(%lnk)) {
  my @files=filelist($d);
  my $thisdir = &maketemp();
  foreach $f (@files) {
    my $thisfile;
    my $name=$d . '/' . $f;
    my @statfields=stat($name);
    $f=swapchars($f);
    next unless ($f =~ /\A\!BOOT\Z/i || $f =~ /\A\!RUN\Z/i || $f =~ /\A\!HELP\Z/i);
    $thisfile=$thisdir.'/'.$f.',feb';
    open(TMP, '> '.$thisfile) || die("Unable to create stub file $thisfile: $!\n");
    print TMP 'Run <', $stbrootdirvar, '>.', swapchars($name,$dir), '%*0';
    close TMP;
    utime $statfields[8],$statfields[9],$thisfile;
    print VIA $thisfile, " ", swapchars($name,$dir), "\n";
  }
  foreach $e (keys(%dir)) {
    # Now wipe out subdirectories
    next unless $e =~ /\A$d/;
    $dir{$e}='E';
  }
}

# Included directories.  Place one entry per file in the modgen via file.
#
foreach $d (keys(%dir)) {
  my @files=filelist($d);
  my ($thisfile, $thisdir);
  next if $dir{$d} =~ 'E';
  foreach $f (@files) {
    my $name=$d . '/' . $f;
    if ($name =~ /\A(.*),ffa\Z/) {
      my @statfields=stat($name);
      my $thisdir = &maketemp();
      my $thisfile = $thisdir . '/' . $f;
      print VIA $thisfile, " ", swapchars($name,$dir), "\n";
      unmodsqz($name, $thisfile);
      utime $statfields[8],$statfields[9],$thisfile;
    }
    else {
      print VIA $name, " ", swapchars($name,$dir), "\n";
    }
  }
}

close VIA;

# Generate the module
if (modgen($tmpmod,$mgconf)) {
  die("modgen failed - archive construction aborted\n");
}
# Squeeze the module
if (modsqz($tmpmod,$module)) {
  die("modsqz failed - archive construction aborted\n");
}

# Normal successful exit.
exit(0);

# Delete the temporary directory
#
END {
  system("rm -rf $tmpdir") if $tmpdir;
};

# Translate the supplied absolute pathname into a ResourceFS friendly name by stripping the
# named directory from the front of the name (if one is specified), swapping . and / chars,
# and removing any filetype suffix.
#
sub swapchars {
  my ($name,$dir)=@_;
  $name =~ s/^$dir\///;
  $name =~ s/,[\da-f][\da-f][\da-f]\Z//;
  $name =~ tr/\.\//\/\./;
  return $name;
};


# This function returns an array containing the names of all file objects
# in the specified directory.
#
sub filelist {
  my ($dir) = @_;
  my @files;

  opendir(DIR, $dir) || die "can't opendir $dir: $!";
  @files = grep { -f "$dir/$_" } readdir(DIR);
  closedir DIR;

  return @files;
};

# This function creates a new temporary directory for holding link stubs
# or unsqueezed versions of modules.
#
sub maketemp {
  my $thisdir;
  ++$lnknum;
  $thisdir=$lnkdir.$lnknum;
  mkdir $thisdir,0700 || die("Unable to create temporary directory $thisdir: $!\n");
  return $thisdir;
};

# Execute modgen, modsqz and unmodsqz.
sub modgen {
  my ($modgenout,$config)=@_;
  system("modgen", $modgenout, "Baseline", "TFTP Baseline", "1.00", "-via", $config);
  return ($? >> 8);
};

sub modsqz {
  my ($infile,$outfile)=@_;
  system("modsqz", "-f", $infile, $outfile);
  return ($? >> 8);
};

sub unmodsqz {
  my ($infile,$outfile)=@_;
  system("unmodsqz", $infile, $outfile);
  return ($? >> 8);
};

# EOF.
